# ./_nsgroup.py
# PyXB bindings for NamespaceGroupModule
# NGM:a0263b480c7ee77ea51c8a89be966ef1ade4a91b
# Incorporated namespaces:
#  http://schemas.openxmlformats.org/presentationml/2006/main None
#  http://schemas.openxmlformats.org/drawingml/2006/diagram None
#  http://schemas.openxmlformats.org/drawingml/2006/main a

import pyxb
import pyxb.binding
import pyxb.utils.utility

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:d927ef8c-85d5-11df-b55a-0026b9799156')

# Import bindings for schemas in group
import pyxb.binding.datatypes
import _s
import _r

_Namespace_a = pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/drawingml/2006/main', create_if_missing=True)
_Namespace_a.configureCategories(['typeBinding', 'elementBinding'])
_Namespace = pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/drawingml/2006/diagram', create_if_missing=True)
_Namespace.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_ = pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/presentationml/2006/main', create_if_missing=True)
_Namespace_.configureCategories(['typeBinding', 'elementBinding'])

# Atomic SimpleTypeDefinition
class ST_TextFontAlignType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Font Alignment Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextFontAlignType')
    _Documentation = u'Font Alignment Types'
ST_TextFontAlignType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextFontAlignType, enum_prefix=None)
ST_TextFontAlignType.auto = ST_TextFontAlignType._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_TextFontAlignType.t = ST_TextFontAlignType._CF_enumeration.addEnumeration(unicode_value=u't')
ST_TextFontAlignType.ctr = ST_TextFontAlignType._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_TextFontAlignType.base = ST_TextFontAlignType._CF_enumeration.addEnumeration(unicode_value=u'base')
ST_TextFontAlignType.b = ST_TextFontAlignType._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_TextFontAlignType._InitializeFacetMap(ST_TextFontAlignType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextFontAlignType', ST_TextFontAlignType)

# Atomic SimpleTypeDefinition
class ST_TextAlignType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Alignment Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextAlignType')
    _Documentation = u'Text Alignment Types'
ST_TextAlignType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextAlignType, enum_prefix=None)
ST_TextAlignType.l = ST_TextAlignType._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_TextAlignType.ctr = ST_TextAlignType._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_TextAlignType.r = ST_TextAlignType._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_TextAlignType.just = ST_TextAlignType._CF_enumeration.addEnumeration(unicode_value=u'just')
ST_TextAlignType.justLow = ST_TextAlignType._CF_enumeration.addEnumeration(unicode_value=u'justLow')
ST_TextAlignType.dist = ST_TextAlignType._CF_enumeration.addEnumeration(unicode_value=u'dist')
ST_TextAlignType.thaiDist = ST_TextAlignType._CF_enumeration.addEnumeration(unicode_value=u'thaiDist')
ST_TextAlignType._InitializeFacetMap(ST_TextAlignType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextAlignType', ST_TextAlignType)

# Atomic SimpleTypeDefinition
class ST_TextIndentLevelType (pyxb.binding.datatypes.int):

    """Text Indent Level Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextIndentLevelType')
    _Documentation = u'Text Indent Level Type'
ST_TextIndentLevelType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextIndentLevelType, value=pyxb.binding.datatypes.int(8))
ST_TextIndentLevelType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextIndentLevelType, value=pyxb.binding.datatypes.int(0))
ST_TextIndentLevelType._InitializeFacetMap(ST_TextIndentLevelType._CF_maxInclusive,
   ST_TextIndentLevelType._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextIndentLevelType', ST_TextIndentLevelType)

# Atomic SimpleTypeDefinition
class ST_Coordinate32Unqualified (pyxb.binding.datatypes.int):

    """Coordinate Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_Coordinate32Unqualified')
    _Documentation = u'Coordinate Point'
ST_Coordinate32Unqualified._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_Coordinate32Unqualified', ST_Coordinate32Unqualified)

# Atomic SimpleTypeDefinition
class ST_TextIndent (ST_Coordinate32Unqualified):

    """Text Indentation"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextIndent')
    _Documentation = u'Text Indentation'
ST_TextIndent._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextIndent, value=pyxb.binding.datatypes.int(51206400))
ST_TextIndent._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextIndent, value=pyxb.binding.datatypes.int(-51206400))
ST_TextIndent._InitializeFacetMap(ST_TextIndent._CF_maxInclusive,
   ST_TextIndent._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextIndent', ST_TextIndent)

# Atomic SimpleTypeDefinition
class ST_TextMargin (ST_Coordinate32Unqualified):

    """Text Margin"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextMargin')
    _Documentation = u'Text Margin'
ST_TextMargin._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextMargin, value=pyxb.binding.datatypes.int(51206400))
ST_TextMargin._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextMargin, value=pyxb.binding.datatypes.int(0))
ST_TextMargin._InitializeFacetMap(ST_TextMargin._CF_maxInclusive,
   ST_TextMargin._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextMargin', ST_TextMargin)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_Coordinate32 (pyxb.binding.basis.STD_union):

    """Coordinate Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_Coordinate32')
    _Documentation = u'Coordinate Point'

    _MemberTypes = ( ST_Coordinate32Unqualified, _s.ST_UniversalMeasure, )
ST_Coordinate32._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_Coordinate32._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Coordinate32)
ST_Coordinate32._InitializeFacetMap(ST_Coordinate32._CF_pattern,
   ST_Coordinate32._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_Coordinate32', ST_Coordinate32)

# Atomic SimpleTypeDefinition
class ST_PercentageDecimal (pyxb.binding.datatypes.int):

    """Percentage as Decimal Number"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PercentageDecimal')
    _Documentation = u'Percentage as Decimal Number'
ST_PercentageDecimal._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_PercentageDecimal', ST_PercentageDecimal)

# Atomic SimpleTypeDefinition
class ST_PositivePercentageDecimal (ST_PercentageDecimal):

    """Positive Percentage as Decimal Number"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PositivePercentageDecimal')
    _Documentation = u'Positive Percentage as Decimal Number'
ST_PositivePercentageDecimal._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_PositivePercentageDecimal, value=pyxb.binding.datatypes.int(0))
ST_PositivePercentageDecimal._InitializeFacetMap(ST_PositivePercentageDecimal._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PositivePercentageDecimal', ST_PositivePercentageDecimal)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_PositivePercentage (pyxb.binding.basis.STD_union):

    """Positive Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PositivePercentage')
    _Documentation = u'Positive Percentage'

    _MemberTypes = ( ST_PositivePercentageDecimal, _s.ST_PositivePercentage, )
ST_PositivePercentage._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_PositivePercentage._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PositivePercentage)
ST_PositivePercentage._InitializeFacetMap(ST_PositivePercentage._CF_pattern,
   ST_PositivePercentage._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PositivePercentage', ST_PositivePercentage)

# Atomic SimpleTypeDefinition
class ST_PositiveFixedPercentageDecimal (ST_PercentageDecimal):

    """Positive Fixed Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PositiveFixedPercentageDecimal')
    _Documentation = u'Positive Fixed Percentage'
ST_PositiveFixedPercentageDecimal._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_PositiveFixedPercentageDecimal, value=pyxb.binding.datatypes.int(100000))
ST_PositiveFixedPercentageDecimal._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_PositiveFixedPercentageDecimal, value=pyxb.binding.datatypes.int(0))
ST_PositiveFixedPercentageDecimal._InitializeFacetMap(ST_PositiveFixedPercentageDecimal._CF_maxInclusive,
   ST_PositiveFixedPercentageDecimal._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PositiveFixedPercentageDecimal', ST_PositiveFixedPercentageDecimal)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_PositiveFixedPercentage (pyxb.binding.basis.STD_union):

    """Positive Fixed Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PositiveFixedPercentage')
    _Documentation = u'Positive Fixed Percentage'

    _MemberTypes = ( ST_PositiveFixedPercentageDecimal, _s.ST_PositiveFixedPercentage, )
ST_PositiveFixedPercentage._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_PositiveFixedPercentage._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PositiveFixedPercentage)
ST_PositiveFixedPercentage._InitializeFacetMap(ST_PositiveFixedPercentage._CF_pattern,
   ST_PositiveFixedPercentage._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PositiveFixedPercentage', ST_PositiveFixedPercentage)

# Atomic SimpleTypeDefinition
class ST_PenAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Alignment Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PenAlignment')
    _Documentation = u'Alignment Type'
ST_PenAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PenAlignment, enum_prefix=None)
ST_PenAlignment.ctr = ST_PenAlignment._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_PenAlignment.in_ = ST_PenAlignment._CF_enumeration.addEnumeration(unicode_value=u'in')
ST_PenAlignment._InitializeFacetMap(ST_PenAlignment._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PenAlignment', ST_PenAlignment)

# Atomic SimpleTypeDefinition
class ST_CompoundLine (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Compound Line Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_CompoundLine')
    _Documentation = u'Compound Line Type'
ST_CompoundLine._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CompoundLine, enum_prefix=None)
ST_CompoundLine.sng = ST_CompoundLine._CF_enumeration.addEnumeration(unicode_value=u'sng')
ST_CompoundLine.dbl = ST_CompoundLine._CF_enumeration.addEnumeration(unicode_value=u'dbl')
ST_CompoundLine.thickThin = ST_CompoundLine._CF_enumeration.addEnumeration(unicode_value=u'thickThin')
ST_CompoundLine.thinThick = ST_CompoundLine._CF_enumeration.addEnumeration(unicode_value=u'thinThick')
ST_CompoundLine.tri = ST_CompoundLine._CF_enumeration.addEnumeration(unicode_value=u'tri')
ST_CompoundLine._InitializeFacetMap(ST_CompoundLine._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_CompoundLine', ST_CompoundLine)

# Atomic SimpleTypeDefinition
class ST_LineWidth (ST_Coordinate32Unqualified):

    """Line Width"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_LineWidth')
    _Documentation = u'Line Width'
ST_LineWidth._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_LineWidth, value=pyxb.binding.datatypes.int(20116800))
ST_LineWidth._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_LineWidth, value=pyxb.binding.datatypes.int(0))
ST_LineWidth._InitializeFacetMap(ST_LineWidth._CF_maxInclusive,
   ST_LineWidth._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_LineWidth', ST_LineWidth)

# Atomic SimpleTypeDefinition
class ST_LineCap (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """End Line Cap"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_LineCap')
    _Documentation = u'End Line Cap'
ST_LineCap._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LineCap, enum_prefix=None)
ST_LineCap.rnd = ST_LineCap._CF_enumeration.addEnumeration(unicode_value=u'rnd')
ST_LineCap.sq = ST_LineCap._CF_enumeration.addEnumeration(unicode_value=u'sq')
ST_LineCap.flat = ST_LineCap._CF_enumeration.addEnumeration(unicode_value=u'flat')
ST_LineCap._InitializeFacetMap(ST_LineCap._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_LineCap', ST_LineCap)

# Atomic SimpleTypeDefinition
class ST_TileFlipMode (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Tile Flip Mode"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TileFlipMode')
    _Documentation = u'Tile Flip Mode'
ST_TileFlipMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TileFlipMode, enum_prefix=None)
ST_TileFlipMode.none = ST_TileFlipMode._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TileFlipMode.x = ST_TileFlipMode._CF_enumeration.addEnumeration(unicode_value=u'x')
ST_TileFlipMode.y = ST_TileFlipMode._CF_enumeration.addEnumeration(unicode_value=u'y')
ST_TileFlipMode.xy = ST_TileFlipMode._CF_enumeration.addEnumeration(unicode_value=u'xy')
ST_TileFlipMode._InitializeFacetMap(ST_TileFlipMode._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TileFlipMode', ST_TileFlipMode)

# Atomic SimpleTypeDefinition
class ST_PresetColorVal (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Color Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PresetColorVal')
    _Documentation = u'Preset Color Value'
ST_PresetColorVal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PresetColorVal, enum_prefix=None)
ST_PresetColorVal.aliceBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'aliceBlue')
ST_PresetColorVal.antiqueWhite = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'antiqueWhite')
ST_PresetColorVal.aqua = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'aqua')
ST_PresetColorVal.aquamarine = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'aquamarine')
ST_PresetColorVal.azure = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'azure')
ST_PresetColorVal.beige = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'beige')
ST_PresetColorVal.bisque = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'bisque')
ST_PresetColorVal.black = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'black')
ST_PresetColorVal.blanchedAlmond = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'blanchedAlmond')
ST_PresetColorVal.blue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'blue')
ST_PresetColorVal.blueViolet = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'blueViolet')
ST_PresetColorVal.brown = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'brown')
ST_PresetColorVal.burlyWood = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'burlyWood')
ST_PresetColorVal.cadetBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'cadetBlue')
ST_PresetColorVal.chartreuse = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'chartreuse')
ST_PresetColorVal.chocolate = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'chocolate')
ST_PresetColorVal.coral = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'coral')
ST_PresetColorVal.cornflowerBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'cornflowerBlue')
ST_PresetColorVal.cornsilk = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'cornsilk')
ST_PresetColorVal.crimson = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'crimson')
ST_PresetColorVal.cyan = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'cyan')
ST_PresetColorVal.darkBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkBlue')
ST_PresetColorVal.darkCyan = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkCyan')
ST_PresetColorVal.darkGoldenrod = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkGoldenrod')
ST_PresetColorVal.darkGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkGray')
ST_PresetColorVal.darkGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkGrey')
ST_PresetColorVal.darkGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkGreen')
ST_PresetColorVal.darkKhaki = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkKhaki')
ST_PresetColorVal.darkMagenta = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkMagenta')
ST_PresetColorVal.darkOliveGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkOliveGreen')
ST_PresetColorVal.darkOrange = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkOrange')
ST_PresetColorVal.darkOrchid = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkOrchid')
ST_PresetColorVal.darkRed = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkRed')
ST_PresetColorVal.darkSalmon = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkSalmon')
ST_PresetColorVal.darkSeaGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkSeaGreen')
ST_PresetColorVal.darkSlateBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkSlateBlue')
ST_PresetColorVal.darkSlateGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkSlateGray')
ST_PresetColorVal.darkSlateGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkSlateGrey')
ST_PresetColorVal.darkTurquoise = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkTurquoise')
ST_PresetColorVal.darkViolet = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkViolet')
ST_PresetColorVal.dkBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkBlue')
ST_PresetColorVal.dkCyan = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkCyan')
ST_PresetColorVal.dkGoldenrod = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkGoldenrod')
ST_PresetColorVal.dkGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkGray')
ST_PresetColorVal.dkGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkGrey')
ST_PresetColorVal.dkGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkGreen')
ST_PresetColorVal.dkKhaki = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkKhaki')
ST_PresetColorVal.dkMagenta = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkMagenta')
ST_PresetColorVal.dkOliveGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkOliveGreen')
ST_PresetColorVal.dkOrange = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkOrange')
ST_PresetColorVal.dkOrchid = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkOrchid')
ST_PresetColorVal.dkRed = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkRed')
ST_PresetColorVal.dkSalmon = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkSalmon')
ST_PresetColorVal.dkSeaGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkSeaGreen')
ST_PresetColorVal.dkSlateBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkSlateBlue')
ST_PresetColorVal.dkSlateGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkSlateGray')
ST_PresetColorVal.dkSlateGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkSlateGrey')
ST_PresetColorVal.dkTurquoise = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkTurquoise')
ST_PresetColorVal.dkViolet = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkViolet')
ST_PresetColorVal.deepPink = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'deepPink')
ST_PresetColorVal.deepSkyBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'deepSkyBlue')
ST_PresetColorVal.dimGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dimGray')
ST_PresetColorVal.dimGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dimGrey')
ST_PresetColorVal.dodgerBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dodgerBlue')
ST_PresetColorVal.firebrick = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'firebrick')
ST_PresetColorVal.floralWhite = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'floralWhite')
ST_PresetColorVal.forestGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'forestGreen')
ST_PresetColorVal.fuchsia = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'fuchsia')
ST_PresetColorVal.gainsboro = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'gainsboro')
ST_PresetColorVal.ghostWhite = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ghostWhite')
ST_PresetColorVal.gold = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'gold')
ST_PresetColorVal.goldenrod = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'goldenrod')
ST_PresetColorVal.gray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'gray')
ST_PresetColorVal.grey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'grey')
ST_PresetColorVal.green = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'green')
ST_PresetColorVal.greenYellow = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'greenYellow')
ST_PresetColorVal.honeydew = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'honeydew')
ST_PresetColorVal.hotPink = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'hotPink')
ST_PresetColorVal.indianRed = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'indianRed')
ST_PresetColorVal.indigo = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'indigo')
ST_PresetColorVal.ivory = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ivory')
ST_PresetColorVal.khaki = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'khaki')
ST_PresetColorVal.lavender = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lavender')
ST_PresetColorVal.lavenderBlush = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lavenderBlush')
ST_PresetColorVal.lawnGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lawnGreen')
ST_PresetColorVal.lemonChiffon = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lemonChiffon')
ST_PresetColorVal.lightBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightBlue')
ST_PresetColorVal.lightCoral = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightCoral')
ST_PresetColorVal.lightCyan = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightCyan')
ST_PresetColorVal.lightGoldenrodYellow = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightGoldenrodYellow')
ST_PresetColorVal.lightGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightGray')
ST_PresetColorVal.lightGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightGrey')
ST_PresetColorVal.lightGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightGreen')
ST_PresetColorVal.lightPink = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightPink')
ST_PresetColorVal.lightSalmon = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightSalmon')
ST_PresetColorVal.lightSeaGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightSeaGreen')
ST_PresetColorVal.lightSkyBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightSkyBlue')
ST_PresetColorVal.lightSlateGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightSlateGray')
ST_PresetColorVal.lightSlateGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightSlateGrey')
ST_PresetColorVal.lightSteelBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightSteelBlue')
ST_PresetColorVal.lightYellow = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightYellow')
ST_PresetColorVal.ltBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltBlue')
ST_PresetColorVal.ltCoral = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltCoral')
ST_PresetColorVal.ltCyan = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltCyan')
ST_PresetColorVal.ltGoldenrodYellow = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltGoldenrodYellow')
ST_PresetColorVal.ltGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltGray')
ST_PresetColorVal.ltGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltGrey')
ST_PresetColorVal.ltGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltGreen')
ST_PresetColorVal.ltPink = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltPink')
ST_PresetColorVal.ltSalmon = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltSalmon')
ST_PresetColorVal.ltSeaGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltSeaGreen')
ST_PresetColorVal.ltSkyBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltSkyBlue')
ST_PresetColorVal.ltSlateGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltSlateGray')
ST_PresetColorVal.ltSlateGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltSlateGrey')
ST_PresetColorVal.ltSteelBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltSteelBlue')
ST_PresetColorVal.ltYellow = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltYellow')
ST_PresetColorVal.lime = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lime')
ST_PresetColorVal.limeGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'limeGreen')
ST_PresetColorVal.linen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'linen')
ST_PresetColorVal.magenta = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'magenta')
ST_PresetColorVal.maroon = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'maroon')
ST_PresetColorVal.medAquamarine = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medAquamarine')
ST_PresetColorVal.medBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medBlue')
ST_PresetColorVal.medOrchid = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medOrchid')
ST_PresetColorVal.medPurple = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medPurple')
ST_PresetColorVal.medSeaGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medSeaGreen')
ST_PresetColorVal.medSlateBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medSlateBlue')
ST_PresetColorVal.medSpringGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medSpringGreen')
ST_PresetColorVal.medTurquoise = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medTurquoise')
ST_PresetColorVal.medVioletRed = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medVioletRed')
ST_PresetColorVal.mediumAquamarine = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumAquamarine')
ST_PresetColorVal.mediumBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumBlue')
ST_PresetColorVal.mediumOrchid = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumOrchid')
ST_PresetColorVal.mediumPurple = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumPurple')
ST_PresetColorVal.mediumSeaGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumSeaGreen')
ST_PresetColorVal.mediumSlateBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumSlateBlue')
ST_PresetColorVal.mediumSpringGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumSpringGreen')
ST_PresetColorVal.mediumTurquoise = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumTurquoise')
ST_PresetColorVal.mediumVioletRed = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumVioletRed')
ST_PresetColorVal.midnightBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'midnightBlue')
ST_PresetColorVal.mintCream = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mintCream')
ST_PresetColorVal.mistyRose = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mistyRose')
ST_PresetColorVal.moccasin = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'moccasin')
ST_PresetColorVal.navajoWhite = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'navajoWhite')
ST_PresetColorVal.navy = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'navy')
ST_PresetColorVal.oldLace = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'oldLace')
ST_PresetColorVal.olive = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'olive')
ST_PresetColorVal.oliveDrab = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'oliveDrab')
ST_PresetColorVal.orange = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'orange')
ST_PresetColorVal.orangeRed = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'orangeRed')
ST_PresetColorVal.orchid = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'orchid')
ST_PresetColorVal.paleGoldenrod = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'paleGoldenrod')
ST_PresetColorVal.paleGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'paleGreen')
ST_PresetColorVal.paleTurquoise = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'paleTurquoise')
ST_PresetColorVal.paleVioletRed = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'paleVioletRed')
ST_PresetColorVal.papayaWhip = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'papayaWhip')
ST_PresetColorVal.peachPuff = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'peachPuff')
ST_PresetColorVal.peru = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'peru')
ST_PresetColorVal.pink = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'pink')
ST_PresetColorVal.plum = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'plum')
ST_PresetColorVal.powderBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'powderBlue')
ST_PresetColorVal.purple = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'purple')
ST_PresetColorVal.red = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'red')
ST_PresetColorVal.rosyBrown = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'rosyBrown')
ST_PresetColorVal.royalBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'royalBlue')
ST_PresetColorVal.saddleBrown = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'saddleBrown')
ST_PresetColorVal.salmon = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'salmon')
ST_PresetColorVal.sandyBrown = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'sandyBrown')
ST_PresetColorVal.seaGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'seaGreen')
ST_PresetColorVal.seaShell = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'seaShell')
ST_PresetColorVal.sienna = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'sienna')
ST_PresetColorVal.silver = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'silver')
ST_PresetColorVal.skyBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'skyBlue')
ST_PresetColorVal.slateBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'slateBlue')
ST_PresetColorVal.slateGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'slateGray')
ST_PresetColorVal.slateGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'slateGrey')
ST_PresetColorVal.snow = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'snow')
ST_PresetColorVal.springGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'springGreen')
ST_PresetColorVal.steelBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'steelBlue')
ST_PresetColorVal.tan = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'tan')
ST_PresetColorVal.teal = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'teal')
ST_PresetColorVal.thistle = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'thistle')
ST_PresetColorVal.tomato = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'tomato')
ST_PresetColorVal.turquoise = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'turquoise')
ST_PresetColorVal.violet = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'violet')
ST_PresetColorVal.wheat = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'wheat')
ST_PresetColorVal.white = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'white')
ST_PresetColorVal.whiteSmoke = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'whiteSmoke')
ST_PresetColorVal.yellow = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'yellow')
ST_PresetColorVal.yellowGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'yellowGreen')
ST_PresetColorVal._InitializeFacetMap(ST_PresetColorVal._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PresetColorVal', ST_PresetColorVal)

# Atomic SimpleTypeDefinition
class ST_CoordinateUnqualified (pyxb.binding.datatypes.long):

    """Coordinate"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_CoordinateUnqualified')
    _Documentation = u'Coordinate'
ST_CoordinateUnqualified._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_CoordinateUnqualified, value=pyxb.binding.datatypes.long(27273042316900L))
ST_CoordinateUnqualified._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_CoordinateUnqualified, value=pyxb.binding.datatypes.long(-27273042329600L))
ST_CoordinateUnqualified._InitializeFacetMap(ST_CoordinateUnqualified._CF_maxInclusive,
   ST_CoordinateUnqualified._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_CoordinateUnqualified', ST_CoordinateUnqualified)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_Coordinate (pyxb.binding.basis.STD_union):

    """Coordinate"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_Coordinate')
    _Documentation = u'Coordinate'

    _MemberTypes = ( ST_CoordinateUnqualified, _s.ST_UniversalMeasure, )
ST_Coordinate._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_Coordinate._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Coordinate)
ST_Coordinate._InitializeFacetMap(ST_Coordinate._CF_pattern,
   ST_Coordinate._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_Coordinate', ST_Coordinate)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_Percentage (pyxb.binding.basis.STD_union):

    """Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_Percentage')
    _Documentation = u'Percentage'

    _MemberTypes = ( ST_PercentageDecimal, _s.ST_Percentage, )
ST_Percentage._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_Percentage._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Percentage)
ST_Percentage._InitializeFacetMap(ST_Percentage._CF_pattern,
   ST_Percentage._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_Percentage', ST_Percentage)

# Atomic SimpleTypeDefinition
class ST_PresetPatternVal (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Pattern Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PresetPatternVal')
    _Documentation = u'Preset Pattern Value'
ST_PresetPatternVal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PresetPatternVal, enum_prefix=None)
ST_PresetPatternVal.pct5 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct5')
ST_PresetPatternVal.pct10 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct10')
ST_PresetPatternVal.pct20 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct20')
ST_PresetPatternVal.pct25 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct25')
ST_PresetPatternVal.pct30 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct30')
ST_PresetPatternVal.pct40 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct40')
ST_PresetPatternVal.pct50 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct50')
ST_PresetPatternVal.pct60 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct60')
ST_PresetPatternVal.pct70 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct70')
ST_PresetPatternVal.pct75 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct75')
ST_PresetPatternVal.pct80 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct80')
ST_PresetPatternVal.pct90 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct90')
ST_PresetPatternVal.horz = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'horz')
ST_PresetPatternVal.vert = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'vert')
ST_PresetPatternVal.ltHorz = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'ltHorz')
ST_PresetPatternVal.ltVert = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'ltVert')
ST_PresetPatternVal.dkHorz = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dkHorz')
ST_PresetPatternVal.dkVert = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dkVert')
ST_PresetPatternVal.narHorz = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'narHorz')
ST_PresetPatternVal.narVert = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'narVert')
ST_PresetPatternVal.dashHorz = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dashHorz')
ST_PresetPatternVal.dashVert = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dashVert')
ST_PresetPatternVal.cross = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'cross')
ST_PresetPatternVal.dnDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dnDiag')
ST_PresetPatternVal.upDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'upDiag')
ST_PresetPatternVal.ltDnDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'ltDnDiag')
ST_PresetPatternVal.ltUpDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'ltUpDiag')
ST_PresetPatternVal.dkDnDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dkDnDiag')
ST_PresetPatternVal.dkUpDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dkUpDiag')
ST_PresetPatternVal.wdDnDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'wdDnDiag')
ST_PresetPatternVal.wdUpDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'wdUpDiag')
ST_PresetPatternVal.dashDnDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dashDnDiag')
ST_PresetPatternVal.dashUpDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dashUpDiag')
ST_PresetPatternVal.diagCross = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'diagCross')
ST_PresetPatternVal.smCheck = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'smCheck')
ST_PresetPatternVal.lgCheck = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'lgCheck')
ST_PresetPatternVal.smGrid = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'smGrid')
ST_PresetPatternVal.lgGrid = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'lgGrid')
ST_PresetPatternVal.dotGrid = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dotGrid')
ST_PresetPatternVal.smConfetti = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'smConfetti')
ST_PresetPatternVal.lgConfetti = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'lgConfetti')
ST_PresetPatternVal.horzBrick = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'horzBrick')
ST_PresetPatternVal.diagBrick = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'diagBrick')
ST_PresetPatternVal.solidDmnd = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'solidDmnd')
ST_PresetPatternVal.openDmnd = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'openDmnd')
ST_PresetPatternVal.dotDmnd = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dotDmnd')
ST_PresetPatternVal.plaid = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'plaid')
ST_PresetPatternVal.sphere = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'sphere')
ST_PresetPatternVal.weave = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'weave')
ST_PresetPatternVal.divot = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'divot')
ST_PresetPatternVal.shingle = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'shingle')
ST_PresetPatternVal.wave = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'wave')
ST_PresetPatternVal.trellis = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'trellis')
ST_PresetPatternVal.zigZag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'zigZag')
ST_PresetPatternVal._InitializeFacetMap(ST_PresetPatternVal._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PresetPatternVal', ST_PresetPatternVal)

# Atomic SimpleTypeDefinition
class ST_PositiveCoordinate (pyxb.binding.datatypes.long):

    """Positive Coordinate"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PositiveCoordinate')
    _Documentation = u'Positive Coordinate'
ST_PositiveCoordinate._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_PositiveCoordinate, value=pyxb.binding.datatypes.long(27273042316900L))
ST_PositiveCoordinate._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_PositiveCoordinate, value=pyxb.binding.datatypes.long(0L))
ST_PositiveCoordinate._InitializeFacetMap(ST_PositiveCoordinate._CF_maxInclusive,
   ST_PositiveCoordinate._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PositiveCoordinate', ST_PositiveCoordinate)

# Atomic SimpleTypeDefinition
class ST_ResizeHandlesStr (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Resize Handle"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ResizeHandlesStr')
    _Documentation = u'Resize Handle'
ST_ResizeHandlesStr._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ResizeHandlesStr, enum_prefix=None)
ST_ResizeHandlesStr.exact = ST_ResizeHandlesStr._CF_enumeration.addEnumeration(unicode_value=u'exact')
ST_ResizeHandlesStr.rel = ST_ResizeHandlesStr._CF_enumeration.addEnumeration(unicode_value=u'rel')
ST_ResizeHandlesStr._InitializeFacetMap(ST_ResizeHandlesStr._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ResizeHandlesStr', ST_ResizeHandlesStr)

# Atomic SimpleTypeDefinition
class ST_FixedPercentageDecimal (ST_PercentageDecimal):

    """Fixed Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_FixedPercentageDecimal')
    _Documentation = u'Fixed Percentage'
ST_FixedPercentageDecimal._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_FixedPercentageDecimal, value=pyxb.binding.datatypes.int(100000))
ST_FixedPercentageDecimal._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_FixedPercentageDecimal, value=pyxb.binding.datatypes.int(-100000))
ST_FixedPercentageDecimal._InitializeFacetMap(ST_FixedPercentageDecimal._CF_maxInclusive,
   ST_FixedPercentageDecimal._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_FixedPercentageDecimal', ST_FixedPercentageDecimal)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_FixedPercentage (pyxb.binding.basis.STD_union):

    """Fixed Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_FixedPercentage')
    _Documentation = u'Fixed Percentage'

    _MemberTypes = ( ST_FixedPercentageDecimal, _s.ST_FixedPercentage, )
ST_FixedPercentage._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_FixedPercentage._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FixedPercentage)
ST_FixedPercentage._InitializeFacetMap(ST_FixedPercentage._CF_pattern,
   ST_FixedPercentage._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_FixedPercentage', ST_FixedPercentage)

# Atomic SimpleTypeDefinition
class ST_ShapeType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Shape Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_ShapeType')
    _Documentation = u'Preset Shape Types'
ST_ShapeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ShapeType, enum_prefix=None)
ST_ShapeType.line = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'line')
ST_ShapeType.lineInv = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'lineInv')
ST_ShapeType.triangle = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'triangle')
ST_ShapeType.rtTriangle = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'rtTriangle')
ST_ShapeType.rect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'rect')
ST_ShapeType.diamond = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'diamond')
ST_ShapeType.parallelogram = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'parallelogram')
ST_ShapeType.trapezoid = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'trapezoid')
ST_ShapeType.nonIsoscelesTrapezoid = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'nonIsoscelesTrapezoid')
ST_ShapeType.pentagon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'pentagon')
ST_ShapeType.hexagon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'hexagon')
ST_ShapeType.heptagon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'heptagon')
ST_ShapeType.octagon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'octagon')
ST_ShapeType.decagon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'decagon')
ST_ShapeType.dodecagon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'dodecagon')
ST_ShapeType.star4 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star4')
ST_ShapeType.star5 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star5')
ST_ShapeType.star6 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star6')
ST_ShapeType.star7 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star7')
ST_ShapeType.star8 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star8')
ST_ShapeType.star10 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star10')
ST_ShapeType.star12 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star12')
ST_ShapeType.star16 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star16')
ST_ShapeType.star24 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star24')
ST_ShapeType.star32 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star32')
ST_ShapeType.roundRect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'roundRect')
ST_ShapeType.round1Rect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'round1Rect')
ST_ShapeType.round2SameRect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'round2SameRect')
ST_ShapeType.round2DiagRect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'round2DiagRect')
ST_ShapeType.snipRoundRect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'snipRoundRect')
ST_ShapeType.snip1Rect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'snip1Rect')
ST_ShapeType.snip2SameRect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'snip2SameRect')
ST_ShapeType.snip2DiagRect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'snip2DiagRect')
ST_ShapeType.plaque = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'plaque')
ST_ShapeType.ellipse = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'ellipse')
ST_ShapeType.teardrop = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'teardrop')
ST_ShapeType.homePlate = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'homePlate')
ST_ShapeType.chevron = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'chevron')
ST_ShapeType.pieWedge = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'pieWedge')
ST_ShapeType.pie = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'pie')
ST_ShapeType.blockArc = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'blockArc')
ST_ShapeType.donut = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'donut')
ST_ShapeType.noSmoking = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'noSmoking')
ST_ShapeType.rightArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'rightArrow')
ST_ShapeType.leftArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftArrow')
ST_ShapeType.upArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'upArrow')
ST_ShapeType.downArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'downArrow')
ST_ShapeType.stripedRightArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'stripedRightArrow')
ST_ShapeType.notchedRightArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'notchedRightArrow')
ST_ShapeType.bentUpArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bentUpArrow')
ST_ShapeType.leftRightArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftRightArrow')
ST_ShapeType.upDownArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'upDownArrow')
ST_ShapeType.leftUpArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftUpArrow')
ST_ShapeType.leftRightUpArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftRightUpArrow')
ST_ShapeType.quadArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'quadArrow')
ST_ShapeType.leftArrowCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftArrowCallout')
ST_ShapeType.rightArrowCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'rightArrowCallout')
ST_ShapeType.upArrowCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'upArrowCallout')
ST_ShapeType.downArrowCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'downArrowCallout')
ST_ShapeType.leftRightArrowCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftRightArrowCallout')
ST_ShapeType.upDownArrowCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'upDownArrowCallout')
ST_ShapeType.quadArrowCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'quadArrowCallout')
ST_ShapeType.bentArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bentArrow')
ST_ShapeType.uturnArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'uturnArrow')
ST_ShapeType.circularArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'circularArrow')
ST_ShapeType.leftCircularArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftCircularArrow')
ST_ShapeType.leftRightCircularArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftRightCircularArrow')
ST_ShapeType.curvedRightArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedRightArrow')
ST_ShapeType.curvedLeftArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedLeftArrow')
ST_ShapeType.curvedUpArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedUpArrow')
ST_ShapeType.curvedDownArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedDownArrow')
ST_ShapeType.swooshArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'swooshArrow')
ST_ShapeType.cube = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'cube')
ST_ShapeType.can = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'can')
ST_ShapeType.lightningBolt = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'lightningBolt')
ST_ShapeType.heart = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'heart')
ST_ShapeType.sun = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'sun')
ST_ShapeType.moon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'moon')
ST_ShapeType.smileyFace = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'smileyFace')
ST_ShapeType.irregularSeal1 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'irregularSeal1')
ST_ShapeType.irregularSeal2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'irregularSeal2')
ST_ShapeType.foldedCorner = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'foldedCorner')
ST_ShapeType.bevel = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bevel')
ST_ShapeType.frame = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'frame')
ST_ShapeType.halfFrame = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'halfFrame')
ST_ShapeType.corner = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'corner')
ST_ShapeType.diagStripe = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'diagStripe')
ST_ShapeType.chord = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'chord')
ST_ShapeType.arc = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'arc')
ST_ShapeType.leftBracket = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftBracket')
ST_ShapeType.rightBracket = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'rightBracket')
ST_ShapeType.leftBrace = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftBrace')
ST_ShapeType.rightBrace = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'rightBrace')
ST_ShapeType.bracketPair = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bracketPair')
ST_ShapeType.bracePair = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bracePair')
ST_ShapeType.straightConnector1 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'straightConnector1')
ST_ShapeType.bentConnector2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bentConnector2')
ST_ShapeType.bentConnector3 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bentConnector3')
ST_ShapeType.bentConnector4 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bentConnector4')
ST_ShapeType.bentConnector5 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bentConnector5')
ST_ShapeType.curvedConnector2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedConnector2')
ST_ShapeType.curvedConnector3 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedConnector3')
ST_ShapeType.curvedConnector4 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedConnector4')
ST_ShapeType.curvedConnector5 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedConnector5')
ST_ShapeType.callout1 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'callout1')
ST_ShapeType.callout2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'callout2')
ST_ShapeType.callout3 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'callout3')
ST_ShapeType.accentCallout1 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'accentCallout1')
ST_ShapeType.accentCallout2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'accentCallout2')
ST_ShapeType.accentCallout3 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'accentCallout3')
ST_ShapeType.borderCallout1 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'borderCallout1')
ST_ShapeType.borderCallout2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'borderCallout2')
ST_ShapeType.borderCallout3 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'borderCallout3')
ST_ShapeType.accentBorderCallout1 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'accentBorderCallout1')
ST_ShapeType.accentBorderCallout2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'accentBorderCallout2')
ST_ShapeType.accentBorderCallout3 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'accentBorderCallout3')
ST_ShapeType.wedgeRectCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'wedgeRectCallout')
ST_ShapeType.wedgeRoundRectCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'wedgeRoundRectCallout')
ST_ShapeType.wedgeEllipseCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'wedgeEllipseCallout')
ST_ShapeType.cloudCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'cloudCallout')
ST_ShapeType.cloud = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'cloud')
ST_ShapeType.ribbon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'ribbon')
ST_ShapeType.ribbon2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'ribbon2')
ST_ShapeType.ellipseRibbon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'ellipseRibbon')
ST_ShapeType.ellipseRibbon2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'ellipseRibbon2')
ST_ShapeType.leftRightRibbon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftRightRibbon')
ST_ShapeType.verticalScroll = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'verticalScroll')
ST_ShapeType.horizontalScroll = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'horizontalScroll')
ST_ShapeType.wave = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'wave')
ST_ShapeType.doubleWave = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'doubleWave')
ST_ShapeType.plus = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'plus')
ST_ShapeType.flowChartProcess = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartProcess')
ST_ShapeType.flowChartDecision = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartDecision')
ST_ShapeType.flowChartInputOutput = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartInputOutput')
ST_ShapeType.flowChartPredefinedProcess = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartPredefinedProcess')
ST_ShapeType.flowChartInternalStorage = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartInternalStorage')
ST_ShapeType.flowChartDocument = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartDocument')
ST_ShapeType.flowChartMultidocument = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartMultidocument')
ST_ShapeType.flowChartTerminator = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartTerminator')
ST_ShapeType.flowChartPreparation = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartPreparation')
ST_ShapeType.flowChartManualInput = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartManualInput')
ST_ShapeType.flowChartManualOperation = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartManualOperation')
ST_ShapeType.flowChartConnector = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartConnector')
ST_ShapeType.flowChartPunchedCard = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartPunchedCard')
ST_ShapeType.flowChartPunchedTape = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartPunchedTape')
ST_ShapeType.flowChartSummingJunction = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartSummingJunction')
ST_ShapeType.flowChartOr = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartOr')
ST_ShapeType.flowChartCollate = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartCollate')
ST_ShapeType.flowChartSort = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartSort')
ST_ShapeType.flowChartExtract = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartExtract')
ST_ShapeType.flowChartMerge = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartMerge')
ST_ShapeType.flowChartOfflineStorage = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartOfflineStorage')
ST_ShapeType.flowChartOnlineStorage = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartOnlineStorage')
ST_ShapeType.flowChartMagneticTape = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartMagneticTape')
ST_ShapeType.flowChartMagneticDisk = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartMagneticDisk')
ST_ShapeType.flowChartMagneticDrum = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartMagneticDrum')
ST_ShapeType.flowChartDisplay = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartDisplay')
ST_ShapeType.flowChartDelay = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartDelay')
ST_ShapeType.flowChartAlternateProcess = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartAlternateProcess')
ST_ShapeType.flowChartOffpageConnector = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartOffpageConnector')
ST_ShapeType.actionButtonBlank = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonBlank')
ST_ShapeType.actionButtonHome = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonHome')
ST_ShapeType.actionButtonHelp = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonHelp')
ST_ShapeType.actionButtonInformation = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonInformation')
ST_ShapeType.actionButtonForwardNext = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonForwardNext')
ST_ShapeType.actionButtonBackPrevious = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonBackPrevious')
ST_ShapeType.actionButtonEnd = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonEnd')
ST_ShapeType.actionButtonBeginning = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonBeginning')
ST_ShapeType.actionButtonReturn = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonReturn')
ST_ShapeType.actionButtonDocument = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonDocument')
ST_ShapeType.actionButtonSound = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonSound')
ST_ShapeType.actionButtonMovie = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonMovie')
ST_ShapeType.gear6 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'gear6')
ST_ShapeType.gear9 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'gear9')
ST_ShapeType.funnel = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'funnel')
ST_ShapeType.mathPlus = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'mathPlus')
ST_ShapeType.mathMinus = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'mathMinus')
ST_ShapeType.mathMultiply = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'mathMultiply')
ST_ShapeType.mathDivide = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'mathDivide')
ST_ShapeType.mathEqual = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'mathEqual')
ST_ShapeType.mathNotEqual = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'mathNotEqual')
ST_ShapeType.cornerTabs = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'cornerTabs')
ST_ShapeType.squareTabs = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'squareTabs')
ST_ShapeType.plaqueTabs = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'plaqueTabs')
ST_ShapeType.chartX = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'chartX')
ST_ShapeType.chartStar = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'chartStar')
ST_ShapeType.chartPlus = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'chartPlus')
ST_ShapeType._InitializeFacetMap(ST_ShapeType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_ShapeType', ST_ShapeType)

# Atomic SimpleTypeDefinition
class ST_OutputShapeType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Output Shape Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_OutputShapeType')
    _Documentation = u'Output Shape Type'
ST_OutputShapeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_OutputShapeType, enum_prefix=None)
ST_OutputShapeType.none = ST_OutputShapeType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_OutputShapeType.conn = ST_OutputShapeType._CF_enumeration.addEnumeration(unicode_value=u'conn')
ST_OutputShapeType._InitializeFacetMap(ST_OutputShapeType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_OutputShapeType', ST_OutputShapeType)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_LayoutShapeType (pyxb.binding.basis.STD_union):

    """Layout Shape Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_LayoutShapeType')
    _Documentation = u'Layout Shape Type'

    _MemberTypes = ( ST_ShapeType, ST_OutputShapeType, )
ST_LayoutShapeType._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_LayoutShapeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LayoutShapeType)
ST_LayoutShapeType.line = u'line'                 # originally ST_ShapeType.line
ST_LayoutShapeType.lineInv = u'lineInv'           # originally ST_ShapeType.lineInv
ST_LayoutShapeType.triangle = u'triangle'         # originally ST_ShapeType.triangle
ST_LayoutShapeType.rtTriangle = u'rtTriangle'     # originally ST_ShapeType.rtTriangle
ST_LayoutShapeType.rect = u'rect'                 # originally ST_ShapeType.rect
ST_LayoutShapeType.diamond = u'diamond'           # originally ST_ShapeType.diamond
ST_LayoutShapeType.parallelogram = u'parallelogram'# originally ST_ShapeType.parallelogram
ST_LayoutShapeType.trapezoid = u'trapezoid'       # originally ST_ShapeType.trapezoid
ST_LayoutShapeType.nonIsoscelesTrapezoid = u'nonIsoscelesTrapezoid'# originally ST_ShapeType.nonIsoscelesTrapezoid
ST_LayoutShapeType.pentagon = u'pentagon'         # originally ST_ShapeType.pentagon
ST_LayoutShapeType.hexagon = u'hexagon'           # originally ST_ShapeType.hexagon
ST_LayoutShapeType.heptagon = u'heptagon'         # originally ST_ShapeType.heptagon
ST_LayoutShapeType.octagon = u'octagon'           # originally ST_ShapeType.octagon
ST_LayoutShapeType.decagon = u'decagon'           # originally ST_ShapeType.decagon
ST_LayoutShapeType.dodecagon = u'dodecagon'       # originally ST_ShapeType.dodecagon
ST_LayoutShapeType.star4 = u'star4'               # originally ST_ShapeType.star4
ST_LayoutShapeType.star5 = u'star5'               # originally ST_ShapeType.star5
ST_LayoutShapeType.star6 = u'star6'               # originally ST_ShapeType.star6
ST_LayoutShapeType.star7 = u'star7'               # originally ST_ShapeType.star7
ST_LayoutShapeType.star8 = u'star8'               # originally ST_ShapeType.star8
ST_LayoutShapeType.star10 = u'star10'             # originally ST_ShapeType.star10
ST_LayoutShapeType.star12 = u'star12'             # originally ST_ShapeType.star12
ST_LayoutShapeType.star16 = u'star16'             # originally ST_ShapeType.star16
ST_LayoutShapeType.star24 = u'star24'             # originally ST_ShapeType.star24
ST_LayoutShapeType.star32 = u'star32'             # originally ST_ShapeType.star32
ST_LayoutShapeType.roundRect = u'roundRect'       # originally ST_ShapeType.roundRect
ST_LayoutShapeType.round1Rect = u'round1Rect'     # originally ST_ShapeType.round1Rect
ST_LayoutShapeType.round2SameRect = u'round2SameRect'# originally ST_ShapeType.round2SameRect
ST_LayoutShapeType.round2DiagRect = u'round2DiagRect'# originally ST_ShapeType.round2DiagRect
ST_LayoutShapeType.snipRoundRect = u'snipRoundRect'# originally ST_ShapeType.snipRoundRect
ST_LayoutShapeType.snip1Rect = u'snip1Rect'       # originally ST_ShapeType.snip1Rect
ST_LayoutShapeType.snip2SameRect = u'snip2SameRect'# originally ST_ShapeType.snip2SameRect
ST_LayoutShapeType.snip2DiagRect = u'snip2DiagRect'# originally ST_ShapeType.snip2DiagRect
ST_LayoutShapeType.plaque = u'plaque'             # originally ST_ShapeType.plaque
ST_LayoutShapeType.ellipse = u'ellipse'           # originally ST_ShapeType.ellipse
ST_LayoutShapeType.teardrop = u'teardrop'         # originally ST_ShapeType.teardrop
ST_LayoutShapeType.homePlate = u'homePlate'       # originally ST_ShapeType.homePlate
ST_LayoutShapeType.chevron = u'chevron'           # originally ST_ShapeType.chevron
ST_LayoutShapeType.pieWedge = u'pieWedge'         # originally ST_ShapeType.pieWedge
ST_LayoutShapeType.pie = u'pie'                   # originally ST_ShapeType.pie
ST_LayoutShapeType.blockArc = u'blockArc'         # originally ST_ShapeType.blockArc
ST_LayoutShapeType.donut = u'donut'               # originally ST_ShapeType.donut
ST_LayoutShapeType.noSmoking = u'noSmoking'       # originally ST_ShapeType.noSmoking
ST_LayoutShapeType.rightArrow = u'rightArrow'     # originally ST_ShapeType.rightArrow
ST_LayoutShapeType.leftArrow = u'leftArrow'       # originally ST_ShapeType.leftArrow
ST_LayoutShapeType.upArrow = u'upArrow'           # originally ST_ShapeType.upArrow
ST_LayoutShapeType.downArrow = u'downArrow'       # originally ST_ShapeType.downArrow
ST_LayoutShapeType.stripedRightArrow = u'stripedRightArrow'# originally ST_ShapeType.stripedRightArrow
ST_LayoutShapeType.notchedRightArrow = u'notchedRightArrow'# originally ST_ShapeType.notchedRightArrow
ST_LayoutShapeType.bentUpArrow = u'bentUpArrow'   # originally ST_ShapeType.bentUpArrow
ST_LayoutShapeType.leftRightArrow = u'leftRightArrow'# originally ST_ShapeType.leftRightArrow
ST_LayoutShapeType.upDownArrow = u'upDownArrow'   # originally ST_ShapeType.upDownArrow
ST_LayoutShapeType.leftUpArrow = u'leftUpArrow'   # originally ST_ShapeType.leftUpArrow
ST_LayoutShapeType.leftRightUpArrow = u'leftRightUpArrow'# originally ST_ShapeType.leftRightUpArrow
ST_LayoutShapeType.quadArrow = u'quadArrow'       # originally ST_ShapeType.quadArrow
ST_LayoutShapeType.leftArrowCallout = u'leftArrowCallout'# originally ST_ShapeType.leftArrowCallout
ST_LayoutShapeType.rightArrowCallout = u'rightArrowCallout'# originally ST_ShapeType.rightArrowCallout
ST_LayoutShapeType.upArrowCallout = u'upArrowCallout'# originally ST_ShapeType.upArrowCallout
ST_LayoutShapeType.downArrowCallout = u'downArrowCallout'# originally ST_ShapeType.downArrowCallout
ST_LayoutShapeType.leftRightArrowCallout = u'leftRightArrowCallout'# originally ST_ShapeType.leftRightArrowCallout
ST_LayoutShapeType.upDownArrowCallout = u'upDownArrowCallout'# originally ST_ShapeType.upDownArrowCallout
ST_LayoutShapeType.quadArrowCallout = u'quadArrowCallout'# originally ST_ShapeType.quadArrowCallout
ST_LayoutShapeType.bentArrow = u'bentArrow'       # originally ST_ShapeType.bentArrow
ST_LayoutShapeType.uturnArrow = u'uturnArrow'     # originally ST_ShapeType.uturnArrow
ST_LayoutShapeType.circularArrow = u'circularArrow'# originally ST_ShapeType.circularArrow
ST_LayoutShapeType.leftCircularArrow = u'leftCircularArrow'# originally ST_ShapeType.leftCircularArrow
ST_LayoutShapeType.leftRightCircularArrow = u'leftRightCircularArrow'# originally ST_ShapeType.leftRightCircularArrow
ST_LayoutShapeType.curvedRightArrow = u'curvedRightArrow'# originally ST_ShapeType.curvedRightArrow
ST_LayoutShapeType.curvedLeftArrow = u'curvedLeftArrow'# originally ST_ShapeType.curvedLeftArrow
ST_LayoutShapeType.curvedUpArrow = u'curvedUpArrow'# originally ST_ShapeType.curvedUpArrow
ST_LayoutShapeType.curvedDownArrow = u'curvedDownArrow'# originally ST_ShapeType.curvedDownArrow
ST_LayoutShapeType.swooshArrow = u'swooshArrow'   # originally ST_ShapeType.swooshArrow
ST_LayoutShapeType.cube = u'cube'                 # originally ST_ShapeType.cube
ST_LayoutShapeType.can = u'can'                   # originally ST_ShapeType.can
ST_LayoutShapeType.lightningBolt = u'lightningBolt'# originally ST_ShapeType.lightningBolt
ST_LayoutShapeType.heart = u'heart'               # originally ST_ShapeType.heart
ST_LayoutShapeType.sun = u'sun'                   # originally ST_ShapeType.sun
ST_LayoutShapeType.moon = u'moon'                 # originally ST_ShapeType.moon
ST_LayoutShapeType.smileyFace = u'smileyFace'     # originally ST_ShapeType.smileyFace
ST_LayoutShapeType.irregularSeal1 = u'irregularSeal1'# originally ST_ShapeType.irregularSeal1
ST_LayoutShapeType.irregularSeal2 = u'irregularSeal2'# originally ST_ShapeType.irregularSeal2
ST_LayoutShapeType.foldedCorner = u'foldedCorner' # originally ST_ShapeType.foldedCorner
ST_LayoutShapeType.bevel = u'bevel'               # originally ST_ShapeType.bevel
ST_LayoutShapeType.frame = u'frame'               # originally ST_ShapeType.frame
ST_LayoutShapeType.halfFrame = u'halfFrame'       # originally ST_ShapeType.halfFrame
ST_LayoutShapeType.corner = u'corner'             # originally ST_ShapeType.corner
ST_LayoutShapeType.diagStripe = u'diagStripe'     # originally ST_ShapeType.diagStripe
ST_LayoutShapeType.chord = u'chord'               # originally ST_ShapeType.chord
ST_LayoutShapeType.arc = u'arc'                   # originally ST_ShapeType.arc
ST_LayoutShapeType.leftBracket = u'leftBracket'   # originally ST_ShapeType.leftBracket
ST_LayoutShapeType.rightBracket = u'rightBracket' # originally ST_ShapeType.rightBracket
ST_LayoutShapeType.leftBrace = u'leftBrace'       # originally ST_ShapeType.leftBrace
ST_LayoutShapeType.rightBrace = u'rightBrace'     # originally ST_ShapeType.rightBrace
ST_LayoutShapeType.bracketPair = u'bracketPair'   # originally ST_ShapeType.bracketPair
ST_LayoutShapeType.bracePair = u'bracePair'       # originally ST_ShapeType.bracePair
ST_LayoutShapeType.straightConnector1 = u'straightConnector1'# originally ST_ShapeType.straightConnector1
ST_LayoutShapeType.bentConnector2 = u'bentConnector2'# originally ST_ShapeType.bentConnector2
ST_LayoutShapeType.bentConnector3 = u'bentConnector3'# originally ST_ShapeType.bentConnector3
ST_LayoutShapeType.bentConnector4 = u'bentConnector4'# originally ST_ShapeType.bentConnector4
ST_LayoutShapeType.bentConnector5 = u'bentConnector5'# originally ST_ShapeType.bentConnector5
ST_LayoutShapeType.curvedConnector2 = u'curvedConnector2'# originally ST_ShapeType.curvedConnector2
ST_LayoutShapeType.curvedConnector3 = u'curvedConnector3'# originally ST_ShapeType.curvedConnector3
ST_LayoutShapeType.curvedConnector4 = u'curvedConnector4'# originally ST_ShapeType.curvedConnector4
ST_LayoutShapeType.curvedConnector5 = u'curvedConnector5'# originally ST_ShapeType.curvedConnector5
ST_LayoutShapeType.callout1 = u'callout1'         # originally ST_ShapeType.callout1
ST_LayoutShapeType.callout2 = u'callout2'         # originally ST_ShapeType.callout2
ST_LayoutShapeType.callout3 = u'callout3'         # originally ST_ShapeType.callout3
ST_LayoutShapeType.accentCallout1 = u'accentCallout1'# originally ST_ShapeType.accentCallout1
ST_LayoutShapeType.accentCallout2 = u'accentCallout2'# originally ST_ShapeType.accentCallout2
ST_LayoutShapeType.accentCallout3 = u'accentCallout3'# originally ST_ShapeType.accentCallout3
ST_LayoutShapeType.borderCallout1 = u'borderCallout1'# originally ST_ShapeType.borderCallout1
ST_LayoutShapeType.borderCallout2 = u'borderCallout2'# originally ST_ShapeType.borderCallout2
ST_LayoutShapeType.borderCallout3 = u'borderCallout3'# originally ST_ShapeType.borderCallout3
ST_LayoutShapeType.accentBorderCallout1 = u'accentBorderCallout1'# originally ST_ShapeType.accentBorderCallout1
ST_LayoutShapeType.accentBorderCallout2 = u'accentBorderCallout2'# originally ST_ShapeType.accentBorderCallout2
ST_LayoutShapeType.accentBorderCallout3 = u'accentBorderCallout3'# originally ST_ShapeType.accentBorderCallout3
ST_LayoutShapeType.wedgeRectCallout = u'wedgeRectCallout'# originally ST_ShapeType.wedgeRectCallout
ST_LayoutShapeType.wedgeRoundRectCallout = u'wedgeRoundRectCallout'# originally ST_ShapeType.wedgeRoundRectCallout
ST_LayoutShapeType.wedgeEllipseCallout = u'wedgeEllipseCallout'# originally ST_ShapeType.wedgeEllipseCallout
ST_LayoutShapeType.cloudCallout = u'cloudCallout' # originally ST_ShapeType.cloudCallout
ST_LayoutShapeType.cloud = u'cloud'               # originally ST_ShapeType.cloud
ST_LayoutShapeType.ribbon = u'ribbon'             # originally ST_ShapeType.ribbon
ST_LayoutShapeType.ribbon2 = u'ribbon2'           # originally ST_ShapeType.ribbon2
ST_LayoutShapeType.ellipseRibbon = u'ellipseRibbon'# originally ST_ShapeType.ellipseRibbon
ST_LayoutShapeType.ellipseRibbon2 = u'ellipseRibbon2'# originally ST_ShapeType.ellipseRibbon2
ST_LayoutShapeType.leftRightRibbon = u'leftRightRibbon'# originally ST_ShapeType.leftRightRibbon
ST_LayoutShapeType.verticalScroll = u'verticalScroll'# originally ST_ShapeType.verticalScroll
ST_LayoutShapeType.horizontalScroll = u'horizontalScroll'# originally ST_ShapeType.horizontalScroll
ST_LayoutShapeType.wave = u'wave'                 # originally ST_ShapeType.wave
ST_LayoutShapeType.doubleWave = u'doubleWave'     # originally ST_ShapeType.doubleWave
ST_LayoutShapeType.plus = u'plus'                 # originally ST_ShapeType.plus
ST_LayoutShapeType.flowChartProcess = u'flowChartProcess'# originally ST_ShapeType.flowChartProcess
ST_LayoutShapeType.flowChartDecision = u'flowChartDecision'# originally ST_ShapeType.flowChartDecision
ST_LayoutShapeType.flowChartInputOutput = u'flowChartInputOutput'# originally ST_ShapeType.flowChartInputOutput
ST_LayoutShapeType.flowChartPredefinedProcess = u'flowChartPredefinedProcess'# originally ST_ShapeType.flowChartPredefinedProcess
ST_LayoutShapeType.flowChartInternalStorage = u'flowChartInternalStorage'# originally ST_ShapeType.flowChartInternalStorage
ST_LayoutShapeType.flowChartDocument = u'flowChartDocument'# originally ST_ShapeType.flowChartDocument
ST_LayoutShapeType.flowChartMultidocument = u'flowChartMultidocument'# originally ST_ShapeType.flowChartMultidocument
ST_LayoutShapeType.flowChartTerminator = u'flowChartTerminator'# originally ST_ShapeType.flowChartTerminator
ST_LayoutShapeType.flowChartPreparation = u'flowChartPreparation'# originally ST_ShapeType.flowChartPreparation
ST_LayoutShapeType.flowChartManualInput = u'flowChartManualInput'# originally ST_ShapeType.flowChartManualInput
ST_LayoutShapeType.flowChartManualOperation = u'flowChartManualOperation'# originally ST_ShapeType.flowChartManualOperation
ST_LayoutShapeType.flowChartConnector = u'flowChartConnector'# originally ST_ShapeType.flowChartConnector
ST_LayoutShapeType.flowChartPunchedCard = u'flowChartPunchedCard'# originally ST_ShapeType.flowChartPunchedCard
ST_LayoutShapeType.flowChartPunchedTape = u'flowChartPunchedTape'# originally ST_ShapeType.flowChartPunchedTape
ST_LayoutShapeType.flowChartSummingJunction = u'flowChartSummingJunction'# originally ST_ShapeType.flowChartSummingJunction
ST_LayoutShapeType.flowChartOr = u'flowChartOr'   # originally ST_ShapeType.flowChartOr
ST_LayoutShapeType.flowChartCollate = u'flowChartCollate'# originally ST_ShapeType.flowChartCollate
ST_LayoutShapeType.flowChartSort = u'flowChartSort'# originally ST_ShapeType.flowChartSort
ST_LayoutShapeType.flowChartExtract = u'flowChartExtract'# originally ST_ShapeType.flowChartExtract
ST_LayoutShapeType.flowChartMerge = u'flowChartMerge'# originally ST_ShapeType.flowChartMerge
ST_LayoutShapeType.flowChartOfflineStorage = u'flowChartOfflineStorage'# originally ST_ShapeType.flowChartOfflineStorage
ST_LayoutShapeType.flowChartOnlineStorage = u'flowChartOnlineStorage'# originally ST_ShapeType.flowChartOnlineStorage
ST_LayoutShapeType.flowChartMagneticTape = u'flowChartMagneticTape'# originally ST_ShapeType.flowChartMagneticTape
ST_LayoutShapeType.flowChartMagneticDisk = u'flowChartMagneticDisk'# originally ST_ShapeType.flowChartMagneticDisk
ST_LayoutShapeType.flowChartMagneticDrum = u'flowChartMagneticDrum'# originally ST_ShapeType.flowChartMagneticDrum
ST_LayoutShapeType.flowChartDisplay = u'flowChartDisplay'# originally ST_ShapeType.flowChartDisplay
ST_LayoutShapeType.flowChartDelay = u'flowChartDelay'# originally ST_ShapeType.flowChartDelay
ST_LayoutShapeType.flowChartAlternateProcess = u'flowChartAlternateProcess'# originally ST_ShapeType.flowChartAlternateProcess
ST_LayoutShapeType.flowChartOffpageConnector = u'flowChartOffpageConnector'# originally ST_ShapeType.flowChartOffpageConnector
ST_LayoutShapeType.actionButtonBlank = u'actionButtonBlank'# originally ST_ShapeType.actionButtonBlank
ST_LayoutShapeType.actionButtonHome = u'actionButtonHome'# originally ST_ShapeType.actionButtonHome
ST_LayoutShapeType.actionButtonHelp = u'actionButtonHelp'# originally ST_ShapeType.actionButtonHelp
ST_LayoutShapeType.actionButtonInformation = u'actionButtonInformation'# originally ST_ShapeType.actionButtonInformation
ST_LayoutShapeType.actionButtonForwardNext = u'actionButtonForwardNext'# originally ST_ShapeType.actionButtonForwardNext
ST_LayoutShapeType.actionButtonBackPrevious = u'actionButtonBackPrevious'# originally ST_ShapeType.actionButtonBackPrevious
ST_LayoutShapeType.actionButtonEnd = u'actionButtonEnd'# originally ST_ShapeType.actionButtonEnd
ST_LayoutShapeType.actionButtonBeginning = u'actionButtonBeginning'# originally ST_ShapeType.actionButtonBeginning
ST_LayoutShapeType.actionButtonReturn = u'actionButtonReturn'# originally ST_ShapeType.actionButtonReturn
ST_LayoutShapeType.actionButtonDocument = u'actionButtonDocument'# originally ST_ShapeType.actionButtonDocument
ST_LayoutShapeType.actionButtonSound = u'actionButtonSound'# originally ST_ShapeType.actionButtonSound
ST_LayoutShapeType.actionButtonMovie = u'actionButtonMovie'# originally ST_ShapeType.actionButtonMovie
ST_LayoutShapeType.gear6 = u'gear6'               # originally ST_ShapeType.gear6
ST_LayoutShapeType.gear9 = u'gear9'               # originally ST_ShapeType.gear9
ST_LayoutShapeType.funnel = u'funnel'             # originally ST_ShapeType.funnel
ST_LayoutShapeType.mathPlus = u'mathPlus'         # originally ST_ShapeType.mathPlus
ST_LayoutShapeType.mathMinus = u'mathMinus'       # originally ST_ShapeType.mathMinus
ST_LayoutShapeType.mathMultiply = u'mathMultiply' # originally ST_ShapeType.mathMultiply
ST_LayoutShapeType.mathDivide = u'mathDivide'     # originally ST_ShapeType.mathDivide
ST_LayoutShapeType.mathEqual = u'mathEqual'       # originally ST_ShapeType.mathEqual
ST_LayoutShapeType.mathNotEqual = u'mathNotEqual' # originally ST_ShapeType.mathNotEqual
ST_LayoutShapeType.cornerTabs = u'cornerTabs'     # originally ST_ShapeType.cornerTabs
ST_LayoutShapeType.squareTabs = u'squareTabs'     # originally ST_ShapeType.squareTabs
ST_LayoutShapeType.plaqueTabs = u'plaqueTabs'     # originally ST_ShapeType.plaqueTabs
ST_LayoutShapeType.chartX = u'chartX'             # originally ST_ShapeType.chartX
ST_LayoutShapeType.chartStar = u'chartStar'       # originally ST_ShapeType.chartStar
ST_LayoutShapeType.chartPlus = u'chartPlus'       # originally ST_ShapeType.chartPlus
ST_LayoutShapeType.none = u'none'                 # originally ST_OutputShapeType.none
ST_LayoutShapeType.conn = u'conn'                 # originally ST_OutputShapeType.conn
ST_LayoutShapeType._InitializeFacetMap(ST_LayoutShapeType._CF_pattern,
   ST_LayoutShapeType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_LayoutShapeType', ST_LayoutShapeType)

# Atomic SimpleTypeDefinition
class ST_ElementType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Data Point Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ElementType')
    _Documentation = u'Data Point Type'
ST_ElementType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ElementType, enum_prefix=None)
ST_ElementType.all = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'all')
ST_ElementType.doc = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'doc')
ST_ElementType.node = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'node')
ST_ElementType.norm = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'norm')
ST_ElementType.nonNorm = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'nonNorm')
ST_ElementType.asst = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'asst')
ST_ElementType.nonAsst = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'nonAsst')
ST_ElementType.parTrans = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'parTrans')
ST_ElementType.pres = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'pres')
ST_ElementType.sibTrans = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'sibTrans')
ST_ElementType._InitializeFacetMap(ST_ElementType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ElementType', ST_ElementType)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_ElementTypes (pyxb.binding.basis.STD_list):

    """Diagream Layout Node Type List"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ElementTypes')
    _Documentation = u'Diagream Layout Node Type List'

    _ItemType = ST_ElementType
ST_ElementTypes._InitializeFacetMap()
_Namespace.addCategoryObject('typeBinding', u'ST_ElementTypes', ST_ElementTypes)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_Booleans (pyxb.binding.basis.STD_list):

    """Boolean List."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_Booleans')
    _Documentation = u'Boolean List.'

    _ItemType = pyxb.binding.datatypes.boolean
ST_Booleans._InitializeFacetMap()
_Namespace.addCategoryObject('typeBinding', u'ST_Booleans', ST_Booleans)

# Atomic SimpleTypeDefinition
class ST_AnimOneStr (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """One by One Animation Value Definition"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_AnimOneStr')
    _Documentation = u'One by One Animation Value Definition'
ST_AnimOneStr._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AnimOneStr, enum_prefix=None)
ST_AnimOneStr.none = ST_AnimOneStr._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_AnimOneStr.one = ST_AnimOneStr._CF_enumeration.addEnumeration(unicode_value=u'one')
ST_AnimOneStr.branch = ST_AnimOneStr._CF_enumeration.addEnumeration(unicode_value=u'branch')
ST_AnimOneStr._InitializeFacetMap(ST_AnimOneStr._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_AnimOneStr', ST_AnimOneStr)

# Atomic SimpleTypeDefinition
class ST_AnimLvlStr (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Animation Level String Definition"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_AnimLvlStr')
    _Documentation = u'Animation Level String Definition'
ST_AnimLvlStr._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AnimLvlStr, enum_prefix=None)
ST_AnimLvlStr.none = ST_AnimLvlStr._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_AnimLvlStr.lvl = ST_AnimLvlStr._CF_enumeration.addEnumeration(unicode_value=u'lvl')
ST_AnimLvlStr.ctr = ST_AnimLvlStr._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_AnimLvlStr._InitializeFacetMap(ST_AnimLvlStr._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_AnimLvlStr', ST_AnimLvlStr)

# Atomic SimpleTypeDefinition
class ST_Direction (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Diagram Direction Definition"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_Direction')
    _Documentation = u'Diagram Direction Definition'
ST_Direction._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Direction, enum_prefix=None)
ST_Direction.norm = ST_Direction._CF_enumeration.addEnumeration(unicode_value=u'norm')
ST_Direction.rev = ST_Direction._CF_enumeration.addEnumeration(unicode_value=u'rev')
ST_Direction._InitializeFacetMap(ST_Direction._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_Direction', ST_Direction)

# Atomic SimpleTypeDefinition
class ST_HierBranchStyle (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Hierarchy Branch Style Definition"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_HierBranchStyle')
    _Documentation = u'Hierarchy Branch Style Definition'
ST_HierBranchStyle._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_HierBranchStyle, enum_prefix=None)
ST_HierBranchStyle.l = ST_HierBranchStyle._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_HierBranchStyle.r = ST_HierBranchStyle._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_HierBranchStyle.hang = ST_HierBranchStyle._CF_enumeration.addEnumeration(unicode_value=u'hang')
ST_HierBranchStyle.std = ST_HierBranchStyle._CF_enumeration.addEnumeration(unicode_value=u'std')
ST_HierBranchStyle.init = ST_HierBranchStyle._CF_enumeration.addEnumeration(unicode_value=u'init')
ST_HierBranchStyle._InitializeFacetMap(ST_HierBranchStyle._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_HierBranchStyle', ST_HierBranchStyle)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_FunctionValue (pyxb.binding.basis.STD_union):

    """Function Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_FunctionValue')
    _Documentation = u'Function Value'

    _MemberTypes = ( pyxb.binding.datatypes.int, pyxb.binding.datatypes.boolean, ST_Direction, ST_HierBranchStyle, ST_AnimOneStr, ST_AnimLvlStr, ST_ResizeHandlesStr, )
ST_FunctionValue._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_FunctionValue._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FunctionValue)
ST_FunctionValue.norm = u'norm'                   # originally ST_Direction.norm
ST_FunctionValue.rev = u'rev'                     # originally ST_Direction.rev
ST_FunctionValue.l = u'l'                         # originally ST_HierBranchStyle.l
ST_FunctionValue.r = u'r'                         # originally ST_HierBranchStyle.r
ST_FunctionValue.hang = u'hang'                   # originally ST_HierBranchStyle.hang
ST_FunctionValue.std = u'std'                     # originally ST_HierBranchStyle.std
ST_FunctionValue.init = u'init'                   # originally ST_HierBranchStyle.init
ST_FunctionValue.none = u'none'                   # originally ST_AnimOneStr.none
ST_FunctionValue.one = u'one'                     # originally ST_AnimOneStr.one
ST_FunctionValue.branch = u'branch'               # originally ST_AnimOneStr.branch
ST_FunctionValue.none_ = u'none'                  # originally ST_AnimLvlStr.none
ST_FunctionValue.lvl = u'lvl'                     # originally ST_AnimLvlStr.lvl
ST_FunctionValue.ctr = u'ctr'                     # originally ST_AnimLvlStr.ctr
ST_FunctionValue.exact = u'exact'                 # originally ST_ResizeHandlesStr.exact
ST_FunctionValue.rel = u'rel'                     # originally ST_ResizeHandlesStr.rel
ST_FunctionValue._InitializeFacetMap(ST_FunctionValue._CF_pattern,
   ST_FunctionValue._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_FunctionValue', ST_FunctionValue)

# Atomic SimpleTypeDefinition
class ST_AxisType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Axis Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_AxisType')
    _Documentation = u'Axis Type'
ST_AxisType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AxisType, enum_prefix=None)
ST_AxisType.self = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'self')
ST_AxisType.ch = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'ch')
ST_AxisType.des = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'des')
ST_AxisType.desOrSelf = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'desOrSelf')
ST_AxisType.par = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'par')
ST_AxisType.ancst = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'ancst')
ST_AxisType.ancstOrSelf = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'ancstOrSelf')
ST_AxisType.followSib = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'followSib')
ST_AxisType.precedSib = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'precedSib')
ST_AxisType.follow = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'follow')
ST_AxisType.preced = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'preced')
ST_AxisType.root = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'root')
ST_AxisType.none = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_AxisType._InitializeFacetMap(ST_AxisType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_AxisType', ST_AxisType)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_AxisTypes (pyxb.binding.basis.STD_list):

    """Axis Type List"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_AxisTypes')
    _Documentation = u'Axis Type List'

    _ItemType = ST_AxisType
ST_AxisTypes._InitializeFacetMap()
_Namespace.addCategoryObject('typeBinding', u'ST_AxisTypes', ST_AxisTypes)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_UnsignedInts (pyxb.binding.basis.STD_list):

    """Unsigned Integer List"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_UnsignedInts')
    _Documentation = u'Unsigned Integer List'

    _ItemType = pyxb.binding.datatypes.unsignedInt
ST_UnsignedInts._InitializeFacetMap()
_Namespace.addCategoryObject('typeBinding', u'ST_UnsignedInts', ST_UnsignedInts)

# Atomic SimpleTypeDefinition
class ST_VariableType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Variable Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_VariableType')
    _Documentation = u'Variable Type'
ST_VariableType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_VariableType, enum_prefix=None)
ST_VariableType.none = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_VariableType.orgChart = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'orgChart')
ST_VariableType.chMax = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'chMax')
ST_VariableType.chPref = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'chPref')
ST_VariableType.bulEnabled = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'bulEnabled')
ST_VariableType.dir = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'dir')
ST_VariableType.hierBranch = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'hierBranch')
ST_VariableType.animOne = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'animOne')
ST_VariableType.animLvl = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'animLvl')
ST_VariableType.resizeHandles = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'resizeHandles')
ST_VariableType._InitializeFacetMap(ST_VariableType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_VariableType', ST_VariableType)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_FunctionArgument (pyxb.binding.basis.STD_union):

    """Function Argument"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_FunctionArgument')
    _Documentation = u'Function Argument'

    _MemberTypes = ( ST_VariableType, )
ST_FunctionArgument._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_FunctionArgument._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FunctionArgument)
ST_FunctionArgument.none = u'none'                # originally ST_VariableType.none
ST_FunctionArgument.orgChart = u'orgChart'        # originally ST_VariableType.orgChart
ST_FunctionArgument.chMax = u'chMax'              # originally ST_VariableType.chMax
ST_FunctionArgument.chPref = u'chPref'            # originally ST_VariableType.chPref
ST_FunctionArgument.bulEnabled = u'bulEnabled'    # originally ST_VariableType.bulEnabled
ST_FunctionArgument.dir = u'dir'                  # originally ST_VariableType.dir
ST_FunctionArgument.hierBranch = u'hierBranch'    # originally ST_VariableType.hierBranch
ST_FunctionArgument.animOne = u'animOne'          # originally ST_VariableType.animOne
ST_FunctionArgument.animLvl = u'animLvl'          # originally ST_VariableType.animLvl
ST_FunctionArgument.resizeHandles = u'resizeHandles'# originally ST_VariableType.resizeHandles
ST_FunctionArgument._InitializeFacetMap(ST_FunctionArgument._CF_pattern,
   ST_FunctionArgument._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_FunctionArgument', ST_FunctionArgument)

# Atomic SimpleTypeDefinition
class ST_FunctionType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Function Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_FunctionType')
    _Documentation = u'Function Type'
ST_FunctionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FunctionType, enum_prefix=None)
ST_FunctionType.cnt = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'cnt')
ST_FunctionType.pos = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'pos')
ST_FunctionType.revPos = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'revPos')
ST_FunctionType.posEven = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'posEven')
ST_FunctionType.posOdd = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'posOdd')
ST_FunctionType.var = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'var')
ST_FunctionType.depth = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'depth')
ST_FunctionType.maxDepth = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'maxDepth')
ST_FunctionType._InitializeFacetMap(ST_FunctionType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_FunctionType', ST_FunctionType)

# Atomic SimpleTypeDefinition
class ST_FunctionOperator (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Function Operator"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_FunctionOperator')
    _Documentation = u'Function Operator'
ST_FunctionOperator._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FunctionOperator, enum_prefix=None)
ST_FunctionOperator.equ = ST_FunctionOperator._CF_enumeration.addEnumeration(unicode_value=u'equ')
ST_FunctionOperator.neq = ST_FunctionOperator._CF_enumeration.addEnumeration(unicode_value=u'neq')
ST_FunctionOperator.gt = ST_FunctionOperator._CF_enumeration.addEnumeration(unicode_value=u'gt')
ST_FunctionOperator.lt = ST_FunctionOperator._CF_enumeration.addEnumeration(unicode_value=u'lt')
ST_FunctionOperator.gte = ST_FunctionOperator._CF_enumeration.addEnumeration(unicode_value=u'gte')
ST_FunctionOperator.lte = ST_FunctionOperator._CF_enumeration.addEnumeration(unicode_value=u'lte')
ST_FunctionOperator._InitializeFacetMap(ST_FunctionOperator._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_FunctionOperator', ST_FunctionOperator)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_Ints (pyxb.binding.basis.STD_list):

    """Integer List"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_Ints')
    _Documentation = u'Integer List'

    _ItemType = pyxb.binding.datatypes.int
ST_Ints._InitializeFacetMap()
_Namespace.addCategoryObject('typeBinding', u'ST_Ints', ST_Ints)

# Atomic SimpleTypeDefinition
class ST_EffectContainerType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Effect Container Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_EffectContainerType')
    _Documentation = u'Effect Container Type'
ST_EffectContainerType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_EffectContainerType, enum_prefix=None)
ST_EffectContainerType.sib = ST_EffectContainerType._CF_enumeration.addEnumeration(unicode_value=u'sib')
ST_EffectContainerType.tree = ST_EffectContainerType._CF_enumeration.addEnumeration(unicode_value=u'tree')
ST_EffectContainerType._InitializeFacetMap(ST_EffectContainerType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_EffectContainerType', ST_EffectContainerType)

# Atomic SimpleTypeDefinition
class ST_SystemColorVal (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """System Color Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_SystemColorVal')
    _Documentation = u'System Color Value'
ST_SystemColorVal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SystemColorVal, enum_prefix=None)
ST_SystemColorVal.scrollBar = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'scrollBar')
ST_SystemColorVal.background = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'background')
ST_SystemColorVal.activeCaption = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'activeCaption')
ST_SystemColorVal.inactiveCaption = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'inactiveCaption')
ST_SystemColorVal.menu = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'menu')
ST_SystemColorVal.window = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'window')
ST_SystemColorVal.windowFrame = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'windowFrame')
ST_SystemColorVal.menuText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'menuText')
ST_SystemColorVal.windowText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'windowText')
ST_SystemColorVal.captionText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'captionText')
ST_SystemColorVal.activeBorder = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'activeBorder')
ST_SystemColorVal.inactiveBorder = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'inactiveBorder')
ST_SystemColorVal.appWorkspace = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'appWorkspace')
ST_SystemColorVal.highlight = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'highlight')
ST_SystemColorVal.highlightText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'highlightText')
ST_SystemColorVal.btnFace = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'btnFace')
ST_SystemColorVal.btnShadow = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'btnShadow')
ST_SystemColorVal.grayText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'grayText')
ST_SystemColorVal.btnText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'btnText')
ST_SystemColorVal.inactiveCaptionText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'inactiveCaptionText')
ST_SystemColorVal.btnHighlight = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'btnHighlight')
ST_SystemColorVal.n3dDkShadow = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'3dDkShadow')
ST_SystemColorVal.n3dLight = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'3dLight')
ST_SystemColorVal.infoText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'infoText')
ST_SystemColorVal.infoBk = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'infoBk')
ST_SystemColorVal.hotLight = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'hotLight')
ST_SystemColorVal.gradientActiveCaption = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'gradientActiveCaption')
ST_SystemColorVal.gradientInactiveCaption = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'gradientInactiveCaption')
ST_SystemColorVal.menuHighlight = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'menuHighlight')
ST_SystemColorVal.menuBar = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'menuBar')
ST_SystemColorVal._InitializeFacetMap(ST_SystemColorVal._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_SystemColorVal', ST_SystemColorVal)

# Atomic SimpleTypeDefinition
class ST_BlackWhiteMode (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Black and White Mode"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_BlackWhiteMode')
    _Documentation = u'Black and White Mode'
ST_BlackWhiteMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BlackWhiteMode, enum_prefix=None)
ST_BlackWhiteMode.clr = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'clr')
ST_BlackWhiteMode.auto = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_BlackWhiteMode.gray = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'gray')
ST_BlackWhiteMode.ltGray = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'ltGray')
ST_BlackWhiteMode.invGray = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'invGray')
ST_BlackWhiteMode.grayWhite = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'grayWhite')
ST_BlackWhiteMode.blackGray = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'blackGray')
ST_BlackWhiteMode.blackWhite = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'blackWhite')
ST_BlackWhiteMode.black = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'black')
ST_BlackWhiteMode.white = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'white')
ST_BlackWhiteMode.hidden = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'hidden')
ST_BlackWhiteMode._InitializeFacetMap(ST_BlackWhiteMode._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_BlackWhiteMode', ST_BlackWhiteMode)

# Atomic SimpleTypeDefinition
class ST_TextTypeface (pyxb.binding.datatypes.string):

    """Text Typeface"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextTypeface')
    _Documentation = u'Text Typeface'
ST_TextTypeface._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextTypeface', ST_TextTypeface)

# Atomic SimpleTypeDefinition
class ST_Angle (pyxb.binding.datatypes.int):

    """Angle"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_Angle')
    _Documentation = u'Angle'
ST_Angle._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_Angle', ST_Angle)

# Atomic SimpleTypeDefinition
class ST_PositiveFixedAngle (ST_Angle):

    """Positive Fixed Angle"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PositiveFixedAngle')
    _Documentation = u'Positive Fixed Angle'
ST_PositiveFixedAngle._CF_maxExclusive = pyxb.binding.facets.CF_maxExclusive(value_datatype=ST_Angle, value=pyxb.binding.datatypes.long(21600000L))
ST_PositiveFixedAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_PositiveFixedAngle, value=pyxb.binding.datatypes.int(0))
ST_PositiveFixedAngle._InitializeFacetMap(ST_PositiveFixedAngle._CF_maxExclusive,
   ST_PositiveFixedAngle._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PositiveFixedAngle', ST_PositiveFixedAngle)

# Atomic SimpleTypeDefinition
class ST_TextNonNegativePoint (pyxb.binding.datatypes.int):

    """Text Non-Negative Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextNonNegativePoint')
    _Documentation = u'Text Non-Negative Point'
ST_TextNonNegativePoint._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextNonNegativePoint, value=pyxb.binding.datatypes.int(400000))
ST_TextNonNegativePoint._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextNonNegativePoint, value=pyxb.binding.datatypes.int(0))
ST_TextNonNegativePoint._InitializeFacetMap(ST_TextNonNegativePoint._CF_maxInclusive,
   ST_TextNonNegativePoint._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextNonNegativePoint', ST_TextNonNegativePoint)

# Atomic SimpleTypeDefinition
class ST_TextFontSize (pyxb.binding.datatypes.int):

    """Text Font Size"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextFontSize')
    _Documentation = u'Text Font Size'
ST_TextFontSize._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextFontSize, value=pyxb.binding.datatypes.int(400000))
ST_TextFontSize._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextFontSize, value=pyxb.binding.datatypes.int(100))
ST_TextFontSize._InitializeFacetMap(ST_TextFontSize._CF_maxInclusive,
   ST_TextFontSize._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextFontSize', ST_TextFontSize)

# Atomic SimpleTypeDefinition
class ST_TextStrikeType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Strike Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextStrikeType')
    _Documentation = u'Text Strike Type'
ST_TextStrikeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextStrikeType, enum_prefix=None)
ST_TextStrikeType.noStrike = ST_TextStrikeType._CF_enumeration.addEnumeration(unicode_value=u'noStrike')
ST_TextStrikeType.sngStrike = ST_TextStrikeType._CF_enumeration.addEnumeration(unicode_value=u'sngStrike')
ST_TextStrikeType.dblStrike = ST_TextStrikeType._CF_enumeration.addEnumeration(unicode_value=u'dblStrike')
ST_TextStrikeType._InitializeFacetMap(ST_TextStrikeType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextStrikeType', ST_TextStrikeType)

# Atomic SimpleTypeDefinition
class ST_TextUnderlineType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Underline Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextUnderlineType')
    _Documentation = u'Text Underline Types'
ST_TextUnderlineType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextUnderlineType, enum_prefix=None)
ST_TextUnderlineType.none = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TextUnderlineType.words = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'words')
ST_TextUnderlineType.sng = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'sng')
ST_TextUnderlineType.dbl = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dbl')
ST_TextUnderlineType.heavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'heavy')
ST_TextUnderlineType.dotted = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dotted')
ST_TextUnderlineType.dottedHeavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dottedHeavy')
ST_TextUnderlineType.dash = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dash')
ST_TextUnderlineType.dashHeavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dashHeavy')
ST_TextUnderlineType.dashLong = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dashLong')
ST_TextUnderlineType.dashLongHeavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dashLongHeavy')
ST_TextUnderlineType.dotDash = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dotDash')
ST_TextUnderlineType.dotDashHeavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dotDashHeavy')
ST_TextUnderlineType.dotDotDash = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dotDotDash')
ST_TextUnderlineType.dotDotDashHeavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dotDotDashHeavy')
ST_TextUnderlineType.wavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'wavy')
ST_TextUnderlineType.wavyHeavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'wavyHeavy')
ST_TextUnderlineType.wavyDbl = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'wavyDbl')
ST_TextUnderlineType._InitializeFacetMap(ST_TextUnderlineType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextUnderlineType', ST_TextUnderlineType)

# Atomic SimpleTypeDefinition
class ST_TextCapsType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Cap Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextCapsType')
    _Documentation = u'Text Cap Types'
ST_TextCapsType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextCapsType, enum_prefix=None)
ST_TextCapsType.none = ST_TextCapsType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TextCapsType.small = ST_TextCapsType._CF_enumeration.addEnumeration(unicode_value=u'small')
ST_TextCapsType.all = ST_TextCapsType._CF_enumeration.addEnumeration(unicode_value=u'all')
ST_TextCapsType._InitializeFacetMap(ST_TextCapsType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextCapsType', ST_TextCapsType)

# Atomic SimpleTypeDefinition
class ST_TextPointUnqualified (pyxb.binding.datatypes.int):

    """Text Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextPointUnqualified')
    _Documentation = u'Text Point'
ST_TextPointUnqualified._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextPointUnqualified, value=pyxb.binding.datatypes.int(400000))
ST_TextPointUnqualified._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextPointUnqualified, value=pyxb.binding.datatypes.int(-400000))
ST_TextPointUnqualified._InitializeFacetMap(ST_TextPointUnqualified._CF_maxInclusive,
   ST_TextPointUnqualified._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextPointUnqualified', ST_TextPointUnqualified)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_TextPoint (pyxb.binding.basis.STD_union):

    """Text Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextPoint')
    _Documentation = u'Text Point'

    _MemberTypes = ( ST_TextPointUnqualified, _s.ST_UniversalMeasure, )
ST_TextPoint._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_TextPoint._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextPoint)
ST_TextPoint._InitializeFacetMap(ST_TextPoint._CF_pattern,
   ST_TextPoint._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextPoint', ST_TextPoint)

# Atomic SimpleTypeDefinition
class ST_SchemeColorVal (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Scheme Color"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_SchemeColorVal')
    _Documentation = u'Scheme Color'
ST_SchemeColorVal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SchemeColorVal, enum_prefix=None)
ST_SchemeColorVal.bg1 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'bg1')
ST_SchemeColorVal.tx1 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'tx1')
ST_SchemeColorVal.bg2 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'bg2')
ST_SchemeColorVal.tx2 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'tx2')
ST_SchemeColorVal.accent1 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'accent1')
ST_SchemeColorVal.accent2 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'accent2')
ST_SchemeColorVal.accent3 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'accent3')
ST_SchemeColorVal.accent4 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'accent4')
ST_SchemeColorVal.accent5 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'accent5')
ST_SchemeColorVal.accent6 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'accent6')
ST_SchemeColorVal.hlink = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'hlink')
ST_SchemeColorVal.folHlink = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'folHlink')
ST_SchemeColorVal.phClr = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'phClr')
ST_SchemeColorVal.dk1 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'dk1')
ST_SchemeColorVal.lt1 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'lt1')
ST_SchemeColorVal.dk2 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'dk2')
ST_SchemeColorVal.lt2 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'lt2')
ST_SchemeColorVal._InitializeFacetMap(ST_SchemeColorVal._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_SchemeColorVal', ST_SchemeColorVal)

# Atomic SimpleTypeDefinition
class ST_BlendMode (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Blend Mode"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_BlendMode')
    _Documentation = u'Blend Mode'
ST_BlendMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BlendMode, enum_prefix=None)
ST_BlendMode.over = ST_BlendMode._CF_enumeration.addEnumeration(unicode_value=u'over')
ST_BlendMode.mult = ST_BlendMode._CF_enumeration.addEnumeration(unicode_value=u'mult')
ST_BlendMode.screen = ST_BlendMode._CF_enumeration.addEnumeration(unicode_value=u'screen')
ST_BlendMode.darken = ST_BlendMode._CF_enumeration.addEnumeration(unicode_value=u'darken')
ST_BlendMode.lighten = ST_BlendMode._CF_enumeration.addEnumeration(unicode_value=u'lighten')
ST_BlendMode._InitializeFacetMap(ST_BlendMode._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_BlendMode', ST_BlendMode)

# Atomic SimpleTypeDefinition
class ST_DrawingElementId (pyxb.binding.datatypes.unsignedInt):

    """Drawing Element ID"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_DrawingElementId')
    _Documentation = u'Drawing Element ID'
ST_DrawingElementId._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_DrawingElementId', ST_DrawingElementId)

# Atomic SimpleTypeDefinition
class ST_PresetMaterialType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Material Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PresetMaterialType')
    _Documentation = u'Preset Material Type'
ST_PresetMaterialType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PresetMaterialType, enum_prefix=None)
ST_PresetMaterialType.legacyMatte = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'legacyMatte')
ST_PresetMaterialType.legacyPlastic = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'legacyPlastic')
ST_PresetMaterialType.legacyMetal = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'legacyMetal')
ST_PresetMaterialType.legacyWireframe = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'legacyWireframe')
ST_PresetMaterialType.matte = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'matte')
ST_PresetMaterialType.plastic = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'plastic')
ST_PresetMaterialType.metal = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'metal')
ST_PresetMaterialType.warmMatte = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'warmMatte')
ST_PresetMaterialType.translucentPowder = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'translucentPowder')
ST_PresetMaterialType.powder = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'powder')
ST_PresetMaterialType.dkEdge = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'dkEdge')
ST_PresetMaterialType.softEdge = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'softEdge')
ST_PresetMaterialType.clear = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'clear')
ST_PresetMaterialType.flat = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'flat')
ST_PresetMaterialType.softmetal = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'softmetal')
ST_PresetMaterialType._InitializeFacetMap(ST_PresetMaterialType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PresetMaterialType', ST_PresetMaterialType)

# Atomic SimpleTypeDefinition
class ST_Index (pyxb.binding.datatypes.unsignedInt):

    """Index"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_Index')
    _Documentation = u'Index'
ST_Index._InitializeFacetMap()
_Namespace_.addCategoryObject('typeBinding', u'ST_Index', ST_Index)

# Atomic SimpleTypeDefinition
class ST_NodeCount (pyxb.binding.datatypes.int):

    """Number of Nodes Definition"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_NodeCount')
    _Documentation = u'Number of Nodes Definition'
ST_NodeCount._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_NodeCount, value=pyxb.binding.datatypes.int(-1))
ST_NodeCount._InitializeFacetMap(ST_NodeCount._CF_minInclusive)
_Namespace.addCategoryObject('typeBinding', u'ST_NodeCount', ST_NodeCount)

# Atomic SimpleTypeDefinition
class ST_StyleMatrixColumnIndex (pyxb.binding.datatypes.unsignedInt):

    """Style Matrix Column Index"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_StyleMatrixColumnIndex')
    _Documentation = u'Style Matrix Column Index'
ST_StyleMatrixColumnIndex._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_StyleMatrixColumnIndex', ST_StyleMatrixColumnIndex)

# Atomic SimpleTypeDefinition
class ST_ColorSchemeIndex (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Theme Color Reference"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_ColorSchemeIndex')
    _Documentation = u'Theme Color Reference'
ST_ColorSchemeIndex._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ColorSchemeIndex, enum_prefix=None)
ST_ColorSchemeIndex.dk1 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'dk1')
ST_ColorSchemeIndex.lt1 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'lt1')
ST_ColorSchemeIndex.dk2 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'dk2')
ST_ColorSchemeIndex.lt2 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'lt2')
ST_ColorSchemeIndex.accent1 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent1')
ST_ColorSchemeIndex.accent2 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent2')
ST_ColorSchemeIndex.accent3 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent3')
ST_ColorSchemeIndex.accent4 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent4')
ST_ColorSchemeIndex.accent5 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent5')
ST_ColorSchemeIndex.accent6 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent6')
ST_ColorSchemeIndex.hlink = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'hlink')
ST_ColorSchemeIndex.folHlink = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'folHlink')
ST_ColorSchemeIndex._InitializeFacetMap(ST_ColorSchemeIndex._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_ColorSchemeIndex', ST_ColorSchemeIndex)

# Atomic SimpleTypeDefinition
class ST_ShapeID (pyxb.binding.datatypes.token):

    """Shape ID"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_ShapeID')
    _Documentation = u'Shape ID'
ST_ShapeID._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_ShapeID', ST_ShapeID)

# Atomic SimpleTypeDefinition
class ST_DgmBuildStep (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Diagram Animation Build Steps"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_DgmBuildStep')
    _Documentation = u'Diagram Animation Build Steps'
ST_DgmBuildStep._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DgmBuildStep, enum_prefix=None)
ST_DgmBuildStep.sp = ST_DgmBuildStep._CF_enumeration.addEnumeration(unicode_value=u'sp')
ST_DgmBuildStep.bg = ST_DgmBuildStep._CF_enumeration.addEnumeration(unicode_value=u'bg')
ST_DgmBuildStep._InitializeFacetMap(ST_DgmBuildStep._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_DgmBuildStep', ST_DgmBuildStep)

# Atomic SimpleTypeDefinition
class ST_PositiveCoordinate32 (ST_Coordinate32Unqualified):

    """Positive Coordinate Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PositiveCoordinate32')
    _Documentation = u'Positive Coordinate Point'
ST_PositiveCoordinate32._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_PositiveCoordinate32, value=pyxb.binding.datatypes.int(0))
ST_PositiveCoordinate32._InitializeFacetMap(ST_PositiveCoordinate32._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PositiveCoordinate32', ST_PositiveCoordinate32)

# Atomic SimpleTypeDefinition
class ST_TextAnchoringType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Anchoring Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextAnchoringType')
    _Documentation = u'Text Anchoring Types'
ST_TextAnchoringType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextAnchoringType, enum_prefix=None)
ST_TextAnchoringType.t = ST_TextAnchoringType._CF_enumeration.addEnumeration(unicode_value=u't')
ST_TextAnchoringType.ctr = ST_TextAnchoringType._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_TextAnchoringType.b = ST_TextAnchoringType._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_TextAnchoringType.just = ST_TextAnchoringType._CF_enumeration.addEnumeration(unicode_value=u'just')
ST_TextAnchoringType.dist = ST_TextAnchoringType._CF_enumeration.addEnumeration(unicode_value=u'dist')
ST_TextAnchoringType._InitializeFacetMap(ST_TextAnchoringType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextAnchoringType', ST_TextAnchoringType)

# Atomic SimpleTypeDefinition
class ST_TextVerticalType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Vertical Text Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextVerticalType')
    _Documentation = u'Vertical Text Types'
ST_TextVerticalType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextVerticalType, enum_prefix=None)
ST_TextVerticalType.horz = ST_TextVerticalType._CF_enumeration.addEnumeration(unicode_value=u'horz')
ST_TextVerticalType.vert = ST_TextVerticalType._CF_enumeration.addEnumeration(unicode_value=u'vert')
ST_TextVerticalType.vert270 = ST_TextVerticalType._CF_enumeration.addEnumeration(unicode_value=u'vert270')
ST_TextVerticalType.wordArtVert = ST_TextVerticalType._CF_enumeration.addEnumeration(unicode_value=u'wordArtVert')
ST_TextVerticalType.eaVert = ST_TextVerticalType._CF_enumeration.addEnumeration(unicode_value=u'eaVert')
ST_TextVerticalType.mongolianVert = ST_TextVerticalType._CF_enumeration.addEnumeration(unicode_value=u'mongolianVert')
ST_TextVerticalType.wordArtVertRtl = ST_TextVerticalType._CF_enumeration.addEnumeration(unicode_value=u'wordArtVertRtl')
ST_TextVerticalType._InitializeFacetMap(ST_TextVerticalType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextVerticalType', ST_TextVerticalType)

# Atomic SimpleTypeDefinition
class ST_TextHorzOverflowType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Horizontal Overflow Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextHorzOverflowType')
    _Documentation = u'Text Horizontal Overflow Types'
ST_TextHorzOverflowType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextHorzOverflowType, enum_prefix=None)
ST_TextHorzOverflowType.overflow = ST_TextHorzOverflowType._CF_enumeration.addEnumeration(unicode_value=u'overflow')
ST_TextHorzOverflowType.clip = ST_TextHorzOverflowType._CF_enumeration.addEnumeration(unicode_value=u'clip')
ST_TextHorzOverflowType._InitializeFacetMap(ST_TextHorzOverflowType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextHorzOverflowType', ST_TextHorzOverflowType)

# Atomic SimpleTypeDefinition
class ST_ConstraintType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Constraint Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ConstraintType')
    _Documentation = u'Constraint Type'
ST_ConstraintType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ConstraintType, enum_prefix=None)
ST_ConstraintType.none = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_ConstraintType.alignOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'alignOff')
ST_ConstraintType.begMarg = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'begMarg')
ST_ConstraintType.bendDist = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'bendDist')
ST_ConstraintType.begPad = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'begPad')
ST_ConstraintType.b = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_ConstraintType.bMarg = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'bMarg')
ST_ConstraintType.bOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'bOff')
ST_ConstraintType.ctrX = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'ctrX')
ST_ConstraintType.ctrXOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'ctrXOff')
ST_ConstraintType.ctrY = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'ctrY')
ST_ConstraintType.ctrYOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'ctrYOff')
ST_ConstraintType.connDist = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'connDist')
ST_ConstraintType.diam = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'diam')
ST_ConstraintType.endMarg = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'endMarg')
ST_ConstraintType.endPad = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'endPad')
ST_ConstraintType.h = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'h')
ST_ConstraintType.hArH = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'hArH')
ST_ConstraintType.hOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'hOff')
ST_ConstraintType.l = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_ConstraintType.lMarg = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'lMarg')
ST_ConstraintType.lOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'lOff')
ST_ConstraintType.r = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_ConstraintType.rMarg = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'rMarg')
ST_ConstraintType.rOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'rOff')
ST_ConstraintType.primFontSz = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'primFontSz')
ST_ConstraintType.pyraAcctRatio = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'pyraAcctRatio')
ST_ConstraintType.secFontSz = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'secFontSz')
ST_ConstraintType.sibSp = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'sibSp')
ST_ConstraintType.secSibSp = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'secSibSp')
ST_ConstraintType.sp = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'sp')
ST_ConstraintType.stemThick = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'stemThick')
ST_ConstraintType.t = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u't')
ST_ConstraintType.tMarg = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'tMarg')
ST_ConstraintType.tOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'tOff')
ST_ConstraintType.userA = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userA')
ST_ConstraintType.userB = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userB')
ST_ConstraintType.userC = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userC')
ST_ConstraintType.userD = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userD')
ST_ConstraintType.userE = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userE')
ST_ConstraintType.userF = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userF')
ST_ConstraintType.userG = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userG')
ST_ConstraintType.userH = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userH')
ST_ConstraintType.userI = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userI')
ST_ConstraintType.userJ = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userJ')
ST_ConstraintType.userK = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userK')
ST_ConstraintType.userL = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userL')
ST_ConstraintType.userM = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userM')
ST_ConstraintType.userN = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userN')
ST_ConstraintType.userO = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userO')
ST_ConstraintType.userP = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userP')
ST_ConstraintType.userQ = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userQ')
ST_ConstraintType.userR = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userR')
ST_ConstraintType.userS = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userS')
ST_ConstraintType.userT = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userT')
ST_ConstraintType.userU = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userU')
ST_ConstraintType.userV = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userV')
ST_ConstraintType.userW = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userW')
ST_ConstraintType.userX = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userX')
ST_ConstraintType.userY = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userY')
ST_ConstraintType.userZ = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userZ')
ST_ConstraintType.w = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'w')
ST_ConstraintType.wArH = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'wArH')
ST_ConstraintType.wOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'wOff')
ST_ConstraintType._InitializeFacetMap(ST_ConstraintType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ConstraintType', ST_ConstraintType)

# Atomic SimpleTypeDefinition
class ST_BoolOperator (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Boolean Constraint"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_BoolOperator')
    _Documentation = u'Boolean Constraint'
ST_BoolOperator._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BoolOperator, enum_prefix=None)
ST_BoolOperator.none = ST_BoolOperator._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_BoolOperator.equ = ST_BoolOperator._CF_enumeration.addEnumeration(unicode_value=u'equ')
ST_BoolOperator.gte = ST_BoolOperator._CF_enumeration.addEnumeration(unicode_value=u'gte')
ST_BoolOperator.lte = ST_BoolOperator._CF_enumeration.addEnumeration(unicode_value=u'lte')
ST_BoolOperator._InitializeFacetMap(ST_BoolOperator._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_BoolOperator', ST_BoolOperator)

# Atomic SimpleTypeDefinition
class ST_ConstraintRelationship (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Constraint Relationship"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ConstraintRelationship')
    _Documentation = u'Constraint Relationship'
ST_ConstraintRelationship._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ConstraintRelationship, enum_prefix=None)
ST_ConstraintRelationship.self = ST_ConstraintRelationship._CF_enumeration.addEnumeration(unicode_value=u'self')
ST_ConstraintRelationship.ch = ST_ConstraintRelationship._CF_enumeration.addEnumeration(unicode_value=u'ch')
ST_ConstraintRelationship.des = ST_ConstraintRelationship._CF_enumeration.addEnumeration(unicode_value=u'des')
ST_ConstraintRelationship._InitializeFacetMap(ST_ConstraintRelationship._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ConstraintRelationship', ST_ConstraintRelationship)

# Atomic SimpleTypeDefinition
class ST_SplitterBarState (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Splitter Bar State"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_SplitterBarState')
    _Documentation = u'Splitter Bar State'
ST_SplitterBarState._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SplitterBarState, enum_prefix=None)
ST_SplitterBarState.minimized = ST_SplitterBarState._CF_enumeration.addEnumeration(unicode_value=u'minimized')
ST_SplitterBarState.restored = ST_SplitterBarState._CF_enumeration.addEnumeration(unicode_value=u'restored')
ST_SplitterBarState.maximized = ST_SplitterBarState._CF_enumeration.addEnumeration(unicode_value=u'maximized')
ST_SplitterBarState._InitializeFacetMap(ST_SplitterBarState._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_SplitterBarState', ST_SplitterBarState)

# Atomic SimpleTypeDefinition
class ST_GeomGuideFormula (pyxb.binding.datatypes.string):

    """Geometry Guide Formula Properties"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_GeomGuideFormula')
    _Documentation = u'Geometry Guide Formula Properties'
ST_GeomGuideFormula._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_GeomGuideFormula', ST_GeomGuideFormula)

# Atomic SimpleTypeDefinition
class ST_GeomGuideName (pyxb.binding.datatypes.token):

    """Geometry Guide Name Properties"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_GeomGuideName')
    _Documentation = u'Geometry Guide Name Properties'
ST_GeomGuideName._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_GeomGuideName', ST_GeomGuideName)

# Atomic SimpleTypeDefinition
class ST_RectAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Rectangle Alignments"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_RectAlignment')
    _Documentation = u'Rectangle Alignments'
ST_RectAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_RectAlignment, enum_prefix=None)
ST_RectAlignment.tl = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'tl')
ST_RectAlignment.t = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u't')
ST_RectAlignment.tr = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'tr')
ST_RectAlignment.l = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_RectAlignment.ctr = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_RectAlignment.r = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_RectAlignment.bl = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'bl')
ST_RectAlignment.b = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_RectAlignment.br = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'br')
ST_RectAlignment._InitializeFacetMap(ST_RectAlignment._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_RectAlignment', ST_RectAlignment)

# Atomic SimpleTypeDefinition
class ST_FixedAngle (ST_Angle):

    """Fixed Angle"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_FixedAngle')
    _Documentation = u'Fixed Angle'
ST_FixedAngle._CF_maxExclusive = pyxb.binding.facets.CF_maxExclusive(value_datatype=ST_Angle, value=pyxb.binding.datatypes.long(5400000L))
ST_FixedAngle._CF_minExclusive = pyxb.binding.facets.CF_minExclusive(value_datatype=ST_Angle, value=pyxb.binding.datatypes.long(-5400000L))
ST_FixedAngle._InitializeFacetMap(ST_FixedAngle._CF_maxExclusive,
   ST_FixedAngle._CF_minExclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_FixedAngle', ST_FixedAngle)

# Atomic SimpleTypeDefinition
class ST_Index1 (pyxb.binding.datatypes.unsignedInt):

    """1-Based Index"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_Index1')
    _Documentation = u'1-Based Index'
ST_Index1._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_Index1, value=pyxb.binding.datatypes.unsignedInt(1L))
ST_Index1._InitializeFacetMap(ST_Index1._CF_minInclusive)
_Namespace.addCategoryObject('typeBinding', u'ST_Index1', ST_Index1)

# Atomic SimpleTypeDefinition
class ST_TLAnimateBehaviorCalcMode (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Time List Animate Behavior Calculate Mode"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLAnimateBehaviorCalcMode')
    _Documentation = u'Time List Animate Behavior Calculate Mode'
ST_TLAnimateBehaviorCalcMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLAnimateBehaviorCalcMode, enum_prefix=None)
ST_TLAnimateBehaviorCalcMode.discrete = ST_TLAnimateBehaviorCalcMode._CF_enumeration.addEnumeration(unicode_value=u'discrete')
ST_TLAnimateBehaviorCalcMode.lin = ST_TLAnimateBehaviorCalcMode._CF_enumeration.addEnumeration(unicode_value=u'lin')
ST_TLAnimateBehaviorCalcMode.fmla = ST_TLAnimateBehaviorCalcMode._CF_enumeration.addEnumeration(unicode_value=u'fmla')
ST_TLAnimateBehaviorCalcMode._InitializeFacetMap(ST_TLAnimateBehaviorCalcMode._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLAnimateBehaviorCalcMode', ST_TLAnimateBehaviorCalcMode)

# Atomic SimpleTypeDefinition
class ST_TLAnimateBehaviorValueType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Time List Animate Behavior Value Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLAnimateBehaviorValueType')
    _Documentation = u'Time List Animate Behavior Value Types'
ST_TLAnimateBehaviorValueType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLAnimateBehaviorValueType, enum_prefix=None)
ST_TLAnimateBehaviorValueType.str = ST_TLAnimateBehaviorValueType._CF_enumeration.addEnumeration(unicode_value=u'str')
ST_TLAnimateBehaviorValueType.num = ST_TLAnimateBehaviorValueType._CF_enumeration.addEnumeration(unicode_value=u'num')
ST_TLAnimateBehaviorValueType.clr = ST_TLAnimateBehaviorValueType._CF_enumeration.addEnumeration(unicode_value=u'clr')
ST_TLAnimateBehaviorValueType._InitializeFacetMap(ST_TLAnimateBehaviorValueType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLAnimateBehaviorValueType', ST_TLAnimateBehaviorValueType)

# Atomic SimpleTypeDefinition
class ST_TLTriggerRuntimeNode (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Trigger RunTime Node"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLTriggerRuntimeNode')
    _Documentation = u'Trigger RunTime Node'
ST_TLTriggerRuntimeNode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLTriggerRuntimeNode, enum_prefix=None)
ST_TLTriggerRuntimeNode.first = ST_TLTriggerRuntimeNode._CF_enumeration.addEnumeration(unicode_value=u'first')
ST_TLTriggerRuntimeNode.last = ST_TLTriggerRuntimeNode._CF_enumeration.addEnumeration(unicode_value=u'last')
ST_TLTriggerRuntimeNode.all = ST_TLTriggerRuntimeNode._CF_enumeration.addEnumeration(unicode_value=u'all')
ST_TLTriggerRuntimeNode._InitializeFacetMap(ST_TLTriggerRuntimeNode._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLTriggerRuntimeNode', ST_TLTriggerRuntimeNode)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_AdjCoordinate (pyxb.binding.basis.STD_union):

    """Adjustable Coordinate Methods"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_AdjCoordinate')
    _Documentation = u'Adjustable Coordinate Methods'

    _MemberTypes = ( ST_CoordinateUnqualified, _s.ST_UniversalMeasure, ST_GeomGuideName, )
ST_AdjCoordinate._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_AdjCoordinate._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AdjCoordinate)
ST_AdjCoordinate._InitializeFacetMap(ST_AdjCoordinate._CF_pattern,
   ST_AdjCoordinate._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_AdjCoordinate', ST_AdjCoordinate)

# Atomic SimpleTypeDefinition
class ST_TransitionInOutDirectionType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Transition In/Out Direction Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TransitionInOutDirectionType')
    _Documentation = u'Transition In/Out Direction Type'
ST_TransitionInOutDirectionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TransitionInOutDirectionType, enum_prefix=None)
ST_TransitionInOutDirectionType.out = ST_TransitionInOutDirectionType._CF_enumeration.addEnumeration(unicode_value=u'out')
ST_TransitionInOutDirectionType.in_ = ST_TransitionInOutDirectionType._CF_enumeration.addEnumeration(unicode_value=u'in')
ST_TransitionInOutDirectionType._InitializeFacetMap(ST_TransitionInOutDirectionType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TransitionInOutDirectionType', ST_TransitionInOutDirectionType)

# Atomic SimpleTypeDefinition
class ST_TextVertOverflowType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Vertical Overflow"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextVertOverflowType')
    _Documentation = u'Text Vertical Overflow'
ST_TextVertOverflowType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextVertOverflowType, enum_prefix=None)
ST_TextVertOverflowType.overflow = ST_TextVertOverflowType._CF_enumeration.addEnumeration(unicode_value=u'overflow')
ST_TextVertOverflowType.ellipsis = ST_TextVertOverflowType._CF_enumeration.addEnumeration(unicode_value=u'ellipsis')
ST_TextVertOverflowType.clip = ST_TextVertOverflowType._CF_enumeration.addEnumeration(unicode_value=u'clip')
ST_TextVertOverflowType._InitializeFacetMap(ST_TextVertOverflowType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextVertOverflowType', ST_TextVertOverflowType)

# Atomic SimpleTypeDefinition
class ST_TextWrappingType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Wrapping Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextWrappingType')
    _Documentation = u'Text Wrapping Types'
ST_TextWrappingType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextWrappingType, enum_prefix=None)
ST_TextWrappingType.none = ST_TextWrappingType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TextWrappingType.square = ST_TextWrappingType._CF_enumeration.addEnumeration(unicode_value=u'square')
ST_TextWrappingType._InitializeFacetMap(ST_TextWrappingType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextWrappingType', ST_TextWrappingType)

# Atomic SimpleTypeDefinition
class ST_TextColumnCount (pyxb.binding.datatypes.int):

    """Text Column Count"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextColumnCount')
    _Documentation = u'Text Column Count'
ST_TextColumnCount._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextColumnCount, value=pyxb.binding.datatypes.int(16))
ST_TextColumnCount._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextColumnCount, value=pyxb.binding.datatypes.int(1))
ST_TextColumnCount._InitializeFacetMap(ST_TextColumnCount._CF_maxInclusive,
   ST_TextColumnCount._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextColumnCount', ST_TextColumnCount)

# Atomic SimpleTypeDefinition
class ST_TLTimeIndefinite (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Indefinite Time Declaration"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLTimeIndefinite')
    _Documentation = u'Indefinite Time Declaration'
ST_TLTimeIndefinite._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLTimeIndefinite, enum_prefix=None)
ST_TLTimeIndefinite.indefinite = ST_TLTimeIndefinite._CF_enumeration.addEnumeration(unicode_value=u'indefinite')
ST_TLTimeIndefinite._InitializeFacetMap(ST_TLTimeIndefinite._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLTimeIndefinite', ST_TLTimeIndefinite)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_TLTime (pyxb.binding.basis.STD_union):

    """Time"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLTime')
    _Documentation = u'Time'

    _MemberTypes = ( pyxb.binding.datatypes.unsignedInt, ST_TLTimeIndefinite, )
ST_TLTime._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_TLTime._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLTime)
ST_TLTime.indefinite = u'indefinite'              # originally ST_TLTimeIndefinite.indefinite
ST_TLTime._InitializeFacetMap(ST_TLTime._CF_pattern,
   ST_TLTime._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLTime', ST_TLTime)

# Atomic SimpleTypeDefinition
class ST_TextShapeType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Text Shape Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextShapeType')
    _Documentation = u'Preset Text Shape Types'
ST_TextShapeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextShapeType, enum_prefix=None)
ST_TextShapeType.textNoShape = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textNoShape')
ST_TextShapeType.textPlain = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textPlain')
ST_TextShapeType.textStop = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textStop')
ST_TextShapeType.textTriangle = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textTriangle')
ST_TextShapeType.textTriangleInverted = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textTriangleInverted')
ST_TextShapeType.textChevron = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textChevron')
ST_TextShapeType.textChevronInverted = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textChevronInverted')
ST_TextShapeType.textRingInside = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textRingInside')
ST_TextShapeType.textRingOutside = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textRingOutside')
ST_TextShapeType.textArchUp = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textArchUp')
ST_TextShapeType.textArchDown = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textArchDown')
ST_TextShapeType.textCircle = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCircle')
ST_TextShapeType.textButton = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textButton')
ST_TextShapeType.textArchUpPour = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textArchUpPour')
ST_TextShapeType.textArchDownPour = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textArchDownPour')
ST_TextShapeType.textCirclePour = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCirclePour')
ST_TextShapeType.textButtonPour = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textButtonPour')
ST_TextShapeType.textCurveUp = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCurveUp')
ST_TextShapeType.textCurveDown = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCurveDown')
ST_TextShapeType.textCanUp = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCanUp')
ST_TextShapeType.textCanDown = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCanDown')
ST_TextShapeType.textWave1 = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textWave1')
ST_TextShapeType.textWave2 = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textWave2')
ST_TextShapeType.textDoubleWave1 = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textDoubleWave1')
ST_TextShapeType.textWave4 = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textWave4')
ST_TextShapeType.textInflate = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textInflate')
ST_TextShapeType.textDeflate = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textDeflate')
ST_TextShapeType.textInflateBottom = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textInflateBottom')
ST_TextShapeType.textDeflateBottom = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textDeflateBottom')
ST_TextShapeType.textInflateTop = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textInflateTop')
ST_TextShapeType.textDeflateTop = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textDeflateTop')
ST_TextShapeType.textDeflateInflate = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textDeflateInflate')
ST_TextShapeType.textDeflateInflateDeflate = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textDeflateInflateDeflate')
ST_TextShapeType.textFadeRight = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textFadeRight')
ST_TextShapeType.textFadeLeft = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textFadeLeft')
ST_TextShapeType.textFadeUp = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textFadeUp')
ST_TextShapeType.textFadeDown = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textFadeDown')
ST_TextShapeType.textSlantUp = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textSlantUp')
ST_TextShapeType.textSlantDown = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textSlantDown')
ST_TextShapeType.textCascadeUp = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCascadeUp')
ST_TextShapeType.textCascadeDown = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCascadeDown')
ST_TextShapeType._InitializeFacetMap(ST_TextShapeType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextShapeType', ST_TextShapeType)

# Atomic SimpleTypeDefinition
class ST_ChildOrderType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Child Order"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ChildOrderType')
    _Documentation = u'Child Order'
ST_ChildOrderType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ChildOrderType, enum_prefix=None)
ST_ChildOrderType.b = ST_ChildOrderType._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_ChildOrderType.t = ST_ChildOrderType._CF_enumeration.addEnumeration(unicode_value=u't')
ST_ChildOrderType._InitializeFacetMap(ST_ChildOrderType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ChildOrderType', ST_ChildOrderType)

# Atomic SimpleTypeDefinition
class ST_PresetLineDashVal (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Line Dash Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PresetLineDashVal')
    _Documentation = u'Preset Line Dash Value'
ST_PresetLineDashVal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PresetLineDashVal, enum_prefix=None)
ST_PresetLineDashVal.solid = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'solid')
ST_PresetLineDashVal.dot = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'dot')
ST_PresetLineDashVal.dash = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'dash')
ST_PresetLineDashVal.lgDash = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'lgDash')
ST_PresetLineDashVal.dashDot = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'dashDot')
ST_PresetLineDashVal.lgDashDot = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'lgDashDot')
ST_PresetLineDashVal.lgDashDotDot = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'lgDashDotDot')
ST_PresetLineDashVal.sysDash = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'sysDash')
ST_PresetLineDashVal.sysDot = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'sysDot')
ST_PresetLineDashVal.sysDashDot = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'sysDashDot')
ST_PresetLineDashVal.sysDashDotDot = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'sysDashDotDot')
ST_PresetLineDashVal._InitializeFacetMap(ST_PresetLineDashVal._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PresetLineDashVal', ST_PresetLineDashVal)

# Atomic SimpleTypeDefinition
class ST_BlipCompression (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Blip Compression Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_BlipCompression')
    _Documentation = u'Blip Compression Type'
ST_BlipCompression._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BlipCompression, enum_prefix=None)
ST_BlipCompression.email = ST_BlipCompression._CF_enumeration.addEnumeration(unicode_value=u'email')
ST_BlipCompression.screen = ST_BlipCompression._CF_enumeration.addEnumeration(unicode_value=u'screen')
ST_BlipCompression.print_ = ST_BlipCompression._CF_enumeration.addEnumeration(unicode_value=u'print')
ST_BlipCompression.hqprint = ST_BlipCompression._CF_enumeration.addEnumeration(unicode_value=u'hqprint')
ST_BlipCompression.none = ST_BlipCompression._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_BlipCompression._InitializeFacetMap(ST_BlipCompression._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_BlipCompression', ST_BlipCompression)

# Atomic SimpleTypeDefinition
class ST_LineEndLength (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Line End Length"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_LineEndLength')
    _Documentation = u'Line End Length'
ST_LineEndLength._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LineEndLength, enum_prefix=None)
ST_LineEndLength.sm = ST_LineEndLength._CF_enumeration.addEnumeration(unicode_value=u'sm')
ST_LineEndLength.med = ST_LineEndLength._CF_enumeration.addEnumeration(unicode_value=u'med')
ST_LineEndLength.lg = ST_LineEndLength._CF_enumeration.addEnumeration(unicode_value=u'lg')
ST_LineEndLength._InitializeFacetMap(ST_LineEndLength._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_LineEndLength', ST_LineEndLength)

# Atomic SimpleTypeDefinition
class ST_LineEndType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Line End Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_LineEndType')
    _Documentation = u'Line End Type'
ST_LineEndType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LineEndType, enum_prefix=None)
ST_LineEndType.none = ST_LineEndType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_LineEndType.triangle = ST_LineEndType._CF_enumeration.addEnumeration(unicode_value=u'triangle')
ST_LineEndType.stealth = ST_LineEndType._CF_enumeration.addEnumeration(unicode_value=u'stealth')
ST_LineEndType.diamond = ST_LineEndType._CF_enumeration.addEnumeration(unicode_value=u'diamond')
ST_LineEndType.oval = ST_LineEndType._CF_enumeration.addEnumeration(unicode_value=u'oval')
ST_LineEndType.arrow = ST_LineEndType._CF_enumeration.addEnumeration(unicode_value=u'arrow')
ST_LineEndType._InitializeFacetMap(ST_LineEndType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_LineEndType', ST_LineEndType)

# Atomic SimpleTypeDefinition
class ST_LineEndWidth (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Line End Width"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_LineEndWidth')
    _Documentation = u'Line End Width'
ST_LineEndWidth._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LineEndWidth, enum_prefix=None)
ST_LineEndWidth.sm = ST_LineEndWidth._CF_enumeration.addEnumeration(unicode_value=u'sm')
ST_LineEndWidth.med = ST_LineEndWidth._CF_enumeration.addEnumeration(unicode_value=u'med')
ST_LineEndWidth.lg = ST_LineEndWidth._CF_enumeration.addEnumeration(unicode_value=u'lg')
ST_LineEndWidth._InitializeFacetMap(ST_LineEndWidth._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_LineEndWidth', ST_LineEndWidth)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_ModelId (pyxb.binding.basis.STD_union):

    """Model Identifier"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ModelId')
    _Documentation = u'Model Identifier'

    _MemberTypes = ( pyxb.binding.datatypes.int, _s.ST_Guid, )
ST_ModelId._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_ModelId._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ModelId)
ST_ModelId._InitializeFacetMap(ST_ModelId._CF_pattern,
   ST_ModelId._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ModelId', ST_ModelId)

# Atomic SimpleTypeDefinition
class ST_PtType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Point Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_PtType')
    _Documentation = u'Point Type'
ST_PtType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PtType, enum_prefix=None)
ST_PtType.node = ST_PtType._CF_enumeration.addEnumeration(unicode_value=u'node')
ST_PtType.asst = ST_PtType._CF_enumeration.addEnumeration(unicode_value=u'asst')
ST_PtType.doc = ST_PtType._CF_enumeration.addEnumeration(unicode_value=u'doc')
ST_PtType.pres = ST_PtType._CF_enumeration.addEnumeration(unicode_value=u'pres')
ST_PtType.parTrans = ST_PtType._CF_enumeration.addEnumeration(unicode_value=u'parTrans')
ST_PtType.sibTrans = ST_PtType._CF_enumeration.addEnumeration(unicode_value=u'sibTrans')
ST_PtType._InitializeFacetMap(ST_PtType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_PtType', ST_PtType)

# Atomic SimpleTypeDefinition
class ST_TLAnimateMotionBehaviorOrigin (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Time List Animate Motion Behavior Origin"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLAnimateMotionBehaviorOrigin')
    _Documentation = u'Time List Animate Motion Behavior Origin'
ST_TLAnimateMotionBehaviorOrigin._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLAnimateMotionBehaviorOrigin, enum_prefix=None)
ST_TLAnimateMotionBehaviorOrigin.parent = ST_TLAnimateMotionBehaviorOrigin._CF_enumeration.addEnumeration(unicode_value=u'parent')
ST_TLAnimateMotionBehaviorOrigin.layout = ST_TLAnimateMotionBehaviorOrigin._CF_enumeration.addEnumeration(unicode_value=u'layout')
ST_TLAnimateMotionBehaviorOrigin._InitializeFacetMap(ST_TLAnimateMotionBehaviorOrigin._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLAnimateMotionBehaviorOrigin', ST_TLAnimateMotionBehaviorOrigin)

# Atomic SimpleTypeDefinition
class ST_TLAnimateMotionPathEditMode (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Time List Animate Motion Path Edit Mode"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLAnimateMotionPathEditMode')
    _Documentation = u'Time List Animate Motion Path Edit Mode'
ST_TLAnimateMotionPathEditMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLAnimateMotionPathEditMode, enum_prefix=None)
ST_TLAnimateMotionPathEditMode.relative = ST_TLAnimateMotionPathEditMode._CF_enumeration.addEnumeration(unicode_value=u'relative')
ST_TLAnimateMotionPathEditMode.fixed = ST_TLAnimateMotionPathEditMode._CF_enumeration.addEnumeration(unicode_value=u'fixed')
ST_TLAnimateMotionPathEditMode._InitializeFacetMap(ST_TLAnimateMotionPathEditMode._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLAnimateMotionPathEditMode', ST_TLAnimateMotionPathEditMode)

# Atomic SimpleTypeDefinition
class ST_Direction_ (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_Direction')
    _Documentation = u'Direction'
ST_Direction_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Direction_, enum_prefix=None)
ST_Direction_.horz = ST_Direction_._CF_enumeration.addEnumeration(unicode_value=u'horz')
ST_Direction_.vert = ST_Direction_._CF_enumeration.addEnumeration(unicode_value=u'vert')
ST_Direction_._InitializeFacetMap(ST_Direction_._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_Direction', ST_Direction_)

# Atomic SimpleTypeDefinition
class ST_TLTriggerEvent (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Trigger Event"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLTriggerEvent')
    _Documentation = u'Trigger Event'
ST_TLTriggerEvent._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLTriggerEvent, enum_prefix=None)
ST_TLTriggerEvent.onBegin = ST_TLTriggerEvent._CF_enumeration.addEnumeration(unicode_value=u'onBegin')
ST_TLTriggerEvent.onEnd = ST_TLTriggerEvent._CF_enumeration.addEnumeration(unicode_value=u'onEnd')
ST_TLTriggerEvent.begin = ST_TLTriggerEvent._CF_enumeration.addEnumeration(unicode_value=u'begin')
ST_TLTriggerEvent.end = ST_TLTriggerEvent._CF_enumeration.addEnumeration(unicode_value=u'end')
ST_TLTriggerEvent.onClick = ST_TLTriggerEvent._CF_enumeration.addEnumeration(unicode_value=u'onClick')
ST_TLTriggerEvent.onDblClick = ST_TLTriggerEvent._CF_enumeration.addEnumeration(unicode_value=u'onDblClick')
ST_TLTriggerEvent.onMouseOver = ST_TLTriggerEvent._CF_enumeration.addEnumeration(unicode_value=u'onMouseOver')
ST_TLTriggerEvent.onMouseOut = ST_TLTriggerEvent._CF_enumeration.addEnumeration(unicode_value=u'onMouseOut')
ST_TLTriggerEvent.onNext = ST_TLTriggerEvent._CF_enumeration.addEnumeration(unicode_value=u'onNext')
ST_TLTriggerEvent.onPrev = ST_TLTriggerEvent._CF_enumeration.addEnumeration(unicode_value=u'onPrev')
ST_TLTriggerEvent.onStopAudio = ST_TLTriggerEvent._CF_enumeration.addEnumeration(unicode_value=u'onStopAudio')
ST_TLTriggerEvent._InitializeFacetMap(ST_TLTriggerEvent._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLTriggerEvent', ST_TLTriggerEvent)

# Atomic SimpleTypeDefinition
class ST_PrintColorMode (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Print Color Mode"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_PrintColorMode')
    _Documentation = u'Print Color Mode'
ST_PrintColorMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PrintColorMode, enum_prefix=None)
ST_PrintColorMode.bw = ST_PrintColorMode._CF_enumeration.addEnumeration(unicode_value=u'bw')
ST_PrintColorMode.gray = ST_PrintColorMode._CF_enumeration.addEnumeration(unicode_value=u'gray')
ST_PrintColorMode.clr = ST_PrintColorMode._CF_enumeration.addEnumeration(unicode_value=u'clr')
ST_PrintColorMode._InitializeFacetMap(ST_PrintColorMode._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_PrintColorMode', ST_PrintColorMode)

# Atomic SimpleTypeDefinition
class ST_PrintWhat (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Default print output"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_PrintWhat')
    _Documentation = u'Default print output'
ST_PrintWhat._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PrintWhat, enum_prefix=None)
ST_PrintWhat.slides = ST_PrintWhat._CF_enumeration.addEnumeration(unicode_value=u'slides')
ST_PrintWhat.handouts1 = ST_PrintWhat._CF_enumeration.addEnumeration(unicode_value=u'handouts1')
ST_PrintWhat.handouts2 = ST_PrintWhat._CF_enumeration.addEnumeration(unicode_value=u'handouts2')
ST_PrintWhat.handouts3 = ST_PrintWhat._CF_enumeration.addEnumeration(unicode_value=u'handouts3')
ST_PrintWhat.handouts4 = ST_PrintWhat._CF_enumeration.addEnumeration(unicode_value=u'handouts4')
ST_PrintWhat.handouts6 = ST_PrintWhat._CF_enumeration.addEnumeration(unicode_value=u'handouts6')
ST_PrintWhat.handouts9 = ST_PrintWhat._CF_enumeration.addEnumeration(unicode_value=u'handouts9')
ST_PrintWhat.notes = ST_PrintWhat._CF_enumeration.addEnumeration(unicode_value=u'notes')
ST_PrintWhat.outline = ST_PrintWhat._CF_enumeration.addEnumeration(unicode_value=u'outline')
ST_PrintWhat._InitializeFacetMap(ST_PrintWhat._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_PrintWhat', ST_PrintWhat)

# Atomic SimpleTypeDefinition
class ST_LightRigDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Light Rig Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_LightRigDirection')
    _Documentation = u'Light Rig Direction'
ST_LightRigDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LightRigDirection, enum_prefix=None)
ST_LightRigDirection.tl = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u'tl')
ST_LightRigDirection.t = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u't')
ST_LightRigDirection.tr = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u'tr')
ST_LightRigDirection.l = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_LightRigDirection.r = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_LightRigDirection.bl = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u'bl')
ST_LightRigDirection.b = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_LightRigDirection.br = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u'br')
ST_LightRigDirection._InitializeFacetMap(ST_LightRigDirection._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_LightRigDirection', ST_LightRigDirection)

# Atomic SimpleTypeDefinition
class ST_LightRigType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Light Rig Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_LightRigType')
    _Documentation = u'Light Rig Type'
ST_LightRigType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LightRigType, enum_prefix=None)
ST_LightRigType.legacyFlat1 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyFlat1')
ST_LightRigType.legacyFlat2 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyFlat2')
ST_LightRigType.legacyFlat3 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyFlat3')
ST_LightRigType.legacyFlat4 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyFlat4')
ST_LightRigType.legacyNormal1 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyNormal1')
ST_LightRigType.legacyNormal2 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyNormal2')
ST_LightRigType.legacyNormal3 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyNormal3')
ST_LightRigType.legacyNormal4 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyNormal4')
ST_LightRigType.legacyHarsh1 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyHarsh1')
ST_LightRigType.legacyHarsh2 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyHarsh2')
ST_LightRigType.legacyHarsh3 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyHarsh3')
ST_LightRigType.legacyHarsh4 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyHarsh4')
ST_LightRigType.threePt = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'threePt')
ST_LightRigType.balanced = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'balanced')
ST_LightRigType.soft = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'soft')
ST_LightRigType.harsh = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'harsh')
ST_LightRigType.flood = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'flood')
ST_LightRigType.contrasting = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'contrasting')
ST_LightRigType.morning = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'morning')
ST_LightRigType.sunrise = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'sunrise')
ST_LightRigType.sunset = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'sunset')
ST_LightRigType.chilly = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'chilly')
ST_LightRigType.freezing = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'freezing')
ST_LightRigType.flat = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'flat')
ST_LightRigType.twoPt = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'twoPt')
ST_LightRigType.glow = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'glow')
ST_LightRigType.brightRoom = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'brightRoom')
ST_LightRigType._InitializeFacetMap(ST_LightRigType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_LightRigType', ST_LightRigType)

# Atomic SimpleTypeDefinition
class ST_TransitionSideDirectionType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Transition Slide Direction Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TransitionSideDirectionType')
    _Documentation = u'Transition Slide Direction Type'
ST_TransitionSideDirectionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TransitionSideDirectionType, enum_prefix=None)
ST_TransitionSideDirectionType.l = ST_TransitionSideDirectionType._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_TransitionSideDirectionType.u = ST_TransitionSideDirectionType._CF_enumeration.addEnumeration(unicode_value=u'u')
ST_TransitionSideDirectionType.r = ST_TransitionSideDirectionType._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_TransitionSideDirectionType.d = ST_TransitionSideDirectionType._CF_enumeration.addEnumeration(unicode_value=u'd')
ST_TransitionSideDirectionType._InitializeFacetMap(ST_TransitionSideDirectionType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TransitionSideDirectionType', ST_TransitionSideDirectionType)

# Atomic SimpleTypeDefinition
class ST_TransitionCornerDirectionType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Transition Corner Direction Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TransitionCornerDirectionType')
    _Documentation = u'Transition Corner Direction Type'
ST_TransitionCornerDirectionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TransitionCornerDirectionType, enum_prefix=None)
ST_TransitionCornerDirectionType.lu = ST_TransitionCornerDirectionType._CF_enumeration.addEnumeration(unicode_value=u'lu')
ST_TransitionCornerDirectionType.ru = ST_TransitionCornerDirectionType._CF_enumeration.addEnumeration(unicode_value=u'ru')
ST_TransitionCornerDirectionType.ld = ST_TransitionCornerDirectionType._CF_enumeration.addEnumeration(unicode_value=u'ld')
ST_TransitionCornerDirectionType.rd = ST_TransitionCornerDirectionType._CF_enumeration.addEnumeration(unicode_value=u'rd')
ST_TransitionCornerDirectionType._InitializeFacetMap(ST_TransitionCornerDirectionType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TransitionCornerDirectionType', ST_TransitionCornerDirectionType)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_TransitionEightDirectionType (pyxb.binding.basis.STD_union):

    """Transition Eight Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TransitionEightDirectionType')
    _Documentation = u'Transition Eight Direction'

    _MemberTypes = ( ST_TransitionSideDirectionType, ST_TransitionCornerDirectionType, )
ST_TransitionEightDirectionType._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_TransitionEightDirectionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TransitionEightDirectionType)
ST_TransitionEightDirectionType.l = u'l'          # originally ST_TransitionSideDirectionType.l
ST_TransitionEightDirectionType.u = u'u'          # originally ST_TransitionSideDirectionType.u
ST_TransitionEightDirectionType.r = u'r'          # originally ST_TransitionSideDirectionType.r
ST_TransitionEightDirectionType.d = u'd'          # originally ST_TransitionSideDirectionType.d
ST_TransitionEightDirectionType.lu = u'lu'        # originally ST_TransitionCornerDirectionType.lu
ST_TransitionEightDirectionType.ru = u'ru'        # originally ST_TransitionCornerDirectionType.ru
ST_TransitionEightDirectionType.ld = u'ld'        # originally ST_TransitionCornerDirectionType.ld
ST_TransitionEightDirectionType.rd = u'rd'        # originally ST_TransitionCornerDirectionType.rd
ST_TransitionEightDirectionType._InitializeFacetMap(ST_TransitionEightDirectionType._CF_pattern,
   ST_TransitionEightDirectionType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TransitionEightDirectionType', ST_TransitionEightDirectionType)

# Atomic SimpleTypeDefinition
class ST_ViewType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """List of View Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_ViewType')
    _Documentation = u'List of View Types'
ST_ViewType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ViewType, enum_prefix=None)
ST_ViewType.sldView = ST_ViewType._CF_enumeration.addEnumeration(unicode_value=u'sldView')
ST_ViewType.sldMasterView = ST_ViewType._CF_enumeration.addEnumeration(unicode_value=u'sldMasterView')
ST_ViewType.notesView = ST_ViewType._CF_enumeration.addEnumeration(unicode_value=u'notesView')
ST_ViewType.handoutView = ST_ViewType._CF_enumeration.addEnumeration(unicode_value=u'handoutView')
ST_ViewType.notesMasterView = ST_ViewType._CF_enumeration.addEnumeration(unicode_value=u'notesMasterView')
ST_ViewType.outlineView = ST_ViewType._CF_enumeration.addEnumeration(unicode_value=u'outlineView')
ST_ViewType.sldSorterView = ST_ViewType._CF_enumeration.addEnumeration(unicode_value=u'sldSorterView')
ST_ViewType.sldThumbnailView = ST_ViewType._CF_enumeration.addEnumeration(unicode_value=u'sldThumbnailView')
ST_ViewType._InitializeFacetMap(ST_ViewType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_ViewType', ST_ViewType)

# Atomic SimpleTypeDefinition
class ST_TextBulletSizePercent (ST_PercentageDecimal):

    """Bullet Size Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextBulletSizePercent')
    _Documentation = u'Bullet Size Percentage'
ST_TextBulletSizePercent._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextBulletSizePercent, value=pyxb.binding.datatypes.int(400000))
ST_TextBulletSizePercent._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextBulletSizePercent, value=pyxb.binding.datatypes.int(25000))
ST_TextBulletSizePercent._InitializeFacetMap(ST_TextBulletSizePercent._CF_maxInclusive,
   ST_TextBulletSizePercent._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextBulletSizePercent', ST_TextBulletSizePercent)

# Atomic SimpleTypeDefinition
class ST_Name (pyxb.binding.datatypes.string):

    """Name string"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_Name')
    _Documentation = u'Name string'
ST_Name._InitializeFacetMap()
_Namespace_.addCategoryObject('typeBinding', u'ST_Name', ST_Name)

# Atomic SimpleTypeDefinition
class ST_TLTimeNodeMasterRelation (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Time Node Master Relation"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLTimeNodeMasterRelation')
    _Documentation = u'Time Node Master Relation'
ST_TLTimeNodeMasterRelation._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLTimeNodeMasterRelation, enum_prefix=None)
ST_TLTimeNodeMasterRelation.sameClick = ST_TLTimeNodeMasterRelation._CF_enumeration.addEnumeration(unicode_value=u'sameClick')
ST_TLTimeNodeMasterRelation.lastClick = ST_TLTimeNodeMasterRelation._CF_enumeration.addEnumeration(unicode_value=u'lastClick')
ST_TLTimeNodeMasterRelation.nextClick = ST_TLTimeNodeMasterRelation._CF_enumeration.addEnumeration(unicode_value=u'nextClick')
ST_TLTimeNodeMasterRelation._InitializeFacetMap(ST_TLTimeNodeMasterRelation._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLTimeNodeMasterRelation', ST_TLTimeNodeMasterRelation)

# Atomic SimpleTypeDefinition
class ST_TLTimeNodeType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Time Node Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLTimeNodeType')
    _Documentation = u'Time Node Type'
ST_TLTimeNodeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLTimeNodeType, enum_prefix=None)
ST_TLTimeNodeType.clickEffect = ST_TLTimeNodeType._CF_enumeration.addEnumeration(unicode_value=u'clickEffect')
ST_TLTimeNodeType.withEffect = ST_TLTimeNodeType._CF_enumeration.addEnumeration(unicode_value=u'withEffect')
ST_TLTimeNodeType.afterEffect = ST_TLTimeNodeType._CF_enumeration.addEnumeration(unicode_value=u'afterEffect')
ST_TLTimeNodeType.mainSeq = ST_TLTimeNodeType._CF_enumeration.addEnumeration(unicode_value=u'mainSeq')
ST_TLTimeNodeType.interactiveSeq = ST_TLTimeNodeType._CF_enumeration.addEnumeration(unicode_value=u'interactiveSeq')
ST_TLTimeNodeType.clickPar = ST_TLTimeNodeType._CF_enumeration.addEnumeration(unicode_value=u'clickPar')
ST_TLTimeNodeType.withGroup = ST_TLTimeNodeType._CF_enumeration.addEnumeration(unicode_value=u'withGroup')
ST_TLTimeNodeType.afterGroup = ST_TLTimeNodeType._CF_enumeration.addEnumeration(unicode_value=u'afterGroup')
ST_TLTimeNodeType.tmRoot = ST_TLTimeNodeType._CF_enumeration.addEnumeration(unicode_value=u'tmRoot')
ST_TLTimeNodeType._InitializeFacetMap(ST_TLTimeNodeType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLTimeNodeType', ST_TLTimeNodeType)

# Atomic SimpleTypeDefinition
class ST_TLTimeNodeID (pyxb.binding.datatypes.unsignedInt):

    """Time Node ID"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLTimeNodeID')
    _Documentation = u'Time Node ID'
ST_TLTimeNodeID._InitializeFacetMap()
_Namespace_.addCategoryObject('typeBinding', u'ST_TLTimeNodeID', ST_TLTimeNodeID)

# Atomic SimpleTypeDefinition
class ST_TLTimeNodePresetClassType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Time Node Preset Class Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLTimeNodePresetClassType')
    _Documentation = u'Time Node Preset Class Type'
ST_TLTimeNodePresetClassType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLTimeNodePresetClassType, enum_prefix=None)
ST_TLTimeNodePresetClassType.entr = ST_TLTimeNodePresetClassType._CF_enumeration.addEnumeration(unicode_value=u'entr')
ST_TLTimeNodePresetClassType.exit = ST_TLTimeNodePresetClassType._CF_enumeration.addEnumeration(unicode_value=u'exit')
ST_TLTimeNodePresetClassType.emph = ST_TLTimeNodePresetClassType._CF_enumeration.addEnumeration(unicode_value=u'emph')
ST_TLTimeNodePresetClassType.path = ST_TLTimeNodePresetClassType._CF_enumeration.addEnumeration(unicode_value=u'path')
ST_TLTimeNodePresetClassType.verb = ST_TLTimeNodePresetClassType._CF_enumeration.addEnumeration(unicode_value=u'verb')
ST_TLTimeNodePresetClassType.mediacall = ST_TLTimeNodePresetClassType._CF_enumeration.addEnumeration(unicode_value=u'mediacall')
ST_TLTimeNodePresetClassType._InitializeFacetMap(ST_TLTimeNodePresetClassType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLTimeNodePresetClassType', ST_TLTimeNodePresetClassType)

# Atomic SimpleTypeDefinition
class ST_TLTimeNodeSyncType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Time Node Sync Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLTimeNodeSyncType')
    _Documentation = u'Time Node Sync Type'
ST_TLTimeNodeSyncType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLTimeNodeSyncType, enum_prefix=None)
ST_TLTimeNodeSyncType.canSlip = ST_TLTimeNodeSyncType._CF_enumeration.addEnumeration(unicode_value=u'canSlip')
ST_TLTimeNodeSyncType.locked = ST_TLTimeNodeSyncType._CF_enumeration.addEnumeration(unicode_value=u'locked')
ST_TLTimeNodeSyncType._InitializeFacetMap(ST_TLTimeNodeSyncType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLTimeNodeSyncType', ST_TLTimeNodeSyncType)

# Atomic SimpleTypeDefinition
class ST_TLTimeNodeRestartType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Time Node Restart Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLTimeNodeRestartType')
    _Documentation = u'Time Node Restart Type'
ST_TLTimeNodeRestartType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLTimeNodeRestartType, enum_prefix=None)
ST_TLTimeNodeRestartType.always = ST_TLTimeNodeRestartType._CF_enumeration.addEnumeration(unicode_value=u'always')
ST_TLTimeNodeRestartType.whenNotActive = ST_TLTimeNodeRestartType._CF_enumeration.addEnumeration(unicode_value=u'whenNotActive')
ST_TLTimeNodeRestartType.never = ST_TLTimeNodeRestartType._CF_enumeration.addEnumeration(unicode_value=u'never')
ST_TLTimeNodeRestartType._InitializeFacetMap(ST_TLTimeNodeRestartType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLTimeNodeRestartType', ST_TLTimeNodeRestartType)

# Atomic SimpleTypeDefinition
class ST_TLTimeNodeFillType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Time Node Fill Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLTimeNodeFillType')
    _Documentation = u'Time Node Fill Type'
ST_TLTimeNodeFillType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLTimeNodeFillType, enum_prefix=None)
ST_TLTimeNodeFillType.remove = ST_TLTimeNodeFillType._CF_enumeration.addEnumeration(unicode_value=u'remove')
ST_TLTimeNodeFillType.freeze = ST_TLTimeNodeFillType._CF_enumeration.addEnumeration(unicode_value=u'freeze')
ST_TLTimeNodeFillType.hold = ST_TLTimeNodeFillType._CF_enumeration.addEnumeration(unicode_value=u'hold')
ST_TLTimeNodeFillType.transition = ST_TLTimeNodeFillType._CF_enumeration.addEnumeration(unicode_value=u'transition')
ST_TLTimeNodeFillType._InitializeFacetMap(ST_TLTimeNodeFillType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLTimeNodeFillType', ST_TLTimeNodeFillType)

# Atomic SimpleTypeDefinition
class ST_OnOffStyleType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """On/Off Style Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_OnOffStyleType')
    _Documentation = u'On/Off Style Type'
ST_OnOffStyleType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_OnOffStyleType, enum_prefix=None)
ST_OnOffStyleType.on = ST_OnOffStyleType._CF_enumeration.addEnumeration(unicode_value=u'on')
ST_OnOffStyleType.off = ST_OnOffStyleType._CF_enumeration.addEnumeration(unicode_value=u'off')
ST_OnOffStyleType.def_ = ST_OnOffStyleType._CF_enumeration.addEnumeration(unicode_value=u'def')
ST_OnOffStyleType._InitializeFacetMap(ST_OnOffStyleType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_OnOffStyleType', ST_OnOffStyleType)

# Atomic SimpleTypeDefinition
class ST_TLCommandType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Command Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLCommandType')
    _Documentation = u'Command Type'
ST_TLCommandType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLCommandType, enum_prefix=None)
ST_TLCommandType.evt = ST_TLCommandType._CF_enumeration.addEnumeration(unicode_value=u'evt')
ST_TLCommandType.call = ST_TLCommandType._CF_enumeration.addEnumeration(unicode_value=u'call')
ST_TLCommandType.verb = ST_TLCommandType._CF_enumeration.addEnumeration(unicode_value=u'verb')
ST_TLCommandType._InitializeFacetMap(ST_TLCommandType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLCommandType', ST_TLCommandType)

# Atomic SimpleTypeDefinition
class ST_TLOleChartBuildType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Embedded Chart Build Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLOleChartBuildType')
    _Documentation = u'Embedded Chart Build Type'
ST_TLOleChartBuildType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLOleChartBuildType, enum_prefix=None)
ST_TLOleChartBuildType.allAtOnce = ST_TLOleChartBuildType._CF_enumeration.addEnumeration(unicode_value=u'allAtOnce')
ST_TLOleChartBuildType.series = ST_TLOleChartBuildType._CF_enumeration.addEnumeration(unicode_value=u'series')
ST_TLOleChartBuildType.category = ST_TLOleChartBuildType._CF_enumeration.addEnumeration(unicode_value=u'category')
ST_TLOleChartBuildType.seriesEl = ST_TLOleChartBuildType._CF_enumeration.addEnumeration(unicode_value=u'seriesEl')
ST_TLOleChartBuildType.categoryEl = ST_TLOleChartBuildType._CF_enumeration.addEnumeration(unicode_value=u'categoryEl')
ST_TLOleChartBuildType._InitializeFacetMap(ST_TLOleChartBuildType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLOleChartBuildType', ST_TLOleChartBuildType)

# Atomic SimpleTypeDefinition
class ST_BevelPresetType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Bevel Presets"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_BevelPresetType')
    _Documentation = u'Bevel Presets'
ST_BevelPresetType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BevelPresetType, enum_prefix=None)
ST_BevelPresetType.relaxedInset = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'relaxedInset')
ST_BevelPresetType.circle = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'circle')
ST_BevelPresetType.slope = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'slope')
ST_BevelPresetType.cross = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'cross')
ST_BevelPresetType.angle = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'angle')
ST_BevelPresetType.softRound = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'softRound')
ST_BevelPresetType.convex = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'convex')
ST_BevelPresetType.coolSlant = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'coolSlant')
ST_BevelPresetType.divot = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'divot')
ST_BevelPresetType.riblet = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'riblet')
ST_BevelPresetType.hardEdge = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'hardEdge')
ST_BevelPresetType.artDeco = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'artDeco')
ST_BevelPresetType._InitializeFacetMap(ST_BevelPresetType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_BevelPresetType', ST_BevelPresetType)

# Atomic SimpleTypeDefinition
class ST_SlideMasterId (pyxb.binding.datatypes.unsignedInt):

    """Slide Master ID"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_SlideMasterId')
    _Documentation = u'Slide Master ID'
ST_SlideMasterId._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_SlideMasterId, value=pyxb.binding.datatypes.unsignedInt(2147483648L))
ST_SlideMasterId._InitializeFacetMap(ST_SlideMasterId._CF_minInclusive)
_Namespace_.addCategoryObject('typeBinding', u'ST_SlideMasterId', ST_SlideMasterId)

# Atomic SimpleTypeDefinition
class ST_OleObjectFollowColorScheme (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Embedded object to Follow Color Scheme"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_OleObjectFollowColorScheme')
    _Documentation = u'Embedded object to Follow Color Scheme'
ST_OleObjectFollowColorScheme._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_OleObjectFollowColorScheme, enum_prefix=None)
ST_OleObjectFollowColorScheme.none = ST_OleObjectFollowColorScheme._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_OleObjectFollowColorScheme.full = ST_OleObjectFollowColorScheme._CF_enumeration.addEnumeration(unicode_value=u'full')
ST_OleObjectFollowColorScheme.textAndBackground = ST_OleObjectFollowColorScheme._CF_enumeration.addEnumeration(unicode_value=u'textAndBackground')
ST_OleObjectFollowColorScheme._InitializeFacetMap(ST_OleObjectFollowColorScheme._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_OleObjectFollowColorScheme', ST_OleObjectFollowColorScheme)

# Atomic SimpleTypeDefinition
class ST_SlideSizeCoordinate (ST_PositiveCoordinate32):

    """Slide Size Coordinate"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_SlideSizeCoordinate')
    _Documentation = u'Slide Size Coordinate'
ST_SlideSizeCoordinate._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_SlideSizeCoordinate, value=pyxb.binding.datatypes.int(51206400))
ST_SlideSizeCoordinate._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_SlideSizeCoordinate, value=pyxb.binding.datatypes.int(914400))
ST_SlideSizeCoordinate._InitializeFacetMap(ST_SlideSizeCoordinate._CF_maxInclusive,
   ST_SlideSizeCoordinate._CF_minInclusive)
_Namespace_.addCategoryObject('typeBinding', u'ST_SlideSizeCoordinate', ST_SlideSizeCoordinate)

# Atomic SimpleTypeDefinition
class ST_SlideSizeType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Slide Size Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_SlideSizeType')
    _Documentation = u'Slide Size Type'
ST_SlideSizeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SlideSizeType, enum_prefix=None)
ST_SlideSizeType.screen4x3 = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'screen4x3')
ST_SlideSizeType.letter = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'letter')
ST_SlideSizeType.A4 = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'A4')
ST_SlideSizeType.n35mm = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'35mm')
ST_SlideSizeType.overhead = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'overhead')
ST_SlideSizeType.banner = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'banner')
ST_SlideSizeType.custom = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'custom')
ST_SlideSizeType.ledger = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'ledger')
ST_SlideSizeType.A3 = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'A3')
ST_SlideSizeType.B4ISO = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'B4ISO')
ST_SlideSizeType.B5ISO = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'B5ISO')
ST_SlideSizeType.B4JIS = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'B4JIS')
ST_SlideSizeType.B5JIS = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'B5JIS')
ST_SlideSizeType.hagakiCard = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'hagakiCard')
ST_SlideSizeType.screen16x9 = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'screen16x9')
ST_SlideSizeType.screen16x10 = ST_SlideSizeType._CF_enumeration.addEnumeration(unicode_value=u'screen16x10')
ST_SlideSizeType._InitializeFacetMap(ST_SlideSizeType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_SlideSizeType', ST_SlideSizeType)

# Atomic SimpleTypeDefinition
class ST_PathShadeType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Path Shade Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PathShadeType')
    _Documentation = u'Path Shade Type'
ST_PathShadeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PathShadeType, enum_prefix=None)
ST_PathShadeType.shape = ST_PathShadeType._CF_enumeration.addEnumeration(unicode_value=u'shape')
ST_PathShadeType.circle = ST_PathShadeType._CF_enumeration.addEnumeration(unicode_value=u'circle')
ST_PathShadeType.rect = ST_PathShadeType._CF_enumeration.addEnumeration(unicode_value=u'rect')
ST_PathShadeType._InitializeFacetMap(ST_PathShadeType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PathShadeType', ST_PathShadeType)

# Atomic SimpleTypeDefinition
class ST_SlideId (pyxb.binding.datatypes.unsignedInt):

    """Slide Identifier"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_SlideId')
    _Documentation = u'Slide Identifier'
ST_SlideId._CF_maxExclusive = pyxb.binding.facets.CF_maxExclusive(value_datatype=pyxb.binding.datatypes.unsignedInt, value=pyxb.binding.datatypes.unsignedLong(2147483648L))
ST_SlideId._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_SlideId, value=pyxb.binding.datatypes.unsignedInt(256L))
ST_SlideId._InitializeFacetMap(ST_SlideId._CF_maxExclusive,
   ST_SlideId._CF_minInclusive)
_Namespace_.addCategoryObject('typeBinding', u'ST_SlideId', ST_SlideId)

# Atomic SimpleTypeDefinition
class ST_SlideLayoutId (pyxb.binding.datatypes.unsignedInt):

    """Slide Layout ID"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_SlideLayoutId')
    _Documentation = u'Slide Layout ID'
ST_SlideLayoutId._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_SlideLayoutId, value=pyxb.binding.datatypes.unsignedInt(2147483648L))
ST_SlideLayoutId._InitializeFacetMap(ST_SlideLayoutId._CF_minInclusive)
_Namespace_.addCategoryObject('typeBinding', u'ST_SlideLayoutId', ST_SlideLayoutId)

# Atomic SimpleTypeDefinition
class ST_PresetShadowVal (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Shadow Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PresetShadowVal')
    _Documentation = u'Preset Shadow Type'
ST_PresetShadowVal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PresetShadowVal, enum_prefix=None)
ST_PresetShadowVal.shdw1 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw1')
ST_PresetShadowVal.shdw2 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw2')
ST_PresetShadowVal.shdw3 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw3')
ST_PresetShadowVal.shdw4 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw4')
ST_PresetShadowVal.shdw5 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw5')
ST_PresetShadowVal.shdw6 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw6')
ST_PresetShadowVal.shdw7 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw7')
ST_PresetShadowVal.shdw8 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw8')
ST_PresetShadowVal.shdw9 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw9')
ST_PresetShadowVal.shdw10 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw10')
ST_PresetShadowVal.shdw11 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw11')
ST_PresetShadowVal.shdw12 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw12')
ST_PresetShadowVal.shdw13 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw13')
ST_PresetShadowVal.shdw14 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw14')
ST_PresetShadowVal.shdw15 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw15')
ST_PresetShadowVal.shdw16 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw16')
ST_PresetShadowVal.shdw17 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw17')
ST_PresetShadowVal.shdw18 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw18')
ST_PresetShadowVal.shdw19 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw19')
ST_PresetShadowVal.shdw20 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw20')
ST_PresetShadowVal._InitializeFacetMap(ST_PresetShadowVal._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PresetShadowVal', ST_PresetShadowVal)

# Atomic SimpleTypeDefinition
class ST_BookmarkIdSeed (pyxb.binding.datatypes.unsignedInt):

    """Bookmark ID Seed"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_BookmarkIdSeed')
    _Documentation = u'Bookmark ID Seed'
ST_BookmarkIdSeed._CF_maxExclusive = pyxb.binding.facets.CF_maxExclusive(value_datatype=pyxb.binding.datatypes.unsignedInt, value=pyxb.binding.datatypes.unsignedLong(2147483648L))
ST_BookmarkIdSeed._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_BookmarkIdSeed, value=pyxb.binding.datatypes.unsignedInt(1L))
ST_BookmarkIdSeed._InitializeFacetMap(ST_BookmarkIdSeed._CF_maxExclusive,
   ST_BookmarkIdSeed._CF_minInclusive)
_Namespace_.addCategoryObject('typeBinding', u'ST_BookmarkIdSeed', ST_BookmarkIdSeed)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_TLTimeAnimateValueTime (pyxb.binding.basis.STD_union):

    """Animation Time"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLTimeAnimateValueTime')
    _Documentation = u'Animation Time'

    _MemberTypes = ( ST_PositiveFixedPercentageDecimal, _s.ST_PositiveFixedPercentage, ST_TLTimeIndefinite, )
ST_TLTimeAnimateValueTime._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_TLTimeAnimateValueTime._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLTimeAnimateValueTime)
ST_TLTimeAnimateValueTime.indefinite = u'indefinite'# originally ST_TLTimeIndefinite.indefinite
ST_TLTimeAnimateValueTime._InitializeFacetMap(ST_TLTimeAnimateValueTime._CF_pattern,
   ST_TLTimeAnimateValueTime._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLTimeAnimateValueTime', ST_TLTimeAnimateValueTime)

# Atomic SimpleTypeDefinition
class ST_TextSpacingPercent (ST_PercentageDecimal):

    """Text Spacing Percent"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextSpacingPercent')
    _Documentation = u'Text Spacing Percent'
ST_TextSpacingPercent._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextSpacingPercent, value=pyxb.binding.datatypes.int(13200000))
ST_TextSpacingPercent._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextSpacingPercent, value=pyxb.binding.datatypes.int(0))
ST_TextSpacingPercent._InitializeFacetMap(ST_TextSpacingPercent._CF_maxInclusive,
   ST_TextSpacingPercent._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextSpacingPercent', ST_TextSpacingPercent)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_TextSpacingPercentOrPercentString (pyxb.binding.basis.STD_union):

    """Text Spacing Percent"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextSpacingPercentOrPercentString')
    _Documentation = u'Text Spacing Percent'

    _MemberTypes = ( ST_TextSpacingPercent, _s.ST_Percentage, )
ST_TextSpacingPercentOrPercentString._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_TextSpacingPercentOrPercentString._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextSpacingPercentOrPercentString)
ST_TextSpacingPercentOrPercentString._InitializeFacetMap(ST_TextSpacingPercentOrPercentString._CF_pattern,
   ST_TextSpacingPercentOrPercentString._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextSpacingPercentOrPercentString', ST_TextSpacingPercentOrPercentString)

# Atomic SimpleTypeDefinition
class ST_PathFillMode (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Path Fill Mode"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PathFillMode')
    _Documentation = u'Path Fill Mode'
ST_PathFillMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PathFillMode, enum_prefix=None)
ST_PathFillMode.none = ST_PathFillMode._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_PathFillMode.norm = ST_PathFillMode._CF_enumeration.addEnumeration(unicode_value=u'norm')
ST_PathFillMode.lighten = ST_PathFillMode._CF_enumeration.addEnumeration(unicode_value=u'lighten')
ST_PathFillMode.lightenLess = ST_PathFillMode._CF_enumeration.addEnumeration(unicode_value=u'lightenLess')
ST_PathFillMode.darken = ST_PathFillMode._CF_enumeration.addEnumeration(unicode_value=u'darken')
ST_PathFillMode.darkenLess = ST_PathFillMode._CF_enumeration.addEnumeration(unicode_value=u'darkenLess')
ST_PathFillMode._InitializeFacetMap(ST_PathFillMode._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PathFillMode', ST_PathFillMode)

# Atomic SimpleTypeDefinition
class ST_FontCollectionIndex (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Font Collection Index"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_FontCollectionIndex')
    _Documentation = u'Font Collection Index'
ST_FontCollectionIndex._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FontCollectionIndex, enum_prefix=None)
ST_FontCollectionIndex.major = ST_FontCollectionIndex._CF_enumeration.addEnumeration(unicode_value=u'major')
ST_FontCollectionIndex.minor = ST_FontCollectionIndex._CF_enumeration.addEnumeration(unicode_value=u'minor')
ST_FontCollectionIndex.none = ST_FontCollectionIndex._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_FontCollectionIndex._InitializeFacetMap(ST_FontCollectionIndex._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_FontCollectionIndex', ST_FontCollectionIndex)

# Atomic SimpleTypeDefinition
class ST_HueDir (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Hue Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_HueDir')
    _Documentation = u'Hue Direction'
ST_HueDir._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_HueDir, enum_prefix=None)
ST_HueDir.cw = ST_HueDir._CF_enumeration.addEnumeration(unicode_value=u'cw')
ST_HueDir.ccw = ST_HueDir._CF_enumeration.addEnumeration(unicode_value=u'ccw')
ST_HueDir._InitializeFacetMap(ST_HueDir._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_HueDir', ST_HueDir)

# Atomic SimpleTypeDefinition
class ST_ClrAppMethod (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Color Application Method Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ClrAppMethod')
    _Documentation = u'Color Application Method Type'
ST_ClrAppMethod._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ClrAppMethod, enum_prefix=None)
ST_ClrAppMethod.span = ST_ClrAppMethod._CF_enumeration.addEnumeration(unicode_value=u'span')
ST_ClrAppMethod.cycle = ST_ClrAppMethod._CF_enumeration.addEnumeration(unicode_value=u'cycle')
ST_ClrAppMethod.repeat = ST_ClrAppMethod._CF_enumeration.addEnumeration(unicode_value=u'repeat')
ST_ClrAppMethod._InitializeFacetMap(ST_ClrAppMethod._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ClrAppMethod', ST_ClrAppMethod)

# Atomic SimpleTypeDefinition
class ST_AlgorithmType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Algorithm Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_AlgorithmType')
    _Documentation = u'Algorithm Types'
ST_AlgorithmType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AlgorithmType, enum_prefix=None)
ST_AlgorithmType.composite = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'composite')
ST_AlgorithmType.conn = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'conn')
ST_AlgorithmType.cycle = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'cycle')
ST_AlgorithmType.hierChild = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'hierChild')
ST_AlgorithmType.hierRoot = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'hierRoot')
ST_AlgorithmType.pyra = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'pyra')
ST_AlgorithmType.lin = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'lin')
ST_AlgorithmType.sp = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'sp')
ST_AlgorithmType.tx = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'tx')
ST_AlgorithmType.snake = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'snake')
ST_AlgorithmType._InitializeFacetMap(ST_AlgorithmType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_AlgorithmType', ST_AlgorithmType)

# Atomic SimpleTypeDefinition
class ST_WebScreenSize (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """HTML/Web Screen Size Target"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_WebScreenSize')
    _Documentation = u'HTML/Web Screen Size Target'
ST_WebScreenSize._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_WebScreenSize, enum_prefix=None)
ST_WebScreenSize.n544x376 = ST_WebScreenSize._CF_enumeration.addEnumeration(unicode_value=u'544x376')
ST_WebScreenSize.n640x480 = ST_WebScreenSize._CF_enumeration.addEnumeration(unicode_value=u'640x480')
ST_WebScreenSize.n720x512 = ST_WebScreenSize._CF_enumeration.addEnumeration(unicode_value=u'720x512')
ST_WebScreenSize.n800x600 = ST_WebScreenSize._CF_enumeration.addEnumeration(unicode_value=u'800x600')
ST_WebScreenSize.n1024x768 = ST_WebScreenSize._CF_enumeration.addEnumeration(unicode_value=u'1024x768')
ST_WebScreenSize.n1152x882 = ST_WebScreenSize._CF_enumeration.addEnumeration(unicode_value=u'1152x882')
ST_WebScreenSize.n1152x900 = ST_WebScreenSize._CF_enumeration.addEnumeration(unicode_value=u'1152x900')
ST_WebScreenSize.n1280x1024 = ST_WebScreenSize._CF_enumeration.addEnumeration(unicode_value=u'1280x1024')
ST_WebScreenSize.n1600x1200 = ST_WebScreenSize._CF_enumeration.addEnumeration(unicode_value=u'1600x1200')
ST_WebScreenSize.n1800x1400 = ST_WebScreenSize._CF_enumeration.addEnumeration(unicode_value=u'1800x1400')
ST_WebScreenSize.n1920x1200 = ST_WebScreenSize._CF_enumeration.addEnumeration(unicode_value=u'1920x1200')
ST_WebScreenSize._InitializeFacetMap(ST_WebScreenSize._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_WebScreenSize', ST_WebScreenSize)

# Atomic SimpleTypeDefinition
class ST_WebColorType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """HTML Slide Navigation Control Colors"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_WebColorType')
    _Documentation = u'HTML Slide Navigation Control Colors'
ST_WebColorType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_WebColorType, enum_prefix=None)
ST_WebColorType.none = ST_WebColorType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_WebColorType.browser = ST_WebColorType._CF_enumeration.addEnumeration(unicode_value=u'browser')
ST_WebColorType.presentationText = ST_WebColorType._CF_enumeration.addEnumeration(unicode_value=u'presentationText')
ST_WebColorType.presentationAccent = ST_WebColorType._CF_enumeration.addEnumeration(unicode_value=u'presentationAccent')
ST_WebColorType.whiteTextOnBlack = ST_WebColorType._CF_enumeration.addEnumeration(unicode_value=u'whiteTextOnBlack')
ST_WebColorType.blackTextOnWhite = ST_WebColorType._CF_enumeration.addEnumeration(unicode_value=u'blackTextOnWhite')
ST_WebColorType._InitializeFacetMap(ST_WebColorType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_WebColorType', ST_WebColorType)

# Atomic SimpleTypeDefinition
class ST_WebEncoding (pyxb.binding.datatypes.string):

    """Web Encoding"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_WebEncoding')
    _Documentation = u'Web Encoding'
ST_WebEncoding._InitializeFacetMap()
_Namespace_.addCategoryObject('typeBinding', u'ST_WebEncoding', ST_WebEncoding)

# Atomic SimpleTypeDefinition
class ST_PhotoAlbumLayout (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Photo Album Layout Definition"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_PhotoAlbumLayout')
    _Documentation = u'Photo Album Layout Definition'
ST_PhotoAlbumLayout._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PhotoAlbumLayout, enum_prefix=None)
ST_PhotoAlbumLayout.fitToSlide = ST_PhotoAlbumLayout._CF_enumeration.addEnumeration(unicode_value=u'fitToSlide')
ST_PhotoAlbumLayout.n1pic = ST_PhotoAlbumLayout._CF_enumeration.addEnumeration(unicode_value=u'1pic')
ST_PhotoAlbumLayout.n2pic = ST_PhotoAlbumLayout._CF_enumeration.addEnumeration(unicode_value=u'2pic')
ST_PhotoAlbumLayout.n4pic = ST_PhotoAlbumLayout._CF_enumeration.addEnumeration(unicode_value=u'4pic')
ST_PhotoAlbumLayout.n1picTitle = ST_PhotoAlbumLayout._CF_enumeration.addEnumeration(unicode_value=u'1picTitle')
ST_PhotoAlbumLayout.n2picTitle = ST_PhotoAlbumLayout._CF_enumeration.addEnumeration(unicode_value=u'2picTitle')
ST_PhotoAlbumLayout.n4picTitle = ST_PhotoAlbumLayout._CF_enumeration.addEnumeration(unicode_value=u'4picTitle')
ST_PhotoAlbumLayout._InitializeFacetMap(ST_PhotoAlbumLayout._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_PhotoAlbumLayout', ST_PhotoAlbumLayout)

# Atomic SimpleTypeDefinition
class ST_PhotoAlbumFrameShape (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Photo Album Shape for Photo Mask"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_PhotoAlbumFrameShape')
    _Documentation = u'Photo Album Shape for Photo Mask'
ST_PhotoAlbumFrameShape._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PhotoAlbumFrameShape, enum_prefix=None)
ST_PhotoAlbumFrameShape.frameStyle1 = ST_PhotoAlbumFrameShape._CF_enumeration.addEnumeration(unicode_value=u'frameStyle1')
ST_PhotoAlbumFrameShape.frameStyle2 = ST_PhotoAlbumFrameShape._CF_enumeration.addEnumeration(unicode_value=u'frameStyle2')
ST_PhotoAlbumFrameShape.frameStyle3 = ST_PhotoAlbumFrameShape._CF_enumeration.addEnumeration(unicode_value=u'frameStyle3')
ST_PhotoAlbumFrameShape.frameStyle4 = ST_PhotoAlbumFrameShape._CF_enumeration.addEnumeration(unicode_value=u'frameStyle4')
ST_PhotoAlbumFrameShape.frameStyle5 = ST_PhotoAlbumFrameShape._CF_enumeration.addEnumeration(unicode_value=u'frameStyle5')
ST_PhotoAlbumFrameShape.frameStyle6 = ST_PhotoAlbumFrameShape._CF_enumeration.addEnumeration(unicode_value=u'frameStyle6')
ST_PhotoAlbumFrameShape.frameStyle7 = ST_PhotoAlbumFrameShape._CF_enumeration.addEnumeration(unicode_value=u'frameStyle7')
ST_PhotoAlbumFrameShape._InitializeFacetMap(ST_PhotoAlbumFrameShape._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_PhotoAlbumFrameShape', ST_PhotoAlbumFrameShape)

# Atomic SimpleTypeDefinition
class ST_TextFontScalePercent (ST_PercentageDecimal):

    """Text Font Scale Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextFontScalePercent')
    _Documentation = u'Text Font Scale Percentage'
ST_TextFontScalePercent._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextFontScalePercent, value=pyxb.binding.datatypes.int(100000))
ST_TextFontScalePercent._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextFontScalePercent, value=pyxb.binding.datatypes.int(1000))
ST_TextFontScalePercent._InitializeFacetMap(ST_TextFontScalePercent._CF_maxInclusive,
   ST_TextFontScalePercent._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextFontScalePercent', ST_TextFontScalePercent)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_TextFontScalePercentOrPercentString (pyxb.binding.basis.STD_union):

    """Text Font Scale Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextFontScalePercentOrPercentString')
    _Documentation = u'Text Font Scale Percentage'

    _MemberTypes = ( ST_TextFontScalePercent, _s.ST_Percentage, )
ST_TextFontScalePercentOrPercentString._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_TextFontScalePercentOrPercentString._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextFontScalePercentOrPercentString)
ST_TextFontScalePercentOrPercentString._InitializeFacetMap(ST_TextFontScalePercentOrPercentString._CF_pattern,
   ST_TextFontScalePercentOrPercentString._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextFontScalePercentOrPercentString', ST_TextFontScalePercentOrPercentString)

# Atomic SimpleTypeDefinition
class ST_TLAnimateEffectTransition (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Time List Animate Effect Transition"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLAnimateEffectTransition')
    _Documentation = u'Time List Animate Effect Transition'
ST_TLAnimateEffectTransition._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLAnimateEffectTransition, enum_prefix=None)
ST_TLAnimateEffectTransition.in_ = ST_TLAnimateEffectTransition._CF_enumeration.addEnumeration(unicode_value=u'in')
ST_TLAnimateEffectTransition.out = ST_TLAnimateEffectTransition._CF_enumeration.addEnumeration(unicode_value=u'out')
ST_TLAnimateEffectTransition.none = ST_TLAnimateEffectTransition._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TLAnimateEffectTransition._InitializeFacetMap(ST_TLAnimateEffectTransition._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLAnimateEffectTransition', ST_TLAnimateEffectTransition)

# Atomic SimpleTypeDefinition
class ST_AnimationBuildType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Animation Build Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_AnimationBuildType')
    _Documentation = u'Animation Build Type'
ST_AnimationBuildType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AnimationBuildType, enum_prefix=None)
ST_AnimationBuildType.allAtOnce = ST_AnimationBuildType._CF_enumeration.addEnumeration(unicode_value=u'allAtOnce')
ST_AnimationBuildType._InitializeFacetMap(ST_AnimationBuildType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_AnimationBuildType', ST_AnimationBuildType)

# Atomic SimpleTypeDefinition
class ST_AnimationChartOnlyBuildType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Chart only Animation Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_AnimationChartOnlyBuildType')
    _Documentation = u'Chart only Animation Types'
ST_AnimationChartOnlyBuildType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AnimationChartOnlyBuildType, enum_prefix=None)
ST_AnimationChartOnlyBuildType.series = ST_AnimationChartOnlyBuildType._CF_enumeration.addEnumeration(unicode_value=u'series')
ST_AnimationChartOnlyBuildType.category = ST_AnimationChartOnlyBuildType._CF_enumeration.addEnumeration(unicode_value=u'category')
ST_AnimationChartOnlyBuildType.seriesEl = ST_AnimationChartOnlyBuildType._CF_enumeration.addEnumeration(unicode_value=u'seriesEl')
ST_AnimationChartOnlyBuildType.categoryEl = ST_AnimationChartOnlyBuildType._CF_enumeration.addEnumeration(unicode_value=u'categoryEl')
ST_AnimationChartOnlyBuildType._InitializeFacetMap(ST_AnimationChartOnlyBuildType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_AnimationChartOnlyBuildType', ST_AnimationChartOnlyBuildType)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_AnimationChartBuildType (pyxb.binding.basis.STD_union):

    """Chart Animation Build Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_AnimationChartBuildType')
    _Documentation = u'Chart Animation Build Type'

    _MemberTypes = ( ST_AnimationBuildType, ST_AnimationChartOnlyBuildType, )
ST_AnimationChartBuildType._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_AnimationChartBuildType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AnimationChartBuildType)
ST_AnimationChartBuildType.allAtOnce = u'allAtOnce'# originally ST_AnimationBuildType.allAtOnce
ST_AnimationChartBuildType.series = u'series'     # originally ST_AnimationChartOnlyBuildType.series
ST_AnimationChartBuildType.category = u'category' # originally ST_AnimationChartOnlyBuildType.category
ST_AnimationChartBuildType.seriesEl = u'seriesEl' # originally ST_AnimationChartOnlyBuildType.seriesEl
ST_AnimationChartBuildType.categoryEl = u'categoryEl'# originally ST_AnimationChartOnlyBuildType.categoryEl
ST_AnimationChartBuildType._InitializeFacetMap(ST_AnimationChartBuildType._CF_pattern,
   ST_AnimationChartBuildType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_AnimationChartBuildType', ST_AnimationChartBuildType)

# Atomic SimpleTypeDefinition
class ST_IterateType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Iterate Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_IterateType')
    _Documentation = u'Iterate Type'
ST_IterateType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_IterateType, enum_prefix=None)
ST_IterateType.el = ST_IterateType._CF_enumeration.addEnumeration(unicode_value=u'el')
ST_IterateType.wd = ST_IterateType._CF_enumeration.addEnumeration(unicode_value=u'wd')
ST_IterateType.lt = ST_IterateType._CF_enumeration.addEnumeration(unicode_value=u'lt')
ST_IterateType._InitializeFacetMap(ST_IterateType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_IterateType', ST_IterateType)

# Atomic SimpleTypeDefinition
class ST_SlideLayoutType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Slide Layout Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_SlideLayoutType')
    _Documentation = u'Slide Layout Type'
ST_SlideLayoutType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SlideLayoutType, enum_prefix=None)
ST_SlideLayoutType.title = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'title')
ST_SlideLayoutType.tx = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'tx')
ST_SlideLayoutType.twoColTx = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'twoColTx')
ST_SlideLayoutType.tbl = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'tbl')
ST_SlideLayoutType.txAndChart = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'txAndChart')
ST_SlideLayoutType.chartAndTx = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'chartAndTx')
ST_SlideLayoutType.dgm = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'dgm')
ST_SlideLayoutType.chart = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'chart')
ST_SlideLayoutType.txAndClipArt = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'txAndClipArt')
ST_SlideLayoutType.clipArtAndTx = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'clipArtAndTx')
ST_SlideLayoutType.titleOnly = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'titleOnly')
ST_SlideLayoutType.blank = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'blank')
ST_SlideLayoutType.txAndObj = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'txAndObj')
ST_SlideLayoutType.objAndTx = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'objAndTx')
ST_SlideLayoutType.objOnly = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'objOnly')
ST_SlideLayoutType.obj = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'obj')
ST_SlideLayoutType.txAndMedia = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'txAndMedia')
ST_SlideLayoutType.mediaAndTx = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'mediaAndTx')
ST_SlideLayoutType.objOverTx = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'objOverTx')
ST_SlideLayoutType.txOverObj = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'txOverObj')
ST_SlideLayoutType.txAndTwoObj = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'txAndTwoObj')
ST_SlideLayoutType.twoObjAndTx = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'twoObjAndTx')
ST_SlideLayoutType.twoObjOverTx = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'twoObjOverTx')
ST_SlideLayoutType.fourObj = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'fourObj')
ST_SlideLayoutType.vertTx = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'vertTx')
ST_SlideLayoutType.clipArtAndVertTx = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'clipArtAndVertTx')
ST_SlideLayoutType.vertTitleAndTx = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'vertTitleAndTx')
ST_SlideLayoutType.vertTitleAndTxOverChart = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'vertTitleAndTxOverChart')
ST_SlideLayoutType.twoObj = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'twoObj')
ST_SlideLayoutType.objAndTwoObj = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'objAndTwoObj')
ST_SlideLayoutType.twoObjAndObj = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'twoObjAndObj')
ST_SlideLayoutType.cust = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'cust')
ST_SlideLayoutType.secHead = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'secHead')
ST_SlideLayoutType.twoTxTwoObj = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'twoTxTwoObj')
ST_SlideLayoutType.objTx = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'objTx')
ST_SlideLayoutType.picTx = ST_SlideLayoutType._CF_enumeration.addEnumeration(unicode_value=u'picTx')
ST_SlideLayoutType._InitializeFacetMap(ST_SlideLayoutType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_SlideLayoutType', ST_SlideLayoutType)

# Atomic SimpleTypeDefinition
class ST_TLBehaviorAccumulateType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Behavior Accumulate Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLBehaviorAccumulateType')
    _Documentation = u'Behavior Accumulate Type'
ST_TLBehaviorAccumulateType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLBehaviorAccumulateType, enum_prefix=None)
ST_TLBehaviorAccumulateType.none = ST_TLBehaviorAccumulateType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TLBehaviorAccumulateType.always = ST_TLBehaviorAccumulateType._CF_enumeration.addEnumeration(unicode_value=u'always')
ST_TLBehaviorAccumulateType._InitializeFacetMap(ST_TLBehaviorAccumulateType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLBehaviorAccumulateType', ST_TLBehaviorAccumulateType)

# Atomic SimpleTypeDefinition
class ST_TLBehaviorTransformType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Behavior Transform Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLBehaviorTransformType')
    _Documentation = u'Behavior Transform Type'
ST_TLBehaviorTransformType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLBehaviorTransformType, enum_prefix=None)
ST_TLBehaviorTransformType.pt = ST_TLBehaviorTransformType._CF_enumeration.addEnumeration(unicode_value=u'pt')
ST_TLBehaviorTransformType.img = ST_TLBehaviorTransformType._CF_enumeration.addEnumeration(unicode_value=u'img')
ST_TLBehaviorTransformType._InitializeFacetMap(ST_TLBehaviorTransformType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLBehaviorTransformType', ST_TLBehaviorTransformType)

# Atomic SimpleTypeDefinition
class ST_TLBehaviorOverrideType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Behavior Override Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLBehaviorOverrideType')
    _Documentation = u'Behavior Override Type'
ST_TLBehaviorOverrideType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLBehaviorOverrideType, enum_prefix=None)
ST_TLBehaviorOverrideType.normal = ST_TLBehaviorOverrideType._CF_enumeration.addEnumeration(unicode_value=u'normal')
ST_TLBehaviorOverrideType.childStyle = ST_TLBehaviorOverrideType._CF_enumeration.addEnumeration(unicode_value=u'childStyle')
ST_TLBehaviorOverrideType._InitializeFacetMap(ST_TLBehaviorOverrideType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLBehaviorOverrideType', ST_TLBehaviorOverrideType)

# Atomic SimpleTypeDefinition
class ST_TLBehaviorAdditiveType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Behavior Additive Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLBehaviorAdditiveType')
    _Documentation = u'Behavior Additive Type'
ST_TLBehaviorAdditiveType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLBehaviorAdditiveType, enum_prefix=None)
ST_TLBehaviorAdditiveType.base = ST_TLBehaviorAdditiveType._CF_enumeration.addEnumeration(unicode_value=u'base')
ST_TLBehaviorAdditiveType.sum = ST_TLBehaviorAdditiveType._CF_enumeration.addEnumeration(unicode_value=u'sum')
ST_TLBehaviorAdditiveType.repl = ST_TLBehaviorAdditiveType._CF_enumeration.addEnumeration(unicode_value=u'repl')
ST_TLBehaviorAdditiveType.mult = ST_TLBehaviorAdditiveType._CF_enumeration.addEnumeration(unicode_value=u'mult')
ST_TLBehaviorAdditiveType.none = ST_TLBehaviorAdditiveType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TLBehaviorAdditiveType._InitializeFacetMap(ST_TLBehaviorAdditiveType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLBehaviorAdditiveType', ST_TLBehaviorAdditiveType)

# Atomic SimpleTypeDefinition
class ST_TextTabAlignType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Tab Alignment Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextTabAlignType')
    _Documentation = u'Text Tab Alignment Types'
ST_TextTabAlignType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextTabAlignType, enum_prefix=None)
ST_TextTabAlignType.l = ST_TextTabAlignType._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_TextTabAlignType.ctr = ST_TextTabAlignType._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_TextTabAlignType.r = ST_TextTabAlignType._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_TextTabAlignType.dec = ST_TextTabAlignType._CF_enumeration.addEnumeration(unicode_value=u'dec')
ST_TextTabAlignType._InitializeFacetMap(ST_TextTabAlignType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextTabAlignType', ST_TextTabAlignType)

# Atomic SimpleTypeDefinition
class ST_TextBulletStartAtNum (pyxb.binding.datatypes.int):

    """Start Bullet At Number"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextBulletStartAtNum')
    _Documentation = u'Start Bullet At Number'
ST_TextBulletStartAtNum._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextBulletStartAtNum, value=pyxb.binding.datatypes.int(32767))
ST_TextBulletStartAtNum._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextBulletStartAtNum, value=pyxb.binding.datatypes.int(1))
ST_TextBulletStartAtNum._InitializeFacetMap(ST_TextBulletStartAtNum._CF_maxInclusive,
   ST_TextBulletStartAtNum._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextBulletStartAtNum', ST_TextBulletStartAtNum)

# Atomic SimpleTypeDefinition
class ST_TextAutonumberScheme (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Auto-number Schemes"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextAutonumberScheme')
    _Documentation = u'Text Auto-number Schemes'
ST_TextAutonumberScheme._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextAutonumberScheme, enum_prefix=None)
ST_TextAutonumberScheme.alphaLcParenBoth = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'alphaLcParenBoth')
ST_TextAutonumberScheme.alphaUcParenBoth = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'alphaUcParenBoth')
ST_TextAutonumberScheme.alphaLcParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'alphaLcParenR')
ST_TextAutonumberScheme.alphaUcParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'alphaUcParenR')
ST_TextAutonumberScheme.alphaLcPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'alphaLcPeriod')
ST_TextAutonumberScheme.alphaUcPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'alphaUcPeriod')
ST_TextAutonumberScheme.arabicParenBoth = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabicParenBoth')
ST_TextAutonumberScheme.arabicParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabicParenR')
ST_TextAutonumberScheme.arabicPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabicPeriod')
ST_TextAutonumberScheme.arabicPlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabicPlain')
ST_TextAutonumberScheme.romanLcParenBoth = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'romanLcParenBoth')
ST_TextAutonumberScheme.romanUcParenBoth = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'romanUcParenBoth')
ST_TextAutonumberScheme.romanLcParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'romanLcParenR')
ST_TextAutonumberScheme.romanUcParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'romanUcParenR')
ST_TextAutonumberScheme.romanLcPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'romanLcPeriod')
ST_TextAutonumberScheme.romanUcPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'romanUcPeriod')
ST_TextAutonumberScheme.circleNumDbPlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'circleNumDbPlain')
ST_TextAutonumberScheme.circleNumWdBlackPlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'circleNumWdBlackPlain')
ST_TextAutonumberScheme.circleNumWdWhitePlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'circleNumWdWhitePlain')
ST_TextAutonumberScheme.arabicDbPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabicDbPeriod')
ST_TextAutonumberScheme.arabicDbPlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabicDbPlain')
ST_TextAutonumberScheme.ea1ChsPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'ea1ChsPeriod')
ST_TextAutonumberScheme.ea1ChsPlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'ea1ChsPlain')
ST_TextAutonumberScheme.ea1ChtPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'ea1ChtPeriod')
ST_TextAutonumberScheme.ea1ChtPlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'ea1ChtPlain')
ST_TextAutonumberScheme.ea1JpnChsDbPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'ea1JpnChsDbPeriod')
ST_TextAutonumberScheme.ea1JpnKorPlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'ea1JpnKorPlain')
ST_TextAutonumberScheme.ea1JpnKorPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'ea1JpnKorPeriod')
ST_TextAutonumberScheme.arabic1Minus = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabic1Minus')
ST_TextAutonumberScheme.arabic2Minus = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabic2Minus')
ST_TextAutonumberScheme.hebrew2Minus = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'hebrew2Minus')
ST_TextAutonumberScheme.thaiAlphaPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'thaiAlphaPeriod')
ST_TextAutonumberScheme.thaiAlphaParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'thaiAlphaParenR')
ST_TextAutonumberScheme.thaiAlphaParenBoth = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'thaiAlphaParenBoth')
ST_TextAutonumberScheme.thaiNumPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'thaiNumPeriod')
ST_TextAutonumberScheme.thaiNumParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'thaiNumParenR')
ST_TextAutonumberScheme.thaiNumParenBoth = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'thaiNumParenBoth')
ST_TextAutonumberScheme.hindiAlphaPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'hindiAlphaPeriod')
ST_TextAutonumberScheme.hindiNumPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'hindiNumPeriod')
ST_TextAutonumberScheme.hindiNumParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'hindiNumParenR')
ST_TextAutonumberScheme.hindiAlpha1Period = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'hindiAlpha1Period')
ST_TextAutonumberScheme._InitializeFacetMap(ST_TextAutonumberScheme._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextAutonumberScheme', ST_TextAutonumberScheme)

# Atomic SimpleTypeDefinition
class ST_PlaceholderSize (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Placeholder Size"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_PlaceholderSize')
    _Documentation = u'Placeholder Size'
ST_PlaceholderSize._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PlaceholderSize, enum_prefix=None)
ST_PlaceholderSize.full = ST_PlaceholderSize._CF_enumeration.addEnumeration(unicode_value=u'full')
ST_PlaceholderSize.half = ST_PlaceholderSize._CF_enumeration.addEnumeration(unicode_value=u'half')
ST_PlaceholderSize.quarter = ST_PlaceholderSize._CF_enumeration.addEnumeration(unicode_value=u'quarter')
ST_PlaceholderSize._InitializeFacetMap(ST_PlaceholderSize._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_PlaceholderSize', ST_PlaceholderSize)

# Atomic SimpleTypeDefinition
class ST_PlaceholderType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Placeholder IDs"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_PlaceholderType')
    _Documentation = u'Placeholder IDs'
ST_PlaceholderType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PlaceholderType, enum_prefix=None)
ST_PlaceholderType.title = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'title')
ST_PlaceholderType.body = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'body')
ST_PlaceholderType.ctrTitle = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'ctrTitle')
ST_PlaceholderType.subTitle = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'subTitle')
ST_PlaceholderType.dt = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'dt')
ST_PlaceholderType.sldNum = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'sldNum')
ST_PlaceholderType.ftr = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'ftr')
ST_PlaceholderType.hdr = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'hdr')
ST_PlaceholderType.obj = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'obj')
ST_PlaceholderType.chart = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'chart')
ST_PlaceholderType.tbl = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'tbl')
ST_PlaceholderType.clipArt = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'clipArt')
ST_PlaceholderType.dgm = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'dgm')
ST_PlaceholderType.media = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'media')
ST_PlaceholderType.sldImg = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'sldImg')
ST_PlaceholderType.pic = ST_PlaceholderType._CF_enumeration.addEnumeration(unicode_value=u'pic')
ST_PlaceholderType._InitializeFacetMap(ST_PlaceholderType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_PlaceholderType', ST_PlaceholderType)

# Atomic SimpleTypeDefinition
class ST_TLDiagramBuildType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Diagram Build Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLDiagramBuildType')
    _Documentation = u'Diagram Build Types'
ST_TLDiagramBuildType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLDiagramBuildType, enum_prefix=None)
ST_TLDiagramBuildType.whole = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'whole')
ST_TLDiagramBuildType.depthByNode = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'depthByNode')
ST_TLDiagramBuildType.depthByBranch = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'depthByBranch')
ST_TLDiagramBuildType.breadthByNode = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'breadthByNode')
ST_TLDiagramBuildType.breadthByLvl = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'breadthByLvl')
ST_TLDiagramBuildType.cw = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'cw')
ST_TLDiagramBuildType.cwIn = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'cwIn')
ST_TLDiagramBuildType.cwOut = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'cwOut')
ST_TLDiagramBuildType.ccw = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'ccw')
ST_TLDiagramBuildType.ccwIn = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'ccwIn')
ST_TLDiagramBuildType.ccwOut = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'ccwOut')
ST_TLDiagramBuildType.inByRing = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'inByRing')
ST_TLDiagramBuildType.outByRing = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'outByRing')
ST_TLDiagramBuildType.up = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'up')
ST_TLDiagramBuildType.down = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'down')
ST_TLDiagramBuildType.allAtOnce = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'allAtOnce')
ST_TLDiagramBuildType.cust = ST_TLDiagramBuildType._CF_enumeration.addEnumeration(unicode_value=u'cust')
ST_TLDiagramBuildType._InitializeFacetMap(ST_TLDiagramBuildType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLDiagramBuildType', ST_TLDiagramBuildType)

# Atomic SimpleTypeDefinition
class ST_TransitionSpeed (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Transition Speed"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TransitionSpeed')
    _Documentation = u'Transition Speed'
ST_TransitionSpeed._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TransitionSpeed, enum_prefix=None)
ST_TransitionSpeed.slow = ST_TransitionSpeed._CF_enumeration.addEnumeration(unicode_value=u'slow')
ST_TransitionSpeed.med = ST_TransitionSpeed._CF_enumeration.addEnumeration(unicode_value=u'med')
ST_TransitionSpeed.fast = ST_TransitionSpeed._CF_enumeration.addEnumeration(unicode_value=u'fast')
ST_TransitionSpeed._InitializeFacetMap(ST_TransitionSpeed._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TransitionSpeed', ST_TransitionSpeed)

# Atomic SimpleTypeDefinition
class ST_TLNextActionType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Next Action Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLNextActionType')
    _Documentation = u'Next Action Type'
ST_TLNextActionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLNextActionType, enum_prefix=None)
ST_TLNextActionType.none = ST_TLNextActionType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TLNextActionType.seek = ST_TLNextActionType._CF_enumeration.addEnumeration(unicode_value=u'seek')
ST_TLNextActionType._InitializeFacetMap(ST_TLNextActionType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLNextActionType', ST_TLNextActionType)

# Atomic SimpleTypeDefinition
class ST_TLPreviousActionType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Previous Action Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLPreviousActionType')
    _Documentation = u'Previous Action Type'
ST_TLPreviousActionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLPreviousActionType, enum_prefix=None)
ST_TLPreviousActionType.none = ST_TLPreviousActionType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TLPreviousActionType.skipTimed = ST_TLPreviousActionType._CF_enumeration.addEnumeration(unicode_value=u'skipTimed')
ST_TLPreviousActionType._InitializeFacetMap(ST_TLPreviousActionType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLPreviousActionType', ST_TLPreviousActionType)

# Atomic SimpleTypeDefinition
class ST_FOVAngle (ST_Angle):

    """Field of View Angle"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_FOVAngle')
    _Documentation = u'Field of View Angle'
ST_FOVAngle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_FOVAngle, value=pyxb.binding.datatypes.int(10800000))
ST_FOVAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_FOVAngle, value=pyxb.binding.datatypes.int(0))
ST_FOVAngle._InitializeFacetMap(ST_FOVAngle._CF_maxInclusive,
   ST_FOVAngle._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_FOVAngle', ST_FOVAngle)

# Atomic SimpleTypeDefinition
class ST_PresetCameraType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Camera Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PresetCameraType')
    _Documentation = u'Preset Camera Type'
ST_PresetCameraType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PresetCameraType, enum_prefix=None)
ST_PresetCameraType.legacyObliqueTopLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueTopLeft')
ST_PresetCameraType.legacyObliqueTop = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueTop')
ST_PresetCameraType.legacyObliqueTopRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueTopRight')
ST_PresetCameraType.legacyObliqueLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueLeft')
ST_PresetCameraType.legacyObliqueFront = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueFront')
ST_PresetCameraType.legacyObliqueRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueRight')
ST_PresetCameraType.legacyObliqueBottomLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueBottomLeft')
ST_PresetCameraType.legacyObliqueBottom = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueBottom')
ST_PresetCameraType.legacyObliqueBottomRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueBottomRight')
ST_PresetCameraType.legacyPerspectiveTopLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveTopLeft')
ST_PresetCameraType.legacyPerspectiveTop = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveTop')
ST_PresetCameraType.legacyPerspectiveTopRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveTopRight')
ST_PresetCameraType.legacyPerspectiveLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveLeft')
ST_PresetCameraType.legacyPerspectiveFront = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveFront')
ST_PresetCameraType.legacyPerspectiveRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveRight')
ST_PresetCameraType.legacyPerspectiveBottomLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveBottomLeft')
ST_PresetCameraType.legacyPerspectiveBottom = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveBottom')
ST_PresetCameraType.legacyPerspectiveBottomRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveBottomRight')
ST_PresetCameraType.orthographicFront = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'orthographicFront')
ST_PresetCameraType.isometricTopUp = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricTopUp')
ST_PresetCameraType.isometricTopDown = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricTopDown')
ST_PresetCameraType.isometricBottomUp = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricBottomUp')
ST_PresetCameraType.isometricBottomDown = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricBottomDown')
ST_PresetCameraType.isometricLeftUp = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricLeftUp')
ST_PresetCameraType.isometricLeftDown = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricLeftDown')
ST_PresetCameraType.isometricRightUp = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricRightUp')
ST_PresetCameraType.isometricRightDown = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricRightDown')
ST_PresetCameraType.isometricOffAxis1Left = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis1Left')
ST_PresetCameraType.isometricOffAxis1Right = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis1Right')
ST_PresetCameraType.isometricOffAxis1Top = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis1Top')
ST_PresetCameraType.isometricOffAxis2Left = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis2Left')
ST_PresetCameraType.isometricOffAxis2Right = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis2Right')
ST_PresetCameraType.isometricOffAxis2Top = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis2Top')
ST_PresetCameraType.isometricOffAxis3Left = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis3Left')
ST_PresetCameraType.isometricOffAxis3Right = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis3Right')
ST_PresetCameraType.isometricOffAxis3Bottom = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis3Bottom')
ST_PresetCameraType.isometricOffAxis4Left = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis4Left')
ST_PresetCameraType.isometricOffAxis4Right = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis4Right')
ST_PresetCameraType.isometricOffAxis4Bottom = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis4Bottom')
ST_PresetCameraType.obliqueTopLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueTopLeft')
ST_PresetCameraType.obliqueTop = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueTop')
ST_PresetCameraType.obliqueTopRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueTopRight')
ST_PresetCameraType.obliqueLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueLeft')
ST_PresetCameraType.obliqueRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueRight')
ST_PresetCameraType.obliqueBottomLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueBottomLeft')
ST_PresetCameraType.obliqueBottom = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueBottom')
ST_PresetCameraType.obliqueBottomRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueBottomRight')
ST_PresetCameraType.perspectiveFront = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveFront')
ST_PresetCameraType.perspectiveLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveLeft')
ST_PresetCameraType.perspectiveRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveRight')
ST_PresetCameraType.perspectiveAbove = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveAbove')
ST_PresetCameraType.perspectiveBelow = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveBelow')
ST_PresetCameraType.perspectiveAboveLeftFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveAboveLeftFacing')
ST_PresetCameraType.perspectiveAboveRightFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveAboveRightFacing')
ST_PresetCameraType.perspectiveContrastingLeftFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveContrastingLeftFacing')
ST_PresetCameraType.perspectiveContrastingRightFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveContrastingRightFacing')
ST_PresetCameraType.perspectiveHeroicLeftFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveHeroicLeftFacing')
ST_PresetCameraType.perspectiveHeroicRightFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveHeroicRightFacing')
ST_PresetCameraType.perspectiveHeroicExtremeLeftFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveHeroicExtremeLeftFacing')
ST_PresetCameraType.perspectiveHeroicExtremeRightFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveHeroicExtremeRightFacing')
ST_PresetCameraType.perspectiveRelaxed = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveRelaxed')
ST_PresetCameraType.perspectiveRelaxedModerately = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveRelaxedModerately')
ST_PresetCameraType._InitializeFacetMap(ST_PresetCameraType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PresetCameraType', ST_PresetCameraType)

# Atomic SimpleTypeDefinition
class ST_TextSpacingPoint (pyxb.binding.datatypes.int):

    """Text Spacing Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextSpacingPoint')
    _Documentation = u'Text Spacing Point'
ST_TextSpacingPoint._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextSpacingPoint, value=pyxb.binding.datatypes.int(158400))
ST_TextSpacingPoint._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextSpacingPoint, value=pyxb.binding.datatypes.int(0))
ST_TextSpacingPoint._InitializeFacetMap(ST_TextSpacingPoint._CF_maxInclusive,
   ST_TextSpacingPoint._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextSpacingPoint', ST_TextSpacingPoint)

# Atomic SimpleTypeDefinition
class ST_ChartBuildStep (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Chart Animation Build Step"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_ChartBuildStep')
    _Documentation = u'Chart Animation Build Step'
ST_ChartBuildStep._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ChartBuildStep, enum_prefix=None)
ST_ChartBuildStep.category = ST_ChartBuildStep._CF_enumeration.addEnumeration(unicode_value=u'category')
ST_ChartBuildStep.ptInCategory = ST_ChartBuildStep._CF_enumeration.addEnumeration(unicode_value=u'ptInCategory')
ST_ChartBuildStep.series = ST_ChartBuildStep._CF_enumeration.addEnumeration(unicode_value=u'series')
ST_ChartBuildStep.ptInSeries = ST_ChartBuildStep._CF_enumeration.addEnumeration(unicode_value=u'ptInSeries')
ST_ChartBuildStep.allPts = ST_ChartBuildStep._CF_enumeration.addEnumeration(unicode_value=u'allPts')
ST_ChartBuildStep.gridLegend = ST_ChartBuildStep._CF_enumeration.addEnumeration(unicode_value=u'gridLegend')
ST_ChartBuildStep._InitializeFacetMap(ST_ChartBuildStep._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_ChartBuildStep', ST_ChartBuildStep)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_AdjAngle (pyxb.binding.basis.STD_union):

    """Adjustable Angle Methods"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_AdjAngle')
    _Documentation = u'Adjustable Angle Methods'

    _MemberTypes = ( ST_Angle, ST_GeomGuideName, )
ST_AdjAngle._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_AdjAngle._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AdjAngle)
ST_AdjAngle._InitializeFacetMap(ST_AdjAngle._CF_pattern,
   ST_AdjAngle._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_AdjAngle', ST_AdjAngle)

# Atomic SimpleTypeDefinition
class ST_TLAnimateColorSpace (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Time List Animate Color Space"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLAnimateColorSpace')
    _Documentation = u'Time List Animate Color Space'
ST_TLAnimateColorSpace._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLAnimateColorSpace, enum_prefix=None)
ST_TLAnimateColorSpace.rgb = ST_TLAnimateColorSpace._CF_enumeration.addEnumeration(unicode_value=u'rgb')
ST_TLAnimateColorSpace.hsl = ST_TLAnimateColorSpace._CF_enumeration.addEnumeration(unicode_value=u'hsl')
ST_TLAnimateColorSpace._InitializeFacetMap(ST_TLAnimateColorSpace._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLAnimateColorSpace', ST_TLAnimateColorSpace)

# Atomic SimpleTypeDefinition
class ST_TLAnimateColorDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Time List Animate Color Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLAnimateColorDirection')
    _Documentation = u'Time List Animate Color Direction'
ST_TLAnimateColorDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLAnimateColorDirection, enum_prefix=None)
ST_TLAnimateColorDirection.cw = ST_TLAnimateColorDirection._CF_enumeration.addEnumeration(unicode_value=u'cw')
ST_TLAnimateColorDirection.ccw = ST_TLAnimateColorDirection._CF_enumeration.addEnumeration(unicode_value=u'ccw')
ST_TLAnimateColorDirection._InitializeFacetMap(ST_TLAnimateColorDirection._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLAnimateColorDirection', ST_TLAnimateColorDirection)

# Atomic SimpleTypeDefinition
class ST_AnimationDgmOnlyBuildType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Diagram only Animation Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_AnimationDgmOnlyBuildType')
    _Documentation = u'Diagram only Animation Types'
ST_AnimationDgmOnlyBuildType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AnimationDgmOnlyBuildType, enum_prefix=None)
ST_AnimationDgmOnlyBuildType.one = ST_AnimationDgmOnlyBuildType._CF_enumeration.addEnumeration(unicode_value=u'one')
ST_AnimationDgmOnlyBuildType.lvlOne = ST_AnimationDgmOnlyBuildType._CF_enumeration.addEnumeration(unicode_value=u'lvlOne')
ST_AnimationDgmOnlyBuildType.lvlAtOnce = ST_AnimationDgmOnlyBuildType._CF_enumeration.addEnumeration(unicode_value=u'lvlAtOnce')
ST_AnimationDgmOnlyBuildType._InitializeFacetMap(ST_AnimationDgmOnlyBuildType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_AnimationDgmOnlyBuildType', ST_AnimationDgmOnlyBuildType)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_AnimationDgmBuildType (pyxb.binding.basis.STD_union):

    """Diagram Animation Build Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_AnimationDgmBuildType')
    _Documentation = u'Diagram Animation Build Type'

    _MemberTypes = ( ST_AnimationBuildType, ST_AnimationDgmOnlyBuildType, )
ST_AnimationDgmBuildType._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_AnimationDgmBuildType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AnimationDgmBuildType)
ST_AnimationDgmBuildType.allAtOnce = u'allAtOnce' # originally ST_AnimationBuildType.allAtOnce
ST_AnimationDgmBuildType.one = u'one'             # originally ST_AnimationDgmOnlyBuildType.one
ST_AnimationDgmBuildType.lvlOne = u'lvlOne'       # originally ST_AnimationDgmOnlyBuildType.lvlOne
ST_AnimationDgmBuildType.lvlAtOnce = u'lvlAtOnce' # originally ST_AnimationDgmOnlyBuildType.lvlAtOnce
ST_AnimationDgmBuildType._InitializeFacetMap(ST_AnimationDgmBuildType._CF_pattern,
   ST_AnimationDgmBuildType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_AnimationDgmBuildType', ST_AnimationDgmBuildType)

# Atomic SimpleTypeDefinition
class ST_ParameterId (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Parameter Identifier"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ParameterId')
    _Documentation = u'Parameter Identifier'
ST_ParameterId._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ParameterId, enum_prefix=None)
ST_ParameterId.horzAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'horzAlign')
ST_ParameterId.vertAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'vertAlign')
ST_ParameterId.chDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'chDir')
ST_ParameterId.chAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'chAlign')
ST_ParameterId.secChAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'secChAlign')
ST_ParameterId.linDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'linDir')
ST_ParameterId.secLinDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'secLinDir')
ST_ParameterId.stElem = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'stElem')
ST_ParameterId.bendPt = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'bendPt')
ST_ParameterId.connRout = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'connRout')
ST_ParameterId.begSty = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'begSty')
ST_ParameterId.endSty = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'endSty')
ST_ParameterId.dim = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'dim')
ST_ParameterId.rotPath = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'rotPath')
ST_ParameterId.ctrShpMap = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'ctrShpMap')
ST_ParameterId.nodeHorzAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'nodeHorzAlign')
ST_ParameterId.nodeVertAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'nodeVertAlign')
ST_ParameterId.fallback = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'fallback')
ST_ParameterId.txDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'txDir')
ST_ParameterId.pyraAcctPos = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'pyraAcctPos')
ST_ParameterId.pyraAcctTxMar = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'pyraAcctTxMar')
ST_ParameterId.txBlDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'txBlDir')
ST_ParameterId.txAnchorHorz = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'txAnchorHorz')
ST_ParameterId.txAnchorVert = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'txAnchorVert')
ST_ParameterId.txAnchorHorzCh = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'txAnchorHorzCh')
ST_ParameterId.txAnchorVertCh = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'txAnchorVertCh')
ST_ParameterId.parTxLTRAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'parTxLTRAlign')
ST_ParameterId.parTxRTLAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'parTxRTLAlign')
ST_ParameterId.shpTxLTRAlignCh = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'shpTxLTRAlignCh')
ST_ParameterId.shpTxRTLAlignCh = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'shpTxRTLAlignCh')
ST_ParameterId.autoTxRot = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'autoTxRot')
ST_ParameterId.grDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'grDir')
ST_ParameterId.flowDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'flowDir')
ST_ParameterId.contDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'contDir')
ST_ParameterId.bkpt = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'bkpt')
ST_ParameterId.off = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'off')
ST_ParameterId.hierAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'hierAlign')
ST_ParameterId.bkPtFixedVal = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'bkPtFixedVal')
ST_ParameterId.stBulletLvl = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'stBulletLvl')
ST_ParameterId.stAng = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'stAng')
ST_ParameterId.spanAng = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'spanAng')
ST_ParameterId.ar = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'ar')
ST_ParameterId.lnSpPar = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'lnSpPar')
ST_ParameterId.lnSpAfParP = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'lnSpAfParP')
ST_ParameterId.lnSpCh = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'lnSpCh')
ST_ParameterId.lnSpAfChP = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'lnSpAfChP')
ST_ParameterId.rtShortDist = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'rtShortDist')
ST_ParameterId.alignTx = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'alignTx')
ST_ParameterId.pyraLvlNode = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'pyraLvlNode')
ST_ParameterId.pyraAcctBkgdNode = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'pyraAcctBkgdNode')
ST_ParameterId.pyraAcctTxNode = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'pyraAcctTxNode')
ST_ParameterId.srcNode = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'srcNode')
ST_ParameterId.dstNode = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'dstNode')
ST_ParameterId.begPts = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'begPts')
ST_ParameterId.endPts = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'endPts')
ST_ParameterId._InitializeFacetMap(ST_ParameterId._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ParameterId', ST_ParameterId)

# Atomic SimpleTypeDefinition
class ST_GrowDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Grow Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_GrowDirection')
    _Documentation = u'Grow Direction'
ST_GrowDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_GrowDirection, enum_prefix=None)
ST_GrowDirection.tL = ST_GrowDirection._CF_enumeration.addEnumeration(unicode_value=u'tL')
ST_GrowDirection.tR = ST_GrowDirection._CF_enumeration.addEnumeration(unicode_value=u'tR')
ST_GrowDirection.bL = ST_GrowDirection._CF_enumeration.addEnumeration(unicode_value=u'bL')
ST_GrowDirection.bR = ST_GrowDirection._CF_enumeration.addEnumeration(unicode_value=u'bR')
ST_GrowDirection._InitializeFacetMap(ST_GrowDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_GrowDirection', ST_GrowDirection)

# Atomic SimpleTypeDefinition
class ST_FlowDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Flow Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_FlowDirection')
    _Documentation = u'Flow Direction'
ST_FlowDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FlowDirection, enum_prefix=None)
ST_FlowDirection.row = ST_FlowDirection._CF_enumeration.addEnumeration(unicode_value=u'row')
ST_FlowDirection.col = ST_FlowDirection._CF_enumeration.addEnumeration(unicode_value=u'col')
ST_FlowDirection._InitializeFacetMap(ST_FlowDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_FlowDirection', ST_FlowDirection)

# Atomic SimpleTypeDefinition
class ST_ContinueDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Continue Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ContinueDirection')
    _Documentation = u'Continue Direction'
ST_ContinueDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ContinueDirection, enum_prefix=None)
ST_ContinueDirection.revDir = ST_ContinueDirection._CF_enumeration.addEnumeration(unicode_value=u'revDir')
ST_ContinueDirection.sameDir = ST_ContinueDirection._CF_enumeration.addEnumeration(unicode_value=u'sameDir')
ST_ContinueDirection._InitializeFacetMap(ST_ContinueDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ContinueDirection', ST_ContinueDirection)

# Atomic SimpleTypeDefinition
class ST_Breakpoint (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Breakpoint"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_Breakpoint')
    _Documentation = u'Breakpoint'
ST_Breakpoint._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Breakpoint, enum_prefix=None)
ST_Breakpoint.endCnv = ST_Breakpoint._CF_enumeration.addEnumeration(unicode_value=u'endCnv')
ST_Breakpoint.bal = ST_Breakpoint._CF_enumeration.addEnumeration(unicode_value=u'bal')
ST_Breakpoint.fixed = ST_Breakpoint._CF_enumeration.addEnumeration(unicode_value=u'fixed')
ST_Breakpoint._InitializeFacetMap(ST_Breakpoint._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_Breakpoint', ST_Breakpoint)

# Atomic SimpleTypeDefinition
class ST_Offset (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Offset"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_Offset')
    _Documentation = u'Offset'
ST_Offset._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Offset, enum_prefix=None)
ST_Offset.ctr = ST_Offset._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_Offset.off = ST_Offset._CF_enumeration.addEnumeration(unicode_value=u'off')
ST_Offset._InitializeFacetMap(ST_Offset._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_Offset', ST_Offset)

# Atomic SimpleTypeDefinition
class ST_HierarchyAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Hierarchy Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_HierarchyAlignment')
    _Documentation = u'Hierarchy Alignment'
ST_HierarchyAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_HierarchyAlignment, enum_prefix=None)
ST_HierarchyAlignment.tL = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'tL')
ST_HierarchyAlignment.tR = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'tR')
ST_HierarchyAlignment.tCtrCh = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'tCtrCh')
ST_HierarchyAlignment.tCtrDes = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'tCtrDes')
ST_HierarchyAlignment.bL = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'bL')
ST_HierarchyAlignment.bR = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'bR')
ST_HierarchyAlignment.bCtrCh = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'bCtrCh')
ST_HierarchyAlignment.bCtrDes = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'bCtrDes')
ST_HierarchyAlignment.lT = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'lT')
ST_HierarchyAlignment.lB = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'lB')
ST_HierarchyAlignment.lCtrCh = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'lCtrCh')
ST_HierarchyAlignment.lCtrDes = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'lCtrDes')
ST_HierarchyAlignment.rT = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'rT')
ST_HierarchyAlignment.rB = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'rB')
ST_HierarchyAlignment.rCtrCh = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'rCtrCh')
ST_HierarchyAlignment.rCtrDes = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'rCtrDes')
ST_HierarchyAlignment._InitializeFacetMap(ST_HierarchyAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_HierarchyAlignment', ST_HierarchyAlignment)

# Atomic SimpleTypeDefinition
class ST_DiagramHorizontalAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Horizontal Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_DiagramHorizontalAlignment')
    _Documentation = u'Horizontal Alignment'
ST_DiagramHorizontalAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DiagramHorizontalAlignment, enum_prefix=None)
ST_DiagramHorizontalAlignment.l = ST_DiagramHorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_DiagramHorizontalAlignment.ctr = ST_DiagramHorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_DiagramHorizontalAlignment.r = ST_DiagramHorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_DiagramHorizontalAlignment.none = ST_DiagramHorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_DiagramHorizontalAlignment._InitializeFacetMap(ST_DiagramHorizontalAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_DiagramHorizontalAlignment', ST_DiagramHorizontalAlignment)

# Atomic SimpleTypeDefinition
class ST_ChildDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Child Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ChildDirection')
    _Documentation = u'Child Direction'
ST_ChildDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ChildDirection, enum_prefix=None)
ST_ChildDirection.horz = ST_ChildDirection._CF_enumeration.addEnumeration(unicode_value=u'horz')
ST_ChildDirection.vert = ST_ChildDirection._CF_enumeration.addEnumeration(unicode_value=u'vert')
ST_ChildDirection._InitializeFacetMap(ST_ChildDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ChildDirection', ST_ChildDirection)

# Atomic SimpleTypeDefinition
class ST_ChildAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Child Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ChildAlignment')
    _Documentation = u'Child Alignment'
ST_ChildAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ChildAlignment, enum_prefix=None)
ST_ChildAlignment.t = ST_ChildAlignment._CF_enumeration.addEnumeration(unicode_value=u't')
ST_ChildAlignment.b = ST_ChildAlignment._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_ChildAlignment.l = ST_ChildAlignment._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_ChildAlignment.r = ST_ChildAlignment._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_ChildAlignment._InitializeFacetMap(ST_ChildAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ChildAlignment', ST_ChildAlignment)

# Atomic SimpleTypeDefinition
class ST_SecondaryChildAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Secondary Child Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_SecondaryChildAlignment')
    _Documentation = u'Secondary Child Alignment'
ST_SecondaryChildAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SecondaryChildAlignment, enum_prefix=None)
ST_SecondaryChildAlignment.none = ST_SecondaryChildAlignment._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_SecondaryChildAlignment.t = ST_SecondaryChildAlignment._CF_enumeration.addEnumeration(unicode_value=u't')
ST_SecondaryChildAlignment.b = ST_SecondaryChildAlignment._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_SecondaryChildAlignment.l = ST_SecondaryChildAlignment._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_SecondaryChildAlignment.r = ST_SecondaryChildAlignment._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_SecondaryChildAlignment._InitializeFacetMap(ST_SecondaryChildAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_SecondaryChildAlignment', ST_SecondaryChildAlignment)

# Atomic SimpleTypeDefinition
class ST_LinearDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Linear Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_LinearDirection')
    _Documentation = u'Linear Direction'
ST_LinearDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LinearDirection, enum_prefix=None)
ST_LinearDirection.fromL = ST_LinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromL')
ST_LinearDirection.fromR = ST_LinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromR')
ST_LinearDirection.fromT = ST_LinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromT')
ST_LinearDirection.fromB = ST_LinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromB')
ST_LinearDirection._InitializeFacetMap(ST_LinearDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_LinearDirection', ST_LinearDirection)

# Atomic SimpleTypeDefinition
class ST_SecondaryLinearDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Secondary Linear Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_SecondaryLinearDirection')
    _Documentation = u'Secondary Linear Direction'
ST_SecondaryLinearDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SecondaryLinearDirection, enum_prefix=None)
ST_SecondaryLinearDirection.none = ST_SecondaryLinearDirection._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_SecondaryLinearDirection.fromL = ST_SecondaryLinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromL')
ST_SecondaryLinearDirection.fromR = ST_SecondaryLinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromR')
ST_SecondaryLinearDirection.fromT = ST_SecondaryLinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromT')
ST_SecondaryLinearDirection.fromB = ST_SecondaryLinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromB')
ST_SecondaryLinearDirection._InitializeFacetMap(ST_SecondaryLinearDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_SecondaryLinearDirection', ST_SecondaryLinearDirection)

# Atomic SimpleTypeDefinition
class ST_StartingElement (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Starting Element"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_StartingElement')
    _Documentation = u'Starting Element'
ST_StartingElement._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_StartingElement, enum_prefix=None)
ST_StartingElement.node = ST_StartingElement._CF_enumeration.addEnumeration(unicode_value=u'node')
ST_StartingElement.trans = ST_StartingElement._CF_enumeration.addEnumeration(unicode_value=u'trans')
ST_StartingElement._InitializeFacetMap(ST_StartingElement._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_StartingElement', ST_StartingElement)

# Atomic SimpleTypeDefinition
class ST_RotationPath (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Rotation Path"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_RotationPath')
    _Documentation = u'Rotation Path'
ST_RotationPath._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_RotationPath, enum_prefix=None)
ST_RotationPath.none = ST_RotationPath._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_RotationPath.alongPath = ST_RotationPath._CF_enumeration.addEnumeration(unicode_value=u'alongPath')
ST_RotationPath._InitializeFacetMap(ST_RotationPath._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_RotationPath', ST_RotationPath)

# Atomic SimpleTypeDefinition
class ST_CenterShapeMapping (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Center Shape Mapping"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_CenterShapeMapping')
    _Documentation = u'Center Shape Mapping'
ST_CenterShapeMapping._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CenterShapeMapping, enum_prefix=None)
ST_CenterShapeMapping.none = ST_CenterShapeMapping._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_CenterShapeMapping.fNode = ST_CenterShapeMapping._CF_enumeration.addEnumeration(unicode_value=u'fNode')
ST_CenterShapeMapping._InitializeFacetMap(ST_CenterShapeMapping._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_CenterShapeMapping', ST_CenterShapeMapping)

# Atomic SimpleTypeDefinition
class ST_BendPoint (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Bend Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_BendPoint')
    _Documentation = u'Bend Point'
ST_BendPoint._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BendPoint, enum_prefix=None)
ST_BendPoint.beg = ST_BendPoint._CF_enumeration.addEnumeration(unicode_value=u'beg')
ST_BendPoint.def_ = ST_BendPoint._CF_enumeration.addEnumeration(unicode_value=u'def')
ST_BendPoint.end = ST_BendPoint._CF_enumeration.addEnumeration(unicode_value=u'end')
ST_BendPoint._InitializeFacetMap(ST_BendPoint._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_BendPoint', ST_BendPoint)

# Atomic SimpleTypeDefinition
class ST_ConnectorRouting (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Connector Routing"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ConnectorRouting')
    _Documentation = u'Connector Routing'
ST_ConnectorRouting._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ConnectorRouting, enum_prefix=None)
ST_ConnectorRouting.stra = ST_ConnectorRouting._CF_enumeration.addEnumeration(unicode_value=u'stra')
ST_ConnectorRouting.bend = ST_ConnectorRouting._CF_enumeration.addEnumeration(unicode_value=u'bend')
ST_ConnectorRouting.curve = ST_ConnectorRouting._CF_enumeration.addEnumeration(unicode_value=u'curve')
ST_ConnectorRouting.longCurve = ST_ConnectorRouting._CF_enumeration.addEnumeration(unicode_value=u'longCurve')
ST_ConnectorRouting._InitializeFacetMap(ST_ConnectorRouting._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ConnectorRouting', ST_ConnectorRouting)

# Atomic SimpleTypeDefinition
class ST_ArrowheadStyle (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Arrowhead Styles"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ArrowheadStyle')
    _Documentation = u'Arrowhead Styles'
ST_ArrowheadStyle._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ArrowheadStyle, enum_prefix=None)
ST_ArrowheadStyle.auto = ST_ArrowheadStyle._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_ArrowheadStyle.arr = ST_ArrowheadStyle._CF_enumeration.addEnumeration(unicode_value=u'arr')
ST_ArrowheadStyle.noArr = ST_ArrowheadStyle._CF_enumeration.addEnumeration(unicode_value=u'noArr')
ST_ArrowheadStyle._InitializeFacetMap(ST_ArrowheadStyle._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ArrowheadStyle', ST_ArrowheadStyle)

# Atomic SimpleTypeDefinition
class ST_VerticalAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Vertical Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_VerticalAlignment')
    _Documentation = u'Vertical Alignment'
ST_VerticalAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_VerticalAlignment, enum_prefix=None)
ST_VerticalAlignment.t = ST_VerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u't')
ST_VerticalAlignment.mid = ST_VerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u'mid')
ST_VerticalAlignment.b = ST_VerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_VerticalAlignment.none = ST_VerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_VerticalAlignment._InitializeFacetMap(ST_VerticalAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_VerticalAlignment', ST_VerticalAlignment)

# Atomic SimpleTypeDefinition
class ST_ConnectorPoint (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Connector Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ConnectorPoint')
    _Documentation = u'Connector Point'
ST_ConnectorPoint._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ConnectorPoint, enum_prefix=None)
ST_ConnectorPoint.auto = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_ConnectorPoint.bCtr = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'bCtr')
ST_ConnectorPoint.ctr = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_ConnectorPoint.midL = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'midL')
ST_ConnectorPoint.midR = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'midR')
ST_ConnectorPoint.tCtr = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'tCtr')
ST_ConnectorPoint.bL = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'bL')
ST_ConnectorPoint.bR = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'bR')
ST_ConnectorPoint.tL = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'tL')
ST_ConnectorPoint.tR = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'tR')
ST_ConnectorPoint.radial = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'radial')
ST_ConnectorPoint._InitializeFacetMap(ST_ConnectorPoint._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ConnectorPoint', ST_ConnectorPoint)

# Atomic SimpleTypeDefinition
class ST_NodeHorizontalAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Node Horizontal Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_NodeHorizontalAlignment')
    _Documentation = u'Node Horizontal Alignment'
ST_NodeHorizontalAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_NodeHorizontalAlignment, enum_prefix=None)
ST_NodeHorizontalAlignment.l = ST_NodeHorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_NodeHorizontalAlignment.ctr = ST_NodeHorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_NodeHorizontalAlignment.r = ST_NodeHorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_NodeHorizontalAlignment._InitializeFacetMap(ST_NodeHorizontalAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_NodeHorizontalAlignment', ST_NodeHorizontalAlignment)

# Atomic SimpleTypeDefinition
class ST_NodeVerticalAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Node Vertical Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_NodeVerticalAlignment')
    _Documentation = u'Node Vertical Alignment'
ST_NodeVerticalAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_NodeVerticalAlignment, enum_prefix=None)
ST_NodeVerticalAlignment.t = ST_NodeVerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u't')
ST_NodeVerticalAlignment.mid = ST_NodeVerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u'mid')
ST_NodeVerticalAlignment.b = ST_NodeVerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_NodeVerticalAlignment._InitializeFacetMap(ST_NodeVerticalAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_NodeVerticalAlignment', ST_NodeVerticalAlignment)

# Atomic SimpleTypeDefinition
class ST_FallbackDimension (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Fallback Dimension"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_FallbackDimension')
    _Documentation = u'Fallback Dimension'
ST_FallbackDimension._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FallbackDimension, enum_prefix=None)
ST_FallbackDimension.n1D = ST_FallbackDimension._CF_enumeration.addEnumeration(unicode_value=u'1D')
ST_FallbackDimension.n2D = ST_FallbackDimension._CF_enumeration.addEnumeration(unicode_value=u'2D')
ST_FallbackDimension._InitializeFacetMap(ST_FallbackDimension._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_FallbackDimension', ST_FallbackDimension)

# Atomic SimpleTypeDefinition
class ST_AutoTextRotation (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Auto Text Rotation"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_AutoTextRotation')
    _Documentation = u'Auto Text Rotation'
ST_AutoTextRotation._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AutoTextRotation, enum_prefix=None)
ST_AutoTextRotation.none = ST_AutoTextRotation._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_AutoTextRotation.upr = ST_AutoTextRotation._CF_enumeration.addEnumeration(unicode_value=u'upr')
ST_AutoTextRotation.grav = ST_AutoTextRotation._CF_enumeration.addEnumeration(unicode_value=u'grav')
ST_AutoTextRotation._InitializeFacetMap(ST_AutoTextRotation._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_AutoTextRotation', ST_AutoTextRotation)

# Atomic SimpleTypeDefinition
class ST_TextDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_TextDirection')
    _Documentation = u'Text Direction'
ST_TextDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextDirection, enum_prefix=None)
ST_TextDirection.fromT = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'fromT')
ST_TextDirection.fromB = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'fromB')
ST_TextDirection._InitializeFacetMap(ST_TextDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_TextDirection', ST_TextDirection)

# Atomic SimpleTypeDefinition
class ST_ConnectorDimension (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Connector Dimension"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ConnectorDimension')
    _Documentation = u'Connector Dimension'
ST_ConnectorDimension._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ConnectorDimension, enum_prefix=None)
ST_ConnectorDimension.n1D = ST_ConnectorDimension._CF_enumeration.addEnumeration(unicode_value=u'1D')
ST_ConnectorDimension.n2D = ST_ConnectorDimension._CF_enumeration.addEnumeration(unicode_value=u'2D')
ST_ConnectorDimension.cust = ST_ConnectorDimension._CF_enumeration.addEnumeration(unicode_value=u'cust')
ST_ConnectorDimension._InitializeFacetMap(ST_ConnectorDimension._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ConnectorDimension', ST_ConnectorDimension)

# Atomic SimpleTypeDefinition
class ST_PyramidAccentPosition (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Pyramid Accent Position"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_PyramidAccentPosition')
    _Documentation = u'Pyramid Accent Position'
ST_PyramidAccentPosition._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PyramidAccentPosition, enum_prefix=None)
ST_PyramidAccentPosition.bef = ST_PyramidAccentPosition._CF_enumeration.addEnumeration(unicode_value=u'bef')
ST_PyramidAccentPosition.aft = ST_PyramidAccentPosition._CF_enumeration.addEnumeration(unicode_value=u'aft')
ST_PyramidAccentPosition._InitializeFacetMap(ST_PyramidAccentPosition._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_PyramidAccentPosition', ST_PyramidAccentPosition)

# Atomic SimpleTypeDefinition
class ST_PyramidAccentTextMargin (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Pyramid Accent Text Margin"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_PyramidAccentTextMargin')
    _Documentation = u'Pyramid Accent Text Margin'
ST_PyramidAccentTextMargin._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PyramidAccentTextMargin, enum_prefix=None)
ST_PyramidAccentTextMargin.step = ST_PyramidAccentTextMargin._CF_enumeration.addEnumeration(unicode_value=u'step')
ST_PyramidAccentTextMargin.stack = ST_PyramidAccentTextMargin._CF_enumeration.addEnumeration(unicode_value=u'stack')
ST_PyramidAccentTextMargin._InitializeFacetMap(ST_PyramidAccentTextMargin._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_PyramidAccentTextMargin', ST_PyramidAccentTextMargin)

# Atomic SimpleTypeDefinition
class ST_TextBlockDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Block Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_TextBlockDirection')
    _Documentation = u'Text Block Direction'
ST_TextBlockDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextBlockDirection, enum_prefix=None)
ST_TextBlockDirection.horz = ST_TextBlockDirection._CF_enumeration.addEnumeration(unicode_value=u'horz')
ST_TextBlockDirection.vert = ST_TextBlockDirection._CF_enumeration.addEnumeration(unicode_value=u'vert')
ST_TextBlockDirection._InitializeFacetMap(ST_TextBlockDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_TextBlockDirection', ST_TextBlockDirection)

# Atomic SimpleTypeDefinition
class ST_TextAnchorHorizontal (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Anchor Horizontal"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_TextAnchorHorizontal')
    _Documentation = u'Text Anchor Horizontal'
ST_TextAnchorHorizontal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextAnchorHorizontal, enum_prefix=None)
ST_TextAnchorHorizontal.none = ST_TextAnchorHorizontal._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TextAnchorHorizontal.ctr = ST_TextAnchorHorizontal._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_TextAnchorHorizontal._InitializeFacetMap(ST_TextAnchorHorizontal._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_TextAnchorHorizontal', ST_TextAnchorHorizontal)

# Atomic SimpleTypeDefinition
class ST_TextAnchorVertical (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Anchor Vertical"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_TextAnchorVertical')
    _Documentation = u'Text Anchor Vertical'
ST_TextAnchorVertical._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextAnchorVertical, enum_prefix=None)
ST_TextAnchorVertical.t = ST_TextAnchorVertical._CF_enumeration.addEnumeration(unicode_value=u't')
ST_TextAnchorVertical.mid = ST_TextAnchorVertical._CF_enumeration.addEnumeration(unicode_value=u'mid')
ST_TextAnchorVertical.b = ST_TextAnchorVertical._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_TextAnchorVertical._InitializeFacetMap(ST_TextAnchorVertical._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_TextAnchorVertical', ST_TextAnchorVertical)

# Atomic SimpleTypeDefinition
class ST_DiagramTextAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_DiagramTextAlignment')
    _Documentation = u'Text Alignment'
ST_DiagramTextAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DiagramTextAlignment, enum_prefix=None)
ST_DiagramTextAlignment.l = ST_DiagramTextAlignment._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_DiagramTextAlignment.ctr = ST_DiagramTextAlignment._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_DiagramTextAlignment.r = ST_DiagramTextAlignment._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_DiagramTextAlignment._InitializeFacetMap(ST_DiagramTextAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_DiagramTextAlignment', ST_DiagramTextAlignment)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_ParameterVal (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ST_DiagramHorizontalAlignment, ST_VerticalAlignment, ST_ChildDirection, ST_ChildAlignment, ST_SecondaryChildAlignment, ST_LinearDirection, ST_SecondaryLinearDirection, ST_StartingElement, ST_BendPoint, ST_ConnectorRouting, ST_ArrowheadStyle, ST_ConnectorDimension, ST_RotationPath, ST_CenterShapeMapping, ST_NodeHorizontalAlignment, ST_NodeVerticalAlignment, ST_FallbackDimension, ST_TextDirection, ST_PyramidAccentPosition, ST_PyramidAccentTextMargin, ST_TextBlockDirection, ST_TextAnchorHorizontal, ST_TextAnchorVertical, ST_DiagramTextAlignment, ST_AutoTextRotation, ST_GrowDirection, ST_FlowDirection, ST_ContinueDirection, ST_Breakpoint, ST_Offset, ST_HierarchyAlignment, pyxb.binding.datatypes.int, pyxb.binding.datatypes.double, pyxb.binding.datatypes.boolean, pyxb.binding.datatypes.string, ST_ConnectorPoint."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ParameterVal')
    _Documentation = None

    _MemberTypes = ( ST_DiagramHorizontalAlignment, ST_VerticalAlignment, ST_ChildDirection, ST_ChildAlignment, ST_SecondaryChildAlignment, ST_LinearDirection, ST_SecondaryLinearDirection, ST_StartingElement, ST_BendPoint, ST_ConnectorRouting, ST_ArrowheadStyle, ST_ConnectorDimension, ST_RotationPath, ST_CenterShapeMapping, ST_NodeHorizontalAlignment, ST_NodeVerticalAlignment, ST_FallbackDimension, ST_TextDirection, ST_PyramidAccentPosition, ST_PyramidAccentTextMargin, ST_TextBlockDirection, ST_TextAnchorHorizontal, ST_TextAnchorVertical, ST_DiagramTextAlignment, ST_AutoTextRotation, ST_GrowDirection, ST_FlowDirection, ST_ContinueDirection, ST_Breakpoint, ST_Offset, ST_HierarchyAlignment, pyxb.binding.datatypes.int, pyxb.binding.datatypes.double, pyxb.binding.datatypes.boolean, pyxb.binding.datatypes.string, ST_ConnectorPoint, )
ST_ParameterVal._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_ParameterVal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ParameterVal)
ST_ParameterVal.l = u'l'                          # originally ST_DiagramHorizontalAlignment.l
ST_ParameterVal.ctr = u'ctr'                      # originally ST_DiagramHorizontalAlignment.ctr
ST_ParameterVal.r = u'r'                          # originally ST_DiagramHorizontalAlignment.r
ST_ParameterVal.none = u'none'                    # originally ST_DiagramHorizontalAlignment.none
ST_ParameterVal.t = u't'                          # originally ST_VerticalAlignment.t
ST_ParameterVal.mid = u'mid'                      # originally ST_VerticalAlignment.mid
ST_ParameterVal.b = u'b'                          # originally ST_VerticalAlignment.b
ST_ParameterVal.none_ = u'none'                   # originally ST_VerticalAlignment.none
ST_ParameterVal.horz = u'horz'                    # originally ST_ChildDirection.horz
ST_ParameterVal.vert = u'vert'                    # originally ST_ChildDirection.vert
ST_ParameterVal.t_ = u't'                         # originally ST_ChildAlignment.t
ST_ParameterVal.b_ = u'b'                         # originally ST_ChildAlignment.b
ST_ParameterVal.l_ = u'l'                         # originally ST_ChildAlignment.l
ST_ParameterVal.r_ = u'r'                         # originally ST_ChildAlignment.r
ST_ParameterVal.none_2 = u'none'                  # originally ST_SecondaryChildAlignment.none
ST_ParameterVal.t_2 = u't'                        # originally ST_SecondaryChildAlignment.t
ST_ParameterVal.b_2 = u'b'                        # originally ST_SecondaryChildAlignment.b
ST_ParameterVal.l_2 = u'l'                        # originally ST_SecondaryChildAlignment.l
ST_ParameterVal.r_2 = u'r'                        # originally ST_SecondaryChildAlignment.r
ST_ParameterVal.fromL = u'fromL'                  # originally ST_LinearDirection.fromL
ST_ParameterVal.fromR = u'fromR'                  # originally ST_LinearDirection.fromR
ST_ParameterVal.fromT = u'fromT'                  # originally ST_LinearDirection.fromT
ST_ParameterVal.fromB = u'fromB'                  # originally ST_LinearDirection.fromB
ST_ParameterVal.none_3 = u'none'                  # originally ST_SecondaryLinearDirection.none
ST_ParameterVal.fromL_ = u'fromL'                 # originally ST_SecondaryLinearDirection.fromL
ST_ParameterVal.fromR_ = u'fromR'                 # originally ST_SecondaryLinearDirection.fromR
ST_ParameterVal.fromT_ = u'fromT'                 # originally ST_SecondaryLinearDirection.fromT
ST_ParameterVal.fromB_ = u'fromB'                 # originally ST_SecondaryLinearDirection.fromB
ST_ParameterVal.node = u'node'                    # originally ST_StartingElement.node
ST_ParameterVal.trans = u'trans'                  # originally ST_StartingElement.trans
ST_ParameterVal.beg = u'beg'                      # originally ST_BendPoint.beg
ST_ParameterVal.def_ = u'def'                     # originally ST_BendPoint.def_
ST_ParameterVal.end = u'end'                      # originally ST_BendPoint.end
ST_ParameterVal.stra = u'stra'                    # originally ST_ConnectorRouting.stra
ST_ParameterVal.bend = u'bend'                    # originally ST_ConnectorRouting.bend
ST_ParameterVal.curve = u'curve'                  # originally ST_ConnectorRouting.curve
ST_ParameterVal.longCurve = u'longCurve'          # originally ST_ConnectorRouting.longCurve
ST_ParameterVal.auto = u'auto'                    # originally ST_ArrowheadStyle.auto
ST_ParameterVal.arr = u'arr'                      # originally ST_ArrowheadStyle.arr
ST_ParameterVal.noArr = u'noArr'                  # originally ST_ArrowheadStyle.noArr
ST_ParameterVal.n1D = u'1D'                       # originally ST_ConnectorDimension.n1D
ST_ParameterVal.n2D = u'2D'                       # originally ST_ConnectorDimension.n2D
ST_ParameterVal.cust = u'cust'                    # originally ST_ConnectorDimension.cust
ST_ParameterVal.none_4 = u'none'                  # originally ST_RotationPath.none
ST_ParameterVal.alongPath = u'alongPath'          # originally ST_RotationPath.alongPath
ST_ParameterVal.none_5 = u'none'                  # originally ST_CenterShapeMapping.none
ST_ParameterVal.fNode = u'fNode'                  # originally ST_CenterShapeMapping.fNode
ST_ParameterVal.l_3 = u'l'                        # originally ST_NodeHorizontalAlignment.l
ST_ParameterVal.ctr_ = u'ctr'                     # originally ST_NodeHorizontalAlignment.ctr
ST_ParameterVal.r_3 = u'r'                        # originally ST_NodeHorizontalAlignment.r
ST_ParameterVal.t_3 = u't'                        # originally ST_NodeVerticalAlignment.t
ST_ParameterVal.mid_ = u'mid'                     # originally ST_NodeVerticalAlignment.mid
ST_ParameterVal.b_3 = u'b'                        # originally ST_NodeVerticalAlignment.b
ST_ParameterVal.n1D_ = u'1D'                      # originally ST_FallbackDimension.n1D
ST_ParameterVal.n2D_ = u'2D'                      # originally ST_FallbackDimension.n2D
ST_ParameterVal.fromT_2 = u'fromT'                # originally ST_TextDirection.fromT
ST_ParameterVal.fromB_2 = u'fromB'                # originally ST_TextDirection.fromB
ST_ParameterVal.bef = u'bef'                      # originally ST_PyramidAccentPosition.bef
ST_ParameterVal.aft = u'aft'                      # originally ST_PyramidAccentPosition.aft
ST_ParameterVal.step = u'step'                    # originally ST_PyramidAccentTextMargin.step
ST_ParameterVal.stack = u'stack'                  # originally ST_PyramidAccentTextMargin.stack
ST_ParameterVal.horz_ = u'horz'                   # originally ST_TextBlockDirection.horz
ST_ParameterVal.vert_ = u'vert'                   # originally ST_TextBlockDirection.vert
ST_ParameterVal.none_6 = u'none'                  # originally ST_TextAnchorHorizontal.none
ST_ParameterVal.ctr_2 = u'ctr'                    # originally ST_TextAnchorHorizontal.ctr
ST_ParameterVal.t_4 = u't'                        # originally ST_TextAnchorVertical.t
ST_ParameterVal.mid_2 = u'mid'                    # originally ST_TextAnchorVertical.mid
ST_ParameterVal.b_4 = u'b'                        # originally ST_TextAnchorVertical.b
ST_ParameterVal.l_4 = u'l'                        # originally ST_DiagramTextAlignment.l
ST_ParameterVal.ctr_3 = u'ctr'                    # originally ST_DiagramTextAlignment.ctr
ST_ParameterVal.r_4 = u'r'                        # originally ST_DiagramTextAlignment.r
ST_ParameterVal.none_7 = u'none'                  # originally ST_AutoTextRotation.none
ST_ParameterVal.upr = u'upr'                      # originally ST_AutoTextRotation.upr
ST_ParameterVal.grav = u'grav'                    # originally ST_AutoTextRotation.grav
ST_ParameterVal.tL = u'tL'                        # originally ST_GrowDirection.tL
ST_ParameterVal.tR = u'tR'                        # originally ST_GrowDirection.tR
ST_ParameterVal.bL = u'bL'                        # originally ST_GrowDirection.bL
ST_ParameterVal.bR = u'bR'                        # originally ST_GrowDirection.bR
ST_ParameterVal.row = u'row'                      # originally ST_FlowDirection.row
ST_ParameterVal.col = u'col'                      # originally ST_FlowDirection.col
ST_ParameterVal.revDir = u'revDir'                # originally ST_ContinueDirection.revDir
ST_ParameterVal.sameDir = u'sameDir'              # originally ST_ContinueDirection.sameDir
ST_ParameterVal.endCnv = u'endCnv'                # originally ST_Breakpoint.endCnv
ST_ParameterVal.bal = u'bal'                      # originally ST_Breakpoint.bal
ST_ParameterVal.fixed = u'fixed'                  # originally ST_Breakpoint.fixed
ST_ParameterVal.ctr_4 = u'ctr'                    # originally ST_Offset.ctr
ST_ParameterVal.off = u'off'                      # originally ST_Offset.off
ST_ParameterVal.tL_ = u'tL'                       # originally ST_HierarchyAlignment.tL
ST_ParameterVal.tR_ = u'tR'                       # originally ST_HierarchyAlignment.tR
ST_ParameterVal.tCtrCh = u'tCtrCh'                # originally ST_HierarchyAlignment.tCtrCh
ST_ParameterVal.tCtrDes = u'tCtrDes'              # originally ST_HierarchyAlignment.tCtrDes
ST_ParameterVal.bL_ = u'bL'                       # originally ST_HierarchyAlignment.bL
ST_ParameterVal.bR_ = u'bR'                       # originally ST_HierarchyAlignment.bR
ST_ParameterVal.bCtrCh = u'bCtrCh'                # originally ST_HierarchyAlignment.bCtrCh
ST_ParameterVal.bCtrDes = u'bCtrDes'              # originally ST_HierarchyAlignment.bCtrDes
ST_ParameterVal.lT = u'lT'                        # originally ST_HierarchyAlignment.lT
ST_ParameterVal.lB = u'lB'                        # originally ST_HierarchyAlignment.lB
ST_ParameterVal.lCtrCh = u'lCtrCh'                # originally ST_HierarchyAlignment.lCtrCh
ST_ParameterVal.lCtrDes = u'lCtrDes'              # originally ST_HierarchyAlignment.lCtrDes
ST_ParameterVal.rT = u'rT'                        # originally ST_HierarchyAlignment.rT
ST_ParameterVal.rB = u'rB'                        # originally ST_HierarchyAlignment.rB
ST_ParameterVal.rCtrCh = u'rCtrCh'                # originally ST_HierarchyAlignment.rCtrCh
ST_ParameterVal.rCtrDes = u'rCtrDes'              # originally ST_HierarchyAlignment.rCtrDes
ST_ParameterVal.auto_ = u'auto'                   # originally ST_ConnectorPoint.auto
ST_ParameterVal.bCtr = u'bCtr'                    # originally ST_ConnectorPoint.bCtr
ST_ParameterVal.ctr_5 = u'ctr'                    # originally ST_ConnectorPoint.ctr
ST_ParameterVal.midL = u'midL'                    # originally ST_ConnectorPoint.midL
ST_ParameterVal.midR = u'midR'                    # originally ST_ConnectorPoint.midR
ST_ParameterVal.tCtr = u'tCtr'                    # originally ST_ConnectorPoint.tCtr
ST_ParameterVal.bL_2 = u'bL'                      # originally ST_ConnectorPoint.bL
ST_ParameterVal.bR_2 = u'bR'                      # originally ST_ConnectorPoint.bR
ST_ParameterVal.tL_2 = u'tL'                      # originally ST_ConnectorPoint.tL
ST_ParameterVal.tR_2 = u'tR'                      # originally ST_ConnectorPoint.tR
ST_ParameterVal.radial = u'radial'                # originally ST_ConnectorPoint.radial
ST_ParameterVal._InitializeFacetMap(ST_ParameterVal._CF_pattern,
   ST_ParameterVal._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ParameterVal', ST_ParameterVal)

# Atomic SimpleTypeDefinition
class ST_TLChartSubelementType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Chart Subelement Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLChartSubelementType')
    _Documentation = u'Chart Subelement Type'
ST_TLChartSubelementType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLChartSubelementType, enum_prefix=None)
ST_TLChartSubelementType.gridLegend = ST_TLChartSubelementType._CF_enumeration.addEnumeration(unicode_value=u'gridLegend')
ST_TLChartSubelementType.series = ST_TLChartSubelementType._CF_enumeration.addEnumeration(unicode_value=u'series')
ST_TLChartSubelementType.category = ST_TLChartSubelementType._CF_enumeration.addEnumeration(unicode_value=u'category')
ST_TLChartSubelementType.ptInSeries = ST_TLChartSubelementType._CF_enumeration.addEnumeration(unicode_value=u'ptInSeries')
ST_TLChartSubelementType.ptInCategory = ST_TLChartSubelementType._CF_enumeration.addEnumeration(unicode_value=u'ptInCategory')
ST_TLChartSubelementType._InitializeFacetMap(ST_TLChartSubelementType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLChartSubelementType', ST_TLChartSubelementType)

# Atomic SimpleTypeDefinition
class ST_CxnType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Connection Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_CxnType')
    _Documentation = u'Connection Type'
ST_CxnType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CxnType, enum_prefix=None)
ST_CxnType.parOf = ST_CxnType._CF_enumeration.addEnumeration(unicode_value=u'parOf')
ST_CxnType.presOf = ST_CxnType._CF_enumeration.addEnumeration(unicode_value=u'presOf')
ST_CxnType.presParOf = ST_CxnType._CF_enumeration.addEnumeration(unicode_value=u'presParOf')
ST_CxnType.unknownRelationship = ST_CxnType._CF_enumeration.addEnumeration(unicode_value=u'unknownRelationship')
ST_CxnType._InitializeFacetMap(ST_CxnType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_CxnType', ST_CxnType)

# Atomic SimpleTypeDefinition
class ST_TLParaBuildType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Paragraph Build Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'ST_TLParaBuildType')
    _Documentation = u'Paragraph Build Type'
ST_TLParaBuildType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TLParaBuildType, enum_prefix=None)
ST_TLParaBuildType.allAtOnce = ST_TLParaBuildType._CF_enumeration.addEnumeration(unicode_value=u'allAtOnce')
ST_TLParaBuildType.p = ST_TLParaBuildType._CF_enumeration.addEnumeration(unicode_value=u'p')
ST_TLParaBuildType.cust = ST_TLParaBuildType._CF_enumeration.addEnumeration(unicode_value=u'cust')
ST_TLParaBuildType.whole = ST_TLParaBuildType._CF_enumeration.addEnumeration(unicode_value=u'whole')
ST_TLParaBuildType._InitializeFacetMap(ST_TLParaBuildType._CF_enumeration)
_Namespace_.addCategoryObject('typeBinding', u'ST_TLParaBuildType', ST_TLParaBuildType)

# Complex type CT_TextBody with content type ELEMENT_ONLY
class CT_TextBody (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBody')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'p'), 'p', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBody_httpschemas_openxmlformats_orgdrawingml2006mainp', True)

    
    p = property(__p.value, __p.set, None, u'Text Paragraphs')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bodyPr uses Python identifier bodyPr
    __bodyPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bodyPr'), 'bodyPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBody_httpschemas_openxmlformats_orgdrawingml2006mainbodyPr', False)

    
    bodyPr = property(__bodyPr.value, __bodyPr.set, None, u'Body Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lstStyle uses Python identifier lstStyle
    __lstStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lstStyle'), 'lstStyle', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBody_httpschemas_openxmlformats_orgdrawingml2006mainlstStyle', False)

    
    lstStyle = property(__lstStyle.value, __lstStyle.set, None, u'Text List Styles')


    _ElementMap = {
        __p.name() : __p,
        __bodyPr.name() : __bodyPr,
        __lstStyle.name() : __lstStyle
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBody', CT_TextBody)


# Complex type CT_Name with content type EMPTY
class CT_Name (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Name')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Name_lang', pyxb.binding.datatypes.string, unicode_default=u'')
    
    lang = property(__lang.value, __lang.set, None, u'Language')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Name_val', pyxb.binding.datatypes.string, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lang.name() : __lang,
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Name', CT_Name)


# Complex type CT_TextParagraphProperties with content type ELEMENT_ONLY
class CT_TextParagraphProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextParagraphProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spcBef uses Python identifier spcBef
    __spcBef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spcBef'), 'spcBef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainspcBef', False)

    
    spcBef = property(__spcBef.value, __spcBef.set, None, u'Space Before')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnSpc uses Python identifier lnSpc
    __lnSpc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnSpc'), 'lnSpc', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainlnSpc', False)

    
    lnSpc = property(__lnSpc.value, __lnSpc.set, None, u'Line Spacing')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buNone uses Python identifier buNone
    __buNone = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buNone'), 'buNone', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuNone', False)

    
    buNone = property(__buNone.value, __buNone.set, None, u'No Bullet')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buClr uses Python identifier buClr
    __buClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buClr'), 'buClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuClr', False)

    
    buClr = property(__buClr.value, __buClr.set, None, u'Color Specified')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spcAft uses Python identifier spcAft
    __spcAft = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spcAft'), 'spcAft', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainspcAft', False)

    
    spcAft = property(__spcAft.value, __spcAft.set, None, u'Space After')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buAutoNum uses Python identifier buAutoNum
    __buAutoNum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buAutoNum'), 'buAutoNum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuAutoNum', False)

    
    buAutoNum = property(__buAutoNum.value, __buAutoNum.set, None, u'Auto-Numbered Bullet')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buClrTx uses Python identifier buClrTx
    __buClrTx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buClrTx'), 'buClrTx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuClrTx', False)

    
    buClrTx = property(__buClrTx.value, __buClrTx.set, None, u'Follow Text')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buChar uses Python identifier buChar
    __buChar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buChar'), 'buChar', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuChar', False)

    
    buChar = property(__buChar.value, __buChar.set, None, u'Character Bullet')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buSzPct uses Python identifier buSzPct
    __buSzPct = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzPct'), 'buSzPct', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuSzPct', False)

    
    buSzPct = property(__buSzPct.value, __buSzPct.set, None, u'Bullet Size Percentage')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buFontTx uses Python identifier buFontTx
    __buFontTx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buFontTx'), 'buFontTx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuFontTx', False)

    
    buFontTx = property(__buFontTx.value, __buFontTx.set, None, u'Follow text')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buSzPts uses Python identifier buSzPts
    __buSzPts = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzPts'), 'buSzPts', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuSzPts', False)

    
    buSzPts = property(__buSzPts.value, __buSzPts.set, None, u'Bullet Size Points')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tabLst uses Python identifier tabLst
    __tabLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tabLst'), 'tabLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006maintabLst', False)

    
    tabLst = property(__tabLst.value, __tabLst.set, None, u'Tab List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buFont uses Python identifier buFont
    __buFont = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buFont'), 'buFont', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuFont', False)

    
    buFont = property(__buFont.value, __buFont.set, None, u'Specified')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}defRPr uses Python identifier defRPr
    __defRPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'defRPr'), 'defRPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006maindefRPr', False)

    
    defRPr = property(__defRPr.value, __defRPr.set, None, u'Default Text Run Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buBlip uses Python identifier buBlip
    __buBlip = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buBlip'), 'buBlip', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuBlip', False)

    
    buBlip = property(__buBlip.value, __buBlip.set, None, u'Picture Bullet')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buSzTx uses Python identifier buSzTx
    __buSzTx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzTx'), 'buSzTx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuSzTx', False)

    
    buSzTx = property(__buSzTx.value, __buSzTx.set, None, u'Bullet Size Follows Text')

    
    # Attribute defTabSz uses Python identifier defTabSz
    __defTabSz = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defTabSz'), 'defTabSz', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_defTabSz', ST_Coordinate32)
    
    defTabSz = property(__defTabSz.value, __defTabSz.set, None, u'Default Tab Size')

    
    # Attribute marR uses Python identifier marR
    __marR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'marR'), 'marR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_marR', ST_TextMargin)
    
    marR = property(__marR.value, __marR.set, None, u'Right Margin')

    
    # Attribute fontAlgn uses Python identifier fontAlgn
    __fontAlgn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fontAlgn'), 'fontAlgn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_fontAlgn', ST_TextFontAlignType)
    
    fontAlgn = property(__fontAlgn.value, __fontAlgn.set, None, u'Font Alignment')

    
    # Attribute hangingPunct uses Python identifier hangingPunct
    __hangingPunct = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hangingPunct'), 'hangingPunct', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_hangingPunct', pyxb.binding.datatypes.boolean)
    
    hangingPunct = property(__hangingPunct.value, __hangingPunct.set, None, u'Hanging Punctuation')

    
    # Attribute algn uses Python identifier algn
    __algn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algn'), 'algn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_algn', ST_TextAlignType)
    
    algn = property(__algn.value, __algn.set, None, u'Alignment')

    
    # Attribute indent uses Python identifier indent
    __indent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'indent'), 'indent', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_indent', ST_TextIndent)
    
    indent = property(__indent.value, __indent.set, None, u'Indent')

    
    # Attribute marL uses Python identifier marL
    __marL = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'marL'), 'marL', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_marL', ST_TextMargin)
    
    marL = property(__marL.value, __marL.set, None, u'Left Margin')

    
    # Attribute latinLnBrk uses Python identifier latinLnBrk
    __latinLnBrk = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'latinLnBrk'), 'latinLnBrk', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_latinLnBrk', pyxb.binding.datatypes.boolean)
    
    latinLnBrk = property(__latinLnBrk.value, __latinLnBrk.set, None, u'Latin Line Break')

    
    # Attribute eaLnBrk uses Python identifier eaLnBrk
    __eaLnBrk = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'eaLnBrk'), 'eaLnBrk', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_eaLnBrk', pyxb.binding.datatypes.boolean)
    
    eaLnBrk = property(__eaLnBrk.value, __eaLnBrk.set, None, u'East Asian Line Break')

    
    # Attribute rtl uses Python identifier rtl
    __rtl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rtl'), 'rtl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_rtl', pyxb.binding.datatypes.boolean)
    
    rtl = property(__rtl.value, __rtl.set, None, u'Right To Left')

    
    # Attribute lvl uses Python identifier lvl
    __lvl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lvl'), 'lvl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_lvl', ST_TextIndentLevelType)
    
    lvl = property(__lvl.value, __lvl.set, None, u'Level')


    _ElementMap = {
        __spcBef.name() : __spcBef,
        __lnSpc.name() : __lnSpc,
        __buNone.name() : __buNone,
        __buClr.name() : __buClr,
        __spcAft.name() : __spcAft,
        __buAutoNum.name() : __buAutoNum,
        __buClrTx.name() : __buClrTx,
        __buChar.name() : __buChar,
        __buSzPct.name() : __buSzPct,
        __extLst.name() : __extLst,
        __buFontTx.name() : __buFontTx,
        __buSzPts.name() : __buSzPts,
        __tabLst.name() : __tabLst,
        __buFont.name() : __buFont,
        __defRPr.name() : __defRPr,
        __buBlip.name() : __buBlip,
        __buSzTx.name() : __buSzTx
    }
    _AttributeMap = {
        __defTabSz.name() : __defTabSz,
        __marR.name() : __marR,
        __fontAlgn.name() : __fontAlgn,
        __hangingPunct.name() : __hangingPunct,
        __algn.name() : __algn,
        __indent.name() : __indent,
        __marL.name() : __marL,
        __latinLnBrk.name() : __latinLnBrk,
        __eaLnBrk.name() : __eaLnBrk,
        __rtl.name() : __rtl,
        __lvl.name() : __lvl
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextParagraphProperties', CT_TextParagraphProperties)


# Complex type CT_CTName with content type EMPTY
class CT_CTName (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_CTName')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTName_lang', pyxb.binding.datatypes.string, unicode_default=u'')
    
    lang = property(__lang.value, __lang.set, None, u'Language')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTName_val', pyxb.binding.datatypes.string, required=True)
    
    val = property(__val.value, __val.set, None, u'Description Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lang.name() : __lang,
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_CTName', CT_CTName)


# Complex type CT_PositivePercentage with content type EMPTY
class CT_PositivePercentage (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PositivePercentage')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PositivePercentage_val', ST_PositivePercentage, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PositivePercentage', CT_PositivePercentage)


# Complex type CT_ColorMRU with content type ELEMENT_ONLY
class CT_ColorMRU (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorMRU')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMRU_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', True)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMRU_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', True)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMRU_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', True)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMRU_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', True)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMRU_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', True)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMRU_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', True)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __scrgbClr.name() : __scrgbClr,
        __hslClr.name() : __hslClr,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr,
        __sysClr.name() : __sysClr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorMRU', CT_ColorMRU)


# Complex type CT_OfficeArtExtensionList with content type ELEMENT_ONLY
class CT_OfficeArtExtensionList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_OfficeArtExtensionList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ext uses Python identifier ext
    __ext = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ext'), 'ext', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeArtExtensionList_httpschemas_openxmlformats_orgdrawingml2006mainext', True)

    
    ext = property(__ext.value, __ext.set, None, u'Extension')


    _ElementMap = {
        __ext.name() : __ext
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_OfficeArtExtensionList', CT_OfficeArtExtensionList)


# Complex type CT_TLTimeConditionList with content type ELEMENT_ONLY
class CT_TLTimeConditionList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLTimeConditionList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cond uses Python identifier cond
    __cond = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cond'), 'cond', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeConditionList_httpschemas_openxmlformats_orgpresentationml2006maincond', True)

    
    cond = property(__cond.value, __cond.set, None, u'Condition')


    _ElementMap = {
        __cond.name() : __cond
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLTimeConditionList', CT_TLTimeConditionList)


# Complex type CT_SlideMaster with content type ELEMENT_ONLY
class CT_SlideMaster (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideMaster')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sldLayoutIdLst uses Python identifier sldLayoutIdLst
    __sldLayoutIdLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sldLayoutIdLst'), 'sldLayoutIdLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMaster_httpschemas_openxmlformats_orgpresentationml2006mainsldLayoutIdLst', False)

    
    sldLayoutIdLst = property(__sldLayoutIdLst.value, __sldLayoutIdLst.set, None, u'List of Slide Layouts')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cSld uses Python identifier cSld
    __cSld = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cSld'), 'cSld', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMaster_httpschemas_openxmlformats_orgpresentationml2006maincSld', False)

    
    cSld = property(__cSld.value, __cSld.set, None, u'Common slide data for slide masters')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}transition uses Python identifier transition
    __transition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'transition'), 'transition', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMaster_httpschemas_openxmlformats_orgpresentationml2006maintransition', False)

    
    transition = property(__transition.value, __transition.set, None, u'Slide Transition for a Slide Master')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}timing uses Python identifier timing
    __timing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'timing'), 'timing', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMaster_httpschemas_openxmlformats_orgpresentationml2006maintiming', False)

    
    timing = property(__timing.value, __timing.set, None, u'Slide Timing Information for Slide Masters')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}clrMap uses Python identifier clrMap
    __clrMap = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'clrMap'), 'clrMap', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMaster_httpschemas_openxmlformats_orgpresentationml2006mainclrMap', False)

    
    clrMap = property(__clrMap.value, __clrMap.set, None, u'Color Scheme Map')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}hf uses Python identifier hf
    __hf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'hf'), 'hf', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMaster_httpschemas_openxmlformats_orgpresentationml2006mainhf', False)

    
    hf = property(__hf.value, __hf.set, None, u'Header/Footer information for a slide master')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}txStyles uses Python identifier txStyles
    __txStyles = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'txStyles'), 'txStyles', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMaster_httpschemas_openxmlformats_orgpresentationml2006maintxStyles', False)

    
    txStyles = property(__txStyles.value, __txStyles.set, None, u'Slide Master Text Styles')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMaster_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute preserve uses Python identifier preserve
    __preserve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'preserve'), 'preserve', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMaster_preserve', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    preserve = property(__preserve.value, __preserve.set, None, u'Preserve Slide Master')


    _ElementMap = {
        __sldLayoutIdLst.name() : __sldLayoutIdLst,
        __cSld.name() : __cSld,
        __transition.name() : __transition,
        __timing.name() : __timing,
        __clrMap.name() : __clrMap,
        __hf.name() : __hf,
        __txStyles.name() : __txStyles,
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __preserve.name() : __preserve
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideMaster', CT_SlideMaster)


# Complex type CT_HandoutMasterIdList with content type ELEMENT_ONLY
class CT_HandoutMasterIdList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_HandoutMasterIdList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}handoutMasterId uses Python identifier handoutMasterId
    __handoutMasterId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'handoutMasterId'), 'handoutMasterId', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HandoutMasterIdList_httpschemas_openxmlformats_orgpresentationml2006mainhandoutMasterId', False)

    
    handoutMasterId = property(__handoutMasterId.value, __handoutMasterId.set, None, u'Handout Master ID')


    _ElementMap = {
        __handoutMasterId.name() : __handoutMasterId
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_HandoutMasterIdList', CT_HandoutMasterIdList)


# Complex type CT_PositiveFixedPercentage with content type EMPTY
class CT_PositiveFixedPercentage (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PositiveFixedPercentage')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PositiveFixedPercentage_val', ST_PositiveFixedPercentage, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PositiveFixedPercentage', CT_PositiveFixedPercentage)


# Complex type CT_LineProperties with content type ELEMENT_ONLY
class CT_LineProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LineProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tailEnd uses Python identifier tailEnd
    __tailEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tailEnd'), 'tailEnd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006maintailEnd', False)

    
    tailEnd = property(__tailEnd.value, __tailEnd.set, None, u'Tail line end style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, u'Gradient Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}round uses Python identifier round
    __round = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'round'), 'round', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainround', False)

    
    round = property(__round.value, __round.set, None, u'Round Line Join')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstDash uses Python identifier prstDash
    __prstDash = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstDash'), 'prstDash', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainprstDash', False)

    
    prstDash = property(__prstDash.value, __prstDash.set, None, u'Preset Dash')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, u'No Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}custDash uses Python identifier custDash
    __custDash = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'custDash'), 'custDash', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006maincustDash', False)

    
    custDash = property(__custDash.value, __custDash.set, None, u'Custom Dash')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}miter uses Python identifier miter
    __miter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'miter'), 'miter', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainmiter', False)

    
    miter = property(__miter.value, __miter.set, None, u'Miter Line Join')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bevel uses Python identifier bevel
    __bevel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bevel'), 'bevel', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainbevel', False)

    
    bevel = property(__bevel.value, __bevel.set, None, u'Line Join Bevel')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, u'Solid Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}headEnd uses Python identifier headEnd
    __headEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'headEnd'), 'headEnd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainheadEnd', False)

    
    headEnd = property(__headEnd.value, __headEnd.set, None, u'Line Head/End Style')

    
    # Attribute cmpd uses Python identifier cmpd
    __cmpd = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cmpd'), 'cmpd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_cmpd', ST_CompoundLine)
    
    cmpd = property(__cmpd.value, __cmpd.set, None, u'Compound Line Type')

    
    # Attribute cap uses Python identifier cap
    __cap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cap'), 'cap', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_cap', ST_LineCap)
    
    cap = property(__cap.value, __cap.set, None, u'Line Ending Cap Type')

    
    # Attribute w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'w'), 'w', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_w', ST_LineWidth)
    
    w = property(__w.value, __w.set, None, u'Line Width')

    
    # Attribute algn uses Python identifier algn
    __algn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algn'), 'algn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_algn', ST_PenAlignment)
    
    algn = property(__algn.value, __algn.set, None, u'Stroke Alignment')


    _ElementMap = {
        __tailEnd.name() : __tailEnd,
        __gradFill.name() : __gradFill,
        __pattFill.name() : __pattFill,
        __extLst.name() : __extLst,
        __round.name() : __round,
        __prstDash.name() : __prstDash,
        __noFill.name() : __noFill,
        __custDash.name() : __custDash,
        __miter.name() : __miter,
        __bevel.name() : __bevel,
        __solidFill.name() : __solidFill,
        __headEnd.name() : __headEnd
    }
    _AttributeMap = {
        __cmpd.name() : __cmpd,
        __cap.name() : __cap,
        __w.name() : __w,
        __algn.name() : __algn
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LineProperties', CT_LineProperties)


# Complex type CT_GradientFillProperties with content type ELEMENT_ONLY
class CT_GradientFillProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GradientFillProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tileRect uses Python identifier tileRect
    __tileRect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tileRect'), 'tileRect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientFillProperties_httpschemas_openxmlformats_orgdrawingml2006maintileRect', False)

    
    tileRect = property(__tileRect.value, __tileRect.set, None, u'Tile Rectangle')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gsLst uses Python identifier gsLst
    __gsLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gsLst'), 'gsLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientFillProperties_httpschemas_openxmlformats_orgdrawingml2006maingsLst', False)

    
    gsLst = property(__gsLst.value, __gsLst.set, None, u'Gradient Stop List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}path uses Python identifier path
    __path = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'path'), 'path', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainpath', False)

    
    path = property(__path.value, __path.set, None, u'Path Gradient')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lin uses Python identifier lin
    __lin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lin'), 'lin', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainlin', False)

    
    lin = property(__lin.value, __lin.set, None, u'Linear Gradient Fill')

    
    # Attribute rotWithShape uses Python identifier rotWithShape
    __rotWithShape = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rotWithShape'), 'rotWithShape', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientFillProperties_rotWithShape', pyxb.binding.datatypes.boolean)
    
    rotWithShape = property(__rotWithShape.value, __rotWithShape.set, None, u'Rotate With Shape')

    
    # Attribute flip uses Python identifier flip
    __flip = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'flip'), 'flip', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientFillProperties_flip', ST_TileFlipMode)
    
    flip = property(__flip.value, __flip.set, None, u'Tile Flip')


    _ElementMap = {
        __tileRect.name() : __tileRect,
        __gsLst.name() : __gsLst,
        __path.name() : __path,
        __lin.name() : __lin
    }
    _AttributeMap = {
        __rotWithShape.name() : __rotWithShape,
        __flip.name() : __flip
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GradientFillProperties', CT_GradientFillProperties)


# Complex type CT_TextListStyle with content type ELEMENT_ONLY
class CT_TextListStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextListStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl5pPr uses Python identifier lvl5pPr
    __lvl5pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl5pPr'), 'lvl5pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl5pPr', False)

    
    lvl5pPr = property(__lvl5pPr.value, __lvl5pPr.set, None, u'List Level 5 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}defPPr uses Python identifier defPPr
    __defPPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'defPPr'), 'defPPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006maindefPPr', False)

    
    defPPr = property(__defPPr.value, __defPPr.set, None, u'Default Paragraph Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl6pPr uses Python identifier lvl6pPr
    __lvl6pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl6pPr'), 'lvl6pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl6pPr', False)

    
    lvl6pPr = property(__lvl6pPr.value, __lvl6pPr.set, None, u'List Level 6 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl1pPr uses Python identifier lvl1pPr
    __lvl1pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl1pPr'), 'lvl1pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl1pPr', False)

    
    lvl1pPr = property(__lvl1pPr.value, __lvl1pPr.set, None, u'List Level 1 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl4pPr uses Python identifier lvl4pPr
    __lvl4pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl4pPr'), 'lvl4pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl4pPr', False)

    
    lvl4pPr = property(__lvl4pPr.value, __lvl4pPr.set, None, u'List Level 4 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl7pPr uses Python identifier lvl7pPr
    __lvl7pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl7pPr'), 'lvl7pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl7pPr', False)

    
    lvl7pPr = property(__lvl7pPr.value, __lvl7pPr.set, None, u'List Level 7 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl2pPr uses Python identifier lvl2pPr
    __lvl2pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl2pPr'), 'lvl2pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl2pPr', False)

    
    lvl2pPr = property(__lvl2pPr.value, __lvl2pPr.set, None, u'List Level 2 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl8pPr uses Python identifier lvl8pPr
    __lvl8pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl8pPr'), 'lvl8pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl8pPr', False)

    
    lvl8pPr = property(__lvl8pPr.value, __lvl8pPr.set, None, u'List Level 8 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl3pPr uses Python identifier lvl3pPr
    __lvl3pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl3pPr'), 'lvl3pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl3pPr', False)

    
    lvl3pPr = property(__lvl3pPr.value, __lvl3pPr.set, None, u'List Level 3 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl9pPr uses Python identifier lvl9pPr
    __lvl9pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl9pPr'), 'lvl9pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl9pPr', False)

    
    lvl9pPr = property(__lvl9pPr.value, __lvl9pPr.set, None, u'List Level 9 Text Style')


    _ElementMap = {
        __extLst.name() : __extLst,
        __lvl5pPr.name() : __lvl5pPr,
        __defPPr.name() : __defPPr,
        __lvl6pPr.name() : __lvl6pPr,
        __lvl1pPr.name() : __lvl1pPr,
        __lvl4pPr.name() : __lvl4pPr,
        __lvl7pPr.name() : __lvl7pPr,
        __lvl2pPr.name() : __lvl2pPr,
        __lvl8pPr.name() : __lvl8pPr,
        __lvl3pPr.name() : __lvl3pPr,
        __lvl9pPr.name() : __lvl9pPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextListStyle', CT_TextListStyle)


# Complex type CT_TextBlipBullet with content type ELEMENT_ONLY
class CT_TextBlipBullet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBlipBullet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blip uses Python identifier blip
    __blip = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blip'), 'blip', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBlipBullet_httpschemas_openxmlformats_orgdrawingml2006mainblip', False)

    
    blip = property(__blip.value, __blip.set, None, u'Blip')


    _ElementMap = {
        __blip.name() : __blip
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBlipBullet', CT_TextBlipBullet)


# Complex type CT_ExtensionList with content type ELEMENT_ONLY
class CT_ExtensionList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_ExtensionList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}ext uses Python identifier ext
    __ext = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'ext'), 'ext', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ExtensionList_httpschemas_openxmlformats_orgpresentationml2006mainext', True)

    
    ext = property(__ext.value, __ext.set, None, u'Extension')


    _ElementMap = {
        __ext.name() : __ext
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_ExtensionList', CT_ExtensionList)


# Complex type CT_CustomerDataList with content type ELEMENT_ONLY
class CT_CustomerDataList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_CustomerDataList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}tags uses Python identifier tags
    __tags = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'tags'), 'tags', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CustomerDataList_httpschemas_openxmlformats_orgpresentationml2006maintags', False)

    
    tags = property(__tags.value, __tags.set, None, u'Customer Data Tags')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}custData uses Python identifier custData
    __custData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'custData'), 'custData', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CustomerDataList_httpschemas_openxmlformats_orgpresentationml2006maincustData', True)

    
    custData = property(__custData.value, __custData.set, None, u'Customer Data')


    _ElementMap = {
        __tags.name() : __tags,
        __custData.name() : __custData
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_CustomerDataList', CT_CustomerDataList)


# Complex type CT_PresetColor with content type ELEMENT_ONLY
class CT_PresetColor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PresetColor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, u'Tint')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}shade uses Python identifier shade
    __shade = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), 'shade', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainshade', True)

    
    shade = property(__shade.value, __shade.set, None, u'Shade')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueMod uses Python identifier hueMod
    __hueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), 'hueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainhueMod', True)

    
    hueMod = property(__hueMod.value, __hueMod.set, None, u'Hue Modulate')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blue uses Python identifier blue
    __blue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), 'blue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainblue', True)

    
    blue = property(__blue.value, __blue.set, None, u'Blue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}inv uses Python identifier inv
    __inv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), 'inv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maininv', True)

    
    inv = property(__inv.value, __inv.set, None, u'Inverse')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gray uses Python identifier gray
    __gray = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), 'gray', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maingray', True)

    
    gray = property(__gray.value, __gray.set, None, u'Gray')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueMod uses Python identifier blueMod
    __blueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), 'blueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainblueMod', True)

    
    blueMod = property(__blueMod.value, __blueMod.set, None, u'Blue Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alpha uses Python identifier alpha
    __alpha = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), 'alpha', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainalpha', True)

    
    alpha = property(__alpha.value, __alpha.set, None, u'Alpha')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaOff uses Python identifier alphaOff
    __alphaOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), 'alphaOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaOff', True)

    
    alphaOff = property(__alphaOff.value, __alphaOff.set, None, u'Alpha Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, u'Alpha Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hue uses Python identifier hue
    __hue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainhue', True)

    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueOff uses Python identifier blueOff
    __blueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), 'blueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainblueOff', True)

    
    blueOff = property(__blueOff.value, __blueOff.set, None, u'Blue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueOff uses Python identifier hueOff
    __hueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), 'hueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainhueOff', True)

    
    hueOff = property(__hueOff.value, __hueOff.set, None, u'Hue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenOff uses Python identifier greenOff
    __greenOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), 'greenOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maingreenOff', True)

    
    greenOff = property(__greenOff.value, __greenOff.set, None, u'Green Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sat uses Python identifier sat
    __sat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), 'sat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainsat', True)

    
    sat = property(__sat.value, __sat.set, None, u'Saturation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satOff uses Python identifier satOff
    __satOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), 'satOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainsatOff', True)

    
    satOff = property(__satOff.value, __satOff.set, None, u'Saturation Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}green uses Python identifier green
    __green = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), 'green', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maingreen', True)

    
    green = property(__green.value, __green.set, None, u'Green')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satMod uses Python identifier satMod
    __satMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), 'satMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainsatMod', True)

    
    satMod = property(__satMod.value, __satMod.set, None, u'Saturation Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), 'gamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maingamma', True)

    
    gamma = property(__gamma.value, __gamma.set, None, u'Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumOff uses Python identifier lumOff
    __lumOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), 'lumOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainlumOff', True)

    
    lumOff = property(__lumOff.value, __lumOff.set, None, u'Luminance Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenMod uses Python identifier greenMod
    __greenMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), 'greenMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maingreenMod', True)

    
    greenMod = property(__greenMod.value, __greenMod.set, None, u'Green Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumMod uses Python identifier lumMod
    __lumMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), 'lumMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainlumMod', True)

    
    lumMod = property(__lumMod.value, __lumMod.set, None, u'Luminance Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}red uses Python identifier red
    __red = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), 'red', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainred', True)

    
    red = property(__red.value, __red.set, None, u'Red')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redOff uses Python identifier redOff
    __redOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), 'redOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainredOff', True)

    
    redOff = property(__redOff.value, __redOff.set, None, u'Red Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}invGamma uses Python identifier invGamma
    __invGamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), 'invGamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maininvGamma', True)

    
    invGamma = property(__invGamma.value, __invGamma.set, None, u'Inverse Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redMod uses Python identifier redMod
    __redMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), 'redMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainredMod', True)

    
    redMod = property(__redMod.value, __redMod.set, None, u'Red Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}comp uses Python identifier comp
    __comp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), 'comp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maincomp', True)

    
    comp = property(__comp.value, __comp.set, None, u'Complement')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_val', ST_PresetColorVal)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        __tint.name() : __tint,
        __shade.name() : __shade,
        __hueMod.name() : __hueMod,
        __blue.name() : __blue,
        __inv.name() : __inv,
        __gray.name() : __gray,
        __blueMod.name() : __blueMod,
        __alpha.name() : __alpha,
        __alphaOff.name() : __alphaOff,
        __alphaMod.name() : __alphaMod,
        __hue.name() : __hue,
        __blueOff.name() : __blueOff,
        __hueOff.name() : __hueOff,
        __greenOff.name() : __greenOff,
        __sat.name() : __sat,
        __satOff.name() : __satOff,
        __green.name() : __green,
        __lum.name() : __lum,
        __satMod.name() : __satMod,
        __gamma.name() : __gamma,
        __lumOff.name() : __lumOff,
        __greenMod.name() : __greenMod,
        __lumMod.name() : __lumMod,
        __red.name() : __red,
        __redOff.name() : __redOff,
        __invGamma.name() : __invGamma,
        __redMod.name() : __redMod,
        __comp.name() : __comp
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PresetColor', CT_PresetColor)


# Complex type CT_Point3D with content type EMPTY
class CT_Point3D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Point3D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'y'), 'y', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Point3D_y', ST_Coordinate, required=True)
    
    y = property(__y.value, __y.set, None, u'Y-Coordinate in 3D')

    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'x'), 'x', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Point3D_x', ST_Coordinate, required=True)
    
    x = property(__x.value, __x.set, None, u'X-Coordinate in 3D')

    
    # Attribute z uses Python identifier z
    __z = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'z'), 'z', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Point3D_z', ST_Coordinate, required=True)
    
    z = property(__z.value, __z.set, None, u'Z-Coordinate in 3D')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __y.name() : __y,
        __x.name() : __x,
        __z.name() : __z
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Point3D', CT_Point3D)


# Complex type CT_Percentage with content type EMPTY
class CT_Percentage (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Percentage')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Percentage_val', ST_Percentage, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Percentage', CT_Percentage)


# Complex type CT_NoFillProperties with content type EMPTY
class CT_NoFillProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_NoFillProperties')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_NoFillProperties', CT_NoFillProperties)


# Complex type CT_PatternFillProperties with content type ELEMENT_ONLY
class CT_PatternFillProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PatternFillProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bgClr uses Python identifier bgClr
    __bgClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bgClr'), 'bgClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PatternFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainbgClr', False)

    
    bgClr = property(__bgClr.value, __bgClr.set, None, u'Background color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fgClr uses Python identifier fgClr
    __fgClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fgClr'), 'fgClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PatternFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainfgClr', False)

    
    fgClr = property(__fgClr.value, __fgClr.set, None, u'Foreground color')

    
    # Attribute prst uses Python identifier prst
    __prst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prst'), 'prst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PatternFillProperties_prst', ST_PresetPatternVal)
    
    prst = property(__prst.value, __prst.set, None, u'Preset Pattern')


    _ElementMap = {
        __bgClr.name() : __bgClr,
        __fgClr.name() : __fgClr
    }
    _AttributeMap = {
        __prst.name() : __prst
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PatternFillProperties', CT_PatternFillProperties)


# Complex type CT_StyleDefinitionHeader with content type ELEMENT_ONLY
class CT_StyleDefinitionHeader (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_StyleDefinitionHeader')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'title'), 'title', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramtitle', True)

    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}catLst uses Python identifier catLst
    __catLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), 'catLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramcatLst', False)

    
    catLst = property(__catLst.value, __catLst.set, None, u'Category List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}desc uses Python identifier desc
    __desc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'desc'), 'desc', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramdesc', True)

    
    desc = property(__desc.value, __desc.set, None, u'Style Label Description')

    
    # Attribute resId uses Python identifier resId
    __resId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'resId'), 'resId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeader_resId', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    resId = property(__resId.value, __resId.set, None, u'Resource ID')

    
    # Attribute minVer uses Python identifier minVer
    __minVer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minVer'), 'minVer', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeader_minVer', pyxb.binding.datatypes.string, unicode_default=u'http://schemas.openxmlformats.org/drawingml/2006/diagram')
    
    minVer = property(__minVer.value, __minVer.set, None, u'Minimum Version')

    
    # Attribute uniqueId uses Python identifier uniqueId
    __uniqueId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueId'), 'uniqueId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeader_uniqueId', pyxb.binding.datatypes.string, required=True)
    
    uniqueId = property(__uniqueId.value, __uniqueId.set, None, u'Unique Style ID')


    _ElementMap = {
        __extLst.name() : __extLst,
        __title.name() : __title,
        __catLst.name() : __catLst,
        __desc.name() : __desc
    }
    _AttributeMap = {
        __resId.name() : __resId,
        __minVer.name() : __minVer,
        __uniqueId.name() : __uniqueId
    }
_Namespace.addCategoryObject('typeBinding', u'CT_StyleDefinitionHeader', CT_StyleDefinitionHeader)


# Complex type CT_TableStyleCellStyle with content type ELEMENT_ONLY
class CT_TableStyleCellStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableStyleCellStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cell3D uses Python identifier cell3D
    __cell3D = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cell3D'), 'cell3D', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleCellStyle_httpschemas_openxmlformats_orgdrawingml2006maincell3D', False)

    
    cell3D = property(__cell3D.value, __cell3D.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tcBdr uses Python identifier tcBdr
    __tcBdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tcBdr'), 'tcBdr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleCellStyle_httpschemas_openxmlformats_orgdrawingml2006maintcBdr', False)

    
    tcBdr = property(__tcBdr.value, __tcBdr.set, None, u'Table Cell Borders')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillRef uses Python identifier fillRef
    __fillRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef'), 'fillRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleCellStyle_httpschemas_openxmlformats_orgdrawingml2006mainfillRef', False)

    
    fillRef = property(__fillRef.value, __fillRef.set, None, u'Fill Reference')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fill uses Python identifier fill
    __fill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fill'), 'fill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleCellStyle_httpschemas_openxmlformats_orgdrawingml2006mainfill', False)

    
    fill = property(__fill.value, __fill.set, None, u'Fill')


    _ElementMap = {
        __cell3D.name() : __cell3D,
        __tcBdr.name() : __tcBdr,
        __fillRef.name() : __fillRef,
        __fill.name() : __fill
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableStyleCellStyle', CT_TableStyleCellStyle)


# Complex type CT_EmbeddedFontDataId with content type EMPTY
class CT_EmbeddedFontDataId (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_EmbeddedFontDataId')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_EmbeddedFontDataId_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_EmbeddedFontDataId', CT_EmbeddedFontDataId)


# Complex type CT_TLPoint with content type EMPTY
class CT_TLPoint (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLPoint')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'y'), 'y', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLPoint_y', ST_Percentage, required=True)
    
    y = property(__y.value, __y.set, None, u'Y coordinate')

    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'x'), 'x', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLPoint_x', ST_Percentage, required=True)
    
    x = property(__x.value, __x.set, None, u'X coordinate')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __y.name() : __y,
        __x.name() : __x
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLPoint', CT_TLPoint)


# Complex type CT_ComplementTransform with content type EMPTY
class CT_ComplementTransform (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ComplementTransform')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ComplementTransform', CT_ComplementTransform)


# Complex type CT_GlowEffect with content type ELEMENT_ONLY
class CT_GlowEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GlowEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GlowEffect_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GlowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GlowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GlowEffect_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GlowEffect_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GlowEffect_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Attribute rad uses Python identifier rad
    __rad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rad'), 'rad', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GlowEffect_rad', ST_PositiveCoordinate, unicode_default=u'0')
    
    rad = property(__rad.value, __rad.set, None, u'Radius')


    _ElementMap = {
        __hslClr.name() : __hslClr,
        __srgbClr.name() : __srgbClr,
        __sysClr.name() : __sysClr,
        __schemeClr.name() : __schemeClr,
        __scrgbClr.name() : __scrgbClr,
        __prstClr.name() : __prstClr
    }
    _AttributeMap = {
        __rad.name() : __rad
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GlowEffect', CT_GlowEffect)


# Complex type CT_ResizeHandles with content type EMPTY
class CT_ResizeHandles (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ResizeHandles')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ResizeHandles_val', ST_ResizeHandlesStr, unicode_default=u'rel')
    
    val = property(__val.value, __val.set, None, u'Shape Resize Style Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ResizeHandles', CT_ResizeHandles)


# Complex type CT_LuminanceEffect with content type EMPTY
class CT_LuminanceEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LuminanceEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute bright uses Python identifier bright
    __bright = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bright'), 'bright', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LuminanceEffect_bright', ST_FixedPercentage, unicode_default=u'0%')
    
    bright = property(__bright.value, __bright.set, None, u'Brightness')

    
    # Attribute contrast uses Python identifier contrast
    __contrast = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'contrast'), 'contrast', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LuminanceEffect_contrast', ST_FixedPercentage, unicode_default=u'0%')
    
    contrast = property(__contrast.value, __contrast.set, None, u'Contrast')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __bright.name() : __bright,
        __contrast.name() : __contrast
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LuminanceEffect', CT_LuminanceEffect)


# Complex type CT_Shape with content type ELEMENT_ONLY
class CT_Shape (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Shape')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}adjLst uses Python identifier adjLst
    __adjLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'adjLst'), 'adjLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_httpschemas_openxmlformats_orgdrawingml2006diagramadjLst', False)

    
    adjLst = property(__adjLst.value, __adjLst.set, None, u'Shape Adjust List')

    
    # Attribute lkTxEntry uses Python identifier lkTxEntry
    __lkTxEntry = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lkTxEntry'), 'lkTxEntry', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_lkTxEntry', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    lkTxEntry = property(__lkTxEntry.value, __lkTxEntry.set, None, u'Prevent Text Editing')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_type', ST_LayoutShapeType, unicode_default=u'none')
    
    type = property(__type.value, __type.set, None, u'Shape Type')

    
    # Attribute zOrderOff uses Python identifier zOrderOff
    __zOrderOff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'zOrderOff'), 'zOrderOff', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_zOrderOff', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    zOrderOff = property(__zOrderOff.value, __zOrderOff.set, None, u'Z-Order Offset')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}blip uses Python identifier blip
    __blip = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'blip'), 'blip', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_httpschemas_openxmlformats_orgofficeDocument2006relationshipsblip', _r.ST_RelationshipId, unicode_default=u'')
    
    blip = property(__blip.value, __blip.set, None, None)

    
    # Attribute blipPhldr uses Python identifier blipPhldr
    __blipPhldr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blipPhldr'), 'blipPhldr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_blipPhldr', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    blipPhldr = property(__blipPhldr.value, __blipPhldr.set, None, u'Image Placeholder')

    
    # Attribute rot uses Python identifier rot
    __rot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rot'), 'rot', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_rot', pyxb.binding.datatypes.double, unicode_default=u'0')
    
    rot = property(__rot.value, __rot.set, None, u'Rotation')

    
    # Attribute hideGeom uses Python identifier hideGeom
    __hideGeom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hideGeom'), 'hideGeom', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_hideGeom', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hideGeom = property(__hideGeom.value, __hideGeom.set, None, u'Hide Geometry')


    _ElementMap = {
        __extLst.name() : __extLst,
        __adjLst.name() : __adjLst
    }
    _AttributeMap = {
        __lkTxEntry.name() : __lkTxEntry,
        __type.name() : __type,
        __zOrderOff.name() : __zOrderOff,
        __blip.name() : __blip,
        __blipPhldr.name() : __blipPhldr,
        __rot.name() : __rot,
        __hideGeom.name() : __hideGeom
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Shape', CT_Shape)


# Complex type CT_Constraints with content type ELEMENT_ONLY
class CT_Constraints (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Constraints')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}constr uses Python identifier constr
    __constr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'constr'), 'constr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraints_httpschemas_openxmlformats_orgdrawingml2006diagramconstr', True)

    
    constr = property(__constr.value, __constr.set, None, u'Constraint')


    _ElementMap = {
        __constr.name() : __constr
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Constraints', CT_Constraints)


# Complex type CT_When with content type ELEMENT_ONLY
class CT_When (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_When')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}choose uses Python identifier choose
    __choose = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'choose'), 'choose', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramchoose', True)

    
    choose = property(__choose.value, __choose.set, None, u'Choose Element')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}layoutNode uses Python identifier layoutNode
    __layoutNode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), 'layoutNode', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramlayoutNode', True)

    
    layoutNode = property(__layoutNode.value, __layoutNode.set, None, u'Layout Node')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', True)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}shape uses Python identifier shape
    __shape = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'shape'), 'shape', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramshape', True)

    
    shape = property(__shape.value, __shape.set, None, u'Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}presOf uses Python identifier presOf
    __presOf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), 'presOf', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagrampresOf', True)

    
    presOf = property(__presOf.value, __presOf.set, None, u'Presentation Of')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}alg uses Python identifier alg
    __alg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'alg'), 'alg', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramalg', True)

    
    alg = property(__alg.value, __alg.set, None, u'Algorithm')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}constrLst uses Python identifier constrLst
    __constrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), 'constrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramconstrLst', True)

    
    constrLst = property(__constrLst.value, __constrLst.set, None, u'Constraint List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}ruleLst uses Python identifier ruleLst
    __ruleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), 'ruleLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramruleLst', True)

    
    ruleLst = property(__ruleLst.value, __ruleLst.set, None, u'Rule List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}forEach uses Python identifier forEach
    __forEach = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), 'forEach', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramforEach', True)

    
    forEach = property(__forEach.value, __forEach.set, None, u'For Each')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')

    
    # Attribute axis uses Python identifier axis
    __axis = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axis'), 'axis', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_axis', ST_AxisTypes, unicode_default=u'none')
    
    axis = property(__axis.value, __axis.set, None, u'Axis')

    
    # Attribute step uses Python identifier step
    __step = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'step'), 'step', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_step', ST_Ints, unicode_default=u'1')
    
    step = property(__step.value, __step.set, None, u'Step')

    
    # Attribute hideLastTrans uses Python identifier hideLastTrans
    __hideLastTrans = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hideLastTrans'), 'hideLastTrans', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_hideLastTrans', ST_Booleans, unicode_default=u'true')
    
    hideLastTrans = property(__hideLastTrans.value, __hideLastTrans.set, None, u'Hide Last Transition')

    
    # Attribute arg uses Python identifier arg
    __arg = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'arg'), 'arg', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_arg', ST_FunctionArgument, unicode_default=u'none')
    
    arg = property(__arg.value, __arg.set, None, u'Argument')

    
    # Attribute ptType uses Python identifier ptType
    __ptType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ptType'), 'ptType', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_ptType', ST_ElementTypes, unicode_default=u'all')
    
    ptType = property(__ptType.value, __ptType.set, None, u'Data Point Type')

    
    # Attribute cnt uses Python identifier cnt
    __cnt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cnt'), 'cnt', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_cnt', ST_UnsignedInts, unicode_default=u'0')
    
    cnt = property(__cnt.value, __cnt.set, None, u'Count')

    
    # Attribute func uses Python identifier func
    __func = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'func'), 'func', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_func', ST_FunctionType, required=True)
    
    func = property(__func.value, __func.set, None, u'Function')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_val', ST_FunctionValue, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')

    
    # Attribute st uses Python identifier st
    __st = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'st'), 'st', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_st', ST_Ints, unicode_default=u'1')
    
    st = property(__st.value, __st.set, None, u'Start')

    
    # Attribute op uses Python identifier op
    __op = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'op'), 'op', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_op', ST_FunctionOperator, required=True)
    
    op = property(__op.value, __op.set, None, u'Operator')


    _ElementMap = {
        __choose.name() : __choose,
        __layoutNode.name() : __layoutNode,
        __extLst.name() : __extLst,
        __shape.name() : __shape,
        __presOf.name() : __presOf,
        __alg.name() : __alg,
        __constrLst.name() : __constrLst,
        __ruleLst.name() : __ruleLst,
        __forEach.name() : __forEach
    }
    _AttributeMap = {
        __name.name() : __name,
        __axis.name() : __axis,
        __step.name() : __step,
        __hideLastTrans.name() : __hideLastTrans,
        __arg.name() : __arg,
        __ptType.name() : __ptType,
        __cnt.name() : __cnt,
        __func.name() : __func,
        __val.name() : __val,
        __st.name() : __st,
        __op.name() : __op
    }
_Namespace.addCategoryObject('typeBinding', u'CT_When', CT_When)


# Complex type CT_EffectContainer with content type ELEMENT_ONLY
class CT_EffectContainer (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EffectContainer')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fill uses Python identifier fill
    __fill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fill'), 'fill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainfill', True)

    
    fill = property(__fill.value, __fill.set, None, u'Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillOverlay uses Python identifier fillOverlay
    __fillOverlay = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay'), 'fillOverlay', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainfillOverlay', True)

    
    fillOverlay = property(__fillOverlay.value, __fillOverlay.set, None, u'Fill Overlay Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}glow uses Python identifier glow
    __glow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'glow'), 'glow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainglow', True)

    
    glow = property(__glow.value, __glow.set, None, u'Glow Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstShdw uses Python identifier prstShdw
    __prstShdw = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstShdw'), 'prstShdw', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainprstShdw', True)

    
    prstShdw = property(__prstShdw.value, __prstShdw.set, None, u'Preset Shadow')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grayscl uses Python identifier grayscl
    __grayscl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grayscl'), 'grayscl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006maingrayscl', True)

    
    grayscl = property(__grayscl.value, __grayscl.set, None, u'Gray Scale Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hsl uses Python identifier hsl
    __hsl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hsl'), 'hsl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainhsl', True)

    
    hsl = property(__hsl.value, __hsl.set, None, u'Hue Saturation Luminance Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cont uses Python identifier cont
    __cont = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cont'), 'cont', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006maincont', True)

    
    cont = property(__cont.value, __cont.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effect uses Python identifier effect
    __effect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effect'), 'effect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006maineffect', True)

    
    effect = property(__effect.value, __effect.set, None, u'Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}xfrm uses Python identifier xfrm
    __xfrm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), 'xfrm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainxfrm', True)

    
    xfrm = property(__xfrm.value, __xfrm.set, None, u'Transform Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}outerShdw uses Python identifier outerShdw
    __outerShdw = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'outerShdw'), 'outerShdw', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainouterShdw', True)

    
    outerShdw = property(__outerShdw.value, __outerShdw.set, None, u'Outer Shadow Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaCeiling uses Python identifier alphaCeiling
    __alphaCeiling = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaCeiling'), 'alphaCeiling', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaCeiling', True)

    
    alphaCeiling = property(__alphaCeiling.value, __alphaCeiling.set, None, u'Alpha Ceiling Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}innerShdw uses Python identifier innerShdw
    __innerShdw = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'innerShdw'), 'innerShdw', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006maininnerShdw', True)

    
    innerShdw = property(__innerShdw.value, __innerShdw.set, None, u'Inner Shadow Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}reflection uses Python identifier reflection
    __reflection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'reflection'), 'reflection', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainreflection', True)

    
    reflection = property(__reflection.value, __reflection.set, None, u'Reflection Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaInv uses Python identifier alphaInv
    __alphaInv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaInv'), 'alphaInv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaInv', True)

    
    alphaInv = property(__alphaInv.value, __alphaInv.set, None, u'Alpha Inverse Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}softEdge uses Python identifier softEdge
    __softEdge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'softEdge'), 'softEdge', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainsoftEdge', True)

    
    softEdge = property(__softEdge.value, __softEdge.set, None, u'Soft Edge Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaFloor uses Python identifier alphaFloor
    __alphaFloor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaFloor'), 'alphaFloor', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaFloor', True)

    
    alphaFloor = property(__alphaFloor.value, __alphaFloor.set, None, u'Alpha Floor Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaModFix uses Python identifier alphaModFix
    __alphaModFix = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaModFix'), 'alphaModFix', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaModFix', True)

    
    alphaModFix = property(__alphaModFix.value, __alphaModFix.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}relOff uses Python identifier relOff
    __relOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'relOff'), 'relOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainrelOff', True)

    
    relOff = property(__relOff.value, __relOff.set, None, u'Relative Offset Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaOutset uses Python identifier alphaOutset
    __alphaOutset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOutset'), 'alphaOutset', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaOutset', True)

    
    alphaOutset = property(__alphaOutset.value, __alphaOutset.set, None, u'Alpha Inset/Outset Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, u'Alpha Modulate Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaRepl uses Python identifier alphaRepl
    __alphaRepl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaRepl'), 'alphaRepl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaRepl', True)

    
    alphaRepl = property(__alphaRepl.value, __alphaRepl.set, None, u'Alpha Replace Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}duotone uses Python identifier duotone
    __duotone = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'duotone'), 'duotone', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainduotone', True)

    
    duotone = property(__duotone.value, __duotone.set, None, u'Duotone Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaBiLevel uses Python identifier alphaBiLevel
    __alphaBiLevel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaBiLevel'), 'alphaBiLevel', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaBiLevel', True)

    
    alphaBiLevel = property(__alphaBiLevel.value, __alphaBiLevel.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}biLevel uses Python identifier biLevel
    __biLevel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'biLevel'), 'biLevel', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainbiLevel', True)

    
    biLevel = property(__biLevel.value, __biLevel.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blend uses Python identifier blend
    __blend = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blend'), 'blend', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainblend', True)

    
    blend = property(__blend.value, __blend.set, None, u'Blend Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blur uses Python identifier blur
    __blur = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blur'), 'blur', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainblur', True)

    
    blur = property(__blur.value, __blur.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrChange uses Python identifier clrChange
    __clrChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrChange'), 'clrChange', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainclrChange', True)

    
    clrChange = property(__clrChange.value, __clrChange.set, None, u'Color Change Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrRepl uses Python identifier clrRepl
    __clrRepl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrRepl'), 'clrRepl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainclrRepl', True)

    
    clrRepl = property(__clrRepl.value, __clrRepl.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_type', ST_EffectContainerType, unicode_default=u'sib')
    
    type = property(__type.value, __type.set, None, u'Effect Container Type')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_name', pyxb.binding.datatypes.token)
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __fill.name() : __fill,
        __fillOverlay.name() : __fillOverlay,
        __tint.name() : __tint,
        __glow.name() : __glow,
        __prstShdw.name() : __prstShdw,
        __grayscl.name() : __grayscl,
        __hsl.name() : __hsl,
        __cont.name() : __cont,
        __effect.name() : __effect,
        __xfrm.name() : __xfrm,
        __outerShdw.name() : __outerShdw,
        __alphaCeiling.name() : __alphaCeiling,
        __innerShdw.name() : __innerShdw,
        __reflection.name() : __reflection,
        __alphaInv.name() : __alphaInv,
        __softEdge.name() : __softEdge,
        __alphaFloor.name() : __alphaFloor,
        __alphaModFix.name() : __alphaModFix,
        __relOff.name() : __relOff,
        __alphaOutset.name() : __alphaOutset,
        __alphaMod.name() : __alphaMod,
        __lum.name() : __lum,
        __alphaRepl.name() : __alphaRepl,
        __duotone.name() : __duotone,
        __alphaBiLevel.name() : __alphaBiLevel,
        __biLevel.name() : __biLevel,
        __blend.name() : __blend,
        __blur.name() : __blur,
        __clrChange.name() : __clrChange,
        __clrRepl.name() : __clrRepl
    }
    _AttributeMap = {
        __type.name() : __type,
        __name.name() : __name
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EffectContainer', CT_EffectContainer)


# Complex type CT_SystemColor with content type ELEMENT_ONLY
class CT_SystemColor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_SystemColor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}invGamma uses Python identifier invGamma
    __invGamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), 'invGamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maininvGamma', True)

    
    invGamma = property(__invGamma.value, __invGamma.set, None, u'Inverse Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, u'Alpha Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hue uses Python identifier hue
    __hue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainhue', True)

    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenOff uses Python identifier greenOff
    __greenOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), 'greenOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maingreenOff', True)

    
    greenOff = property(__greenOff.value, __greenOff.set, None, u'Green Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueOff uses Python identifier hueOff
    __hueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), 'hueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainhueOff', True)

    
    hueOff = property(__hueOff.value, __hueOff.set, None, u'Hue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueMod uses Python identifier hueMod
    __hueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), 'hueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainhueMod', True)

    
    hueMod = property(__hueMod.value, __hueMod.set, None, u'Hue Modulate')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}shade uses Python identifier shade
    __shade = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), 'shade', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainshade', True)

    
    shade = property(__shade.value, __shade.set, None, u'Shade')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alpha uses Python identifier alpha
    __alpha = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), 'alpha', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainalpha', True)

    
    alpha = property(__alpha.value, __alpha.set, None, u'Alpha')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satOff uses Python identifier satOff
    __satOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), 'satOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainsatOff', True)

    
    satOff = property(__satOff.value, __satOff.set, None, u'Saturation Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satMod uses Python identifier satMod
    __satMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), 'satMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainsatMod', True)

    
    satMod = property(__satMod.value, __satMod.set, None, u'Saturation Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumOff uses Python identifier lumOff
    __lumOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), 'lumOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainlumOff', True)

    
    lumOff = property(__lumOff.value, __lumOff.set, None, u'Luminance Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumMod uses Python identifier lumMod
    __lumMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), 'lumMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainlumMod', True)

    
    lumMod = property(__lumMod.value, __lumMod.set, None, u'Luminance Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}red uses Python identifier red
    __red = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), 'red', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainred', True)

    
    red = property(__red.value, __red.set, None, u'Red')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redOff uses Python identifier redOff
    __redOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), 'redOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainredOff', True)

    
    redOff = property(__redOff.value, __redOff.set, None, u'Red Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redMod uses Python identifier redMod
    __redMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), 'redMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainredMod', True)

    
    redMod = property(__redMod.value, __redMod.set, None, u'Red Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaOff uses Python identifier alphaOff
    __alphaOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), 'alphaOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaOff', True)

    
    alphaOff = property(__alphaOff.value, __alphaOff.set, None, u'Alpha Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}green uses Python identifier green
    __green = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), 'green', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maingreen', True)

    
    green = property(__green.value, __green.set, None, u'Green')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blue uses Python identifier blue
    __blue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), 'blue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainblue', True)

    
    blue = property(__blue.value, __blue.set, None, u'Blue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, u'Tint')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenMod uses Python identifier greenMod
    __greenMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), 'greenMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maingreenMod', True)

    
    greenMod = property(__greenMod.value, __greenMod.set, None, u'Green Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gray uses Python identifier gray
    __gray = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), 'gray', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maingray', True)

    
    gray = property(__gray.value, __gray.set, None, u'Gray')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}comp uses Python identifier comp
    __comp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), 'comp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maincomp', True)

    
    comp = property(__comp.value, __comp.set, None, u'Complement')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}inv uses Python identifier inv
    __inv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), 'inv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maininv', True)

    
    inv = property(__inv.value, __inv.set, None, u'Inverse')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sat uses Python identifier sat
    __sat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), 'sat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainsat', True)

    
    sat = property(__sat.value, __sat.set, None, u'Saturation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueMod uses Python identifier blueMod
    __blueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), 'blueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainblueMod', True)

    
    blueMod = property(__blueMod.value, __blueMod.set, None, u'Blue Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueOff uses Python identifier blueOff
    __blueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), 'blueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainblueOff', True)

    
    blueOff = property(__blueOff.value, __blueOff.set, None, u'Blue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), 'gamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maingamma', True)

    
    gamma = property(__gamma.value, __gamma.set, None, u'Gamma')

    
    # Attribute lastClr uses Python identifier lastClr
    __lastClr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lastClr'), 'lastClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_lastClr', _s.ST_HexColorRGB)
    
    lastClr = property(__lastClr.value, __lastClr.set, None, u'Last Color')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_val', ST_SystemColorVal, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        __invGamma.name() : __invGamma,
        __alphaMod.name() : __alphaMod,
        __hue.name() : __hue,
        __greenOff.name() : __greenOff,
        __hueOff.name() : __hueOff,
        __hueMod.name() : __hueMod,
        __shade.name() : __shade,
        __alpha.name() : __alpha,
        __satOff.name() : __satOff,
        __satMod.name() : __satMod,
        __lum.name() : __lum,
        __lumOff.name() : __lumOff,
        __lumMod.name() : __lumMod,
        __red.name() : __red,
        __redOff.name() : __redOff,
        __redMod.name() : __redMod,
        __alphaOff.name() : __alphaOff,
        __green.name() : __green,
        __blue.name() : __blue,
        __tint.name() : __tint,
        __greenMod.name() : __greenMod,
        __gray.name() : __gray,
        __comp.name() : __comp,
        __inv.name() : __inv,
        __sat.name() : __sat,
        __blueMod.name() : __blueMod,
        __blueOff.name() : __blueOff,
        __gamma.name() : __gamma
    }
    _AttributeMap = {
        __lastClr.name() : __lastClr,
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_SystemColor', CT_SystemColor)


# Complex type CT_HandoutMasterIdListEntry with content type ELEMENT_ONLY
class CT_HandoutMasterIdListEntry (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_HandoutMasterIdListEntry')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HandoutMasterIdListEntry_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HandoutMasterIdListEntry_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_HandoutMasterIdListEntry', CT_HandoutMasterIdListEntry)


# Complex type CT_Background with content type ELEMENT_ONLY
class CT_Background (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_Background')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}bgPr uses Python identifier bgPr
    __bgPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'bgPr'), 'bgPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Background_httpschemas_openxmlformats_orgpresentationml2006mainbgPr', False)

    
    bgPr = property(__bgPr.value, __bgPr.set, None, u'Background Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}bgRef uses Python identifier bgRef
    __bgRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'bgRef'), 'bgRef', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Background_httpschemas_openxmlformats_orgpresentationml2006mainbgRef', False)

    
    bgRef = property(__bgRef.value, __bgRef.set, None, u'Background Style Reference')

    
    # Attribute bwMode uses Python identifier bwMode
    __bwMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bwMode'), 'bwMode', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Background_bwMode', ST_BlackWhiteMode, unicode_default=u'white')
    
    bwMode = property(__bwMode.value, __bwMode.set, None, u'Black and White Mode')


    _ElementMap = {
        __bgPr.name() : __bgPr,
        __bgRef.name() : __bgRef
    }
    _AttributeMap = {
        __bwMode.name() : __bwMode
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_Background', CT_Background)


# Complex type CT_TextFont with content type EMPTY
class CT_TextFont (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextFont')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute panose uses Python identifier panose
    __panose = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'panose'), 'panose', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextFont_panose', _s.ST_Panose)
    
    panose = property(__panose.value, __panose.set, None, u'Panose Setting')

    
    # Attribute typeface uses Python identifier typeface
    __typeface = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'typeface'), 'typeface', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextFont_typeface', ST_TextTypeface)
    
    typeface = property(__typeface.value, __typeface.set, None, u'Text Typeface')

    
    # Attribute charset uses Python identifier charset
    __charset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'charset'), 'charset', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextFont_charset', pyxb.binding.datatypes.byte, unicode_default=u'1')
    
    charset = property(__charset.value, __charset.set, None, u'Similar Character Set')

    
    # Attribute pitchFamily uses Python identifier pitchFamily
    __pitchFamily = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pitchFamily'), 'pitchFamily', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextFont_pitchFamily', pyxb.binding.datatypes.byte, unicode_default=u'0')
    
    pitchFamily = property(__pitchFamily.value, __pitchFamily.set, None, u'Similar Font Family')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __panose.name() : __panose,
        __typeface.name() : __typeface,
        __charset.name() : __charset,
        __pitchFamily.name() : __pitchFamily
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextFont', CT_TextFont)


# Complex type CT_CommonSlideData with content type ELEMENT_ONLY
class CT_CommonSlideData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_CommonSlideData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommonSlideData_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}bg uses Python identifier bg
    __bg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'bg'), 'bg', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommonSlideData_httpschemas_openxmlformats_orgpresentationml2006mainbg', False)

    
    bg = property(__bg.value, __bg.set, None, u'Slide Background')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}spTree uses Python identifier spTree
    __spTree = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'spTree'), 'spTree', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommonSlideData_httpschemas_openxmlformats_orgpresentationml2006mainspTree', False)

    
    spTree = property(__spTree.value, __spTree.set, None, u'Shape Tree')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}controls uses Python identifier controls
    __controls = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'controls'), 'controls', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommonSlideData_httpschemas_openxmlformats_orgpresentationml2006maincontrols', False)

    
    controls = property(__controls.value, __controls.set, None, u'List of controls')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}custDataLst uses Python identifier custDataLst
    __custDataLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'custDataLst'), 'custDataLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommonSlideData_httpschemas_openxmlformats_orgpresentationml2006maincustDataLst', False)

    
    custDataLst = property(__custDataLst.value, __custDataLst.set, None, u'Customer Data List')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommonSlideData_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __extLst.name() : __extLst,
        __bg.name() : __bg,
        __spTree.name() : __spTree,
        __controls.name() : __controls,
        __custDataLst.name() : __custDataLst
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_CommonSlideData', CT_CommonSlideData)


# Complex type CT_DiagramDefinitionHeader with content type ELEMENT_ONLY
class CT_DiagramDefinitionHeader (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_DiagramDefinitionHeader')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'title'), 'title', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramtitle', True)

    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}desc uses Python identifier desc
    __desc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'desc'), 'desc', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramdesc', True)

    
    desc = property(__desc.value, __desc.set, None, u'Description')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}catLst uses Python identifier catLst
    __catLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), 'catLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramcatLst', False)

    
    catLst = property(__catLst.value, __catLst.set, None, u'Category List')

    
    # Attribute defStyle uses Python identifier defStyle
    __defStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defStyle'), 'defStyle', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_defStyle', pyxb.binding.datatypes.string, unicode_default=u'')
    
    defStyle = property(__defStyle.value, __defStyle.set, None, u'Default Style')

    
    # Attribute resId uses Python identifier resId
    __resId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'resId'), 'resId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_resId', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    resId = property(__resId.value, __resId.set, None, u'Resource Identifier')

    
    # Attribute minVer uses Python identifier minVer
    __minVer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minVer'), 'minVer', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_minVer', pyxb.binding.datatypes.string, unicode_default=u'http://schemas.openxmlformats.org/drawingml/2006/diagram')
    
    minVer = property(__minVer.value, __minVer.set, None, u'Minimum Version')

    
    # Attribute uniqueId uses Python identifier uniqueId
    __uniqueId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueId'), 'uniqueId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_uniqueId', pyxb.binding.datatypes.string, required=True)
    
    uniqueId = property(__uniqueId.value, __uniqueId.set, None, u'Unique Identifier')


    _ElementMap = {
        __extLst.name() : __extLst,
        __title.name() : __title,
        __desc.name() : __desc,
        __catLst.name() : __catLst
    }
    _AttributeMap = {
        __defStyle.name() : __defStyle,
        __resId.name() : __resId,
        __minVer.name() : __minVer,
        __uniqueId.name() : __uniqueId
    }
_Namespace.addCategoryObject('typeBinding', u'CT_DiagramDefinitionHeader', CT_DiagramDefinitionHeader)


# Complex type CT_Scene3D with content type ELEMENT_ONLY
class CT_Scene3D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Scene3D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Scene3D_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}camera uses Python identifier camera
    __camera = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'camera'), 'camera', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Scene3D_httpschemas_openxmlformats_orgdrawingml2006maincamera', False)

    
    camera = property(__camera.value, __camera.set, None, u'Camera')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lightRig uses Python identifier lightRig
    __lightRig = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lightRig'), 'lightRig', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Scene3D_httpschemas_openxmlformats_orgdrawingml2006mainlightRig', False)

    
    lightRig = property(__lightRig.value, __lightRig.set, None, u'Light Rig')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}backdrop uses Python identifier backdrop
    __backdrop = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'backdrop'), 'backdrop', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Scene3D_httpschemas_openxmlformats_orgdrawingml2006mainbackdrop', False)

    
    backdrop = property(__backdrop.value, __backdrop.set, None, u'Backdrop Plane')


    _ElementMap = {
        __extLst.name() : __extLst,
        __camera.name() : __camera,
        __lightRig.name() : __lightRig,
        __backdrop.name() : __backdrop
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Scene3D', CT_Scene3D)


# Complex type CT_StretchInfoProperties with content type ELEMENT_ONLY
class CT_StretchInfoProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_StretchInfoProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillRect uses Python identifier fillRect
    __fillRect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRect'), 'fillRect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StretchInfoProperties_httpschemas_openxmlformats_orgdrawingml2006mainfillRect', False)

    
    fillRect = property(__fillRect.value, __fillRect.set, None, u'Fill Rectangle')


    _ElementMap = {
        __fillRect.name() : __fillRect
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_StretchInfoProperties', CT_StretchInfoProperties)


# Complex type CT_ThemeableLineStyle with content type ELEMENT_ONLY
class CT_ThemeableLineStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ThemeableLineStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ln uses Python identifier ln
    __ln = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), 'ln', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ThemeableLineStyle_httpschemas_openxmlformats_orgdrawingml2006mainln', False)

    
    ln = property(__ln.value, __ln.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnRef uses Python identifier lnRef
    __lnRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnRef'), 'lnRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ThemeableLineStyle_httpschemas_openxmlformats_orgdrawingml2006mainlnRef', False)

    
    lnRef = property(__lnRef.value, __lnRef.set, None, u'Line Reference')


    _ElementMap = {
        __ln.name() : __ln,
        __lnRef.name() : __lnRef
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ThemeableLineStyle', CT_ThemeableLineStyle)


# Complex type CT_GraphicalObjectFrameNonVisual with content type ELEMENT_ONLY
class CT_GraphicalObjectFrameNonVisual (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_GraphicalObjectFrameNonVisual')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}nvPr uses Python identifier nvPr
    __nvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'nvPr'), 'nvPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GraphicalObjectFrameNonVisual_httpschemas_openxmlformats_orgpresentationml2006mainnvPr', False)

    
    nvPr = property(__nvPr.value, __nvPr.set, None, u'Application Non-Visual Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cNvPr uses Python identifier cNvPr
    __cNvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPr'), 'cNvPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GraphicalObjectFrameNonVisual_httpschemas_openxmlformats_orgpresentationml2006maincNvPr', False)

    
    cNvPr = property(__cNvPr.value, __cNvPr.set, None, u'Non-Visual Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cNvGraphicFramePr uses Python identifier cNvGraphicFramePr
    __cNvGraphicFramePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cNvGraphicFramePr'), 'cNvGraphicFramePr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GraphicalObjectFrameNonVisual_httpschemas_openxmlformats_orgpresentationml2006maincNvGraphicFramePr', False)

    
    cNvGraphicFramePr = property(__cNvGraphicFramePr.value, __cNvGraphicFramePr.set, None, u'Non-Visual Graphic Frame Drawing Properties')


    _ElementMap = {
        __nvPr.name() : __nvPr,
        __cNvPr.name() : __cNvPr,
        __cNvGraphicFramePr.name() : __cNvGraphicFramePr
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_GraphicalObjectFrameNonVisual', CT_GraphicalObjectFrameNonVisual)


# Complex type CT_TLAnimVariant with content type ELEMENT_ONLY
class CT_TLAnimVariant (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLAnimVariant')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}boolVal uses Python identifier boolVal
    __boolVal = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'boolVal'), 'boolVal', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimVariant_httpschemas_openxmlformats_orgpresentationml2006mainboolVal', False)

    
    boolVal = property(__boolVal.value, __boolVal.set, None, u'Boolean Variant')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}intVal uses Python identifier intVal
    __intVal = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'intVal'), 'intVal', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimVariant_httpschemas_openxmlformats_orgpresentationml2006mainintVal', False)

    
    intVal = property(__intVal.value, __intVal.set, None, u'Integer')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}fltVal uses Python identifier fltVal
    __fltVal = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'fltVal'), 'fltVal', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimVariant_httpschemas_openxmlformats_orgpresentationml2006mainfltVal', False)

    
    fltVal = property(__fltVal.value, __fltVal.set, None, u'Float Value')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}strVal uses Python identifier strVal
    __strVal = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'strVal'), 'strVal', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimVariant_httpschemas_openxmlformats_orgpresentationml2006mainstrVal', False)

    
    strVal = property(__strVal.value, __strVal.set, None, u'String Value')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}clrVal uses Python identifier clrVal
    __clrVal = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'clrVal'), 'clrVal', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimVariant_httpschemas_openxmlformats_orgpresentationml2006mainclrVal', False)

    
    clrVal = property(__clrVal.value, __clrVal.set, None, u'Color Value')


    _ElementMap = {
        __boolVal.name() : __boolVal,
        __intVal.name() : __intVal,
        __fltVal.name() : __fltVal,
        __strVal.name() : __strVal,
        __clrVal.name() : __clrVal
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLAnimVariant', CT_TLAnimVariant)


# Complex type CT_HSLEffect with content type EMPTY
class CT_HSLEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_HSLEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute hue uses Python identifier hue
    __hue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HSLEffect_hue', ST_PositiveFixedAngle, unicode_default=u'0')
    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Attribute lum uses Python identifier lum
    __lum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HSLEffect_lum', ST_FixedPercentage, unicode_default=u'0%')
    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Attribute sat uses Python identifier sat
    __sat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sat'), 'sat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HSLEffect_sat', ST_FixedPercentage, unicode_default=u'0%')
    
    sat = property(__sat.value, __sat.set, None, u'Saturation')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __hue.name() : __hue,
        __lum.name() : __lum,
        __sat.name() : __sat
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_HSLEffect', CT_HSLEffect)


# Complex type CT_TLSetBehavior with content type ELEMENT_ONLY
class CT_TLSetBehavior (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLSetBehavior')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}to uses Python identifier to
    __to = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'to'), 'to', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLSetBehavior_httpschemas_openxmlformats_orgpresentationml2006mainto', False)

    
    to = property(__to.value, __to.set, None, u'To')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cBhvr uses Python identifier cBhvr
    __cBhvr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), 'cBhvr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLSetBehavior_httpschemas_openxmlformats_orgpresentationml2006maincBhvr', False)

    
    cBhvr = property(__cBhvr.value, __cBhvr.set, None, u'Common Behavior')


    _ElementMap = {
        __to.name() : __to,
        __cBhvr.name() : __cBhvr
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLSetBehavior', CT_TLSetBehavior)


# Complex type CT_TextCharacterProperties with content type ELEMENT_ONLY
class CT_TextCharacterProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextCharacterProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}highlight uses Python identifier highlight
    __highlight = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'highlight'), 'highlight', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainhighlight', False)

    
    highlight = property(__highlight.value, __highlight.set, None, u'Highlight Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ln uses Python identifier ln
    __ln = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), 'ln', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainln', False)

    
    ln = property(__ln.value, __ln.set, None, u'Line')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}uLnTx uses Python identifier uLnTx
    __uLnTx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'uLnTx'), 'uLnTx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainuLnTx', False)

    
    uLnTx = property(__uLnTx.value, __uLnTx.set, None, u'Underline Follows Text')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}latin uses Python identifier latin
    __latin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'latin'), 'latin', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainlatin', False)

    
    latin = property(__latin.value, __latin.set, None, u'Latin Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ea uses Python identifier ea
    __ea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ea'), 'ea', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainea', False)

    
    ea = property(__ea.value, __ea.set, None, u'East Asian Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}uLn uses Python identifier uLn
    __uLn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'uLn'), 'uLn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainuLn', False)

    
    uLn = property(__uLn.value, __uLn.set, None, u'Underline Stroke')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cs uses Python identifier cs
    __cs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cs'), 'cs', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006maincs', False)

    
    cs = property(__cs.value, __cs.set, None, u'Complex Script Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sym uses Python identifier sym
    __sym = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sym'), 'sym', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainsym', False)

    
    sym = property(__sym.value, __sym.set, None, u'Symbol Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hlinkClick uses Python identifier hlinkClick
    __hlinkClick = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkClick'), 'hlinkClick', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainhlinkClick', False)

    
    hlinkClick = property(__hlinkClick.value, __hlinkClick.set, None, u'Click Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}rtl uses Python identifier rtl
    __rtl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'rtl'), 'rtl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainrtl', False)

    
    rtl = property(__rtl.value, __rtl.set, None, u'Right to Left Run')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hlinkMouseOver uses Python identifier hlinkMouseOver
    __hlinkMouseOver = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkMouseOver'), 'hlinkMouseOver', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainhlinkMouseOver', False)

    
    hlinkMouseOver = property(__hlinkMouseOver.value, __hlinkMouseOver.set, None, u'Mouse-Over Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}uFillTx uses Python identifier uFillTx
    __uFillTx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'uFillTx'), 'uFillTx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainuFillTx', False)

    
    uFillTx = property(__uFillTx.value, __uFillTx.set, None, u'Underline Fill Properties Follow Text')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}uFill uses Python identifier uFill
    __uFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'uFill'), 'uFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainuFill', False)

    
    uFill = property(__uFill.value, __uFill.set, None, u'Underline Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Attribute kumimoji uses Python identifier kumimoji
    __kumimoji = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'kumimoji'), 'kumimoji', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_kumimoji', pyxb.binding.datatypes.boolean)
    
    kumimoji = property(__kumimoji.value, __kumimoji.set, None, u'Kumimoji')

    
    # Attribute sz uses Python identifier sz
    __sz = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sz'), 'sz', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_sz', ST_TextFontSize)
    
    sz = property(__sz.value, __sz.set, None, u'Font Size')

    
    # Attribute smtClean uses Python identifier smtClean
    __smtClean = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'smtClean'), 'smtClean', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_smtClean', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    smtClean = property(__smtClean.value, __smtClean.set, None, u'SmartTag Clean')

    
    # Attribute dirty uses Python identifier dirty
    __dirty = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dirty'), 'dirty', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_dirty', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    dirty = property(__dirty.value, __dirty.set, None, u'Dirty')

    
    # Attribute u uses Python identifier u
    __u = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'u'), 'u', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_u', ST_TextUnderlineType)
    
    u = property(__u.value, __u.set, None, u'Underline')

    
    # Attribute noProof uses Python identifier noProof
    __noProof = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noProof'), 'noProof', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_noProof', pyxb.binding.datatypes.boolean)
    
    noProof = property(__noProof.value, __noProof.set, None, u'No Proofing')

    
    # Attribute smtId uses Python identifier smtId
    __smtId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'smtId'), 'smtId', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_smtId', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    smtId = property(__smtId.value, __smtId.set, None, u'SmartTag ID')

    
    # Attribute spc uses Python identifier spc
    __spc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spc'), 'spc', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_spc', ST_TextPoint)
    
    spc = property(__spc.value, __spc.set, None, u'Spacing')

    
    # Attribute baseline uses Python identifier baseline
    __baseline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'baseline'), 'baseline', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_baseline', ST_Percentage)
    
    baseline = property(__baseline.value, __baseline.set, None, u'Baseline')

    
    # Attribute altLang uses Python identifier altLang
    __altLang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'altLang'), 'altLang', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_altLang', _s.ST_Lang)
    
    altLang = property(__altLang.value, __altLang.set, None, u'Alternative Language')

    
    # Attribute bmk uses Python identifier bmk
    __bmk = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bmk'), 'bmk', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_bmk', pyxb.binding.datatypes.string)
    
    bmk = property(__bmk.value, __bmk.set, None, u'Bookmark Link Target')

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_lang', _s.ST_Lang)
    
    lang = property(__lang.value, __lang.set, None, u'Language ID')

    
    # Attribute strike uses Python identifier strike
    __strike = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'strike'), 'strike', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_strike', ST_TextStrikeType)
    
    strike = property(__strike.value, __strike.set, None, u'Strikethrough')

    
    # Attribute cap uses Python identifier cap
    __cap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cap'), 'cap', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_cap', ST_TextCapsType)
    
    cap = property(__cap.value, __cap.set, None, u'Capitalization')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_b', pyxb.binding.datatypes.boolean)
    
    b = property(__b.value, __b.set, None, u'Bold')

    
    # Attribute err uses Python identifier err
    __err = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'err'), 'err', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_err', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    err = property(__err.value, __err.set, None, u'Spelling Error')

    
    # Attribute kern uses Python identifier kern
    __kern = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'kern'), 'kern', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_kern', ST_TextNonNegativePoint)
    
    kern = property(__kern.value, __kern.set, None, u'Kerning')

    
    # Attribute i uses Python identifier i
    __i = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'i'), 'i', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_i', pyxb.binding.datatypes.boolean)
    
    i = property(__i.value, __i.set, None, u'Italics')

    
    # Attribute normalizeH uses Python identifier normalizeH
    __normalizeH = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'normalizeH'), 'normalizeH', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_normalizeH', pyxb.binding.datatypes.boolean)
    
    normalizeH = property(__normalizeH.value, __normalizeH.set, None, u'Normalize Heights')


    _ElementMap = {
        __gradFill.name() : __gradFill,
        __blipFill.name() : __blipFill,
        __pattFill.name() : __pattFill,
        __highlight.name() : __highlight,
        __grpFill.name() : __grpFill,
        __ln.name() : __ln,
        __uLnTx.name() : __uLnTx,
        __effectLst.name() : __effectLst,
        __latin.name() : __latin,
        __ea.name() : __ea,
        __uLn.name() : __uLn,
        __cs.name() : __cs,
        __sym.name() : __sym,
        __hlinkClick.name() : __hlinkClick,
        __rtl.name() : __rtl,
        __hlinkMouseOver.name() : __hlinkMouseOver,
        __effectDag.name() : __effectDag,
        __extLst.name() : __extLst,
        __uFillTx.name() : __uFillTx,
        __uFill.name() : __uFill,
        __noFill.name() : __noFill,
        __solidFill.name() : __solidFill
    }
    _AttributeMap = {
        __kumimoji.name() : __kumimoji,
        __sz.name() : __sz,
        __smtClean.name() : __smtClean,
        __dirty.name() : __dirty,
        __u.name() : __u,
        __noProof.name() : __noProof,
        __smtId.name() : __smtId,
        __spc.name() : __spc,
        __baseline.name() : __baseline,
        __altLang.name() : __altLang,
        __bmk.name() : __bmk,
        __lang.name() : __lang,
        __strike.name() : __strike,
        __cap.name() : __cap,
        __b.name() : __b,
        __err.name() : __err,
        __kern.name() : __kern,
        __i.name() : __i,
        __normalizeH.name() : __normalizeH
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextCharacterProperties', CT_TextCharacterProperties)


# Complex type CT_Path2DCubicBezierTo with content type ELEMENT_ONLY
class CT_Path2DCubicBezierTo (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2DCubicBezierTo')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pt uses Python identifier pt
    __pt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), 'pt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DCubicBezierTo_httpschemas_openxmlformats_orgdrawingml2006mainpt', True)

    
    pt = property(__pt.value, __pt.set, None, u'Control points and end point')


    _ElementMap = {
        __pt.name() : __pt
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2DCubicBezierTo', CT_Path2DCubicBezierTo)


# Complex type CT_ShapeStyle with content type ELEMENT_ONLY
class CT_ShapeStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ShapeStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fontRef uses Python identifier fontRef
    __fontRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fontRef'), 'fontRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeStyle_httpschemas_openxmlformats_orgdrawingml2006mainfontRef', False)

    
    fontRef = property(__fontRef.value, __fontRef.set, None, u'Font Reference')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnRef uses Python identifier lnRef
    __lnRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnRef'), 'lnRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeStyle_httpschemas_openxmlformats_orgdrawingml2006mainlnRef', False)

    
    lnRef = property(__lnRef.value, __lnRef.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillRef uses Python identifier fillRef
    __fillRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef'), 'fillRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeStyle_httpschemas_openxmlformats_orgdrawingml2006mainfillRef', False)

    
    fillRef = property(__fillRef.value, __fillRef.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectRef uses Python identifier effectRef
    __effectRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectRef'), 'effectRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeStyle_httpschemas_openxmlformats_orgdrawingml2006maineffectRef', False)

    
    effectRef = property(__effectRef.value, __effectRef.set, None, None)


    _ElementMap = {
        __fontRef.name() : __fontRef,
        __lnRef.name() : __lnRef,
        __fillRef.name() : __fillRef,
        __effectRef.name() : __effectRef
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ShapeStyle', CT_ShapeStyle)


# Complex type CT_HslColor with content type ELEMENT_ONLY
class CT_HslColor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_HslColor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaOff uses Python identifier alphaOff
    __alphaOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), 'alphaOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaOff', True)

    
    alphaOff = property(__alphaOff.value, __alphaOff.set, None, u'Alpha Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueMod uses Python identifier blueMod
    __blueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), 'blueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainblueMod', True)

    
    blueMod = property(__blueMod.value, __blueMod.set, None, u'Blue Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, u'Alpha Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alpha uses Python identifier alpha
    __alpha = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), 'alpha', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainalpha', True)

    
    alpha = property(__alpha.value, __alpha.set, None, u'Alpha')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueOff uses Python identifier hueOff
    __hueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), 'hueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainhueOff', True)

    
    hueOff = property(__hueOff.value, __hueOff.set, None, u'Hue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueMod uses Python identifier hueMod
    __hueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), 'hueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainhueMod', True)

    
    hueMod = property(__hueMod.value, __hueMod.set, None, u'Hue Modulate')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satOff uses Python identifier satOff
    __satOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), 'satOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainsatOff', True)

    
    satOff = property(__satOff.value, __satOff.set, None, u'Saturation Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satMod uses Python identifier satMod
    __satMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), 'satMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainsatMod', True)

    
    satMod = property(__satMod.value, __satMod.set, None, u'Saturation Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumOff uses Python identifier lumOff
    __lumOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), 'lumOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainlumOff', True)

    
    lumOff = property(__lumOff.value, __lumOff.set, None, u'Luminance Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}invGamma uses Python identifier invGamma
    __invGamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), 'invGamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maininvGamma', True)

    
    invGamma = property(__invGamma.value, __invGamma.set, None, u'Inverse Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}red uses Python identifier red
    __red = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), 'red', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainred', True)

    
    red = property(__red.value, __red.set, None, u'Red')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blue uses Python identifier blue
    __blue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), 'blue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainblue', True)

    
    blue = property(__blue.value, __blue.set, None, u'Blue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redOff uses Python identifier redOff
    __redOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), 'redOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainredOff', True)

    
    redOff = property(__redOff.value, __redOff.set, None, u'Red Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumMod uses Python identifier lumMod
    __lumMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), 'lumMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainlumMod', True)

    
    lumMod = property(__lumMod.value, __lumMod.set, None, u'Luminance Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redMod uses Python identifier redMod
    __redMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), 'redMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainredMod', True)

    
    redMod = property(__redMod.value, __redMod.set, None, u'Red Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}green uses Python identifier green
    __green = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), 'green', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maingreen', True)

    
    green = property(__green.value, __green.set, None, u'Green')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, u'Tint')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}shade uses Python identifier shade
    __shade = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), 'shade', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainshade', True)

    
    shade = property(__shade.value, __shade.set, None, u'Shade')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sat uses Python identifier sat
    __sat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), 'sat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainsat', True)

    
    sat = property(__sat.value, __sat.set, None, u'Saturation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenMod uses Python identifier greenMod
    __greenMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), 'greenMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maingreenMod', True)

    
    greenMod = property(__greenMod.value, __greenMod.set, None, u'Green Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueOff uses Python identifier blueOff
    __blueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), 'blueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainblueOff', True)

    
    blueOff = property(__blueOff.value, __blueOff.set, None, u'Blue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}comp uses Python identifier comp
    __comp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), 'comp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maincomp', True)

    
    comp = property(__comp.value, __comp.set, None, u'Complement')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hue uses Python identifier hue
    __hue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainhue', True)

    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}inv uses Python identifier inv
    __inv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), 'inv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maininv', True)

    
    inv = property(__inv.value, __inv.set, None, u'Inverse')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenOff uses Python identifier greenOff
    __greenOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), 'greenOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maingreenOff', True)

    
    greenOff = property(__greenOff.value, __greenOff.set, None, u'Green Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gray uses Python identifier gray
    __gray = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), 'gray', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maingray', True)

    
    gray = property(__gray.value, __gray.set, None, u'Gray')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), 'gamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maingamma', True)

    
    gamma = property(__gamma.value, __gamma.set, None, u'Gamma')

    
    # Attribute hue uses Python identifier hue_
    __hue_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hue'), 'hue_', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_hue', ST_PositiveFixedAngle, required=True)
    
    hue_ = property(__hue_.value, __hue_.set, None, u'Hue')

    
    # Attribute lum uses Python identifier lum_
    __lum_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lum'), 'lum_', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_lum', ST_Percentage, required=True)
    
    lum_ = property(__lum_.value, __lum_.set, None, u'Luminance')

    
    # Attribute sat uses Python identifier sat_
    __sat_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sat'), 'sat_', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_sat', ST_Percentage, required=True)
    
    sat_ = property(__sat_.value, __sat_.set, None, u'Saturation')


    _ElementMap = {
        __alphaOff.name() : __alphaOff,
        __blueMod.name() : __blueMod,
        __alphaMod.name() : __alphaMod,
        __alpha.name() : __alpha,
        __hueOff.name() : __hueOff,
        __hueMod.name() : __hueMod,
        __satOff.name() : __satOff,
        __satMod.name() : __satMod,
        __lum.name() : __lum,
        __lumOff.name() : __lumOff,
        __invGamma.name() : __invGamma,
        __red.name() : __red,
        __blue.name() : __blue,
        __redOff.name() : __redOff,
        __lumMod.name() : __lumMod,
        __redMod.name() : __redMod,
        __green.name() : __green,
        __tint.name() : __tint,
        __shade.name() : __shade,
        __sat.name() : __sat,
        __greenMod.name() : __greenMod,
        __blueOff.name() : __blueOff,
        __comp.name() : __comp,
        __hue.name() : __hue,
        __inv.name() : __inv,
        __greenOff.name() : __greenOff,
        __gray.name() : __gray,
        __gamma.name() : __gamma
    }
    _AttributeMap = {
        __hue_.name() : __hue_,
        __lum_.name() : __lum_,
        __sat_.name() : __sat_
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_HslColor', CT_HslColor)


# Complex type CT_SchemeColor with content type ELEMENT_ONLY
class CT_SchemeColor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_SchemeColor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satMod uses Python identifier satMod
    __satMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), 'satMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainsatMod', True)

    
    satMod = property(__satMod.value, __satMod.set, None, u'Saturation Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blue uses Python identifier blue
    __blue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), 'blue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainblue', True)

    
    blue = property(__blue.value, __blue.set, None, u'Blue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumOff uses Python identifier lumOff
    __lumOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), 'lumOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainlumOff', True)

    
    lumOff = property(__lumOff.value, __lumOff.set, None, u'Luminance Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaOff uses Python identifier alphaOff
    __alphaOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), 'alphaOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaOff', True)

    
    alphaOff = property(__alphaOff.value, __alphaOff.set, None, u'Alpha Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumMod uses Python identifier lumMod
    __lumMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), 'lumMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainlumMod', True)

    
    lumMod = property(__lumMod.value, __lumMod.set, None, u'Luminance Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}red uses Python identifier red
    __red = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), 'red', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainred', True)

    
    red = property(__red.value, __red.set, None, u'Red')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}invGamma uses Python identifier invGamma
    __invGamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), 'invGamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maininvGamma', True)

    
    invGamma = property(__invGamma.value, __invGamma.set, None, u'Inverse Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redOff uses Python identifier redOff
    __redOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), 'redOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainredOff', True)

    
    redOff = property(__redOff.value, __redOff.set, None, u'Red Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redMod uses Python identifier redMod
    __redMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), 'redMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainredMod', True)

    
    redMod = property(__redMod.value, __redMod.set, None, u'Red Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}green uses Python identifier green
    __green = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), 'green', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maingreen', True)

    
    green = property(__green.value, __green.set, None, u'Green')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, u'Tint')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenOff uses Python identifier greenOff
    __greenOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), 'greenOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maingreenOff', True)

    
    greenOff = property(__greenOff.value, __greenOff.set, None, u'Green Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenMod uses Python identifier greenMod
    __greenMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), 'greenMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maingreenMod', True)

    
    greenMod = property(__greenMod.value, __greenMod.set, None, u'Green Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}comp uses Python identifier comp
    __comp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), 'comp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maincomp', True)

    
    comp = property(__comp.value, __comp.set, None, u'Complement')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueOff uses Python identifier blueOff
    __blueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), 'blueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainblueOff', True)

    
    blueOff = property(__blueOff.value, __blueOff.set, None, u'Blue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueMod uses Python identifier blueMod
    __blueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), 'blueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainblueMod', True)

    
    blueMod = property(__blueMod.value, __blueMod.set, None, u'Blue Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satOff uses Python identifier satOff
    __satOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), 'satOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainsatOff', True)

    
    satOff = property(__satOff.value, __satOff.set, None, u'Saturation Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), 'gamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maingamma', True)

    
    gamma = property(__gamma.value, __gamma.set, None, u'Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gray uses Python identifier gray
    __gray = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), 'gray', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maingray', True)

    
    gray = property(__gray.value, __gray.set, None, u'Gray')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, u'Alpha Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hue uses Python identifier hue
    __hue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainhue', True)

    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueOff uses Python identifier hueOff
    __hueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), 'hueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainhueOff', True)

    
    hueOff = property(__hueOff.value, __hueOff.set, None, u'Hue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueMod uses Python identifier hueMod
    __hueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), 'hueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainhueMod', True)

    
    hueMod = property(__hueMod.value, __hueMod.set, None, u'Hue Modulate')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alpha uses Python identifier alpha
    __alpha = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), 'alpha', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainalpha', True)

    
    alpha = property(__alpha.value, __alpha.set, None, u'Alpha')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sat uses Python identifier sat
    __sat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), 'sat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainsat', True)

    
    sat = property(__sat.value, __sat.set, None, u'Saturation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}inv uses Python identifier inv
    __inv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), 'inv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maininv', True)

    
    inv = property(__inv.value, __inv.set, None, u'Inverse')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}shade uses Python identifier shade
    __shade = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), 'shade', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainshade', True)

    
    shade = property(__shade.value, __shade.set, None, u'Shade')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_val', ST_SchemeColorVal, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        __satMod.name() : __satMod,
        __blue.name() : __blue,
        __lumOff.name() : __lumOff,
        __alphaOff.name() : __alphaOff,
        __lumMod.name() : __lumMod,
        __red.name() : __red,
        __invGamma.name() : __invGamma,
        __redOff.name() : __redOff,
        __redMod.name() : __redMod,
        __green.name() : __green,
        __tint.name() : __tint,
        __greenOff.name() : __greenOff,
        __greenMod.name() : __greenMod,
        __comp.name() : __comp,
        __blueOff.name() : __blueOff,
        __blueMod.name() : __blueMod,
        __satOff.name() : __satOff,
        __gamma.name() : __gamma,
        __gray.name() : __gray,
        __alphaMod.name() : __alphaMod,
        __lum.name() : __lum,
        __hue.name() : __hue,
        __hueOff.name() : __hueOff,
        __hueMod.name() : __hueMod,
        __alpha.name() : __alpha,
        __sat.name() : __sat,
        __inv.name() : __inv,
        __shade.name() : __shade
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_SchemeColor', CT_SchemeColor)


# Complex type CT_FillOverlayEffect with content type ELEMENT_ONLY
class CT_FillOverlayEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FillOverlayEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillOverlayEffect_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillOverlayEffect_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillOverlayEffect_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillOverlayEffect_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillOverlayEffect_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillOverlayEffect_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Attribute blend uses Python identifier blend
    __blend = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blend'), 'blend', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillOverlayEffect_blend', ST_BlendMode, required=True)
    
    blend = property(__blend.value, __blend.set, None, u'Blend')


    _ElementMap = {
        __solidFill.name() : __solidFill,
        __gradFill.name() : __gradFill,
        __blipFill.name() : __blipFill,
        __pattFill.name() : __pattFill,
        __noFill.name() : __noFill,
        __grpFill.name() : __grpFill
    }
    _AttributeMap = {
        __blend.name() : __blend
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FillOverlayEffect', CT_FillOverlayEffect)


# Complex type CT_LineJoinBevel with content type EMPTY
class CT_LineJoinBevel (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LineJoinBevel')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LineJoinBevel', CT_LineJoinBevel)


# Complex type CT_TransitionSoundAction with content type ELEMENT_ONLY
class CT_TransitionSoundAction (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TransitionSoundAction')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}stSnd uses Python identifier stSnd
    __stSnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'stSnd'), 'stSnd', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TransitionSoundAction_httpschemas_openxmlformats_orgpresentationml2006mainstSnd', False)

    
    stSnd = property(__stSnd.value, __stSnd.set, None, u'Start Sound Action')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}endSnd uses Python identifier endSnd
    __endSnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'endSnd'), 'endSnd', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TransitionSoundAction_httpschemas_openxmlformats_orgpresentationml2006mainendSnd', False)

    
    endSnd = property(__endSnd.value, __endSnd.set, None, u'Stop Sound Action')


    _ElementMap = {
        __stSnd.name() : __stSnd,
        __endSnd.name() : __endSnd
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TransitionSoundAction', CT_TransitionSoundAction)


# Complex type CT_TLAnimVariantStringVal with content type EMPTY
class CT_TLAnimVariantStringVal (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLAnimVariantStringVal')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimVariantStringVal_val', pyxb.binding.datatypes.string, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLAnimVariantStringVal', CT_TLAnimVariantStringVal)


# Complex type CT_GvmlPicture with content type ELEMENT_ONLY
class CT_GvmlPicture (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlPicture')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlPicture_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}nvPicPr uses Python identifier nvPicPr
    __nvPicPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'nvPicPr'), 'nvPicPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlPicture_httpschemas_openxmlformats_orgdrawingml2006mainnvPicPr', False)

    
    nvPicPr = property(__nvPicPr.value, __nvPicPr.set, None, u'Non-Visual Properties for a Picture')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlPicture_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, u'Picture Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), 'style', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlPicture_httpschemas_openxmlformats_orgdrawingml2006mainstyle', False)

    
    style = property(__style.value, __style.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spPr uses Python identifier spPr
    __spPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), 'spPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlPicture_httpschemas_openxmlformats_orgdrawingml2006mainspPr', False)

    
    spPr = property(__spPr.value, __spPr.set, None, u'Shape Properties')


    _ElementMap = {
        __extLst.name() : __extLst,
        __nvPicPr.name() : __nvPicPr,
        __blipFill.name() : __blipFill,
        __style.name() : __style,
        __spPr.name() : __spPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlPicture', CT_GvmlPicture)


# Complex type CT_Connection with content type EMPTY
class CT_Connection (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Connection')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Connection_id', ST_DrawingElementId, required=True)
    
    id = property(__id.value, __id.set, None, u'Identifier')

    
    # Attribute idx uses Python identifier idx
    __idx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'idx'), 'idx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Connection_idx', pyxb.binding.datatypes.unsignedInt, required=True)
    
    idx = property(__idx.value, __idx.set, None, u'Index')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id,
        __idx.name() : __idx
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Connection', CT_Connection)


# Complex type CT_Cell3D with content type ELEMENT_ONLY
class CT_Cell3D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Cell3D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Cell3D_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bevel uses Python identifier bevel
    __bevel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bevel'), 'bevel', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Cell3D_httpschemas_openxmlformats_orgdrawingml2006mainbevel', False)

    
    bevel = property(__bevel.value, __bevel.set, None, u'Bevel')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lightRig uses Python identifier lightRig
    __lightRig = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lightRig'), 'lightRig', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Cell3D_httpschemas_openxmlformats_orgdrawingml2006mainlightRig', False)

    
    lightRig = property(__lightRig.value, __lightRig.set, None, u'Light Rig')

    
    # Attribute prstMaterial uses Python identifier prstMaterial
    __prstMaterial = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prstMaterial'), 'prstMaterial', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Cell3D_prstMaterial', ST_PresetMaterialType, unicode_default=u'plastic')
    
    prstMaterial = property(__prstMaterial.value, __prstMaterial.set, None, u'Preset Material')


    _ElementMap = {
        __extLst.name() : __extLst,
        __bevel.name() : __bevel,
        __lightRig.name() : __lightRig
    }
    _AttributeMap = {
        __prstMaterial.name() : __prstMaterial
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Cell3D', CT_Cell3D)


# Complex type CT_ModifyVerifier with content type EMPTY
class CT_ModifyVerifier (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_ModifyVerifier')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute cryptProviderTypeExtSource uses Python identifier cryptProviderTypeExtSource
    __cryptProviderTypeExtSource = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cryptProviderTypeExtSource'), 'cryptProviderTypeExtSource', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_cryptProviderTypeExtSource', pyxb.binding.datatypes.string)
    
    cryptProviderTypeExtSource = property(__cryptProviderTypeExtSource.value, __cryptProviderTypeExtSource.set, None, u'Provider Type Extensibility Source')

    
    # Attribute cryptProviderTypeExt uses Python identifier cryptProviderTypeExt
    __cryptProviderTypeExt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cryptProviderTypeExt'), 'cryptProviderTypeExt', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_cryptProviderTypeExt', pyxb.binding.datatypes.unsignedInt)
    
    cryptProviderTypeExt = property(__cryptProviderTypeExt.value, __cryptProviderTypeExt.set, None, u'Cryptographic Provider Type Extensibility')

    
    # Attribute hashData uses Python identifier hashData
    __hashData = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hashData'), 'hashData', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_hashData', pyxb.binding.datatypes.base64Binary)
    
    hashData = property(__hashData.value, __hashData.set, None, u'Password Hash')

    
    # Attribute cryptAlgorithmClass uses Python identifier cryptAlgorithmClass
    __cryptAlgorithmClass = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cryptAlgorithmClass'), 'cryptAlgorithmClass', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_cryptAlgorithmClass', _s.ST_AlgClass)
    
    cryptAlgorithmClass = property(__cryptAlgorithmClass.value, __cryptAlgorithmClass.set, None, u'Cryptographic Algorithm Class')

    
    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_algorithmName', pyxb.binding.datatypes.string)
    
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, u'Cryptographic Algorithm Name')

    
    # Attribute cryptAlgorithmSid uses Python identifier cryptAlgorithmSid
    __cryptAlgorithmSid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cryptAlgorithmSid'), 'cryptAlgorithmSid', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_cryptAlgorithmSid', pyxb.binding.datatypes.unsignedInt)
    
    cryptAlgorithmSid = property(__cryptAlgorithmSid.value, __cryptAlgorithmSid.set, None, u'Cryptographic Hashing Algorithm')

    
    # Attribute cryptProvider uses Python identifier cryptProvider
    __cryptProvider = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cryptProvider'), 'cryptProvider', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_cryptProvider', pyxb.binding.datatypes.string)
    
    cryptProvider = property(__cryptProvider.value, __cryptProvider.set, None, u'Cryptographic Provider')

    
    # Attribute cryptAlgorithmType uses Python identifier cryptAlgorithmType
    __cryptAlgorithmType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cryptAlgorithmType'), 'cryptAlgorithmType', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_cryptAlgorithmType', _s.ST_AlgType)
    
    cryptAlgorithmType = property(__cryptAlgorithmType.value, __cryptAlgorithmType.set, None, u'Cryptographic Algorithm Type')

    
    # Attribute algIdExt uses Python identifier algIdExt
    __algIdExt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algIdExt'), 'algIdExt', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_algIdExt', pyxb.binding.datatypes.unsignedInt)
    
    algIdExt = property(__algIdExt.value, __algIdExt.set, None, u'Cryptographic Algorithm Extensibility')

    
    # Attribute hashValue uses Python identifier hashValue
    __hashValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hashValue'), 'hashValue', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_hashValue', pyxb.binding.datatypes.base64Binary)
    
    hashValue = property(__hashValue.value, __hashValue.set, None, u'Password Hash Value')

    
    # Attribute saltValue uses Python identifier saltValue
    __saltValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'saltValue'), 'saltValue', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_saltValue', pyxb.binding.datatypes.base64Binary)
    
    saltValue = property(__saltValue.value, __saltValue.set, None, u'Salt Value for Password Verifier')

    
    # Attribute algIdExtSource uses Python identifier algIdExtSource
    __algIdExtSource = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algIdExtSource'), 'algIdExtSource', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_algIdExtSource', pyxb.binding.datatypes.string)
    
    algIdExtSource = property(__algIdExtSource.value, __algIdExtSource.set, None, u'Algorithm Extensibility Source')

    
    # Attribute spinCount uses Python identifier spinCount
    __spinCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spinCount'), 'spinCount', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_spinCount', pyxb.binding.datatypes.unsignedInt)
    
    spinCount = property(__spinCount.value, __spinCount.set, None, u'Iterations to Run Hashing Algorithm')

    
    # Attribute spinValue uses Python identifier spinValue
    __spinValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spinValue'), 'spinValue', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_spinValue', pyxb.binding.datatypes.unsignedInt)
    
    spinValue = property(__spinValue.value, __spinValue.set, None, u'Iterations to Run Hashing Algorithm')

    
    # Attribute saltData uses Python identifier saltData
    __saltData = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'saltData'), 'saltData', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_saltData', pyxb.binding.datatypes.base64Binary)
    
    saltData = property(__saltData.value, __saltData.set, None, u'Salt for Password Verifier')

    
    # Attribute cryptProviderType uses Python identifier cryptProviderType
    __cryptProviderType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cryptProviderType'), 'cryptProviderType', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ModifyVerifier_cryptProviderType', _s.ST_CryptProv)
    
    cryptProviderType = property(__cryptProviderType.value, __cryptProviderType.set, None, u'Cryptographic Provider Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __cryptProviderTypeExtSource.name() : __cryptProviderTypeExtSource,
        __cryptProviderTypeExt.name() : __cryptProviderTypeExt,
        __hashData.name() : __hashData,
        __cryptAlgorithmClass.name() : __cryptAlgorithmClass,
        __algorithmName.name() : __algorithmName,
        __cryptAlgorithmSid.name() : __cryptAlgorithmSid,
        __cryptProvider.name() : __cryptProvider,
        __cryptAlgorithmType.name() : __cryptAlgorithmType,
        __algIdExt.name() : __algIdExt,
        __hashValue.name() : __hashValue,
        __saltValue.name() : __saltValue,
        __algIdExtSource.name() : __algIdExtSource,
        __spinCount.name() : __spinCount,
        __spinValue.name() : __spinValue,
        __saltData.name() : __saltData,
        __cryptProviderType.name() : __cryptProviderType
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_ModifyVerifier', CT_ModifyVerifier)


# Complex type CT_ShowInfoKiosk with content type EMPTY
class CT_ShowInfoKiosk (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_ShowInfoKiosk')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute restart uses Python identifier restart
    __restart = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'restart'), 'restart', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShowInfoKiosk_restart', pyxb.binding.datatypes.unsignedInt, unicode_default=u'300000')
    
    restart = property(__restart.value, __restart.set, None, u'Restart Show')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __restart.name() : __restart
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_ShowInfoKiosk', CT_ShowInfoKiosk)


# Complex type CT_Color with content type ELEMENT_ONLY
class CT_Color (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Color')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Color_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Color_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Color_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Color_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Color_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Color_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __sysClr.name() : __sysClr,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr,
        __scrgbClr.name() : __scrgbClr,
        __hslClr.name() : __hslClr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Color', CT_Color)


# Complex type CT_AlphaBiLevelEffect with content type EMPTY
class CT_AlphaBiLevelEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaBiLevelEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute thresh uses Python identifier thresh
    __thresh = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'thresh'), 'thresh', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaBiLevelEffect_thresh', ST_PositiveFixedPercentage, required=True)
    
    thresh = property(__thresh.value, __thresh.set, None, u'Threshold')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __thresh.name() : __thresh
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaBiLevelEffect', CT_AlphaBiLevelEffect)


# Complex type CT_SlideMasterTextStyles with content type ELEMENT_ONLY
class CT_SlideMasterTextStyles (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideMasterTextStyles')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMasterTextStyles_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}titleStyle uses Python identifier titleStyle
    __titleStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'titleStyle'), 'titleStyle', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMasterTextStyles_httpschemas_openxmlformats_orgpresentationml2006maintitleStyle', False)

    
    titleStyle = property(__titleStyle.value, __titleStyle.set, None, u'Slide Master Title Text Style')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}bodyStyle uses Python identifier bodyStyle
    __bodyStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'bodyStyle'), 'bodyStyle', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMasterTextStyles_httpschemas_openxmlformats_orgpresentationml2006mainbodyStyle', False)

    
    bodyStyle = property(__bodyStyle.value, __bodyStyle.set, None, u'Slide Master Body Text Style')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}otherStyle uses Python identifier otherStyle
    __otherStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'otherStyle'), 'otherStyle', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMasterTextStyles_httpschemas_openxmlformats_orgpresentationml2006mainotherStyle', False)

    
    otherStyle = property(__otherStyle.value, __otherStyle.set, None, u'Slide Master Other Text Style')


    _ElementMap = {
        __extLst.name() : __extLst,
        __titleStyle.name() : __titleStyle,
        __bodyStyle.name() : __bodyStyle,
        __otherStyle.name() : __otherStyle
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideMasterTextStyles', CT_SlideMasterTextStyles)


# Complex type CT_EffectStyleItem with content type ELEMENT_ONLY
class CT_EffectStyleItem (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EffectStyleItem')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sp3d uses Python identifier sp3d
    __sp3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), 'sp3d', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectStyleItem_httpschemas_openxmlformats_orgdrawingml2006mainsp3d', False)

    
    sp3d = property(__sp3d.value, __sp3d.set, None, u'3D properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectStyleItem_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scene3d uses Python identifier scene3d
    __scene3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), 'scene3d', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectStyleItem_httpschemas_openxmlformats_orgdrawingml2006mainscene3d', False)

    
    scene3d = property(__scene3d.value, __scene3d.set, None, u'3D Scene Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectStyleItem_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')


    _ElementMap = {
        __sp3d.name() : __sp3d,
        __effectLst.name() : __effectLst,
        __scene3d.name() : __scene3d,
        __effectDag.name() : __effectDag
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EffectStyleItem', CT_EffectStyleItem)


# Complex type CT_IndexRange with content type EMPTY
class CT_IndexRange (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_IndexRange')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute end uses Python identifier end
    __end = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'end'), 'end', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_IndexRange_end', ST_Index, required=True)
    
    end = property(__end.value, __end.set, None, u'End')

    
    # Attribute st uses Python identifier st
    __st = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'st'), 'st', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_IndexRange_st', ST_Index, required=True)
    
    st = property(__st.value, __st.set, None, u'Start')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __end.name() : __end,
        __st.name() : __st
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_IndexRange', CT_IndexRange)


# Complex type CT_ChildMax with content type EMPTY
class CT_ChildMax (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ChildMax')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ChildMax_val', ST_NodeCount, unicode_default=u'-1')
    
    val = property(__val.value, __val.set, None, u'Maximum Children Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ChildMax', CT_ChildMax)


# Complex type CT_GrayscaleTransform with content type EMPTY
class CT_GrayscaleTransform (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GrayscaleTransform')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GrayscaleTransform', CT_GrayscaleTransform)


# Complex type CT_LineJoinRound with content type EMPTY
class CT_LineJoinRound (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LineJoinRound')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LineJoinRound', CT_LineJoinRound)


# Complex type CT_ShapeProperties with content type ELEMENT_ONLY
class CT_ShapeProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ShapeProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scene3d uses Python identifier scene3d
    __scene3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), 'scene3d', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainscene3d', False)

    
    scene3d = property(__scene3d.value, __scene3d.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ln uses Python identifier ln
    __ln = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), 'ln', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainln', False)

    
    ln = property(__ln.value, __ln.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sp3d uses Python identifier sp3d
    __sp3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), 'sp3d', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainsp3d', False)

    
    sp3d = property(__sp3d.value, __sp3d.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}custGeom uses Python identifier custGeom
    __custGeom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'custGeom'), 'custGeom', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maincustGeom', False)

    
    custGeom = property(__custGeom.value, __custGeom.set, None, u'Custom geometry')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstGeom uses Python identifier prstGeom
    __prstGeom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstGeom'), 'prstGeom', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainprstGeom', False)

    
    prstGeom = property(__prstGeom.value, __prstGeom.set, None, u'Preset geometry')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}xfrm uses Python identifier xfrm
    __xfrm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), 'xfrm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainxfrm', False)

    
    xfrm = property(__xfrm.value, __xfrm.set, None, u'2D Transform for Individual Objects')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Attribute bwMode uses Python identifier bwMode
    __bwMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bwMode'), 'bwMode', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_bwMode', ST_BlackWhiteMode)
    
    bwMode = property(__bwMode.value, __bwMode.set, None, u'Black and White Mode')


    _ElementMap = {
        __scene3d.name() : __scene3d,
        __blipFill.name() : __blipFill,
        __effectDag.name() : __effectDag,
        __gradFill.name() : __gradFill,
        __noFill.name() : __noFill,
        __solidFill.name() : __solidFill,
        __ln.name() : __ln,
        __effectLst.name() : __effectLst,
        __sp3d.name() : __sp3d,
        __extLst.name() : __extLst,
        __custGeom.name() : __custGeom,
        __prstGeom.name() : __prstGeom,
        __pattFill.name() : __pattFill,
        __xfrm.name() : __xfrm,
        __grpFill.name() : __grpFill
    }
    _AttributeMap = {
        __bwMode.name() : __bwMode
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ShapeProperties', CT_ShapeProperties)


# Complex type CT_Choose with content type ELEMENT_ONLY
class CT_Choose (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Choose')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}else uses Python identifier else_
    __else = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'else'), 'else_', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Choose_httpschemas_openxmlformats_orgdrawingml2006diagramelse', False)

    
    else_ = property(__else.value, __else.set, None, u'Else')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}if uses Python identifier if_
    __if = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'if'), 'if_', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Choose_httpschemas_openxmlformats_orgdrawingml2006diagramif', True)

    
    if_ = property(__if.value, __if.set, None, u'If')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Choose_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __else.name() : __else,
        __if.name() : __if
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Choose', CT_Choose)


# Complex type CT_BackgroundFormatting with content type ELEMENT_ONLY
class CT_BackgroundFormatting (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BackgroundFormatting')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)


    _ElementMap = {
        __noFill.name() : __noFill,
        __pattFill.name() : __pattFill,
        __solidFill.name() : __solidFill,
        __grpFill.name() : __grpFill,
        __effectLst.name() : __effectLst,
        __gradFill.name() : __gradFill,
        __effectDag.name() : __effectDag,
        __blipFill.name() : __blipFill
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BackgroundFormatting', CT_BackgroundFormatting)


# Complex type CT_StyleMatrixReference with content type ELEMENT_ONLY
class CT_StyleMatrixReference (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_StyleMatrixReference')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrixReference_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrixReference_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrixReference_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrixReference_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrixReference_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrixReference_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Attribute idx uses Python identifier idx
    __idx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'idx'), 'idx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrixReference_idx', ST_StyleMatrixColumnIndex, required=True)
    
    idx = property(__idx.value, __idx.set, None, u'Style Matrix Index')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __hslClr.name() : __hslClr,
        __scrgbClr.name() : __scrgbClr,
        __sysClr.name() : __sysClr,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr
    }
    _AttributeMap = {
        __idx.name() : __idx
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_StyleMatrixReference', CT_StyleMatrixReference)


# Complex type CT_LinearShadeProperties with content type EMPTY
class CT_LinearShadeProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LinearShadeProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute scaled uses Python identifier scaled
    __scaled = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'scaled'), 'scaled', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LinearShadeProperties_scaled', pyxb.binding.datatypes.boolean)
    
    scaled = property(__scaled.value, __scaled.set, None, u'Scaled')

    
    # Attribute ang uses Python identifier ang
    __ang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ang'), 'ang', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LinearShadeProperties_ang', ST_PositiveFixedAngle)
    
    ang = property(__ang.value, __ang.set, None, u'Angle')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __scaled.name() : __scaled,
        __ang.name() : __ang
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LinearShadeProperties', CT_LinearShadeProperties)


# Complex type CT_TextNoAutofit with content type EMPTY
class CT_TextNoAutofit (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextNoAutofit')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextNoAutofit', CT_TextNoAutofit)


# Complex type CT_ColorMapping with content type ELEMENT_ONLY
class CT_ColorMapping (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorMapping')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute tx2 uses Python identifier tx2
    __tx2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tx2'), 'tx2', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_tx2', ST_ColorSchemeIndex, required=True)
    
    tx2 = property(__tx2.value, __tx2.set, None, u'Text 2')

    
    # Attribute accent4 uses Python identifier accent4
    __accent4 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accent4'), 'accent4', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_accent4', ST_ColorSchemeIndex, required=True)
    
    accent4 = property(__accent4.value, __accent4.set, None, u'Accent 4')

    
    # Attribute accent6 uses Python identifier accent6
    __accent6 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accent6'), 'accent6', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_accent6', ST_ColorSchemeIndex, required=True)
    
    accent6 = property(__accent6.value, __accent6.set, None, u'Accent 6')

    
    # Attribute tx1 uses Python identifier tx1
    __tx1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tx1'), 'tx1', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_tx1', ST_ColorSchemeIndex, required=True)
    
    tx1 = property(__tx1.value, __tx1.set, None, u'Text 1')

    
    # Attribute bg1 uses Python identifier bg1
    __bg1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bg1'), 'bg1', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_bg1', ST_ColorSchemeIndex, required=True)
    
    bg1 = property(__bg1.value, __bg1.set, None, u'Background 1')

    
    # Attribute hlink uses Python identifier hlink
    __hlink = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hlink'), 'hlink', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_hlink', ST_ColorSchemeIndex, required=True)
    
    hlink = property(__hlink.value, __hlink.set, None, u'Hyperlink')

    
    # Attribute accent2 uses Python identifier accent2
    __accent2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accent2'), 'accent2', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_accent2', ST_ColorSchemeIndex, required=True)
    
    accent2 = property(__accent2.value, __accent2.set, None, u'Accent 2')

    
    # Attribute folHlink uses Python identifier folHlink
    __folHlink = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'folHlink'), 'folHlink', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_folHlink', ST_ColorSchemeIndex, required=True)
    
    folHlink = property(__folHlink.value, __folHlink.set, None, u'Followed Hyperlink')

    
    # Attribute accent1 uses Python identifier accent1
    __accent1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accent1'), 'accent1', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_accent1', ST_ColorSchemeIndex, required=True)
    
    accent1 = property(__accent1.value, __accent1.set, None, u'Accent 1')

    
    # Attribute bg2 uses Python identifier bg2
    __bg2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bg2'), 'bg2', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_bg2', ST_ColorSchemeIndex, required=True)
    
    bg2 = property(__bg2.value, __bg2.set, None, u'Background 2')

    
    # Attribute accent3 uses Python identifier accent3
    __accent3 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accent3'), 'accent3', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_accent3', ST_ColorSchemeIndex, required=True)
    
    accent3 = property(__accent3.value, __accent3.set, None, u'Accent 3')

    
    # Attribute accent5 uses Python identifier accent5
    __accent5 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accent5'), 'accent5', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_accent5', ST_ColorSchemeIndex, required=True)
    
    accent5 = property(__accent5.value, __accent5.set, None, u'Accent 5')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __tx2.name() : __tx2,
        __accent4.name() : __accent4,
        __accent6.name() : __accent6,
        __tx1.name() : __tx1,
        __bg1.name() : __bg1,
        __hlink.name() : __hlink,
        __accent2.name() : __accent2,
        __folHlink.name() : __folHlink,
        __accent1.name() : __accent1,
        __bg2.name() : __bg2,
        __accent3.name() : __accent3,
        __accent5.name() : __accent5
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorMapping', CT_ColorMapping)


# Complex type CT_FontCollection with content type ELEMENT_ONLY
class CT_FontCollection (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FontCollection')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontCollection_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}latin uses Python identifier latin
    __latin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'latin'), 'latin', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontCollection_httpschemas_openxmlformats_orgdrawingml2006mainlatin', False)

    
    latin = property(__latin.value, __latin.set, None, u'Latin Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ea uses Python identifier ea
    __ea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ea'), 'ea', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontCollection_httpschemas_openxmlformats_orgdrawingml2006mainea', False)

    
    ea = property(__ea.value, __ea.set, None, u'East Asian Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}font uses Python identifier font
    __font = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'font'), 'font', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontCollection_httpschemas_openxmlformats_orgdrawingml2006mainfont', True)

    
    font = property(__font.value, __font.set, None, u'Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cs uses Python identifier cs
    __cs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cs'), 'cs', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontCollection_httpschemas_openxmlformats_orgdrawingml2006maincs', False)

    
    cs = property(__cs.value, __cs.set, None, u'Complex Script Font')


    _ElementMap = {
        __extLst.name() : __extLst,
        __latin.name() : __latin,
        __ea.name() : __ea,
        __font.name() : __font,
        __cs.name() : __cs
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FontCollection', CT_FontCollection)


# Complex type CT_AudioCD with content type ELEMENT_ONLY
class CT_AudioCD (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AudioCD')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioCD_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}st uses Python identifier st
    __st = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'st'), 'st', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioCD_httpschemas_openxmlformats_orgdrawingml2006mainst', False)

    
    st = property(__st.value, __st.set, None, u'Audio Start Time')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}end uses Python identifier end
    __end = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'end'), 'end', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioCD_httpschemas_openxmlformats_orgdrawingml2006mainend', False)

    
    end = property(__end.value, __end.set, None, u'Audio End Time')


    _ElementMap = {
        __extLst.name() : __extLst,
        __st.name() : __st,
        __end.name() : __end
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AudioCD', CT_AudioCD)


# Complex type CT_TextBulletSizePoint with content type EMPTY
class CT_TextBulletSizePoint (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBulletSizePoint')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBulletSizePoint_val', ST_TextFontSize)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBulletSizePoint', CT_TextBulletSizePoint)


# Complex type CT_TextUnderlineLineFollowText with content type EMPTY
class CT_TextUnderlineLineFollowText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextUnderlineLineFollowText')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextUnderlineLineFollowText', CT_TextUnderlineLineFollowText)


# Complex type CT_TextTabStopList with content type ELEMENT_ONLY
class CT_TextTabStopList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextTabStopList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tab uses Python identifier tab
    __tab = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tab'), 'tab', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextTabStopList_httpschemas_openxmlformats_orgdrawingml2006maintab', True)

    
    tab = property(__tab.value, __tab.set, None, u'Tab Stop')


    _ElementMap = {
        __tab.name() : __tab
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextTabStopList', CT_TextTabStopList)


# Complex type CT_SDCategories with content type ELEMENT_ONLY
class CT_SDCategories (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_SDCategories')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}cat uses Python identifier cat
    __cat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'cat'), 'cat', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SDCategories_httpschemas_openxmlformats_orgdrawingml2006diagramcat', True)

    
    cat = property(__cat.value, __cat.set, None, u'Category')


    _ElementMap = {
        __cat.name() : __cat
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_SDCategories', CT_SDCategories)


# Complex type CT_InnerShadowEffect with content type ELEMENT_ONLY
class CT_InnerShadowEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_InnerShadowEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Attribute blurRad uses Python identifier blurRad
    __blurRad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blurRad'), 'blurRad', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_blurRad', ST_PositiveCoordinate, unicode_default=u'0')
    
    blurRad = property(__blurRad.value, __blurRad.set, None, u'Blur Radius')

    
    # Attribute dist uses Python identifier dist
    __dist = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dist'), 'dist', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_dist', ST_PositiveCoordinate, unicode_default=u'0')
    
    dist = property(__dist.value, __dist.set, None, u'Distance')

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_dir', ST_PositiveFixedAngle, unicode_default=u'0')
    
    dir = property(__dir.value, __dir.set, None, u'Direction')


    _ElementMap = {
        __schemeClr.name() : __schemeClr,
        __srgbClr.name() : __srgbClr,
        __prstClr.name() : __prstClr,
        __scrgbClr.name() : __scrgbClr,
        __hslClr.name() : __hslClr,
        __sysClr.name() : __sysClr
    }
    _AttributeMap = {
        __blurRad.name() : __blurRad,
        __dist.name() : __dist,
        __dir.name() : __dir
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_InnerShadowEffect', CT_InnerShadowEffect)


# Complex type CT_InverseGammaTransform with content type EMPTY
class CT_InverseGammaTransform (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_InverseGammaTransform')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_InverseGammaTransform', CT_InverseGammaTransform)


# Complex type CT_Angle with content type EMPTY
class CT_Angle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Angle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Angle_val', ST_Angle, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Angle', CT_Angle)


# Complex type CT_TLShapeTargetElement with content type ELEMENT_ONLY
class CT_TLShapeTargetElement (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLShapeTargetElement')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}bg uses Python identifier bg
    __bg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'bg'), 'bg', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLShapeTargetElement_httpschemas_openxmlformats_orgpresentationml2006mainbg', False)

    
    bg = property(__bg.value, __bg.set, None, u'Background')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}subSp uses Python identifier subSp
    __subSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'subSp'), 'subSp', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLShapeTargetElement_httpschemas_openxmlformats_orgpresentationml2006mainsubSp', False)

    
    subSp = property(__subSp.value, __subSp.set, None, u'Subshape')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}oleChartEl uses Python identifier oleChartEl
    __oleChartEl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'oleChartEl'), 'oleChartEl', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLShapeTargetElement_httpschemas_openxmlformats_orgpresentationml2006mainoleChartEl', False)

    
    oleChartEl = property(__oleChartEl.value, __oleChartEl.set, None, u'Embedded Chart Element')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}txEl uses Python identifier txEl
    __txEl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'txEl'), 'txEl', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLShapeTargetElement_httpschemas_openxmlformats_orgpresentationml2006maintxEl', False)

    
    txEl = property(__txEl.value, __txEl.set, None, u'Text Element')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}graphicEl uses Python identifier graphicEl
    __graphicEl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'graphicEl'), 'graphicEl', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLShapeTargetElement_httpschemas_openxmlformats_orgpresentationml2006maingraphicEl', False)

    
    graphicEl = property(__graphicEl.value, __graphicEl.set, None, u'Graphic Element')

    
    # Attribute spid uses Python identifier spid
    __spid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spid'), 'spid', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLShapeTargetElement_spid', ST_ShapeID, required=True)
    
    spid = property(__spid.value, __spid.set, None, u'Shape ID')


    _ElementMap = {
        __bg.name() : __bg,
        __subSp.name() : __subSp,
        __oleChartEl.name() : __oleChartEl,
        __txEl.name() : __txEl,
        __graphicEl.name() : __graphicEl
    }
    _AttributeMap = {
        __spid.name() : __spid
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLShapeTargetElement', CT_TLShapeTargetElement)


# Complex type CT_AnimationDgmElement with content type EMPTY
class CT_AnimationDgmElement (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AnimationDgmElement')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute bldStep uses Python identifier bldStep
    __bldStep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bldStep'), 'bldStep', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationDgmElement_bldStep', ST_DgmBuildStep, unicode_default=u'sp')
    
    bldStep = property(__bldStep.value, __bldStep.set, None, u'Animation Build Step')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationDgmElement_id', _s.ST_Guid, unicode_default=u'{00000000-0000-0000-0000-000000000000}')
    
    id = property(__id.value, __id.set, None, u'Identifier')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __bldStep.name() : __bldStep,
        __id.name() : __id
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AnimationDgmElement', CT_AnimationDgmElement)


# Complex type CT_EmptyElement with content type EMPTY
class CT_EmptyElement (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EmptyElement')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EmptyElement', CT_EmptyElement)


# Complex type CT_TintEffect with content type EMPTY
class CT_TintEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TintEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute hue uses Python identifier hue
    __hue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TintEffect_hue', ST_PositiveFixedAngle, unicode_default=u'0')
    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Attribute amt uses Python identifier amt
    __amt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'amt'), 'amt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TintEffect_amt', ST_FixedPercentage, unicode_default=u'0%')
    
    amt = property(__amt.value, __amt.set, None, u'Amount')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __hue.name() : __hue,
        __amt.name() : __amt
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TintEffect', CT_TintEffect)


# Complex type CT_TLGraphicalObjectBuild with content type ELEMENT_ONLY
class CT_TLGraphicalObjectBuild (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLGraphicalObjectBuild')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}bldAsOne uses Python identifier bldAsOne
    __bldAsOne = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'bldAsOne'), 'bldAsOne', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLGraphicalObjectBuild_httpschemas_openxmlformats_orgpresentationml2006mainbldAsOne', False)

    
    bldAsOne = property(__bldAsOne.value, __bldAsOne.set, None, u'Build As One')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}bldSub uses Python identifier bldSub
    __bldSub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'bldSub'), 'bldSub', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLGraphicalObjectBuild_httpschemas_openxmlformats_orgpresentationml2006mainbldSub', False)

    
    bldSub = property(__bldSub.value, __bldSub.set, None, u'Build Sub Elements')

    
    # Attribute uiExpand uses Python identifier uiExpand
    __uiExpand = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uiExpand'), 'uiExpand', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLGraphicalObjectBuild_uiExpand', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    uiExpand = property(__uiExpand.value, __uiExpand.set, None, u'Expand UI')

    
    # Attribute grpId uses Python identifier grpId
    __grpId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'grpId'), 'grpId', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLGraphicalObjectBuild_grpId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    grpId = property(__grpId.value, __grpId.set, None, u'Group ID')

    
    # Attribute spid uses Python identifier spid
    __spid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spid'), 'spid', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLGraphicalObjectBuild_spid', ST_ShapeID, required=True)
    
    spid = property(__spid.value, __spid.set, None, u'Shape ID')


    _ElementMap = {
        __bldAsOne.name() : __bldAsOne,
        __bldSub.name() : __bldSub
    }
    _AttributeMap = {
        __uiExpand.name() : __uiExpand,
        __grpId.name() : __grpId,
        __spid.name() : __spid
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLGraphicalObjectBuild', CT_TLGraphicalObjectBuild)


# Complex type CT_AlphaModulateFixedEffect with content type EMPTY
class CT_AlphaModulateFixedEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaModulateFixedEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute amt uses Python identifier amt
    __amt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'amt'), 'amt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaModulateFixedEffect_amt', ST_PositivePercentage, unicode_default=u'100%')
    
    amt = property(__amt.value, __amt.set, None, u'Amount')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __amt.name() : __amt
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaModulateFixedEffect', CT_AlphaModulateFixedEffect)


# Complex type CT_GvmlGroupShape with content type ELEMENT_ONLY
class CT_GvmlGroupShape (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlGroupShape')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sp uses Python identifier sp
    __sp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sp'), 'sp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006mainsp', True)

    
    sp = property(__sp.value, __sp.set, None, u'Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cxnSp uses Python identifier cxnSp
    __cxnSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnSp'), 'cxnSp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006maincxnSp', True)

    
    cxnSp = property(__cxnSp.value, __cxnSp.set, None, u'Connection Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}nvGrpSpPr uses Python identifier nvGrpSpPr
    __nvGrpSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'nvGrpSpPr'), 'nvGrpSpPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006mainnvGrpSpPr', False)

    
    nvGrpSpPr = property(__nvGrpSpPr.value, __nvGrpSpPr.set, None, u'Non-Visual Properties for a Group Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pic uses Python identifier pic
    __pic = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pic'), 'pic', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006mainpic', True)

    
    pic = property(__pic.value, __pic.set, None, u'Picture')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpSpPr uses Python identifier grpSpPr
    __grpSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSpPr'), 'grpSpPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006maingrpSpPr', False)

    
    grpSpPr = property(__grpSpPr.value, __grpSpPr.set, None, u'Visual Group Shape Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}graphicFrame uses Python identifier graphicFrame
    __graphicFrame = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicFrame'), 'graphicFrame', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006maingraphicFrame', True)

    
    graphicFrame = property(__graphicFrame.value, __graphicFrame.set, None, u'Graphic Frame')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpSp uses Python identifier grpSp
    __grpSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSp'), 'grpSp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006maingrpSp', True)

    
    grpSp = property(__grpSp.value, __grpSp.set, None, u'Group shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}txSp uses Python identifier txSp
    __txSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'txSp'), 'txSp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006maintxSp', True)

    
    txSp = property(__txSp.value, __txSp.set, None, u'Text shape')


    _ElementMap = {
        __sp.name() : __sp,
        __cxnSp.name() : __cxnSp,
        __nvGrpSpPr.name() : __nvGrpSpPr,
        __pic.name() : __pic,
        __extLst.name() : __extLst,
        __grpSpPr.name() : __grpSpPr,
        __graphicFrame.name() : __graphicFrame,
        __grpSp.name() : __grpSp,
        __txSp.name() : __txSp
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlGroupShape', CT_GvmlGroupShape)


# Complex type CT_GraphicalObjectFrameLocking with content type ELEMENT_ONLY
class CT_GraphicalObjectFrameLocking (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GraphicalObjectFrameLocking')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectFrameLocking_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute noMove uses Python identifier noMove
    __noMove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noMove'), 'noMove', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectFrameLocking_noMove', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noMove = property(__noMove.value, __noMove.set, None, u'Disallow Shape Movement')

    
    # Attribute noSelect uses Python identifier noSelect
    __noSelect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noSelect'), 'noSelect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectFrameLocking_noSelect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noSelect = property(__noSelect.value, __noSelect.set, None, u'Disallow Shape Selection')

    
    # Attribute noChangeAspect uses Python identifier noChangeAspect
    __noChangeAspect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeAspect'), 'noChangeAspect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectFrameLocking_noChangeAspect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeAspect = property(__noChangeAspect.value, __noChangeAspect.set, None, u'Disallow Aspect Ratio Change')

    
    # Attribute noResize uses Python identifier noResize
    __noResize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noResize'), 'noResize', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectFrameLocking_noResize', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noResize = property(__noResize.value, __noResize.set, None, u'Disallow Shape Resize')

    
    # Attribute noGrp uses Python identifier noGrp
    __noGrp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noGrp'), 'noGrp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectFrameLocking_noGrp', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noGrp = property(__noGrp.value, __noGrp.set, None, u'Disallow Shape Grouping')

    
    # Attribute noDrilldown uses Python identifier noDrilldown
    __noDrilldown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noDrilldown'), 'noDrilldown', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectFrameLocking_noDrilldown', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noDrilldown = property(__noDrilldown.value, __noDrilldown.set, None, u'Disallow Selection of Child Shapes')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __noMove.name() : __noMove,
        __noSelect.name() : __noSelect,
        __noChangeAspect.name() : __noChangeAspect,
        __noResize.name() : __noResize,
        __noGrp.name() : __noGrp,
        __noDrilldown.name() : __noDrilldown
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GraphicalObjectFrameLocking', CT_GraphicalObjectFrameLocking)


# Complex type CT_Control with content type ELEMENT_ONLY
class CT_Control (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_Control')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}pic uses Python identifier pic
    __pic = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'pic'), 'pic', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Control_httpschemas_openxmlformats_orgpresentationml2006mainpic', False)

    
    pic = property(__pic.value, __pic.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Control_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Control_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Embedded Object Name')

    
    # Attribute showAsIcon uses Python identifier showAsIcon
    __showAsIcon = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showAsIcon'), 'showAsIcon', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Control_showAsIcon', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showAsIcon = property(__showAsIcon.value, __showAsIcon.set, None, u'Show Embedded Object As Icon')

    
    # Attribute imgH uses Python identifier imgH
    __imgH = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'imgH'), 'imgH', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Control_imgH', ST_PositiveCoordinate32)
    
    imgH = property(__imgH.value, __imgH.set, None, u'Image Height')

    
    # Attribute imgW uses Python identifier imgW
    __imgW = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'imgW'), 'imgW', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Control_imgW', ST_PositiveCoordinate32)
    
    imgW = property(__imgW.value, __imgW.set, None, u'Image Width')

    
    # Attribute spid uses Python identifier spid
    __spid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spid'), 'spid', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Control_spid', ST_ShapeID, required=True)
    
    spid = property(__spid.value, __spid.set, None, u'Embedded object Shape ID')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Control_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        __pic.name() : __pic,
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __name.name() : __name,
        __showAsIcon.name() : __showAsIcon,
        __imgH.name() : __imgH,
        __imgW.name() : __imgW,
        __spid.name() : __spid,
        __id.name() : __id
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_Control', CT_Control)


# Complex type CT_GammaTransform with content type EMPTY
class CT_GammaTransform (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GammaTransform')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GammaTransform', CT_GammaTransform)


# Complex type CT_Transform2D with content type ELEMENT_ONLY
class CT_Transform2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Transform2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ext uses Python identifier ext
    __ext = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ext'), 'ext', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Transform2D_httpschemas_openxmlformats_orgdrawingml2006mainext', False)

    
    ext = property(__ext.value, __ext.set, None, u'Extents')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}off uses Python identifier off
    __off = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'off'), 'off', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Transform2D_httpschemas_openxmlformats_orgdrawingml2006mainoff', False)

    
    off = property(__off.value, __off.set, None, u'Offset')

    
    # Attribute flipV uses Python identifier flipV
    __flipV = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'flipV'), 'flipV', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Transform2D_flipV', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    flipV = property(__flipV.value, __flipV.set, None, u'Vertical Flip')

    
    # Attribute rot uses Python identifier rot
    __rot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rot'), 'rot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Transform2D_rot', ST_Angle, unicode_default=u'0')
    
    rot = property(__rot.value, __rot.set, None, u'Rotation')

    
    # Attribute flipH uses Python identifier flipH
    __flipH = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'flipH'), 'flipH', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Transform2D_flipH', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    flipH = property(__flipH.value, __flipH.set, None, u'Horizontal Flip')


    _ElementMap = {
        __ext.name() : __ext,
        __off.name() : __off
    }
    _AttributeMap = {
        __flipV.name() : __flipV,
        __rot.name() : __rot,
        __flipH.name() : __flipH
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Transform2D', CT_Transform2D)


# Complex type CT_TextProps with content type ELEMENT_ONLY
class CT_TextProps (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_TextProps')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sp3d uses Python identifier sp3d
    __sp3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), 'sp3d', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_TextProps_httpschemas_openxmlformats_orgdrawingml2006mainsp3d', False)

    
    sp3d = property(__sp3d.value, __sp3d.set, None, u'Apply 3D shape properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}flatTx uses Python identifier flatTx
    __flatTx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'flatTx'), 'flatTx', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_TextProps_httpschemas_openxmlformats_orgdrawingml2006mainflatTx', False)

    
    flatTx = property(__flatTx.value, __flatTx.set, None, u'No text in 3D scene')


    _ElementMap = {
        __sp3d.name() : __sp3d,
        __flatTx.name() : __flatTx
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_TextProps', CT_TextProps)


# Complex type CT_TLAnimVariantFloatVal with content type EMPTY
class CT_TLAnimVariantFloatVal (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLAnimVariantFloatVal')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimVariantFloatVal_val', pyxb.binding.datatypes.float, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLAnimVariantFloatVal', CT_TLAnimVariantFloatVal)


# Complex type CT_TableCellProperties with content type ELEMENT_ONLY
class CT_TableCellProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableCellProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cell3D uses Python identifier cell3D
    __cell3D = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cell3D'), 'cell3D', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006maincell3D', False)

    
    cell3D = property(__cell3D.value, __cell3D.set, None, u'Cell 3-D')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnR uses Python identifier lnR
    __lnR = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnR'), 'lnR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainlnR', False)

    
    lnR = property(__lnR.value, __lnR.set, None, u'Right Border Line Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnT uses Python identifier lnT
    __lnT = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnT'), 'lnT', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainlnT', False)

    
    lnT = property(__lnT.value, __lnT.set, None, u'Top Border Line Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}headers uses Python identifier headers
    __headers = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'headers'), 'headers', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainheaders', False)

    
    headers = property(__headers.value, __headers.set, None, u'Header Cells Associated With Table Cell')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnB uses Python identifier lnB
    __lnB = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnB'), 'lnB', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainlnB', False)

    
    lnB = property(__lnB.value, __lnB.set, None, u'Bottom Border Line Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnTlToBr uses Python identifier lnTlToBr
    __lnTlToBr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnTlToBr'), 'lnTlToBr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainlnTlToBr', False)

    
    lnTlToBr = property(__lnTlToBr.value, __lnTlToBr.set, None, u'Top-Left to Bottom-Right Border Line Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnBlToTr uses Python identifier lnBlToTr
    __lnBlToTr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnBlToTr'), 'lnBlToTr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainlnBlToTr', False)

    
    lnBlToTr = property(__lnBlToTr.value, __lnBlToTr.set, None, u'Bottom-Left to Top-Right Border Line Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnL uses Python identifier lnL
    __lnL = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnL'), 'lnL', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainlnL', False)

    
    lnL = property(__lnL.value, __lnL.set, None, u'Left Border Line Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Attribute marB uses Python identifier marB
    __marB = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'marB'), 'marB', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_marB', ST_Coordinate32, unicode_default=u'45720')
    
    marB = property(__marB.value, __marB.set, None, u'Bottom Margin')

    
    # Attribute anchor uses Python identifier anchor
    __anchor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'anchor'), 'anchor', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_anchor', ST_TextAnchoringType, unicode_default=u't')
    
    anchor = property(__anchor.value, __anchor.set, None, u'Anchor')

    
    # Attribute marL uses Python identifier marL
    __marL = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'marL'), 'marL', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_marL', ST_Coordinate32, unicode_default=u'91440')
    
    marL = property(__marL.value, __marL.set, None, u'Left Margin')

    
    # Attribute anchorCtr uses Python identifier anchorCtr
    __anchorCtr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'anchorCtr'), 'anchorCtr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_anchorCtr', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    anchorCtr = property(__anchorCtr.value, __anchorCtr.set, None, u'Anchor Center')

    
    # Attribute marR uses Python identifier marR
    __marR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'marR'), 'marR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_marR', ST_Coordinate32, unicode_default=u'91440')
    
    marR = property(__marR.value, __marR.set, None, u'Right Margin')

    
    # Attribute vert uses Python identifier vert
    __vert = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vert'), 'vert', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_vert', ST_TextVerticalType, unicode_default=u'horz')
    
    vert = property(__vert.value, __vert.set, None, u'Text Direction')

    
    # Attribute horzOverflow uses Python identifier horzOverflow
    __horzOverflow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'horzOverflow'), 'horzOverflow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_horzOverflow', ST_TextHorzOverflowType, unicode_default=u'clip')
    
    horzOverflow = property(__horzOverflow.value, __horzOverflow.set, None, u'Horizontal Overflow')

    
    # Attribute marT uses Python identifier marT
    __marT = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'marT'), 'marT', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_marT', ST_Coordinate32, unicode_default=u'45720')
    
    marT = property(__marT.value, __marT.set, None, u'Top Margin')


    _ElementMap = {
        __grpFill.name() : __grpFill,
        __cell3D.name() : __cell3D,
        __lnR.name() : __lnR,
        __gradFill.name() : __gradFill,
        __extLst.name() : __extLst,
        __lnT.name() : __lnT,
        __headers.name() : __headers,
        __pattFill.name() : __pattFill,
        __lnB.name() : __lnB,
        __lnTlToBr.name() : __lnTlToBr,
        __blipFill.name() : __blipFill,
        __noFill.name() : __noFill,
        __lnBlToTr.name() : __lnBlToTr,
        __lnL.name() : __lnL,
        __solidFill.name() : __solidFill
    }
    _AttributeMap = {
        __marB.name() : __marB,
        __anchor.name() : __anchor,
        __marL.name() : __marL,
        __anchorCtr.name() : __anchorCtr,
        __marR.name() : __marR,
        __vert.name() : __vert,
        __horzOverflow.name() : __horzOverflow,
        __marT.name() : __marT
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableCellProperties', CT_TableCellProperties)


# Complex type CT_Constraint with content type ELEMENT_ONLY
class CT_Constraint (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Constraint')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute ptType uses Python identifier ptType
    __ptType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ptType'), 'ptType', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_ptType', ST_ElementType, unicode_default=u'all')
    
    ptType = property(__ptType.value, __ptType.set, None, u'Data Point Type')

    
    # Attribute forName uses Python identifier forName
    __forName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'forName'), 'forName', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_forName', pyxb.binding.datatypes.string, unicode_default=u'')
    
    forName = property(__forName.value, __forName.set, None, u'For Name')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_val', pyxb.binding.datatypes.double, unicode_default=u'0')
    
    val = property(__val.value, __val.set, None, u'Value')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_type', ST_ConstraintType, required=True)
    
    type = property(__type.value, __type.set, None, u'Constraint Type')

    
    # Attribute fact uses Python identifier fact
    __fact = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fact'), 'fact', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_fact', pyxb.binding.datatypes.double, unicode_default=u'1')
    
    fact = property(__fact.value, __fact.set, None, u'Factor')

    
    # Attribute op uses Python identifier op
    __op = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'op'), 'op', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_op', ST_BoolOperator, unicode_default=u'none')
    
    op = property(__op.value, __op.set, None, u'Operator')

    
    # Attribute for uses Python identifier for_
    __for = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'for'), 'for_', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_for', ST_ConstraintRelationship, unicode_default=u'self')
    
    for_ = property(__for.value, __for.set, None, u'For')

    
    # Attribute refType uses Python identifier refType
    __refType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refType'), 'refType', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_refType', ST_ConstraintType, unicode_default=u'none')
    
    refType = property(__refType.value, __refType.set, None, u'Reference Type')

    
    # Attribute refForName uses Python identifier refForName
    __refForName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refForName'), 'refForName', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_refForName', pyxb.binding.datatypes.string, unicode_default=u'')
    
    refForName = property(__refForName.value, __refForName.set, None, u'Reference For Name')

    
    # Attribute refPtType uses Python identifier refPtType
    __refPtType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refPtType'), 'refPtType', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_refPtType', ST_ElementType, unicode_default=u'all')
    
    refPtType = property(__refPtType.value, __refPtType.set, None, u'Reference Point Type')

    
    # Attribute refFor uses Python identifier refFor
    __refFor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refFor'), 'refFor', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_refFor', ST_ConstraintRelationship, unicode_default=u'self')
    
    refFor = property(__refFor.value, __refFor.set, None, u'Reference For')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __ptType.name() : __ptType,
        __forName.name() : __forName,
        __val.name() : __val,
        __type.name() : __type,
        __fact.name() : __fact,
        __op.name() : __op,
        __for.name() : __for,
        __refType.name() : __refType,
        __refForName.name() : __refForName,
        __refPtType.name() : __refPtType,
        __refFor.name() : __refFor
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Constraint', CT_Constraint)


# Complex type CT_Categories with content type ELEMENT_ONLY
class CT_Categories (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Categories')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}cat uses Python identifier cat
    __cat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'cat'), 'cat', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Categories_httpschemas_openxmlformats_orgdrawingml2006diagramcat', True)

    
    cat = property(__cat.value, __cat.set, None, u'Category')


    _ElementMap = {
        __cat.name() : __cat
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Categories', CT_Categories)


# Complex type CT_EffectList with content type ELEMENT_ONLY
class CT_EffectList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EffectList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}softEdge uses Python identifier softEdge
    __softEdge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'softEdge'), 'softEdge', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006mainsoftEdge', False)

    
    softEdge = property(__softEdge.value, __softEdge.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blur uses Python identifier blur
    __blur = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blur'), 'blur', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006mainblur', False)

    
    blur = property(__blur.value, __blur.set, None, u'Blur Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillOverlay uses Python identifier fillOverlay
    __fillOverlay = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay'), 'fillOverlay', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006mainfillOverlay', False)

    
    fillOverlay = property(__fillOverlay.value, __fillOverlay.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}reflection uses Python identifier reflection
    __reflection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'reflection'), 'reflection', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006mainreflection', False)

    
    reflection = property(__reflection.value, __reflection.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}innerShdw uses Python identifier innerShdw
    __innerShdw = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'innerShdw'), 'innerShdw', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006maininnerShdw', False)

    
    innerShdw = property(__innerShdw.value, __innerShdw.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}outerShdw uses Python identifier outerShdw
    __outerShdw = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'outerShdw'), 'outerShdw', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006mainouterShdw', False)

    
    outerShdw = property(__outerShdw.value, __outerShdw.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstShdw uses Python identifier prstShdw
    __prstShdw = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstShdw'), 'prstShdw', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006mainprstShdw', False)

    
    prstShdw = property(__prstShdw.value, __prstShdw.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}glow uses Python identifier glow
    __glow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'glow'), 'glow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006mainglow', False)

    
    glow = property(__glow.value, __glow.set, None, None)


    _ElementMap = {
        __softEdge.name() : __softEdge,
        __blur.name() : __blur,
        __fillOverlay.name() : __fillOverlay,
        __reflection.name() : __reflection,
        __innerShdw.name() : __innerShdw,
        __outerShdw.name() : __outerShdw,
        __prstShdw.name() : __prstShdw,
        __glow.name() : __glow
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EffectList', CT_EffectList)


# Complex type CT_GeomGuideList with content type ELEMENT_ONLY
class CT_GeomGuideList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GeomGuideList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gd uses Python identifier gd
    __gd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gd'), 'gd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GeomGuideList_httpschemas_openxmlformats_orgdrawingml2006maingd', True)

    
    gd = property(__gd.value, __gd.set, None, u'Shape Guide')


    _ElementMap = {
        __gd.name() : __gd
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GeomGuideList', CT_GeomGuideList)


# Complex type CT_Rules with content type ELEMENT_ONLY
class CT_Rules (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Rules')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}rule uses Python identifier rule
    __rule = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'rule'), 'rule', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Rules_httpschemas_openxmlformats_orgdrawingml2006diagramrule', True)

    
    rule = property(__rule.value, __rule.set, None, u'Rule')


    _ElementMap = {
        __rule.name() : __rule
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Rules', CT_Rules)


# Complex type CT_SDDescription with content type EMPTY
class CT_SDDescription (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_SDDescription')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SDDescription_lang', pyxb.binding.datatypes.string, unicode_default=u'')
    
    lang = property(__lang.value, __lang.set, None, u'Natural Language')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SDDescription_val', pyxb.binding.datatypes.string, required=True)
    
    val = property(__val.value, __val.set, None, u'Description Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lang.name() : __lang,
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_SDDescription', CT_SDDescription)


# Complex type CT_NormalViewProperties with content type ELEMENT_ONLY
class CT_NormalViewProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_NormalViewProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NormalViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}restoredLeft uses Python identifier restoredLeft
    __restoredLeft = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'restoredLeft'), 'restoredLeft', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NormalViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainrestoredLeft', False)

    
    restoredLeft = property(__restoredLeft.value, __restoredLeft.set, None, u'Normal View Restored Left Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}restoredTop uses Python identifier restoredTop
    __restoredTop = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'restoredTop'), 'restoredTop', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NormalViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainrestoredTop', False)

    
    restoredTop = property(__restoredTop.value, __restoredTop.set, None, u'Normal View Restored Top Properties')

    
    # Attribute snapVertSplitter uses Python identifier snapVertSplitter
    __snapVertSplitter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'snapVertSplitter'), 'snapVertSplitter', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NormalViewProperties_snapVertSplitter', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    snapVertSplitter = property(__snapVertSplitter.value, __snapVertSplitter.set, None, u'Snap Vertical Splitter')

    
    # Attribute horzBarState uses Python identifier horzBarState
    __horzBarState = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'horzBarState'), 'horzBarState', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NormalViewProperties_horzBarState', ST_SplitterBarState, unicode_default=u'restored')
    
    horzBarState = property(__horzBarState.value, __horzBarState.set, None, u'State of the Horizontal Splitter Bar')

    
    # Attribute vertBarState uses Python identifier vertBarState
    __vertBarState = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vertBarState'), 'vertBarState', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NormalViewProperties_vertBarState', ST_SplitterBarState, unicode_default=u'restored')
    
    vertBarState = property(__vertBarState.value, __vertBarState.set, None, u'State of the Vertical Splitter Bar')

    
    # Attribute preferSingleView uses Python identifier preferSingleView
    __preferSingleView = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'preferSingleView'), 'preferSingleView', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NormalViewProperties_preferSingleView', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    preferSingleView = property(__preferSingleView.value, __preferSingleView.set, None, u'Prefer Single View')

    
    # Attribute showOutlineIcons uses Python identifier showOutlineIcons
    __showOutlineIcons = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showOutlineIcons'), 'showOutlineIcons', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NormalViewProperties_showOutlineIcons', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showOutlineIcons = property(__showOutlineIcons.value, __showOutlineIcons.set, None, u'Show Outline Icons in Normal View')


    _ElementMap = {
        __extLst.name() : __extLst,
        __restoredLeft.name() : __restoredLeft,
        __restoredTop.name() : __restoredTop
    }
    _AttributeMap = {
        __snapVertSplitter.name() : __snapVertSplitter,
        __horzBarState.name() : __horzBarState,
        __vertBarState.name() : __vertBarState,
        __preferSingleView.name() : __preferSingleView,
        __showOutlineIcons.name() : __showOutlineIcons
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_NormalViewProperties', CT_NormalViewProperties)


# Complex type CT_EffectReference with content type EMPTY
class CT_EffectReference (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EffectReference')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectReference_ref', pyxb.binding.datatypes.token)
    
    ref = property(__ref.value, __ref.set, None, u'Reference')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __ref.name() : __ref
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EffectReference', CT_EffectReference)


# Complex type CT_TimeNodeList with content type ELEMENT_ONLY
class CT_TimeNodeList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TimeNodeList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}audio uses Python identifier audio
    __audio = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'audio'), 'audio', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TimeNodeList_httpschemas_openxmlformats_orgpresentationml2006mainaudio', True)

    
    audio = property(__audio.value, __audio.set, None, u'Audio')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}animClr uses Python identifier animClr
    __animClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'animClr'), 'animClr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TimeNodeList_httpschemas_openxmlformats_orgpresentationml2006mainanimClr', True)

    
    animClr = property(__animClr.value, __animClr.set, None, u'Animate Color Behavior')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}set uses Python identifier set
    __set = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'set'), 'set', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TimeNodeList_httpschemas_openxmlformats_orgpresentationml2006mainset', True)

    
    set = property(__set.value, __set.set, None, u'Set Time Node Behavior')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}animEffect uses Python identifier animEffect
    __animEffect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'animEffect'), 'animEffect', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TimeNodeList_httpschemas_openxmlformats_orgpresentationml2006mainanimEffect', True)

    
    animEffect = property(__animEffect.value, __animEffect.set, None, u'Animate Effect')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}par uses Python identifier par
    __par = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'par'), 'par', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TimeNodeList_httpschemas_openxmlformats_orgpresentationml2006mainpar', True)

    
    par = property(__par.value, __par.set, None, u'Parallel Time Node')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}seq uses Python identifier seq
    __seq = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'seq'), 'seq', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TimeNodeList_httpschemas_openxmlformats_orgpresentationml2006mainseq', True)

    
    seq = property(__seq.value, __seq.set, None, u'Sequence Time Node')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}animMotion uses Python identifier animMotion
    __animMotion = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'animMotion'), 'animMotion', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TimeNodeList_httpschemas_openxmlformats_orgpresentationml2006mainanimMotion', True)

    
    animMotion = property(__animMotion.value, __animMotion.set, None, u'Animate Motion')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cmd uses Python identifier cmd
    __cmd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cmd'), 'cmd', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TimeNodeList_httpschemas_openxmlformats_orgpresentationml2006maincmd', True)

    
    cmd = property(__cmd.value, __cmd.set, None, u'Command')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}video uses Python identifier video
    __video = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'video'), 'video', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TimeNodeList_httpschemas_openxmlformats_orgpresentationml2006mainvideo', True)

    
    video = property(__video.value, __video.set, None, u'Video')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}animRot uses Python identifier animRot
    __animRot = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'animRot'), 'animRot', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TimeNodeList_httpschemas_openxmlformats_orgpresentationml2006mainanimRot', True)

    
    animRot = property(__animRot.value, __animRot.set, None, u'Animate Rotation')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}excl uses Python identifier excl
    __excl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'excl'), 'excl', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TimeNodeList_httpschemas_openxmlformats_orgpresentationml2006mainexcl', True)

    
    excl = property(__excl.value, __excl.set, None, u'Exclusive')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}animScale uses Python identifier animScale
    __animScale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'animScale'), 'animScale', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TimeNodeList_httpschemas_openxmlformats_orgpresentationml2006mainanimScale', True)

    
    animScale = property(__animScale.value, __animScale.set, None, u'Animate Scale')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}anim uses Python identifier anim
    __anim = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'anim'), 'anim', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TimeNodeList_httpschemas_openxmlformats_orgpresentationml2006mainanim', True)

    
    anim = property(__anim.value, __anim.set, None, u'Animate')


    _ElementMap = {
        __audio.name() : __audio,
        __animClr.name() : __animClr,
        __set.name() : __set,
        __animEffect.name() : __animEffect,
        __par.name() : __par,
        __seq.name() : __seq,
        __animMotion.name() : __animMotion,
        __cmd.name() : __cmd,
        __video.name() : __video,
        __animRot.name() : __animRot,
        __excl.name() : __excl,
        __animScale.name() : __animScale,
        __anim.name() : __anim
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TimeNodeList', CT_TimeNodeList)


# Complex type CT_SampleData with content type ELEMENT_ONLY
class CT_SampleData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_SampleData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}dataModel uses Python identifier dataModel
    __dataModel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'dataModel'), 'dataModel', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SampleData_httpschemas_openxmlformats_orgdrawingml2006diagramdataModel', False)

    
    dataModel = property(__dataModel.value, __dataModel.set, None, u'Data Model')

    
    # Attribute useDef uses Python identifier useDef
    __useDef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'useDef'), 'useDef', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SampleData_useDef', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    useDef = property(__useDef.value, __useDef.set, None, u'Use Default')


    _ElementMap = {
        __dataModel.name() : __dataModel
    }
    _AttributeMap = {
        __useDef.name() : __useDef
    }
_Namespace.addCategoryObject('typeBinding', u'CT_SampleData', CT_SampleData)


# Complex type CT_EmbeddedWAVAudioFile with content type EMPTY
class CT_EmbeddedWAVAudioFile (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EmbeddedWAVAudioFile')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}embed uses Python identifier embed
    __embed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'embed'), 'embed', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EmbeddedWAVAudioFile_httpschemas_openxmlformats_orgofficeDocument2006relationshipsembed', _r.ST_RelationshipId, required=True)
    
    embed = property(__embed.value, __embed.set, None, u'Embedded Image Relationship Target')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EmbeddedWAVAudioFile_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Sound Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __embed.name() : __embed,
        __name.name() : __name
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EmbeddedWAVAudioFile', CT_EmbeddedWAVAudioFile)


# Complex type CT_CTDescription with content type EMPTY
class CT_CTDescription (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_CTDescription')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTDescription_lang', pyxb.binding.datatypes.string, unicode_default=u'')
    
    lang = property(__lang.value, __lang.set, None, u'Language')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTDescription_val', pyxb.binding.datatypes.string, required=True)
    
    val = property(__val.value, __val.set, None, u'Description Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lang.name() : __lang,
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_CTDescription', CT_CTDescription)


# Complex type CT_GeomGuide with content type EMPTY
class CT_GeomGuide (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GeomGuide')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GeomGuide_name', ST_GeomGuideName, required=True)
    
    name = property(__name.value, __name.set, None, u'Shape Guide Name')

    
    # Attribute fmla uses Python identifier fmla
    __fmla = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fmla'), 'fmla', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GeomGuide_fmla', ST_GeomGuideFormula, required=True)
    
    fmla = property(__fmla.value, __fmla.set, None, u'Shape Guide Formula')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __name.name() : __name,
        __fmla.name() : __fmla
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GeomGuide', CT_GeomGuide)


# Complex type CT_Picture with content type ELEMENT_ONLY
class CT_Picture (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_Picture')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Picture_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}nvPicPr uses Python identifier nvPicPr
    __nvPicPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'nvPicPr'), 'nvPicPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Picture_httpschemas_openxmlformats_orgpresentationml2006mainnvPicPr', False)

    
    nvPicPr = property(__nvPicPr.value, __nvPicPr.set, None, u'Non-Visual Properties for a Picture')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'style'), 'style', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Picture_httpschemas_openxmlformats_orgpresentationml2006mainstyle', False)

    
    style = property(__style.value, __style.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}spPr uses Python identifier spPr
    __spPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'spPr'), 'spPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Picture_httpschemas_openxmlformats_orgpresentationml2006mainspPr', False)

    
    spPr = property(__spPr.value, __spPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Picture_httpschemas_openxmlformats_orgpresentationml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, u'Picture Fill')


    _ElementMap = {
        __extLst.name() : __extLst,
        __nvPicPr.name() : __nvPicPr,
        __style.name() : __style,
        __spPr.name() : __spPr,
        __blipFill.name() : __blipFill
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_Picture', CT_Picture)


# Complex type CT_FillStyleList with content type ELEMENT_ONLY
class CT_FillStyleList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FillStyleList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', True)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillStyleList_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', True)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', True)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', True)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', True)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillStyleList_httpschemas_openxmlformats_orgdrawingml2006maingradFill', True)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)


    _ElementMap = {
        __blipFill.name() : __blipFill,
        __grpFill.name() : __grpFill,
        __pattFill.name() : __pattFill,
        __noFill.name() : __noFill,
        __solidFill.name() : __solidFill,
        __gradFill.name() : __gradFill
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FillStyleList', CT_FillStyleList)


# Complex type CT_PositiveFixedAngle with content type EMPTY
class CT_PositiveFixedAngle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PositiveFixedAngle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PositiveFixedAngle_val', ST_PositiveFixedAngle, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PositiveFixedAngle', CT_PositiveFixedAngle)


# Complex type CT_ReflectionEffect with content type EMPTY
class CT_ReflectionEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ReflectionEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_dir', ST_PositiveFixedAngle, unicode_default=u'0')
    
    dir = property(__dir.value, __dir.set, None, u'Direction')

    
    # Attribute blurRad uses Python identifier blurRad
    __blurRad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blurRad'), 'blurRad', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_blurRad', ST_PositiveCoordinate, unicode_default=u'0')
    
    blurRad = property(__blurRad.value, __blurRad.set, None, u'Blur Radius')

    
    # Attribute endPos uses Python identifier endPos
    __endPos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'endPos'), 'endPos', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_endPos', ST_PositiveFixedPercentage, unicode_default=u'100%')
    
    endPos = property(__endPos.value, __endPos.set, None, u'End Position')

    
    # Attribute dist uses Python identifier dist
    __dist = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dist'), 'dist', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_dist', ST_PositiveCoordinate, unicode_default=u'0')
    
    dist = property(__dist.value, __dist.set, None, u'Distance')

    
    # Attribute sy uses Python identifier sy
    __sy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sy'), 'sy', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_sy', ST_Percentage, unicode_default=u'100%')
    
    sy = property(__sy.value, __sy.set, None, u'Vertical Ratio')

    
    # Attribute rotWithShape uses Python identifier rotWithShape
    __rotWithShape = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rotWithShape'), 'rotWithShape', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_rotWithShape', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    rotWithShape = property(__rotWithShape.value, __rotWithShape.set, None, u'Rotate With Shape')

    
    # Attribute stA uses Python identifier stA
    __stA = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stA'), 'stA', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_stA', ST_PositiveFixedPercentage, unicode_default=u'100%')
    
    stA = property(__stA.value, __stA.set, None, u'Start Opacity')

    
    # Attribute algn uses Python identifier algn
    __algn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algn'), 'algn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_algn', ST_RectAlignment, unicode_default=u'b')
    
    algn = property(__algn.value, __algn.set, None, u'Shadow Alignment')

    
    # Attribute ky uses Python identifier ky
    __ky = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ky'), 'ky', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_ky', ST_FixedAngle, unicode_default=u'0')
    
    ky = property(__ky.value, __ky.set, None, u'Vertical Skew')

    
    # Attribute fadeDir uses Python identifier fadeDir
    __fadeDir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fadeDir'), 'fadeDir', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_fadeDir', ST_PositiveFixedAngle, unicode_default=u'5400000')
    
    fadeDir = property(__fadeDir.value, __fadeDir.set, None, u'Fade Direction')

    
    # Attribute kx uses Python identifier kx
    __kx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'kx'), 'kx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_kx', ST_FixedAngle, unicode_default=u'0')
    
    kx = property(__kx.value, __kx.set, None, u'Horizontal Skew')

    
    # Attribute stPos uses Python identifier stPos
    __stPos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stPos'), 'stPos', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_stPos', ST_PositiveFixedPercentage, unicode_default=u'0%')
    
    stPos = property(__stPos.value, __stPos.set, None, u'Start Position')

    
    # Attribute sx uses Python identifier sx
    __sx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sx'), 'sx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_sx', ST_Percentage, unicode_default=u'100%')
    
    sx = property(__sx.value, __sx.set, None, u'Horizontal Ratio')

    
    # Attribute endA uses Python identifier endA
    __endA = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'endA'), 'endA', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_endA', ST_PositiveFixedPercentage, unicode_default=u'0%')
    
    endA = property(__endA.value, __endA.set, None, u'End Alpha')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __dir.name() : __dir,
        __blurRad.name() : __blurRad,
        __endPos.name() : __endPos,
        __dist.name() : __dist,
        __sy.name() : __sy,
        __rotWithShape.name() : __rotWithShape,
        __stA.name() : __stA,
        __algn.name() : __algn,
        __ky.name() : __ky,
        __fadeDir.name() : __fadeDir,
        __kx.name() : __kx,
        __stPos.name() : __stPos,
        __sx.name() : __sx,
        __endA.name() : __endA
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ReflectionEffect', CT_ReflectionEffect)


# Complex type CT_Adj with content type EMPTY
class CT_Adj (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Adj')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Adj_val', pyxb.binding.datatypes.double, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')

    
    # Attribute idx uses Python identifier idx
    __idx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'idx'), 'idx', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Adj_idx', ST_Index1, required=True)
    
    idx = property(__idx.value, __idx.set, None, u'Adjust Handle Index')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __idx.name() : __idx
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Adj', CT_Adj)


# Complex type CT_SolidColorFillProperties with content type ELEMENT_ONLY
class CT_SolidColorFillProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_SolidColorFillProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SolidColorFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SolidColorFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SolidColorFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SolidColorFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SolidColorFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SolidColorFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')


    _ElementMap = {
        __sysClr.name() : __sysClr,
        __srgbClr.name() : __srgbClr,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr,
        __scrgbClr.name() : __scrgbClr,
        __hslClr.name() : __hslClr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_SolidColorFillProperties', CT_SolidColorFillProperties)


# Complex type CT_TLAnimateBehavior with content type ELEMENT_ONLY
class CT_TLAnimateBehavior (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLAnimateBehavior')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}tavLst uses Python identifier tavLst
    __tavLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'tavLst'), 'tavLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateBehavior_httpschemas_openxmlformats_orgpresentationml2006maintavLst', False)

    
    tavLst = property(__tavLst.value, __tavLst.set, None, u'Time Animated Value List')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cBhvr uses Python identifier cBhvr
    __cBhvr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), 'cBhvr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateBehavior_httpschemas_openxmlformats_orgpresentationml2006maincBhvr', False)

    
    cBhvr = property(__cBhvr.value, __cBhvr.set, None, None)

    
    # Attribute to uses Python identifier to
    __to = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'to'), 'to', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateBehavior_to', pyxb.binding.datatypes.string)
    
    to = property(__to.value, __to.set, None, u'To')

    
    # Attribute valueType uses Python identifier valueType
    __valueType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valueType'), 'valueType', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateBehavior_valueType', ST_TLAnimateBehaviorValueType)
    
    valueType = property(__valueType.value, __valueType.set, None, u'Value Type')

    
    # Attribute from uses Python identifier from_
    __from = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'from'), 'from_', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateBehavior_from', pyxb.binding.datatypes.string)
    
    from_ = property(__from.value, __from.set, None, u'From')

    
    # Attribute by uses Python identifier by
    __by = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'by'), 'by', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateBehavior_by', pyxb.binding.datatypes.string)
    
    by = property(__by.value, __by.set, None, u'By')

    
    # Attribute calcmode uses Python identifier calcmode
    __calcmode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'calcmode'), 'calcmode', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateBehavior_calcmode', ST_TLAnimateBehaviorCalcMode)
    
    calcmode = property(__calcmode.value, __calcmode.set, None, u'Calculation Mode')


    _ElementMap = {
        __tavLst.name() : __tavLst,
        __cBhvr.name() : __cBhvr
    }
    _AttributeMap = {
        __to.name() : __to,
        __valueType.name() : __valueType,
        __from.name() : __from,
        __by.name() : __by,
        __calcmode.name() : __calcmode
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLAnimateBehavior', CT_TLAnimateBehavior)


# Complex type CT_BlipFillProperties with content type ELEMENT_ONLY
class CT_BlipFillProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BlipFillProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tile uses Python identifier tile
    __tile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tile'), 'tile', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlipFillProperties_httpschemas_openxmlformats_orgdrawingml2006maintile', False)

    
    tile = property(__tile.value, __tile.set, None, u'Tile')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blip uses Python identifier blip
    __blip = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blip'), 'blip', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlipFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainblip', False)

    
    blip = property(__blip.value, __blip.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}stretch uses Python identifier stretch
    __stretch = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'stretch'), 'stretch', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlipFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainstretch', False)

    
    stretch = property(__stretch.value, __stretch.set, None, u'Stretch')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srcRect uses Python identifier srcRect
    __srcRect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srcRect'), 'srcRect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlipFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainsrcRect', False)

    
    srcRect = property(__srcRect.value, __srcRect.set, None, u'Source Rectangle')

    
    # Attribute rotWithShape uses Python identifier rotWithShape
    __rotWithShape = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rotWithShape'), 'rotWithShape', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlipFillProperties_rotWithShape', pyxb.binding.datatypes.boolean)
    
    rotWithShape = property(__rotWithShape.value, __rotWithShape.set, None, u'Rotate With Shape')

    
    # Attribute dpi uses Python identifier dpi
    __dpi = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dpi'), 'dpi', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlipFillProperties_dpi', pyxb.binding.datatypes.unsignedInt)
    
    dpi = property(__dpi.value, __dpi.set, None, u'DPI Setting')


    _ElementMap = {
        __tile.name() : __tile,
        __blip.name() : __blip,
        __stretch.name() : __stretch,
        __srcRect.name() : __srcRect
    }
    _AttributeMap = {
        __rotWithShape.name() : __rotWithShape,
        __dpi.name() : __dpi
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BlipFillProperties', CT_BlipFillProperties)


# Complex type CT_NonVisualPictureProperties with content type ELEMENT_ONLY
class CT_NonVisualPictureProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_NonVisualPictureProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualPictureProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}picLocks uses Python identifier picLocks
    __picLocks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'picLocks'), 'picLocks', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualPictureProperties_httpschemas_openxmlformats_orgdrawingml2006mainpicLocks', False)

    
    picLocks = property(__picLocks.value, __picLocks.set, None, u'Picture Locks')

    
    # Attribute preferRelativeResize uses Python identifier preferRelativeResize
    __preferRelativeResize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'preferRelativeResize'), 'preferRelativeResize', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualPictureProperties_preferRelativeResize', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    preferRelativeResize = property(__preferRelativeResize.value, __preferRelativeResize.set, None, u'Relative Resize Preferred')


    _ElementMap = {
        __extLst.name() : __extLst,
        __picLocks.name() : __picLocks
    }
    _AttributeMap = {
        __preferRelativeResize.name() : __preferRelativeResize
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_NonVisualPictureProperties', CT_NonVisualPictureProperties)


# Complex type CT_TextUnderlineFillFollowText with content type EMPTY
class CT_TextUnderlineFillFollowText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextUnderlineFillFollowText')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextUnderlineFillFollowText', CT_TextUnderlineFillFollowText)


# Complex type CT_TLTriggerRuntimeNode with content type EMPTY
class CT_TLTriggerRuntimeNode (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLTriggerRuntimeNode')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTriggerRuntimeNode_val', ST_TLTriggerRuntimeNode, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLTriggerRuntimeNode', CT_TLTriggerRuntimeNode)


# Complex type CT_FillProperties with content type ELEMENT_ONLY
class CT_FillProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FillProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillProperties_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillProperties_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillProperties_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillProperties_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillProperties_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)


    _ElementMap = {
        __solidFill.name() : __solidFill,
        __blipFill.name() : __blipFill,
        __pattFill.name() : __pattFill,
        __noFill.name() : __noFill,
        __grpFill.name() : __grpFill,
        __gradFill.name() : __gradFill
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FillProperties', CT_FillProperties)


# Complex type CT_Shape3D with content type ELEMENT_ONLY
class CT_Shape3D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Shape3D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bevelT uses Python identifier bevelT
    __bevelT = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bevelT'), 'bevelT', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_httpschemas_openxmlformats_orgdrawingml2006mainbevelT', False)

    
    bevelT = property(__bevelT.value, __bevelT.set, None, u'Top Bevel')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}contourClr uses Python identifier contourClr
    __contourClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'contourClr'), 'contourClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_httpschemas_openxmlformats_orgdrawingml2006maincontourClr', False)

    
    contourClr = property(__contourClr.value, __contourClr.set, None, u'Contour Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bevelB uses Python identifier bevelB
    __bevelB = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bevelB'), 'bevelB', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_httpschemas_openxmlformats_orgdrawingml2006mainbevelB', False)

    
    bevelB = property(__bevelB.value, __bevelB.set, None, u'Bottom Bevel')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extrusionClr uses Python identifier extrusionClr
    __extrusionClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extrusionClr'), 'extrusionClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_httpschemas_openxmlformats_orgdrawingml2006mainextrusionClr', False)

    
    extrusionClr = property(__extrusionClr.value, __extrusionClr.set, None, u'Extrusion Color')

    
    # Attribute prstMaterial uses Python identifier prstMaterial
    __prstMaterial = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prstMaterial'), 'prstMaterial', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_prstMaterial', ST_PresetMaterialType, unicode_default=u'warmMatte')
    
    prstMaterial = property(__prstMaterial.value, __prstMaterial.set, None, u'Preset Material Type')

    
    # Attribute contourW uses Python identifier contourW
    __contourW = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'contourW'), 'contourW', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_contourW', ST_PositiveCoordinate, unicode_default=u'0')
    
    contourW = property(__contourW.value, __contourW.set, None, u'Contour Width')

    
    # Attribute z uses Python identifier z
    __z = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'z'), 'z', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_z', ST_Coordinate, unicode_default=u'0')
    
    z = property(__z.value, __z.set, None, u'Shape Depth')

    
    # Attribute extrusionH uses Python identifier extrusionH
    __extrusionH = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'extrusionH'), 'extrusionH', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_extrusionH', ST_PositiveCoordinate, unicode_default=u'0')
    
    extrusionH = property(__extrusionH.value, __extrusionH.set, None, u'Extrusion Height')


    _ElementMap = {
        __extLst.name() : __extLst,
        __bevelT.name() : __bevelT,
        __contourClr.name() : __contourClr,
        __bevelB.name() : __bevelB,
        __extrusionClr.name() : __extrusionClr
    }
    _AttributeMap = {
        __prstMaterial.name() : __prstMaterial,
        __contourW.name() : __contourW,
        __z.name() : __z,
        __extrusionH.name() : __extrusionH
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Shape3D', CT_Shape3D)


# Complex type CT_GroupShapeProperties with content type ELEMENT_ONLY
class CT_GroupShapeProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GroupShapeProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}xfrm uses Python identifier xfrm
    __xfrm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), 'xfrm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainxfrm', False)

    
    xfrm = property(__xfrm.value, __xfrm.set, None, u'2D Transform for Grouped Objects')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scene3d uses Python identifier scene3d
    __scene3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), 'scene3d', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainscene3d', False)

    
    scene3d = property(__scene3d.value, __scene3d.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Attribute bwMode uses Python identifier bwMode
    __bwMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bwMode'), 'bwMode', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_bwMode', ST_BlackWhiteMode)
    
    bwMode = property(__bwMode.value, __bwMode.set, None, u'Black and White Mode')


    _ElementMap = {
        __solidFill.name() : __solidFill,
        __xfrm.name() : __xfrm,
        __effectLst.name() : __effectLst,
        __gradFill.name() : __gradFill,
        __effectDag.name() : __effectDag,
        __scene3d.name() : __scene3d,
        __extLst.name() : __extLst,
        __pattFill.name() : __pattFill,
        __grpFill.name() : __grpFill,
        __noFill.name() : __noFill,
        __blipFill.name() : __blipFill
    }
    _AttributeMap = {
        __bwMode.name() : __bwMode
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GroupShapeProperties', CT_GroupShapeProperties)


# Complex type CT_AlphaInverseEffect with content type ELEMENT_ONLY
class CT_AlphaInverseEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaInverseEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaInverseEffect_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaInverseEffect_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaInverseEffect_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaInverseEffect_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaInverseEffect_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaInverseEffect_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')


    _ElementMap = {
        __hslClr.name() : __hslClr,
        __srgbClr.name() : __srgbClr,
        __sysClr.name() : __sysClr,
        __schemeClr.name() : __schemeClr,
        __scrgbClr.name() : __scrgbClr,
        __prstClr.name() : __prstClr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaInverseEffect', CT_AlphaInverseEffect)


# Complex type CT_ExtensionListModify with content type ELEMENT_ONLY
class CT_ExtensionListModify (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_ExtensionListModify')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}ext uses Python identifier ext
    __ext = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'ext'), 'ext', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ExtensionListModify_httpschemas_openxmlformats_orgpresentationml2006mainext', True)

    
    ext = property(__ext.value, __ext.set, None, u'Extension')

    
    # Attribute mod uses Python identifier mod
    __mod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mod'), 'mod', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ExtensionListModify_mod', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    mod = property(__mod.value, __mod.set, None, u'Modify')


    _ElementMap = {
        __ext.name() : __ext
    }
    _AttributeMap = {
        __mod.name() : __mod
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_ExtensionListModify', CT_ExtensionListModify)


# Complex type CT_TextNoBullet with content type EMPTY
class CT_TextNoBullet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextNoBullet')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextNoBullet', CT_TextNoBullet)


# Complex type CT_Empty with content type EMPTY
class CT_Empty (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_Empty')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_Empty', CT_Empty)


# Complex type CT_SlideRelationshipListEntry with content type EMPTY
class CT_SlideRelationshipListEntry (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideRelationshipListEntry')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideRelationshipListEntry_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideRelationshipListEntry', CT_SlideRelationshipListEntry)


# Complex type CT_OutlineViewSlideList with content type ELEMENT_ONLY
class CT_OutlineViewSlideList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_OutlineViewSlideList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sld uses Python identifier sld
    __sld = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sld'), 'sld', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OutlineViewSlideList_httpschemas_openxmlformats_orgpresentationml2006mainsld', True)

    
    sld = property(__sld.value, __sld.set, None, u'Presentation Slide')


    _ElementMap = {
        __sld.name() : __sld
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_OutlineViewSlideList', CT_OutlineViewSlideList)


# Complex type CT_XYAdjustHandle with content type ELEMENT_ONLY
class CT_XYAdjustHandle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_XYAdjustHandle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pos'), 'pos', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_XYAdjustHandle_httpschemas_openxmlformats_orgdrawingml2006mainpos', False)

    
    pos = property(__pos.value, __pos.set, None, u'Position')

    
    # Attribute gdRefY uses Python identifier gdRefY
    __gdRefY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gdRefY'), 'gdRefY', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_XYAdjustHandle_gdRefY', ST_GeomGuideName)
    
    gdRefY = property(__gdRefY.value, __gdRefY.set, None, u'Vertical Adjustment Guide')

    
    # Attribute minX uses Python identifier minX
    __minX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minX'), 'minX', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_XYAdjustHandle_minX', ST_AdjCoordinate)
    
    minX = property(__minX.value, __minX.set, None, u'Minimum Horizontal Adjustment')

    
    # Attribute maxX uses Python identifier maxX
    __maxX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxX'), 'maxX', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_XYAdjustHandle_maxX', ST_AdjCoordinate)
    
    maxX = property(__maxX.value, __maxX.set, None, u'Maximum Horizontal Adjustment')

    
    # Attribute gdRefX uses Python identifier gdRefX
    __gdRefX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gdRefX'), 'gdRefX', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_XYAdjustHandle_gdRefX', ST_GeomGuideName)
    
    gdRefX = property(__gdRefX.value, __gdRefX.set, None, u'Horizontal Adjustment Guide')

    
    # Attribute minY uses Python identifier minY
    __minY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minY'), 'minY', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_XYAdjustHandle_minY', ST_AdjCoordinate)
    
    minY = property(__minY.value, __minY.set, None, u'Minimum Vertical Adjustment')

    
    # Attribute maxY uses Python identifier maxY
    __maxY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxY'), 'maxY', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_XYAdjustHandle_maxY', ST_AdjCoordinate)
    
    maxY = property(__maxY.value, __maxY.set, None, u'Maximum Vertical Adjustment')


    _ElementMap = {
        __pos.name() : __pos
    }
    _AttributeMap = {
        __gdRefY.name() : __gdRefY,
        __minX.name() : __minX,
        __maxX.name() : __maxX,
        __gdRefX.name() : __gdRefX,
        __minY.name() : __minY,
        __maxY.name() : __maxY
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_XYAdjustHandle', CT_XYAdjustHandle)


# Complex type CT_Backdrop with content type ELEMENT_ONLY
class CT_Backdrop (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Backdrop')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Backdrop_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}anchor uses Python identifier anchor
    __anchor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'anchor'), 'anchor', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Backdrop_httpschemas_openxmlformats_orgdrawingml2006mainanchor', False)

    
    anchor = property(__anchor.value, __anchor.set, None, u'Anchor Point')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}up uses Python identifier up
    __up = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'up'), 'up', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Backdrop_httpschemas_openxmlformats_orgdrawingml2006mainup', False)

    
    up = property(__up.value, __up.set, None, u'Up Vector')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}norm uses Python identifier norm
    __norm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'norm'), 'norm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Backdrop_httpschemas_openxmlformats_orgdrawingml2006mainnorm', False)

    
    norm = property(__norm.value, __norm.set, None, u'Normal')


    _ElementMap = {
        __extLst.name() : __extLst,
        __anchor.name() : __anchor,
        __up.name() : __up,
        __norm.name() : __norm
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Backdrop', CT_Backdrop)


# Complex type CT_InOutTransition with content type EMPTY
class CT_InOutTransition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_InOutTransition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_InOutTransition_dir', ST_TransitionInOutDirectionType, unicode_default=u'out')
    
    dir = property(__dir.value, __dir.set, None, u'Direction')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __dir.name() : __dir
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_InOutTransition', CT_InOutTransition)


# Complex type CT_Headers with content type ELEMENT_ONLY
class CT_Headers (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Headers')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}header uses Python identifier header
    __header = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'header'), 'header', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Headers_httpschemas_openxmlformats_orgdrawingml2006mainheader', True)

    
    header = property(__header.value, __header.set, None, u'Header Cell Reference')


    _ElementMap = {
        __header.name() : __header
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Headers', CT_Headers)


# Complex type CT_Extension with content type ELEMENT_ONLY
class CT_Extension (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_Extension')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute uri uses Python identifier uri
    __uri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uri'), 'uri', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Extension_uri', pyxb.binding.datatypes.token)
    
    uri = property(__uri.value, __uri.set, None, u'Uniform Resource Identifier')

    _HasWildcardElement = True

    _ElementMap = {
        
    }
    _AttributeMap = {
        __uri.name() : __uri
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_Extension', CT_Extension)


# Complex type CT_ForEach with content type ELEMENT_ONLY
class CT_ForEach (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ForEach')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}constrLst uses Python identifier constrLst
    __constrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), 'constrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramconstrLst', True)

    
    constrLst = property(__constrLst.value, __constrLst.set, None, u'Constraint List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}forEach uses Python identifier forEach
    __forEach = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), 'forEach', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramforEach', True)

    
    forEach = property(__forEach.value, __forEach.set, None, u'For Each')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}shape uses Python identifier shape
    __shape = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'shape'), 'shape', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramshape', True)

    
    shape = property(__shape.value, __shape.set, None, u'Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}alg uses Python identifier alg
    __alg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'alg'), 'alg', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramalg', True)

    
    alg = property(__alg.value, __alg.set, None, u'Algorithm')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}layoutNode uses Python identifier layoutNode
    __layoutNode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), 'layoutNode', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramlayoutNode', True)

    
    layoutNode = property(__layoutNode.value, __layoutNode.set, None, u'Layout Node')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}choose uses Python identifier choose
    __choose = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'choose'), 'choose', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramchoose', True)

    
    choose = property(__choose.value, __choose.set, None, u'Choose Element')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}presOf uses Python identifier presOf
    __presOf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), 'presOf', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagrampresOf', True)

    
    presOf = property(__presOf.value, __presOf.set, None, u'Presentation Of')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', True)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}ruleLst uses Python identifier ruleLst
    __ruleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), 'ruleLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramruleLst', True)

    
    ruleLst = property(__ruleLst.value, __ruleLst.set, None, u'Rule List')

    
    # Attribute axis uses Python identifier axis
    __axis = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axis'), 'axis', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_axis', ST_AxisTypes, unicode_default=u'none')
    
    axis = property(__axis.value, __axis.set, None, u'Axis')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')

    
    # Attribute step uses Python identifier step
    __step = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'step'), 'step', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_step', ST_Ints, unicode_default=u'1')
    
    step = property(__step.value, __step.set, None, u'Step')

    
    # Attribute st uses Python identifier st
    __st = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'st'), 'st', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_st', ST_Ints, unicode_default=u'1')
    
    st = property(__st.value, __st.set, None, u'Start')

    
    # Attribute cnt uses Python identifier cnt
    __cnt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cnt'), 'cnt', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_cnt', ST_UnsignedInts, unicode_default=u'0')
    
    cnt = property(__cnt.value, __cnt.set, None, u'Count')

    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_ref', pyxb.binding.datatypes.string, unicode_default=u'')
    
    ref = property(__ref.value, __ref.set, None, u'Reference')

    
    # Attribute ptType uses Python identifier ptType
    __ptType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ptType'), 'ptType', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_ptType', ST_ElementTypes, unicode_default=u'all')
    
    ptType = property(__ptType.value, __ptType.set, None, u'Data Point Type')

    
    # Attribute hideLastTrans uses Python identifier hideLastTrans
    __hideLastTrans = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hideLastTrans'), 'hideLastTrans', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_hideLastTrans', ST_Booleans, unicode_default=u'true')
    
    hideLastTrans = property(__hideLastTrans.value, __hideLastTrans.set, None, u'Hide Last Transition')


    _ElementMap = {
        __constrLst.name() : __constrLst,
        __forEach.name() : __forEach,
        __shape.name() : __shape,
        __alg.name() : __alg,
        __layoutNode.name() : __layoutNode,
        __choose.name() : __choose,
        __presOf.name() : __presOf,
        __extLst.name() : __extLst,
        __ruleLst.name() : __ruleLst
    }
    _AttributeMap = {
        __axis.name() : __axis,
        __name.name() : __name,
        __step.name() : __step,
        __st.name() : __st,
        __cnt.name() : __cnt,
        __ref.name() : __ref,
        __ptType.name() : __ptType,
        __hideLastTrans.name() : __hideLastTrans
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ForEach', CT_ForEach)


# Complex type CT_TextField with content type ELEMENT_ONLY
class CT_TextField (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextField')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}t uses Python identifier t
    __t = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u't'), 't', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextField_httpschemas_openxmlformats_orgdrawingml2006maint', False)

    
    t = property(__t.value, __t.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextField_httpschemas_openxmlformats_orgdrawingml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Text Character Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pPr uses Python identifier pPr
    __pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pPr'), 'pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextField_httpschemas_openxmlformats_orgdrawingml2006mainpPr', False)

    
    pPr = property(__pPr.value, __pPr.set, None, u'Text Paragraph Properties')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextField_type', pyxb.binding.datatypes.string)
    
    type = property(__type.value, __type.set, None, u'Field Type')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextField_id', _s.ST_Guid, required=True)
    
    id = property(__id.value, __id.set, None, u'Field ID')


    _ElementMap = {
        __t.name() : __t,
        __rPr.name() : __rPr,
        __pPr.name() : __pPr
    }
    _AttributeMap = {
        __type.name() : __type,
        __id.name() : __id
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextField', CT_TextField)


# Complex type CT_PositiveSize2D with content type EMPTY
class CT_PositiveSize2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PositiveSize2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute cy uses Python identifier cy
    __cy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cy'), 'cy', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PositiveSize2D_cy', ST_PositiveCoordinate, required=True)
    
    cy = property(__cy.value, __cy.set, None, u'Extent Width')

    
    # Attribute cx uses Python identifier cx
    __cx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cx'), 'cx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PositiveSize2D_cx', ST_PositiveCoordinate, required=True)
    
    cx = property(__cx.value, __cx.set, None, u'Extent Length')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __cy.name() : __cy,
        __cx.name() : __cx
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PositiveSize2D', CT_PositiveSize2D)


# Complex type CT_BlurEffect with content type EMPTY
class CT_BlurEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BlurEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute rad uses Python identifier rad
    __rad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rad'), 'rad', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlurEffect_rad', ST_PositiveCoordinate, unicode_default=u'0')
    
    rad = property(__rad.value, __rad.set, None, u'Radius')

    
    # Attribute grow uses Python identifier grow
    __grow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'grow'), 'grow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlurEffect_grow', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    grow = property(__grow.value, __grow.set, None, u'Grow Bounds')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __rad.name() : __rad,
        __grow.name() : __grow
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BlurEffect', CT_BlurEffect)


# Complex type CT_ControlList with content type ELEMENT_ONLY
class CT_ControlList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_ControlList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}control uses Python identifier control
    __control = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'control'), 'control', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ControlList_httpschemas_openxmlformats_orgpresentationml2006maincontrol', True)

    
    control = property(__control.value, __control.set, None, u'Embedded Control')


    _ElementMap = {
        __control.name() : __control
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_ControlList', CT_ControlList)


# Complex type CT_GvmlShapeNonVisual with content type ELEMENT_ONLY
class CT_GvmlShapeNonVisual (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlShapeNonVisual')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvSpPr uses Python identifier cNvSpPr
    __cNvSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvSpPr'), 'cNvSpPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlShapeNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvSpPr', False)

    
    cNvSpPr = property(__cNvSpPr.value, __cNvSpPr.set, None, u'Non-Visual Shape Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvPr uses Python identifier cNvPr
    __cNvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), 'cNvPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlShapeNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvPr', False)

    
    cNvPr = property(__cNvPr.value, __cNvPr.set, None, None)


    _ElementMap = {
        __cNvSpPr.name() : __cNvSpPr,
        __cNvPr.name() : __cNvPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlShapeNonVisual', CT_GvmlShapeNonVisual)


# Complex type CT_Ratio with content type EMPTY
class CT_Ratio (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Ratio')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute d uses Python identifier d
    __d = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'd'), 'd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Ratio_d', pyxb.binding.datatypes.long, required=True)
    
    d = property(__d.value, __d.set, None, u'Denominator')

    
    # Attribute n uses Python identifier n
    __n = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'n'), 'n', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Ratio_n', pyxb.binding.datatypes.long, required=True)
    
    n = property(__n.value, __n.set, None, u'Numerator')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __d.name() : __d,
        __n.name() : __n
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Ratio', CT_Ratio)


# Complex type CT_TextBodyProperties with content type ELEMENT_ONLY
class CT_TextBodyProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBodyProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstTxWarp uses Python identifier prstTxWarp
    __prstTxWarp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstTxWarp'), 'prstTxWarp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainprstTxWarp', False)

    
    prstTxWarp = property(__prstTxWarp.value, __prstTxWarp.set, None, u'Preset Text Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sp3d uses Python identifier sp3d
    __sp3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), 'sp3d', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainsp3d', False)

    
    sp3d = property(__sp3d.value, __sp3d.set, None, u'Apply 3D shape properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noAutofit uses Python identifier noAutofit
    __noAutofit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noAutofit'), 'noAutofit', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoAutofit', False)

    
    noAutofit = property(__noAutofit.value, __noAutofit.set, None, u'No AutoFit')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}normAutofit uses Python identifier normAutofit
    __normAutofit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'normAutofit'), 'normAutofit', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainnormAutofit', False)

    
    normAutofit = property(__normAutofit.value, __normAutofit.set, None, u'Normal AutoFit')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}flatTx uses Python identifier flatTx
    __flatTx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'flatTx'), 'flatTx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainflatTx', False)

    
    flatTx = property(__flatTx.value, __flatTx.set, None, u'No text in 3D scene')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scene3d uses Python identifier scene3d
    __scene3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), 'scene3d', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainscene3d', False)

    
    scene3d = property(__scene3d.value, __scene3d.set, None, u'3D Scene Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spAutoFit uses Python identifier spAutoFit
    __spAutoFit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spAutoFit'), 'spAutoFit', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainspAutoFit', False)

    
    spAutoFit = property(__spAutoFit.value, __spAutoFit.set, None, u'Shape AutoFit')

    
    # Attribute lIns uses Python identifier lIns
    __lIns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lIns'), 'lIns', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_lIns', ST_Coordinate32)
    
    lIns = property(__lIns.value, __lIns.set, None, u'Left Inset')

    
    # Attribute spcCol uses Python identifier spcCol
    __spcCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spcCol'), 'spcCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_spcCol', ST_PositiveCoordinate32)
    
    spcCol = property(__spcCol.value, __spcCol.set, None, u'Space Between Columns')

    
    # Attribute spcFirstLastPara uses Python identifier spcFirstLastPara
    __spcFirstLastPara = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spcFirstLastPara'), 'spcFirstLastPara', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_spcFirstLastPara', pyxb.binding.datatypes.boolean)
    
    spcFirstLastPara = property(__spcFirstLastPara.value, __spcFirstLastPara.set, None, u'Paragraph Spacing')

    
    # Attribute rtlCol uses Python identifier rtlCol
    __rtlCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rtlCol'), 'rtlCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_rtlCol', pyxb.binding.datatypes.boolean)
    
    rtlCol = property(__rtlCol.value, __rtlCol.set, None, u'Columns Right-To-Left')

    
    # Attribute tIns uses Python identifier tIns
    __tIns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tIns'), 'tIns', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_tIns', ST_Coordinate32)
    
    tIns = property(__tIns.value, __tIns.set, None, u'Top Inset')

    
    # Attribute vertOverflow uses Python identifier vertOverflow
    __vertOverflow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vertOverflow'), 'vertOverflow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_vertOverflow', ST_TextVertOverflowType)
    
    vertOverflow = property(__vertOverflow.value, __vertOverflow.set, None, u'Text Vertical Overflow')

    
    # Attribute fromWordArt uses Python identifier fromWordArt
    __fromWordArt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fromWordArt'), 'fromWordArt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_fromWordArt', pyxb.binding.datatypes.boolean)
    
    fromWordArt = property(__fromWordArt.value, __fromWordArt.set, None, u'From WordArt')

    
    # Attribute rIns uses Python identifier rIns
    __rIns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rIns'), 'rIns', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_rIns', ST_Coordinate32)
    
    rIns = property(__rIns.value, __rIns.set, None, u'Right Inset')

    
    # Attribute anchorCtr uses Python identifier anchorCtr
    __anchorCtr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'anchorCtr'), 'anchorCtr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_anchorCtr', pyxb.binding.datatypes.boolean)
    
    anchorCtr = property(__anchorCtr.value, __anchorCtr.set, None, u'Anchor Center')

    
    # Attribute horzOverflow uses Python identifier horzOverflow
    __horzOverflow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'horzOverflow'), 'horzOverflow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_horzOverflow', ST_TextHorzOverflowType)
    
    horzOverflow = property(__horzOverflow.value, __horzOverflow.set, None, u'Text Horizontal Overflow')

    
    # Attribute forceAA uses Python identifier forceAA
    __forceAA = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'forceAA'), 'forceAA', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_forceAA', pyxb.binding.datatypes.boolean)
    
    forceAA = property(__forceAA.value, __forceAA.set, None, u'Force Anti-Alias')

    
    # Attribute bIns uses Python identifier bIns
    __bIns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bIns'), 'bIns', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_bIns', ST_Coordinate32)
    
    bIns = property(__bIns.value, __bIns.set, None, u'Bottom Inset')

    
    # Attribute vert uses Python identifier vert
    __vert = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vert'), 'vert', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_vert', ST_TextVerticalType)
    
    vert = property(__vert.value, __vert.set, None, u'Vertical Text')

    
    # Attribute rot uses Python identifier rot
    __rot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rot'), 'rot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_rot', ST_Angle)
    
    rot = property(__rot.value, __rot.set, None, u'Rotation')

    
    # Attribute upright uses Python identifier upright
    __upright = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'upright'), 'upright', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_upright', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    upright = property(__upright.value, __upright.set, None, u'Text Upright')

    
    # Attribute numCol uses Python identifier numCol
    __numCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numCol'), 'numCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_numCol', ST_TextColumnCount)
    
    numCol = property(__numCol.value, __numCol.set, None, u'Number of Columns')

    
    # Attribute wrap uses Python identifier wrap
    __wrap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'wrap'), 'wrap', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_wrap', ST_TextWrappingType)
    
    wrap = property(__wrap.value, __wrap.set, None, u'Text Wrapping Type')

    
    # Attribute compatLnSpc uses Python identifier compatLnSpc
    __compatLnSpc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'compatLnSpc'), 'compatLnSpc', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_compatLnSpc', pyxb.binding.datatypes.boolean)
    
    compatLnSpc = property(__compatLnSpc.value, __compatLnSpc.set, None, u'Compatible Line Spacing')

    
    # Attribute anchor uses Python identifier anchor
    __anchor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'anchor'), 'anchor', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_anchor', ST_TextAnchoringType)
    
    anchor = property(__anchor.value, __anchor.set, None, u'Anchor')


    _ElementMap = {
        __prstTxWarp.name() : __prstTxWarp,
        __sp3d.name() : __sp3d,
        __extLst.name() : __extLst,
        __noAutofit.name() : __noAutofit,
        __normAutofit.name() : __normAutofit,
        __flatTx.name() : __flatTx,
        __scene3d.name() : __scene3d,
        __spAutoFit.name() : __spAutoFit
    }
    _AttributeMap = {
        __lIns.name() : __lIns,
        __spcCol.name() : __spcCol,
        __spcFirstLastPara.name() : __spcFirstLastPara,
        __rtlCol.name() : __rtlCol,
        __tIns.name() : __tIns,
        __vertOverflow.name() : __vertOverflow,
        __fromWordArt.name() : __fromWordArt,
        __rIns.name() : __rIns,
        __anchorCtr.name() : __anchorCtr,
        __horzOverflow.name() : __horzOverflow,
        __forceAA.name() : __forceAA,
        __bIns.name() : __bIns,
        __vert.name() : __vert,
        __rot.name() : __rot,
        __upright.name() : __upright,
        __numCol.name() : __numCol,
        __wrap.name() : __wrap,
        __compatLnSpc.name() : __compatLnSpc,
        __anchor.name() : __anchor
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBodyProperties', CT_TextBodyProperties)


# Complex type CT_LineJoinMiterProperties with content type EMPTY
class CT_LineJoinMiterProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LineJoinMiterProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lim uses Python identifier lim
    __lim = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lim'), 'lim', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineJoinMiterProperties_lim', ST_PositivePercentage)
    
    lim = property(__lim.value, __lim.set, None, u'Miter Join Limit')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lim.name() : __lim
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LineJoinMiterProperties', CT_LineJoinMiterProperties)


# Complex type CT_NotesSlide with content type ELEMENT_ONLY
class CT_NotesSlide (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_NotesSlide')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesSlide_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cSld uses Python identifier cSld
    __cSld = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cSld'), 'cSld', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesSlide_httpschemas_openxmlformats_orgpresentationml2006maincSld', False)

    
    cSld = property(__cSld.value, __cSld.set, None, u'Common slide data for notes slides')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}clrMapOvr uses Python identifier clrMapOvr
    __clrMapOvr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'clrMapOvr'), 'clrMapOvr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesSlide_httpschemas_openxmlformats_orgpresentationml2006mainclrMapOvr', False)

    
    clrMapOvr = property(__clrMapOvr.value, __clrMapOvr.set, None, u'Color Scheme Map Override')

    
    # Attribute showMasterSp uses Python identifier showMasterSp
    __showMasterSp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showMasterSp'), 'showMasterSp', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesSlide_showMasterSp', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showMasterSp = property(__showMasterSp.value, __showMasterSp.set, None, u'Show Master Shapes')

    
    # Attribute showMasterPhAnim uses Python identifier showMasterPhAnim
    __showMasterPhAnim = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showMasterPhAnim'), 'showMasterPhAnim', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesSlide_showMasterPhAnim', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showMasterPhAnim = property(__showMasterPhAnim.value, __showMasterPhAnim.set, None, u'Show Master Placeholder Animations')


    _ElementMap = {
        __extLst.name() : __extLst,
        __cSld.name() : __cSld,
        __clrMapOvr.name() : __clrMapOvr
    }
    _AttributeMap = {
        __showMasterSp.name() : __showMasterSp,
        __showMasterPhAnim.name() : __showMasterPhAnim
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_NotesSlide', CT_NotesSlide)


# Complex type CT_StyleDefinition with content type ELEMENT_ONLY
class CT_StyleDefinition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_StyleDefinition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}scene3d uses Python identifier scene3d
    __scene3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'scene3d'), 'scene3d', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramscene3d', False)

    
    scene3d = property(__scene3d.value, __scene3d.set, None, u'3-D Scene')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}styleLbl uses Python identifier styleLbl
    __styleLbl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'styleLbl'), 'styleLbl', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramstyleLbl', True)

    
    styleLbl = property(__styleLbl.value, __styleLbl.set, None, u'Style Label')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}catLst uses Python identifier catLst
    __catLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), 'catLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramcatLst', False)

    
    catLst = property(__catLst.value, __catLst.set, None, u'Category List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'title'), 'title', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramtitle', True)

    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}desc uses Python identifier desc
    __desc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'desc'), 'desc', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramdesc', True)

    
    desc = property(__desc.value, __desc.set, None, u'Style Label Description')

    
    # Attribute minVer uses Python identifier minVer
    __minVer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minVer'), 'minVer', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_minVer', pyxb.binding.datatypes.string, unicode_default=u'http://schemas.openxmlformats.org/drawingml/2006/diagram')
    
    minVer = property(__minVer.value, __minVer.set, None, u'Minimum Version')

    
    # Attribute uniqueId uses Python identifier uniqueId
    __uniqueId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueId'), 'uniqueId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_uniqueId', pyxb.binding.datatypes.string, unicode_default=u'')
    
    uniqueId = property(__uniqueId.value, __uniqueId.set, None, u'Unique Style ID')


    _ElementMap = {
        __scene3d.name() : __scene3d,
        __styleLbl.name() : __styleLbl,
        __catLst.name() : __catLst,
        __extLst.name() : __extLst,
        __title.name() : __title,
        __desc.name() : __desc
    }
    _AttributeMap = {
        __minVer.name() : __minVer,
        __uniqueId.name() : __uniqueId
    }
_Namespace.addCategoryObject('typeBinding', u'CT_StyleDefinition', CT_StyleDefinition)


# Complex type CT_OuterShadowEffect with content type ELEMENT_ONLY
class CT_OuterShadowEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_OuterShadowEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Attribute rotWithShape uses Python identifier rotWithShape
    __rotWithShape = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rotWithShape'), 'rotWithShape', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_rotWithShape', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    rotWithShape = property(__rotWithShape.value, __rotWithShape.set, None, u'Rotate With Shape')

    
    # Attribute sx uses Python identifier sx
    __sx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sx'), 'sx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_sx', ST_Percentage, unicode_default=u'100%')
    
    sx = property(__sx.value, __sx.set, None, u'Horizontal Scaling Factor')

    
    # Attribute blurRad uses Python identifier blurRad
    __blurRad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blurRad'), 'blurRad', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_blurRad', ST_PositiveCoordinate, unicode_default=u'0')
    
    blurRad = property(__blurRad.value, __blurRad.set, None, u'Blur Radius')

    
    # Attribute sy uses Python identifier sy
    __sy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sy'), 'sy', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_sy', ST_Percentage, unicode_default=u'100%')
    
    sy = property(__sy.value, __sy.set, None, u'Vertical Scaling Factor')

    
    # Attribute kx uses Python identifier kx
    __kx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'kx'), 'kx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_kx', ST_FixedAngle, unicode_default=u'0')
    
    kx = property(__kx.value, __kx.set, None, u'Horizontal Skew')

    
    # Attribute ky uses Python identifier ky
    __ky = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ky'), 'ky', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_ky', ST_FixedAngle, unicode_default=u'0')
    
    ky = property(__ky.value, __ky.set, None, u'Vertical Skew')

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_dir', ST_PositiveFixedAngle, unicode_default=u'0')
    
    dir = property(__dir.value, __dir.set, None, u'Shadow Direction')

    
    # Attribute algn uses Python identifier algn
    __algn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algn'), 'algn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_algn', ST_RectAlignment, unicode_default=u'b')
    
    algn = property(__algn.value, __algn.set, None, u'Shadow Alignment')

    
    # Attribute dist uses Python identifier dist
    __dist = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dist'), 'dist', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_dist', ST_PositiveCoordinate, unicode_default=u'0')
    
    dist = property(__dist.value, __dist.set, None, u'Shadow Offset Distance')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __hslClr.name() : __hslClr,
        __scrgbClr.name() : __scrgbClr,
        __sysClr.name() : __sysClr,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr
    }
    _AttributeMap = {
        __rotWithShape.name() : __rotWithShape,
        __sx.name() : __sx,
        __blurRad.name() : __blurRad,
        __sy.name() : __sy,
        __kx.name() : __kx,
        __ky.name() : __ky,
        __dir.name() : __dir,
        __algn.name() : __algn,
        __dist.name() : __dist
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_OuterShadowEffect', CT_OuterShadowEffect)


# Complex type CT_TableCol with content type ELEMENT_ONLY
class CT_TableCol (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableCol')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCol_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'w'), 'w', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCol_w', ST_Coordinate, required=True)
    
    w = property(__w.value, __w.set, None, u'Width')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __w.name() : __w
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableCol', CT_TableCol)


# Complex type CT_ScRgbColor with content type ELEMENT_ONLY
class CT_ScRgbColor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ScRgbColor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueOff uses Python identifier blueOff
    __blueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), 'blueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainblueOff', True)

    
    blueOff = property(__blueOff.value, __blueOff.set, None, u'Blue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gray uses Python identifier gray
    __gray = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), 'gray', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingray', True)

    
    gray = property(__gray.value, __gray.set, None, u'Gray')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueMod uses Python identifier blueMod
    __blueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), 'blueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainblueMod', True)

    
    blueMod = property(__blueMod.value, __blueMod.set, None, u'Blue Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaOff uses Python identifier alphaOff
    __alphaOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), 'alphaOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaOff', True)

    
    alphaOff = property(__alphaOff.value, __alphaOff.set, None, u'Alpha Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, u'Alpha Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueOff uses Python identifier hueOff
    __hueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), 'hueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainhueOff', True)

    
    hueOff = property(__hueOff.value, __hueOff.set, None, u'Hue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueMod uses Python identifier hueMod
    __hueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), 'hueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainhueMod', True)

    
    hueMod = property(__hueMod.value, __hueMod.set, None, u'Hue Modulate')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenOff uses Python identifier greenOff
    __greenOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), 'greenOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingreenOff', True)

    
    greenOff = property(__greenOff.value, __greenOff.set, None, u'Green Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alpha uses Python identifier alpha
    __alpha = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), 'alpha', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainalpha', True)

    
    alpha = property(__alpha.value, __alpha.set, None, u'Alpha')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sat uses Python identifier sat
    __sat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), 'sat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainsat', True)

    
    sat = property(__sat.value, __sat.set, None, u'Saturation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satOff uses Python identifier satOff
    __satOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), 'satOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainsatOff', True)

    
    satOff = property(__satOff.value, __satOff.set, None, u'Saturation Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}invGamma uses Python identifier invGamma
    __invGamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), 'invGamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maininvGamma', True)

    
    invGamma = property(__invGamma.value, __invGamma.set, None, u'Inverse Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), 'gamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingamma', True)

    
    gamma = property(__gamma.value, __gamma.set, None, u'Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumOff uses Python identifier lumOff
    __lumOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), 'lumOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainlumOff', True)

    
    lumOff = property(__lumOff.value, __lumOff.set, None, u'Luminance Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenMod uses Python identifier greenMod
    __greenMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), 'greenMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingreenMod', True)

    
    greenMod = property(__greenMod.value, __greenMod.set, None, u'Green Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satMod uses Python identifier satMod
    __satMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), 'satMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainsatMod', True)

    
    satMod = property(__satMod.value, __satMod.set, None, u'Saturation Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumMod uses Python identifier lumMod
    __lumMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), 'lumMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainlumMod', True)

    
    lumMod = property(__lumMod.value, __lumMod.set, None, u'Luminance Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}red uses Python identifier red
    __red = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), 'red', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainred', True)

    
    red = property(__red.value, __red.set, None, u'Red')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redOff uses Python identifier redOff
    __redOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), 'redOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainredOff', True)

    
    redOff = property(__redOff.value, __redOff.set, None, u'Red Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hue uses Python identifier hue
    __hue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainhue', True)

    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redMod uses Python identifier redMod
    __redMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), 'redMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainredMod', True)

    
    redMod = property(__redMod.value, __redMod.set, None, u'Red Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blue uses Python identifier blue
    __blue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), 'blue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainblue', True)

    
    blue = property(__blue.value, __blue.set, None, u'Blue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}green uses Python identifier green
    __green = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), 'green', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingreen', True)

    
    green = property(__green.value, __green.set, None, u'Green')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}inv uses Python identifier inv
    __inv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), 'inv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maininv', True)

    
    inv = property(__inv.value, __inv.set, None, u'Inverse')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, u'Tint')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}shade uses Python identifier shade
    __shade = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), 'shade', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainshade', True)

    
    shade = property(__shade.value, __shade.set, None, u'Shade')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}comp uses Python identifier comp
    __comp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), 'comp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maincomp', True)

    
    comp = property(__comp.value, __comp.set, None, u'Complement')

    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_r', ST_Percentage, required=True)
    
    r = property(__r.value, __r.set, None, u'Red')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_b', ST_Percentage, required=True)
    
    b = property(__b.value, __b.set, None, u'Blue')

    
    # Attribute g uses Python identifier g
    __g = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'g'), 'g', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_g', ST_Percentage, required=True)
    
    g = property(__g.value, __g.set, None, u'Green')


    _ElementMap = {
        __blueOff.name() : __blueOff,
        __gray.name() : __gray,
        __blueMod.name() : __blueMod,
        __alphaOff.name() : __alphaOff,
        __alphaMod.name() : __alphaMod,
        __hueOff.name() : __hueOff,
        __hueMod.name() : __hueMod,
        __greenOff.name() : __greenOff,
        __alpha.name() : __alpha,
        __sat.name() : __sat,
        __satOff.name() : __satOff,
        __lum.name() : __lum,
        __invGamma.name() : __invGamma,
        __gamma.name() : __gamma,
        __lumOff.name() : __lumOff,
        __greenMod.name() : __greenMod,
        __satMod.name() : __satMod,
        __lumMod.name() : __lumMod,
        __red.name() : __red,
        __redOff.name() : __redOff,
        __hue.name() : __hue,
        __redMod.name() : __redMod,
        __blue.name() : __blue,
        __green.name() : __green,
        __inv.name() : __inv,
        __tint.name() : __tint,
        __shade.name() : __shade,
        __comp.name() : __comp
    }
    _AttributeMap = {
        __r.name() : __r,
        __b.name() : __b,
        __g.name() : __g
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ScRgbColor', CT_ScRgbColor)


# Complex type CT_GroupFillProperties with content type EMPTY
class CT_GroupFillProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GroupFillProperties')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GroupFillProperties', CT_GroupFillProperties)


# Complex type CT_GvmlGraphicFrameNonVisual with content type ELEMENT_ONLY
class CT_GvmlGraphicFrameNonVisual (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlGraphicFrameNonVisual')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvGraphicFramePr uses Python identifier cNvGraphicFramePr
    __cNvGraphicFramePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvGraphicFramePr'), 'cNvGraphicFramePr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGraphicFrameNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvGraphicFramePr', False)

    
    cNvGraphicFramePr = property(__cNvGraphicFramePr.value, __cNvGraphicFramePr.set, None, u'Non-Visual Graphic Frame Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvPr uses Python identifier cNvPr
    __cNvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), 'cNvPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGraphicFrameNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvPr', False)

    
    cNvPr = property(__cNvPr.value, __cNvPr.set, None, None)


    _ElementMap = {
        __cNvGraphicFramePr.name() : __cNvGraphicFramePr,
        __cNvPr.name() : __cNvPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlGraphicFrameNonVisual', CT_GvmlGraphicFrameNonVisual)


# Complex type CT_AdjPoint2D with content type EMPTY
class CT_AdjPoint2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AdjPoint2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'y'), 'y', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AdjPoint2D_y', ST_AdjCoordinate, required=True)
    
    y = property(__y.value, __y.set, None, u'Y-Coordinate')

    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'x'), 'x', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AdjPoint2D_x', ST_AdjCoordinate, required=True)
    
    x = property(__x.value, __x.set, None, u'X-Coordinate')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __y.name() : __y,
        __x.name() : __x
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AdjPoint2D', CT_AdjPoint2D)


# Complex type CT_ColorTransformHeader with content type ELEMENT_ONLY
class CT_ColorTransformHeader (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ColorTransformHeader')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeader_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'title'), 'title', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeader_httpschemas_openxmlformats_orgdrawingml2006diagramtitle', True)

    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}catLst uses Python identifier catLst
    __catLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), 'catLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeader_httpschemas_openxmlformats_orgdrawingml2006diagramcatLst', False)

    
    catLst = property(__catLst.value, __catLst.set, None, u'Color Transform Category List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}desc uses Python identifier desc
    __desc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'desc'), 'desc', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeader_httpschemas_openxmlformats_orgdrawingml2006diagramdesc', True)

    
    desc = property(__desc.value, __desc.set, None, u'Description')

    
    # Attribute resId uses Python identifier resId
    __resId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'resId'), 'resId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeader_resId', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    resId = property(__resId.value, __resId.set, None, u'Resource ID')

    
    # Attribute minVer uses Python identifier minVer
    __minVer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minVer'), 'minVer', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeader_minVer', pyxb.binding.datatypes.string, unicode_default=u'http://schemas.openxmlformats.org/drawingml/2006/diagram')
    
    minVer = property(__minVer.value, __minVer.set, None, u'Minimum Version')

    
    # Attribute uniqueId uses Python identifier uniqueId
    __uniqueId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueId'), 'uniqueId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeader_uniqueId', pyxb.binding.datatypes.string, required=True)
    
    uniqueId = property(__uniqueId.value, __uniqueId.set, None, u'Unique ID')


    _ElementMap = {
        __extLst.name() : __extLst,
        __title.name() : __title,
        __catLst.name() : __catLst,
        __desc.name() : __desc
    }
    _AttributeMap = {
        __resId.name() : __resId,
        __minVer.name() : __minVer,
        __uniqueId.name() : __uniqueId
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ColorTransformHeader', CT_ColorTransformHeader)


# Complex type CT_ShapeLocking with content type ELEMENT_ONLY
class CT_ShapeLocking (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ShapeLocking')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute noChangeArrowheads uses Python identifier noChangeArrowheads
    __noChangeArrowheads = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeArrowheads'), 'noChangeArrowheads', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noChangeArrowheads', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeArrowheads = property(__noChangeArrowheads.value, __noChangeArrowheads.set, None, u'Disallow Arrowhead Changes')

    
    # Attribute noMove uses Python identifier noMove
    __noMove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noMove'), 'noMove', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noMove', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noMove = property(__noMove.value, __noMove.set, None, u'Disallow Shape Movement')

    
    # Attribute noSelect uses Python identifier noSelect
    __noSelect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noSelect'), 'noSelect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noSelect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noSelect = property(__noSelect.value, __noSelect.set, None, u'Disallow Shape Selection')

    
    # Attribute noResize uses Python identifier noResize
    __noResize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noResize'), 'noResize', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noResize', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noResize = property(__noResize.value, __noResize.set, None, u'Disallow Shape Resize')

    
    # Attribute noEditPoints uses Python identifier noEditPoints
    __noEditPoints = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noEditPoints'), 'noEditPoints', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noEditPoints', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noEditPoints = property(__noEditPoints.value, __noEditPoints.set, None, u'Disallow Shape Point Editing')

    
    # Attribute noRot uses Python identifier noRot
    __noRot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noRot'), 'noRot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noRot', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noRot = property(__noRot.value, __noRot.set, None, u'Disallow Shape Rotation')

    
    # Attribute noAdjustHandles uses Python identifier noAdjustHandles
    __noAdjustHandles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noAdjustHandles'), 'noAdjustHandles', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noAdjustHandles', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noAdjustHandles = property(__noAdjustHandles.value, __noAdjustHandles.set, None, u'Disallow Showing Adjust Handles')

    
    # Attribute noChangeAspect uses Python identifier noChangeAspect
    __noChangeAspect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeAspect'), 'noChangeAspect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noChangeAspect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeAspect = property(__noChangeAspect.value, __noChangeAspect.set, None, u'Disallow Aspect Ratio Change')

    
    # Attribute noTextEdit uses Python identifier noTextEdit
    __noTextEdit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noTextEdit'), 'noTextEdit', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noTextEdit', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noTextEdit = property(__noTextEdit.value, __noTextEdit.set, None, u'Disallow Shape Text Editing')

    
    # Attribute noChangeShapeType uses Python identifier noChangeShapeType
    __noChangeShapeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeShapeType'), 'noChangeShapeType', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noChangeShapeType', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeShapeType = property(__noChangeShapeType.value, __noChangeShapeType.set, None, u'Disallow Shape Type Change')

    
    # Attribute noGrp uses Python identifier noGrp
    __noGrp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noGrp'), 'noGrp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noGrp', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noGrp = property(__noGrp.value, __noGrp.set, None, u'Disallow Shape Grouping')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __noChangeArrowheads.name() : __noChangeArrowheads,
        __noMove.name() : __noMove,
        __noSelect.name() : __noSelect,
        __noResize.name() : __noResize,
        __noEditPoints.name() : __noEditPoints,
        __noRot.name() : __noRot,
        __noAdjustHandles.name() : __noAdjustHandles,
        __noChangeAspect.name() : __noChangeAspect,
        __noTextEdit.name() : __noTextEdit,
        __noChangeShapeType.name() : __noChangeShapeType,
        __noGrp.name() : __noGrp
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ShapeLocking', CT_ShapeLocking)


# Complex type CT_TLIterateIntervalTime with content type EMPTY
class CT_TLIterateIntervalTime (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLIterateIntervalTime')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLIterateIntervalTime_val', ST_TLTime, required=True)
    
    val = property(__val.value, __val.set, None, u'Time')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLIterateIntervalTime', CT_TLIterateIntervalTime)


# Complex type CT_FlatText with content type EMPTY
class CT_FlatText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FlatText')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute z uses Python identifier z
    __z = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'z'), 'z', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FlatText_z', ST_Coordinate, unicode_default=u'0')
    
    z = property(__z.value, __z.set, None, u'Z Coordinate')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __z.name() : __z
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FlatText', CT_FlatText)


# Complex type CT_DefaultShapeDefinition with content type ELEMENT_ONLY
class CT_DefaultShapeDefinition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_DefaultShapeDefinition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DefaultShapeDefinition_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spPr uses Python identifier spPr
    __spPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), 'spPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DefaultShapeDefinition_httpschemas_openxmlformats_orgdrawingml2006mainspPr', False)

    
    spPr = property(__spPr.value, __spPr.set, None, u'Visual Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bodyPr uses Python identifier bodyPr
    __bodyPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bodyPr'), 'bodyPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DefaultShapeDefinition_httpschemas_openxmlformats_orgdrawingml2006mainbodyPr', False)

    
    bodyPr = property(__bodyPr.value, __bodyPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), 'style', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DefaultShapeDefinition_httpschemas_openxmlformats_orgdrawingml2006mainstyle', False)

    
    style = property(__style.value, __style.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lstStyle uses Python identifier lstStyle
    __lstStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lstStyle'), 'lstStyle', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DefaultShapeDefinition_httpschemas_openxmlformats_orgdrawingml2006mainlstStyle', False)

    
    lstStyle = property(__lstStyle.value, __lstStyle.set, None, None)


    _ElementMap = {
        __extLst.name() : __extLst,
        __spPr.name() : __spPr,
        __bodyPr.name() : __bodyPr,
        __style.name() : __style,
        __lstStyle.name() : __lstStyle
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_DefaultShapeDefinition', CT_DefaultShapeDefinition)


# Complex type CT_FixedPercentage with content type EMPTY
class CT_FixedPercentage (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FixedPercentage')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FixedPercentage_val', ST_FixedPercentage, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FixedPercentage', CT_FixedPercentage)


# Complex type CT_ColorChangeEffect with content type ELEMENT_ONLY
class CT_ColorChangeEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorChangeEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrTo uses Python identifier clrTo
    __clrTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrTo'), 'clrTo', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorChangeEffect_httpschemas_openxmlformats_orgdrawingml2006mainclrTo', False)

    
    clrTo = property(__clrTo.value, __clrTo.set, None, u'Change Color To')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrFrom uses Python identifier clrFrom
    __clrFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrFrom'), 'clrFrom', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorChangeEffect_httpschemas_openxmlformats_orgdrawingml2006mainclrFrom', False)

    
    clrFrom = property(__clrFrom.value, __clrFrom.set, None, u'Change Color From')

    
    # Attribute useA uses Python identifier useA
    __useA = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'useA'), 'useA', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorChangeEffect_useA', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    useA = property(__useA.value, __useA.set, None, u'Consider Alpha Values')


    _ElementMap = {
        __clrTo.name() : __clrTo,
        __clrFrom.name() : __clrFrom
    }
    _AttributeMap = {
        __useA.name() : __useA
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorChangeEffect', CT_ColorChangeEffect)


# Complex type CT_NonVisualConnectorProperties with content type ELEMENT_ONLY
class CT_NonVisualConnectorProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_NonVisualConnectorProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualConnectorProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cxnSpLocks uses Python identifier cxnSpLocks
    __cxnSpLocks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnSpLocks'), 'cxnSpLocks', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualConnectorProperties_httpschemas_openxmlformats_orgdrawingml2006maincxnSpLocks', False)

    
    cxnSpLocks = property(__cxnSpLocks.value, __cxnSpLocks.set, None, u'Connection Shape Locks')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}stCxn uses Python identifier stCxn
    __stCxn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'stCxn'), 'stCxn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualConnectorProperties_httpschemas_openxmlformats_orgdrawingml2006mainstCxn', False)

    
    stCxn = property(__stCxn.value, __stCxn.set, None, u'Connection Start')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}endCxn uses Python identifier endCxn
    __endCxn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'endCxn'), 'endCxn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualConnectorProperties_httpschemas_openxmlformats_orgdrawingml2006mainendCxn', False)

    
    endCxn = property(__endCxn.value, __endCxn.set, None, u'Connection End')


    _ElementMap = {
        __extLst.name() : __extLst,
        __cxnSpLocks.name() : __cxnSpLocks,
        __stCxn.name() : __stCxn,
        __endCxn.name() : __endCxn
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_NonVisualConnectorProperties', CT_NonVisualConnectorProperties)


# Complex type CT_AudioCDTime with content type EMPTY
class CT_AudioCDTime (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AudioCDTime')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute track uses Python identifier track
    __track = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'track'), 'track', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioCDTime_track', pyxb.binding.datatypes.unsignedByte, required=True)
    
    track = property(__track.value, __track.set, None, u'Track')

    
    # Attribute time uses Python identifier time
    __time = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'time'), 'time', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioCDTime_time', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    time = property(__time.value, __time.set, None, u'Time')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __track.name() : __track,
        __time.name() : __time
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AudioCDTime', CT_AudioCDTime)


# Complex type CT_Direction with content type EMPTY
class CT_Direction (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Direction')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Direction_val', ST_Direction, unicode_default=u'norm')
    
    val = property(__val.value, __val.set, None, u'Diagram Direction Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Direction', CT_Direction)


# Complex type CT_TablePartStyle with content type ELEMENT_ONLY
class CT_TablePartStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TablePartStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tcStyle uses Python identifier tcStyle
    __tcStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tcStyle'), 'tcStyle', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TablePartStyle_httpschemas_openxmlformats_orgdrawingml2006maintcStyle', False)

    
    tcStyle = property(__tcStyle.value, __tcStyle.set, None, u'Table Cell Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tcTxStyle uses Python identifier tcTxStyle
    __tcTxStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tcTxStyle'), 'tcTxStyle', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TablePartStyle_httpschemas_openxmlformats_orgdrawingml2006maintcTxStyle', False)

    
    tcTxStyle = property(__tcTxStyle.value, __tcTxStyle.set, None, u'Table Cell Text Style')


    _ElementMap = {
        __tcStyle.name() : __tcStyle,
        __tcTxStyle.name() : __tcTxStyle
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TablePartStyle', CT_TablePartStyle)


# Complex type CT_HtmlPublishProperties with content type ELEMENT_ONLY
class CT_HtmlPublishProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_HtmlPublishProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HtmlPublishProperties_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sldAll uses Python identifier sldAll
    __sldAll = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sldAll'), 'sldAll', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HtmlPublishProperties_httpschemas_openxmlformats_orgpresentationml2006mainsldAll', False)

    
    sldAll = property(__sldAll.value, __sldAll.set, None, u'All Slides')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}custShow uses Python identifier custShow
    __custShow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'custShow'), 'custShow', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HtmlPublishProperties_httpschemas_openxmlformats_orgpresentationml2006maincustShow', False)

    
    custShow = property(__custShow.value, __custShow.set, None, u'Custom Show')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sldRg uses Python identifier sldRg
    __sldRg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sldRg'), 'sldRg', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HtmlPublishProperties_httpschemas_openxmlformats_orgpresentationml2006mainsldRg', False)

    
    sldRg = property(__sldRg.value, __sldRg.set, None, u'Slide Range')

    
    # Attribute showSpeakerNotes uses Python identifier showSpeakerNotes
    __showSpeakerNotes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showSpeakerNotes'), 'showSpeakerNotes', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HtmlPublishProperties_showSpeakerNotes', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showSpeakerNotes = property(__showSpeakerNotes.value, __showSpeakerNotes.set, None, u'Show Speaker Notes')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HtmlPublishProperties_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HtmlPublishProperties_title', pyxb.binding.datatypes.string, unicode_default=u'')
    
    title = property(__title.value, __title.set, None, u'HTML Output Title')

    
    # Attribute target uses Python identifier target
    __target = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'target'), 'target', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HtmlPublishProperties_target', pyxb.binding.datatypes.string)
    
    target = property(__target.value, __target.set, None, u'Target Output Profile')


    _ElementMap = {
        __extLst.name() : __extLst,
        __sldAll.name() : __sldAll,
        __custShow.name() : __custShow,
        __sldRg.name() : __sldRg
    }
    _AttributeMap = {
        __showSpeakerNotes.name() : __showSpeakerNotes,
        __id.name() : __id,
        __title.name() : __title,
        __target.name() : __target
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_HtmlPublishProperties', CT_HtmlPublishProperties)


# Complex type CT_NormalViewPortion with content type EMPTY
class CT_NormalViewPortion (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_NormalViewPortion')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute sz uses Python identifier sz
    __sz = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sz'), 'sz', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NormalViewPortion_sz', ST_PositiveFixedPercentage, required=True)
    
    sz = property(__sz.value, __sz.set, None, u'Normal View Dimension Size')

    
    # Attribute autoAdjust uses Python identifier autoAdjust
    __autoAdjust = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoAdjust'), 'autoAdjust', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NormalViewPortion_autoAdjust', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoAdjust = property(__autoAdjust.value, __autoAdjust.set, None, u'Auto Adjust Normal View')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __sz.name() : __sz,
        __autoAdjust.name() : __autoAdjust
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_NormalViewPortion', CT_NormalViewPortion)


# Complex type CT_PresetTextShape with content type ELEMENT_ONLY
class CT_PresetTextShape (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PresetTextShape')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}avLst uses Python identifier avLst
    __avLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst'), 'avLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetTextShape_httpschemas_openxmlformats_orgdrawingml2006mainavLst', False)

    
    avLst = property(__avLst.value, __avLst.set, None, u'Adjust Value List')

    
    # Attribute prst uses Python identifier prst
    __prst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prst'), 'prst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetTextShape_prst', ST_TextShapeType, required=True)
    
    prst = property(__prst.value, __prst.set, None, u'Preset Warp Shape')


    _ElementMap = {
        __avLst.name() : __avLst
    }
    _AttributeMap = {
        __prst.name() : __prst
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PresetTextShape', CT_PresetTextShape)


# Complex type CT_AlphaCeilingEffect with content type EMPTY
class CT_AlphaCeilingEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaCeilingEffect')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaCeilingEffect', CT_AlphaCeilingEffect)


# Complex type CT_VideoFile with content type ELEMENT_ONLY
class CT_VideoFile (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_VideoFile')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_VideoFile_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute contentType uses Python identifier contentType
    __contentType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'contentType'), 'contentType', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_VideoFile_contentType', pyxb.binding.datatypes.string)
    
    contentType = property(__contentType.value, __contentType.set, None, u'Content Type of Linked Video File')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}link uses Python identifier link
    __link = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'link'), 'link', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_VideoFile_httpschemas_openxmlformats_orgofficeDocument2006relationshipslink', _r.ST_RelationshipId, required=True)
    
    link = property(__link.value, __link.set, None, None)


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __contentType.name() : __contentType,
        __link.name() : __link
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_VideoFile', CT_VideoFile)


# Complex type CT_LayoutNode with content type ELEMENT_ONLY
class CT_LayoutNode (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_LayoutNode')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}choose uses Python identifier choose
    __choose = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'choose'), 'choose', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramchoose', True)

    
    choose = property(__choose.value, __choose.set, None, u'Choose Element')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}layoutNode uses Python identifier layoutNode
    __layoutNode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), 'layoutNode', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramlayoutNode', True)

    
    layoutNode = property(__layoutNode.value, __layoutNode.set, None, u'Layout Node')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}presOf uses Python identifier presOf
    __presOf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), 'presOf', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagrampresOf', True)

    
    presOf = property(__presOf.value, __presOf.set, None, u'Presentation Of')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}constrLst uses Python identifier constrLst
    __constrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), 'constrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramconstrLst', True)

    
    constrLst = property(__constrLst.value, __constrLst.set, None, u'Constraint List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}shape uses Python identifier shape
    __shape = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'shape'), 'shape', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramshape', True)

    
    shape = property(__shape.value, __shape.set, None, u'Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}ruleLst uses Python identifier ruleLst
    __ruleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), 'ruleLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramruleLst', True)

    
    ruleLst = property(__ruleLst.value, __ruleLst.set, None, u'Rule List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', True)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}varLst uses Python identifier varLst
    __varLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'varLst'), 'varLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramvarLst', True)

    
    varLst = property(__varLst.value, __varLst.set, None, u'Variable List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}alg uses Python identifier alg
    __alg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'alg'), 'alg', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramalg', True)

    
    alg = property(__alg.value, __alg.set, None, u'Algorithm')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}forEach uses Python identifier forEach
    __forEach = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), 'forEach', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramforEach', True)

    
    forEach = property(__forEach.value, __forEach.set, None, u'For Each')

    
    # Attribute chOrder uses Python identifier chOrder
    __chOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'chOrder'), 'chOrder', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_chOrder', ST_ChildOrderType, unicode_default=u'b')
    
    chOrder = property(__chOrder.value, __chOrder.set, None, u'Child Order')

    
    # Attribute moveWith uses Python identifier moveWith
    __moveWith = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'moveWith'), 'moveWith', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_moveWith', pyxb.binding.datatypes.string, unicode_default=u'')
    
    moveWith = property(__moveWith.value, __moveWith.set, None, u'Move With')

    
    # Attribute styleLbl uses Python identifier styleLbl
    __styleLbl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'styleLbl'), 'styleLbl', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_styleLbl', pyxb.binding.datatypes.string, unicode_default=u'')
    
    styleLbl = property(__styleLbl.value, __styleLbl.set, None, u'Style Label')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __choose.name() : __choose,
        __layoutNode.name() : __layoutNode,
        __presOf.name() : __presOf,
        __constrLst.name() : __constrLst,
        __shape.name() : __shape,
        __ruleLst.name() : __ruleLst,
        __extLst.name() : __extLst,
        __varLst.name() : __varLst,
        __alg.name() : __alg,
        __forEach.name() : __forEach
    }
    _AttributeMap = {
        __chOrder.name() : __chOrder,
        __moveWith.name() : __moveWith,
        __styleLbl.name() : __styleLbl,
        __name.name() : __name
    }
_Namespace.addCategoryObject('typeBinding', u'CT_LayoutNode', CT_LayoutNode)


# Complex type CT_ApplicationNonVisualDrawingProps with content type ELEMENT_ONLY
class CT_ApplicationNonVisualDrawingProps (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_ApplicationNonVisualDrawingProps')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}wavAudioFile uses Python identifier wavAudioFile
    __wavAudioFile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'wavAudioFile'), 'wavAudioFile', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ApplicationNonVisualDrawingProps_httpschemas_openxmlformats_orgdrawingml2006mainwavAudioFile', False)

    
    wavAudioFile = property(__wavAudioFile.value, __wavAudioFile.set, None, u'Audio from WAV File')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}ph uses Python identifier ph
    __ph = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'ph'), 'ph', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ApplicationNonVisualDrawingProps_httpschemas_openxmlformats_orgpresentationml2006mainph', False)

    
    ph = property(__ph.value, __ph.set, None, u'Placeholder Shape')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}custDataLst uses Python identifier custDataLst
    __custDataLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'custDataLst'), 'custDataLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ApplicationNonVisualDrawingProps_httpschemas_openxmlformats_orgpresentationml2006maincustDataLst', False)

    
    custDataLst = property(__custDataLst.value, __custDataLst.set, None, u'Customer Data List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}audioFile uses Python identifier audioFile
    __audioFile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'audioFile'), 'audioFile', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ApplicationNonVisualDrawingProps_httpschemas_openxmlformats_orgdrawingml2006mainaudioFile', False)

    
    audioFile = property(__audioFile.value, __audioFile.set, None, u'Audio from File')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}videoFile uses Python identifier videoFile
    __videoFile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'videoFile'), 'videoFile', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ApplicationNonVisualDrawingProps_httpschemas_openxmlformats_orgdrawingml2006mainvideoFile', False)

    
    videoFile = property(__videoFile.value, __videoFile.set, None, u'Video from File')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ApplicationNonVisualDrawingProps_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}quickTimeFile uses Python identifier quickTimeFile
    __quickTimeFile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'quickTimeFile'), 'quickTimeFile', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ApplicationNonVisualDrawingProps_httpschemas_openxmlformats_orgdrawingml2006mainquickTimeFile', False)

    
    quickTimeFile = property(__quickTimeFile.value, __quickTimeFile.set, None, u'QuickTime from File')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}audioCd uses Python identifier audioCd
    __audioCd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'audioCd'), 'audioCd', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ApplicationNonVisualDrawingProps_httpschemas_openxmlformats_orgdrawingml2006mainaudioCd', False)

    
    audioCd = property(__audioCd.value, __audioCd.set, None, u'Audio from CD')

    
    # Attribute isPhoto uses Python identifier isPhoto
    __isPhoto = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'isPhoto'), 'isPhoto', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ApplicationNonVisualDrawingProps_isPhoto', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    isPhoto = property(__isPhoto.value, __isPhoto.set, None, u'Is a Photo Album')

    
    # Attribute userDrawn uses Python identifier userDrawn
    __userDrawn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'userDrawn'), 'userDrawn', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ApplicationNonVisualDrawingProps_userDrawn', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    userDrawn = property(__userDrawn.value, __userDrawn.set, None, u'Is User Drawn')


    _ElementMap = {
        __wavAudioFile.name() : __wavAudioFile,
        __ph.name() : __ph,
        __custDataLst.name() : __custDataLst,
        __audioFile.name() : __audioFile,
        __videoFile.name() : __videoFile,
        __extLst.name() : __extLst,
        __quickTimeFile.name() : __quickTimeFile,
        __audioCd.name() : __audioCd
    }
    _AttributeMap = {
        __isPhoto.name() : __isPhoto,
        __userDrawn.name() : __userDrawn
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_ApplicationNonVisualDrawingProps', CT_ApplicationNonVisualDrawingProps)


# Complex type CT_PresetLineDashProperties with content type EMPTY
class CT_PresetLineDashProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PresetLineDashProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetLineDashProperties_val', ST_PresetLineDashVal)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PresetLineDashProperties', CT_PresetLineDashProperties)


# Complex type CT_SRgbColor with content type ELEMENT_ONLY
class CT_SRgbColor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_SRgbColor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumMod uses Python identifier lumMod
    __lumMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), 'lumMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainlumMod', True)

    
    lumMod = property(__lumMod.value, __lumMod.set, None, u'Luminance Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumOff uses Python identifier lumOff
    __lumOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), 'lumOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainlumOff', True)

    
    lumOff = property(__lumOff.value, __lumOff.set, None, u'Luminance Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}red uses Python identifier red
    __red = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), 'red', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainred', True)

    
    red = property(__red.value, __red.set, None, u'Red')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}invGamma uses Python identifier invGamma
    __invGamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), 'invGamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maininvGamma', True)

    
    invGamma = property(__invGamma.value, __invGamma.set, None, u'Inverse Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redOff uses Python identifier redOff
    __redOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), 'redOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainredOff', True)

    
    redOff = property(__redOff.value, __redOff.set, None, u'Red Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blue uses Python identifier blue
    __blue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), 'blue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainblue', True)

    
    blue = property(__blue.value, __blue.set, None, u'Blue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redMod uses Python identifier redMod
    __redMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), 'redMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainredMod', True)

    
    redMod = property(__redMod.value, __redMod.set, None, u'Red Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}inv uses Python identifier inv
    __inv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), 'inv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maininv', True)

    
    inv = property(__inv.value, __inv.set, None, u'Inverse')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}green uses Python identifier green
    __green = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), 'green', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingreen', True)

    
    green = property(__green.value, __green.set, None, u'Green')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, u'Tint')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenMod uses Python identifier greenMod
    __greenMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), 'greenMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingreenMod', True)

    
    greenMod = property(__greenMod.value, __greenMod.set, None, u'Green Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenOff uses Python identifier greenOff
    __greenOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), 'greenOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingreenOff', True)

    
    greenOff = property(__greenOff.value, __greenOff.set, None, u'Green Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}comp uses Python identifier comp
    __comp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), 'comp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maincomp', True)

    
    comp = property(__comp.value, __comp.set, None, u'Complement')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueOff uses Python identifier blueOff
    __blueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), 'blueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainblueOff', True)

    
    blueOff = property(__blueOff.value, __blueOff.set, None, u'Blue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gray uses Python identifier gray
    __gray = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), 'gray', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingray', True)

    
    gray = property(__gray.value, __gray.set, None, u'Gray')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alpha uses Python identifier alpha
    __alpha = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), 'alpha', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainalpha', True)

    
    alpha = property(__alpha.value, __alpha.set, None, u'Alpha')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaOff uses Python identifier alphaOff
    __alphaOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), 'alphaOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaOff', True)

    
    alphaOff = property(__alphaOff.value, __alphaOff.set, None, u'Alpha Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, u'Alpha Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hue uses Python identifier hue
    __hue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainhue', True)

    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueOff uses Python identifier hueOff
    __hueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), 'hueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainhueOff', True)

    
    hueOff = property(__hueOff.value, __hueOff.set, None, u'Hue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueMod uses Python identifier blueMod
    __blueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), 'blueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainblueMod', True)

    
    blueMod = property(__blueMod.value, __blueMod.set, None, u'Blue Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}shade uses Python identifier shade
    __shade = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), 'shade', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainshade', True)

    
    shade = property(__shade.value, __shade.set, None, u'Shade')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueMod uses Python identifier hueMod
    __hueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), 'hueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainhueMod', True)

    
    hueMod = property(__hueMod.value, __hueMod.set, None, u'Hue Modulate')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sat uses Python identifier sat
    __sat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), 'sat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainsat', True)

    
    sat = property(__sat.value, __sat.set, None, u'Saturation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satOff uses Python identifier satOff
    __satOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), 'satOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainsatOff', True)

    
    satOff = property(__satOff.value, __satOff.set, None, u'Saturation Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), 'gamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingamma', True)

    
    gamma = property(__gamma.value, __gamma.set, None, u'Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satMod uses Python identifier satMod
    __satMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), 'satMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainsatMod', True)

    
    satMod = property(__satMod.value, __satMod.set, None, u'Saturation Modulation')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_val', _s.ST_HexColorRGB, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        __lumMod.name() : __lumMod,
        __lumOff.name() : __lumOff,
        __red.name() : __red,
        __invGamma.name() : __invGamma,
        __redOff.name() : __redOff,
        __blue.name() : __blue,
        __redMod.name() : __redMod,
        __inv.name() : __inv,
        __green.name() : __green,
        __tint.name() : __tint,
        __greenMod.name() : __greenMod,
        __greenOff.name() : __greenOff,
        __comp.name() : __comp,
        __blueOff.name() : __blueOff,
        __gray.name() : __gray,
        __alpha.name() : __alpha,
        __alphaOff.name() : __alphaOff,
        __lum.name() : __lum,
        __alphaMod.name() : __alphaMod,
        __hue.name() : __hue,
        __hueOff.name() : __hueOff,
        __blueMod.name() : __blueMod,
        __shade.name() : __shade,
        __hueMod.name() : __hueMod,
        __sat.name() : __sat,
        __satOff.name() : __satOff,
        __gamma.name() : __gamma,
        __satMod.name() : __satMod
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_SRgbColor', CT_SRgbColor)


# Complex type CT_NonVisualDrawingShapeProps with content type ELEMENT_ONLY
class CT_NonVisualDrawingShapeProps (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_NonVisualDrawingShapeProps')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingShapeProps_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spLocks uses Python identifier spLocks
    __spLocks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spLocks'), 'spLocks', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingShapeProps_httpschemas_openxmlformats_orgdrawingml2006mainspLocks', False)

    
    spLocks = property(__spLocks.value, __spLocks.set, None, u'Shape Locks')

    
    # Attribute txBox uses Python identifier txBox
    __txBox = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'txBox'), 'txBox', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingShapeProps_txBox', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    txBox = property(__txBox.value, __txBox.set, None, u'Text Box')


    _ElementMap = {
        __extLst.name() : __extLst,
        __spLocks.name() : __spLocks
    }
    _AttributeMap = {
        __txBox.name() : __txBox
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_NonVisualDrawingShapeProps', CT_NonVisualDrawingShapeProps)


# Complex type CT_TLByRgbColorTransform with content type EMPTY
class CT_TLByRgbColorTransform (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLByRgbColorTransform')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLByRgbColorTransform_r', ST_FixedPercentage, required=True)
    
    r = property(__r.value, __r.set, None, u'Red')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLByRgbColorTransform_b', ST_FixedPercentage, required=True)
    
    b = property(__b.value, __b.set, None, u'Blue')

    
    # Attribute g uses Python identifier g
    __g = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'g'), 'g', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLByRgbColorTransform_g', ST_FixedPercentage, required=True)
    
    g = property(__g.value, __g.set, None, u'Green')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __r.name() : __r,
        __b.name() : __b,
        __g.name() : __g
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLByRgbColorTransform', CT_TLByRgbColorTransform)


# Complex type CT_CommentAuthorList with content type ELEMENT_ONLY
class CT_CommentAuthorList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_CommentAuthorList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cmAuthor uses Python identifier cmAuthor
    __cmAuthor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cmAuthor'), 'cmAuthor', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommentAuthorList_httpschemas_openxmlformats_orgpresentationml2006maincmAuthor', True)

    
    cmAuthor = property(__cmAuthor.value, __cmAuthor.set, None, u'Comment Author')


    _ElementMap = {
        __cmAuthor.name() : __cmAuthor
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_CommentAuthorList', CT_CommentAuthorList)


# Complex type CT_Blip with content type ELEMENT_ONLY
class CT_Blip (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Blip')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaBiLevel uses Python identifier alphaBiLevel
    __alphaBiLevel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaBiLevel'), 'alphaBiLevel', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainalphaBiLevel', True)

    
    alphaBiLevel = property(__alphaBiLevel.value, __alphaBiLevel.set, None, u'Alpha Bi-Level Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}biLevel uses Python identifier biLevel
    __biLevel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'biLevel'), 'biLevel', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainbiLevel', True)

    
    biLevel = property(__biLevel.value, __biLevel.set, None, u'Bi-Level (Black/White) Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaFloor uses Python identifier alphaFloor
    __alphaFloor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaFloor'), 'alphaFloor', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainalphaFloor', True)

    
    alphaFloor = property(__alphaFloor.value, __alphaFloor.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blur uses Python identifier blur
    __blur = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blur'), 'blur', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainblur', True)

    
    blur = property(__blur.value, __blur.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrChange uses Python identifier clrChange
    __clrChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrChange'), 'clrChange', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainclrChange', True)

    
    clrChange = property(__clrChange.value, __clrChange.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, u'Tint Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaCeiling uses Python identifier alphaCeiling
    __alphaCeiling = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaCeiling'), 'alphaCeiling', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainalphaCeiling', True)

    
    alphaCeiling = property(__alphaCeiling.value, __alphaCeiling.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hsl uses Python identifier hsl
    __hsl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hsl'), 'hsl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainhsl', True)

    
    hsl = property(__hsl.value, __hsl.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grayscl uses Python identifier grayscl
    __grayscl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grayscl'), 'grayscl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006maingrayscl', True)

    
    grayscl = property(__grayscl.value, __grayscl.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}duotone uses Python identifier duotone
    __duotone = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'duotone'), 'duotone', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainduotone', True)

    
    duotone = property(__duotone.value, __duotone.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaInv uses Python identifier alphaInv
    __alphaInv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaInv'), 'alphaInv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainalphaInv', True)

    
    alphaInv = property(__alphaInv.value, __alphaInv.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrRepl uses Python identifier clrRepl
    __clrRepl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrRepl'), 'clrRepl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainclrRepl', True)

    
    clrRepl = property(__clrRepl.value, __clrRepl.set, None, u'Solid Color Replacement')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillOverlay uses Python identifier fillOverlay
    __fillOverlay = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay'), 'fillOverlay', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainfillOverlay', True)

    
    fillOverlay = property(__fillOverlay.value, __fillOverlay.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaRepl uses Python identifier alphaRepl
    __alphaRepl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaRepl'), 'alphaRepl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainalphaRepl', True)

    
    alphaRepl = property(__alphaRepl.value, __alphaRepl.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaModFix uses Python identifier alphaModFix
    __alphaModFix = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaModFix'), 'alphaModFix', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainalphaModFix', True)

    
    alphaModFix = property(__alphaModFix.value, __alphaModFix.set, None, u'Alpha Modulate Fixed Effect')

    
    # Attribute cstate uses Python identifier cstate
    __cstate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cstate'), 'cstate', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_cstate', ST_BlipCompression, unicode_default=u'none')
    
    cstate = property(__cstate.value, __cstate.set, None, u'Compression State')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}embed uses Python identifier embed
    __embed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'embed'), 'embed', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgofficeDocument2006relationshipsembed', _r.ST_RelationshipId, unicode_default=u'')
    
    embed = property(__embed.value, __embed.set, None, u'Embedded Image Relationship Target')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}link uses Python identifier link
    __link = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'link'), 'link', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgofficeDocument2006relationshipslink', _r.ST_RelationshipId, unicode_default=u'')
    
    link = property(__link.value, __link.set, None, None)


    _ElementMap = {
        __alphaBiLevel.name() : __alphaBiLevel,
        __biLevel.name() : __biLevel,
        __alphaFloor.name() : __alphaFloor,
        __extLst.name() : __extLst,
        __blur.name() : __blur,
        __lum.name() : __lum,
        __clrChange.name() : __clrChange,
        __tint.name() : __tint,
        __alphaCeiling.name() : __alphaCeiling,
        __hsl.name() : __hsl,
        __grayscl.name() : __grayscl,
        __alphaMod.name() : __alphaMod,
        __duotone.name() : __duotone,
        __alphaInv.name() : __alphaInv,
        __clrRepl.name() : __clrRepl,
        __fillOverlay.name() : __fillOverlay,
        __alphaRepl.name() : __alphaRepl,
        __alphaModFix.name() : __alphaModFix
    }
    _AttributeMap = {
        __cstate.name() : __cstate,
        __embed.name() : __embed,
        __link.name() : __link
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Blip', CT_Blip)


# Complex type CT_CustomGeometry2D with content type ELEMENT_ONLY
class CT_CustomGeometry2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_CustomGeometry2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}rect uses Python identifier rect
    __rect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'rect'), 'rect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomGeometry2D_httpschemas_openxmlformats_orgdrawingml2006mainrect', False)

    
    rect = property(__rect.value, __rect.set, None, u'Shape Text Rectangle')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pathLst uses Python identifier pathLst
    __pathLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pathLst'), 'pathLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomGeometry2D_httpschemas_openxmlformats_orgdrawingml2006mainpathLst', False)

    
    pathLst = property(__pathLst.value, __pathLst.set, None, u'List of Shape Paths')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cxnLst uses Python identifier cxnLst
    __cxnLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnLst'), 'cxnLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomGeometry2D_httpschemas_openxmlformats_orgdrawingml2006maincxnLst', False)

    
    cxnLst = property(__cxnLst.value, __cxnLst.set, None, u'List of Shape Connection Sites')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gdLst uses Python identifier gdLst
    __gdLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gdLst'), 'gdLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomGeometry2D_httpschemas_openxmlformats_orgdrawingml2006maingdLst', False)

    
    gdLst = property(__gdLst.value, __gdLst.set, None, u'List of Shape Guides')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ahLst uses Python identifier ahLst
    __ahLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ahLst'), 'ahLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomGeometry2D_httpschemas_openxmlformats_orgdrawingml2006mainahLst', False)

    
    ahLst = property(__ahLst.value, __ahLst.set, None, u'List of Shape Adjust Handles')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}avLst uses Python identifier avLst
    __avLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst'), 'avLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomGeometry2D_httpschemas_openxmlformats_orgdrawingml2006mainavLst', False)

    
    avLst = property(__avLst.value, __avLst.set, None, u'Adjust Value List')


    _ElementMap = {
        __rect.name() : __rect,
        __pathLst.name() : __pathLst,
        __cxnLst.name() : __cxnLst,
        __gdLst.name() : __gdLst,
        __ahLst.name() : __ahLst,
        __avLst.name() : __avLst
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_CustomGeometry2D', CT_CustomGeometry2D)


# Complex type CT_TableCellBorderStyle with content type ELEMENT_ONLY
class CT_TableCellBorderStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableCellBorderStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bottom uses Python identifier bottom
    __bottom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bottom'), 'bottom', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006mainbottom', False)

    
    bottom = property(__bottom.value, __bottom.set, None, u'Bottom Border')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}insideV uses Python identifier insideV
    __insideV = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'insideV'), 'insideV', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006maininsideV', False)

    
    insideV = property(__insideV.value, __insideV.set, None, u'Inside Vertical Border')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}insideH uses Python identifier insideH
    __insideH = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'insideH'), 'insideH', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006maininsideH', False)

    
    insideH = property(__insideH.value, __insideH.set, None, u'Inside Horizontal Border')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}left uses Python identifier left
    __left = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'left'), 'left', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006mainleft', False)

    
    left = property(__left.value, __left.set, None, u'Left Border')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tl2br uses Python identifier tl2br
    __tl2br = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tl2br'), 'tl2br', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006maintl2br', False)

    
    tl2br = property(__tl2br.value, __tl2br.set, None, u'Top Left to Bottom Right Border')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}right uses Python identifier right
    __right = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'right'), 'right', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006mainright', False)

    
    right = property(__right.value, __right.set, None, u'Right Border')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tr2bl uses Python identifier tr2bl
    __tr2bl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tr2bl'), 'tr2bl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006maintr2bl', False)

    
    tr2bl = property(__tr2bl.value, __tr2bl.set, None, u'Top Right to Bottom Left Border')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}top uses Python identifier top
    __top = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'top'), 'top', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006maintop', False)

    
    top = property(__top.value, __top.set, None, u'Top Border')


    _ElementMap = {
        __extLst.name() : __extLst,
        __bottom.name() : __bottom,
        __insideV.name() : __insideV,
        __insideH.name() : __insideH,
        __left.name() : __left,
        __tl2br.name() : __tl2br,
        __right.name() : __right,
        __tr2bl.name() : __tr2bl,
        __top.name() : __top
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableCellBorderStyle', CT_TableCellBorderStyle)


# Complex type CT_TableCell with content type ELEMENT_ONLY
class CT_TableCell (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableCell')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}txBody uses Python identifier txBody
    __txBody = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'txBody'), 'txBody', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_httpschemas_openxmlformats_orgdrawingml2006maintxBody', False)

    
    txBody = property(__txBody.value, __txBody.set, None, u'Text Body')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tcPr uses Python identifier tcPr
    __tcPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tcPr'), 'tcPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_httpschemas_openxmlformats_orgdrawingml2006maintcPr', False)

    
    tcPr = property(__tcPr.value, __tcPr.set, None, u'Table Cell Properties')

    
    # Attribute gridSpan uses Python identifier gridSpan
    __gridSpan = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gridSpan'), 'gridSpan', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_gridSpan', pyxb.binding.datatypes.int, unicode_default=u'1')
    
    gridSpan = property(__gridSpan.value, __gridSpan.set, None, u'Grid Span')

    
    # Attribute vMerge uses Python identifier vMerge
    __vMerge = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vMerge'), 'vMerge', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_vMerge', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    vMerge = property(__vMerge.value, __vMerge.set, None, u'Vertical Merge')

    
    # Attribute hMerge uses Python identifier hMerge
    __hMerge = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hMerge'), 'hMerge', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_hMerge', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hMerge = property(__hMerge.value, __hMerge.set, None, u'Horizontal Merge')

    
    # Attribute rowSpan uses Python identifier rowSpan
    __rowSpan = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rowSpan'), 'rowSpan', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_rowSpan', pyxb.binding.datatypes.int, unicode_default=u'1')
    
    rowSpan = property(__rowSpan.value, __rowSpan.set, None, u'Row Span')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_id', pyxb.binding.datatypes.string)
    
    id = property(__id.value, __id.set, None, u'Table Cell Identifier')


    _ElementMap = {
        __extLst.name() : __extLst,
        __txBody.name() : __txBody,
        __tcPr.name() : __tcPr
    }
    _AttributeMap = {
        __gridSpan.name() : __gridSpan,
        __vMerge.name() : __vMerge,
        __hMerge.name() : __hMerge,
        __rowSpan.name() : __rowSpan,
        __id.name() : __id
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableCell', CT_TableCell)


# Complex type CT_ShowInfoBrowse with content type EMPTY
class CT_ShowInfoBrowse (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_ShowInfoBrowse')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute showScrollbar uses Python identifier showScrollbar
    __showScrollbar = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showScrollbar'), 'showScrollbar', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShowInfoBrowse_showScrollbar', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showScrollbar = property(__showScrollbar.value, __showScrollbar.set, None, u'Show Scroll Bar in Window')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __showScrollbar.name() : __showScrollbar
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_ShowInfoBrowse', CT_ShowInfoBrowse)


# Complex type CT_NonVisualGroupDrawingShapeProps with content type ELEMENT_ONLY
class CT_NonVisualGroupDrawingShapeProps (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_NonVisualGroupDrawingShapeProps')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualGroupDrawingShapeProps_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpSpLocks uses Python identifier grpSpLocks
    __grpSpLocks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSpLocks'), 'grpSpLocks', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualGroupDrawingShapeProps_httpschemas_openxmlformats_orgdrawingml2006maingrpSpLocks', False)

    
    grpSpLocks = property(__grpSpLocks.value, __grpSpLocks.set, None, u'Group Shape Locks')


    _ElementMap = {
        __extLst.name() : __extLst,
        __grpSpLocks.name() : __grpSpLocks
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_NonVisualGroupDrawingShapeProps', CT_NonVisualGroupDrawingShapeProps)


# Complex type CT_SlideTiming with content type ELEMENT_ONLY
class CT_SlideTiming (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideTiming')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTiming_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}tnLst uses Python identifier tnLst
    __tnLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'tnLst'), 'tnLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTiming_httpschemas_openxmlformats_orgpresentationml2006maintnLst', False)

    
    tnLst = property(__tnLst.value, __tnLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}bldLst uses Python identifier bldLst
    __bldLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'bldLst'), 'bldLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTiming_httpschemas_openxmlformats_orgpresentationml2006mainbldLst', False)

    
    bldLst = property(__bldLst.value, __bldLst.set, None, u'Build List')


    _ElementMap = {
        __extLst.name() : __extLst,
        __tnLst.name() : __tnLst,
        __bldLst.name() : __bldLst
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideTiming', CT_SlideTiming)


# Complex type CT_LineEndProperties with content type EMPTY
class CT_LineEndProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LineEndProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineEndProperties_type', ST_LineEndType)
    
    type = property(__type.value, __type.set, None, u'Line Head/End Type')

    
    # Attribute len uses Python identifier len
    __len = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'len'), 'len', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineEndProperties_len', ST_LineEndLength)
    
    len = property(__len.value, __len.set, None, u'Length of Head/End')

    
    # Attribute w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'w'), 'w', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineEndProperties_w', ST_LineEndWidth)
    
    w = property(__w.value, __w.set, None, u'Width of Head/End')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __type.name() : __type,
        __len.name() : __len,
        __w.name() : __w
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LineEndProperties', CT_LineEndProperties)


# Complex type CT_EffectProperties with content type ELEMENT_ONLY
class CT_EffectProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EffectProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')


    _ElementMap = {
        __effectLst.name() : __effectLst,
        __effectDag.name() : __effectDag
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EffectProperties', CT_EffectProperties)


# Complex type CT_GvmlConnector with content type ELEMENT_ONLY
class CT_GvmlConnector (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlConnector')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlConnector_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}nvCxnSpPr uses Python identifier nvCxnSpPr
    __nvCxnSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'nvCxnSpPr'), 'nvCxnSpPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlConnector_httpschemas_openxmlformats_orgdrawingml2006mainnvCxnSpPr', False)

    
    nvCxnSpPr = property(__nvCxnSpPr.value, __nvCxnSpPr.set, None, u'Non-Visual Properties for a Connection Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), 'style', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlConnector_httpschemas_openxmlformats_orgdrawingml2006mainstyle', False)

    
    style = property(__style.value, __style.set, None, u'Shape Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spPr uses Python identifier spPr
    __spPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), 'spPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlConnector_httpschemas_openxmlformats_orgdrawingml2006mainspPr', False)

    
    spPr = property(__spPr.value, __spPr.set, None, u'Visual Properties')


    _ElementMap = {
        __extLst.name() : __extLst,
        __nvCxnSpPr.name() : __nvCxnSpPr,
        __style.name() : __style,
        __spPr.name() : __spPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlConnector', CT_GvmlConnector)


# Complex type CT_NotesTextViewProperties with content type ELEMENT_ONLY
class CT_NotesTextViewProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_NotesTextViewProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesTextViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cViewPr uses Python identifier cViewPr
    __cViewPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cViewPr'), 'cViewPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesTextViewProperties_httpschemas_openxmlformats_orgpresentationml2006maincViewPr', False)

    
    cViewPr = property(__cViewPr.value, __cViewPr.set, None, u'Base properties for Notes View')


    _ElementMap = {
        __extLst.name() : __extLst,
        __cViewPr.name() : __cViewPr
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_NotesTextViewProperties', CT_NotesTextViewProperties)


# Complex type CT_Pt with content type ELEMENT_ONLY
class CT_Pt (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Pt')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Pt_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}prSet uses Python identifier prSet
    __prSet = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'prSet'), 'prSet', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Pt_httpschemas_openxmlformats_orgdrawingml2006diagramprSet', False)

    
    prSet = property(__prSet.value, __prSet.set, None, u'Property Set')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}t uses Python identifier t
    __t = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u't'), 't', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Pt_httpschemas_openxmlformats_orgdrawingml2006diagramt', False)

    
    t = property(__t.value, __t.set, None, u'Text Body')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}spPr uses Python identifier spPr
    __spPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'spPr'), 'spPr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Pt_httpschemas_openxmlformats_orgdrawingml2006diagramspPr', False)

    
    spPr = property(__spPr.value, __spPr.set, None, u'Shape Properties')

    
    # Attribute cxnId uses Python identifier cxnId
    __cxnId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cxnId'), 'cxnId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Pt_cxnId', ST_ModelId, unicode_default=u'0')
    
    cxnId = property(__cxnId.value, __cxnId.set, None, u'Connection Identifier')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Pt_type', ST_PtType, unicode_default=u'node')
    
    type = property(__type.value, __type.set, None, u'Point Type')

    
    # Attribute modelId uses Python identifier modelId
    __modelId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelId'), 'modelId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Pt_modelId', ST_ModelId, required=True)
    
    modelId = property(__modelId.value, __modelId.set, None, u'Model Identifier')


    _ElementMap = {
        __extLst.name() : __extLst,
        __prSet.name() : __prSet,
        __t.name() : __t,
        __spPr.name() : __spPr
    }
    _AttributeMap = {
        __cxnId.name() : __cxnId,
        __type.name() : __type,
        __modelId.name() : __modelId
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Pt', CT_Pt)


# Complex type CT_NotesMasterIdListEntry with content type ELEMENT_ONLY
class CT_NotesMasterIdListEntry (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_NotesMasterIdListEntry')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesMasterIdListEntry_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesMasterIdListEntry_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_NotesMasterIdListEntry', CT_NotesMasterIdListEntry)


# Complex type CT_GroupLocking with content type ELEMENT_ONLY
class CT_GroupLocking (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GroupLocking')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute noGrp uses Python identifier noGrp
    __noGrp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noGrp'), 'noGrp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_noGrp', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noGrp = property(__noGrp.value, __noGrp.set, None, u'Disallow Shape Grouping')

    
    # Attribute noChangeAspect uses Python identifier noChangeAspect
    __noChangeAspect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeAspect'), 'noChangeAspect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_noChangeAspect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeAspect = property(__noChangeAspect.value, __noChangeAspect.set, None, u'Disallow Aspect Ratio Change')

    
    # Attribute noResize uses Python identifier noResize
    __noResize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noResize'), 'noResize', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_noResize', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noResize = property(__noResize.value, __noResize.set, None, u'Disallow Shape Resizing')

    
    # Attribute noSelect uses Python identifier noSelect
    __noSelect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noSelect'), 'noSelect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_noSelect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noSelect = property(__noSelect.value, __noSelect.set, None, u'Disallow Shape Selection')

    
    # Attribute noUngrp uses Python identifier noUngrp
    __noUngrp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noUngrp'), 'noUngrp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_noUngrp', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noUngrp = property(__noUngrp.value, __noUngrp.set, None, u'Disallow Shape Ungrouping')

    
    # Attribute noRot uses Python identifier noRot
    __noRot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noRot'), 'noRot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_noRot', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noRot = property(__noRot.value, __noRot.set, None, u'Disallow Shape Rotation')

    
    # Attribute noMove uses Python identifier noMove
    __noMove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noMove'), 'noMove', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_noMove', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noMove = property(__noMove.value, __noMove.set, None, u'Disallow Moving Shape')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __noGrp.name() : __noGrp,
        __noChangeAspect.name() : __noChangeAspect,
        __noResize.name() : __noResize,
        __noSelect.name() : __noSelect,
        __noUngrp.name() : __noUngrp,
        __noRot.name() : __noRot,
        __noMove.name() : __noMove
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GroupLocking', CT_GroupLocking)


# Complex type CT_ColorMappingOverride with content type ELEMENT_ONLY
class CT_ColorMappingOverride (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorMappingOverride')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}masterClrMapping uses Python identifier masterClrMapping
    __masterClrMapping = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'masterClrMapping'), 'masterClrMapping', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMappingOverride_httpschemas_openxmlformats_orgdrawingml2006mainmasterClrMapping', False)

    
    masterClrMapping = property(__masterClrMapping.value, __masterClrMapping.set, None, u'Master Color Mapping')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}overrideClrMapping uses Python identifier overrideClrMapping
    __overrideClrMapping = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'overrideClrMapping'), 'overrideClrMapping', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMappingOverride_httpschemas_openxmlformats_orgdrawingml2006mainoverrideClrMapping', False)

    
    overrideClrMapping = property(__overrideClrMapping.value, __overrideClrMapping.set, None, u'Override Color Mapping')


    _ElementMap = {
        __masterClrMapping.name() : __masterClrMapping,
        __overrideClrMapping.name() : __overrideClrMapping
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorMappingOverride', CT_ColorMappingOverride)


# Complex type CT_QuickTimeFile with content type ELEMENT_ONLY
class CT_QuickTimeFile (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_QuickTimeFile')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_QuickTimeFile_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}link uses Python identifier link
    __link = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'link'), 'link', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_QuickTimeFile_httpschemas_openxmlformats_orgofficeDocument2006relationshipslink', _r.ST_RelationshipId, required=True)
    
    link = property(__link.value, __link.set, None, None)


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __link.name() : __link
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_QuickTimeFile', CT_QuickTimeFile)


# Complex type CT_TextSpacing with content type ELEMENT_ONLY
class CT_TextSpacing (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextSpacing')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spcPct uses Python identifier spcPct
    __spcPct = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spcPct'), 'spcPct', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextSpacing_httpschemas_openxmlformats_orgdrawingml2006mainspcPct', False)

    
    spcPct = property(__spcPct.value, __spcPct.set, None, u'Spacing Percent')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spcPts uses Python identifier spcPts
    __spcPts = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spcPts'), 'spcPts', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextSpacing_httpschemas_openxmlformats_orgdrawingml2006mainspcPts', False)

    
    spcPts = property(__spcPts.value, __spcPts.set, None, u'Spacing Points')


    _ElementMap = {
        __spcPct.name() : __spcPct,
        __spcPts.name() : __spcPts
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextSpacing', CT_TextSpacing)


# Complex type CT_FillEffect with content type ELEMENT_ONLY
class CT_FillEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FillEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillEffect_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillEffect_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillEffect_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillEffect_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillEffect_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillEffect_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)


    _ElementMap = {
        __solidFill.name() : __solidFill,
        __gradFill.name() : __gradFill,
        __noFill.name() : __noFill,
        __pattFill.name() : __pattFill,
        __grpFill.name() : __grpFill,
        __blipFill.name() : __blipFill
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FillEffect', CT_FillEffect)


# Complex type CT_StringTag with content type EMPTY
class CT_StringTag (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_StringTag')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_StringTag_name', pyxb.binding.datatypes.string)
    
    name = property(__name.value, __name.set, None, u'Name')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_StringTag_val', pyxb.binding.datatypes.string)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __name.name() : __name,
        __val.name() : __val
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_StringTag', CT_StringTag)


# Complex type CT_TLAnimateMotionBehavior with content type ELEMENT_ONLY
class CT_TLAnimateMotionBehavior (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLAnimateMotionBehavior')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}rCtr uses Python identifier rCtr
    __rCtr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'rCtr'), 'rCtr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateMotionBehavior_httpschemas_openxmlformats_orgpresentationml2006mainrCtr', False)

    
    rCtr = property(__rCtr.value, __rCtr.set, None, u'Rotation Center')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cBhvr uses Python identifier cBhvr
    __cBhvr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), 'cBhvr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateMotionBehavior_httpschemas_openxmlformats_orgpresentationml2006maincBhvr', False)

    
    cBhvr = property(__cBhvr.value, __cBhvr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}from uses Python identifier from_
    __from = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'from'), 'from_', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateMotionBehavior_httpschemas_openxmlformats_orgpresentationml2006mainfrom', False)

    
    from_ = property(__from.value, __from.set, None, u'From')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}by uses Python identifier by
    __by = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'by'), 'by', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateMotionBehavior_httpschemas_openxmlformats_orgpresentationml2006mainby', False)

    
    by = property(__by.value, __by.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}to uses Python identifier to
    __to = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'to'), 'to', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateMotionBehavior_httpschemas_openxmlformats_orgpresentationml2006mainto', False)

    
    to = property(__to.value, __to.set, None, None)

    
    # Attribute origin uses Python identifier origin
    __origin = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'origin'), 'origin', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateMotionBehavior_origin', ST_TLAnimateMotionBehaviorOrigin)
    
    origin = property(__origin.value, __origin.set, None, u'Origin')

    
    # Attribute path uses Python identifier path
    __path = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'path'), 'path', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateMotionBehavior_path', pyxb.binding.datatypes.string)
    
    path = property(__path.value, __path.set, None, u'Path')

    
    # Attribute rAng uses Python identifier rAng
    __rAng = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rAng'), 'rAng', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateMotionBehavior_rAng', ST_Angle)
    
    rAng = property(__rAng.value, __rAng.set, None, u'Relative Angle')

    
    # Attribute pathEditMode uses Python identifier pathEditMode
    __pathEditMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pathEditMode'), 'pathEditMode', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateMotionBehavior_pathEditMode', ST_TLAnimateMotionPathEditMode)
    
    pathEditMode = property(__pathEditMode.value, __pathEditMode.set, None, u'Path Edit Mode')

    
    # Attribute ptsTypes uses Python identifier ptsTypes
    __ptsTypes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ptsTypes'), 'ptsTypes', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateMotionBehavior_ptsTypes', pyxb.binding.datatypes.string)
    
    ptsTypes = property(__ptsTypes.value, __ptsTypes.set, None, u'Points Types')


    _ElementMap = {
        __rCtr.name() : __rCtr,
        __cBhvr.name() : __cBhvr,
        __from.name() : __from,
        __by.name() : __by,
        __to.name() : __to
    }
    _AttributeMap = {
        __origin.name() : __origin,
        __path.name() : __path,
        __rAng.name() : __rAng,
        __pathEditMode.name() : __pathEditMode,
        __ptsTypes.name() : __ptsTypes
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLAnimateMotionBehavior', CT_TLAnimateMotionBehavior)


# Complex type CT_Guide with content type EMPTY
class CT_Guide (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_Guide')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute orient uses Python identifier orient
    __orient = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'orient'), 'orient', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Guide_orient', ST_Direction_, unicode_default=u'vert')
    
    orient = property(__orient.value, __orient.set, None, u'Guide Orientation')

    
    # Attribute pos uses Python identifier pos
    __pos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pos'), 'pos', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Guide_pos', ST_Coordinate32, unicode_default=u'0')
    
    pos = property(__pos.value, __pos.set, None, u'Guide Position')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __orient.name() : __orient,
        __pos.name() : __pos
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_Guide', CT_Guide)


# Complex type CT_Point2D with content type EMPTY
class CT_Point2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Point2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'y'), 'y', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Point2D_y', ST_Coordinate, required=True)
    
    y = property(__y.value, __y.set, None, u'Y-Axis Coordinate')

    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'x'), 'x', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Point2D_x', ST_Coordinate, required=True)
    
    x = property(__x.value, __x.set, None, u'X-Axis Coordinate')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __y.name() : __y,
        __x.name() : __x
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Point2D', CT_Point2D)


# Complex type CT_BiLevelEffect with content type EMPTY
class CT_BiLevelEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BiLevelEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute thresh uses Python identifier thresh
    __thresh = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'thresh'), 'thresh', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BiLevelEffect_thresh', ST_PositiveFixedPercentage, required=True)
    
    thresh = property(__thresh.value, __thresh.set, None, u'Threshold')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __thresh.name() : __thresh
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BiLevelEffect', CT_BiLevelEffect)


# Complex type CT_OleObjectLink with content type ELEMENT_ONLY
class CT_OleObjectLink (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_OleObjectLink')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OleObjectLink_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute updateAutomatic uses Python identifier updateAutomatic
    __updateAutomatic = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'updateAutomatic'), 'updateAutomatic', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OleObjectLink_updateAutomatic', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    updateAutomatic = property(__updateAutomatic.value, __updateAutomatic.set, None, u'Update Linked Embedded Objects Automatically')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __updateAutomatic.name() : __updateAutomatic
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_OleObjectLink', CT_OleObjectLink)


# Complex type CT_PresentationOf with content type ELEMENT_ONLY
class CT_PresentationOf (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_PresentationOf')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PresentationOf_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute ptType uses Python identifier ptType
    __ptType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ptType'), 'ptType', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PresentationOf_ptType', ST_ElementTypes, unicode_default=u'all')
    
    ptType = property(__ptType.value, __ptType.set, None, u'Data Point Type')

    
    # Attribute hideLastTrans uses Python identifier hideLastTrans
    __hideLastTrans = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hideLastTrans'), 'hideLastTrans', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PresentationOf_hideLastTrans', ST_Booleans, unicode_default=u'true')
    
    hideLastTrans = property(__hideLastTrans.value, __hideLastTrans.set, None, u'Hide Last Transition')

    
    # Attribute cnt uses Python identifier cnt
    __cnt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cnt'), 'cnt', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PresentationOf_cnt', ST_UnsignedInts, unicode_default=u'0')
    
    cnt = property(__cnt.value, __cnt.set, None, u'Count')

    
    # Attribute axis uses Python identifier axis
    __axis = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axis'), 'axis', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PresentationOf_axis', ST_AxisTypes, unicode_default=u'none')
    
    axis = property(__axis.value, __axis.set, None, u'Axis')

    
    # Attribute st uses Python identifier st
    __st = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'st'), 'st', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PresentationOf_st', ST_Ints, unicode_default=u'1')
    
    st = property(__st.value, __st.set, None, u'Start')

    
    # Attribute step uses Python identifier step
    __step = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'step'), 'step', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PresentationOf_step', ST_Ints, unicode_default=u'1')
    
    step = property(__step.value, __step.set, None, u'Step')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __ptType.name() : __ptType,
        __hideLastTrans.name() : __hideLastTrans,
        __cnt.name() : __cnt,
        __axis.name() : __axis,
        __st.name() : __st,
        __step.name() : __step
    }
_Namespace.addCategoryObject('typeBinding', u'CT_PresentationOf', CT_PresentationOf)


# Complex type CT_TableProperties with content type ELEMENT_ONLY
class CT_TableProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tableStyle uses Python identifier tableStyle
    __tableStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tableStyle'), 'tableStyle', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006maintableStyle', False)

    
    tableStyle = property(__tableStyle.value, __tableStyle.set, None, u'Table Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tableStyleId uses Python identifier tableStyleId
    __tableStyleId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tableStyleId'), 'tableStyleId', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006maintableStyleId', False)

    
    tableStyleId = property(__tableStyleId.value, __tableStyleId.set, None, u'Table Style ID')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Extension List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Attribute rtl uses Python identifier rtl
    __rtl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rtl'), 'rtl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_rtl', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    rtl = property(__rtl.value, __rtl.set, None, u'Right-to-Left')

    
    # Attribute firstRow uses Python identifier firstRow
    __firstRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'firstRow'), 'firstRow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_firstRow', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    firstRow = property(__firstRow.value, __firstRow.set, None, u'First Row')

    
    # Attribute bandCol uses Python identifier bandCol
    __bandCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bandCol'), 'bandCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_bandCol', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    bandCol = property(__bandCol.value, __bandCol.set, None, u'Banded Columns')

    
    # Attribute bandRow uses Python identifier bandRow
    __bandRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bandRow'), 'bandRow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_bandRow', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    bandRow = property(__bandRow.value, __bandRow.set, None, u'Banded Rows')

    
    # Attribute firstCol uses Python identifier firstCol
    __firstCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'firstCol'), 'firstCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_firstCol', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    firstCol = property(__firstCol.value, __firstCol.set, None, u'First Column')

    
    # Attribute lastCol uses Python identifier lastCol
    __lastCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lastCol'), 'lastCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_lastCol', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    lastCol = property(__lastCol.value, __lastCol.set, None, u'Last Column')

    
    # Attribute lastRow uses Python identifier lastRow
    __lastRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lastRow'), 'lastRow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_lastRow', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    lastRow = property(__lastRow.value, __lastRow.set, None, u'Last Row')


    _ElementMap = {
        __tableStyle.name() : __tableStyle,
        __noFill.name() : __noFill,
        __tableStyleId.name() : __tableStyleId,
        __effectLst.name() : __effectLst,
        __gradFill.name() : __gradFill,
        __solidFill.name() : __solidFill,
        __effectDag.name() : __effectDag,
        __extLst.name() : __extLst,
        __blipFill.name() : __blipFill,
        __pattFill.name() : __pattFill,
        __grpFill.name() : __grpFill
    }
    _AttributeMap = {
        __rtl.name() : __rtl,
        __firstRow.name() : __firstRow,
        __bandCol.name() : __bandCol,
        __bandRow.name() : __bandRow,
        __firstCol.name() : __firstCol,
        __lastCol.name() : __lastCol,
        __lastRow.name() : __lastRow
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableProperties', CT_TableProperties)


# Complex type CT_TLTimeCondition with content type ELEMENT_ONLY
class CT_TLTimeCondition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLTimeCondition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}tgtEl uses Python identifier tgtEl
    __tgtEl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'tgtEl'), 'tgtEl', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeCondition_httpschemas_openxmlformats_orgpresentationml2006maintgtEl', False)

    
    tgtEl = property(__tgtEl.value, __tgtEl.set, None, u'Target Element Trigger Choice')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}tn uses Python identifier tn
    __tn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'tn'), 'tn', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeCondition_httpschemas_openxmlformats_orgpresentationml2006maintn', False)

    
    tn = property(__tn.value, __tn.set, None, u'Time Node')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}rtn uses Python identifier rtn
    __rtn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'rtn'), 'rtn', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeCondition_httpschemas_openxmlformats_orgpresentationml2006mainrtn', False)

    
    rtn = property(__rtn.value, __rtn.set, None, u'Runtime Node Trigger Choice')

    
    # Attribute delay uses Python identifier delay
    __delay = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'delay'), 'delay', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeCondition_delay', ST_TLTime)
    
    delay = property(__delay.value, __delay.set, None, u'Trigger Delay')

    
    # Attribute evt uses Python identifier evt
    __evt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'evt'), 'evt', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeCondition_evt', ST_TLTriggerEvent)
    
    evt = property(__evt.value, __evt.set, None, u'Trigger Event')


    _ElementMap = {
        __tgtEl.name() : __tgtEl,
        __tn.name() : __tn,
        __rtn.name() : __rtn
    }
    _AttributeMap = {
        __delay.name() : __delay,
        __evt.name() : __evt
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLTimeCondition', CT_TLTimeCondition)


# Complex type CT_TLCommonMediaNodeData with content type ELEMENT_ONLY
class CT_TLCommonMediaNodeData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLCommonMediaNodeData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}tgtEl uses Python identifier tgtEl
    __tgtEl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'tgtEl'), 'tgtEl', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonMediaNodeData_httpschemas_openxmlformats_orgpresentationml2006maintgtEl', False)

    
    tgtEl = property(__tgtEl.value, __tgtEl.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cTn uses Python identifier cTn
    __cTn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cTn'), 'cTn', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonMediaNodeData_httpschemas_openxmlformats_orgpresentationml2006maincTn', False)

    
    cTn = property(__cTn.value, __cTn.set, None, u'Common Time Node Properties')

    
    # Attribute vol uses Python identifier vol
    __vol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vol'), 'vol', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonMediaNodeData_vol', ST_PositiveFixedPercentage, unicode_default=u'50%')
    
    vol = property(__vol.value, __vol.set, None, u'Volume')

    
    # Attribute numSld uses Python identifier numSld
    __numSld = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numSld'), 'numSld', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonMediaNodeData_numSld', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    numSld = property(__numSld.value, __numSld.set, None, u'Number of Slides')

    
    # Attribute mute uses Python identifier mute
    __mute = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mute'), 'mute', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonMediaNodeData_mute', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    mute = property(__mute.value, __mute.set, None, u'Mute')

    
    # Attribute showWhenStopped uses Python identifier showWhenStopped
    __showWhenStopped = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showWhenStopped'), 'showWhenStopped', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonMediaNodeData_showWhenStopped', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showWhenStopped = property(__showWhenStopped.value, __showWhenStopped.set, None, u'Show When Stopped')


    _ElementMap = {
        __tgtEl.name() : __tgtEl,
        __cTn.name() : __cTn
    }
    _AttributeMap = {
        __vol.name() : __vol,
        __numSld.name() : __numSld,
        __mute.name() : __mute,
        __showWhenStopped.name() : __showWhenStopped
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLCommonMediaNodeData', CT_TLCommonMediaNodeData)


# Complex type CT_PrintProperties with content type ELEMENT_ONLY
class CT_PrintProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_PrintProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PrintProperties_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute prnWhat uses Python identifier prnWhat
    __prnWhat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prnWhat'), 'prnWhat', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PrintProperties_prnWhat', ST_PrintWhat, unicode_default=u'slides')
    
    prnWhat = property(__prnWhat.value, __prnWhat.set, None, u'Print Output')

    
    # Attribute scaleToFitPaper uses Python identifier scaleToFitPaper
    __scaleToFitPaper = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'scaleToFitPaper'), 'scaleToFitPaper', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PrintProperties_scaleToFitPaper', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    scaleToFitPaper = property(__scaleToFitPaper.value, __scaleToFitPaper.set, None, u'Scale to Fit Paper when printing')

    
    # Attribute hiddenSlides uses Python identifier hiddenSlides
    __hiddenSlides = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hiddenSlides'), 'hiddenSlides', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PrintProperties_hiddenSlides', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hiddenSlides = property(__hiddenSlides.value, __hiddenSlides.set, None, u'Print Hidden Slides')

    
    # Attribute clrMode uses Python identifier clrMode
    __clrMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'clrMode'), 'clrMode', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PrintProperties_clrMode', ST_PrintColorMode, unicode_default=u'clr')
    
    clrMode = property(__clrMode.value, __clrMode.set, None, u'Print Color Mode')

    
    # Attribute frameSlides uses Python identifier frameSlides
    __frameSlides = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'frameSlides'), 'frameSlides', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PrintProperties_frameSlides', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    frameSlides = property(__frameSlides.value, __frameSlides.set, None, u'Frame slides when printing')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __prnWhat.name() : __prnWhat,
        __scaleToFitPaper.name() : __scaleToFitPaper,
        __hiddenSlides.name() : __hiddenSlides,
        __clrMode.name() : __clrMode,
        __frameSlides.name() : __frameSlides
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_PrintProperties', CT_PrintProperties)


# Complex type CT_LightRig with content type ELEMENT_ONLY
class CT_LightRig (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LightRig')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}rot uses Python identifier rot
    __rot = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'rot'), 'rot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LightRig_httpschemas_openxmlformats_orgdrawingml2006mainrot', False)

    
    rot = property(__rot.value, __rot.set, None, u'Rotation')

    
    # Attribute rig uses Python identifier rig
    __rig = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rig'), 'rig', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LightRig_rig', ST_LightRigType, required=True)
    
    rig = property(__rig.value, __rig.set, None, u'Rig Preset')

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LightRig_dir', ST_LightRigDirection, required=True)
    
    dir = property(__dir.value, __dir.set, None, u'Direction')


    _ElementMap = {
        __rot.name() : __rot
    }
    _AttributeMap = {
        __rig.name() : __rig,
        __dir.name() : __dir
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LightRig', CT_LightRig)


# Complex type CT_CTCategories with content type ELEMENT_ONLY
class CT_CTCategories (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_CTCategories')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}cat uses Python identifier cat
    __cat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'cat'), 'cat', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTCategories_httpschemas_openxmlformats_orgdrawingml2006diagramcat', True)

    
    cat = property(__cat.value, __cat.set, None, u'Color Transform Category')


    _ElementMap = {
        __cat.name() : __cat
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_CTCategories', CT_CTCategories)


# Complex type CT_EightDirectionTransition with content type EMPTY
class CT_EightDirectionTransition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_EightDirectionTransition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_EightDirectionTransition_dir', ST_TransitionEightDirectionType, unicode_default=u'l')
    
    dir = property(__dir.value, __dir.set, None, u'Direction')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __dir.name() : __dir
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_EightDirectionTransition', CT_EightDirectionTransition)


# Complex type CT_TextCharBullet with content type EMPTY
class CT_TextCharBullet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextCharBullet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute char uses Python identifier char
    __char = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'char'), 'char', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharBullet_char', pyxb.binding.datatypes.string, required=True)
    
    char = property(__char.value, __char.set, None, u'Bullet Character')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __char.name() : __char
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextCharBullet', CT_TextCharBullet)


# Complex type CT_TextBulletTypefaceFollowText with content type EMPTY
class CT_TextBulletTypefaceFollowText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBulletTypefaceFollowText')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBulletTypefaceFollowText', CT_TextBulletTypefaceFollowText)


# Complex type CT_NonVisualDrawingProps with content type ELEMENT_ONLY
class CT_NonVisualDrawingProps (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_NonVisualDrawingProps')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hlinkClick uses Python identifier hlinkClick
    __hlinkClick = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkClick'), 'hlinkClick', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_httpschemas_openxmlformats_orgdrawingml2006mainhlinkClick', False)

    
    hlinkClick = property(__hlinkClick.value, __hlinkClick.set, None, u'Drawing Element On Click Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hlinkHover uses Python identifier hlinkHover
    __hlinkHover = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkHover'), 'hlinkHover', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_httpschemas_openxmlformats_orgdrawingml2006mainhlinkHover', False)

    
    hlinkHover = property(__hlinkHover.value, __hlinkHover.set, None, u'Hyperlink for Hover')

    
    # Attribute hidden uses Python identifier hidden
    __hidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hidden'), 'hidden', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_hidden', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hidden = property(__hidden.value, __hidden.set, None, u'Hidden')

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_title', pyxb.binding.datatypes.string, unicode_default=u'')
    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_name', pyxb.binding.datatypes.string, required=True)
    
    name = property(__name.value, __name.set, None, u'Name')

    
    # Attribute descr uses Python identifier descr
    __descr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'descr'), 'descr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_descr', pyxb.binding.datatypes.string, unicode_default=u'')
    
    descr = property(__descr.value, __descr.set, None, u'Alternative Text for Object')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_id', ST_DrawingElementId, required=True)
    
    id = property(__id.value, __id.set, None, u'Unique Identifier')


    _ElementMap = {
        __extLst.name() : __extLst,
        __hlinkClick.name() : __hlinkClick,
        __hlinkHover.name() : __hlinkHover
    }
    _AttributeMap = {
        __hidden.name() : __hidden,
        __title.name() : __title,
        __name.name() : __name,
        __descr.name() : __descr,
        __id.name() : __id
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_NonVisualDrawingProps', CT_NonVisualDrawingProps)


# Complex type CT_ColorScheme with content type ELEMENT_ONLY
class CT_ColorScheme (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorScheme')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}dk1 uses Python identifier dk1
    __dk1 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'dk1'), 'dk1', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006maindk1', False)

    
    dk1 = property(__dk1.value, __dk1.set, None, u'Dark 1')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}accent4 uses Python identifier accent4
    __accent4 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'accent4'), 'accent4', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainaccent4', False)

    
    accent4 = property(__accent4.value, __accent4.set, None, u'Accent 4')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}dk2 uses Python identifier dk2
    __dk2 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'dk2'), 'dk2', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006maindk2', False)

    
    dk2 = property(__dk2.value, __dk2.set, None, u'Dark 2')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}accent6 uses Python identifier accent6
    __accent6 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'accent6'), 'accent6', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainaccent6', False)

    
    accent6 = property(__accent6.value, __accent6.set, None, u'Accent 6')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}accent5 uses Python identifier accent5
    __accent5 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'accent5'), 'accent5', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainaccent5', False)

    
    accent5 = property(__accent5.value, __accent5.set, None, u'Accent 5')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lt2 uses Python identifier lt2
    __lt2 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lt2'), 'lt2', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainlt2', False)

    
    lt2 = property(__lt2.value, __lt2.set, None, u'Light 2')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lt1 uses Python identifier lt1
    __lt1 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lt1'), 'lt1', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainlt1', False)

    
    lt1 = property(__lt1.value, __lt1.set, None, u'Light 1')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}accent1 uses Python identifier accent1
    __accent1 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'accent1'), 'accent1', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainaccent1', False)

    
    accent1 = property(__accent1.value, __accent1.set, None, u'Accent 1')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hlink uses Python identifier hlink
    __hlink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hlink'), 'hlink', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainhlink', False)

    
    hlink = property(__hlink.value, __hlink.set, None, u'Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}accent2 uses Python identifier accent2
    __accent2 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'accent2'), 'accent2', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainaccent2', False)

    
    accent2 = property(__accent2.value, __accent2.set, None, u'Accent 2')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}folHlink uses Python identifier folHlink
    __folHlink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'folHlink'), 'folHlink', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainfolHlink', False)

    
    folHlink = property(__folHlink.value, __folHlink.set, None, u'Followed Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}accent3 uses Python identifier accent3
    __accent3 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'accent3'), 'accent3', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainaccent3', False)

    
    accent3 = property(__accent3.value, __accent3.set, None, u'Accent 3')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_name', pyxb.binding.datatypes.string, required=True)
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __dk1.name() : __dk1,
        __accent4.name() : __accent4,
        __dk2.name() : __dk2,
        __accent6.name() : __accent6,
        __accent5.name() : __accent5,
        __lt2.name() : __lt2,
        __lt1.name() : __lt1,
        __extLst.name() : __extLst,
        __accent1.name() : __accent1,
        __hlink.name() : __hlink,
        __accent2.name() : __accent2,
        __folHlink.name() : __folHlink,
        __accent3.name() : __accent3
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorScheme', CT_ColorScheme)


# Complex type CT_ViewProperties with content type ELEMENT_ONLY
class CT_ViewProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_ViewProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}slideViewPr uses Python identifier slideViewPr
    __slideViewPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'slideViewPr'), 'slideViewPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainslideViewPr', False)

    
    slideViewPr = property(__slideViewPr.value, __slideViewPr.set, None, u'Slide View Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}normalViewPr uses Python identifier normalViewPr
    __normalViewPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'normalViewPr'), 'normalViewPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainnormalViewPr', False)

    
    normalViewPr = property(__normalViewPr.value, __normalViewPr.set, None, u'Normal View Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}gridSpacing uses Python identifier gridSpacing
    __gridSpacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'gridSpacing'), 'gridSpacing', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ViewProperties_httpschemas_openxmlformats_orgpresentationml2006maingridSpacing', False)

    
    gridSpacing = property(__gridSpacing.value, __gridSpacing.set, None, u'Grid Spacing')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}outlineViewPr uses Python identifier outlineViewPr
    __outlineViewPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'outlineViewPr'), 'outlineViewPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainoutlineViewPr', False)

    
    outlineViewPr = property(__outlineViewPr.value, __outlineViewPr.set, None, u'Outline View Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}notesViewPr uses Python identifier notesViewPr
    __notesViewPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'notesViewPr'), 'notesViewPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainnotesViewPr', False)

    
    notesViewPr = property(__notesViewPr.value, __notesViewPr.set, None, u'Notes View Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}notesTextViewPr uses Python identifier notesTextViewPr
    __notesTextViewPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'notesTextViewPr'), 'notesTextViewPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainnotesTextViewPr', False)

    
    notesTextViewPr = property(__notesTextViewPr.value, __notesTextViewPr.set, None, u'Notes Text View Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sorterViewPr uses Python identifier sorterViewPr
    __sorterViewPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sorterViewPr'), 'sorterViewPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainsorterViewPr', False)

    
    sorterViewPr = property(__sorterViewPr.value, __sorterViewPr.set, None, u'Slide Sorter View Properties')

    
    # Attribute lastView uses Python identifier lastView
    __lastView = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lastView'), 'lastView', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ViewProperties_lastView', ST_ViewType, unicode_default=u'sldView')
    
    lastView = property(__lastView.value, __lastView.set, None, u'Last View')

    
    # Attribute showComments uses Python identifier showComments
    __showComments = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showComments'), 'showComments', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ViewProperties_showComments', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showComments = property(__showComments.value, __showComments.set, None, u'Show Comments')


    _ElementMap = {
        __slideViewPr.name() : __slideViewPr,
        __normalViewPr.name() : __normalViewPr,
        __gridSpacing.name() : __gridSpacing,
        __extLst.name() : __extLst,
        __outlineViewPr.name() : __outlineViewPr,
        __notesViewPr.name() : __notesViewPr,
        __notesTextViewPr.name() : __notesTextViewPr,
        __sorterViewPr.name() : __sorterViewPr
    }
    _AttributeMap = {
        __lastView.name() : __lastView,
        __showComments.name() : __showComments
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_ViewProperties', CT_ViewProperties)


# Complex type CT_RelativeOffsetEffect with content type EMPTY
class CT_RelativeOffsetEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_RelativeOffsetEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute tx uses Python identifier tx
    __tx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tx'), 'tx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RelativeOffsetEffect_tx', ST_Percentage, unicode_default=u'0%')
    
    tx = property(__tx.value, __tx.set, None, u'Offset X')

    
    # Attribute ty uses Python identifier ty
    __ty = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ty'), 'ty', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RelativeOffsetEffect_ty', ST_Percentage, unicode_default=u'0%')
    
    ty = property(__ty.value, __ty.set, None, u'Offset Y')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __tx.name() : __tx,
        __ty.name() : __ty
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_RelativeOffsetEffect', CT_RelativeOffsetEffect)


# Complex type CT_BaseStylesOverride with content type ELEMENT_ONLY
class CT_BaseStylesOverride (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BaseStylesOverride')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fmtScheme uses Python identifier fmtScheme
    __fmtScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fmtScheme'), 'fmtScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BaseStylesOverride_httpschemas_openxmlformats_orgdrawingml2006mainfmtScheme', False)

    
    fmtScheme = property(__fmtScheme.value, __fmtScheme.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrScheme uses Python identifier clrScheme
    __clrScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme'), 'clrScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BaseStylesOverride_httpschemas_openxmlformats_orgdrawingml2006mainclrScheme', False)

    
    clrScheme = property(__clrScheme.value, __clrScheme.set, None, u'Color Scheme')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fontScheme uses Python identifier fontScheme
    __fontScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fontScheme'), 'fontScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BaseStylesOverride_httpschemas_openxmlformats_orgdrawingml2006mainfontScheme', False)

    
    fontScheme = property(__fontScheme.value, __fontScheme.set, None, None)


    _ElementMap = {
        __fmtScheme.name() : __fmtScheme,
        __clrScheme.name() : __clrScheme,
        __fontScheme.name() : __fontScheme
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BaseStylesOverride', CT_BaseStylesOverride)


# Complex type CT_LineStyleList with content type ELEMENT_ONLY
class CT_LineStyleList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LineStyleList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ln uses Python identifier ln
    __ln = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), 'ln', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineStyleList_httpschemas_openxmlformats_orgdrawingml2006mainln', True)

    
    ln = property(__ln.value, __ln.set, None, None)


    _ElementMap = {
        __ln.name() : __ln
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LineStyleList', CT_LineStyleList)


# Complex type CT_AnimationElementChoice with content type ELEMENT_ONLY
class CT_AnimationElementChoice (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AnimationElementChoice')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}dgm uses Python identifier dgm
    __dgm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'dgm'), 'dgm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationElementChoice_httpschemas_openxmlformats_orgdrawingml2006maindgm', False)

    
    dgm = property(__dgm.value, __dgm.set, None, u'Diagram to Animate')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}chart uses Python identifier chart
    __chart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'chart'), 'chart', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationElementChoice_httpschemas_openxmlformats_orgdrawingml2006mainchart', False)

    
    chart = property(__chart.value, __chart.set, None, u'Chart to Animate')


    _ElementMap = {
        __dgm.name() : __dgm,
        __chart.name() : __chart
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AnimationElementChoice', CT_AnimationElementChoice)


# Complex type CT_AlphaOutsetEffect with content type EMPTY
class CT_AlphaOutsetEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaOutsetEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute rad uses Python identifier rad
    __rad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rad'), 'rad', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaOutsetEffect_rad', ST_Coordinate, unicode_default=u'0')
    
    rad = property(__rad.value, __rad.set, None, u'Radius')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __rad.name() : __rad
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaOutsetEffect', CT_AlphaOutsetEffect)


# Complex type CT_AnimLvl with content type EMPTY
class CT_AnimLvl (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_AnimLvl')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_AnimLvl_val', ST_AnimLvlStr, unicode_default=u'none')
    
    val = property(__val.value, __val.set, None, u'Level Animation Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_AnimLvl', CT_AnimLvl)


# Complex type CT_Shape_ with content type ELEMENT_ONLY
class CT_Shape_ (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_Shape')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Shape_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}nvSpPr uses Python identifier nvSpPr
    __nvSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'nvSpPr'), 'nvSpPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Shape_httpschemas_openxmlformats_orgpresentationml2006mainnvSpPr', False)

    
    nvSpPr = property(__nvSpPr.value, __nvSpPr.set, None, u'Non-Visual Properties for a Shape')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'style'), 'style', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Shape_httpschemas_openxmlformats_orgpresentationml2006mainstyle', False)

    
    style = property(__style.value, __style.set, None, u'Shape Style')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}txBody uses Python identifier txBody
    __txBody = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'txBody'), 'txBody', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Shape_httpschemas_openxmlformats_orgpresentationml2006maintxBody', False)

    
    txBody = property(__txBody.value, __txBody.set, None, u'Shape Text Body')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}spPr uses Python identifier spPr
    __spPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'spPr'), 'spPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Shape_httpschemas_openxmlformats_orgpresentationml2006mainspPr', False)

    
    spPr = property(__spPr.value, __spPr.set, None, None)

    
    # Attribute useBgFill uses Python identifier useBgFill
    __useBgFill = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'useBgFill'), 'useBgFill', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Shape_useBgFill', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    useBgFill = property(__useBgFill.value, __useBgFill.set, None, u'Use Background Fill')


    _ElementMap = {
        __extLst.name() : __extLst,
        __nvSpPr.name() : __nvSpPr,
        __style.name() : __style,
        __txBody.name() : __txBody,
        __spPr.name() : __spPr
    }
    _AttributeMap = {
        __useBgFill.name() : __useBgFill
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_Shape', CT_Shape_)


# Complex type CT_Comment with content type ELEMENT_ONLY
class CT_Comment (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_Comment')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Comment_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'pos'), 'pos', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Comment_httpschemas_openxmlformats_orgpresentationml2006mainpos', False)

    
    pos = property(__pos.value, __pos.set, None, u'Comment Position')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}text uses Python identifier text
    __text = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'text'), 'text', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Comment_httpschemas_openxmlformats_orgpresentationml2006maintext', False)

    
    text = property(__text.value, __text.set, None, u"Comment's Text Content")

    
    # Attribute authorId uses Python identifier authorId
    __authorId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'authorId'), 'authorId', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Comment_authorId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    authorId = property(__authorId.value, __authorId.set, None, u'Comment Author ID')

    
    # Attribute dt uses Python identifier dt
    __dt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dt'), 'dt', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Comment_dt', pyxb.binding.datatypes.dateTime)
    
    dt = property(__dt.value, __dt.set, None, u'Comment Date/Time')

    
    # Attribute idx uses Python identifier idx
    __idx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'idx'), 'idx', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Comment_idx', ST_Index, required=True)
    
    idx = property(__idx.value, __idx.set, None, u'Comment Index')


    _ElementMap = {
        __extLst.name() : __extLst,
        __pos.name() : __pos,
        __text.name() : __text
    }
    _AttributeMap = {
        __authorId.name() : __authorId,
        __dt.name() : __dt,
        __idx.name() : __idx
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_Comment', CT_Comment)


# Complex type CT_TextBulletSizePercent with content type EMPTY
class CT_TextBulletSizePercent (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBulletSizePercent')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBulletSizePercent_val', ST_TextBulletSizePercent)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBulletSizePercent', CT_TextBulletSizePercent)


# Complex type CT_CustomShow with content type ELEMENT_ONLY
class CT_CustomShow (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_CustomShow')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CustomShow_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sldLst uses Python identifier sldLst
    __sldLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sldLst'), 'sldLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CustomShow_httpschemas_openxmlformats_orgpresentationml2006mainsldLst', False)

    
    sldLst = property(__sldLst.value, __sldLst.set, None, u'List of Presentation Slides')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CustomShow_name', ST_Name, required=True)
    
    name = property(__name.value, __name.set, None, u'Custom Show Name')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CustomShow_id', pyxb.binding.datatypes.unsignedInt, required=True)
    
    id = property(__id.value, __id.set, None, u'Custom Show ID')


    _ElementMap = {
        __extLst.name() : __extLst,
        __sldLst.name() : __sldLst
    }
    _AttributeMap = {
        __name.name() : __name,
        __id.name() : __id
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_CustomShow', CT_CustomShow)


# Complex type CT_TLCommonTimeNodeData with content type ELEMENT_ONLY
class CT_TLCommonTimeNodeData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLCommonTimeNodeData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}subTnLst uses Python identifier subTnLst
    __subTnLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'subTnLst'), 'subTnLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_httpschemas_openxmlformats_orgpresentationml2006mainsubTnLst', False)

    
    subTnLst = property(__subTnLst.value, __subTnLst.set, None, u'Sub-TimeNodes List')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}stCondLst uses Python identifier stCondLst
    __stCondLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'stCondLst'), 'stCondLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_httpschemas_openxmlformats_orgpresentationml2006mainstCondLst', False)

    
    stCondLst = property(__stCondLst.value, __stCondLst.set, None, u'Start Conditions List')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}endCondLst uses Python identifier endCondLst
    __endCondLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'endCondLst'), 'endCondLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_httpschemas_openxmlformats_orgpresentationml2006mainendCondLst', False)

    
    endCondLst = property(__endCondLst.value, __endCondLst.set, None, u'End Conditions List')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}iterate uses Python identifier iterate
    __iterate = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'iterate'), 'iterate', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_httpschemas_openxmlformats_orgpresentationml2006mainiterate', False)

    
    iterate = property(__iterate.value, __iterate.set, None, u'Iterate')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}endSync uses Python identifier endSync
    __endSync = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'endSync'), 'endSync', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_httpschemas_openxmlformats_orgpresentationml2006mainendSync', False)

    
    endSync = property(__endSync.value, __endSync.set, None, u'EndSync')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}childTnLst uses Python identifier childTnLst
    __childTnLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'childTnLst'), 'childTnLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_httpschemas_openxmlformats_orgpresentationml2006mainchildTnLst', False)

    
    childTnLst = property(__childTnLst.value, __childTnLst.set, None, u'Children Time Node List')

    
    # Attribute accel uses Python identifier accel
    __accel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accel'), 'accel', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_accel', ST_PositiveFixedPercentage, unicode_default=u'0%')
    
    accel = property(__accel.value, __accel.set, None, u'Acceleration')

    
    # Attribute decel uses Python identifier decel
    __decel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'decel'), 'decel', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_decel', ST_PositiveFixedPercentage, unicode_default=u'0%')
    
    decel = property(__decel.value, __decel.set, None, u'Deceleration')

    
    # Attribute syncBehavior uses Python identifier syncBehavior
    __syncBehavior = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'syncBehavior'), 'syncBehavior', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_syncBehavior', ST_TLTimeNodeSyncType)
    
    syncBehavior = property(__syncBehavior.value, __syncBehavior.set, None, u'Synchronization Behavior')

    
    # Attribute restart uses Python identifier restart
    __restart = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'restart'), 'restart', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_restart', ST_TLTimeNodeRestartType)
    
    restart = property(__restart.value, __restart.set, None, u'Restart')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_id', ST_TLTimeNodeID)
    
    id = property(__id.value, __id.set, None, u'ID')

    
    # Attribute fill uses Python identifier fill
    __fill = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fill'), 'fill', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_fill', ST_TLTimeNodeFillType)
    
    fill = property(__fill.value, __fill.set, None, u'Fill')

    
    # Attribute tmFilter uses Python identifier tmFilter
    __tmFilter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tmFilter'), 'tmFilter', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_tmFilter', pyxb.binding.datatypes.string)
    
    tmFilter = property(__tmFilter.value, __tmFilter.set, None, u'Time Filter')

    
    # Attribute evtFilter uses Python identifier evtFilter
    __evtFilter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'evtFilter'), 'evtFilter', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_evtFilter', pyxb.binding.datatypes.string)
    
    evtFilter = property(__evtFilter.value, __evtFilter.set, None, u'Event Filter')

    
    # Attribute display uses Python identifier display
    __display = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'display'), 'display', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_display', pyxb.binding.datatypes.boolean)
    
    display = property(__display.value, __display.set, None, u'Display')

    
    # Attribute presetID uses Python identifier presetID
    __presetID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'presetID'), 'presetID', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_presetID', pyxb.binding.datatypes.int)
    
    presetID = property(__presetID.value, __presetID.set, None, u'Preset ID')

    
    # Attribute masterRel uses Python identifier masterRel
    __masterRel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'masterRel'), 'masterRel', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_masterRel', ST_TLTimeNodeMasterRelation)
    
    masterRel = property(__masterRel.value, __masterRel.set, None, u'Master Relation')

    
    # Attribute grpId uses Python identifier grpId
    __grpId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'grpId'), 'grpId', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_grpId', pyxb.binding.datatypes.unsignedInt)
    
    grpId = property(__grpId.value, __grpId.set, None, u'Group ID')

    
    # Attribute afterEffect uses Python identifier afterEffect
    __afterEffect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'afterEffect'), 'afterEffect', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_afterEffect', pyxb.binding.datatypes.boolean)
    
    afterEffect = property(__afterEffect.value, __afterEffect.set, None, u'After Effect')

    
    # Attribute bldLvl uses Python identifier bldLvl
    __bldLvl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bldLvl'), 'bldLvl', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_bldLvl', pyxb.binding.datatypes.int)
    
    bldLvl = property(__bldLvl.value, __bldLvl.set, None, u'Build level')

    
    # Attribute nodeType uses Python identifier nodeType
    __nodeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nodeType'), 'nodeType', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_nodeType', ST_TLTimeNodeType)
    
    nodeType = property(__nodeType.value, __nodeType.set, None, u'Node Type')

    
    # Attribute nodePh uses Python identifier nodePh
    __nodePh = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nodePh'), 'nodePh', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_nodePh', pyxb.binding.datatypes.boolean)
    
    nodePh = property(__nodePh.value, __nodePh.set, None, u'Node Placeholder')

    
    # Attribute presetClass uses Python identifier presetClass
    __presetClass = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'presetClass'), 'presetClass', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_presetClass', ST_TLTimeNodePresetClassType)
    
    presetClass = property(__presetClass.value, __presetClass.set, None, u'Preset Types')

    
    # Attribute repeatDur uses Python identifier repeatDur
    __repeatDur = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'repeatDur'), 'repeatDur', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_repeatDur', ST_TLTime)
    
    repeatDur = property(__repeatDur.value, __repeatDur.set, None, u'Repeat Duration')

    
    # Attribute autoRev uses Python identifier autoRev
    __autoRev = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoRev'), 'autoRev', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_autoRev', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    autoRev = property(__autoRev.value, __autoRev.set, None, u'Auto Reverse')

    
    # Attribute presetSubtype uses Python identifier presetSubtype
    __presetSubtype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'presetSubtype'), 'presetSubtype', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_presetSubtype', pyxb.binding.datatypes.int)
    
    presetSubtype = property(__presetSubtype.value, __presetSubtype.set, None, u'Preset SubType')

    
    # Attribute dur uses Python identifier dur
    __dur = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dur'), 'dur', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_dur', ST_TLTime)
    
    dur = property(__dur.value, __dur.set, None, u'Duration')

    
    # Attribute repeatCount uses Python identifier repeatCount
    __repeatCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'repeatCount'), 'repeatCount', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_repeatCount', ST_TLTime, unicode_default=u'1000')
    
    repeatCount = property(__repeatCount.value, __repeatCount.set, None, u'Repeat Count')

    
    # Attribute spd uses Python identifier spd
    __spd = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spd'), 'spd', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonTimeNodeData_spd', ST_Percentage, unicode_default=u'100%')
    
    spd = property(__spd.value, __spd.set, None, u'Speed')


    _ElementMap = {
        __subTnLst.name() : __subTnLst,
        __stCondLst.name() : __stCondLst,
        __endCondLst.name() : __endCondLst,
        __iterate.name() : __iterate,
        __endSync.name() : __endSync,
        __childTnLst.name() : __childTnLst
    }
    _AttributeMap = {
        __accel.name() : __accel,
        __decel.name() : __decel,
        __syncBehavior.name() : __syncBehavior,
        __restart.name() : __restart,
        __id.name() : __id,
        __fill.name() : __fill,
        __tmFilter.name() : __tmFilter,
        __evtFilter.name() : __evtFilter,
        __display.name() : __display,
        __presetID.name() : __presetID,
        __masterRel.name() : __masterRel,
        __grpId.name() : __grpId,
        __afterEffect.name() : __afterEffect,
        __bldLvl.name() : __bldLvl,
        __nodeType.name() : __nodeType,
        __nodePh.name() : __nodePh,
        __presetClass.name() : __presetClass,
        __repeatDur.name() : __repeatDur,
        __autoRev.name() : __autoRev,
        __presetSubtype.name() : __presetSubtype,
        __dur.name() : __dur,
        __repeatCount.name() : __repeatCount,
        __spd.name() : __spd
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLCommonTimeNodeData', CT_TLCommonTimeNodeData)


# Complex type CT_TableStyleTextStyle with content type ELEMENT_ONLY
class CT_TableStyleTextStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableStyleTextStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}font uses Python identifier font
    __font = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'font'), 'font', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainfont', False)

    
    font = property(__font.value, __font.set, None, u'Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fontRef uses Python identifier fontRef
    __fontRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fontRef'), 'fontRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainfontRef', False)

    
    fontRef = property(__fontRef.value, __fontRef.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Attribute i uses Python identifier i
    __i = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'i'), 'i', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_i', ST_OnOffStyleType, unicode_default=u'def')
    
    i = property(__i.value, __i.set, None, u'Italic')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_b', ST_OnOffStyleType, unicode_default=u'def')
    
    b = property(__b.value, __b.set, None, u'Bold')


    _ElementMap = {
        __prstClr.name() : __prstClr,
        __font.name() : __font,
        __scrgbClr.name() : __scrgbClr,
        __srgbClr.name() : __srgbClr,
        __hslClr.name() : __hslClr,
        __extLst.name() : __extLst,
        __sysClr.name() : __sysClr,
        __fontRef.name() : __fontRef,
        __schemeClr.name() : __schemeClr
    }
    _AttributeMap = {
        __i.name() : __i,
        __b.name() : __b
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableStyleTextStyle', CT_TableStyleTextStyle)


# Complex type CT_AlphaReplaceEffect with content type EMPTY
class CT_AlphaReplaceEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaReplaceEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute a uses Python identifier a
    __a = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'a'), 'a', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaReplaceEffect_a', ST_PositiveFixedPercentage, required=True)
    
    a = property(__a.value, __a.set, None, u'Alpha')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __a.name() : __a
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaReplaceEffect', CT_AlphaReplaceEffect)


# Complex type CT_ColorReplaceEffect with content type ELEMENT_ONLY
class CT_ColorReplaceEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorReplaceEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorReplaceEffect_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorReplaceEffect_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorReplaceEffect_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorReplaceEffect_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorReplaceEffect_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorReplaceEffect_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __hslClr.name() : __hslClr,
        __sysClr.name() : __sysClr,
        __scrgbClr.name() : __scrgbClr,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorReplaceEffect', CT_ColorReplaceEffect)


# Complex type CT_GraphicalObject with content type ELEMENT_ONLY
class CT_GraphicalObject (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GraphicalObject')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}graphicData uses Python identifier graphicData
    __graphicData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicData'), 'graphicData', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObject_httpschemas_openxmlformats_orgdrawingml2006maingraphicData', False)

    
    graphicData = property(__graphicData.value, __graphicData.set, None, u'Graphic Object Data')


    _ElementMap = {
        __graphicData.name() : __graphicData
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GraphicalObject', CT_GraphicalObject)


# Complex type CT_GroupShape with content type ELEMENT_ONLY
class CT_GroupShape (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_GroupShape')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}graphicFrame uses Python identifier graphicFrame
    __graphicFrame = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'graphicFrame'), 'graphicFrame', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GroupShape_httpschemas_openxmlformats_orgpresentationml2006maingraphicFrame', True)

    
    graphicFrame = property(__graphicFrame.value, __graphicFrame.set, None, u'Graphic Frame')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cxnSp uses Python identifier cxnSp
    __cxnSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cxnSp'), 'cxnSp', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GroupShape_httpschemas_openxmlformats_orgpresentationml2006maincxnSp', True)

    
    cxnSp = property(__cxnSp.value, __cxnSp.set, None, u'Connection Shape')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}grpSpPr uses Python identifier grpSpPr
    __grpSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'grpSpPr'), 'grpSpPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GroupShape_httpschemas_openxmlformats_orgpresentationml2006maingrpSpPr', False)

    
    grpSpPr = property(__grpSpPr.value, __grpSpPr.set, None, u'Group Shape Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}pic uses Python identifier pic
    __pic = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'pic'), 'pic', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GroupShape_httpschemas_openxmlformats_orgpresentationml2006mainpic', True)

    
    pic = property(__pic.value, __pic.set, None, u'Picture')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}nvGrpSpPr uses Python identifier nvGrpSpPr
    __nvGrpSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'nvGrpSpPr'), 'nvGrpSpPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GroupShape_httpschemas_openxmlformats_orgpresentationml2006mainnvGrpSpPr', False)

    
    nvGrpSpPr = property(__nvGrpSpPr.value, __nvGrpSpPr.set, None, u'Non-Visual Properties for a Group Shape')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}contentPart uses Python identifier contentPart
    __contentPart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'contentPart'), 'contentPart', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GroupShape_httpschemas_openxmlformats_orgpresentationml2006maincontentPart', True)

    
    contentPart = property(__contentPart.value, __contentPart.set, None, u'Content Part')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sp uses Python identifier sp
    __sp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sp'), 'sp', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GroupShape_httpschemas_openxmlformats_orgpresentationml2006mainsp', True)

    
    sp = property(__sp.value, __sp.set, None, u'Shape')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GroupShape_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}grpSp uses Python identifier grpSp
    __grpSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'grpSp'), 'grpSp', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GroupShape_httpschemas_openxmlformats_orgpresentationml2006maingrpSp', True)

    
    grpSp = property(__grpSp.value, __grpSp.set, None, u'Group Shape')


    _ElementMap = {
        __graphicFrame.name() : __graphicFrame,
        __cxnSp.name() : __cxnSp,
        __grpSpPr.name() : __grpSpPr,
        __pic.name() : __pic,
        __nvGrpSpPr.name() : __nvGrpSpPr,
        __contentPart.name() : __contentPart,
        __sp.name() : __sp,
        __extLst.name() : __extLst,
        __grpSp.name() : __grpSp
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_GroupShape', CT_GroupShape)


# Complex type CT_DashStopList with content type ELEMENT_ONLY
class CT_DashStopList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_DashStopList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ds uses Python identifier ds
    __ds = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ds'), 'ds', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DashStopList_httpschemas_openxmlformats_orgdrawingml2006mainds', True)

    
    ds = property(__ds.value, __ds.set, None, u'Dash Stop')


    _ElementMap = {
        __ds.name() : __ds
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_DashStopList', CT_DashStopList)


# Complex type CT_NotesMasterIdList with content type ELEMENT_ONLY
class CT_NotesMasterIdList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_NotesMasterIdList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}notesMasterId uses Python identifier notesMasterId
    __notesMasterId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'notesMasterId'), 'notesMasterId', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesMasterIdList_httpschemas_openxmlformats_orgpresentationml2006mainnotesMasterId', False)

    
    notesMasterId = property(__notesMasterId.value, __notesMasterId.set, None, u'Notes Master ID')


    _ElementMap = {
        __notesMasterId.name() : __notesMasterId
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_NotesMasterIdList', CT_NotesMasterIdList)


# Complex type CT_TextLineBreak with content type ELEMENT_ONLY
class CT_TextLineBreak (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextLineBreak')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextLineBreak_httpschemas_openxmlformats_orgdrawingml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Text Run Properties')


    _ElementMap = {
        __rPr.name() : __rPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextLineBreak', CT_TextLineBreak)


# Complex type CT_TileInfoProperties with content type EMPTY
class CT_TileInfoProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TileInfoProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute sx uses Python identifier sx
    __sx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sx'), 'sx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TileInfoProperties_sx', ST_Percentage)
    
    sx = property(__sx.value, __sx.set, None, u'Horizontal Ratio')

    
    # Attribute flip uses Python identifier flip
    __flip = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'flip'), 'flip', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TileInfoProperties_flip', ST_TileFlipMode)
    
    flip = property(__flip.value, __flip.set, None, u'Tile Flipping')

    
    # Attribute tx uses Python identifier tx
    __tx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tx'), 'tx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TileInfoProperties_tx', ST_Coordinate)
    
    tx = property(__tx.value, __tx.set, None, u'Horizontal Offset')

    
    # Attribute sy uses Python identifier sy
    __sy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sy'), 'sy', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TileInfoProperties_sy', ST_Percentage)
    
    sy = property(__sy.value, __sy.set, None, u'Vertical Ratio')

    
    # Attribute ty uses Python identifier ty
    __ty = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ty'), 'ty', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TileInfoProperties_ty', ST_Coordinate)
    
    ty = property(__ty.value, __ty.set, None, u'Vertical Offset')

    
    # Attribute algn uses Python identifier algn
    __algn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algn'), 'algn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TileInfoProperties_algn', ST_RectAlignment)
    
    algn = property(__algn.value, __algn.set, None, u'Alignment')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __sx.name() : __sx,
        __flip.name() : __flip,
        __tx.name() : __tx,
        __sy.name() : __sy,
        __ty.name() : __ty,
        __algn.name() : __algn
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TileInfoProperties', CT_TileInfoProperties)


# Complex type CT_PtList with content type ELEMENT_ONLY
class CT_PtList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_PtList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}pt uses Python identifier pt
    __pt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'pt'), 'pt', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PtList_httpschemas_openxmlformats_orgdrawingml2006diagrampt', True)

    
    pt = property(__pt.value, __pt.set, None, u'Point')


    _ElementMap = {
        __pt.name() : __pt
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_PtList', CT_PtList)


# Complex type CT_DiagramDefinition with content type ELEMENT_ONLY
class CT_DiagramDefinition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_DiagramDefinition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}styleData uses Python identifier styleData
    __styleData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'styleData'), 'styleData', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramstyleData', False)

    
    styleData = property(__styleData.value, __styleData.set, None, u'Style Data')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}sampData uses Python identifier sampData
    __sampData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'sampData'), 'sampData', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramsampData', False)

    
    sampData = property(__sampData.value, __sampData.set, None, u'Sample Data')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'title'), 'title', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramtitle', True)

    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}layoutNode uses Python identifier layoutNode
    __layoutNode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), 'layoutNode', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramlayoutNode', False)

    
    layoutNode = property(__layoutNode.value, __layoutNode.set, None, u'Layout Node')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}desc uses Python identifier desc
    __desc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'desc'), 'desc', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramdesc', True)

    
    desc = property(__desc.value, __desc.set, None, u'Description')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}clrData uses Python identifier clrData
    __clrData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'clrData'), 'clrData', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramclrData', False)

    
    clrData = property(__clrData.value, __clrData.set, None, u'Color Transform Sample Data')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}catLst uses Python identifier catLst
    __catLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), 'catLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramcatLst', False)

    
    catLst = property(__catLst.value, __catLst.set, None, u'Category List')

    
    # Attribute defStyle uses Python identifier defStyle
    __defStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defStyle'), 'defStyle', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_defStyle', pyxb.binding.datatypes.string, unicode_default=u'')
    
    defStyle = property(__defStyle.value, __defStyle.set, None, u'Default Style')

    
    # Attribute minVer uses Python identifier minVer
    __minVer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minVer'), 'minVer', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_minVer', pyxb.binding.datatypes.string, unicode_default=u'http://schemas.openxmlformats.org/drawingml/2006/diagram')
    
    minVer = property(__minVer.value, __minVer.set, None, u'Minimum Version')

    
    # Attribute uniqueId uses Python identifier uniqueId
    __uniqueId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueId'), 'uniqueId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_uniqueId', pyxb.binding.datatypes.string, unicode_default=u'')
    
    uniqueId = property(__uniqueId.value, __uniqueId.set, None, u'Unique Identifier')


    _ElementMap = {
        __styleData.name() : __styleData,
        __sampData.name() : __sampData,
        __title.name() : __title,
        __layoutNode.name() : __layoutNode,
        __desc.name() : __desc,
        __clrData.name() : __clrData,
        __extLst.name() : __extLst,
        __catLst.name() : __catLst
    }
    _AttributeMap = {
        __defStyle.name() : __defStyle,
        __minVer.name() : __minVer,
        __uniqueId.name() : __uniqueId
    }
_Namespace.addCategoryObject('typeBinding', u'CT_DiagramDefinition', CT_DiagramDefinition)


# Complex type CT_PictureLocking with content type ELEMENT_ONLY
class CT_PictureLocking (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PictureLocking')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute noResize uses Python identifier noResize
    __noResize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noResize'), 'noResize', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noResize', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noResize = property(__noResize.value, __noResize.set, None, u'Disallow Shape Resize')

    
    # Attribute noMove uses Python identifier noMove
    __noMove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noMove'), 'noMove', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noMove', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noMove = property(__noMove.value, __noMove.set, None, u'Disallow Shape Movement')

    
    # Attribute noGrp uses Python identifier noGrp
    __noGrp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noGrp'), 'noGrp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noGrp', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noGrp = property(__noGrp.value, __noGrp.set, None, u'Disallow Shape Grouping')

    
    # Attribute noSelect uses Python identifier noSelect
    __noSelect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noSelect'), 'noSelect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noSelect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noSelect = property(__noSelect.value, __noSelect.set, None, u'Disallow Shape Selection')

    
    # Attribute noChangeArrowheads uses Python identifier noChangeArrowheads
    __noChangeArrowheads = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeArrowheads'), 'noChangeArrowheads', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noChangeArrowheads', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeArrowheads = property(__noChangeArrowheads.value, __noChangeArrowheads.set, None, u'Disallow Arrowhead Changes')

    
    # Attribute noCrop uses Python identifier noCrop
    __noCrop = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noCrop'), 'noCrop', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noCrop', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noCrop = property(__noCrop.value, __noCrop.set, None, u'Disallow Crop Changes')

    
    # Attribute noEditPoints uses Python identifier noEditPoints
    __noEditPoints = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noEditPoints'), 'noEditPoints', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noEditPoints', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noEditPoints = property(__noEditPoints.value, __noEditPoints.set, None, u'Disallow Shape Point Editing')

    
    # Attribute noChangeAspect uses Python identifier noChangeAspect
    __noChangeAspect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeAspect'), 'noChangeAspect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noChangeAspect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeAspect = property(__noChangeAspect.value, __noChangeAspect.set, None, u'Disallow Aspect Ratio Change')

    
    # Attribute noAdjustHandles uses Python identifier noAdjustHandles
    __noAdjustHandles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noAdjustHandles'), 'noAdjustHandles', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noAdjustHandles', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noAdjustHandles = property(__noAdjustHandles.value, __noAdjustHandles.set, None, u'Disallow Showing Adjust Handles')

    
    # Attribute noChangeShapeType uses Python identifier noChangeShapeType
    __noChangeShapeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeShapeType'), 'noChangeShapeType', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noChangeShapeType', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeShapeType = property(__noChangeShapeType.value, __noChangeShapeType.set, None, u'Disallow Shape Type Change')

    
    # Attribute noRot uses Python identifier noRot
    __noRot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noRot'), 'noRot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noRot', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noRot = property(__noRot.value, __noRot.set, None, u'Disallow Shape Rotation')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __noResize.name() : __noResize,
        __noMove.name() : __noMove,
        __noGrp.name() : __noGrp,
        __noSelect.name() : __noSelect,
        __noChangeArrowheads.name() : __noChangeArrowheads,
        __noCrop.name() : __noCrop,
        __noEditPoints.name() : __noEditPoints,
        __noChangeAspect.name() : __noChangeAspect,
        __noAdjustHandles.name() : __noAdjustHandles,
        __noChangeShapeType.name() : __noChangeShapeType,
        __noRot.name() : __noRot
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PictureLocking', CT_PictureLocking)


# Complex type CT_GrayscaleEffect with content type EMPTY
class CT_GrayscaleEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GrayscaleEffect')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GrayscaleEffect', CT_GrayscaleEffect)


# Complex type CT_TLCommandBehavior with content type ELEMENT_ONLY
class CT_TLCommandBehavior (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLCommandBehavior')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cBhvr uses Python identifier cBhvr
    __cBhvr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), 'cBhvr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommandBehavior_httpschemas_openxmlformats_orgpresentationml2006maincBhvr', False)

    
    cBhvr = property(__cBhvr.value, __cBhvr.set, None, None)

    
    # Attribute cmd uses Python identifier cmd
    __cmd = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cmd'), 'cmd', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommandBehavior_cmd', pyxb.binding.datatypes.string)
    
    cmd = property(__cmd.value, __cmd.set, None, u'Command')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommandBehavior_type', ST_TLCommandType)
    
    type = property(__type.value, __type.set, None, u'Command Type')


    _ElementMap = {
        __cBhvr.name() : __cBhvr
    }
    _AttributeMap = {
        __cmd.name() : __cmd,
        __type.name() : __type
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLCommandBehavior', CT_TLCommandBehavior)


# Complex type CT_Path2DQuadBezierTo with content type ELEMENT_ONLY
class CT_Path2DQuadBezierTo (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2DQuadBezierTo')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pt uses Python identifier pt
    __pt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), 'pt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DQuadBezierTo_httpschemas_openxmlformats_orgdrawingml2006mainpt', True)

    
    pt = property(__pt.value, __pt.set, None, u'Shape Path Point')


    _ElementMap = {
        __pt.name() : __pt
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2DQuadBezierTo', CT_Path2DQuadBezierTo)


# Complex type CT_GvmlTextShape with content type ELEMENT_ONLY
class CT_GvmlTextShape (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlTextShape')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlTextShape_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}txBody uses Python identifier txBody
    __txBody = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'txBody'), 'txBody', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlTextShape_httpschemas_openxmlformats_orgdrawingml2006maintxBody', False)

    
    txBody = property(__txBody.value, __txBody.set, None, u'Shape Text Body')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}useSpRect uses Python identifier useSpRect
    __useSpRect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'useSpRect'), 'useSpRect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlTextShape_httpschemas_openxmlformats_orgdrawingml2006mainuseSpRect', False)

    
    useSpRect = property(__useSpRect.value, __useSpRect.set, None, u'Use Shape Text Rectangle')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}xfrm uses Python identifier xfrm
    __xfrm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), 'xfrm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlTextShape_httpschemas_openxmlformats_orgdrawingml2006mainxfrm', False)

    
    xfrm = property(__xfrm.value, __xfrm.set, None, None)


    _ElementMap = {
        __extLst.name() : __extLst,
        __txBody.name() : __txBody,
        __useSpRect.name() : __useSpRect,
        __xfrm.name() : __xfrm
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlTextShape', CT_GvmlTextShape)


# Complex type CT_TableStyleList with content type ELEMENT_ONLY
class CT_TableStyleList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableStyleList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tblStyle uses Python identifier tblStyle
    __tblStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tblStyle'), 'tblStyle', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleList_httpschemas_openxmlformats_orgdrawingml2006maintblStyle', True)

    
    tblStyle = property(__tblStyle.value, __tblStyle.set, None, u'Table Style')

    
    # Attribute def uses Python identifier def_
    __def = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'def'), 'def_', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleList_def', _s.ST_Guid, required=True)
    
    def_ = property(__def.value, __def.set, None, u'Default')


    _ElementMap = {
        __tblStyle.name() : __tblStyle
    }
    _AttributeMap = {
        __def.name() : __def
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableStyleList', CT_TableStyleList)


# Complex type CT_HeaderFooter with content type ELEMENT_ONLY
class CT_HeaderFooter (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_HeaderFooter')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HeaderFooter_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute dt uses Python identifier dt
    __dt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dt'), 'dt', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HeaderFooter_dt', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    dt = property(__dt.value, __dt.set, None, u'Date/Time Placeholder')

    
    # Attribute sldNum uses Python identifier sldNum
    __sldNum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sldNum'), 'sldNum', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HeaderFooter_sldNum', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    sldNum = property(__sldNum.value, __sldNum.set, None, u'Slide Number Placeholder')

    
    # Attribute ftr uses Python identifier ftr
    __ftr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ftr'), 'ftr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HeaderFooter_ftr', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    ftr = property(__ftr.value, __ftr.set, None, u'Footer Placeholder')

    
    # Attribute hdr uses Python identifier hdr
    __hdr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hdr'), 'hdr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HeaderFooter_hdr', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    hdr = property(__hdr.value, __hdr.set, None, u'Header Placeholder')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __dt.name() : __dt,
        __sldNum.name() : __sldNum,
        __ftr.name() : __ftr,
        __hdr.name() : __hdr
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_HeaderFooter', CT_HeaderFooter)


# Complex type CT_TLTriggerTimeNodeID with content type EMPTY
class CT_TLTriggerTimeNodeID (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLTriggerTimeNodeID')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTriggerTimeNodeID_val', ST_TLTimeNodeID, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLTriggerTimeNodeID', CT_TLTriggerTimeNodeID)


# Complex type CT_TLAnimVariantIntegerVal with content type EMPTY
class CT_TLAnimVariantIntegerVal (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLAnimVariantIntegerVal')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimVariantIntegerVal_val', pyxb.binding.datatypes.int, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLAnimVariantIntegerVal', CT_TLAnimVariantIntegerVal)


# Complex type CT_ConnectorLocking with content type ELEMENT_ONLY
class CT_ConnectorLocking (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ConnectorLocking')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute noSelect uses Python identifier noSelect
    __noSelect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noSelect'), 'noSelect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noSelect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noSelect = property(__noSelect.value, __noSelect.set, None, u'Disallow Shape Selection')

    
    # Attribute noMove uses Python identifier noMove
    __noMove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noMove'), 'noMove', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noMove', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noMove = property(__noMove.value, __noMove.set, None, u'Disallow Shape Movement')

    
    # Attribute noEditPoints uses Python identifier noEditPoints
    __noEditPoints = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noEditPoints'), 'noEditPoints', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noEditPoints', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noEditPoints = property(__noEditPoints.value, __noEditPoints.set, None, u'Disallow Shape Point Editing')

    
    # Attribute noChangeShapeType uses Python identifier noChangeShapeType
    __noChangeShapeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeShapeType'), 'noChangeShapeType', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noChangeShapeType', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeShapeType = property(__noChangeShapeType.value, __noChangeShapeType.set, None, u'Disallow Shape Type Change')

    
    # Attribute noChangeAspect uses Python identifier noChangeAspect
    __noChangeAspect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeAspect'), 'noChangeAspect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noChangeAspect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeAspect = property(__noChangeAspect.value, __noChangeAspect.set, None, u'Disallow Aspect Ratio Change')

    
    # Attribute noChangeArrowheads uses Python identifier noChangeArrowheads
    __noChangeArrowheads = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeArrowheads'), 'noChangeArrowheads', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noChangeArrowheads', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeArrowheads = property(__noChangeArrowheads.value, __noChangeArrowheads.set, None, u'Disallow Arrowhead Changes')

    
    # Attribute noAdjustHandles uses Python identifier noAdjustHandles
    __noAdjustHandles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noAdjustHandles'), 'noAdjustHandles', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noAdjustHandles', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noAdjustHandles = property(__noAdjustHandles.value, __noAdjustHandles.set, None, u'Disallow Showing Adjust Handles')

    
    # Attribute noRot uses Python identifier noRot
    __noRot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noRot'), 'noRot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noRot', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noRot = property(__noRot.value, __noRot.set, None, u'Disallow Shape Rotation')

    
    # Attribute noGrp uses Python identifier noGrp
    __noGrp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noGrp'), 'noGrp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noGrp', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noGrp = property(__noGrp.value, __noGrp.set, None, u'Disallow Shape Grouping')

    
    # Attribute noResize uses Python identifier noResize
    __noResize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noResize'), 'noResize', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noResize', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noResize = property(__noResize.value, __noResize.set, None, u'Disallow Shape Resize')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __noSelect.name() : __noSelect,
        __noMove.name() : __noMove,
        __noEditPoints.name() : __noEditPoints,
        __noChangeShapeType.name() : __noChangeShapeType,
        __noChangeAspect.name() : __noChangeAspect,
        __noChangeArrowheads.name() : __noChangeArrowheads,
        __noAdjustHandles.name() : __noAdjustHandles,
        __noRot.name() : __noRot,
        __noGrp.name() : __noGrp,
        __noResize.name() : __noResize
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ConnectorLocking', CT_ConnectorLocking)


# Complex type CT_OfficeArtExtension with content type ELEMENT_ONLY
class CT_OfficeArtExtension (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_OfficeArtExtension')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute uri uses Python identifier uri
    __uri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uri'), 'uri', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeArtExtension_uri', pyxb.binding.datatypes.token)
    
    uri = property(__uri.value, __uri.set, None, u'Uniform Resource Identifier')

    _HasWildcardElement = True

    _ElementMap = {
        
    }
    _AttributeMap = {
        __uri.name() : __uri
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_OfficeArtExtension', CT_OfficeArtExtension)


# Complex type CT_BaseStyles with content type ELEMENT_ONLY
class CT_BaseStyles (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BaseStyles')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BaseStyles_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrScheme uses Python identifier clrScheme
    __clrScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme'), 'clrScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BaseStyles_httpschemas_openxmlformats_orgdrawingml2006mainclrScheme', False)

    
    clrScheme = property(__clrScheme.value, __clrScheme.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fontScheme uses Python identifier fontScheme
    __fontScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fontScheme'), 'fontScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BaseStyles_httpschemas_openxmlformats_orgdrawingml2006mainfontScheme', False)

    
    fontScheme = property(__fontScheme.value, __fontScheme.set, None, u'Font Scheme')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fmtScheme uses Python identifier fmtScheme
    __fmtScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fmtScheme'), 'fmtScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BaseStyles_httpschemas_openxmlformats_orgdrawingml2006mainfmtScheme', False)

    
    fmtScheme = property(__fmtScheme.value, __fmtScheme.set, None, u'Format Scheme')


    _ElementMap = {
        __extLst.name() : __extLst,
        __clrScheme.name() : __clrScheme,
        __fontScheme.name() : __fontScheme,
        __fmtScheme.name() : __fmtScheme
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BaseStyles', CT_BaseStyles)


# Complex type CT_OptionalBlackTransition with content type EMPTY
class CT_OptionalBlackTransition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_OptionalBlackTransition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute thruBlk uses Python identifier thruBlk
    __thruBlk = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'thruBlk'), 'thruBlk', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OptionalBlackTransition_thruBlk', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    thruBlk = property(__thruBlk.value, __thruBlk.set, None, u'Transition Through Black')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __thruBlk.name() : __thruBlk
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_OptionalBlackTransition', CT_OptionalBlackTransition)


# Complex type CT_OrgChart with content type EMPTY
class CT_OrgChart (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_OrgChart')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_OrgChart_val', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    val = property(__val.value, __val.set, None, u'Show Organization Chart User Interface Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_OrgChart', CT_OrgChart)


# Complex type CT_InverseTransform with content type EMPTY
class CT_InverseTransform (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_InverseTransform')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_InverseTransform', CT_InverseTransform)


# Complex type CT_TLTimeTargetElement with content type ELEMENT_ONLY
class CT_TLTimeTargetElement (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLTimeTargetElement')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sldTgt uses Python identifier sldTgt
    __sldTgt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sldTgt'), 'sldTgt', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeTargetElement_httpschemas_openxmlformats_orgpresentationml2006mainsldTgt', False)

    
    sldTgt = property(__sldTgt.value, __sldTgt.set, None, u'Slide Target')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sndTgt uses Python identifier sndTgt
    __sndTgt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sndTgt'), 'sndTgt', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeTargetElement_httpschemas_openxmlformats_orgpresentationml2006mainsndTgt', False)

    
    sndTgt = property(__sndTgt.value, __sndTgt.set, None, u'Sound Target')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}inkTgt uses Python identifier inkTgt
    __inkTgt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'inkTgt'), 'inkTgt', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeTargetElement_httpschemas_openxmlformats_orgpresentationml2006maininkTgt', False)

    
    inkTgt = property(__inkTgt.value, __inkTgt.set, None, u'Ink Target')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}spTgt uses Python identifier spTgt
    __spTgt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'spTgt'), 'spTgt', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeTargetElement_httpschemas_openxmlformats_orgpresentationml2006mainspTgt', False)

    
    spTgt = property(__spTgt.value, __spTgt.set, None, u'Shape Target')


    _ElementMap = {
        __sldTgt.name() : __sldTgt,
        __sndTgt.name() : __sndTgt,
        __inkTgt.name() : __inkTgt,
        __spTgt.name() : __spTgt
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLTimeTargetElement', CT_TLTimeTargetElement)


# Complex type CT_ShowProperties with content type ELEMENT_ONLY
class CT_ShowProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_ShowProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}present uses Python identifier present
    __present = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'present'), 'present', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShowProperties_httpschemas_openxmlformats_orgpresentationml2006mainpresent', False)

    
    present = property(__present.value, __present.set, None, u'Presenter Slide Show Mode')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}kiosk uses Python identifier kiosk
    __kiosk = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'kiosk'), 'kiosk', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShowProperties_httpschemas_openxmlformats_orgpresentationml2006mainkiosk', False)

    
    kiosk = property(__kiosk.value, __kiosk.set, None, u'Kiosk Slide Show Mode')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sldAll uses Python identifier sldAll
    __sldAll = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sldAll'), 'sldAll', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShowProperties_httpschemas_openxmlformats_orgpresentationml2006mainsldAll', False)

    
    sldAll = property(__sldAll.value, __sldAll.set, None, u'All Slides')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShowProperties_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sldRg uses Python identifier sldRg
    __sldRg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sldRg'), 'sldRg', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShowProperties_httpschemas_openxmlformats_orgpresentationml2006mainsldRg', False)

    
    sldRg = property(__sldRg.value, __sldRg.set, None, u'Slide Range')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}custShow uses Python identifier custShow
    __custShow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'custShow'), 'custShow', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShowProperties_httpschemas_openxmlformats_orgpresentationml2006maincustShow', False)

    
    custShow = property(__custShow.value, __custShow.set, None, u'Custom Show')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}browse uses Python identifier browse
    __browse = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'browse'), 'browse', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShowProperties_httpschemas_openxmlformats_orgpresentationml2006mainbrowse', False)

    
    browse = property(__browse.value, __browse.set, None, u'Browse Slide Show Mode')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}penClr uses Python identifier penClr
    __penClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'penClr'), 'penClr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShowProperties_httpschemas_openxmlformats_orgpresentationml2006mainpenClr', False)

    
    penClr = property(__penClr.value, __penClr.set, None, u'Pen Color for Slide Show')

    
    # Attribute showNarration uses Python identifier showNarration
    __showNarration = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showNarration'), 'showNarration', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShowProperties_showNarration', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showNarration = property(__showNarration.value, __showNarration.set, None, u'Show Narration in Slide Show')

    
    # Attribute useTimings uses Python identifier useTimings
    __useTimings = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'useTimings'), 'useTimings', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShowProperties_useTimings', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    useTimings = property(__useTimings.value, __useTimings.set, None, u'Use Timings in Slide Show')

    
    # Attribute showAnimation uses Python identifier showAnimation
    __showAnimation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showAnimation'), 'showAnimation', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShowProperties_showAnimation', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showAnimation = property(__showAnimation.value, __showAnimation.set, None, u'Show Animation in Slide Show')

    
    # Attribute loop uses Python identifier loop
    __loop = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'loop'), 'loop', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShowProperties_loop', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    loop = property(__loop.value, __loop.set, None, u'Loop Slide Show')


    _ElementMap = {
        __present.name() : __present,
        __kiosk.name() : __kiosk,
        __sldAll.name() : __sldAll,
        __extLst.name() : __extLst,
        __sldRg.name() : __sldRg,
        __custShow.name() : __custShow,
        __browse.name() : __browse,
        __penClr.name() : __penClr
    }
    _AttributeMap = {
        __showNarration.name() : __showNarration,
        __useTimings.name() : __useTimings,
        __showAnimation.name() : __showAnimation,
        __loop.name() : __loop
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_ShowProperties', CT_ShowProperties)


# Complex type CT_ColorSchemeList with content type ELEMENT_ONLY
class CT_ColorSchemeList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorSchemeList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extraClrScheme uses Python identifier extraClrScheme
    __extraClrScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extraClrScheme'), 'extraClrScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorSchemeList_httpschemas_openxmlformats_orgdrawingml2006mainextraClrScheme', True)

    
    extraClrScheme = property(__extraClrScheme.value, __extraClrScheme.set, None, u'Extra Color Scheme')


    _ElementMap = {
        __extraClrScheme.name() : __extraClrScheme
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorSchemeList', CT_ColorSchemeList)


# Complex type CT_GvmlConnectorNonVisual with content type ELEMENT_ONLY
class CT_GvmlConnectorNonVisual (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlConnectorNonVisual')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvCxnSpPr uses Python identifier cNvCxnSpPr
    __cNvCxnSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvCxnSpPr'), 'cNvCxnSpPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlConnectorNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvCxnSpPr', False)

    
    cNvCxnSpPr = property(__cNvCxnSpPr.value, __cNvCxnSpPr.set, None, u'Non-Visual Connector Shape Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvPr uses Python identifier cNvPr
    __cNvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), 'cNvPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlConnectorNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvPr', False)

    
    cNvPr = property(__cNvPr.value, __cNvPr.set, None, u'Non-Visual Drawing Properties')


    _ElementMap = {
        __cNvCxnSpPr.name() : __cNvCxnSpPr,
        __cNvPr.name() : __cNvPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlConnectorNonVisual', CT_GvmlConnectorNonVisual)


# Complex type CT_SoftEdgesEffect with content type EMPTY
class CT_SoftEdgesEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_SoftEdgesEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute rad uses Python identifier rad
    __rad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rad'), 'rad', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SoftEdgesEffect_rad', ST_PositiveCoordinate, required=True)
    
    rad = property(__rad.value, __rad.set, None, u'Radius')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __rad.name() : __rad
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_SoftEdgesEffect', CT_SoftEdgesEffect)


# Complex type CT_SplitTransition with content type EMPTY
class CT_SplitTransition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SplitTransition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute orient uses Python identifier orient
    __orient = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'orient'), 'orient', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SplitTransition_orient', ST_Direction_, unicode_default=u'horz')
    
    orient = property(__orient.value, __orient.set, None, u'Orientation')

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SplitTransition_dir', ST_TransitionInOutDirectionType, unicode_default=u'out')
    
    dir = property(__dir.value, __dir.set, None, u'Direction')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __orient.name() : __orient,
        __dir.name() : __dir
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SplitTransition', CT_SplitTransition)


# Complex type CT_CustomColorList with content type ELEMENT_ONLY
class CT_CustomColorList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_CustomColorList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}custClr uses Python identifier custClr
    __custClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'custClr'), 'custClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColorList_httpschemas_openxmlformats_orgdrawingml2006maincustClr', True)

    
    custClr = property(__custClr.value, __custClr.set, None, u'Custom color')


    _ElementMap = {
        __custClr.name() : __custClr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_CustomColorList', CT_CustomColorList)


# Complex type CT_OrientationTransition with content type EMPTY
class CT_OrientationTransition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_OrientationTransition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OrientationTransition_dir', ST_Direction_, unicode_default=u'horz')
    
    dir = property(__dir.value, __dir.set, None, u'Transition Direction')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __dir.name() : __dir
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_OrientationTransition', CT_OrientationTransition)


# Complex type CT_DataModel with content type ELEMENT_ONLY
class CT_DataModel (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_DataModel')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DataModel_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}ptLst uses Python identifier ptLst
    __ptLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'ptLst'), 'ptLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DataModel_httpschemas_openxmlformats_orgdrawingml2006diagramptLst', False)

    
    ptLst = property(__ptLst.value, __ptLst.set, None, u'Point List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}whole uses Python identifier whole
    __whole = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'whole'), 'whole', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DataModel_httpschemas_openxmlformats_orgdrawingml2006diagramwhole', False)

    
    whole = property(__whole.value, __whole.set, None, u'Whole E2O Formatting')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}bg uses Python identifier bg
    __bg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'bg'), 'bg', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DataModel_httpschemas_openxmlformats_orgdrawingml2006diagrambg', False)

    
    bg = property(__bg.value, __bg.set, None, u'Background Formatting')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}cxnLst uses Python identifier cxnLst
    __cxnLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'cxnLst'), 'cxnLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DataModel_httpschemas_openxmlformats_orgdrawingml2006diagramcxnLst', False)

    
    cxnLst = property(__cxnLst.value, __cxnLst.set, None, u'Connection List')


    _ElementMap = {
        __extLst.name() : __extLst,
        __ptLst.name() : __ptLst,
        __whole.name() : __whole,
        __bg.name() : __bg,
        __cxnLst.name() : __cxnLst
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_DataModel', CT_DataModel)


# Complex type CT_ShapeNonVisual with content type ELEMENT_ONLY
class CT_ShapeNonVisual (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_ShapeNonVisual')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}nvPr uses Python identifier nvPr
    __nvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'nvPr'), 'nvPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShapeNonVisual_httpschemas_openxmlformats_orgpresentationml2006mainnvPr', False)

    
    nvPr = property(__nvPr.value, __nvPr.set, None, u'Application Non-Visual Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cNvPr uses Python identifier cNvPr
    __cNvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPr'), 'cNvPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShapeNonVisual_httpschemas_openxmlformats_orgpresentationml2006maincNvPr', False)

    
    cNvPr = property(__cNvPr.value, __cNvPr.set, None, u'Non-Visual Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cNvSpPr uses Python identifier cNvSpPr
    __cNvSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cNvSpPr'), 'cNvSpPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ShapeNonVisual_httpschemas_openxmlformats_orgpresentationml2006maincNvSpPr', False)

    
    cNvSpPr = property(__cNvSpPr.value, __cNvSpPr.set, None, u'Non-Visual Drawing Properties for a Shape')


    _ElementMap = {
        __nvPr.name() : __nvPr,
        __cNvPr.name() : __cNvPr,
        __cNvSpPr.name() : __cNvSpPr
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_ShapeNonVisual', CT_ShapeNonVisual)


# Complex type CT_TLOleBuildChart with content type EMPTY
class CT_TLOleBuildChart (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLOleBuildChart')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute bld uses Python identifier bld
    __bld = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bld'), 'bld', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLOleBuildChart_bld', ST_TLOleChartBuildType, unicode_default=u'allAtOnce')
    
    bld = property(__bld.value, __bld.set, None, u'Build')

    
    # Attribute uiExpand uses Python identifier uiExpand
    __uiExpand = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uiExpand'), 'uiExpand', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLOleBuildChart_uiExpand', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    uiExpand = property(__uiExpand.value, __uiExpand.set, None, u'Expand UI')

    
    # Attribute grpId uses Python identifier grpId
    __grpId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'grpId'), 'grpId', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLOleBuildChart_grpId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    grpId = property(__grpId.value, __grpId.set, None, u'Group ID')

    
    # Attribute spid uses Python identifier spid
    __spid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spid'), 'spid', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLOleBuildChart_spid', ST_ShapeID, required=True)
    
    spid = property(__spid.value, __spid.set, None, u'Shape ID')

    
    # Attribute animBg uses Python identifier animBg
    __animBg = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'animBg'), 'animBg', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLOleBuildChart_animBg', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    animBg = property(__animBg.value, __animBg.set, None, u'Animate Background')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __bld.name() : __bld,
        __uiExpand.name() : __uiExpand,
        __grpId.name() : __grpId,
        __spid.name() : __spid,
        __animBg.name() : __animBg
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLOleBuildChart', CT_TLOleBuildChart)


# Complex type CT_AlphaModulateEffect with content type ELEMENT_ONLY
class CT_AlphaModulateEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaModulateEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cont uses Python identifier cont
    __cont = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cont'), 'cont', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaModulateEffect_httpschemas_openxmlformats_orgdrawingml2006maincont', False)

    
    cont = property(__cont.value, __cont.set, None, None)


    _ElementMap = {
        __cont.name() : __cont
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaModulateEffect', CT_AlphaModulateEffect)


# Complex type CT_Bevel with content type EMPTY
class CT_Bevel (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Bevel')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute h uses Python identifier h
    __h = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'h'), 'h', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Bevel_h', ST_PositiveCoordinate, unicode_default=u'76200')
    
    h = property(__h.value, __h.set, None, u'Height')

    
    # Attribute w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'w'), 'w', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Bevel_w', ST_PositiveCoordinate, unicode_default=u'76200')
    
    w = property(__w.value, __w.set, None, u'Width')

    
    # Attribute prst uses Python identifier prst
    __prst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prst'), 'prst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Bevel_prst', ST_BevelPresetType, unicode_default=u'circle')
    
    prst = property(__prst.value, __prst.set, None, u'Preset Bevel')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __h.name() : __h,
        __w.name() : __w,
        __prst.name() : __prst
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Bevel', CT_Bevel)


# Complex type CT_Description with content type EMPTY
class CT_Description (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Description')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Description_lang', pyxb.binding.datatypes.string, unicode_default=u'')
    
    lang = property(__lang.value, __lang.set, None, u'Language')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Description_val', pyxb.binding.datatypes.string, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lang.name() : __lang,
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Description', CT_Description)


# Complex type CT_SlideMasterIdListEntry with content type ELEMENT_ONLY
class CT_SlideMasterIdListEntry (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideMasterIdListEntry')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMasterIdListEntry_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id_
    __id_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id_', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMasterIdListEntry_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id_ = property(__id_.value, __id_.set, None, u'Relationship ID')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMasterIdListEntry_id', ST_SlideMasterId)
    
    id = property(__id.value, __id.set, None, u'Slide Master Identifier')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __id_.name() : __id_,
        __id.name() : __id
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideMasterIdListEntry', CT_SlideMasterIdListEntry)


# Complex type CT_OleObjectEmbed with content type ELEMENT_ONLY
class CT_OleObjectEmbed (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_OleObjectEmbed')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OleObjectEmbed_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute followColorScheme uses Python identifier followColorScheme
    __followColorScheme = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'followColorScheme'), 'followColorScheme', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OleObjectEmbed_followColorScheme', ST_OleObjectFollowColorScheme, unicode_default=u'none')
    
    followColorScheme = property(__followColorScheme.value, __followColorScheme.set, None, u'Color Scheme Properties for Embedded object')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __followColorScheme.name() : __followColorScheme
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_OleObjectEmbed', CT_OleObjectEmbed)


# Complex type CT_Connector with content type ELEMENT_ONLY
class CT_Connector (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_Connector')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Connector_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}nvCxnSpPr uses Python identifier nvCxnSpPr
    __nvCxnSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'nvCxnSpPr'), 'nvCxnSpPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Connector_httpschemas_openxmlformats_orgpresentationml2006mainnvCxnSpPr', False)

    
    nvCxnSpPr = property(__nvCxnSpPr.value, __nvCxnSpPr.set, None, u'Non-Visual Properties for a Connection Shape')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'style'), 'style', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Connector_httpschemas_openxmlformats_orgpresentationml2006mainstyle', False)

    
    style = property(__style.value, __style.set, None, u'Connector Shape Style')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}spPr uses Python identifier spPr
    __spPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'spPr'), 'spPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Connector_httpschemas_openxmlformats_orgpresentationml2006mainspPr', False)

    
    spPr = property(__spPr.value, __spPr.set, None, u'Shape Properties')


    _ElementMap = {
        __extLst.name() : __extLst,
        __nvCxnSpPr.name() : __nvCxnSpPr,
        __style.name() : __style,
        __spPr.name() : __spPr
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_Connector', CT_Connector)


# Complex type CT_SlideSize with content type EMPTY
class CT_SlideSize (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideSize')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute cy uses Python identifier cy
    __cy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cy'), 'cy', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideSize_cy', ST_SlideSizeCoordinate, required=True)
    
    cy = property(__cy.value, __cy.set, None, u'Extent Width')

    
    # Attribute cx uses Python identifier cx
    __cx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cx'), 'cx', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideSize_cx', ST_SlideSizeCoordinate, required=True)
    
    cx = property(__cx.value, __cx.set, None, u'Extent Length')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideSize_type', ST_SlideSizeType, unicode_default=u'custom')
    
    type = property(__type.value, __type.set, None, u'Type of Size')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __cy.name() : __cy,
        __cx.name() : __cx,
        __type.name() : __type
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideSize', CT_SlideSize)


# Complex type CT_PathShadeProperties with content type ELEMENT_ONLY
class CT_PathShadeProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PathShadeProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillToRect uses Python identifier fillToRect
    __fillToRect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillToRect'), 'fillToRect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PathShadeProperties_httpschemas_openxmlformats_orgdrawingml2006mainfillToRect', False)

    
    fillToRect = property(__fillToRect.value, __fillToRect.set, None, u'Fill To Rectangle')

    
    # Attribute path uses Python identifier path
    __path = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'path'), 'path', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PathShadeProperties_path', ST_PathShadeType)
    
    path = property(__path.value, __path.set, None, u'Gradient Fill Path')


    _ElementMap = {
        __fillToRect.name() : __fillToRect
    }
    _AttributeMap = {
        __path.name() : __path
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PathShadeProperties', CT_PathShadeProperties)


# Complex type CT_SlideIdListEntry with content type ELEMENT_ONLY
class CT_SlideIdListEntry (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideIdListEntry')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideIdListEntry_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id_
    __id_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id_', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideIdListEntry_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id_ = property(__id_.value, __id_.set, None, u'Relationship ID')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideIdListEntry_id', ST_SlideId, required=True)
    
    id = property(__id.value, __id.set, None, u'Slide Identifier')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __id_.name() : __id_,
        __id.name() : __id
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideIdListEntry', CT_SlideIdListEntry)


# Complex type CT_TLTimeNodeExclusive with content type ELEMENT_ONLY
class CT_TLTimeNodeExclusive (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLTimeNodeExclusive')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cTn uses Python identifier cTn
    __cTn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cTn'), 'cTn', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeNodeExclusive_httpschemas_openxmlformats_orgpresentationml2006maincTn', False)

    
    cTn = property(__cTn.value, __cTn.set, None, u'Common TimeNode Properties')


    _ElementMap = {
        __cTn.name() : __cTn
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLTimeNodeExclusive', CT_TLTimeNodeExclusive)


# Complex type CT_Vector3D with content type EMPTY
class CT_Vector3D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Vector3D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute dz uses Python identifier dz
    __dz = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dz'), 'dz', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Vector3D_dz', ST_Coordinate, required=True)
    
    dz = property(__dz.value, __dz.set, None, u'Distance along Z-axis in 3D')

    
    # Attribute dx uses Python identifier dx
    __dx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dx'), 'dx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Vector3D_dx', ST_Coordinate, required=True)
    
    dx = property(__dx.value, __dx.set, None, u'Distance along X-axis in 3D')

    
    # Attribute dy uses Python identifier dy
    __dy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dy'), 'dy', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Vector3D_dy', ST_Coordinate, required=True)
    
    dy = property(__dy.value, __dy.set, None, u'Distance along Y-axis in 3D')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __dz.name() : __dz,
        __dx.name() : __dx,
        __dy.name() : __dy
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Vector3D', CT_Vector3D)


# Complex type CT_GroupShapeNonVisual with content type ELEMENT_ONLY
class CT_GroupShapeNonVisual (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_GroupShapeNonVisual')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}nvPr uses Python identifier nvPr
    __nvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'nvPr'), 'nvPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GroupShapeNonVisual_httpschemas_openxmlformats_orgpresentationml2006mainnvPr', False)

    
    nvPr = property(__nvPr.value, __nvPr.set, None, u'Non-Visual Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cNvPr uses Python identifier cNvPr
    __cNvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPr'), 'cNvPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GroupShapeNonVisual_httpschemas_openxmlformats_orgpresentationml2006maincNvPr', False)

    
    cNvPr = property(__cNvPr.value, __cNvPr.set, None, u'Non-visual Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cNvGrpSpPr uses Python identifier cNvGrpSpPr
    __cNvGrpSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cNvGrpSpPr'), 'cNvGrpSpPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GroupShapeNonVisual_httpschemas_openxmlformats_orgpresentationml2006maincNvGrpSpPr', False)

    
    cNvGrpSpPr = property(__cNvGrpSpPr.value, __cNvGrpSpPr.set, None, u'Non-Visual Group Shape Drawing Properties')


    _ElementMap = {
        __nvPr.name() : __nvPr,
        __cNvPr.name() : __cNvPr,
        __cNvGrpSpPr.name() : __cNvGrpSpPr
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_GroupShapeNonVisual', CT_GroupShapeNonVisual)


# Complex type CT_TableStyle with content type ELEMENT_ONLY
class CT_TableStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tblBg uses Python identifier tblBg
    __tblBg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tblBg'), 'tblBg', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006maintblBg', False)

    
    tblBg = property(__tblBg.value, __tblBg.set, None, u'Table Background')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}band2V uses Python identifier band2V
    __band2V = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'band2V'), 'band2V', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainband2V', False)

    
    band2V = property(__band2V.value, __band2V.set, None, u'Band 2 Vertical')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}firstRow uses Python identifier firstRow
    __firstRow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'firstRow'), 'firstRow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainfirstRow', False)

    
    firstRow = property(__firstRow.value, __firstRow.set, None, u'First Row')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}firstCol uses Python identifier firstCol
    __firstCol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'firstCol'), 'firstCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainfirstCol', False)

    
    firstCol = property(__firstCol.value, __firstCol.set, None, u'First Column')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lastCol uses Python identifier lastCol
    __lastCol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lastCol'), 'lastCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainlastCol', False)

    
    lastCol = property(__lastCol.value, __lastCol.set, None, u'Last Column')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}neCell uses Python identifier neCell
    __neCell = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'neCell'), 'neCell', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainneCell', False)

    
    neCell = property(__neCell.value, __neCell.set, None, u'Northeast Cell')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}swCell uses Python identifier swCell
    __swCell = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'swCell'), 'swCell', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainswCell', False)

    
    swCell = property(__swCell.value, __swCell.set, None, u'Southwest Cell')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}band1H uses Python identifier band1H
    __band1H = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'band1H'), 'band1H', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainband1H', False)

    
    band1H = property(__band1H.value, __band1H.set, None, u'Band 1 Horizontal')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}nwCell uses Python identifier nwCell
    __nwCell = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'nwCell'), 'nwCell', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainnwCell', False)

    
    nwCell = property(__nwCell.value, __nwCell.set, None, u'Northwest Cell')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}wholeTbl uses Python identifier wholeTbl
    __wholeTbl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'wholeTbl'), 'wholeTbl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainwholeTbl', False)

    
    wholeTbl = property(__wholeTbl.value, __wholeTbl.set, None, u'Whole Table')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lastRow uses Python identifier lastRow
    __lastRow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lastRow'), 'lastRow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainlastRow', False)

    
    lastRow = property(__lastRow.value, __lastRow.set, None, u'Last Row')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}band2H uses Python identifier band2H
    __band2H = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'band2H'), 'band2H', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainband2H', False)

    
    band2H = property(__band2H.value, __band2H.set, None, u'Band 2 Horizontal')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}seCell uses Python identifier seCell
    __seCell = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'seCell'), 'seCell', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainseCell', False)

    
    seCell = property(__seCell.value, __seCell.set, None, u'Southeast Cell')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}band1V uses Python identifier band1V
    __band1V = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'band1V'), 'band1V', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainband1V', False)

    
    band1V = property(__band1V.value, __band1V.set, None, u'Band 1 Vertical')

    
    # Attribute styleName uses Python identifier styleName
    __styleName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'styleName'), 'styleName', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_styleName', pyxb.binding.datatypes.string, required=True)
    
    styleName = property(__styleName.value, __styleName.set, None, u'Name')

    
    # Attribute styleId uses Python identifier styleId
    __styleId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'styleId'), 'styleId', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_styleId', _s.ST_Guid, required=True)
    
    styleId = property(__styleId.value, __styleId.set, None, u'Style ID')


    _ElementMap = {
        __tblBg.name() : __tblBg,
        __band2V.name() : __band2V,
        __firstRow.name() : __firstRow,
        __firstCol.name() : __firstCol,
        __lastCol.name() : __lastCol,
        __neCell.name() : __neCell,
        __swCell.name() : __swCell,
        __band1H.name() : __band1H,
        __nwCell.name() : __nwCell,
        __wholeTbl.name() : __wholeTbl,
        __lastRow.name() : __lastRow,
        __band2H.name() : __band2H,
        __extLst.name() : __extLst,
        __seCell.name() : __seCell,
        __band1V.name() : __band1V
    }
    _AttributeMap = {
        __styleName.name() : __styleName,
        __styleId.name() : __styleId
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableStyle', CT_TableStyle)


# Complex type CT_TransitionStartSoundAction with content type ELEMENT_ONLY
class CT_TransitionStartSoundAction (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TransitionStartSoundAction')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}snd uses Python identifier snd
    __snd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'snd'), 'snd', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TransitionStartSoundAction_httpschemas_openxmlformats_orgpresentationml2006mainsnd', False)

    
    snd = property(__snd.value, __snd.set, None, u'Sound')

    
    # Attribute loop uses Python identifier loop
    __loop = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'loop'), 'loop', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TransitionStartSoundAction_loop', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    loop = property(__loop.value, __loop.set, None, u'Loop Sound')


    _ElementMap = {
        __snd.name() : __snd
    }
    _AttributeMap = {
        __loop.name() : __loop
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TransitionStartSoundAction', CT_TransitionStartSoundAction)


# Complex type CT_Table with content type ELEMENT_ONLY
class CT_Table (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Table')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tr uses Python identifier tr
    __tr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tr'), 'tr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Table_httpschemas_openxmlformats_orgdrawingml2006maintr', True)

    
    tr = property(__tr.value, __tr.set, None, u'Table Row')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tblPr uses Python identifier tblPr
    __tblPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tblPr'), 'tblPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Table_httpschemas_openxmlformats_orgdrawingml2006maintblPr', False)

    
    tblPr = property(__tblPr.value, __tblPr.set, None, u'Table Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tblGrid uses Python identifier tblGrid
    __tblGrid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tblGrid'), 'tblGrid', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Table_httpschemas_openxmlformats_orgdrawingml2006maintblGrid', False)

    
    tblGrid = property(__tblGrid.value, __tblGrid.set, None, u'Table Grid')


    _ElementMap = {
        __tr.name() : __tr,
        __tblPr.name() : __tblPr,
        __tblGrid.name() : __tblGrid
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Table', CT_Table)


# Complex type CT_CommonViewProperties with content type ELEMENT_ONLY
class CT_CommonViewProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_CommonViewProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}origin uses Python identifier origin
    __origin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'origin'), 'origin', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommonViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainorigin', False)

    
    origin = property(__origin.value, __origin.set, None, u'View Origin')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}scale uses Python identifier scale
    __scale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'scale'), 'scale', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommonViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainscale', False)

    
    scale = property(__scale.value, __scale.set, None, u'View Scale')

    
    # Attribute varScale uses Python identifier varScale
    __varScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'varScale'), 'varScale', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommonViewProperties_varScale', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    varScale = property(__varScale.value, __varScale.set, None, u'Variable Scale')


    _ElementMap = {
        __origin.name() : __origin,
        __scale.name() : __scale
    }
    _AttributeMap = {
        __varScale.name() : __varScale
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_CommonViewProperties', CT_CommonViewProperties)


# Complex type CT_SlideLayoutIdListEntry with content type ELEMENT_ONLY
class CT_SlideLayoutIdListEntry (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideLayoutIdListEntry')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayoutIdListEntry_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id_
    __id_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id_', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayoutIdListEntry_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id_ = property(__id_.value, __id_.set, None, u'Relationship ID')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayoutIdListEntry_id', ST_SlideLayoutId)
    
    id = property(__id.value, __id.set, None, u'ID Tag')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __id_.name() : __id_,
        __id.name() : __id
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideLayoutIdListEntry', CT_SlideLayoutIdListEntry)


# Complex type CT_PresetShadowEffect with content type ELEMENT_ONLY
class CT_PresetShadowEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PresetShadowEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Attribute dist uses Python identifier dist
    __dist = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dist'), 'dist', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_dist', ST_PositiveCoordinate, unicode_default=u'0')
    
    dist = property(__dist.value, __dist.set, None, u'Distance')

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_dir', ST_PositiveFixedAngle, unicode_default=u'0')
    
    dir = property(__dir.value, __dir.set, None, u'Direction')

    
    # Attribute prst uses Python identifier prst
    __prst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prst'), 'prst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_prst', ST_PresetShadowVal, required=True)
    
    prst = property(__prst.value, __prst.set, None, u'Preset Shadow')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr,
        __scrgbClr.name() : __scrgbClr,
        __hslClr.name() : __hslClr,
        __sysClr.name() : __sysClr
    }
    _AttributeMap = {
        __dist.name() : __dist,
        __dir.name() : __dir,
        __prst.name() : __prst
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PresetShadowEffect', CT_PresetShadowEffect)


# Complex type CT_Presentation with content type ELEMENT_ONLY
class CT_Presentation (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_Presentation')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}embeddedFontLst uses Python identifier embeddedFontLst
    __embeddedFontLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'embeddedFontLst'), 'embeddedFontLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_httpschemas_openxmlformats_orgpresentationml2006mainembeddedFontLst', False)

    
    embeddedFontLst = property(__embeddedFontLst.value, __embeddedFontLst.set, None, u'Embedded Font List')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}custDataLst uses Python identifier custDataLst
    __custDataLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'custDataLst'), 'custDataLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_httpschemas_openxmlformats_orgpresentationml2006maincustDataLst', False)

    
    custDataLst = property(__custDataLst.value, __custDataLst.set, None, u'List of Customer Data Buckets')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}handoutMasterIdLst uses Python identifier handoutMasterIdLst
    __handoutMasterIdLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'handoutMasterIdLst'), 'handoutMasterIdLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_httpschemas_openxmlformats_orgpresentationml2006mainhandoutMasterIdLst', False)

    
    handoutMasterIdLst = property(__handoutMasterIdLst.value, __handoutMasterIdLst.set, None, u'List of Handout Master IDs')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}modifyVerifier uses Python identifier modifyVerifier
    __modifyVerifier = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'modifyVerifier'), 'modifyVerifier', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_httpschemas_openxmlformats_orgpresentationml2006mainmodifyVerifier', False)

    
    modifyVerifier = property(__modifyVerifier.value, __modifyVerifier.set, None, u'Modification Verifier')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}custShowLst uses Python identifier custShowLst
    __custShowLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'custShowLst'), 'custShowLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_httpschemas_openxmlformats_orgpresentationml2006maincustShowLst', False)

    
    custShowLst = property(__custShowLst.value, __custShowLst.set, None, u'List of Custom Shows')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Extension List')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}photoAlbum uses Python identifier photoAlbum
    __photoAlbum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'photoAlbum'), 'photoAlbum', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_httpschemas_openxmlformats_orgpresentationml2006mainphotoAlbum', False)

    
    photoAlbum = property(__photoAlbum.value, __photoAlbum.set, None, u'Photo Album Information')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}defaultTextStyle uses Python identifier defaultTextStyle
    __defaultTextStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'defaultTextStyle'), 'defaultTextStyle', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_httpschemas_openxmlformats_orgpresentationml2006maindefaultTextStyle', False)

    
    defaultTextStyle = property(__defaultTextStyle.value, __defaultTextStyle.set, None, u'Presentation Default Text Style')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sldIdLst uses Python identifier sldIdLst
    __sldIdLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sldIdLst'), 'sldIdLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_httpschemas_openxmlformats_orgpresentationml2006mainsldIdLst', False)

    
    sldIdLst = property(__sldIdLst.value, __sldIdLst.set, None, u'List of Slide IDs')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sldSz uses Python identifier sldSz
    __sldSz = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sldSz'), 'sldSz', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_httpschemas_openxmlformats_orgpresentationml2006mainsldSz', False)

    
    sldSz = property(__sldSz.value, __sldSz.set, None, u'Presentation Slide Size')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}notesSz uses Python identifier notesSz
    __notesSz = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'notesSz'), 'notesSz', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_httpschemas_openxmlformats_orgpresentationml2006mainnotesSz', False)

    
    notesSz = property(__notesSz.value, __notesSz.set, None, u'Notes Slide Size')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sldMasterIdLst uses Python identifier sldMasterIdLst
    __sldMasterIdLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sldMasterIdLst'), 'sldMasterIdLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_httpschemas_openxmlformats_orgpresentationml2006mainsldMasterIdLst', False)

    
    sldMasterIdLst = property(__sldMasterIdLst.value, __sldMasterIdLst.set, None, u'List of Slide Master IDs')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}kinsoku uses Python identifier kinsoku
    __kinsoku = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'kinsoku'), 'kinsoku', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_httpschemas_openxmlformats_orgpresentationml2006mainkinsoku', False)

    
    kinsoku = property(__kinsoku.value, __kinsoku.set, None, u'Kinsoku Settings')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}smartTags uses Python identifier smartTags
    __smartTags = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'smartTags'), 'smartTags', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_httpschemas_openxmlformats_orgpresentationml2006mainsmartTags', False)

    
    smartTags = property(__smartTags.value, __smartTags.set, None, u'Smart Tags')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}notesMasterIdLst uses Python identifier notesMasterIdLst
    __notesMasterIdLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'notesMasterIdLst'), 'notesMasterIdLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_httpschemas_openxmlformats_orgpresentationml2006mainnotesMasterIdLst', False)

    
    notesMasterIdLst = property(__notesMasterIdLst.value, __notesMasterIdLst.set, None, u'List of Notes Master IDs')

    
    # Attribute autoCompressPictures uses Python identifier autoCompressPictures
    __autoCompressPictures = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoCompressPictures'), 'autoCompressPictures', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_autoCompressPictures', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoCompressPictures = property(__autoCompressPictures.value, __autoCompressPictures.set, None, u'Automatically Compress Pictures')

    
    # Attribute serverZoom uses Python identifier serverZoom
    __serverZoom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'serverZoom'), 'serverZoom', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_serverZoom', ST_Percentage, unicode_default=u'50%')
    
    serverZoom = property(__serverZoom.value, __serverZoom.set, None, u'Server Zoom')

    
    # Attribute removePersonalInfoOnSave uses Python identifier removePersonalInfoOnSave
    __removePersonalInfoOnSave = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'removePersonalInfoOnSave'), 'removePersonalInfoOnSave', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_removePersonalInfoOnSave', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    removePersonalInfoOnSave = property(__removePersonalInfoOnSave.value, __removePersonalInfoOnSave.set, None, u'Remove Personal Information on Save')

    
    # Attribute bookmarkIdSeed uses Python identifier bookmarkIdSeed
    __bookmarkIdSeed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bookmarkIdSeed'), 'bookmarkIdSeed', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_bookmarkIdSeed', ST_BookmarkIdSeed, unicode_default=u'1')
    
    bookmarkIdSeed = property(__bookmarkIdSeed.value, __bookmarkIdSeed.set, None, u'Bookmark ID Seed')

    
    # Attribute compatMode uses Python identifier compatMode
    __compatMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'compatMode'), 'compatMode', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_compatMode', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    compatMode = property(__compatMode.value, __compatMode.set, None, u'Compatibility Mode')

    
    # Attribute conformance uses Python identifier conformance
    __conformance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'conformance'), 'conformance', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_conformance', _s.ST_ConformanceClass)
    
    conformance = property(__conformance.value, __conformance.set, None, u'Document Conformance Class')

    
    # Attribute strictFirstAndLastChars uses Python identifier strictFirstAndLastChars
    __strictFirstAndLastChars = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'strictFirstAndLastChars'), 'strictFirstAndLastChars', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_strictFirstAndLastChars', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    strictFirstAndLastChars = property(__strictFirstAndLastChars.value, __strictFirstAndLastChars.set, None, u'Strict First and Last Characters')

    
    # Attribute embedTrueTypeFonts uses Python identifier embedTrueTypeFonts
    __embedTrueTypeFonts = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'embedTrueTypeFonts'), 'embedTrueTypeFonts', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_embedTrueTypeFonts', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    embedTrueTypeFonts = property(__embedTrueTypeFonts.value, __embedTrueTypeFonts.set, None, u'Embed True Type Fonts')

    
    # Attribute showSpecialPlsOnTitleSld uses Python identifier showSpecialPlsOnTitleSld
    __showSpecialPlsOnTitleSld = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showSpecialPlsOnTitleSld'), 'showSpecialPlsOnTitleSld', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_showSpecialPlsOnTitleSld', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showSpecialPlsOnTitleSld = property(__showSpecialPlsOnTitleSld.value, __showSpecialPlsOnTitleSld.set, None, u'Show Header and Footer Placeholders on Titles')

    
    # Attribute firstSlideNum uses Python identifier firstSlideNum
    __firstSlideNum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'firstSlideNum'), 'firstSlideNum', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_firstSlideNum', pyxb.binding.datatypes.int, unicode_default=u'1')
    
    firstSlideNum = property(__firstSlideNum.value, __firstSlideNum.set, None, u'First Slide Number')

    
    # Attribute saveSubsetFonts uses Python identifier saveSubsetFonts
    __saveSubsetFonts = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'saveSubsetFonts'), 'saveSubsetFonts', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_saveSubsetFonts', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    saveSubsetFonts = property(__saveSubsetFonts.value, __saveSubsetFonts.set, None, u'Save Subset Fonts')

    
    # Attribute rtl uses Python identifier rtl
    __rtl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rtl'), 'rtl', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Presentation_rtl', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    rtl = property(__rtl.value, __rtl.set, None, u'Right-To-Left Views')


    _ElementMap = {
        __embeddedFontLst.name() : __embeddedFontLst,
        __custDataLst.name() : __custDataLst,
        __handoutMasterIdLst.name() : __handoutMasterIdLst,
        __modifyVerifier.name() : __modifyVerifier,
        __custShowLst.name() : __custShowLst,
        __extLst.name() : __extLst,
        __photoAlbum.name() : __photoAlbum,
        __defaultTextStyle.name() : __defaultTextStyle,
        __sldIdLst.name() : __sldIdLst,
        __sldSz.name() : __sldSz,
        __notesSz.name() : __notesSz,
        __sldMasterIdLst.name() : __sldMasterIdLst,
        __kinsoku.name() : __kinsoku,
        __smartTags.name() : __smartTags,
        __notesMasterIdLst.name() : __notesMasterIdLst
    }
    _AttributeMap = {
        __autoCompressPictures.name() : __autoCompressPictures,
        __serverZoom.name() : __serverZoom,
        __removePersonalInfoOnSave.name() : __removePersonalInfoOnSave,
        __bookmarkIdSeed.name() : __bookmarkIdSeed,
        __compatMode.name() : __compatMode,
        __conformance.name() : __conformance,
        __strictFirstAndLastChars.name() : __strictFirstAndLastChars,
        __embedTrueTypeFonts.name() : __embedTrueTypeFonts,
        __showSpecialPlsOnTitleSld.name() : __showSpecialPlsOnTitleSld,
        __firstSlideNum.name() : __firstSlideNum,
        __saveSubsetFonts.name() : __saveSubsetFonts,
        __rtl.name() : __rtl
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_Presentation', CT_Presentation)


# Complex type CT_LayoutVariablePropertySet with content type ELEMENT_ONLY
class CT_LayoutVariablePropertySet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_LayoutVariablePropertySet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}orgChart uses Python identifier orgChart
    __orgChart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'orgChart'), 'orgChart', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramorgChart', False)

    
    orgChart = property(__orgChart.value, __orgChart.set, None, u'Show Organization Chart User Interface')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}hierBranch uses Python identifier hierBranch
    __hierBranch = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'hierBranch'), 'hierBranch', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramhierBranch', False)

    
    hierBranch = property(__hierBranch.value, __hierBranch.set, None, u'Organization Chart Branch Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}animOne uses Python identifier animOne
    __animOne = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'animOne'), 'animOne', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramanimOne', False)

    
    animOne = property(__animOne.value, __animOne.set, None, u'One by One Animation String')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}chMax uses Python identifier chMax
    __chMax = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'chMax'), 'chMax', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramchMax', False)

    
    chMax = property(__chMax.value, __chMax.set, None, u'Maximum Children')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}chPref uses Python identifier chPref
    __chPref = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'chPref'), 'chPref', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramchPref', False)

    
    chPref = property(__chPref.value, __chPref.set, None, u'Preferred Number of Children')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}bulletEnabled uses Python identifier bulletEnabled
    __bulletEnabled = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'bulletEnabled'), 'bulletEnabled', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagrambulletEnabled', False)

    
    bulletEnabled = property(__bulletEnabled.value, __bulletEnabled.set, None, u'Show Insert Bullet')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}resizeHandles uses Python identifier resizeHandles
    __resizeHandles = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'resizeHandles'), 'resizeHandles', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramresizeHandles', False)

    
    resizeHandles = property(__resizeHandles.value, __resizeHandles.set, None, u'Shape Resize Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}dir uses Python identifier dir
    __dir = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'dir'), 'dir', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramdir', False)

    
    dir = property(__dir.value, __dir.set, None, u'Diagram Direction')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}animLvl uses Python identifier animLvl
    __animLvl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'animLvl'), 'animLvl', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramanimLvl', False)

    
    animLvl = property(__animLvl.value, __animLvl.set, None, u'Level Animation')


    _ElementMap = {
        __orgChart.name() : __orgChart,
        __hierBranch.name() : __hierBranch,
        __animOne.name() : __animOne,
        __chMax.name() : __chMax,
        __chPref.name() : __chPref,
        __bulletEnabled.name() : __bulletEnabled,
        __resizeHandles.name() : __resizeHandles,
        __dir.name() : __dir,
        __animLvl.name() : __animLvl
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_LayoutVariablePropertySet', CT_LayoutVariablePropertySet)


# Complex type CT_SideDirectionTransition with content type EMPTY
class CT_SideDirectionTransition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SideDirectionTransition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SideDirectionTransition_dir', ST_TransitionSideDirectionType, unicode_default=u'l')
    
    dir = property(__dir.value, __dir.set, None, u'Direction')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __dir.name() : __dir
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SideDirectionTransition', CT_SideDirectionTransition)


# Complex type CT_BlendEffect with content type ELEMENT_ONLY
class CT_BlendEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BlendEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cont uses Python identifier cont
    __cont = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cont'), 'cont', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlendEffect_httpschemas_openxmlformats_orgdrawingml2006maincont', False)

    
    cont = property(__cont.value, __cont.set, None, u'Effect to blend')

    
    # Attribute blend uses Python identifier blend
    __blend = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blend'), 'blend', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlendEffect_blend', ST_BlendMode, required=True)
    
    blend = property(__blend.value, __blend.set, None, u'Blend Mode')


    _ElementMap = {
        __cont.name() : __cont
    }
    _AttributeMap = {
        __blend.name() : __blend
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BlendEffect', CT_BlendEffect)


# Complex type CT_SupplementalFont with content type EMPTY
class CT_SupplementalFont (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_SupplementalFont')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute typeface uses Python identifier typeface
    __typeface = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'typeface'), 'typeface', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SupplementalFont_typeface', ST_TextTypeface, required=True)
    
    typeface = property(__typeface.value, __typeface.set, None, u'Typeface')

    
    # Attribute script uses Python identifier script
    __script = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'script'), 'script', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SupplementalFont_script', pyxb.binding.datatypes.string, required=True)
    
    script = property(__script.value, __script.set, None, u'Script')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __typeface.name() : __typeface,
        __script.name() : __script
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_SupplementalFont', CT_SupplementalFont)


# Complex type CT_CustomShowId with content type EMPTY
class CT_CustomShowId (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_CustomShowId')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CustomShowId_id', pyxb.binding.datatypes.unsignedInt, required=True)
    
    id = property(__id.value, __id.set, None, u'Custom Show Identifier')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_CustomShowId', CT_CustomShowId)


# Complex type CT_WholeE2oFormatting with content type ELEMENT_ONLY
class CT_WholeE2oFormatting (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_WholeE2oFormatting')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_WholeE2oFormatting_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ln uses Python identifier ln
    __ln = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), 'ln', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_WholeE2oFormatting_httpschemas_openxmlformats_orgdrawingml2006mainln', False)

    
    ln = property(__ln.value, __ln.set, None, u'Outline')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_WholeE2oFormatting_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')


    _ElementMap = {
        __effectLst.name() : __effectLst,
        __ln.name() : __ln,
        __effectDag.name() : __effectDag
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_WholeE2oFormatting', CT_WholeE2oFormatting)


# Complex type CT_TLTimeAnimateValue with content type ELEMENT_ONLY
class CT_TLTimeAnimateValue (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLTimeAnimateValue')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'val'), 'val', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeAnimateValue_httpschemas_openxmlformats_orgpresentationml2006mainval', False)

    
    val = property(__val.value, __val.set, None, u'Value')

    
    # Attribute tm uses Python identifier tm
    __tm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tm'), 'tm', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeAnimateValue_tm', ST_TLTimeAnimateValueTime, unicode_default=u'indefinite')
    
    tm = property(__tm.value, __tm.set, None, u'Time')

    
    # Attribute fmla uses Python identifier fmla
    __fmla = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fmla'), 'fmla', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeAnimateValue_fmla', pyxb.binding.datatypes.string, unicode_default=u'')
    
    fmla = property(__fmla.value, __fmla.set, None, u'Formula')


    _ElementMap = {
        __val.name() : __val
    }
    _AttributeMap = {
        __tm.name() : __tm,
        __fmla.name() : __fmla
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLTimeAnimateValue', CT_TLTimeAnimateValue)


# Complex type CT_TLMediaNodeVideo with content type ELEMENT_ONLY
class CT_TLMediaNodeVideo (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLMediaNodeVideo')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cMediaNode uses Python identifier cMediaNode
    __cMediaNode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cMediaNode'), 'cMediaNode', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLMediaNodeVideo_httpschemas_openxmlformats_orgpresentationml2006maincMediaNode', False)

    
    cMediaNode = property(__cMediaNode.value, __cMediaNode.set, None, u'Common Media Node Properties')

    
    # Attribute fullScrn uses Python identifier fullScrn
    __fullScrn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fullScrn'), 'fullScrn', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLMediaNodeVideo_fullScrn', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    fullScrn = property(__fullScrn.value, __fullScrn.set, None, u'Full Screen')


    _ElementMap = {
        __cMediaNode.name() : __cMediaNode
    }
    _AttributeMap = {
        __fullScrn.name() : __fullScrn
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLMediaNodeVideo', CT_TLMediaNodeVideo)


# Complex type CT_TextSpacingPercent with content type EMPTY
class CT_TextSpacingPercent (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextSpacingPercent')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextSpacingPercent_val', ST_TextSpacingPercentOrPercentString, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextSpacingPercent', CT_TextSpacingPercent)


# Complex type CT_Path2D with content type ELEMENT_ONLY
class CT_Path2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}quadBezTo uses Python identifier quadBezTo
    __quadBezTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'quadBezTo'), 'quadBezTo', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_httpschemas_openxmlformats_orgdrawingml2006mainquadBezTo', True)

    
    quadBezTo = property(__quadBezTo.value, __quadBezTo.set, None, u'Draw Quadratic Bezier Curve To')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}arcTo uses Python identifier arcTo
    __arcTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'arcTo'), 'arcTo', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_httpschemas_openxmlformats_orgdrawingml2006mainarcTo', True)

    
    arcTo = property(__arcTo.value, __arcTo.set, None, u'Draw Arc To')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnTo uses Python identifier lnTo
    __lnTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnTo'), 'lnTo', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_httpschemas_openxmlformats_orgdrawingml2006mainlnTo', True)

    
    lnTo = property(__lnTo.value, __lnTo.set, None, u'Draw Line To')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cubicBezTo uses Python identifier cubicBezTo
    __cubicBezTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cubicBezTo'), 'cubicBezTo', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_httpschemas_openxmlformats_orgdrawingml2006maincubicBezTo', True)

    
    cubicBezTo = property(__cubicBezTo.value, __cubicBezTo.set, None, u'Draw Cubic Bezier Curve To')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}close uses Python identifier close
    __close = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'close'), 'close', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_httpschemas_openxmlformats_orgdrawingml2006mainclose', True)

    
    close = property(__close.value, __close.set, None, u'Close Shape Path')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_httpschemas_openxmlformats_orgdrawingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Path To')

    
    # Attribute extrusionOk uses Python identifier extrusionOk
    __extrusionOk = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'extrusionOk'), 'extrusionOk', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_extrusionOk', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    extrusionOk = property(__extrusionOk.value, __extrusionOk.set, None, u'3D Extrusion Allowed')

    
    # Attribute h uses Python identifier h
    __h = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'h'), 'h', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_h', ST_PositiveCoordinate, unicode_default=u'0')
    
    h = property(__h.value, __h.set, None, u'Path Height')

    
    # Attribute w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'w'), 'w', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_w', ST_PositiveCoordinate, unicode_default=u'0')
    
    w = property(__w.value, __w.set, None, u'Path Width')

    
    # Attribute stroke uses Python identifier stroke
    __stroke = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stroke'), 'stroke', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_stroke', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    stroke = property(__stroke.value, __stroke.set, None, u'Path Stroke')

    
    # Attribute fill uses Python identifier fill
    __fill = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fill'), 'fill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_fill', ST_PathFillMode, unicode_default=u'norm')
    
    fill = property(__fill.value, __fill.set, None, u'Path Fill')


    _ElementMap = {
        __quadBezTo.name() : __quadBezTo,
        __arcTo.name() : __arcTo,
        __lnTo.name() : __lnTo,
        __cubicBezTo.name() : __cubicBezTo,
        __close.name() : __close,
        __moveTo.name() : __moveTo
    }
    _AttributeMap = {
        __extrusionOk.name() : __extrusionOk,
        __h.name() : __h,
        __w.name() : __w,
        __stroke.name() : __stroke,
        __fill.name() : __fill
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2D', CT_Path2D)


# Complex type CT_FontReference with content type ELEMENT_ONLY
class CT_FontReference (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FontReference')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontReference_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontReference_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontReference_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontReference_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontReference_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontReference_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Attribute idx uses Python identifier idx
    __idx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'idx'), 'idx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontReference_idx', ST_FontCollectionIndex, required=True)
    
    idx = property(__idx.value, __idx.set, None, u'Identifier')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __sysClr.name() : __sysClr,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr,
        __scrgbClr.name() : __scrgbClr,
        __hslClr.name() : __hslClr
    }
    _AttributeMap = {
        __idx.name() : __idx
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FontReference', CT_FontReference)


# Complex type CT_GuideList with content type ELEMENT_ONLY
class CT_GuideList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_GuideList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}guide uses Python identifier guide
    __guide = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'guide'), 'guide', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GuideList_httpschemas_openxmlformats_orgpresentationml2006mainguide', True)

    
    guide = property(__guide.value, __guide.set, None, u'A Guide')


    _ElementMap = {
        __guide.name() : __guide
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_GuideList', CT_GuideList)


# Complex type CT_Colors with content type ELEMENT_ONLY
class CT_Colors (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Colors')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', True)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', True)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', True)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', True)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', True)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', True)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Attribute hueDir uses Python identifier hueDir
    __hueDir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hueDir'), 'hueDir', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_hueDir', ST_HueDir, unicode_default=u'cw')
    
    hueDir = property(__hueDir.value, __hueDir.set, None, u'Hue Direction')

    
    # Attribute meth uses Python identifier meth
    __meth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'meth'), 'meth', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_meth', ST_ClrAppMethod, unicode_default=u'span')
    
    meth = property(__meth.value, __meth.set, None, u'Color Application Method Type')


    _ElementMap = {
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr,
        __scrgbClr.name() : __scrgbClr,
        __sysClr.name() : __sysClr,
        __srgbClr.name() : __srgbClr,
        __hslClr.name() : __hslClr
    }
    _AttributeMap = {
        __hueDir.name() : __hueDir,
        __meth.name() : __meth
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Colors', CT_Colors)


# Complex type CT_TableGrid with content type ELEMENT_ONLY
class CT_TableGrid (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableGrid')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gridCol uses Python identifier gridCol
    __gridCol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gridCol'), 'gridCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableGrid_httpschemas_openxmlformats_orgdrawingml2006maingridCol', True)

    
    gridCol = property(__gridCol.value, __gridCol.set, None, u'Table Grid Column')


    _ElementMap = {
        __gridCol.name() : __gridCol
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableGrid', CT_TableGrid)


# Complex type CT_Algorithm with content type ELEMENT_ONLY
class CT_Algorithm (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Algorithm')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Algorithm_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}param uses Python identifier param
    __param = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'param'), 'param', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Algorithm_httpschemas_openxmlformats_orgdrawingml2006diagramparam', True)

    
    param = property(__param.value, __param.set, None, u'Parameter')

    
    # Attribute rev uses Python identifier rev
    __rev = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rev'), 'rev', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Algorithm_rev', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    rev = property(__rev.value, __rev.set, None, u'Revision Number')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Algorithm_type', ST_AlgorithmType, required=True)
    
    type = property(__type.value, __type.set, None, u'Algorithm Type')


    _ElementMap = {
        __extLst.name() : __extLst,
        __param.name() : __param
    }
    _AttributeMap = {
        __rev.name() : __rev,
        __type.name() : __type
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Algorithm', CT_Algorithm)


# Complex type CT_WebProperties with content type ELEMENT_ONLY
class CT_WebProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_WebProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_WebProperties_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute encoding uses Python identifier encoding
    __encoding = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'encoding'), 'encoding', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_WebProperties_encoding', ST_WebEncoding, unicode_default=u'')
    
    encoding = property(__encoding.value, __encoding.set, None, u'Encoding for HTML output')

    
    # Attribute showAnimation uses Python identifier showAnimation
    __showAnimation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showAnimation'), 'showAnimation', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_WebProperties_showAnimation', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showAnimation = property(__showAnimation.value, __showAnimation.set, None, u'Show animation in HTML output')

    
    # Attribute clr uses Python identifier clr
    __clr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'clr'), 'clr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_WebProperties_clr', ST_WebColorType, unicode_default=u'whiteTextOnBlack')
    
    clr = property(__clr.value, __clr.set, None, u'Slide Navigation Colors for HTML output')

    
    # Attribute imgSz uses Python identifier imgSz
    __imgSz = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'imgSz'), 'imgSz', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_WebProperties_imgSz', ST_WebScreenSize, unicode_default=u'800x600')
    
    imgSz = property(__imgSz.value, __imgSz.set, None, u'Image size for HTML output')

    
    # Attribute useLongFilenames uses Python identifier useLongFilenames
    __useLongFilenames = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'useLongFilenames'), 'useLongFilenames', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_WebProperties_useLongFilenames', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    useLongFilenames = property(__useLongFilenames.value, __useLongFilenames.set, None, u'Use long file names in HTML output')

    
    # Attribute resizeGraphics uses Python identifier resizeGraphics
    __resizeGraphics = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'resizeGraphics'), 'resizeGraphics', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_WebProperties_resizeGraphics', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    resizeGraphics = property(__resizeGraphics.value, __resizeGraphics.set, None, u'Resize graphics in HTML output')

    
    # Attribute allowPng uses Python identifier allowPng
    __allowPng = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'allowPng'), 'allowPng', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_WebProperties_allowPng', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    allowPng = property(__allowPng.value, __allowPng.set, None, u'Allow PNG in HTML output')

    
    # Attribute relyOnVml uses Python identifier relyOnVml
    __relyOnVml = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relyOnVml'), 'relyOnVml', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_WebProperties_relyOnVml', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    relyOnVml = property(__relyOnVml.value, __relyOnVml.set, None, u'Rely on VML for HTML output')

    
    # Attribute organizeInFolders uses Python identifier organizeInFolders
    __organizeInFolders = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'organizeInFolders'), 'organizeInFolders', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_WebProperties_organizeInFolders', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    organizeInFolders = property(__organizeInFolders.value, __organizeInFolders.set, None, u'Organize HTML output in folders')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __encoding.name() : __encoding,
        __showAnimation.name() : __showAnimation,
        __clr.name() : __clr,
        __imgSz.name() : __imgSz,
        __useLongFilenames.name() : __useLongFilenames,
        __resizeGraphics.name() : __resizeGraphics,
        __allowPng.name() : __allowPng,
        __relyOnVml.name() : __relyOnVml,
        __organizeInFolders.name() : __organizeInFolders
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_WebProperties', CT_WebProperties)


# Complex type CT_AlphaFloorEffect with content type EMPTY
class CT_AlphaFloorEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaFloorEffect')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaFloorEffect', CT_AlphaFloorEffect)


# Complex type CT_BulletEnabled with content type EMPTY
class CT_BulletEnabled (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_BulletEnabled')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_BulletEnabled_val', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    val = property(__val.value, __val.set, None, u'Show Insert Bullet Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_BulletEnabled', CT_BulletEnabled)


# Complex type CT_GvmlUseShapeRectangle with content type EMPTY
class CT_GvmlUseShapeRectangle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlUseShapeRectangle')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlUseShapeRectangle', CT_GvmlUseShapeRectangle)


# Complex type CT_TextShapeAutofit with content type EMPTY
class CT_TextShapeAutofit (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextShapeAutofit')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextShapeAutofit', CT_TextShapeAutofit)


# Complex type CT_AudioFile with content type ELEMENT_ONLY
class CT_AudioFile (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AudioFile')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioFile_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute contentType uses Python identifier contentType
    __contentType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'contentType'), 'contentType', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioFile_contentType', pyxb.binding.datatypes.string)
    
    contentType = property(__contentType.value, __contentType.set, None, u'Content Type of Linked Audio File')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}link uses Python identifier link
    __link = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'link'), 'link', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioFile_httpschemas_openxmlformats_orgofficeDocument2006relationshipslink', _r.ST_RelationshipId, required=True)
    
    link = property(__link.value, __link.set, None, None)


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __contentType.name() : __contentType,
        __link.name() : __link
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AudioFile', CT_AudioFile)


# Complex type CT_TLBehaviorAttributeNameList with content type ELEMENT_ONLY
class CT_TLBehaviorAttributeNameList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLBehaviorAttributeNameList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}attrName uses Python identifier attrName
    __attrName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'attrName'), 'attrName', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLBehaviorAttributeNameList_httpschemas_openxmlformats_orgpresentationml2006mainattrName', True)

    
    attrName = property(__attrName.value, __attrName.set, None, u'Attribute Name')


    _ElementMap = {
        __attrName.name() : __attrName
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLBehaviorAttributeNameList', CT_TLBehaviorAttributeNameList)


# Complex type CT_Hyperlink with content type ELEMENT_ONLY
class CT_Hyperlink (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Hyperlink')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}snd uses Python identifier snd
    __snd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'snd'), 'snd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgdrawingml2006mainsnd', False)

    
    snd = property(__snd.value, __snd.set, None, u'Hyperlink Sound')

    
    # Attribute highlightClick uses Python identifier highlightClick
    __highlightClick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'highlightClick'), 'highlightClick', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_highlightClick', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    highlightClick = property(__highlightClick.value, __highlightClick.set, None, u'Highlight Click')

    
    # Attribute tooltip uses Python identifier tooltip
    __tooltip = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tooltip'), 'tooltip', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_tooltip', pyxb.binding.datatypes.string, unicode_default=u'')
    
    tooltip = property(__tooltip.value, __tooltip.set, None, u'Hyperlink Tooltip')

    
    # Attribute tgtFrame uses Python identifier tgtFrame
    __tgtFrame = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tgtFrame'), 'tgtFrame', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_tgtFrame', pyxb.binding.datatypes.string, unicode_default=u'')
    
    tgtFrame = property(__tgtFrame.value, __tgtFrame.set, None, u'Target Frame')

    
    # Attribute history uses Python identifier history
    __history = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'history'), 'history', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_history', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    history = property(__history.value, __history.set, None, u'Add Hyperlink to Page History')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute invalidUrl uses Python identifier invalidUrl
    __invalidUrl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'invalidUrl'), 'invalidUrl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_invalidUrl', pyxb.binding.datatypes.string, unicode_default=u'')
    
    invalidUrl = property(__invalidUrl.value, __invalidUrl.set, None, u'Invalid URL')

    
    # Attribute endSnd uses Python identifier endSnd
    __endSnd = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'endSnd'), 'endSnd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_endSnd', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    endSnd = property(__endSnd.value, __endSnd.set, None, u'End Sounds')

    
    # Attribute action uses Python identifier action
    __action = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'action'), 'action', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_action', pyxb.binding.datatypes.string, unicode_default=u'')
    
    action = property(__action.value, __action.set, None, u'Action Setting')


    _ElementMap = {
        __extLst.name() : __extLst,
        __snd.name() : __snd
    }
    _AttributeMap = {
        __highlightClick.name() : __highlightClick,
        __tooltip.name() : __tooltip,
        __tgtFrame.name() : __tgtFrame,
        __history.name() : __history,
        __id.name() : __id,
        __invalidUrl.name() : __invalidUrl,
        __endSnd.name() : __endSnd,
        __action.name() : __action
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Hyperlink', CT_Hyperlink)


# Complex type CT_PhotoAlbum with content type ELEMENT_ONLY
class CT_PhotoAlbum (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_PhotoAlbum')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PhotoAlbum_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute frame uses Python identifier frame
    __frame = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'frame'), 'frame', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PhotoAlbum_frame', ST_PhotoAlbumFrameShape, unicode_default=u'frameStyle1')
    
    frame = property(__frame.value, __frame.set, None, u'Frame Type')

    
    # Attribute bw uses Python identifier bw
    __bw = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bw'), 'bw', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PhotoAlbum_bw', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    bw = property(__bw.value, __bw.set, None, u'Black and White')

    
    # Attribute layout uses Python identifier layout
    __layout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'layout'), 'layout', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PhotoAlbum_layout', ST_PhotoAlbumLayout, unicode_default=u'fitToSlide')
    
    layout = property(__layout.value, __layout.set, None, u'Photo Album Layout')

    
    # Attribute showCaptions uses Python identifier showCaptions
    __showCaptions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showCaptions'), 'showCaptions', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PhotoAlbum_showCaptions', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showCaptions = property(__showCaptions.value, __showCaptions.set, None, u'Show/Hide Captions')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __frame.name() : __frame,
        __bw.name() : __bw,
        __layout.name() : __layout,
        __showCaptions.name() : __showCaptions
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_PhotoAlbum', CT_PhotoAlbum)


# Complex type CT_WheelTransition with content type EMPTY
class CT_WheelTransition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_WheelTransition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute spokes uses Python identifier spokes
    __spokes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spokes'), 'spokes', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_WheelTransition_spokes', pyxb.binding.datatypes.unsignedInt, unicode_default=u'4')
    
    spokes = property(__spokes.value, __spokes.set, None, u'Spokes')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __spokes.name() : __spokes
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_WheelTransition', CT_WheelTransition)


# Complex type CT_SphereCoords with content type EMPTY
class CT_SphereCoords (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_SphereCoords')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lat uses Python identifier lat
    __lat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lat'), 'lat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SphereCoords_lat', ST_PositiveFixedAngle, required=True)
    
    lat = property(__lat.value, __lat.set, None, u'Latitude')

    
    # Attribute rev uses Python identifier rev
    __rev = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rev'), 'rev', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SphereCoords_rev', ST_PositiveFixedAngle, required=True)
    
    rev = property(__rev.value, __rev.set, None, u'Revolution')

    
    # Attribute lon uses Python identifier lon
    __lon = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lon'), 'lon', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SphereCoords_lon', ST_PositiveFixedAngle, required=True)
    
    lon = property(__lon.value, __lon.set, None, u'Longitude')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lat.name() : __lat,
        __rev.name() : __rev,
        __lon.name() : __lon
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_SphereCoords', CT_SphereCoords)


# Complex type CT_OleObject with content type ELEMENT_ONLY
class CT_OleObject (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_OleObject')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}embed uses Python identifier embed
    __embed = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'embed'), 'embed', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OleObject_httpschemas_openxmlformats_orgpresentationml2006mainembed', False)

    
    embed = property(__embed.value, __embed.set, None, u'Embedded Object or Control')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}link uses Python identifier link
    __link = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'link'), 'link', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OleObject_httpschemas_openxmlformats_orgpresentationml2006mainlink', False)

    
    link = property(__link.value, __link.set, None, u'Linked Object or Control')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}pic uses Python identifier pic
    __pic = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'pic'), 'pic', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OleObject_httpschemas_openxmlformats_orgpresentationml2006mainpic', False)

    
    pic = property(__pic.value, __pic.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OleObject_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Embedded Object Name')

    
    # Attribute spid uses Python identifier spid
    __spid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spid'), 'spid', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OleObject_spid', ST_ShapeID, required=True)
    
    spid = property(__spid.value, __spid.set, None, u'Embedded object Shape ID')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OleObject_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute imgW uses Python identifier imgW
    __imgW = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'imgW'), 'imgW', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OleObject_imgW', ST_PositiveCoordinate32)
    
    imgW = property(__imgW.value, __imgW.set, None, u'Image Width')

    
    # Attribute imgH uses Python identifier imgH
    __imgH = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'imgH'), 'imgH', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OleObject_imgH', ST_PositiveCoordinate32)
    
    imgH = property(__imgH.value, __imgH.set, None, u'Image Height')

    
    # Attribute progId uses Python identifier progId
    __progId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'progId'), 'progId', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OleObject_progId', pyxb.binding.datatypes.string)
    
    progId = property(__progId.value, __progId.set, None, u'Embedded Object ProgID')

    
    # Attribute showAsIcon uses Python identifier showAsIcon
    __showAsIcon = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showAsIcon'), 'showAsIcon', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OleObject_showAsIcon', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showAsIcon = property(__showAsIcon.value, __showAsIcon.set, None, u'Show Embedded Object As Icon')


    _ElementMap = {
        __embed.name() : __embed,
        __link.name() : __link,
        __pic.name() : __pic
    }
    _AttributeMap = {
        __name.name() : __name,
        __spid.name() : __spid,
        __id.name() : __id,
        __imgW.name() : __imgW,
        __imgH.name() : __imgH,
        __progId.name() : __progId,
        __showAsIcon.name() : __showAsIcon
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_OleObject', CT_OleObject)


# Complex type CT_CommonSlideViewProperties with content type ELEMENT_ONLY
class CT_CommonSlideViewProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_CommonSlideViewProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}guideLst uses Python identifier guideLst
    __guideLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'guideLst'), 'guideLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommonSlideViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainguideLst', False)

    
    guideLst = property(__guideLst.value, __guideLst.set, None, u'List of Guides')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cViewPr uses Python identifier cViewPr
    __cViewPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cViewPr'), 'cViewPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommonSlideViewProperties_httpschemas_openxmlformats_orgpresentationml2006maincViewPr', False)

    
    cViewPr = property(__cViewPr.value, __cViewPr.set, None, u'Base properties for Slide View')

    
    # Attribute snapToGrid uses Python identifier snapToGrid
    __snapToGrid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'snapToGrid'), 'snapToGrid', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommonSlideViewProperties_snapToGrid', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    snapToGrid = property(__snapToGrid.value, __snapToGrid.set, None, u'Snap Objects to Grid')

    
    # Attribute snapToObjects uses Python identifier snapToObjects
    __snapToObjects = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'snapToObjects'), 'snapToObjects', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommonSlideViewProperties_snapToObjects', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    snapToObjects = property(__snapToObjects.value, __snapToObjects.set, None, u'Snap Objects to Objects')

    
    # Attribute showGuides uses Python identifier showGuides
    __showGuides = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showGuides'), 'showGuides', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommonSlideViewProperties_showGuides', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showGuides = property(__showGuides.value, __showGuides.set, None, u'Show Guides in View')


    _ElementMap = {
        __guideLst.name() : __guideLst,
        __cViewPr.name() : __cViewPr
    }
    _AttributeMap = {
        __snapToGrid.name() : __snapToGrid,
        __snapToObjects.name() : __snapToObjects,
        __showGuides.name() : __showGuides
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_CommonSlideViewProperties', CT_CommonSlideViewProperties)


# Complex type CT_TextNormalAutofit with content type EMPTY
class CT_TextNormalAutofit (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextNormalAutofit')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute fontScale uses Python identifier fontScale
    __fontScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fontScale'), 'fontScale', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextNormalAutofit_fontScale', ST_TextFontScalePercentOrPercentString, unicode_default=u'100%')
    
    fontScale = property(__fontScale.value, __fontScale.set, None, u'Font Scale')

    
    # Attribute lnSpcReduction uses Python identifier lnSpcReduction
    __lnSpcReduction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lnSpcReduction'), 'lnSpcReduction', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextNormalAutofit_lnSpcReduction', ST_TextSpacingPercentOrPercentString, unicode_default=u'0%')
    
    lnSpcReduction = property(__lnSpcReduction.value, __lnSpcReduction.set, None, u'Line Space Reduction')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __fontScale.name() : __fontScale,
        __lnSpcReduction.name() : __lnSpcReduction
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextNormalAutofit', CT_TextNormalAutofit)


# Complex type CT_GvmlShape with content type ELEMENT_ONLY
class CT_GvmlShape (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlShape')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlShape_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}nvSpPr uses Python identifier nvSpPr
    __nvSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'nvSpPr'), 'nvSpPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlShape_httpschemas_openxmlformats_orgdrawingml2006mainnvSpPr', False)

    
    nvSpPr = property(__nvSpPr.value, __nvSpPr.set, None, u'Non-Visual Properties for a Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spPr uses Python identifier spPr
    __spPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), 'spPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlShape_httpschemas_openxmlformats_orgdrawingml2006mainspPr', False)

    
    spPr = property(__spPr.value, __spPr.set, None, u'Visual Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), 'style', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlShape_httpschemas_openxmlformats_orgdrawingml2006mainstyle', False)

    
    style = property(__style.value, __style.set, None, u'Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}txSp uses Python identifier txSp
    __txSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'txSp'), 'txSp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlShape_httpschemas_openxmlformats_orgdrawingml2006maintxSp', False)

    
    txSp = property(__txSp.value, __txSp.set, None, u'Text Shape')


    _ElementMap = {
        __extLst.name() : __extLst,
        __nvSpPr.name() : __nvSpPr,
        __spPr.name() : __spPr,
        __style.name() : __style,
        __txSp.name() : __txSp
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlShape', CT_GvmlShape)


# Complex type CT_TLTimeNodeParallel with content type ELEMENT_ONLY
class CT_TLTimeNodeParallel (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLTimeNodeParallel')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cTn uses Python identifier cTn
    __cTn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cTn'), 'cTn', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeNodeParallel_httpschemas_openxmlformats_orgpresentationml2006maincTn', False)

    
    cTn = property(__cTn.value, __cTn.set, None, u'Parallel TimeNode')


    _ElementMap = {
        __cTn.name() : __cTn
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLTimeNodeParallel', CT_TLTimeNodeParallel)


# Complex type CT_DuotoneEffect with content type ELEMENT_ONLY
class CT_DuotoneEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_DuotoneEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DuotoneEffect_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', True)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DuotoneEffect_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', True)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DuotoneEffect_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', True)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DuotoneEffect_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', True)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DuotoneEffect_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', True)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DuotoneEffect_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', True)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')


    _ElementMap = {
        __scrgbClr.name() : __scrgbClr,
        __prstClr.name() : __prstClr,
        __srgbClr.name() : __srgbClr,
        __schemeClr.name() : __schemeClr,
        __hslClr.name() : __hslClr,
        __sysClr.name() : __sysClr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_DuotoneEffect', CT_DuotoneEffect)


# Complex type CT_TLAnimateEffectBehavior with content type ELEMENT_ONLY
class CT_TLAnimateEffectBehavior (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLAnimateEffectBehavior')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}progress uses Python identifier progress
    __progress = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'progress'), 'progress', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateEffectBehavior_httpschemas_openxmlformats_orgpresentationml2006mainprogress', False)

    
    progress = property(__progress.value, __progress.set, None, u'Progress')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cBhvr uses Python identifier cBhvr
    __cBhvr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), 'cBhvr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateEffectBehavior_httpschemas_openxmlformats_orgpresentationml2006maincBhvr', False)

    
    cBhvr = property(__cBhvr.value, __cBhvr.set, None, None)

    
    # Attribute filter uses Python identifier filter
    __filter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'filter'), 'filter', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateEffectBehavior_filter', pyxb.binding.datatypes.string)
    
    filter = property(__filter.value, __filter.set, None, u'Filter')

    
    # Attribute transition uses Python identifier transition
    __transition = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'transition'), 'transition', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateEffectBehavior_transition', ST_TLAnimateEffectTransition)
    
    transition = property(__transition.value, __transition.set, None, u'Transition')

    
    # Attribute prLst uses Python identifier prLst
    __prLst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prLst'), 'prLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateEffectBehavior_prLst', pyxb.binding.datatypes.string)
    
    prLst = property(__prLst.value, __prLst.set, None, u'Property List')


    _ElementMap = {
        __progress.name() : __progress,
        __cBhvr.name() : __cBhvr
    }
    _AttributeMap = {
        __filter.name() : __filter,
        __transition.name() : __transition,
        __prLst.name() : __prLst
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLAnimateEffectBehavior', CT_TLAnimateEffectBehavior)


# Complex type CT_Path2DClose with content type EMPTY
class CT_Path2DClose (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2DClose')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2DClose', CT_Path2DClose)


# Complex type CT_TLTemplate with content type ELEMENT_ONLY
class CT_TLTemplate (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLTemplate')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}tnLst uses Python identifier tnLst
    __tnLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'tnLst'), 'tnLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTemplate_httpschemas_openxmlformats_orgpresentationml2006maintnLst', False)

    
    tnLst = property(__tnLst.value, __tnLst.set, None, u'Time Node List')

    
    # Attribute lvl uses Python identifier lvl
    __lvl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lvl'), 'lvl', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTemplate_lvl', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    lvl = property(__lvl.value, __lvl.set, None, u'Level')


    _ElementMap = {
        __tnLst.name() : __tnLst
    }
    _AttributeMap = {
        __lvl.name() : __lvl
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLTemplate', CT_TLTemplate)


# Complex type CT_Scale2D with content type ELEMENT_ONLY
class CT_Scale2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Scale2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sy uses Python identifier sy
    __sy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sy'), 'sy', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Scale2D_httpschemas_openxmlformats_orgdrawingml2006mainsy', False)

    
    sy = property(__sy.value, __sy.set, None, u'Vertical Ratio')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sx uses Python identifier sx
    __sx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sx'), 'sx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Scale2D_httpschemas_openxmlformats_orgdrawingml2006mainsx', False)

    
    sx = property(__sx.value, __sx.set, None, u'Horizontal Ratio')


    _ElementMap = {
        __sy.name() : __sy,
        __sx.name() : __sx
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Scale2D', CT_Scale2D)


# Complex type CT_AnimationChartBuildProperties with content type EMPTY
class CT_AnimationChartBuildProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AnimationChartBuildProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute bld uses Python identifier bld
    __bld = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bld'), 'bld', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationChartBuildProperties_bld', ST_AnimationChartBuildType, unicode_default=u'allAtOnce')
    
    bld = property(__bld.value, __bld.set, None, u'Build')

    
    # Attribute animBg uses Python identifier animBg
    __animBg = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'animBg'), 'animBg', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationChartBuildProperties_animBg', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    animBg = property(__animBg.value, __animBg.set, None, u'Animate Background')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __bld.name() : __bld,
        __animBg.name() : __animBg
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AnimationChartBuildProperties', CT_AnimationChartBuildProperties)


# Complex type CT_CustomShowList with content type ELEMENT_ONLY
class CT_CustomShowList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_CustomShowList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}custShow uses Python identifier custShow
    __custShow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'custShow'), 'custShow', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CustomShowList_httpschemas_openxmlformats_orgpresentationml2006maincustShow', True)

    
    custShow = property(__custShow.value, __custShow.set, None, u'Custom Show')


    _ElementMap = {
        __custShow.name() : __custShow
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_CustomShowList', CT_CustomShowList)


# Complex type CT_EmbeddedFontListEntry with content type ELEMENT_ONLY
class CT_EmbeddedFontListEntry (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_EmbeddedFontListEntry')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}boldItalic uses Python identifier boldItalic
    __boldItalic = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'boldItalic'), 'boldItalic', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_EmbeddedFontListEntry_httpschemas_openxmlformats_orgpresentationml2006mainboldItalic', False)

    
    boldItalic = property(__boldItalic.value, __boldItalic.set, None, u'Bold Italic Embedded Font')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}font uses Python identifier font
    __font = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'font'), 'font', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_EmbeddedFontListEntry_httpschemas_openxmlformats_orgpresentationml2006mainfont', False)

    
    font = property(__font.value, __font.set, None, u'Embedded Font Name')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}regular uses Python identifier regular
    __regular = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'regular'), 'regular', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_EmbeddedFontListEntry_httpschemas_openxmlformats_orgpresentationml2006mainregular', False)

    
    regular = property(__regular.value, __regular.set, None, u'Regular Embedded Font')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}italic uses Python identifier italic
    __italic = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'italic'), 'italic', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_EmbeddedFontListEntry_httpschemas_openxmlformats_orgpresentationml2006mainitalic', False)

    
    italic = property(__italic.value, __italic.set, None, u'Italic Embedded Font')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}bold uses Python identifier bold
    __bold = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'bold'), 'bold', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_EmbeddedFontListEntry_httpschemas_openxmlformats_orgpresentationml2006mainbold', False)

    
    bold = property(__bold.value, __bold.set, None, u'Bold Embedded Font')


    _ElementMap = {
        __boldItalic.name() : __boldItalic,
        __font.name() : __font,
        __regular.name() : __regular,
        __italic.name() : __italic,
        __bold.name() : __bold
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_EmbeddedFontListEntry', CT_EmbeddedFontListEntry)


# Complex type CT_OfficeStyleSheet with content type ELEMENT_ONLY
class CT_OfficeStyleSheet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_OfficeStyleSheet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeStyleSheet_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}themeElements uses Python identifier themeElements
    __themeElements = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'themeElements'), 'themeElements', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeStyleSheet_httpschemas_openxmlformats_orgdrawingml2006mainthemeElements', False)

    
    themeElements = property(__themeElements.value, __themeElements.set, None, u'Theme Elements')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extraClrSchemeLst uses Python identifier extraClrSchemeLst
    __extraClrSchemeLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extraClrSchemeLst'), 'extraClrSchemeLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeStyleSheet_httpschemas_openxmlformats_orgdrawingml2006mainextraClrSchemeLst', False)

    
    extraClrSchemeLst = property(__extraClrSchemeLst.value, __extraClrSchemeLst.set, None, u'Extra Color Scheme List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}custClrLst uses Python identifier custClrLst
    __custClrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'custClrLst'), 'custClrLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeStyleSheet_httpschemas_openxmlformats_orgdrawingml2006maincustClrLst', False)

    
    custClrLst = property(__custClrLst.value, __custClrLst.set, None, u'Custom Color List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}objectDefaults uses Python identifier objectDefaults
    __objectDefaults = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'objectDefaults'), 'objectDefaults', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeStyleSheet_httpschemas_openxmlformats_orgdrawingml2006mainobjectDefaults', False)

    
    objectDefaults = property(__objectDefaults.value, __objectDefaults.set, None, u'Object Defaults')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeStyleSheet_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __extLst.name() : __extLst,
        __themeElements.name() : __themeElements,
        __extraClrSchemeLst.name() : __extraClrSchemeLst,
        __custClrLst.name() : __custClrLst,
        __objectDefaults.name() : __objectDefaults
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_OfficeStyleSheet', CT_OfficeStyleSheet)


# Complex type CT_CxnList with content type ELEMENT_ONLY
class CT_CxnList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_CxnList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}cxn uses Python identifier cxn
    __cxn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'cxn'), 'cxn', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CxnList_httpschemas_openxmlformats_orgdrawingml2006diagramcxn', True)

    
    cxn = property(__cxn.value, __cxn.set, None, u'Connection')


    _ElementMap = {
        __cxn.name() : __cxn
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_CxnList', CT_CxnList)


# Complex type CT_RelativeRect with content type EMPTY
class CT_RelativeRect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_RelativeRect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RelativeRect_r', ST_Percentage, unicode_default=u'0%')
    
    r = property(__r.value, __r.set, None, u'Right Offset')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RelativeRect_b', ST_Percentage, unicode_default=u'0%')
    
    b = property(__b.value, __b.set, None, u'Bottom Offset')

    
    # Attribute l uses Python identifier l
    __l = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'l'), 'l', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RelativeRect_l', ST_Percentage, unicode_default=u'0%')
    
    l = property(__l.value, __l.set, None, u'Left Offset')

    
    # Attribute t uses Python identifier t
    __t = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u't'), 't', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RelativeRect_t', ST_Percentage, unicode_default=u'0%')
    
    t = property(__t.value, __t.set, None, u'Top Offset')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __r.name() : __r,
        __b.name() : __b,
        __l.name() : __l,
        __t.name() : __t
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_RelativeRect', CT_RelativeRect)


# Complex type CT_TextParagraph with content type ELEMENT_ONLY
class CT_TextParagraph (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextParagraph')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}endParaRPr uses Python identifier endParaRPr
    __endParaRPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'endParaRPr'), 'endParaRPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraph_httpschemas_openxmlformats_orgdrawingml2006mainendParaRPr', False)

    
    endParaRPr = property(__endParaRPr.value, __endParaRPr.set, None, u'End Paragraph Run Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pPr uses Python identifier pPr
    __pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pPr'), 'pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraph_httpschemas_openxmlformats_orgdrawingml2006mainpPr', False)

    
    pPr = property(__pPr.value, __pPr.set, None, u'Text Paragraph Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}br uses Python identifier br
    __br = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'br'), 'br', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraph_httpschemas_openxmlformats_orgdrawingml2006mainbr', True)

    
    br = property(__br.value, __br.set, None, u'Text Line Break')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fld uses Python identifier fld
    __fld = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fld'), 'fld', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraph_httpschemas_openxmlformats_orgdrawingml2006mainfld', True)

    
    fld = property(__fld.value, __fld.set, None, u'Text Field')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'r'), 'r', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraph_httpschemas_openxmlformats_orgdrawingml2006mainr', True)

    
    r = property(__r.value, __r.set, None, u'Text Run')


    _ElementMap = {
        __endParaRPr.name() : __endParaRPr,
        __pPr.name() : __pPr,
        __br.name() : __br,
        __fld.name() : __fld,
        __r.name() : __r
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextParagraph', CT_TextParagraph)


# Complex type CT_SDName with content type EMPTY
class CT_SDName (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_SDName')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SDName_lang', pyxb.binding.datatypes.string, unicode_default=u'')
    
    lang = property(__lang.value, __lang.set, None, u'Natural Language')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SDName_val', pyxb.binding.datatypes.string, required=True)
    
    val = property(__val.value, __val.set, None, u'Description Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lang.name() : __lang,
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_SDName', CT_SDName)


# Complex type CT_TLTextTargetElement with content type ELEMENT_ONLY
class CT_TLTextTargetElement (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLTextTargetElement')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}charRg uses Python identifier charRg
    __charRg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'charRg'), 'charRg', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTextTargetElement_httpschemas_openxmlformats_orgpresentationml2006maincharRg', False)

    
    charRg = property(__charRg.value, __charRg.set, None, u'Character Range')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}pRg uses Python identifier pRg
    __pRg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'pRg'), 'pRg', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTextTargetElement_httpschemas_openxmlformats_orgpresentationml2006mainpRg', False)

    
    pRg = property(__pRg.value, __pRg.set, None, u'Paragraph Text Range')


    _ElementMap = {
        __charRg.name() : __charRg,
        __pRg.name() : __pRg
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLTextTargetElement', CT_TLTextTargetElement)


# Complex type CT_NotesMaster with content type ELEMENT_ONLY
class CT_NotesMaster (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_NotesMaster')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesMaster_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cSld uses Python identifier cSld
    __cSld = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cSld'), 'cSld', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesMaster_httpschemas_openxmlformats_orgpresentationml2006maincSld', False)

    
    cSld = property(__cSld.value, __cSld.set, None, u'Common Slide Data')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}hf uses Python identifier hf
    __hf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'hf'), 'hf', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesMaster_httpschemas_openxmlformats_orgpresentationml2006mainhf', False)

    
    hf = property(__hf.value, __hf.set, None, u'Header/Footer Information for a Notes Master')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}clrMap uses Python identifier clrMap
    __clrMap = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'clrMap'), 'clrMap', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesMaster_httpschemas_openxmlformats_orgpresentationml2006mainclrMap', False)

    
    clrMap = property(__clrMap.value, __clrMap.set, None, u'Color Scheme Map')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}notesStyle uses Python identifier notesStyle
    __notesStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'notesStyle'), 'notesStyle', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesMaster_httpschemas_openxmlformats_orgpresentationml2006mainnotesStyle', False)

    
    notesStyle = property(__notesStyle.value, __notesStyle.set, None, u'Notes Text Style')


    _ElementMap = {
        __extLst.name() : __extLst,
        __cSld.name() : __cSld,
        __hf.name() : __hf,
        __clrMap.name() : __clrMap,
        __notesStyle.name() : __notesStyle
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_NotesMaster', CT_NotesMaster)


# Complex type CT_AnimationGraphicalObjectBuildProperties with content type ELEMENT_ONLY
class CT_AnimationGraphicalObjectBuildProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AnimationGraphicalObjectBuildProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bldDgm uses Python identifier bldDgm
    __bldDgm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bldDgm'), 'bldDgm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationGraphicalObjectBuildProperties_httpschemas_openxmlformats_orgdrawingml2006mainbldDgm', False)

    
    bldDgm = property(__bldDgm.value, __bldDgm.set, None, u'Build Diagram')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bldChart uses Python identifier bldChart
    __bldChart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bldChart'), 'bldChart', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationGraphicalObjectBuildProperties_httpschemas_openxmlformats_orgdrawingml2006mainbldChart', False)

    
    bldChart = property(__bldChart.value, __bldChart.set, None, u'Build Chart')


    _ElementMap = {
        __bldDgm.name() : __bldDgm,
        __bldChart.name() : __bldChart
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AnimationGraphicalObjectBuildProperties', CT_AnimationGraphicalObjectBuildProperties)


# Complex type CT_StyleLabel with content type ELEMENT_ONLY
class CT_StyleLabel (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_StyleLabel')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}scene3d uses Python identifier scene3d
    __scene3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'scene3d'), 'scene3d', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramscene3d', False)

    
    scene3d = property(__scene3d.value, __scene3d.set, None, u'3-D Scene')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'style'), 'style', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramstyle', False)

    
    style = property(__style.value, __style.set, None, u'Shape Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}txPr uses Python identifier txPr
    __txPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'txPr'), 'txPr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramtxPr', False)

    
    txPr = property(__txPr.value, __txPr.set, None, u'Text Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}sp3d uses Python identifier sp3d
    __sp3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'sp3d'), 'sp3d', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramsp3d', False)

    
    sp3d = property(__sp3d.value, __sp3d.set, None, u'3-D Shape Properties')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleLabel_name', pyxb.binding.datatypes.string, required=True)
    
    name = property(__name.value, __name.set, None, u'Style Name')


    _ElementMap = {
        __extLst.name() : __extLst,
        __scene3d.name() : __scene3d,
        __style.name() : __style,
        __txPr.name() : __txPr,
        __sp3d.name() : __sp3d
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace.addCategoryObject('typeBinding', u'CT_StyleLabel', CT_StyleLabel)


# Complex type CT_TagList with content type ELEMENT_ONLY
class CT_TagList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TagList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}tag uses Python identifier tag
    __tag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'tag'), 'tag', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TagList_httpschemas_openxmlformats_orgpresentationml2006maintag', True)

    
    tag = property(__tag.value, __tag.set, None, u'Programmable Extensibility Tag')


    _ElementMap = {
        __tag.name() : __tag
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TagList', CT_TagList)


# Complex type CT_TLIterateData with content type ELEMENT_ONLY
class CT_TLIterateData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLIterateData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}tmAbs uses Python identifier tmAbs
    __tmAbs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'tmAbs'), 'tmAbs', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLIterateData_httpschemas_openxmlformats_orgpresentationml2006maintmAbs', False)

    
    tmAbs = property(__tmAbs.value, __tmAbs.set, None, u'Time Absolute')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}tmPct uses Python identifier tmPct
    __tmPct = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'tmPct'), 'tmPct', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLIterateData_httpschemas_openxmlformats_orgpresentationml2006maintmPct', False)

    
    tmPct = property(__tmPct.value, __tmPct.set, None, u'Time Percentage')

    
    # Attribute backwards uses Python identifier backwards
    __backwards = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'backwards'), 'backwards', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLIterateData_backwards', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    backwards = property(__backwards.value, __backwards.set, None, u'Backwards')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLIterateData_type', ST_IterateType, unicode_default=u'el')
    
    type = property(__type.value, __type.set, None, u'Iterate Type')


    _ElementMap = {
        __tmAbs.name() : __tmAbs,
        __tmPct.name() : __tmPct
    }
    _AttributeMap = {
        __backwards.name() : __backwards,
        __type.name() : __type
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLIterateData', CT_TLIterateData)


# Complex type CT_SlideLayout with content type ELEMENT_ONLY
class CT_SlideLayout (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideLayout')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cSld uses Python identifier cSld
    __cSld = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cSld'), 'cSld', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayout_httpschemas_openxmlformats_orgpresentationml2006maincSld', False)

    
    cSld = property(__cSld.value, __cSld.set, None, u'Common slide data for slide layouts')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayout_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}transition uses Python identifier transition
    __transition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'transition'), 'transition', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayout_httpschemas_openxmlformats_orgpresentationml2006maintransition', False)

    
    transition = property(__transition.value, __transition.set, None, u'Slide Transition for a Slide Layout')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}timing uses Python identifier timing
    __timing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'timing'), 'timing', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayout_httpschemas_openxmlformats_orgpresentationml2006maintiming', False)

    
    timing = property(__timing.value, __timing.set, None, u'Slide Timing Information for a Slide Layout')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}clrMapOvr uses Python identifier clrMapOvr
    __clrMapOvr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'clrMapOvr'), 'clrMapOvr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayout_httpschemas_openxmlformats_orgpresentationml2006mainclrMapOvr', False)

    
    clrMapOvr = property(__clrMapOvr.value, __clrMapOvr.set, None, u'Color Scheme Map Override')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}hf uses Python identifier hf
    __hf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'hf'), 'hf', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayout_httpschemas_openxmlformats_orgpresentationml2006mainhf', False)

    
    hf = property(__hf.value, __hf.set, None, u'Header/Footer information for a slide layout')

    
    # Attribute userDrawn uses Python identifier userDrawn
    __userDrawn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'userDrawn'), 'userDrawn', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayout_userDrawn', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    userDrawn = property(__userDrawn.value, __userDrawn.set, None, u'Is User Drawn')

    
    # Attribute showMasterPhAnim uses Python identifier showMasterPhAnim
    __showMasterPhAnim = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showMasterPhAnim'), 'showMasterPhAnim', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayout_showMasterPhAnim', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showMasterPhAnim = property(__showMasterPhAnim.value, __showMasterPhAnim.set, None, u'Show Master Placeholder Animations')

    
    # Attribute matchingName uses Python identifier matchingName
    __matchingName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'matchingName'), 'matchingName', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayout_matchingName', pyxb.binding.datatypes.string, unicode_default=u'')
    
    matchingName = property(__matchingName.value, __matchingName.set, None, u'Matching Name')

    
    # Attribute preserve uses Python identifier preserve
    __preserve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'preserve'), 'preserve', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayout_preserve', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    preserve = property(__preserve.value, __preserve.set, None, u'Preserve Slide Layout')

    
    # Attribute showMasterSp uses Python identifier showMasterSp
    __showMasterSp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showMasterSp'), 'showMasterSp', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayout_showMasterSp', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showMasterSp = property(__showMasterSp.value, __showMasterSp.set, None, u'Show Master Shapes')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayout_type', ST_SlideLayoutType, unicode_default=u'cust')
    
    type = property(__type.value, __type.set, None, u'Slide Layout Type')


    _ElementMap = {
        __cSld.name() : __cSld,
        __extLst.name() : __extLst,
        __transition.name() : __transition,
        __timing.name() : __timing,
        __clrMapOvr.name() : __clrMapOvr,
        __hf.name() : __hf
    }
    _AttributeMap = {
        __userDrawn.name() : __userDrawn,
        __showMasterPhAnim.name() : __showMasterPhAnim,
        __matchingName.name() : __matchingName,
        __preserve.name() : __preserve,
        __showMasterSp.name() : __showMasterSp,
        __type.name() : __type
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideLayout', CT_SlideLayout)


# Complex type CT_TextBulletSizeFollowText with content type EMPTY
class CT_TextBulletSizeFollowText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBulletSizeFollowText')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBulletSizeFollowText', CT_TextBulletSizeFollowText)


# Complex type CT_ConnectionSiteList with content type ELEMENT_ONLY
class CT_ConnectionSiteList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ConnectionSiteList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cxn uses Python identifier cxn
    __cxn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cxn'), 'cxn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectionSiteList_httpschemas_openxmlformats_orgdrawingml2006maincxn', True)

    
    cxn = property(__cxn.value, __cxn.set, None, u'Shape Connection Site')


    _ElementMap = {
        __cxn.name() : __cxn
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ConnectionSiteList', CT_ConnectionSiteList)


# Complex type CT_NonVisualGraphicFrameProperties with content type ELEMENT_ONLY
class CT_NonVisualGraphicFrameProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_NonVisualGraphicFrameProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualGraphicFrameProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}graphicFrameLocks uses Python identifier graphicFrameLocks
    __graphicFrameLocks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicFrameLocks'), 'graphicFrameLocks', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualGraphicFrameProperties_httpschemas_openxmlformats_orgdrawingml2006maingraphicFrameLocks', False)

    
    graphicFrameLocks = property(__graphicFrameLocks.value, __graphicFrameLocks.set, None, u'Graphic Frame Locks')


    _ElementMap = {
        __extLst.name() : __extLst,
        __graphicFrameLocks.name() : __graphicFrameLocks
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_NonVisualGraphicFrameProperties', CT_NonVisualGraphicFrameProperties)


# Complex type CT_Slide with content type ELEMENT_ONLY
class CT_Slide (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_Slide')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Slide_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cSld uses Python identifier cSld
    __cSld = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cSld'), 'cSld', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Slide_httpschemas_openxmlformats_orgpresentationml2006maincSld', False)

    
    cSld = property(__cSld.value, __cSld.set, None, u'Common slide data for slides')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}timing uses Python identifier timing
    __timing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'timing'), 'timing', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Slide_httpschemas_openxmlformats_orgpresentationml2006maintiming', False)

    
    timing = property(__timing.value, __timing.set, None, u'Slide Timing Information for a Slide')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}clrMapOvr uses Python identifier clrMapOvr
    __clrMapOvr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'clrMapOvr'), 'clrMapOvr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Slide_httpschemas_openxmlformats_orgpresentationml2006mainclrMapOvr', False)

    
    clrMapOvr = property(__clrMapOvr.value, __clrMapOvr.set, None, u'Color Scheme Map Override')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}transition uses Python identifier transition
    __transition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'transition'), 'transition', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Slide_httpschemas_openxmlformats_orgpresentationml2006maintransition', False)

    
    transition = property(__transition.value, __transition.set, None, u'Slide Transition')

    
    # Attribute showMasterSp uses Python identifier showMasterSp
    __showMasterSp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showMasterSp'), 'showMasterSp', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Slide_showMasterSp', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showMasterSp = property(__showMasterSp.value, __showMasterSp.set, None, u'Show Master Shapes')

    
    # Attribute showMasterPhAnim uses Python identifier showMasterPhAnim
    __showMasterPhAnim = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showMasterPhAnim'), 'showMasterPhAnim', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Slide_showMasterPhAnim', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showMasterPhAnim = property(__showMasterPhAnim.value, __showMasterPhAnim.set, None, u'Show Master Placeholder Animations')

    
    # Attribute show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'show'), 'show', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Slide_show', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    show = property(__show.value, __show.set, None, u'Show Slide in Slide Show')


    _ElementMap = {
        __extLst.name() : __extLst,
        __cSld.name() : __cSld,
        __timing.name() : __timing,
        __clrMapOvr.name() : __clrMapOvr,
        __transition.name() : __transition
    }
    _AttributeMap = {
        __showMasterSp.name() : __showMasterSp,
        __showMasterPhAnim.name() : __showMasterPhAnim,
        __show.name() : __show
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_Slide', CT_Slide)


# Complex type CT_RelIds with content type EMPTY
class CT_RelIds (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_RelIds')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}lo uses Python identifier lo
    __lo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'lo'), 'lo', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_RelIds_httpschemas_openxmlformats_orgofficeDocument2006relationshipslo', _r.ST_RelationshipId, unicode_default=u'', required=True)
    
    lo = property(__lo.value, __lo.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}dm uses Python identifier dm
    __dm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'dm'), 'dm', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_RelIds_httpschemas_openxmlformats_orgofficeDocument2006relationshipsdm', _r.ST_RelationshipId, unicode_default=u'', required=True)
    
    dm = property(__dm.value, __dm.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}qs uses Python identifier qs
    __qs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'qs'), 'qs', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_RelIds_httpschemas_openxmlformats_orgofficeDocument2006relationshipsqs', _r.ST_RelationshipId, unicode_default=u'', required=True)
    
    qs = property(__qs.value, __qs.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}cs uses Python identifier cs
    __cs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'cs'), 'cs', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_RelIds_httpschemas_openxmlformats_orgofficeDocument2006relationshipscs', _r.ST_RelationshipId, unicode_default=u'', required=True)
    
    cs = property(__cs.value, __cs.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lo.name() : __lo,
        __dm.name() : __dm,
        __qs.name() : __qs,
        __cs.name() : __cs
    }
_Namespace.addCategoryObject('typeBinding', u'CT_RelIds', CT_RelIds)


# Complex type CT_GvmlGraphicalObjectFrame with content type ELEMENT_ONLY
class CT_GvmlGraphicalObjectFrame (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlGraphicalObjectFrame')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGraphicalObjectFrame_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}nvGraphicFramePr uses Python identifier nvGraphicFramePr
    __nvGraphicFramePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'nvGraphicFramePr'), 'nvGraphicFramePr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGraphicalObjectFrame_httpschemas_openxmlformats_orgdrawingml2006mainnvGraphicFramePr', False)

    
    nvGraphicFramePr = property(__nvGraphicFramePr.value, __nvGraphicFramePr.set, None, u'Non-Visual Properties for a Graphic Frame')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}xfrm uses Python identifier xfrm
    __xfrm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), 'xfrm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGraphicalObjectFrame_httpschemas_openxmlformats_orgdrawingml2006mainxfrm', False)

    
    xfrm = property(__xfrm.value, __xfrm.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}graphic uses Python identifier graphic
    __graphic = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'graphic'), 'graphic', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGraphicalObjectFrame_httpschemas_openxmlformats_orgdrawingml2006maingraphic', False)

    
    graphic = property(__graphic.value, __graphic.set, None, u'Graphic Object')


    _ElementMap = {
        __extLst.name() : __extLst,
        __nvGraphicFramePr.name() : __nvGraphicFramePr,
        __xfrm.name() : __xfrm,
        __graphic.name() : __graphic
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlGraphicalObjectFrame', CT_GvmlGraphicalObjectFrame)


# Complex type CT_NotesViewProperties with content type ELEMENT_ONLY
class CT_NotesViewProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_NotesViewProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cSldViewPr uses Python identifier cSldViewPr
    __cSldViewPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cSldViewPr'), 'cSldViewPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_NotesViewProperties_httpschemas_openxmlformats_orgpresentationml2006maincSldViewPr', False)

    
    cSldViewPr = property(__cSldViewPr.value, __cSldViewPr.set, None, u'Common Slide View Properties')


    _ElementMap = {
        __extLst.name() : __extLst,
        __cSldViewPr.name() : __cSldViewPr
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_NotesViewProperties', CT_NotesViewProperties)


# Complex type CT_TLByHslColorTransform with content type EMPTY
class CT_TLByHslColorTransform (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLByHslColorTransform')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute h uses Python identifier h
    __h = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'h'), 'h', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLByHslColorTransform_h', ST_Angle, required=True)
    
    h = property(__h.value, __h.set, None, u'Hue')

    
    # Attribute s uses Python identifier s
    __s = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u's'), 's', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLByHslColorTransform_s', ST_FixedPercentage, required=True)
    
    s = property(__s.value, __s.set, None, u'Saturation')

    
    # Attribute l uses Python identifier l
    __l = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'l'), 'l', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLByHslColorTransform_l', ST_FixedPercentage, required=True)
    
    l = property(__l.value, __l.set, None, u'Lightness')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __h.name() : __h,
        __s.name() : __s,
        __l.name() : __l
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLByHslColorTransform', CT_TLByHslColorTransform)


# Complex type CT_CustomColor with content type ELEMENT_ONLY
class CT_CustomColor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_CustomColor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColor_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColor_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColor_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColor_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColor_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColor_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColor_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __prstClr.name() : __prstClr,
        __scrgbClr.name() : __scrgbClr,
        __hslClr.name() : __hslClr,
        __sysClr.name() : __sysClr,
        __schemeClr.name() : __schemeClr
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_CustomColor', CT_CustomColor)


# Complex type CT_TLTemplateList with content type ELEMENT_ONLY
class CT_TLTemplateList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLTemplateList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}tmpl uses Python identifier tmpl
    __tmpl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'tmpl'), 'tmpl', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTemplateList_httpschemas_openxmlformats_orgpresentationml2006maintmpl', True)

    
    tmpl = property(__tmpl.value, __tmpl.set, None, u'Template Effects')


    _ElementMap = {
        __tmpl.name() : __tmpl
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLTemplateList', CT_TLTemplateList)


# Complex type CT_ColorTransformHeaderLst with content type ELEMENT_ONLY
class CT_ColorTransformHeaderLst (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ColorTransformHeaderLst')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}colorsDefHdr uses Python identifier colorsDefHdr
    __colorsDefHdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'colorsDefHdr'), 'colorsDefHdr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeaderLst_httpschemas_openxmlformats_orgdrawingml2006diagramcolorsDefHdr', True)

    
    colorsDefHdr = property(__colorsDefHdr.value, __colorsDefHdr.set, None, u'Color Transform Definition Header')


    _ElementMap = {
        __colorsDefHdr.name() : __colorsDefHdr
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ColorTransformHeaderLst', CT_ColorTransformHeaderLst)


# Complex type CT_TLCommonBehaviorData with content type ELEMENT_ONLY
class CT_TLCommonBehaviorData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLCommonBehaviorData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}attrNameLst uses Python identifier attrNameLst
    __attrNameLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'attrNameLst'), 'attrNameLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonBehaviorData_httpschemas_openxmlformats_orgpresentationml2006mainattrNameLst', False)

    
    attrNameLst = property(__attrNameLst.value, __attrNameLst.set, None, u'Attribute Name List')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cTn uses Python identifier cTn
    __cTn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cTn'), 'cTn', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonBehaviorData_httpschemas_openxmlformats_orgpresentationml2006maincTn', False)

    
    cTn = property(__cTn.value, __cTn.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}tgtEl uses Python identifier tgtEl
    __tgtEl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'tgtEl'), 'tgtEl', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonBehaviorData_httpschemas_openxmlformats_orgpresentationml2006maintgtEl', False)

    
    tgtEl = property(__tgtEl.value, __tgtEl.set, None, u'Target Element')

    
    # Attribute rctx uses Python identifier rctx
    __rctx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rctx'), 'rctx', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonBehaviorData_rctx', pyxb.binding.datatypes.string)
    
    rctx = property(__rctx.value, __rctx.set, None, u'Runtime Context')

    
    # Attribute to uses Python identifier to
    __to = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'to'), 'to', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonBehaviorData_to', pyxb.binding.datatypes.string)
    
    to = property(__to.value, __to.set, None, u'To')

    
    # Attribute from uses Python identifier from_
    __from = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'from'), 'from_', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonBehaviorData_from', pyxb.binding.datatypes.string)
    
    from_ = property(__from.value, __from.set, None, u'From')

    
    # Attribute by uses Python identifier by
    __by = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'by'), 'by', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonBehaviorData_by', pyxb.binding.datatypes.string)
    
    by = property(__by.value, __by.set, None, u'By')

    
    # Attribute additive uses Python identifier additive
    __additive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'additive'), 'additive', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonBehaviorData_additive', ST_TLBehaviorAdditiveType)
    
    additive = property(__additive.value, __additive.set, None, u'Additive')

    
    # Attribute accumulate uses Python identifier accumulate
    __accumulate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accumulate'), 'accumulate', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonBehaviorData_accumulate', ST_TLBehaviorAccumulateType)
    
    accumulate = property(__accumulate.value, __accumulate.set, None, u'Accumulate')

    
    # Attribute override uses Python identifier override
    __override = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'override'), 'override', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonBehaviorData_override', ST_TLBehaviorOverrideType)
    
    override = property(__override.value, __override.set, None, u'Override')

    
    # Attribute xfrmType uses Python identifier xfrmType
    __xfrmType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xfrmType'), 'xfrmType', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLCommonBehaviorData_xfrmType', ST_TLBehaviorTransformType)
    
    xfrmType = property(__xfrmType.value, __xfrmType.set, None, u'Transform Type')


    _ElementMap = {
        __attrNameLst.name() : __attrNameLst,
        __cTn.name() : __cTn,
        __tgtEl.name() : __tgtEl
    }
    _AttributeMap = {
        __rctx.name() : __rctx,
        __to.name() : __to,
        __from.name() : __from,
        __by.name() : __by,
        __additive.name() : __additive,
        __accumulate.name() : __accumulate,
        __override.name() : __override,
        __xfrmType.name() : __xfrmType
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLCommonBehaviorData', CT_TLCommonBehaviorData)


# Complex type CT_ConnectorNonVisual with content type ELEMENT_ONLY
class CT_ConnectorNonVisual (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_ConnectorNonVisual')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}nvPr uses Python identifier nvPr
    __nvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'nvPr'), 'nvPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ConnectorNonVisual_httpschemas_openxmlformats_orgpresentationml2006mainnvPr', False)

    
    nvPr = property(__nvPr.value, __nvPr.set, None, u'Application Non-Visual Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cNvPr uses Python identifier cNvPr
    __cNvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPr'), 'cNvPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ConnectorNonVisual_httpschemas_openxmlformats_orgpresentationml2006maincNvPr', False)

    
    cNvPr = property(__cNvPr.value, __cNvPr.set, None, u'Non-Visual Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cNvCxnSpPr uses Python identifier cNvCxnSpPr
    __cNvCxnSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cNvCxnSpPr'), 'cNvCxnSpPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_ConnectorNonVisual_httpschemas_openxmlformats_orgpresentationml2006maincNvCxnSpPr', False)

    
    cNvCxnSpPr = property(__cNvCxnSpPr.value, __cNvCxnSpPr.set, None, u'Non-Visual Connector Shape Drawing Properties')


    _ElementMap = {
        __nvPr.name() : __nvPr,
        __cNvPr.name() : __cNvPr,
        __cNvCxnSpPr.name() : __cNvCxnSpPr
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_ConnectorNonVisual', CT_ConnectorNonVisual)


# Complex type CT_TLAnimateScaleBehavior with content type ELEMENT_ONLY
class CT_TLAnimateScaleBehavior (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLAnimateScaleBehavior')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}to uses Python identifier to
    __to = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'to'), 'to', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateScaleBehavior_httpschemas_openxmlformats_orgpresentationml2006mainto', False)

    
    to = property(__to.value, __to.set, None, u'To')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cBhvr uses Python identifier cBhvr
    __cBhvr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), 'cBhvr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateScaleBehavior_httpschemas_openxmlformats_orgpresentationml2006maincBhvr', False)

    
    cBhvr = property(__cBhvr.value, __cBhvr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}from uses Python identifier from_
    __from = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'from'), 'from_', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateScaleBehavior_httpschemas_openxmlformats_orgpresentationml2006mainfrom', False)

    
    from_ = property(__from.value, __from.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}by uses Python identifier by
    __by = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'by'), 'by', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateScaleBehavior_httpschemas_openxmlformats_orgpresentationml2006mainby', False)

    
    by = property(__by.value, __by.set, None, u'By')

    
    # Attribute zoomContents uses Python identifier zoomContents
    __zoomContents = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'zoomContents'), 'zoomContents', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateScaleBehavior_zoomContents', pyxb.binding.datatypes.boolean)
    
    zoomContents = property(__zoomContents.value, __zoomContents.set, None, u'Zoom Content')


    _ElementMap = {
        __to.name() : __to,
        __cBhvr.name() : __cBhvr,
        __from.name() : __from,
        __by.name() : __by
    }
    _AttributeMap = {
        __zoomContents.name() : __zoomContents
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLAnimateScaleBehavior', CT_TLAnimateScaleBehavior)


# Complex type CT_TextTabStop with content type EMPTY
class CT_TextTabStop (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextTabStop')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute algn uses Python identifier algn
    __algn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algn'), 'algn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextTabStop_algn', ST_TextTabAlignType)
    
    algn = property(__algn.value, __algn.set, None, u'Tab Alignment')

    
    # Attribute pos uses Python identifier pos
    __pos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pos'), 'pos', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextTabStop_pos', ST_Coordinate32)
    
    pos = property(__pos.value, __pos.set, None, u'Tab Position')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __algn.name() : __algn,
        __pos.name() : __pos
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextTabStop', CT_TextTabStop)


# Complex type CT_SDCategory with content type EMPTY
class CT_SDCategory (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_SDCategory')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute pri uses Python identifier pri
    __pri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pri'), 'pri', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SDCategory_pri', pyxb.binding.datatypes.unsignedInt, required=True)
    
    pri = property(__pri.value, __pri.set, None, u'Priority')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SDCategory_type', pyxb.binding.datatypes.anyURI, required=True)
    
    type = property(__type.value, __type.set, None, u'Category Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __pri.name() : __pri,
        __type.name() : __type
    }
_Namespace.addCategoryObject('typeBinding', u'CT_SDCategory', CT_SDCategory)


# Complex type CT_NumericRule with content type ELEMENT_ONLY
class CT_NumericRule (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_NumericRule')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute for uses Python identifier for_
    __for = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'for'), 'for_', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_for', ST_ConstraintRelationship, unicode_default=u'self')
    
    for_ = property(__for.value, __for.set, None, u'For')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_type', ST_ConstraintType, required=True)
    
    type = property(__type.value, __type.set, None, u'Constraint Type')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_val', pyxb.binding.datatypes.double, unicode_default=u'NaN')
    
    val = property(__val.value, __val.set, None, u'Value')

    
    # Attribute ptType uses Python identifier ptType
    __ptType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ptType'), 'ptType', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_ptType', ST_ElementType, unicode_default=u'all')
    
    ptType = property(__ptType.value, __ptType.set, None, u'Data Point Type')

    
    # Attribute fact uses Python identifier fact
    __fact = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fact'), 'fact', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_fact', pyxb.binding.datatypes.double, unicode_default=u'NaN')
    
    fact = property(__fact.value, __fact.set, None, u'Factor')

    
    # Attribute forName uses Python identifier forName
    __forName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'forName'), 'forName', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_forName', pyxb.binding.datatypes.string, unicode_default=u'')
    
    forName = property(__forName.value, __forName.set, None, u'For Name')

    
    # Attribute max uses Python identifier max
    __max = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'max'), 'max', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_max', pyxb.binding.datatypes.double, unicode_default=u'NaN')
    
    max = property(__max.value, __max.set, None, u'Max Value')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __for.name() : __for,
        __type.name() : __type,
        __val.name() : __val,
        __ptType.name() : __ptType,
        __fact.name() : __fact,
        __forName.name() : __forName,
        __max.name() : __max
    }
_Namespace.addCategoryObject('typeBinding', u'CT_NumericRule', CT_NumericRule)


# Complex type CT_TextBulletColorFollowText with content type EMPTY
class CT_TextBulletColorFollowText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBulletColorFollowText')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBulletColorFollowText', CT_TextBulletColorFollowText)


# Complex type CT_TLAnimVariantBooleanVal with content type EMPTY
class CT_TLAnimVariantBooleanVal (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLAnimVariantBooleanVal')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimVariantBooleanVal_val', pyxb.binding.datatypes.boolean, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLAnimVariantBooleanVal', CT_TLAnimVariantBooleanVal)


# Complex type CT_TableRow with content type ELEMENT_ONLY
class CT_TableRow (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableRow')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableRow_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tc uses Python identifier tc
    __tc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tc'), 'tc', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableRow_httpschemas_openxmlformats_orgdrawingml2006maintc', True)

    
    tc = property(__tc.value, __tc.set, None, u'Table Cell')

    
    # Attribute h uses Python identifier h
    __h = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'h'), 'h', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableRow_h', ST_Coordinate, required=True)
    
    h = property(__h.value, __h.set, None, u'Height')


    _ElementMap = {
        __extLst.name() : __extLst,
        __tc.name() : __tc
    }
    _AttributeMap = {
        __h.name() : __h
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableRow', CT_TableRow)


# Complex type CT_Kinsoku with content type EMPTY
class CT_Kinsoku (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_Kinsoku')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Kinsoku_lang', pyxb.binding.datatypes.string)
    
    lang = property(__lang.value, __lang.set, None, u'Language')

    
    # Attribute invalEndChars uses Python identifier invalEndChars
    __invalEndChars = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'invalEndChars'), 'invalEndChars', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Kinsoku_invalEndChars', pyxb.binding.datatypes.string, required=True)
    
    invalEndChars = property(__invalEndChars.value, __invalEndChars.set, None, u'Invalid Kinsoku End Characters')

    
    # Attribute invalStChars uses Python identifier invalStChars
    __invalStChars = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'invalStChars'), 'invalStChars', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Kinsoku_invalStChars', pyxb.binding.datatypes.string, required=True)
    
    invalStChars = property(__invalStChars.value, __invalStChars.set, None, u'Invalid Kinsoku Start Characters')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lang.name() : __lang,
        __invalEndChars.name() : __invalEndChars,
        __invalStChars.name() : __invalStChars
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_Kinsoku', CT_Kinsoku)


# Complex type CT_OutlineViewProperties with content type ELEMENT_ONLY
class CT_OutlineViewProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_OutlineViewProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OutlineViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cViewPr uses Python identifier cViewPr
    __cViewPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cViewPr'), 'cViewPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OutlineViewProperties_httpschemas_openxmlformats_orgpresentationml2006maincViewPr', False)

    
    cViewPr = property(__cViewPr.value, __cViewPr.set, None, u'Common View Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sldLst uses Python identifier sldLst
    __sldLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sldLst'), 'sldLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OutlineViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainsldLst', False)

    
    sldLst = property(__sldLst.value, __sldLst.set, None, u'List of Presentation Slides')


    _ElementMap = {
        __extLst.name() : __extLst,
        __cViewPr.name() : __cViewPr,
        __sldLst.name() : __sldLst
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_OutlineViewProperties', CT_OutlineViewProperties)


# Complex type CT_GroupTransform2D with content type ELEMENT_ONLY
class CT_GroupTransform2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GroupTransform2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}chExt uses Python identifier chExt
    __chExt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'chExt'), 'chExt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupTransform2D_httpschemas_openxmlformats_orgdrawingml2006mainchExt', False)

    
    chExt = property(__chExt.value, __chExt.set, None, u'Child Extents')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}off uses Python identifier off
    __off = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'off'), 'off', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupTransform2D_httpschemas_openxmlformats_orgdrawingml2006mainoff', False)

    
    off = property(__off.value, __off.set, None, u'Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ext uses Python identifier ext
    __ext = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ext'), 'ext', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupTransform2D_httpschemas_openxmlformats_orgdrawingml2006mainext', False)

    
    ext = property(__ext.value, __ext.set, None, u'Extents')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}chOff uses Python identifier chOff
    __chOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'chOff'), 'chOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupTransform2D_httpschemas_openxmlformats_orgdrawingml2006mainchOff', False)

    
    chOff = property(__chOff.value, __chOff.set, None, u'Child Offset')

    
    # Attribute flipV uses Python identifier flipV
    __flipV = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'flipV'), 'flipV', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupTransform2D_flipV', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    flipV = property(__flipV.value, __flipV.set, None, u'Vertical Flip')

    
    # Attribute rot uses Python identifier rot
    __rot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rot'), 'rot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupTransform2D_rot', ST_Angle, unicode_default=u'0')
    
    rot = property(__rot.value, __rot.set, None, u'Rotation')

    
    # Attribute flipH uses Python identifier flipH
    __flipH = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'flipH'), 'flipH', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupTransform2D_flipH', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    flipH = property(__flipH.value, __flipH.set, None, u'Horizontal Flip')


    _ElementMap = {
        __chExt.name() : __chExt,
        __off.name() : __off,
        __ext.name() : __ext,
        __chOff.name() : __chOff
    }
    _AttributeMap = {
        __flipV.name() : __flipV,
        __rot.name() : __rot,
        __flipH.name() : __flipH
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GroupTransform2D', CT_GroupTransform2D)


# Complex type CT_ClipboardStyleSheet with content type ELEMENT_ONLY
class CT_ClipboardStyleSheet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ClipboardStyleSheet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrMap uses Python identifier clrMap
    __clrMap = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrMap'), 'clrMap', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ClipboardStyleSheet_httpschemas_openxmlformats_orgdrawingml2006mainclrMap', False)

    
    clrMap = property(__clrMap.value, __clrMap.set, None, u'Color Map')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}themeElements uses Python identifier themeElements
    __themeElements = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'themeElements'), 'themeElements', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ClipboardStyleSheet_httpschemas_openxmlformats_orgdrawingml2006mainthemeElements', False)

    
    themeElements = property(__themeElements.value, __themeElements.set, None, None)


    _ElementMap = {
        __clrMap.name() : __clrMap,
        __themeElements.name() : __themeElements
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ClipboardStyleSheet', CT_ClipboardStyleSheet)


# Complex type CT_TextAutonumberBullet with content type EMPTY
class CT_TextAutonumberBullet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextAutonumberBullet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute startAt uses Python identifier startAt
    __startAt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'startAt'), 'startAt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextAutonumberBullet_startAt', ST_TextBulletStartAtNum, unicode_default=u'1')
    
    startAt = property(__startAt.value, __startAt.set, None, u'Start Numbering At')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextAutonumberBullet_type', ST_TextAutonumberScheme, required=True)
    
    type = property(__type.value, __type.set, None, u'Bullet Autonumbering Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __startAt.name() : __startAt,
        __type.name() : __type
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextAutonumberBullet', CT_TextAutonumberBullet)


# Complex type CT_AdjustHandleList with content type ELEMENT_ONLY
class CT_AdjustHandleList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AdjustHandleList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ahPolar uses Python identifier ahPolar
    __ahPolar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ahPolar'), 'ahPolar', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AdjustHandleList_httpschemas_openxmlformats_orgdrawingml2006mainahPolar', True)

    
    ahPolar = property(__ahPolar.value, __ahPolar.set, None, u'Polar Adjust Handle')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ahXY uses Python identifier ahXY
    __ahXY = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ahXY'), 'ahXY', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AdjustHandleList_httpschemas_openxmlformats_orgdrawingml2006mainahXY', True)

    
    ahXY = property(__ahXY.value, __ahXY.set, None, u'XY Adjust Handle')


    _ElementMap = {
        __ahPolar.name() : __ahPolar,
        __ahXY.name() : __ahXY
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AdjustHandleList', CT_AdjustHandleList)


# Complex type CT_Placeholder with content type ELEMENT_ONLY
class CT_Placeholder (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_Placeholder')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Placeholder_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute hasCustomPrompt uses Python identifier hasCustomPrompt
    __hasCustomPrompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hasCustomPrompt'), 'hasCustomPrompt', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Placeholder_hasCustomPrompt', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hasCustomPrompt = property(__hasCustomPrompt.value, __hasCustomPrompt.set, None, u'Placeholder has custom prompt')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Placeholder_type', ST_PlaceholderType, unicode_default=u'obj')
    
    type = property(__type.value, __type.set, None, u'Placeholder Type')

    
    # Attribute orient uses Python identifier orient
    __orient = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'orient'), 'orient', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Placeholder_orient', ST_Direction_, unicode_default=u'horz')
    
    orient = property(__orient.value, __orient.set, None, u'Placeholder Orientation')

    
    # Attribute idx uses Python identifier idx
    __idx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'idx'), 'idx', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Placeholder_idx', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    idx = property(__idx.value, __idx.set, None, u'Placeholder Index')

    
    # Attribute sz uses Python identifier sz
    __sz = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sz'), 'sz', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Placeholder_sz', ST_PlaceholderSize, unicode_default=u'full')
    
    sz = property(__sz.value, __sz.set, None, u'Placeholder Size')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __hasCustomPrompt.name() : __hasCustomPrompt,
        __type.name() : __type,
        __orient.name() : __orient,
        __idx.name() : __idx,
        __sz.name() : __sz
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_Placeholder', CT_Placeholder)


# Complex type CT_TLBuildDiagram with content type EMPTY
class CT_TLBuildDiagram (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLBuildDiagram')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute bld uses Python identifier bld
    __bld = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bld'), 'bld', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLBuildDiagram_bld', ST_TLDiagramBuildType, unicode_default=u'whole')
    
    bld = property(__bld.value, __bld.set, None, u'Diagram Build Types')

    
    # Attribute uiExpand uses Python identifier uiExpand
    __uiExpand = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uiExpand'), 'uiExpand', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLBuildDiagram_uiExpand', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    uiExpand = property(__uiExpand.value, __uiExpand.set, None, u'Expand UI')

    
    # Attribute spid uses Python identifier spid
    __spid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spid'), 'spid', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLBuildDiagram_spid', ST_ShapeID, required=True)
    
    spid = property(__spid.value, __spid.set, None, u'Shape ID')

    
    # Attribute grpId uses Python identifier grpId
    __grpId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'grpId'), 'grpId', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLBuildDiagram_grpId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    grpId = property(__grpId.value, __grpId.set, None, u'Group ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __bld.name() : __bld,
        __uiExpand.name() : __uiExpand,
        __spid.name() : __spid,
        __grpId.name() : __grpId
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLBuildDiagram', CT_TLBuildDiagram)


# Complex type CT_SlideTransition with content type ELEMENT_ONLY
class CT_SlideTransition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideTransition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}checker uses Python identifier checker
    __checker = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'checker'), 'checker', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainchecker', False)

    
    checker = property(__checker.value, __checker.set, None, u'Checker Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}blinds uses Python identifier blinds
    __blinds = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'blinds'), 'blinds', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainblinds', False)

    
    blinds = property(__blinds.value, __blinds.set, None, u'Blinds Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}dissolve uses Python identifier dissolve
    __dissolve = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'dissolve'), 'dissolve', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006maindissolve', False)

    
    dissolve = property(__dissolve.value, __dissolve.set, None, u'Dissolve Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}comb uses Python identifier comb
    __comb = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'comb'), 'comb', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006maincomb', False)

    
    comb = property(__comb.value, __comb.set, None, u'Comb Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}strips uses Python identifier strips
    __strips = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'strips'), 'strips', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainstrips', False)

    
    strips = property(__strips.value, __strips.set, None, u'Strips Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}wedge uses Python identifier wedge
    __wedge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'wedge'), 'wedge', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainwedge', False)

    
    wedge = property(__wedge.value, __wedge.set, None, u'Wedge Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}push uses Python identifier push
    __push = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'push'), 'push', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainpush', False)

    
    push = property(__push.value, __push.set, None, u'Push Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}random uses Python identifier random
    __random = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'random'), 'random', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainrandom', False)

    
    random = property(__random.value, __random.set, None, u'Random Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}diamond uses Python identifier diamond
    __diamond = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'diamond'), 'diamond', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006maindiamond', False)

    
    diamond = property(__diamond.value, __diamond.set, None, u'Diamond Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}fade uses Python identifier fade
    __fade = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'fade'), 'fade', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainfade', False)

    
    fade = property(__fade.value, __fade.set, None, u'Fade Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}newsflash uses Python identifier newsflash
    __newsflash = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'newsflash'), 'newsflash', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainnewsflash', False)

    
    newsflash = property(__newsflash.value, __newsflash.set, None, u'Newsflash Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}split uses Python identifier split
    __split = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'split'), 'split', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainsplit', False)

    
    split = property(__split.value, __split.set, None, u'Split Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}wheel uses Python identifier wheel
    __wheel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'wheel'), 'wheel', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainwheel', False)

    
    wheel = property(__wheel.value, __wheel.set, None, u'Wheel Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}randomBar uses Python identifier randomBar
    __randomBar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'randomBar'), 'randomBar', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainrandomBar', False)

    
    randomBar = property(__randomBar.value, __randomBar.set, None, u'Random Bar Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}pull uses Python identifier pull
    __pull = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'pull'), 'pull', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainpull', False)

    
    pull = property(__pull.value, __pull.set, None, u'Pull Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}wipe uses Python identifier wipe
    __wipe = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'wipe'), 'wipe', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainwipe', False)

    
    wipe = property(__wipe.value, __wipe.set, None, u'Wipe Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}plus uses Python identifier plus
    __plus = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'plus'), 'plus', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainplus', False)

    
    plus = property(__plus.value, __plus.set, None, u'Plus Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}zoom uses Python identifier zoom
    __zoom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'zoom'), 'zoom', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainzoom', False)

    
    zoom = property(__zoom.value, __zoom.set, None, u'Zoom Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sndAc uses Python identifier sndAc
    __sndAc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sndAc'), 'sndAc', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainsndAc', False)

    
    sndAc = property(__sndAc.value, __sndAc.set, None, u'Sound Action')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cover uses Python identifier cover
    __cover = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cover'), 'cover', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006maincover', False)

    
    cover = property(__cover.value, __cover.set, None, u'Cover Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cut uses Python identifier cut
    __cut = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cut'), 'cut', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006maincut', False)

    
    cut = property(__cut.value, __cut.set, None, u'Cut Slide Transition')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}circle uses Python identifier circle
    __circle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'circle'), 'circle', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_httpschemas_openxmlformats_orgpresentationml2006maincircle', False)

    
    circle = property(__circle.value, __circle.set, None, u'Circle Slide Transition')

    
    # Attribute advClick uses Python identifier advClick
    __advClick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'advClick'), 'advClick', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_advClick', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    advClick = property(__advClick.value, __advClick.set, None, u'Advance on Click')

    
    # Attribute spd uses Python identifier spd
    __spd = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spd'), 'spd', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_spd', ST_TransitionSpeed, unicode_default=u'fast')
    
    spd = property(__spd.value, __spd.set, None, u'Transition Speed')

    
    # Attribute advTm uses Python identifier advTm
    __advTm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'advTm'), 'advTm', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideTransition_advTm', pyxb.binding.datatypes.unsignedInt)
    
    advTm = property(__advTm.value, __advTm.set, None, u'Advance after time')


    _ElementMap = {
        __checker.name() : __checker,
        __blinds.name() : __blinds,
        __dissolve.name() : __dissolve,
        __comb.name() : __comb,
        __strips.name() : __strips,
        __wedge.name() : __wedge,
        __push.name() : __push,
        __random.name() : __random,
        __diamond.name() : __diamond,
        __fade.name() : __fade,
        __newsflash.name() : __newsflash,
        __split.name() : __split,
        __wheel.name() : __wheel,
        __randomBar.name() : __randomBar,
        __pull.name() : __pull,
        __wipe.name() : __wipe,
        __plus.name() : __plus,
        __zoom.name() : __zoom,
        __sndAc.name() : __sndAc,
        __extLst.name() : __extLst,
        __cover.name() : __cover,
        __cut.name() : __cut,
        __circle.name() : __circle
    }
    _AttributeMap = {
        __advClick.name() : __advClick,
        __spd.name() : __spd,
        __advTm.name() : __advTm
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideTransition', CT_SlideTransition)


# Complex type CT_OutlineViewSlideEntry with content type EMPTY
class CT_OutlineViewSlideEntry (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_OutlineViewSlideEntry')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OutlineViewSlideEntry_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute collapse uses Python identifier collapse
    __collapse = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'collapse'), 'collapse', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_OutlineViewSlideEntry_collapse', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    collapse = property(__collapse.value, __collapse.set, None, u'Collapsed')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id,
        __collapse.name() : __collapse
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_OutlineViewSlideEntry', CT_OutlineViewSlideEntry)


# Complex type CT_GraphicalObjectFrame with content type ELEMENT_ONLY
class CT_GraphicalObjectFrame (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_GraphicalObjectFrame')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GraphicalObjectFrame_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Extension List with Modification Flag')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}nvGraphicFramePr uses Python identifier nvGraphicFramePr
    __nvGraphicFramePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'nvGraphicFramePr'), 'nvGraphicFramePr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GraphicalObjectFrame_httpschemas_openxmlformats_orgpresentationml2006mainnvGraphicFramePr', False)

    
    nvGraphicFramePr = property(__nvGraphicFramePr.value, __nvGraphicFramePr.set, None, u'Non-Visual Properties for a Graphic Frame')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}graphic uses Python identifier graphic
    __graphic = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'graphic'), 'graphic', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GraphicalObjectFrame_httpschemas_openxmlformats_orgdrawingml2006maingraphic', False)

    
    graphic = property(__graphic.value, __graphic.set, None, u'Graphic Object')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}xfrm uses Python identifier xfrm
    __xfrm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'xfrm'), 'xfrm', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_GraphicalObjectFrame_httpschemas_openxmlformats_orgpresentationml2006mainxfrm', False)

    
    xfrm = property(__xfrm.value, __xfrm.set, None, u'2D Transform for Graphic Frame')


    _ElementMap = {
        __extLst.name() : __extLst,
        __nvGraphicFramePr.name() : __nvGraphicFramePr,
        __graphic.name() : __graphic,
        __xfrm.name() : __xfrm
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_GraphicalObjectFrame', CT_GraphicalObjectFrame)


# Complex type CT_StyleMatrix with content type ELEMENT_ONLY
class CT_StyleMatrix (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_StyleMatrix')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bgFillStyleLst uses Python identifier bgFillStyleLst
    __bgFillStyleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bgFillStyleLst'), 'bgFillStyleLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrix_httpschemas_openxmlformats_orgdrawingml2006mainbgFillStyleLst', False)

    
    bgFillStyleLst = property(__bgFillStyleLst.value, __bgFillStyleLst.set, None, u'Background Fill Style List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillStyleLst uses Python identifier fillStyleLst
    __fillStyleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillStyleLst'), 'fillStyleLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrix_httpschemas_openxmlformats_orgdrawingml2006mainfillStyleLst', False)

    
    fillStyleLst = property(__fillStyleLst.value, __fillStyleLst.set, None, u'Fill Style List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnStyleLst uses Python identifier lnStyleLst
    __lnStyleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnStyleLst'), 'lnStyleLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrix_httpschemas_openxmlformats_orgdrawingml2006mainlnStyleLst', False)

    
    lnStyleLst = property(__lnStyleLst.value, __lnStyleLst.set, None, u'Line Style List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectStyleLst uses Python identifier effectStyleLst
    __effectStyleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectStyleLst'), 'effectStyleLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrix_httpschemas_openxmlformats_orgdrawingml2006maineffectStyleLst', False)

    
    effectStyleLst = property(__effectStyleLst.value, __effectStyleLst.set, None, u'Effect Style List')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrix_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __bgFillStyleLst.name() : __bgFillStyleLst,
        __fillStyleLst.name() : __fillStyleLst,
        __lnStyleLst.name() : __lnStyleLst,
        __effectStyleLst.name() : __effectStyleLst
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_StyleMatrix', CT_StyleMatrix)


# Complex type CT_SlideIdList with content type ELEMENT_ONLY
class CT_SlideIdList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideIdList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sldId uses Python identifier sldId
    __sldId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sldId'), 'sldId', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideIdList_httpschemas_openxmlformats_orgpresentationml2006mainsldId', True)

    
    sldId = property(__sldId.value, __sldId.set, None, u'Slide ID')


    _ElementMap = {
        __sldId.name() : __sldId
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideIdList', CT_SlideIdList)


# Complex type CT_CustomerData with content type EMPTY
class CT_CustomerData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_CustomerData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CustomerData_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_CustomerData', CT_CustomerData)


# Complex type CT_TLTimeNodeSequence with content type ELEMENT_ONLY
class CT_TLTimeNodeSequence (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLTimeNodeSequence')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}nextCondLst uses Python identifier nextCondLst
    __nextCondLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'nextCondLst'), 'nextCondLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeNodeSequence_httpschemas_openxmlformats_orgpresentationml2006mainnextCondLst', False)

    
    nextCondLst = property(__nextCondLst.value, __nextCondLst.set, None, u'Next Conditions List')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cTn uses Python identifier cTn
    __cTn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cTn'), 'cTn', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeNodeSequence_httpschemas_openxmlformats_orgpresentationml2006maincTn', False)

    
    cTn = property(__cTn.value, __cTn.set, None, u'Common TimeNode Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}prevCondLst uses Python identifier prevCondLst
    __prevCondLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'prevCondLst'), 'prevCondLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeNodeSequence_httpschemas_openxmlformats_orgpresentationml2006mainprevCondLst', False)

    
    prevCondLst = property(__prevCondLst.value, __prevCondLst.set, None, u'Previous Conditions List')

    
    # Attribute concurrent uses Python identifier concurrent
    __concurrent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'concurrent'), 'concurrent', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeNodeSequence_concurrent', pyxb.binding.datatypes.boolean)
    
    concurrent = property(__concurrent.value, __concurrent.set, None, u'Concurrent')

    
    # Attribute nextAc uses Python identifier nextAc
    __nextAc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nextAc'), 'nextAc', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeNodeSequence_nextAc', ST_TLNextActionType)
    
    nextAc = property(__nextAc.value, __nextAc.set, None, u'Next Action')

    
    # Attribute prevAc uses Python identifier prevAc
    __prevAc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prevAc'), 'prevAc', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeNodeSequence_prevAc', ST_TLPreviousActionType)
    
    prevAc = property(__prevAc.value, __prevAc.set, None, u'Previous Action')


    _ElementMap = {
        __nextCondLst.name() : __nextCondLst,
        __cTn.name() : __cTn,
        __prevCondLst.name() : __prevCondLst
    }
    _AttributeMap = {
        __concurrent.name() : __concurrent,
        __nextAc.name() : __nextAc,
        __prevAc.name() : __prevAc
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLTimeNodeSequence', CT_TLTimeNodeSequence)


# Complex type CT_TransformEffect with content type EMPTY
class CT_TransformEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TransformEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute tx uses Python identifier tx
    __tx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tx'), 'tx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TransformEffect_tx', ST_Coordinate, unicode_default=u'0')
    
    tx = property(__tx.value, __tx.set, None, u'Horizontal Shift')

    
    # Attribute sx uses Python identifier sx
    __sx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sx'), 'sx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TransformEffect_sx', ST_Percentage, unicode_default=u'100%')
    
    sx = property(__sx.value, __sx.set, None, u'Horizontal Ratio')

    
    # Attribute ty uses Python identifier ty
    __ty = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ty'), 'ty', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TransformEffect_ty', ST_Coordinate, unicode_default=u'0')
    
    ty = property(__ty.value, __ty.set, None, u'Vertical Shift')

    
    # Attribute sy uses Python identifier sy
    __sy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sy'), 'sy', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TransformEffect_sy', ST_Percentage, unicode_default=u'100%')
    
    sy = property(__sy.value, __sy.set, None, u'Vertical Ratio')

    
    # Attribute kx uses Python identifier kx
    __kx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'kx'), 'kx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TransformEffect_kx', ST_FixedAngle, unicode_default=u'0')
    
    kx = property(__kx.value, __kx.set, None, u'Horizontal Skew')

    
    # Attribute ky uses Python identifier ky
    __ky = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ky'), 'ky', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TransformEffect_ky', ST_FixedAngle, unicode_default=u'0')
    
    ky = property(__ky.value, __ky.set, None, u'Vertical Skew')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __tx.name() : __tx,
        __sx.name() : __sx,
        __ty.name() : __ty,
        __sy.name() : __sy,
        __kx.name() : __kx,
        __ky.name() : __ky
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TransformEffect', CT_TransformEffect)


# Complex type CT_SlideLayoutIdList with content type ELEMENT_ONLY
class CT_SlideLayoutIdList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideLayoutIdList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sldLayoutId uses Python identifier sldLayoutId
    __sldLayoutId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sldLayoutId'), 'sldLayoutId', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideLayoutIdList_httpschemas_openxmlformats_orgpresentationml2006mainsldLayoutId', True)

    
    sldLayoutId = property(__sldLayoutId.value, __sldLayoutId.set, None, u'Slide Layout Id')


    _ElementMap = {
        __sldLayoutId.name() : __sldLayoutId
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideLayoutIdList', CT_SlideLayoutIdList)


# Complex type CT_GeomRect with content type EMPTY
class CT_GeomRect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GeomRect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GeomRect_r', ST_AdjCoordinate, required=True)
    
    r = property(__r.value, __r.set, None, u'Right')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GeomRect_b', ST_AdjCoordinate, required=True)
    
    b = property(__b.value, __b.set, None, u'Bottom Position')

    
    # Attribute l uses Python identifier l
    __l = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'l'), 'l', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GeomRect_l', ST_AdjCoordinate, required=True)
    
    l = property(__l.value, __l.set, None, u'Left')

    
    # Attribute t uses Python identifier t
    __t = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u't'), 't', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GeomRect_t', ST_AdjCoordinate, required=True)
    
    t = property(__t.value, __t.set, None, u'Top')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __r.name() : __r,
        __b.name() : __b,
        __l.name() : __l,
        __t.name() : __t
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GeomRect', CT_GeomRect)


# Complex type CT_Camera with content type ELEMENT_ONLY
class CT_Camera (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Camera')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}rot uses Python identifier rot
    __rot = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'rot'), 'rot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Camera_httpschemas_openxmlformats_orgdrawingml2006mainrot', False)

    
    rot = property(__rot.value, __rot.set, None, u'Rotation')

    
    # Attribute fov uses Python identifier fov
    __fov = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fov'), 'fov', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Camera_fov', ST_FOVAngle)
    
    fov = property(__fov.value, __fov.set, None, u'Field of View')

    
    # Attribute zoom uses Python identifier zoom
    __zoom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'zoom'), 'zoom', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Camera_zoom', ST_PositivePercentage, unicode_default=u'100%')
    
    zoom = property(__zoom.value, __zoom.set, None, u'Zoom')

    
    # Attribute prst uses Python identifier prst
    __prst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prst'), 'prst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Camera_prst', ST_PresetCameraType, required=True)
    
    prst = property(__prst.value, __prst.set, None, u'Preset Camera Type')


    _ElementMap = {
        __rot.name() : __rot
    }
    _AttributeMap = {
        __fov.name() : __fov,
        __zoom.name() : __zoom,
        __prst.name() : __prst
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Camera', CT_Camera)


# Complex type CT_BackgroundProperties with content type ELEMENT_ONLY
class CT_BackgroundProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_BackgroundProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_BackgroundProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_BackgroundProperties_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_BackgroundProperties_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_BackgroundProperties_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_BackgroundProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_BackgroundProperties_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_BackgroundProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_BackgroundProperties_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_BackgroundProperties_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Attribute shadeToTitle uses Python identifier shadeToTitle
    __shadeToTitle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'shadeToTitle'), 'shadeToTitle', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_BackgroundProperties_shadeToTitle', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    shadeToTitle = property(__shadeToTitle.value, __shadeToTitle.set, None, u'Shade to Title')


    _ElementMap = {
        __noFill.name() : __noFill,
        __grpFill.name() : __grpFill,
        __gradFill.name() : __gradFill,
        __solidFill.name() : __solidFill,
        __effectLst.name() : __effectLst,
        __extLst.name() : __extLst,
        __effectDag.name() : __effectDag,
        __blipFill.name() : __blipFill,
        __pattFill.name() : __pattFill
    }
    _AttributeMap = {
        __shadeToTitle.name() : __shadeToTitle
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_BackgroundProperties', CT_BackgroundProperties)


# Complex type CT_SlideRelationshipList with content type ELEMENT_ONLY
class CT_SlideRelationshipList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideRelationshipList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sld uses Python identifier sld
    __sld = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sld'), 'sld', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideRelationshipList_httpschemas_openxmlformats_orgpresentationml2006mainsld', True)

    
    sld = property(__sld.value, __sld.set, None, u'Presentation Slide')


    _ElementMap = {
        __sld.name() : __sld
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideRelationshipList', CT_SlideRelationshipList)


# Complex type CT_RegularTextRun with content type ELEMENT_ONLY
class CT_RegularTextRun (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_RegularTextRun')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}t uses Python identifier t
    __t = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u't'), 't', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RegularTextRun_httpschemas_openxmlformats_orgdrawingml2006maint', False)

    
    t = property(__t.value, __t.set, None, u'Text String')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RegularTextRun_httpschemas_openxmlformats_orgdrawingml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Text Character Properties')


    _ElementMap = {
        __t.name() : __t,
        __rPr.name() : __rPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_RegularTextRun', CT_RegularTextRun)


# Complex type CT_Otherwise with content type ELEMENT_ONLY
class CT_Otherwise (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Otherwise')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}alg uses Python identifier alg
    __alg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'alg'), 'alg', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramalg', True)

    
    alg = property(__alg.value, __alg.set, None, u'Algorithm')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}choose uses Python identifier choose
    __choose = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'choose'), 'choose', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramchoose', True)

    
    choose = property(__choose.value, __choose.set, None, u'Choose Element')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}layoutNode uses Python identifier layoutNode
    __layoutNode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), 'layoutNode', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramlayoutNode', True)

    
    layoutNode = property(__layoutNode.value, __layoutNode.set, None, u'Layout Node')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}shape uses Python identifier shape
    __shape = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'shape'), 'shape', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramshape', True)

    
    shape = property(__shape.value, __shape.set, None, u'Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}presOf uses Python identifier presOf
    __presOf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), 'presOf', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagrampresOf', True)

    
    presOf = property(__presOf.value, __presOf.set, None, u'Presentation Of')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}forEach uses Python identifier forEach
    __forEach = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), 'forEach', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramforEach', True)

    
    forEach = property(__forEach.value, __forEach.set, None, u'For Each')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', True)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Extension List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}constrLst uses Python identifier constrLst
    __constrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), 'constrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramconstrLst', True)

    
    constrLst = property(__constrLst.value, __constrLst.set, None, u'Constraint List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}ruleLst uses Python identifier ruleLst
    __ruleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), 'ruleLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramruleLst', True)

    
    ruleLst = property(__ruleLst.value, __ruleLst.set, None, u'Rule List')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __alg.name() : __alg,
        __choose.name() : __choose,
        __layoutNode.name() : __layoutNode,
        __shape.name() : __shape,
        __presOf.name() : __presOf,
        __forEach.name() : __forEach,
        __extLst.name() : __extLst,
        __constrLst.name() : __constrLst,
        __ruleLst.name() : __ruleLst
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Otherwise', CT_Otherwise)


# Complex type CT_TLByAnimateColorTransform with content type ELEMENT_ONLY
class CT_TLByAnimateColorTransform (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLByAnimateColorTransform')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}rgb uses Python identifier rgb
    __rgb = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'rgb'), 'rgb', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLByAnimateColorTransform_httpschemas_openxmlformats_orgpresentationml2006mainrgb', False)

    
    rgb = property(__rgb.value, __rgb.set, None, u'RGB')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}hsl uses Python identifier hsl
    __hsl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'hsl'), 'hsl', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLByAnimateColorTransform_httpschemas_openxmlformats_orgpresentationml2006mainhsl', False)

    
    hsl = property(__hsl.value, __hsl.set, None, u'HSL')


    _ElementMap = {
        __rgb.name() : __rgb,
        __hsl.name() : __hsl
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLByAnimateColorTransform', CT_TLByAnimateColorTransform)


# Complex type CT_TextSpacingPoint with content type EMPTY
class CT_TextSpacingPoint (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextSpacingPoint')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextSpacingPoint_val', ST_TextSpacingPoint, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextSpacingPoint', CT_TextSpacingPoint)


# Complex type CT_TLMediaNodeAudio with content type ELEMENT_ONLY
class CT_TLMediaNodeAudio (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLMediaNodeAudio')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cMediaNode uses Python identifier cMediaNode
    __cMediaNode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cMediaNode'), 'cMediaNode', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLMediaNodeAudio_httpschemas_openxmlformats_orgpresentationml2006maincMediaNode', False)

    
    cMediaNode = property(__cMediaNode.value, __cMediaNode.set, None, u'Common Media Node Properties')

    
    # Attribute isNarration uses Python identifier isNarration
    __isNarration = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'isNarration'), 'isNarration', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLMediaNodeAudio_isNarration', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    isNarration = property(__isNarration.value, __isNarration.set, None, u'Is Narration')


    _ElementMap = {
        __cMediaNode.name() : __cMediaNode
    }
    _AttributeMap = {
        __isNarration.name() : __isNarration
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLMediaNodeAudio', CT_TLMediaNodeAudio)


# Complex type CT_DashStop with content type EMPTY
class CT_DashStop (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_DashStop')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute sp uses Python identifier sp
    __sp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sp'), 'sp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DashStop_sp', ST_PositivePercentage, required=True)
    
    sp = property(__sp.value, __sp.set, None, u'Space Length')

    
    # Attribute d uses Python identifier d
    __d = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'd'), 'd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DashStop_d', ST_PositivePercentage, required=True)
    
    d = property(__d.value, __d.set, None, u'Dash Length')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __sp.name() : __sp,
        __d.name() : __d
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_DashStop', CT_DashStop)


# Complex type CT_CommentList with content type ELEMENT_ONLY
class CT_CommentList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_CommentList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cm uses Python identifier cm
    __cm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cm'), 'cm', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommentList_httpschemas_openxmlformats_orgpresentationml2006maincm', True)

    
    cm = property(__cm.value, __cm.set, None, u'Comment')


    _ElementMap = {
        __cm.name() : __cm
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_CommentList', CT_CommentList)


# Complex type CT_TagsData with content type EMPTY
class CT_TagsData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TagsData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TagsData_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TagsData', CT_TagsData)


# Complex type CT_ChildPref with content type EMPTY
class CT_ChildPref (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ChildPref')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ChildPref_val', ST_NodeCount, unicode_default=u'-1')
    
    val = property(__val.value, __val.set, None, u'Preferred Number of CHildren Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ChildPref', CT_ChildPref)


# Complex type CT_HandoutMaster with content type ELEMENT_ONLY
class CT_HandoutMaster (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_HandoutMaster')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HandoutMaster_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cSld uses Python identifier cSld
    __cSld = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cSld'), 'cSld', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HandoutMaster_httpschemas_openxmlformats_orgpresentationml2006maincSld', False)

    
    cSld = property(__cSld.value, __cSld.set, None, u'Common slide data for handout master')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}clrMap uses Python identifier clrMap
    __clrMap = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'clrMap'), 'clrMap', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HandoutMaster_httpschemas_openxmlformats_orgpresentationml2006mainclrMap', False)

    
    clrMap = property(__clrMap.value, __clrMap.set, None, u'Color Scheme Map')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}hf uses Python identifier hf
    __hf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'hf'), 'hf', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_HandoutMaster_httpschemas_openxmlformats_orgpresentationml2006mainhf', False)

    
    hf = property(__hf.value, __hf.set, None, u'Header/Footer information for a handout master')


    _ElementMap = {
        __extLst.name() : __extLst,
        __cSld.name() : __cSld,
        __clrMap.name() : __clrMap,
        __hf.name() : __hf
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_HandoutMaster', CT_HandoutMaster)


# Complex type CT_TLAnimateRotationBehavior with content type ELEMENT_ONLY
class CT_TLAnimateRotationBehavior (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLAnimateRotationBehavior')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cBhvr uses Python identifier cBhvr
    __cBhvr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), 'cBhvr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateRotationBehavior_httpschemas_openxmlformats_orgpresentationml2006maincBhvr', False)

    
    cBhvr = property(__cBhvr.value, __cBhvr.set, None, None)

    
    # Attribute to uses Python identifier to
    __to = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'to'), 'to', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateRotationBehavior_to', ST_Angle)
    
    to = property(__to.value, __to.set, None, u'To')

    
    # Attribute from uses Python identifier from_
    __from = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'from'), 'from_', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateRotationBehavior_from', ST_Angle)
    
    from_ = property(__from.value, __from.set, None, u'From')

    
    # Attribute by uses Python identifier by
    __by = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'by'), 'by', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateRotationBehavior_by', ST_Angle)
    
    by = property(__by.value, __by.set, None, u'By')


    _ElementMap = {
        __cBhvr.name() : __cBhvr
    }
    _AttributeMap = {
        __to.name() : __to,
        __from.name() : __from,
        __by.name() : __by
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLAnimateRotationBehavior', CT_TLAnimateRotationBehavior)


# Complex type CT_TLTimeAnimateValueList with content type ELEMENT_ONLY
class CT_TLTimeAnimateValueList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLTimeAnimateValueList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}tav uses Python identifier tav
    __tav = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'tav'), 'tav', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLTimeAnimateValueList_httpschemas_openxmlformats_orgpresentationml2006maintav', True)

    
    tav = property(__tav.value, __tav.set, None, u'Time Animate Value')


    _ElementMap = {
        __tav.name() : __tav
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLTimeAnimateValueList', CT_TLTimeAnimateValueList)


# Complex type CT_GradientStop with content type ELEMENT_ONLY
class CT_GradientStop (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GradientStop')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStop_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStop_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStop_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStop_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStop_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStop_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Attribute pos uses Python identifier pos
    __pos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pos'), 'pos', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStop_pos', ST_PositiveFixedPercentage, required=True)
    
    pos = property(__pos.value, __pos.set, None, u'Position')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __hslClr.name() : __hslClr,
        __sysClr.name() : __sysClr,
        __scrgbClr.name() : __scrgbClr,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr
    }
    _AttributeMap = {
        __pos.name() : __pos
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GradientStop', CT_GradientStop)


# Complex type CT_EffectStyleList with content type ELEMENT_ONLY
class CT_EffectStyleList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EffectStyleList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectStyle uses Python identifier effectStyle
    __effectStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectStyle'), 'effectStyle', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectStyleList_httpschemas_openxmlformats_orgdrawingml2006maineffectStyle', True)

    
    effectStyle = property(__effectStyle.value, __effectStyle.set, None, u'Effect Style')


    _ElementMap = {
        __effectStyle.name() : __effectStyle
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EffectStyleList', CT_EffectStyleList)


# Complex type CT_TLSubShapeId with content type EMPTY
class CT_TLSubShapeId (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLSubShapeId')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute spid uses Python identifier spid
    __spid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spid'), 'spid', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLSubShapeId_spid', ST_ShapeID, required=True)
    
    spid = property(__spid.value, __spid.set, None, u'Shape ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __spid.name() : __spid
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLSubShapeId', CT_TLSubShapeId)


# Complex type CT_AnimationChartElement with content type EMPTY
class CT_AnimationChartElement (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AnimationChartElement')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute seriesIdx uses Python identifier seriesIdx
    __seriesIdx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'seriesIdx'), 'seriesIdx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationChartElement_seriesIdx', pyxb.binding.datatypes.int, unicode_default=u'-1')
    
    seriesIdx = property(__seriesIdx.value, __seriesIdx.set, None, u'Series Index')

    
    # Attribute bldStep uses Python identifier bldStep
    __bldStep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bldStep'), 'bldStep', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationChartElement_bldStep', ST_ChartBuildStep, required=True)
    
    bldStep = property(__bldStep.value, __bldStep.set, None, u'Animation Build Step')

    
    # Attribute categoryIdx uses Python identifier categoryIdx
    __categoryIdx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'categoryIdx'), 'categoryIdx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationChartElement_categoryIdx', pyxb.binding.datatypes.int, unicode_default=u'-1')
    
    categoryIdx = property(__categoryIdx.value, __categoryIdx.set, None, u'Category Index')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __seriesIdx.name() : __seriesIdx,
        __bldStep.name() : __bldStep,
        __categoryIdx.name() : __categoryIdx
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AnimationChartElement', CT_AnimationChartElement)


# Complex type CT_PresetGeometry2D with content type ELEMENT_ONLY
class CT_PresetGeometry2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PresetGeometry2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}avLst uses Python identifier avLst
    __avLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst'), 'avLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetGeometry2D_httpschemas_openxmlformats_orgdrawingml2006mainavLst', False)

    
    avLst = property(__avLst.value, __avLst.set, None, u'List of Shape Adjust Values')

    
    # Attribute prst uses Python identifier prst
    __prst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prst'), 'prst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetGeometry2D_prst', ST_ShapeType, required=True)
    
    prst = property(__prst.value, __prst.set, None, u'Preset Shape')


    _ElementMap = {
        __avLst.name() : __avLst
    }
    _AttributeMap = {
        __prst.name() : __prst
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PresetGeometry2D', CT_PresetGeometry2D)


# Complex type CT_BackgroundFillStyleList with content type ELEMENT_ONLY
class CT_BackgroundFillStyleList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BackgroundFillStyleList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', True)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', True)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFillStyleList_httpschemas_openxmlformats_orgdrawingml2006maingradFill', True)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', True)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFillStyleList_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', True)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', True)

    
    noFill = property(__noFill.value, __noFill.set, None, None)


    _ElementMap = {
        __solidFill.name() : __solidFill,
        __blipFill.name() : __blipFill,
        __gradFill.name() : __gradFill,
        __pattFill.name() : __pattFill,
        __grpFill.name() : __grpFill,
        __noFill.name() : __noFill
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BackgroundFillStyleList', CT_BackgroundFillStyleList)


# Complex type CT_SlideViewProperties with content type ELEMENT_ONLY
class CT_SlideViewProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideViewProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cSldViewPr uses Python identifier cSldViewPr
    __cSldViewPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cSldViewPr'), 'cSldViewPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideViewProperties_httpschemas_openxmlformats_orgpresentationml2006maincSldViewPr', False)

    
    cSldViewPr = property(__cSldViewPr.value, __cSldViewPr.set, None, None)


    _ElementMap = {
        __extLst.name() : __extLst,
        __cSldViewPr.name() : __cSldViewPr
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideViewProperties', CT_SlideViewProperties)


# Complex type CT_Path2DMoveTo with content type ELEMENT_ONLY
class CT_Path2DMoveTo (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2DMoveTo')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pt uses Python identifier pt
    __pt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), 'pt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DMoveTo_httpschemas_openxmlformats_orgdrawingml2006mainpt', False)

    
    pt = property(__pt.value, __pt.set, None, u'Move end point')


    _ElementMap = {
        __pt.name() : __pt
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2DMoveTo', CT_Path2DMoveTo)


# Complex type CT_Rel with content type EMPTY
class CT_Rel (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_Rel')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_Rel_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_Rel', CT_Rel)


# Complex type CT_SmartTags with content type EMPTY
class CT_SmartTags (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SmartTags')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SmartTags_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SmartTags', CT_SmartTags)


# Complex type CT_ConnectionSite with content type ELEMENT_ONLY
class CT_ConnectionSite (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ConnectionSite')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pos'), 'pos', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectionSite_httpschemas_openxmlformats_orgdrawingml2006mainpos', False)

    
    pos = property(__pos.value, __pos.set, None, u'Position')

    
    # Attribute ang uses Python identifier ang
    __ang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ang'), 'ang', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectionSite_ang', ST_AdjAngle, required=True)
    
    ang = property(__ang.value, __ang.set, None, u'Connection Site Angle')


    _ElementMap = {
        __pos.name() : __pos
    }
    _AttributeMap = {
        __ang.name() : __ang
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ConnectionSite', CT_ConnectionSite)


# Complex type CT_TLAnimateColorBehavior with content type ELEMENT_ONLY
class CT_TLAnimateColorBehavior (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLAnimateColorBehavior')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}to uses Python identifier to
    __to = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'to'), 'to', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateColorBehavior_httpschemas_openxmlformats_orgpresentationml2006mainto', False)

    
    to = property(__to.value, __to.set, None, u'To')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cBhvr uses Python identifier cBhvr
    __cBhvr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), 'cBhvr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateColorBehavior_httpschemas_openxmlformats_orgpresentationml2006maincBhvr', False)

    
    cBhvr = property(__cBhvr.value, __cBhvr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}from uses Python identifier from_
    __from = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'from'), 'from_', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateColorBehavior_httpschemas_openxmlformats_orgpresentationml2006mainfrom', False)

    
    from_ = property(__from.value, __from.set, None, u'From')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}by uses Python identifier by
    __by = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'by'), 'by', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateColorBehavior_httpschemas_openxmlformats_orgpresentationml2006mainby', False)

    
    by = property(__by.value, __by.set, None, u'By')

    
    # Attribute clrSpc uses Python identifier clrSpc
    __clrSpc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'clrSpc'), 'clrSpc', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateColorBehavior_clrSpc', ST_TLAnimateColorSpace)
    
    clrSpc = property(__clrSpc.value, __clrSpc.set, None, u'Color Space')

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLAnimateColorBehavior_dir', ST_TLAnimateColorDirection)
    
    dir = property(__dir.value, __dir.set, None, u'Direction')


    _ElementMap = {
        __to.name() : __to,
        __cBhvr.name() : __cBhvr,
        __from.name() : __from,
        __by.name() : __by
    }
    _AttributeMap = {
        __clrSpc.name() : __clrSpc,
        __dir.name() : __dir
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLAnimateColorBehavior', CT_TLAnimateColorBehavior)


# Complex type CT_TextUnderlineFillGroupWrapper with content type ELEMENT_ONLY
class CT_TextUnderlineFillGroupWrapper (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextUnderlineFillGroupWrapper')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextUnderlineFillGroupWrapper_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextUnderlineFillGroupWrapper_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextUnderlineFillGroupWrapper_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextUnderlineFillGroupWrapper_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextUnderlineFillGroupWrapper_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextUnderlineFillGroupWrapper_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)


    _ElementMap = {
        __grpFill.name() : __grpFill,
        __solidFill.name() : __solidFill,
        __blipFill.name() : __blipFill,
        __pattFill.name() : __pattFill,
        __noFill.name() : __noFill,
        __gradFill.name() : __gradFill
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextUnderlineFillGroupWrapper', CT_TextUnderlineFillGroupWrapper)


# Complex type CT_AnimationDgmBuildProperties with content type EMPTY
class CT_AnimationDgmBuildProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AnimationDgmBuildProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute bld uses Python identifier bld
    __bld = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bld'), 'bld', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationDgmBuildProperties_bld', ST_AnimationDgmBuildType, unicode_default=u'allAtOnce')
    
    bld = property(__bld.value, __bld.set, None, u'Build')

    
    # Attribute rev uses Python identifier rev
    __rev = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rev'), 'rev', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationDgmBuildProperties_rev', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    rev = property(__rev.value, __rev.set, None, u'Reverse Animation')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __bld.name() : __bld,
        __rev.name() : __rev
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AnimationDgmBuildProperties', CT_AnimationDgmBuildProperties)


# Complex type CT_TableBackgroundStyle with content type ELEMENT_ONLY
class CT_TableBackgroundStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableBackgroundStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effect uses Python identifier effect
    __effect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effect'), 'effect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableBackgroundStyle_httpschemas_openxmlformats_orgdrawingml2006maineffect', False)

    
    effect = property(__effect.value, __effect.set, None, u'Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fill uses Python identifier fill
    __fill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fill'), 'fill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableBackgroundStyle_httpschemas_openxmlformats_orgdrawingml2006mainfill', False)

    
    fill = property(__fill.value, __fill.set, None, u'Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectRef uses Python identifier effectRef
    __effectRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectRef'), 'effectRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableBackgroundStyle_httpschemas_openxmlformats_orgdrawingml2006maineffectRef', False)

    
    effectRef = property(__effectRef.value, __effectRef.set, None, u'Effect Reference')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillRef uses Python identifier fillRef
    __fillRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef'), 'fillRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableBackgroundStyle_httpschemas_openxmlformats_orgdrawingml2006mainfillRef', False)

    
    fillRef = property(__fillRef.value, __fillRef.set, None, u'Fill Reference')


    _ElementMap = {
        __effect.name() : __effect,
        __fill.name() : __fill,
        __effectRef.name() : __effectRef,
        __fillRef.name() : __fillRef
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableBackgroundStyle', CT_TableBackgroundStyle)


# Complex type CT_Category with content type EMPTY
class CT_Category (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Category')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute pri uses Python identifier pri
    __pri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pri'), 'pri', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Category_pri', pyxb.binding.datatypes.unsignedInt, required=True)
    
    pri = property(__pri.value, __pri.set, None, u'Priority')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Category_type', pyxb.binding.datatypes.anyURI, required=True)
    
    type = property(__type.value, __type.set, None, u'Category Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __pri.name() : __pri,
        __type.name() : __type
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Category', CT_Category)


# Complex type CT_PolarAdjustHandle with content type ELEMENT_ONLY
class CT_PolarAdjustHandle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PolarAdjustHandle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pos'), 'pos', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PolarAdjustHandle_httpschemas_openxmlformats_orgdrawingml2006mainpos', False)

    
    pos = property(__pos.value, __pos.set, None, u'Shape Position Coordinate')

    
    # Attribute gdRefR uses Python identifier gdRefR
    __gdRefR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gdRefR'), 'gdRefR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PolarAdjustHandle_gdRefR', ST_GeomGuideName)
    
    gdRefR = property(__gdRefR.value, __gdRefR.set, None, u'Radial Adjustment Guide')

    
    # Attribute minAng uses Python identifier minAng
    __minAng = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minAng'), 'minAng', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PolarAdjustHandle_minAng', ST_AdjAngle)
    
    minAng = property(__minAng.value, __minAng.set, None, u'Minimum Angle Adjustment')

    
    # Attribute maxAng uses Python identifier maxAng
    __maxAng = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxAng'), 'maxAng', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PolarAdjustHandle_maxAng', ST_AdjAngle)
    
    maxAng = property(__maxAng.value, __maxAng.set, None, u'Maximum Angle Adjustment')

    
    # Attribute gdRefAng uses Python identifier gdRefAng
    __gdRefAng = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gdRefAng'), 'gdRefAng', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PolarAdjustHandle_gdRefAng', ST_GeomGuideName)
    
    gdRefAng = property(__gdRefAng.value, __gdRefAng.set, None, u'Angle Adjustment Guide')

    
    # Attribute minR uses Python identifier minR
    __minR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minR'), 'minR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PolarAdjustHandle_minR', ST_AdjCoordinate)
    
    minR = property(__minR.value, __minR.set, None, u'Minimum Radial Adjustment')

    
    # Attribute maxR uses Python identifier maxR
    __maxR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxR'), 'maxR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PolarAdjustHandle_maxR', ST_AdjCoordinate)
    
    maxR = property(__maxR.value, __maxR.set, None, u'Maximum Radial Adjustment')


    _ElementMap = {
        __pos.name() : __pos
    }
    _AttributeMap = {
        __gdRefR.name() : __gdRefR,
        __minAng.name() : __minAng,
        __maxAng.name() : __maxAng,
        __gdRefAng.name() : __gdRefAng,
        __minR.name() : __minR,
        __maxR.name() : __maxR
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PolarAdjustHandle', CT_PolarAdjustHandle)


# Complex type CT_ColorSchemeAndMapping with content type ELEMENT_ONLY
class CT_ColorSchemeAndMapping (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorSchemeAndMapping')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrMap uses Python identifier clrMap
    __clrMap = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrMap'), 'clrMap', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorSchemeAndMapping_httpschemas_openxmlformats_orgdrawingml2006mainclrMap', False)

    
    clrMap = property(__clrMap.value, __clrMap.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrScheme uses Python identifier clrScheme
    __clrScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme'), 'clrScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorSchemeAndMapping_httpschemas_openxmlformats_orgdrawingml2006mainclrScheme', False)

    
    clrScheme = property(__clrScheme.value, __clrScheme.set, None, None)


    _ElementMap = {
        __clrMap.name() : __clrMap,
        __clrScheme.name() : __clrScheme
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorSchemeAndMapping', CT_ColorSchemeAndMapping)


# Complex type CT_Parameter with content type EMPTY
class CT_Parameter (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Parameter')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Parameter_type', ST_ParameterId, required=True)
    
    type = property(__type.value, __type.set, None, u'Parameter Type')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Parameter_val', ST_ParameterVal, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __type.name() : __type,
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Parameter', CT_Parameter)


# Complex type CT_Path2DArcTo with content type EMPTY
class CT_Path2DArcTo (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2DArcTo')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute hR uses Python identifier hR
    __hR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hR'), 'hR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DArcTo_hR', ST_AdjCoordinate, required=True)
    
    hR = property(__hR.value, __hR.set, None, u'Shape Arc Height Radius')

    
    # Attribute wR uses Python identifier wR
    __wR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'wR'), 'wR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DArcTo_wR', ST_AdjCoordinate, required=True)
    
    wR = property(__wR.value, __wR.set, None, u'Shape Arc Width Radius')

    
    # Attribute swAng uses Python identifier swAng
    __swAng = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'swAng'), 'swAng', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DArcTo_swAng', ST_AdjAngle, required=True)
    
    swAng = property(__swAng.value, __swAng.set, None, u'Shape Arc Swing Angle')

    
    # Attribute stAng uses Python identifier stAng
    __stAng = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stAng'), 'stAng', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DArcTo_stAng', ST_AdjAngle, required=True)
    
    stAng = property(__stAng.value, __stAng.set, None, u'Shape Arc Start Angle')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __hR.name() : __hR,
        __wR.name() : __wR,
        __swAng.name() : __swAng,
        __stAng.name() : __stAng
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2DArcTo', CT_Path2DArcTo)


# Complex type CT_GraphicalObjectData with content type ELEMENT_ONLY
class CT_GraphicalObjectData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GraphicalObjectData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute uri uses Python identifier uri
    __uri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uri'), 'uri', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectData_uri', pyxb.binding.datatypes.token)
    
    uri = property(__uri.value, __uri.set, None, u'Uniform Resource Identifier')

    _HasWildcardElement = True

    _ElementMap = {
        
    }
    _AttributeMap = {
        __uri.name() : __uri
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GraphicalObjectData', CT_GraphicalObjectData)


# Complex type CT_CTCategory with content type EMPTY
class CT_CTCategory (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_CTCategory')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute pri uses Python identifier pri
    __pri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pri'), 'pri', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTCategory_pri', pyxb.binding.datatypes.unsignedInt, required=True)
    
    pri = property(__pri.value, __pri.set, None, u'Priority')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTCategory_type', pyxb.binding.datatypes.anyURI, required=True)
    
    type = property(__type.value, __type.set, None, u'Category Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __pri.name() : __pri,
        __type.name() : __type
    }
_Namespace.addCategoryObject('typeBinding', u'CT_CTCategory', CT_CTCategory)


# Complex type CT_TLOleChartTargetElement with content type EMPTY
class CT_TLOleChartTargetElement (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLOleChartTargetElement')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lvl uses Python identifier lvl
    __lvl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lvl'), 'lvl', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLOleChartTargetElement_lvl', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    lvl = property(__lvl.value, __lvl.set, None, u'Level')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLOleChartTargetElement_type', ST_TLChartSubelementType, required=True)
    
    type = property(__type.value, __type.set, None, u'Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lvl.name() : __lvl,
        __type.name() : __type
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLOleChartTargetElement', CT_TLOleChartTargetElement)


# Complex type CT_GradientStopList with content type ELEMENT_ONLY
class CT_GradientStopList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GradientStopList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gs uses Python identifier gs
    __gs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gs'), 'gs', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStopList_httpschemas_openxmlformats_orgdrawingml2006maings', True)

    
    gs = property(__gs.value, __gs.set, None, u'Gradient stops')


    _ElementMap = {
        __gs.name() : __gs
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GradientStopList', CT_GradientStopList)


# Complex type CT_TLIterateIntervalPercentage with content type EMPTY
class CT_TLIterateIntervalPercentage (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLIterateIntervalPercentage')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLIterateIntervalPercentage_val', ST_PositivePercentage, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLIterateIntervalPercentage', CT_TLIterateIntervalPercentage)


# Complex type CT_CornerDirectionTransition with content type EMPTY
class CT_CornerDirectionTransition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_CornerDirectionTransition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CornerDirectionTransition_dir', ST_TransitionCornerDirectionType, unicode_default=u'lu')
    
    dir = property(__dir.value, __dir.set, None, u'Direction')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __dir.name() : __dir
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_CornerDirectionTransition', CT_CornerDirectionTransition)


# Complex type CT_SlideMasterIdList with content type ELEMENT_ONLY
class CT_SlideMasterIdList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideMasterIdList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}sldMasterId uses Python identifier sldMasterId
    __sldMasterId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'sldMasterId'), 'sldMasterId', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideMasterIdList_httpschemas_openxmlformats_orgpresentationml2006mainsldMasterId', True)

    
    sldMasterId = property(__sldMasterId.value, __sldMasterId.set, None, u'Slide Master ID')


    _ElementMap = {
        __sldMasterId.name() : __sldMasterId
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideMasterIdList', CT_SlideMasterIdList)


# Complex type CT_HierBranchStyle with content type EMPTY
class CT_HierBranchStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_HierBranchStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_HierBranchStyle_val', ST_HierBranchStyle, unicode_default=u'std')
    
    val = property(__val.value, __val.set, None, u'Organization Chart Branch Style Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_HierBranchStyle', CT_HierBranchStyle)


# Complex type CT_ColorTransform with content type ELEMENT_ONLY
class CT_ColorTransform (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ColorTransform')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransform_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'title'), 'title', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransform_httpschemas_openxmlformats_orgdrawingml2006diagramtitle', True)

    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}catLst uses Python identifier catLst
    __catLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), 'catLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransform_httpschemas_openxmlformats_orgdrawingml2006diagramcatLst', False)

    
    catLst = property(__catLst.value, __catLst.set, None, u'Color Transform Category List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}styleLbl uses Python identifier styleLbl
    __styleLbl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'styleLbl'), 'styleLbl', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransform_httpschemas_openxmlformats_orgdrawingml2006diagramstyleLbl', True)

    
    styleLbl = property(__styleLbl.value, __styleLbl.set, None, u'Style Label')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}desc uses Python identifier desc
    __desc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'desc'), 'desc', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransform_httpschemas_openxmlformats_orgdrawingml2006diagramdesc', True)

    
    desc = property(__desc.value, __desc.set, None, u'Description')

    
    # Attribute minVer uses Python identifier minVer
    __minVer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minVer'), 'minVer', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransform_minVer', pyxb.binding.datatypes.string, unicode_default=u'http://schemas.openxmlformats.org/drawingml/2006/diagram')
    
    minVer = property(__minVer.value, __minVer.set, None, u'Minimum Version')

    
    # Attribute uniqueId uses Python identifier uniqueId
    __uniqueId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueId'), 'uniqueId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransform_uniqueId', pyxb.binding.datatypes.string, unicode_default=u'')
    
    uniqueId = property(__uniqueId.value, __uniqueId.set, None, u'Unique ID')


    _ElementMap = {
        __extLst.name() : __extLst,
        __title.name() : __title,
        __catLst.name() : __catLst,
        __styleLbl.name() : __styleLbl,
        __desc.name() : __desc
    }
    _AttributeMap = {
        __minVer.name() : __minVer,
        __uniqueId.name() : __uniqueId
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ColorTransform', CT_ColorTransform)


# Complex type CT_PictureNonVisual with content type ELEMENT_ONLY
class CT_PictureNonVisual (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_PictureNonVisual')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}nvPr uses Python identifier nvPr
    __nvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'nvPr'), 'nvPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PictureNonVisual_httpschemas_openxmlformats_orgpresentationml2006mainnvPr', False)

    
    nvPr = property(__nvPr.value, __nvPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cNvPr uses Python identifier cNvPr
    __cNvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPr'), 'cNvPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PictureNonVisual_httpschemas_openxmlformats_orgpresentationml2006maincNvPr', False)

    
    cNvPr = property(__cNvPr.value, __cNvPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cNvPicPr uses Python identifier cNvPicPr
    __cNvPicPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPicPr'), 'cNvPicPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PictureNonVisual_httpschemas_openxmlformats_orgpresentationml2006maincNvPicPr', False)

    
    cNvPicPr = property(__cNvPicPr.value, __cNvPicPr.set, None, u'Non-Visual Picture Drawing Properties')


    _ElementMap = {
        __nvPr.name() : __nvPr,
        __cNvPr.name() : __cNvPr,
        __cNvPicPr.name() : __cNvPicPr
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_PictureNonVisual', CT_PictureNonVisual)


# Complex type CT_StyleDefinitionHeaderLst with content type ELEMENT_ONLY
class CT_StyleDefinitionHeaderLst (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_StyleDefinitionHeaderLst')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}styleDefHdr uses Python identifier styleDefHdr
    __styleDefHdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'styleDefHdr'), 'styleDefHdr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeaderLst_httpschemas_openxmlformats_orgdrawingml2006diagramstyleDefHdr', True)

    
    styleDefHdr = property(__styleDefHdr.value, __styleDefHdr.set, None, u'Style Definition Header')


    _ElementMap = {
        __styleDefHdr.name() : __styleDefHdr
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_StyleDefinitionHeaderLst', CT_StyleDefinitionHeaderLst)


# Complex type CT_AnimOne with content type EMPTY
class CT_AnimOne (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_AnimOne')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_AnimOne_val', ST_AnimOneStr, unicode_default=u'one')
    
    val = property(__val.value, __val.set, None, u'One By One Animation Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_AnimOne', CT_AnimOne)


# Complex type CT_EmbeddedFontList with content type ELEMENT_ONLY
class CT_EmbeddedFontList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_EmbeddedFontList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}embeddedFont uses Python identifier embeddedFont
    __embeddedFont = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'embeddedFont'), 'embeddedFont', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_EmbeddedFontList_httpschemas_openxmlformats_orgpresentationml2006mainembeddedFont', True)

    
    embeddedFont = property(__embeddedFont.value, __embeddedFont.set, None, u'Embedded Font')


    _ElementMap = {
        __embeddedFont.name() : __embeddedFont
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_EmbeddedFontList', CT_EmbeddedFontList)


# Complex type CT_Boolean with content type EMPTY
class CT_Boolean (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Boolean')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Boolean_val', _s.ST_OnOff, unicode_default=u'0')
    
    val = property(__val.value, __val.set, None, u'On/Off Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Boolean', CT_Boolean)


# Complex type CT_CommentAuthor with content type ELEMENT_ONLY
class CT_CommentAuthor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_CommentAuthor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommentAuthor_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute lastIdx uses Python identifier lastIdx
    __lastIdx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lastIdx'), 'lastIdx', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommentAuthor_lastIdx', pyxb.binding.datatypes.unsignedInt, required=True)
    
    lastIdx = property(__lastIdx.value, __lastIdx.set, None, u"Index of Comment Author's last comment")

    
    # Attribute initials uses Python identifier initials
    __initials = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'initials'), 'initials', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommentAuthor_initials', ST_Name, required=True)
    
    initials = property(__initials.value, __initials.set, None, u'Comment Author Initials')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommentAuthor_id', pyxb.binding.datatypes.unsignedInt, required=True)
    
    id = property(__id.value, __id.set, None, u'Comment Author ID')

    
    # Attribute clrIdx uses Python identifier clrIdx
    __clrIdx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'clrIdx'), 'clrIdx', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommentAuthor_clrIdx', pyxb.binding.datatypes.unsignedInt, required=True)
    
    clrIdx = property(__clrIdx.value, __clrIdx.set, None, u'Comment Author Color Index')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_CommentAuthor_name', ST_Name, required=True)
    
    name = property(__name.value, __name.set, None, u'Comment Author Name')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __lastIdx.name() : __lastIdx,
        __initials.name() : __initials,
        __id.name() : __id,
        __clrIdx.name() : __clrIdx,
        __name.name() : __name
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_CommentAuthor', CT_CommentAuthor)


# Complex type CT_DiagramDefinitionHeaderLst with content type ELEMENT_ONLY
class CT_DiagramDefinitionHeaderLst (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_DiagramDefinitionHeaderLst')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}layoutDefHdr uses Python identifier layoutDefHdr
    __layoutDefHdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'layoutDefHdr'), 'layoutDefHdr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeaderLst_httpschemas_openxmlformats_orgdrawingml2006diagramlayoutDefHdr', True)

    
    layoutDefHdr = property(__layoutDefHdr.value, __layoutDefHdr.set, None, u'Layout Definition Header')


    _ElementMap = {
        __layoutDefHdr.name() : __layoutDefHdr
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_DiagramDefinitionHeaderLst', CT_DiagramDefinitionHeaderLst)


# Complex type CT_Path2DList with content type ELEMENT_ONLY
class CT_Path2DList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2DList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}path uses Python identifier path
    __path = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'path'), 'path', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DList_httpschemas_openxmlformats_orgdrawingml2006mainpath', True)

    
    path = property(__path.value, __path.set, None, u'Shape Path')


    _ElementMap = {
        __path.name() : __path
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2DList', CT_Path2DList)


# Complex type CT_SlideSorterViewProperties with content type ELEMENT_ONLY
class CT_SlideSorterViewProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideSorterViewProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideSorterViewProperties_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}cViewPr uses Python identifier cViewPr
    __cViewPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'cViewPr'), 'cViewPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideSorterViewProperties_httpschemas_openxmlformats_orgpresentationml2006maincViewPr', False)

    
    cViewPr = property(__cViewPr.value, __cViewPr.set, None, u'Base properties for Slide Sorter View')

    
    # Attribute showFormatting uses Python identifier showFormatting
    __showFormatting = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showFormatting'), 'showFormatting', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideSorterViewProperties_showFormatting', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showFormatting = property(__showFormatting.value, __showFormatting.set, None, u'Show Formatting')


    _ElementMap = {
        __extLst.name() : __extLst,
        __cViewPr.name() : __cViewPr
    }
    _AttributeMap = {
        __showFormatting.name() : __showFormatting
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideSorterViewProperties', CT_SlideSorterViewProperties)


# Complex type CT_GvmlGroupShapeNonVisual with content type ELEMENT_ONLY
class CT_GvmlGroupShapeNonVisual (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlGroupShapeNonVisual')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvGrpSpPr uses Python identifier cNvGrpSpPr
    __cNvGrpSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvGrpSpPr'), 'cNvGrpSpPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShapeNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvGrpSpPr', False)

    
    cNvGrpSpPr = property(__cNvGrpSpPr.value, __cNvGrpSpPr.set, None, u'Non-Visual Group Shape Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvPr uses Python identifier cNvPr
    __cNvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), 'cNvPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShapeNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvPr', False)

    
    cNvPr = property(__cNvPr.value, __cNvPr.set, None, None)


    _ElementMap = {
        __cNvGrpSpPr.name() : __cNvGrpSpPr,
        __cNvPr.name() : __cNvPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlGroupShapeNonVisual', CT_GvmlGroupShapeNonVisual)


# Complex type CT_Cxn with content type ELEMENT_ONLY
class CT_Cxn (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Cxn')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute srcId uses Python identifier srcId
    __srcId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'srcId'), 'srcId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_srcId', ST_ModelId, required=True)
    
    srcId = property(__srcId.value, __srcId.set, None, u'Source Identifier')

    
    # Attribute srcOrd uses Python identifier srcOrd
    __srcOrd = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'srcOrd'), 'srcOrd', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_srcOrd', pyxb.binding.datatypes.unsignedInt, required=True)
    
    srcOrd = property(__srcOrd.value, __srcOrd.set, None, u'Source Position')

    
    # Attribute destOrd uses Python identifier destOrd
    __destOrd = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'destOrd'), 'destOrd', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_destOrd', pyxb.binding.datatypes.unsignedInt, required=True)
    
    destOrd = property(__destOrd.value, __destOrd.set, None, u'Destination Position')

    
    # Attribute modelId uses Python identifier modelId
    __modelId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelId'), 'modelId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_modelId', ST_ModelId, required=True)
    
    modelId = property(__modelId.value, __modelId.set, None, u'Model Identifier')

    
    # Attribute destId uses Python identifier destId
    __destId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'destId'), 'destId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_destId', ST_ModelId, required=True)
    
    destId = property(__destId.value, __destId.set, None, u'Destination Identifier')

    
    # Attribute parTransId uses Python identifier parTransId
    __parTransId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parTransId'), 'parTransId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_parTransId', ST_ModelId, unicode_default=u'0')
    
    parTransId = property(__parTransId.value, __parTransId.set, None, u'Parent Transition Identifier')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_type', ST_CxnType, unicode_default=u'parOf')
    
    type = property(__type.value, __type.set, None, u'Point Type')

    
    # Attribute sibTransId uses Python identifier sibTransId
    __sibTransId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sibTransId'), 'sibTransId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_sibTransId', ST_ModelId, unicode_default=u'0')
    
    sibTransId = property(__sibTransId.value, __sibTransId.set, None, u'Sibling Transition Identifier')

    
    # Attribute presId uses Python identifier presId
    __presId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'presId'), 'presId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_presId', pyxb.binding.datatypes.string, unicode_default=u'')
    
    presId = property(__presId.value, __presId.set, None, u'Presentation Identifier')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __srcId.name() : __srcId,
        __srcOrd.name() : __srcOrd,
        __destOrd.name() : __destOrd,
        __modelId.name() : __modelId,
        __destId.name() : __destId,
        __parTransId.name() : __parTransId,
        __type.name() : __type,
        __sibTransId.name() : __sibTransId,
        __presId.name() : __presId
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Cxn', CT_Cxn)


# Complex type CT_ElemPropSet with content type ELEMENT_ONLY
class CT_ElemPropSet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ElemPropSet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'style'), 'style', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_httpschemas_openxmlformats_orgdrawingml2006diagramstyle', False)

    
    style = property(__style.value, __style.set, None, u'Shape Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}presLayoutVars uses Python identifier presLayoutVars
    __presLayoutVars = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'presLayoutVars'), 'presLayoutVars', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_httpschemas_openxmlformats_orgdrawingml2006diagrampresLayoutVars', False)

    
    presLayoutVars = property(__presLayoutVars.value, __presLayoutVars.set, None, u'Presentation Layout Variables')

    
    # Attribute custFlipVert uses Python identifier custFlipVert
    __custFlipVert = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custFlipVert'), 'custFlipVert', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custFlipVert', pyxb.binding.datatypes.boolean)
    
    custFlipVert = property(__custFlipVert.value, __custFlipVert.set, None, u'Custom Vertical Flip')

    
    # Attribute custFlipHor uses Python identifier custFlipHor
    __custFlipHor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custFlipHor'), 'custFlipHor', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custFlipHor', pyxb.binding.datatypes.boolean)
    
    custFlipHor = property(__custFlipHor.value, __custFlipHor.set, None, u'Custom Horizontal Flip')

    
    # Attribute custSzX uses Python identifier custSzX
    __custSzX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custSzX'), 'custSzX', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custSzX', pyxb.binding.datatypes.int)
    
    custSzX = property(__custSzX.value, __custSzX.set, None, u'Fixed Width Override')

    
    # Attribute custRadScaleRad uses Python identifier custRadScaleRad
    __custRadScaleRad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custRadScaleRad'), 'custRadScaleRad', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custRadScaleRad', pyxb.binding.datatypes.int)
    
    custRadScaleRad = property(__custRadScaleRad.value, __custRadScaleRad.set, None, u'Radius Scale')

    
    # Attribute custSzY uses Python identifier custSzY
    __custSzY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custSzY'), 'custSzY', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custSzY', pyxb.binding.datatypes.int)
    
    custSzY = property(__custSzY.value, __custSzY.set, None, u'Fixed Height Override')

    
    # Attribute custScaleX uses Python identifier custScaleX
    __custScaleX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custScaleX'), 'custScaleX', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custScaleX', pyxb.binding.datatypes.int)
    
    custScaleX = property(__custScaleX.value, __custScaleX.set, None, u'Width Scale')

    
    # Attribute custScaleY uses Python identifier custScaleY
    __custScaleY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custScaleY'), 'custScaleY', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custScaleY', pyxb.binding.datatypes.int)
    
    custScaleY = property(__custScaleY.value, __custScaleY.set, None, u'Height Scale')

    
    # Attribute custLinFactNeighborY uses Python identifier custLinFactNeighborY
    __custLinFactNeighborY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custLinFactNeighborY'), 'custLinFactNeighborY', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custLinFactNeighborY', pyxb.binding.datatypes.int)
    
    custLinFactNeighborY = property(__custLinFactNeighborY.value, __custLinFactNeighborY.set, None, u'Neighbor Offset Height')

    
    # Attribute custT uses Python identifier custT
    __custT = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custT'), 'custT', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custT', pyxb.binding.datatypes.boolean)
    
    custT = property(__custT.value, __custT.set, None, u'Text Changed')

    
    # Attribute presName uses Python identifier presName
    __presName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'presName'), 'presName', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_presName', pyxb.binding.datatypes.string)
    
    presName = property(__presName.value, __presName.set, None, u'Presentation Name')

    
    # Attribute presStyleLbl uses Python identifier presStyleLbl
    __presStyleLbl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'presStyleLbl'), 'presStyleLbl', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_presStyleLbl', pyxb.binding.datatypes.string)
    
    presStyleLbl = property(__presStyleLbl.value, __presStyleLbl.set, None, u'Presentation Style Label')

    
    # Attribute custLinFactNeighborX uses Python identifier custLinFactNeighborX
    __custLinFactNeighborX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custLinFactNeighborX'), 'custLinFactNeighborX', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custLinFactNeighborX', pyxb.binding.datatypes.int)
    
    custLinFactNeighborX = property(__custLinFactNeighborX.value, __custLinFactNeighborX.set, None, u'Neighbor Offset Width')

    
    # Attribute presStyleCnt uses Python identifier presStyleCnt
    __presStyleCnt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'presStyleCnt'), 'presStyleCnt', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_presStyleCnt', pyxb.binding.datatypes.int)
    
    presStyleCnt = property(__presStyleCnt.value, __presStyleCnt.set, None, u'Presentation Style Count')

    
    # Attribute loTypeId uses Python identifier loTypeId
    __loTypeId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'loTypeId'), 'loTypeId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_loTypeId', pyxb.binding.datatypes.string)
    
    loTypeId = property(__loTypeId.value, __loTypeId.set, None, u'Current Diagram Type')

    
    # Attribute custRadScaleInc uses Python identifier custRadScaleInc
    __custRadScaleInc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custRadScaleInc'), 'custRadScaleInc', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custRadScaleInc', pyxb.binding.datatypes.int)
    
    custRadScaleInc = property(__custRadScaleInc.value, __custRadScaleInc.set, None, u'Include Angle Scale')

    
    # Attribute custLinFactX uses Python identifier custLinFactX
    __custLinFactX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custLinFactX'), 'custLinFactX', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custLinFactX', pyxb.binding.datatypes.int)
    
    custLinFactX = property(__custLinFactX.value, __custLinFactX.set, None, u'Custom Factor Width')

    
    # Attribute loCatId uses Python identifier loCatId
    __loCatId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'loCatId'), 'loCatId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_loCatId', pyxb.binding.datatypes.string)
    
    loCatId = property(__loCatId.value, __loCatId.set, None, u'Current Diagram Category')

    
    # Attribute qsTypeId uses Python identifier qsTypeId
    __qsTypeId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'qsTypeId'), 'qsTypeId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_qsTypeId', pyxb.binding.datatypes.string)
    
    qsTypeId = property(__qsTypeId.value, __qsTypeId.set, None, u'Current Style Type')

    
    # Attribute coherent3DOff uses Python identifier coherent3DOff
    __coherent3DOff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'coherent3DOff'), 'coherent3DOff', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_coherent3DOff', pyxb.binding.datatypes.boolean)
    
    coherent3DOff = property(__coherent3DOff.value, __coherent3DOff.set, None, u'Coherent 3D Behavior')

    
    # Attribute qsCatId uses Python identifier qsCatId
    __qsCatId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'qsCatId'), 'qsCatId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_qsCatId', pyxb.binding.datatypes.string)
    
    qsCatId = property(__qsCatId.value, __qsCatId.set, None, u'Current Style Category')

    
    # Attribute csTypeId uses Python identifier csTypeId
    __csTypeId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'csTypeId'), 'csTypeId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_csTypeId', pyxb.binding.datatypes.string)
    
    csTypeId = property(__csTypeId.value, __csTypeId.set, None, u'Color Transform Type Identifier')

    
    # Attribute csCatId uses Python identifier csCatId
    __csCatId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'csCatId'), 'csCatId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_csCatId', pyxb.binding.datatypes.string)
    
    csCatId = property(__csCatId.value, __csCatId.set, None, u'Color Transform Category')

    
    # Attribute presAssocID uses Python identifier presAssocID
    __presAssocID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'presAssocID'), 'presAssocID', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_presAssocID', ST_ModelId)
    
    presAssocID = property(__presAssocID.value, __presAssocID.set, None, u'Presentation Element Identifier')

    
    # Attribute custLinFactY uses Python identifier custLinFactY
    __custLinFactY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custLinFactY'), 'custLinFactY', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custLinFactY', pyxb.binding.datatypes.int)
    
    custLinFactY = property(__custLinFactY.value, __custLinFactY.set, None, u'Custom Factor Height')

    
    # Attribute phldrT uses Python identifier phldrT
    __phldrT = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'phldrT'), 'phldrT', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_phldrT', pyxb.binding.datatypes.string)
    
    phldrT = property(__phldrT.value, __phldrT.set, None, u'Placeholder Text')

    
    # Attribute presStyleIdx uses Python identifier presStyleIdx
    __presStyleIdx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'presStyleIdx'), 'presStyleIdx', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_presStyleIdx', pyxb.binding.datatypes.int)
    
    presStyleIdx = property(__presStyleIdx.value, __presStyleIdx.set, None, u'Presentation Style Index')

    
    # Attribute phldr uses Python identifier phldr
    __phldr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'phldr'), 'phldr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_phldr', pyxb.binding.datatypes.boolean)
    
    phldr = property(__phldr.value, __phldr.set, None, u'Placeholder')

    
    # Attribute custAng uses Python identifier custAng
    __custAng = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custAng'), 'custAng', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custAng', pyxb.binding.datatypes.int)
    
    custAng = property(__custAng.value, __custAng.set, None, u'Custom Rotation')


    _ElementMap = {
        __style.name() : __style,
        __presLayoutVars.name() : __presLayoutVars
    }
    _AttributeMap = {
        __custFlipVert.name() : __custFlipVert,
        __custFlipHor.name() : __custFlipHor,
        __custSzX.name() : __custSzX,
        __custRadScaleRad.name() : __custRadScaleRad,
        __custSzY.name() : __custSzY,
        __custScaleX.name() : __custScaleX,
        __custScaleY.name() : __custScaleY,
        __custLinFactNeighborY.name() : __custLinFactNeighborY,
        __custT.name() : __custT,
        __presName.name() : __presName,
        __presStyleLbl.name() : __presStyleLbl,
        __custLinFactNeighborX.name() : __custLinFactNeighborX,
        __presStyleCnt.name() : __presStyleCnt,
        __loTypeId.name() : __loTypeId,
        __custRadScaleInc.name() : __custRadScaleInc,
        __custLinFactX.name() : __custLinFactX,
        __loCatId.name() : __loCatId,
        __qsTypeId.name() : __qsTypeId,
        __coherent3DOff.name() : __coherent3DOff,
        __qsCatId.name() : __qsCatId,
        __csTypeId.name() : __csTypeId,
        __csCatId.name() : __csCatId,
        __presAssocID.name() : __presAssocID,
        __custLinFactY.name() : __custLinFactY,
        __phldrT.name() : __phldrT,
        __presStyleIdx.name() : __presStyleIdx,
        __phldr.name() : __phldr,
        __custAng.name() : __custAng
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ElemPropSet', CT_ElemPropSet)


# Complex type CT_Path2DLineTo with content type ELEMENT_ONLY
class CT_Path2DLineTo (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2DLineTo')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pt uses Python identifier pt
    __pt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), 'pt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DLineTo_httpschemas_openxmlformats_orgdrawingml2006mainpt', False)

    
    pt = property(__pt.value, __pt.set, None, u'Line end point')


    _ElementMap = {
        __pt.name() : __pt
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2DLineTo', CT_Path2DLineTo)


# Complex type CT_CTStyleLabel with content type ELEMENT_ONLY
class CT_CTStyleLabel (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_CTStyleLabel')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}txFillClrLst uses Python identifier txFillClrLst
    __txFillClrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'txFillClrLst'), 'txFillClrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramtxFillClrLst', False)

    
    txFillClrLst = property(__txFillClrLst.value, __txFillClrLst.set, None, u'Text Fill Color List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}linClrLst uses Python identifier linClrLst
    __linClrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'linClrLst'), 'linClrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramlinClrLst', False)

    
    linClrLst = property(__linClrLst.value, __linClrLst.set, None, u'Line Color List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}txEffectClrLst uses Python identifier txEffectClrLst
    __txEffectClrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'txEffectClrLst'), 'txEffectClrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramtxEffectClrLst', False)

    
    txEffectClrLst = property(__txEffectClrLst.value, __txEffectClrLst.set, None, u'Text Effect Color List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}fillClrLst uses Python identifier fillClrLst
    __fillClrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'fillClrLst'), 'fillClrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramfillClrLst', False)

    
    fillClrLst = property(__fillClrLst.value, __fillClrLst.set, None, u'Fill Color List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}effectClrLst uses Python identifier effectClrLst
    __effectClrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'effectClrLst'), 'effectClrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagrameffectClrLst', False)

    
    effectClrLst = property(__effectClrLst.value, __effectClrLst.set, None, u'Effect Color List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}txLinClrLst uses Python identifier txLinClrLst
    __txLinClrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'txLinClrLst'), 'txLinClrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramtxLinClrLst', False)

    
    txLinClrLst = property(__txLinClrLst.value, __txLinClrLst.set, None, u'Text Line Color List')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_name', pyxb.binding.datatypes.string, required=True)
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __txFillClrLst.name() : __txFillClrLst,
        __linClrLst.name() : __linClrLst,
        __txEffectClrLst.name() : __txEffectClrLst,
        __fillClrLst.name() : __fillClrLst,
        __effectClrLst.name() : __effectClrLst,
        __extLst.name() : __extLst,
        __txLinClrLst.name() : __txLinClrLst
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace.addCategoryObject('typeBinding', u'CT_CTStyleLabel', CT_CTStyleLabel)


# Complex type CT_ObjectStyleDefaults with content type ELEMENT_ONLY
class CT_ObjectStyleDefaults (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ObjectStyleDefaults')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ObjectStyleDefaults_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spDef uses Python identifier spDef
    __spDef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spDef'), 'spDef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ObjectStyleDefaults_httpschemas_openxmlformats_orgdrawingml2006mainspDef', False)

    
    spDef = property(__spDef.value, __spDef.set, None, u'Shape Default')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}txDef uses Python identifier txDef
    __txDef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'txDef'), 'txDef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ObjectStyleDefaults_httpschemas_openxmlformats_orgdrawingml2006maintxDef', False)

    
    txDef = property(__txDef.value, __txDef.set, None, u'Text Default')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnDef uses Python identifier lnDef
    __lnDef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnDef'), 'lnDef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ObjectStyleDefaults_httpschemas_openxmlformats_orgdrawingml2006mainlnDef', False)

    
    lnDef = property(__lnDef.value, __lnDef.set, None, u'Line Default')


    _ElementMap = {
        __extLst.name() : __extLst,
        __spDef.name() : __spDef,
        __txDef.name() : __txDef,
        __lnDef.name() : __lnDef
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ObjectStyleDefaults', CT_ObjectStyleDefaults)


# Complex type CT_GvmlPictureNonVisual with content type ELEMENT_ONLY
class CT_GvmlPictureNonVisual (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlPictureNonVisual')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvPicPr uses Python identifier cNvPicPr
    __cNvPicPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPicPr'), 'cNvPicPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlPictureNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvPicPr', False)

    
    cNvPicPr = property(__cNvPicPr.value, __cNvPicPr.set, None, u'Non-Visual Picture Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvPr uses Python identifier cNvPr
    __cNvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), 'cNvPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlPictureNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvPr', False)

    
    cNvPr = property(__cNvPr.value, __cNvPr.set, None, None)


    _ElementMap = {
        __cNvPicPr.name() : __cNvPicPr,
        __cNvPr.name() : __cNvPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlPictureNonVisual', CT_GvmlPictureNonVisual)


# Complex type CT_FontScheme with content type ELEMENT_ONLY
class CT_FontScheme (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FontScheme')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontScheme_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}majorFont uses Python identifier majorFont
    __majorFont = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'majorFont'), 'majorFont', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontScheme_httpschemas_openxmlformats_orgdrawingml2006mainmajorFont', False)

    
    majorFont = property(__majorFont.value, __majorFont.set, None, u'Major Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}minorFont uses Python identifier minorFont
    __minorFont = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'minorFont'), 'minorFont', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontScheme_httpschemas_openxmlformats_orgdrawingml2006mainminorFont', False)

    
    minorFont = property(__minorFont.value, __minorFont.set, None, u'Minor fonts')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontScheme_name', pyxb.binding.datatypes.string, required=True)
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __extLst.name() : __extLst,
        __majorFont.name() : __majorFont,
        __minorFont.name() : __minorFont
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FontScheme', CT_FontScheme)


# Complex type CT_BuildList with content type ELEMENT_ONLY
class CT_BuildList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_BuildList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}bldGraphic uses Python identifier bldGraphic
    __bldGraphic = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'bldGraphic'), 'bldGraphic', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_BuildList_httpschemas_openxmlformats_orgpresentationml2006mainbldGraphic', True)

    
    bldGraphic = property(__bldGraphic.value, __bldGraphic.set, None, u'Build Graphics')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}bldOleChart uses Python identifier bldOleChart
    __bldOleChart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'bldOleChart'), 'bldOleChart', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_BuildList_httpschemas_openxmlformats_orgpresentationml2006mainbldOleChart', True)

    
    bldOleChart = property(__bldOleChart.value, __bldOleChart.set, None, u'Build Embedded Chart')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}bldDgm uses Python identifier bldDgm
    __bldDgm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'bldDgm'), 'bldDgm', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_BuildList_httpschemas_openxmlformats_orgpresentationml2006mainbldDgm', True)

    
    bldDgm = property(__bldDgm.value, __bldDgm.set, None, u'Build Diagram')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}bldP uses Python identifier bldP
    __bldP = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'bldP'), 'bldP', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_BuildList_httpschemas_openxmlformats_orgpresentationml2006mainbldP', True)

    
    bldP = property(__bldP.value, __bldP.set, None, u'Build Paragraph')


    _ElementMap = {
        __bldGraphic.name() : __bldGraphic,
        __bldOleChart.name() : __bldOleChart,
        __bldDgm.name() : __bldDgm,
        __bldP.name() : __bldP
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_BuildList', CT_BuildList)


# Complex type CT_PresentationProperties with content type ELEMENT_ONLY
class CT_PresentationProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_PresentationProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}showPr uses Python identifier showPr
    __showPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'showPr'), 'showPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PresentationProperties_httpschemas_openxmlformats_orgpresentationml2006mainshowPr', False)

    
    showPr = property(__showPr.value, __showPr.set, None, u'Presentation-wide Show Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}clrMru uses Python identifier clrMru
    __clrMru = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'clrMru'), 'clrMru', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PresentationProperties_httpschemas_openxmlformats_orgpresentationml2006mainclrMru', False)

    
    clrMru = property(__clrMru.value, __clrMru.set, None, u'Color MRU')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PresentationProperties_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}htmlPubPr uses Python identifier htmlPubPr
    __htmlPubPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'htmlPubPr'), 'htmlPubPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PresentationProperties_httpschemas_openxmlformats_orgpresentationml2006mainhtmlPubPr', False)

    
    htmlPubPr = property(__htmlPubPr.value, __htmlPubPr.set, None, u'HTML Publishing Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}webPr uses Python identifier webPr
    __webPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'webPr'), 'webPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PresentationProperties_httpschemas_openxmlformats_orgpresentationml2006mainwebPr', False)

    
    webPr = property(__webPr.value, __webPr.set, None, u'Web Properties')

    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}prnPr uses Python identifier prnPr
    __prnPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'prnPr'), 'prnPr', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_PresentationProperties_httpschemas_openxmlformats_orgpresentationml2006mainprnPr', False)

    
    prnPr = property(__prnPr.value, __prnPr.set, None, u'Printing Properties')


    _ElementMap = {
        __showPr.name() : __showPr,
        __clrMru.name() : __clrMru,
        __extLst.name() : __extLst,
        __htmlPubPr.name() : __htmlPubPr,
        __webPr.name() : __webPr,
        __prnPr.name() : __prnPr
    }
    _AttributeMap = {
        
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_PresentationProperties', CT_PresentationProperties)


# Complex type CT_SlideSyncProperties with content type ELEMENT_ONLY
class CT_SlideSyncProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_SlideSyncProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideSyncProperties_httpschemas_openxmlformats_orgpresentationml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute clientInsertedTime uses Python identifier clientInsertedTime
    __clientInsertedTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'clientInsertedTime'), 'clientInsertedTime', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideSyncProperties_clientInsertedTime', pyxb.binding.datatypes.dateTime, required=True)
    
    clientInsertedTime = property(__clientInsertedTime.value, __clientInsertedTime.set, None, u'Client Slide Insertion date/time')

    
    # Attribute serverSldId uses Python identifier serverSldId
    __serverSldId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'serverSldId'), 'serverSldId', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideSyncProperties_serverSldId', pyxb.binding.datatypes.string, required=True)
    
    serverSldId = property(__serverSldId.value, __serverSldId.set, None, u"Server's Slide File ID")

    
    # Attribute serverSldModifiedTime uses Python identifier serverSldModifiedTime
    __serverSldModifiedTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'serverSldModifiedTime'), 'serverSldModifiedTime', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_SlideSyncProperties_serverSldModifiedTime', pyxb.binding.datatypes.dateTime, required=True)
    
    serverSldModifiedTime = property(__serverSldModifiedTime.value, __serverSldModifiedTime.set, None, u"Server's Slide File's modification date/time")


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __clientInsertedTime.name() : __clientInsertedTime,
        __serverSldId.name() : __serverSldId,
        __serverSldModifiedTime.name() : __serverSldModifiedTime
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_SlideSyncProperties', CT_SlideSyncProperties)


# Complex type CT_TLBuildParagraph with content type ELEMENT_ONLY
class CT_TLBuildParagraph (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_, u'CT_TLBuildParagraph')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/presentationml/2006/main}tmplLst uses Python identifier tmplLst
    __tmplLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_, u'tmplLst'), 'tmplLst', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLBuildParagraph_httpschemas_openxmlformats_orgpresentationml2006maintmplLst', False)

    
    tmplLst = property(__tmplLst.value, __tmplLst.set, None, u'Template effects')

    
    # Attribute spid uses Python identifier spid
    __spid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spid'), 'spid', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLBuildParagraph_spid', ST_ShapeID, required=True)
    
    spid = property(__spid.value, __spid.set, None, u'Shape ID')

    
    # Attribute animBg uses Python identifier animBg
    __animBg = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'animBg'), 'animBg', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLBuildParagraph_animBg', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    animBg = property(__animBg.value, __animBg.set, None, u'Animate Background')

    
    # Attribute bldLvl uses Python identifier bldLvl
    __bldLvl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bldLvl'), 'bldLvl', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLBuildParagraph_bldLvl', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    bldLvl = property(__bldLvl.value, __bldLvl.set, None, u'Build Level')

    
    # Attribute build uses Python identifier build
    __build = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'build'), 'build', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLBuildParagraph_build', ST_TLParaBuildType, unicode_default=u'whole')
    
    build = property(__build.value, __build.set, None, u'Build Types')

    
    # Attribute rev uses Python identifier rev
    __rev = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rev'), 'rev', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLBuildParagraph_rev', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    rev = property(__rev.value, __rev.set, None, u'Reverse')

    
    # Attribute grpId uses Python identifier grpId
    __grpId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'grpId'), 'grpId', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLBuildParagraph_grpId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    grpId = property(__grpId.value, __grpId.set, None, u'Group ID')

    
    # Attribute advAuto uses Python identifier advAuto
    __advAuto = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'advAuto'), 'advAuto', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLBuildParagraph_advAuto', ST_TLTime, unicode_default=u'indefinite')
    
    advAuto = property(__advAuto.value, __advAuto.set, None, u'Auto Advance Time')

    
    # Attribute autoUpdateAnimBg uses Python identifier autoUpdateAnimBg
    __autoUpdateAnimBg = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoUpdateAnimBg'), 'autoUpdateAnimBg', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLBuildParagraph_autoUpdateAnimBg', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoUpdateAnimBg = property(__autoUpdateAnimBg.value, __autoUpdateAnimBg.set, None, u'Auto Update Animation Background')

    
    # Attribute uiExpand uses Python identifier uiExpand
    __uiExpand = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uiExpand'), 'uiExpand', '__httpschemas_openxmlformats_orgpresentationml2006main_CT_TLBuildParagraph_uiExpand', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    uiExpand = property(__uiExpand.value, __uiExpand.set, None, u'Expand UI')


    _ElementMap = {
        __tmplLst.name() : __tmplLst
    }
    _AttributeMap = {
        __spid.name() : __spid,
        __animBg.name() : __animBg,
        __bldLvl.name() : __bldLvl,
        __build.name() : __build,
        __rev.name() : __rev,
        __grpId.name() : __grpId,
        __advAuto.name() : __advAuto,
        __autoUpdateAnimBg.name() : __autoUpdateAnimBg,
        __uiExpand.name() : __uiExpand
    }
_Namespace_.addCategoryObject('typeBinding', u'CT_TLBuildParagraph', CT_TLBuildParagraph)


# Complex type CT_AdjLst with content type ELEMENT_ONLY
class CT_AdjLst (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_AdjLst')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}adj uses Python identifier adj
    __adj = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'adj'), 'adj', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_AdjLst_httpschemas_openxmlformats_orgdrawingml2006diagramadj', True)

    
    adj = property(__adj.value, __adj.set, None, u'Shape Adjust')


    _ElementMap = {
        __adj.name() : __adj
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_AdjLst', CT_AdjLst)


sldMaster = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldMaster'), CT_SlideMaster, documentation=u'Slide Master')
_Namespace_.addCategoryObject('elementBinding', sldMaster.name().localName(), sldMaster)

styleDefHdr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'styleDefHdr'), CT_StyleDefinitionHeader, documentation=u'Style Definition Header')
_Namespace.addCategoryObject('elementBinding', styleDefHdr.name().localName(), styleDefHdr)

layoutDefHdr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutDefHdr'), CT_DiagramDefinitionHeader, documentation=u'Layout Definition Header')
_Namespace.addCategoryObject('elementBinding', layoutDefHdr.name().localName(), layoutDefHdr)

notes = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'notes'), CT_NotesSlide, documentation=u'Notes Slide')
_Namespace_.addCategoryObject('elementBinding', notes.name().localName(), notes)

styleDef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'styleDef'), CT_StyleDefinition, documentation=u'Style Definition')
_Namespace.addCategoryObject('elementBinding', styleDef.name().localName(), styleDef)

cmAuthorLst = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cmAuthorLst'), CT_CommentAuthorList, documentation=u'List of Comment Authors')
_Namespace_.addCategoryObject('elementBinding', cmAuthorLst.name().localName(), cmAuthorLst)

viewPr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'viewPr'), CT_ViewProperties, documentation=u'Presentation-wide View Properties')
_Namespace_.addCategoryObject('elementBinding', viewPr.name().localName(), viewPr)

themeOverride = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'themeOverride'), CT_BaseStylesOverride, documentation=u'Theme Override')
_Namespace_a.addCategoryObject('elementBinding', themeOverride.name().localName(), themeOverride)

graphic = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'graphic'), CT_GraphicalObject, documentation=u'Graphic Object')
_Namespace_a.addCategoryObject('elementBinding', graphic.name().localName(), graphic)

layoutDef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutDef'), CT_DiagramDefinition, documentation=u'Layout Definition')
_Namespace.addCategoryObject('elementBinding', layoutDef.name().localName(), layoutDef)

tblStyleLst = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tblStyleLst'), CT_TableStyleList, documentation=u'Table Style List')
_Namespace_a.addCategoryObject('elementBinding', tblStyleLst.name().localName(), tblStyleLst)

videoFile = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'videoFile'), CT_VideoFile)
_Namespace_a.addCategoryObject('elementBinding', videoFile.name().localName(), videoFile)

dataModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'dataModel'), CT_DataModel, documentation=u'Data Model')
_Namespace.addCategoryObject('elementBinding', dataModel.name().localName(), dataModel)

tbl = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tbl'), CT_Table, documentation=u'Table')
_Namespace_a.addCategoryObject('elementBinding', tbl.name().localName(), tbl)

presentation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'presentation'), CT_Presentation, documentation=u'Presentation')
_Namespace_.addCategoryObject('elementBinding', presentation.name().localName(), presentation)

themeManager = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'themeManager'), CT_EmptyElement, documentation=u'Theme Manager')
_Namespace_a.addCategoryObject('elementBinding', themeManager.name().localName(), themeManager)

oleObj = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'oleObj'), CT_OleObject, documentation=u'Global Element for Embedded objects and Controls')
_Namespace_.addCategoryObject('elementBinding', oleObj.name().localName(), oleObj)

theme = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'theme'), CT_OfficeStyleSheet, documentation=u'Theme')
_Namespace_a.addCategoryObject('elementBinding', theme.name().localName(), theme)

notesMaster = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'notesMaster'), CT_NotesMaster, documentation=u'Notes Master')
_Namespace_.addCategoryObject('elementBinding', notesMaster.name().localName(), notesMaster)

tagLst = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'tagLst'), CT_TagList, documentation=u'Programmable Tab List')
_Namespace_.addCategoryObject('elementBinding', tagLst.name().localName(), tagLst)

sldLayout = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldLayout'), CT_SlideLayout, documentation=u'Slide Layout')
_Namespace_.addCategoryObject('elementBinding', sldLayout.name().localName(), sldLayout)

sld = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sld'), CT_Slide, documentation=u'Presentation Slide')
_Namespace_.addCategoryObject('elementBinding', sld.name().localName(), sld)

relIds = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'relIds'), CT_RelIds, documentation=u'Explicit Relationships to Diagram Parts')
_Namespace.addCategoryObject('elementBinding', relIds.name().localName(), relIds)

colorsDefHdrLst = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'colorsDefHdrLst'), CT_ColorTransformHeaderLst, documentation=u'Color Transform Header List')
_Namespace.addCategoryObject('elementBinding', colorsDefHdrLst.name().localName(), colorsDefHdrLst)

blip = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blip'), CT_Blip)
_Namespace_a.addCategoryObject('elementBinding', blip.name().localName(), blip)

colorsDefHdr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'colorsDefHdr'), CT_ColorTransformHeader, documentation=u'Color Transform Header')
_Namespace.addCategoryObject('elementBinding', colorsDefHdr.name().localName(), colorsDefHdr)

cmLst = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cmLst'), CT_CommentList, documentation=u'Comment List')
_Namespace_.addCategoryObject('elementBinding', cmLst.name().localName(), cmLst)

handoutMaster = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'handoutMaster'), CT_HandoutMaster, documentation=u'Handout Master')
_Namespace_.addCategoryObject('elementBinding', handoutMaster.name().localName(), handoutMaster)

colorsDef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'colorsDef'), CT_ColorTransform, documentation=u'Color Transform Definitions')
_Namespace.addCategoryObject('elementBinding', colorsDef.name().localName(), colorsDef)

styleDefHdrLst = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'styleDefHdrLst'), CT_StyleDefinitionHeaderLst, documentation=u'List of Style Definition Headers')
_Namespace.addCategoryObject('elementBinding', styleDefHdrLst.name().localName(), styleDefHdrLst)

layoutDefHdrLst = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutDefHdrLst'), CT_DiagramDefinitionHeaderLst, documentation=u'Diagram Layout Header List')
_Namespace.addCategoryObject('elementBinding', layoutDefHdrLst.name().localName(), layoutDefHdrLst)

presentationPr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'presentationPr'), CT_PresentationProperties, documentation=u'Presentation-wide Properties')
_Namespace_.addCategoryObject('elementBinding', presentationPr.name().localName(), presentationPr)

sldSyncPr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldSyncPr'), CT_SlideSyncProperties, documentation=u'Slide Synchronization Properties')
_Namespace_.addCategoryObject('elementBinding', sldSyncPr.name().localName(), sldSyncPr)



CT_TextBody._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'p'), CT_TextParagraph, scope=CT_TextBody, documentation=u'Text Paragraphs'))

CT_TextBody._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bodyPr'), CT_TextBodyProperties, scope=CT_TextBody, documentation=u'Body Properties'))

CT_TextBody._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lstStyle'), CT_TextListStyle, scope=CT_TextBody, documentation=u'Text List Styles'))
CT_TextBody._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextBody._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bodyPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextBody._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lstStyle')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextBody._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'p')), min_occurs=1L, max_occurs=None)
    )
CT_TextBody._ContentModel = pyxb.binding.content.ParticleModel(CT_TextBody._GroupModel, min_occurs=1, max_occurs=1)



CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spcBef'), CT_TextSpacing, scope=CT_TextParagraphProperties, documentation=u'Space Before'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnSpc'), CT_TextSpacing, scope=CT_TextParagraphProperties, documentation=u'Line Spacing'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buNone'), CT_TextNoBullet, scope=CT_TextParagraphProperties, documentation=u'No Bullet'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buClr'), CT_Color, scope=CT_TextParagraphProperties, documentation=u'Color Specified'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spcAft'), CT_TextSpacing, scope=CT_TextParagraphProperties, documentation=u'Space After'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buAutoNum'), CT_TextAutonumberBullet, scope=CT_TextParagraphProperties, documentation=u'Auto-Numbered Bullet'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buClrTx'), CT_TextBulletColorFollowText, scope=CT_TextParagraphProperties, documentation=u'Follow Text'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buChar'), CT_TextCharBullet, scope=CT_TextParagraphProperties, documentation=u'Character Bullet'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzPct'), CT_TextBulletSizePercent, scope=CT_TextParagraphProperties, documentation=u'Bullet Size Percentage'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TextParagraphProperties))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buFontTx'), CT_TextBulletTypefaceFollowText, scope=CT_TextParagraphProperties, documentation=u'Follow text'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzPts'), CT_TextBulletSizePoint, scope=CT_TextParagraphProperties, documentation=u'Bullet Size Points'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tabLst'), CT_TextTabStopList, scope=CT_TextParagraphProperties, documentation=u'Tab List'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buFont'), CT_TextFont, scope=CT_TextParagraphProperties, documentation=u'Specified'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'defRPr'), CT_TextCharacterProperties, scope=CT_TextParagraphProperties, documentation=u'Default Text Run Properties'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buBlip'), CT_TextBlipBullet, scope=CT_TextParagraphProperties, documentation=u'Picture Bullet'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzTx'), CT_TextBulletSizeFollowText, scope=CT_TextParagraphProperties, documentation=u'Bullet Size Follows Text'))
CT_TextParagraphProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buClrTx')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buClr')), min_occurs=1L, max_occurs=1L)
    )
CT_TextParagraphProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzTx')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzPct')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzPts')), min_occurs=1, max_occurs=1)
    )
CT_TextParagraphProperties._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buFontTx')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buFont')), min_occurs=1, max_occurs=1)
    )
CT_TextParagraphProperties._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buNone')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buAutoNum')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buChar')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buBlip')), min_occurs=1, max_occurs=1)
    )
CT_TextParagraphProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnSpc')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spcBef')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spcAft')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._GroupModel_3, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._GroupModel_4, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tabLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'defRPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TextParagraphProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorMRU._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_ColorMRU, documentation=u'RGB Color Model - Hex Variant'))

CT_ColorMRU._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_ColorMRU, documentation=u'RGB Color Model - Percentage Variant'))

CT_ColorMRU._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_ColorMRU, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_ColorMRU._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_ColorMRU, documentation=u'Scheme Color'))

CT_ColorMRU._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_ColorMRU, documentation=u'Preset Color'))

CT_ColorMRU._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_ColorMRU, documentation=u'System Color'))
CT_ColorMRU._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ColorMRU._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorMRU._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorMRU._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorMRU._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorMRU._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorMRU._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_ColorMRU._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorMRU._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_ColorMRU._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorMRU._GroupModel, min_occurs=1, max_occurs=1)



CT_OfficeArtExtensionList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ext'), CT_OfficeArtExtension, scope=CT_OfficeArtExtensionList, documentation=u'Extension'))
CT_OfficeArtExtensionList._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OfficeArtExtensionList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ext')), min_occurs=0L, max_occurs=None)
    )
CT_OfficeArtExtensionList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OfficeArtExtensionList._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_OfficeArtExtensionList._ContentModel = pyxb.binding.content.ParticleModel(CT_OfficeArtExtensionList._GroupModel, min_occurs=1, max_occurs=1)



CT_TLTimeConditionList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cond'), CT_TLTimeCondition, scope=CT_TLTimeConditionList, documentation=u'Condition'))
CT_TLTimeConditionList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLTimeConditionList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cond')), min_occurs=1L, max_occurs=None)
    )
CT_TLTimeConditionList._ContentModel = pyxb.binding.content.ParticleModel(CT_TLTimeConditionList._GroupModel, min_occurs=1, max_occurs=1)



CT_SlideMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldLayoutIdLst'), CT_SlideLayoutIdList, scope=CT_SlideMaster, documentation=u'List of Slide Layouts'))

CT_SlideMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cSld'), CT_CommonSlideData, scope=CT_SlideMaster, documentation=u'Common slide data for slide masters'))

CT_SlideMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'transition'), CT_SlideTransition, scope=CT_SlideMaster, documentation=u'Slide Transition for a Slide Master'))

CT_SlideMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'timing'), CT_SlideTiming, scope=CT_SlideMaster, documentation=u'Slide Timing Information for Slide Masters'))

CT_SlideMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'clrMap'), CT_ColorMapping, scope=CT_SlideMaster, documentation=u'Color Scheme Map'))

CT_SlideMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'hf'), CT_HeaderFooter, scope=CT_SlideMaster, documentation=u'Header/Footer information for a slide master'))

CT_SlideMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'txStyles'), CT_SlideMasterTextStyles, scope=CT_SlideMaster, documentation=u'Slide Master Text Styles'))

CT_SlideMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_SlideMaster))
CT_SlideMaster._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'clrMap')), min_occurs=1L, max_occurs=1L)
    )
CT_SlideMaster._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cSld')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideMaster._GroupModel_, min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sldLayoutIdLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'transition')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'timing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'hf')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'txStyles')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_SlideMaster._ContentModel = pyxb.binding.content.ParticleModel(CT_SlideMaster._GroupModel, min_occurs=1L, max_occurs=1L)



CT_HandoutMasterIdList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'handoutMasterId'), CT_HandoutMasterIdListEntry, scope=CT_HandoutMasterIdList, documentation=u'Handout Master ID'))
CT_HandoutMasterIdList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_HandoutMasterIdList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'handoutMasterId')), min_occurs=0L, max_occurs=1L)
    )
CT_HandoutMasterIdList._ContentModel = pyxb.binding.content.ParticleModel(CT_HandoutMasterIdList._GroupModel, min_occurs=1, max_occurs=1)



CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tailEnd'), CT_LineEndProperties, scope=CT_LineProperties, documentation=u'Tail line end style'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_LineProperties, documentation=u'Gradient Fill'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_LineProperties))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_LineProperties))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'round'), CT_LineJoinRound, scope=CT_LineProperties, documentation=u'Round Line Join'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstDash'), CT_PresetLineDashProperties, scope=CT_LineProperties, documentation=u'Preset Dash'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_LineProperties, documentation=u'No Fill'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'custDash'), CT_DashStopList, scope=CT_LineProperties, documentation=u'Custom Dash'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'miter'), CT_LineJoinMiterProperties, scope=CT_LineProperties, documentation=u'Miter Line Join'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bevel'), CT_LineJoinBevel, scope=CT_LineProperties, documentation=u'Line Join Bevel'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_LineProperties, documentation=u'Solid Fill'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'headEnd'), CT_LineEndProperties, scope=CT_LineProperties, documentation=u'Line Head/End Style'))
CT_LineProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L)
    )
CT_LineProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstDash')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'custDash')), min_occurs=1L, max_occurs=1L)
    )
CT_LineProperties._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'round')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bevel')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'miter')), min_occurs=1L, max_occurs=1L)
    )
CT_LineProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_LineProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._GroupModel_3, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'headEnd')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tailEnd')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_LineProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_LineProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_GradientFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tileRect'), CT_RelativeRect, scope=CT_GradientFillProperties, documentation=u'Tile Rectangle'))

CT_GradientFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gsLst'), CT_GradientStopList, scope=CT_GradientFillProperties, documentation=u'Gradient Stop List'))

CT_GradientFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'path'), CT_PathShadeProperties, scope=CT_GradientFillProperties, documentation=u'Path Gradient'))

CT_GradientFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lin'), CT_LinearShadeProperties, scope=CT_GradientFillProperties, documentation=u'Linear Gradient Fill'))
CT_GradientFillProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GradientFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lin')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'path')), min_occurs=1L, max_occurs=1L)
    )
CT_GradientFillProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GradientFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gsLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientFillProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tileRect')), min_occurs=0L, max_occurs=1L)
    )
CT_GradientFillProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_GradientFillProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TextListStyle))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl5pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 5 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'defPPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'Default Paragraph Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl6pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 6 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl1pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 1 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl4pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 4 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl7pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 7 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl2pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 2 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl8pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 8 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl3pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 3 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl9pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 9 Text Style'))
CT_TextListStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'defPPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl1pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl2pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl3pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl4pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl5pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl6pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl7pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl8pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl9pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TextListStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_TextListStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_TextBlipBullet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blip'), CT_Blip, scope=CT_TextBlipBullet, documentation=u'Blip'))
CT_TextBlipBullet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextBlipBullet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blip')), min_occurs=1L, max_occurs=1L)
    )
CT_TextBlipBullet._ContentModel = pyxb.binding.content.ParticleModel(CT_TextBlipBullet._GroupModel, min_occurs=1, max_occurs=1)



CT_ExtensionList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'ext'), CT_Extension, scope=CT_ExtensionList, documentation=u'Extension'))
CT_ExtensionList._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ExtensionList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'ext')), min_occurs=0L, max_occurs=None)
    )
CT_ExtensionList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ExtensionList._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_ExtensionList._ContentModel = pyxb.binding.content.ParticleModel(CT_ExtensionList._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomerDataList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'tags'), CT_TagsData, scope=CT_CustomerDataList, documentation=u'Customer Data Tags'))

CT_CustomerDataList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'custData'), CT_CustomerData, scope=CT_CustomerDataList, documentation=u'Customer Data'))
CT_CustomerDataList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomerDataList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'custData')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CustomerDataList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'tags')), min_occurs=0L, max_occurs=1L)
    )
CT_CustomerDataList._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomerDataList._GroupModel, min_occurs=0L, max_occurs=1L)



CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_PositiveFixedPercentage, scope=CT_PresetColor, documentation=u'Tint'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), CT_PositiveFixedPercentage, scope=CT_PresetColor, documentation=u'Shade'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), CT_PositivePercentage, scope=CT_PresetColor, documentation=u'Hue Modulate'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), CT_Percentage, scope=CT_PresetColor, documentation=u'Blue'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), CT_InverseTransform, scope=CT_PresetColor, documentation=u'Inverse'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), CT_GrayscaleTransform, scope=CT_PresetColor, documentation=u'Gray'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), CT_Percentage, scope=CT_PresetColor, documentation=u'Blue Modification'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), CT_PositiveFixedPercentage, scope=CT_PresetColor, documentation=u'Alpha'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), CT_FixedPercentage, scope=CT_PresetColor, documentation=u'Alpha Offset'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_PositivePercentage, scope=CT_PresetColor, documentation=u'Alpha Modulation'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), CT_PositiveFixedAngle, scope=CT_PresetColor, documentation=u'Hue'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), CT_Percentage, scope=CT_PresetColor, documentation=u'Blue Offset'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), CT_Angle, scope=CT_PresetColor, documentation=u'Hue Offset'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), CT_Percentage, scope=CT_PresetColor, documentation=u'Green Offset'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), CT_Percentage, scope=CT_PresetColor, documentation=u'Saturation'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), CT_Percentage, scope=CT_PresetColor, documentation=u'Saturation Offset'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), CT_Percentage, scope=CT_PresetColor, documentation=u'Green'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_Percentage, scope=CT_PresetColor, documentation=u'Luminance'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), CT_Percentage, scope=CT_PresetColor, documentation=u'Saturation Modulation'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), CT_GammaTransform, scope=CT_PresetColor, documentation=u'Gamma'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), CT_Percentage, scope=CT_PresetColor, documentation=u'Luminance Offset'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), CT_Percentage, scope=CT_PresetColor, documentation=u'Green Modification'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), CT_Percentage, scope=CT_PresetColor, documentation=u'Luminance Modulation'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), CT_Percentage, scope=CT_PresetColor, documentation=u'Red'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), CT_Percentage, scope=CT_PresetColor, documentation=u'Red Offset'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), CT_InverseGammaTransform, scope=CT_PresetColor, documentation=u'Inverse Gamma'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), CT_Percentage, scope=CT_PresetColor, documentation=u'Red Modulation'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), CT_ComplementTransform, scope=CT_PresetColor, documentation=u'Complement'))
CT_PresetColor._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'shade')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'comp')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'inv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gray')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sat')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'red')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'green')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma')), min_occurs=1L, max_occurs=1L)
    )
CT_PresetColor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PresetColor._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_PresetColor._ContentModel = pyxb.binding.content.ParticleModel(CT_PresetColor._GroupModel, min_occurs=1, max_occurs=1)



CT_PatternFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bgClr'), CT_Color, scope=CT_PatternFillProperties, documentation=u'Background color'))

CT_PatternFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fgClr'), CT_Color, scope=CT_PatternFillProperties, documentation=u'Foreground color'))
CT_PatternFillProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PatternFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fgClr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PatternFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bgClr')), min_occurs=0L, max_occurs=1L)
    )
CT_PatternFillProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_PatternFillProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_StyleDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_StyleDefinitionHeader))

CT_StyleDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'title'), CT_SDName, scope=CT_StyleDefinitionHeader, documentation=u'Title'))

CT_StyleDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), CT_SDCategories, scope=CT_StyleDefinitionHeader, documentation=u'Category List'))

CT_StyleDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'desc'), CT_SDDescription, scope=CT_StyleDefinitionHeader, documentation=u'Style Label Description'))
CT_StyleDefinitionHeader._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_StyleDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'title')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_StyleDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'desc')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_StyleDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'catLst')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_StyleDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_StyleDefinitionHeader._ContentModel = pyxb.binding.content.ParticleModel(CT_StyleDefinitionHeader._GroupModel, min_occurs=1, max_occurs=1)



CT_TableStyleCellStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cell3D'), CT_Cell3D, scope=CT_TableStyleCellStyle))

CT_TableStyleCellStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tcBdr'), CT_TableCellBorderStyle, scope=CT_TableStyleCellStyle, documentation=u'Table Cell Borders'))

CT_TableStyleCellStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef'), CT_StyleMatrixReference, scope=CT_TableStyleCellStyle, documentation=u'Fill Reference'))

CT_TableStyleCellStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fill'), CT_FillProperties, scope=CT_TableStyleCellStyle, documentation=u'Fill'))
CT_TableStyleCellStyle._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableStyleCellStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleCellStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef')), min_occurs=1L, max_occurs=1L)
    )
CT_TableStyleCellStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableStyleCellStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tcBdr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleCellStyle._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleCellStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cell3D')), min_occurs=0L, max_occurs=1L)
    )
CT_TableStyleCellStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_TableStyleCellStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_GlowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_GlowEffect, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_GlowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_GlowEffect, documentation=u'RGB Color Model - Hex Variant'))

CT_GlowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_GlowEffect, documentation=u'System Color'))

CT_GlowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_GlowEffect, documentation=u'Scheme Color'))

CT_GlowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_GlowEffect, documentation=u'RGB Color Model - Percentage Variant'))

CT_GlowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_GlowEffect, documentation=u'Preset Color'))
CT_GlowEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GlowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GlowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GlowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GlowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GlowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GlowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_GlowEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GlowEffect._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_GlowEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_GlowEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_Shape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Shape))

CT_Shape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'adjLst'), CT_AdjLst, scope=CT_Shape, documentation=u'Shape Adjust List'))
CT_Shape._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Shape._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'adjLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Shape._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Shape._ContentModel = pyxb.binding.content.ParticleModel(CT_Shape._GroupModel, min_occurs=1, max_occurs=1)



CT_Constraints._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'constr'), CT_Constraint, scope=CT_Constraints, documentation=u'Constraint'))
CT_Constraints._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Constraints._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'constr')), min_occurs=0L, max_occurs=None)
    )
CT_Constraints._ContentModel = pyxb.binding.content.ParticleModel(CT_Constraints._GroupModel, min_occurs=1, max_occurs=1)



CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'choose'), CT_Choose, scope=CT_When, documentation=u'Choose Element'))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), CT_LayoutNode, scope=CT_When, documentation=u'Layout Node'))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_When))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'shape'), CT_Shape, scope=CT_When, documentation=u'Shape'))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), CT_PresentationOf, scope=CT_When, documentation=u'Presentation Of'))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'alg'), CT_Algorithm, scope=CT_When, documentation=u'Algorithm'))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), CT_Constraints, scope=CT_When, documentation=u'Constraint List'))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), CT_Rules, scope=CT_When, documentation=u'Rule List'))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), CT_ForEach, scope=CT_When, documentation=u'For Each'))
CT_When._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'alg')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'shape')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'presOf')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'constrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'forEach')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'choose')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_When._ContentModel = pyxb.binding.content.ParticleModel(CT_When._GroupModel, min_occurs=0L, max_occurs=None)



CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fill'), CT_FillEffect, scope=CT_EffectContainer, documentation=u'Fill'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay'), CT_FillOverlayEffect, scope=CT_EffectContainer, documentation=u'Fill Overlay Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_TintEffect, scope=CT_EffectContainer))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'glow'), CT_GlowEffect, scope=CT_EffectContainer, documentation=u'Glow Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstShdw'), CT_PresetShadowEffect, scope=CT_EffectContainer, documentation=u'Preset Shadow'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grayscl'), CT_GrayscaleEffect, scope=CT_EffectContainer, documentation=u'Gray Scale Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hsl'), CT_HSLEffect, scope=CT_EffectContainer, documentation=u'Hue Saturation Luminance Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cont'), CT_EffectContainer, scope=CT_EffectContainer, documentation=u'Effect Container'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effect'), CT_EffectReference, scope=CT_EffectContainer, documentation=u'Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), CT_TransformEffect, scope=CT_EffectContainer, documentation=u'Transform Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'outerShdw'), CT_OuterShadowEffect, scope=CT_EffectContainer, documentation=u'Outer Shadow Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaCeiling'), CT_AlphaCeilingEffect, scope=CT_EffectContainer, documentation=u'Alpha Ceiling Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'innerShdw'), CT_InnerShadowEffect, scope=CT_EffectContainer, documentation=u'Inner Shadow Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'reflection'), CT_ReflectionEffect, scope=CT_EffectContainer, documentation=u'Reflection Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaInv'), CT_AlphaInverseEffect, scope=CT_EffectContainer, documentation=u'Alpha Inverse Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'softEdge'), CT_SoftEdgesEffect, scope=CT_EffectContainer, documentation=u'Soft Edge Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaFloor'), CT_AlphaFloorEffect, scope=CT_EffectContainer, documentation=u'Alpha Floor Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaModFix'), CT_AlphaModulateFixedEffect, scope=CT_EffectContainer))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'relOff'), CT_RelativeOffsetEffect, scope=CT_EffectContainer, documentation=u'Relative Offset Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOutset'), CT_AlphaOutsetEffect, scope=CT_EffectContainer, documentation=u'Alpha Inset/Outset Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_AlphaModulateEffect, scope=CT_EffectContainer, documentation=u'Alpha Modulate Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_LuminanceEffect, scope=CT_EffectContainer, documentation=u'Luminance'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaRepl'), CT_AlphaReplaceEffect, scope=CT_EffectContainer, documentation=u'Alpha Replace Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'duotone'), CT_DuotoneEffect, scope=CT_EffectContainer, documentation=u'Duotone Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaBiLevel'), CT_AlphaBiLevelEffect, scope=CT_EffectContainer))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'biLevel'), CT_BiLevelEffect, scope=CT_EffectContainer))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blend'), CT_BlendEffect, scope=CT_EffectContainer, documentation=u'Blend Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blur'), CT_BlurEffect, scope=CT_EffectContainer))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrChange'), CT_ColorChangeEffect, scope=CT_EffectContainer, documentation=u'Color Change Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrRepl'), CT_ColorReplaceEffect, scope=CT_EffectContainer))
CT_EffectContainer._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cont')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effect')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaBiLevel')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaCeiling')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaFloor')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaInv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaModFix')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOutset')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaRepl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'biLevel')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blend')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blur')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrChange')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrRepl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'duotone')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'glow')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grayscl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hsl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'innerShdw')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'outerShdw')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstShdw')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'reflection')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'relOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'softEdge')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm')), min_occurs=1L, max_occurs=1L)
    )
CT_EffectContainer._ContentModel = pyxb.binding.content.ParticleModel(CT_EffectContainer._GroupModel, min_occurs=0L, max_occurs=None)



CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), CT_InverseGammaTransform, scope=CT_SystemColor, documentation=u'Inverse Gamma'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_PositivePercentage, scope=CT_SystemColor, documentation=u'Alpha Modulation'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), CT_PositiveFixedAngle, scope=CT_SystemColor, documentation=u'Hue'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), CT_Percentage, scope=CT_SystemColor, documentation=u'Green Offset'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), CT_Angle, scope=CT_SystemColor, documentation=u'Hue Offset'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), CT_PositivePercentage, scope=CT_SystemColor, documentation=u'Hue Modulate'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), CT_PositiveFixedPercentage, scope=CT_SystemColor, documentation=u'Shade'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), CT_PositiveFixedPercentage, scope=CT_SystemColor, documentation=u'Alpha'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), CT_Percentage, scope=CT_SystemColor, documentation=u'Saturation Offset'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), CT_Percentage, scope=CT_SystemColor, documentation=u'Saturation Modulation'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_Percentage, scope=CT_SystemColor, documentation=u'Luminance'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), CT_Percentage, scope=CT_SystemColor, documentation=u'Luminance Offset'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), CT_Percentage, scope=CT_SystemColor, documentation=u'Luminance Modulation'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), CT_Percentage, scope=CT_SystemColor, documentation=u'Red'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), CT_Percentage, scope=CT_SystemColor, documentation=u'Red Offset'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), CT_Percentage, scope=CT_SystemColor, documentation=u'Red Modulation'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), CT_FixedPercentage, scope=CT_SystemColor, documentation=u'Alpha Offset'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), CT_Percentage, scope=CT_SystemColor, documentation=u'Green'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), CT_Percentage, scope=CT_SystemColor, documentation=u'Blue'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_PositiveFixedPercentage, scope=CT_SystemColor, documentation=u'Tint'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), CT_Percentage, scope=CT_SystemColor, documentation=u'Green Modification'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), CT_GrayscaleTransform, scope=CT_SystemColor, documentation=u'Gray'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), CT_ComplementTransform, scope=CT_SystemColor, documentation=u'Complement'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), CT_InverseTransform, scope=CT_SystemColor, documentation=u'Inverse'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), CT_Percentage, scope=CT_SystemColor, documentation=u'Saturation'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), CT_Percentage, scope=CT_SystemColor, documentation=u'Blue Modification'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), CT_Percentage, scope=CT_SystemColor, documentation=u'Blue Offset'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), CT_GammaTransform, scope=CT_SystemColor, documentation=u'Gamma'))
CT_SystemColor._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'shade')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'comp')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'inv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gray')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sat')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'red')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'green')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma')), min_occurs=1L, max_occurs=1L)
    )
CT_SystemColor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SystemColor._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_SystemColor._ContentModel = pyxb.binding.content.ParticleModel(CT_SystemColor._GroupModel, min_occurs=1, max_occurs=1)



CT_HandoutMasterIdListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_HandoutMasterIdListEntry))
CT_HandoutMasterIdListEntry._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_HandoutMasterIdListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_HandoutMasterIdListEntry._ContentModel = pyxb.binding.content.ParticleModel(CT_HandoutMasterIdListEntry._GroupModel, min_occurs=1, max_occurs=1)



CT_Background._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'bgPr'), CT_BackgroundProperties, scope=CT_Background, documentation=u'Background Properties'))

CT_Background._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'bgRef'), CT_StyleMatrixReference, scope=CT_Background, documentation=u'Background Style Reference'))
CT_Background._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Background._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'bgPr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Background._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'bgRef')), min_occurs=1, max_occurs=1)
    )
CT_Background._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Background._GroupModel_, min_occurs=1, max_occurs=1)
    )
CT_Background._ContentModel = pyxb.binding.content.ParticleModel(CT_Background._GroupModel, min_occurs=1, max_occurs=1)



CT_CommonSlideData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_CommonSlideData))

CT_CommonSlideData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'bg'), CT_Background, scope=CT_CommonSlideData, documentation=u'Slide Background'))

CT_CommonSlideData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'spTree'), CT_GroupShape, scope=CT_CommonSlideData, documentation=u'Shape Tree'))

CT_CommonSlideData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'controls'), CT_ControlList, scope=CT_CommonSlideData, documentation=u'List of controls'))

CT_CommonSlideData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'custDataLst'), CT_CustomerDataList, scope=CT_CommonSlideData, documentation=u'Customer Data List'))
CT_CommonSlideData._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CommonSlideData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'bg')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CommonSlideData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'spTree')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CommonSlideData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'custDataLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CommonSlideData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'controls')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CommonSlideData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_CommonSlideData._ContentModel = pyxb.binding.content.ParticleModel(CT_CommonSlideData._GroupModel, min_occurs=1, max_occurs=1)



CT_DiagramDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_DiagramDefinitionHeader))

CT_DiagramDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'title'), CT_Name, scope=CT_DiagramDefinitionHeader, documentation=u'Title'))

CT_DiagramDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'desc'), CT_Description, scope=CT_DiagramDefinitionHeader, documentation=u'Description'))

CT_DiagramDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), CT_Categories, scope=CT_DiagramDefinitionHeader, documentation=u'Category List'))
CT_DiagramDefinitionHeader._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DiagramDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'title')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'desc')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'catLst')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_DiagramDefinitionHeader._ContentModel = pyxb.binding.content.ParticleModel(CT_DiagramDefinitionHeader._GroupModel, min_occurs=1, max_occurs=1)



CT_Scene3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Scene3D))

CT_Scene3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'camera'), CT_Camera, scope=CT_Scene3D, documentation=u'Camera'))

CT_Scene3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lightRig'), CT_LightRig, scope=CT_Scene3D, documentation=u'Light Rig'))

CT_Scene3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'backdrop'), CT_Backdrop, scope=CT_Scene3D, documentation=u'Backdrop Plane'))
CT_Scene3D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Scene3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'camera')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Scene3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lightRig')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Scene3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'backdrop')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Scene3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Scene3D._ContentModel = pyxb.binding.content.ParticleModel(CT_Scene3D._GroupModel, min_occurs=1, max_occurs=1)



CT_StretchInfoProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRect'), CT_RelativeRect, scope=CT_StretchInfoProperties, documentation=u'Fill Rectangle'))
CT_StretchInfoProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_StretchInfoProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRect')), min_occurs=0L, max_occurs=1L)
    )
CT_StretchInfoProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_StretchInfoProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_ThemeableLineStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), CT_LineProperties, scope=CT_ThemeableLineStyle))

CT_ThemeableLineStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnRef'), CT_StyleMatrixReference, scope=CT_ThemeableLineStyle, documentation=u'Line Reference'))
CT_ThemeableLineStyle._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ThemeableLineStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ln')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ThemeableLineStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnRef')), min_occurs=1L, max_occurs=1L)
    )
CT_ThemeableLineStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_ThemeableLineStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_GraphicalObjectFrameNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'nvPr'), CT_ApplicationNonVisualDrawingProps, scope=CT_GraphicalObjectFrameNonVisual, documentation=u'Application Non-Visual Drawing Properties'))

CT_GraphicalObjectFrameNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPr'), CT_NonVisualDrawingProps, scope=CT_GraphicalObjectFrameNonVisual, documentation=u'Non-Visual Drawing Properties'))

CT_GraphicalObjectFrameNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cNvGraphicFramePr'), CT_NonVisualGraphicFrameProperties, scope=CT_GraphicalObjectFrameNonVisual, documentation=u'Non-Visual Graphic Frame Drawing Properties'))
CT_GraphicalObjectFrameNonVisual._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GraphicalObjectFrameNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GraphicalObjectFrameNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cNvGraphicFramePr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GraphicalObjectFrameNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'nvPr')), min_occurs=1L, max_occurs=1L)
    )
CT_GraphicalObjectFrameNonVisual._ContentModel = pyxb.binding.content.ParticleModel(CT_GraphicalObjectFrameNonVisual._GroupModel, min_occurs=1, max_occurs=1)



CT_TLAnimVariant._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'boolVal'), CT_TLAnimVariantBooleanVal, scope=CT_TLAnimVariant, documentation=u'Boolean Variant'))

CT_TLAnimVariant._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'intVal'), CT_TLAnimVariantIntegerVal, scope=CT_TLAnimVariant, documentation=u'Integer'))

CT_TLAnimVariant._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'fltVal'), CT_TLAnimVariantFloatVal, scope=CT_TLAnimVariant, documentation=u'Float Value'))

CT_TLAnimVariant._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'strVal'), CT_TLAnimVariantStringVal, scope=CT_TLAnimVariant, documentation=u'String Value'))

CT_TLAnimVariant._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'clrVal'), CT_Color, scope=CT_TLAnimVariant, documentation=u'Color Value'))
CT_TLAnimVariant._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TLAnimVariant._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'boolVal')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLAnimVariant._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'intVal')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLAnimVariant._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'fltVal')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLAnimVariant._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'strVal')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLAnimVariant._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'clrVal')), min_occurs=1, max_occurs=1)
    )
CT_TLAnimVariant._ContentModel = pyxb.binding.content.ParticleModel(CT_TLAnimVariant._GroupModel, min_occurs=1L, max_occurs=1L)



CT_TLSetBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'to'), CT_TLAnimVariant, scope=CT_TLSetBehavior, documentation=u'To'))

CT_TLSetBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), CT_TLCommonBehaviorData, scope=CT_TLSetBehavior, documentation=u'Common Behavior'))
CT_TLSetBehavior._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLSetBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLSetBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'to')), min_occurs=0L, max_occurs=1L)
    )
CT_TLSetBehavior._ContentModel = pyxb.binding.content.ParticleModel(CT_TLSetBehavior._GroupModel, min_occurs=1, max_occurs=1)



CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_TextCharacterProperties))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_TextCharacterProperties))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_TextCharacterProperties, documentation=u'Pattern Fill'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'highlight'), CT_Color, scope=CT_TextCharacterProperties, documentation=u'Highlight Color'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_TextCharacterProperties, documentation=u'Group Fill'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), CT_LineProperties, scope=CT_TextCharacterProperties, documentation=u'Line'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'uLnTx'), CT_TextUnderlineLineFollowText, scope=CT_TextCharacterProperties, documentation=u'Underline Follows Text'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_TextCharacterProperties, documentation=u'Effect Container'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'latin'), CT_TextFont, scope=CT_TextCharacterProperties, documentation=u'Latin Font'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ea'), CT_TextFont, scope=CT_TextCharacterProperties, documentation=u'East Asian Font'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'uLn'), CT_LineProperties, scope=CT_TextCharacterProperties, documentation=u'Underline Stroke'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cs'), CT_TextFont, scope=CT_TextCharacterProperties, documentation=u'Complex Script Font'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sym'), CT_TextFont, scope=CT_TextCharacterProperties, documentation=u'Symbol Font'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkClick'), CT_Hyperlink, scope=CT_TextCharacterProperties, documentation=u'Click Hyperlink'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'rtl'), CT_Boolean, scope=CT_TextCharacterProperties, documentation=u'Right to Left Run'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkMouseOver'), CT_Hyperlink, scope=CT_TextCharacterProperties, documentation=u'Mouse-Over Hyperlink'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_TextCharacterProperties, documentation=u'Effect Container'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TextCharacterProperties))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'uFillTx'), CT_TextUnderlineFillFollowText, scope=CT_TextCharacterProperties, documentation=u'Underline Fill Properties Follow Text'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'uFill'), CT_TextUnderlineFillGroupWrapper, scope=CT_TextCharacterProperties, documentation=u'Underline Fill'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_TextCharacterProperties))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_TextCharacterProperties))
CT_TextCharacterProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_TextCharacterProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_TextCharacterProperties._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'uLnTx')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'uLn')), min_occurs=0L, max_occurs=1L)
    )
CT_TextCharacterProperties._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'uFillTx')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'uFill')), min_occurs=1, max_occurs=1)
    )
CT_TextCharacterProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ln')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'highlight')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._GroupModel_3, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._GroupModel_4, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'latin')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ea')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cs')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sym')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkClick')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkMouseOver')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'rtl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TextCharacterProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_Path2DCubicBezierTo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), CT_AdjPoint2D, scope=CT_Path2DCubicBezierTo, documentation=u'Control points and end point'))
CT_Path2DCubicBezierTo._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Path2DCubicBezierTo._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pt')), min_occurs=3L, max_occurs=3L)
    )
CT_Path2DCubicBezierTo._ContentModel = pyxb.binding.content.ParticleModel(CT_Path2DCubicBezierTo._GroupModel, min_occurs=1, max_occurs=1)



CT_ShapeStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fontRef'), CT_FontReference, scope=CT_ShapeStyle, documentation=u'Font Reference'))

CT_ShapeStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnRef'), CT_StyleMatrixReference, scope=CT_ShapeStyle))

CT_ShapeStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef'), CT_StyleMatrixReference, scope=CT_ShapeStyle))

CT_ShapeStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectRef'), CT_StyleMatrixReference, scope=CT_ShapeStyle))
CT_ShapeStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ShapeStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnRef')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectRef')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fontRef')), min_occurs=1L, max_occurs=1L)
    )
CT_ShapeStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_ShapeStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), CT_FixedPercentage, scope=CT_HslColor, documentation=u'Alpha Offset'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), CT_Percentage, scope=CT_HslColor, documentation=u'Blue Modification'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_PositivePercentage, scope=CT_HslColor, documentation=u'Alpha Modulation'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), CT_PositiveFixedPercentage, scope=CT_HslColor, documentation=u'Alpha'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), CT_Angle, scope=CT_HslColor, documentation=u'Hue Offset'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), CT_PositivePercentage, scope=CT_HslColor, documentation=u'Hue Modulate'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), CT_Percentage, scope=CT_HslColor, documentation=u'Saturation Offset'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), CT_Percentage, scope=CT_HslColor, documentation=u'Saturation Modulation'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_Percentage, scope=CT_HslColor, documentation=u'Luminance'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), CT_Percentage, scope=CT_HslColor, documentation=u'Luminance Offset'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), CT_InverseGammaTransform, scope=CT_HslColor, documentation=u'Inverse Gamma'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), CT_Percentage, scope=CT_HslColor, documentation=u'Red'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), CT_Percentage, scope=CT_HslColor, documentation=u'Blue'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), CT_Percentage, scope=CT_HslColor, documentation=u'Red Offset'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), CT_Percentage, scope=CT_HslColor, documentation=u'Luminance Modulation'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), CT_Percentage, scope=CT_HslColor, documentation=u'Red Modulation'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), CT_Percentage, scope=CT_HslColor, documentation=u'Green'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_PositiveFixedPercentage, scope=CT_HslColor, documentation=u'Tint'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), CT_PositiveFixedPercentage, scope=CT_HslColor, documentation=u'Shade'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), CT_Percentage, scope=CT_HslColor, documentation=u'Saturation'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), CT_Percentage, scope=CT_HslColor, documentation=u'Green Modification'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), CT_Percentage, scope=CT_HslColor, documentation=u'Blue Offset'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), CT_ComplementTransform, scope=CT_HslColor, documentation=u'Complement'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), CT_PositiveFixedAngle, scope=CT_HslColor, documentation=u'Hue'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), CT_InverseTransform, scope=CT_HslColor, documentation=u'Inverse'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), CT_Percentage, scope=CT_HslColor, documentation=u'Green Offset'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), CT_GrayscaleTransform, scope=CT_HslColor, documentation=u'Gray'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), CT_GammaTransform, scope=CT_HslColor, documentation=u'Gamma'))
CT_HslColor._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'shade')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'comp')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'inv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gray')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sat')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'red')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'green')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma')), min_occurs=1L, max_occurs=1L)
    )
CT_HslColor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_HslColor._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_HslColor._ContentModel = pyxb.binding.content.ParticleModel(CT_HslColor._GroupModel, min_occurs=1, max_occurs=1)



CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Saturation Modulation'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Blue'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Luminance Offset'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), CT_FixedPercentage, scope=CT_SchemeColor, documentation=u'Alpha Offset'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Luminance Modulation'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Red'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), CT_InverseGammaTransform, scope=CT_SchemeColor, documentation=u'Inverse Gamma'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Red Offset'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Red Modulation'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Green'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_PositiveFixedPercentage, scope=CT_SchemeColor, documentation=u'Tint'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Green Offset'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Green Modification'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), CT_ComplementTransform, scope=CT_SchemeColor, documentation=u'Complement'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Blue Offset'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Blue Modification'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Saturation Offset'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), CT_GammaTransform, scope=CT_SchemeColor, documentation=u'Gamma'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), CT_GrayscaleTransform, scope=CT_SchemeColor, documentation=u'Gray'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_PositivePercentage, scope=CT_SchemeColor, documentation=u'Alpha Modulation'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Luminance'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), CT_PositiveFixedAngle, scope=CT_SchemeColor, documentation=u'Hue'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), CT_Angle, scope=CT_SchemeColor, documentation=u'Hue Offset'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), CT_PositivePercentage, scope=CT_SchemeColor, documentation=u'Hue Modulate'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), CT_PositiveFixedPercentage, scope=CT_SchemeColor, documentation=u'Alpha'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Saturation'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), CT_InverseTransform, scope=CT_SchemeColor, documentation=u'Inverse'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), CT_PositiveFixedPercentage, scope=CT_SchemeColor, documentation=u'Shade'))
CT_SchemeColor._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'shade')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'comp')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'inv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gray')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sat')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'red')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'green')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma')), min_occurs=1L, max_occurs=1L)
    )
CT_SchemeColor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SchemeColor._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_SchemeColor._ContentModel = pyxb.binding.content.ParticleModel(CT_SchemeColor._GroupModel, min_occurs=1, max_occurs=1)



CT_FillOverlayEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_FillOverlayEffect))

CT_FillOverlayEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_FillOverlayEffect))

CT_FillOverlayEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_FillOverlayEffect))

CT_FillOverlayEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_FillOverlayEffect, documentation=u'Pattern Fill'))

CT_FillOverlayEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_FillOverlayEffect))

CT_FillOverlayEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_FillOverlayEffect, documentation=u'Group Fill'))
CT_FillOverlayEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_FillOverlayEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_FillOverlayEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_TransitionSoundAction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'stSnd'), CT_TransitionStartSoundAction, scope=CT_TransitionSoundAction, documentation=u'Start Sound Action'))

CT_TransitionSoundAction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'endSnd'), CT_Empty, scope=CT_TransitionSoundAction, documentation=u'Stop Sound Action'))
CT_TransitionSoundAction._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TransitionSoundAction._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'stSnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TransitionSoundAction._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'endSnd')), min_occurs=1, max_occurs=1)
    )
CT_TransitionSoundAction._ContentModel = pyxb.binding.content.ParticleModel(CT_TransitionSoundAction._GroupModel, min_occurs=1L, max_occurs=1L)



CT_GvmlPicture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GvmlPicture))

CT_GvmlPicture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'nvPicPr'), CT_GvmlPictureNonVisual, scope=CT_GvmlPicture, documentation=u'Non-Visual Properties for a Picture'))

CT_GvmlPicture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_GvmlPicture, documentation=u'Picture Fill'))

CT_GvmlPicture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), CT_ShapeStyle, scope=CT_GvmlPicture))

CT_GvmlPicture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), CT_ShapeProperties, scope=CT_GvmlPicture, documentation=u'Shape Properties'))
CT_GvmlPicture._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlPicture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'nvPicPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlPicture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlPicture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlPicture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'style')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlPicture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GvmlPicture._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlPicture._GroupModel, min_occurs=1, max_occurs=1)



CT_Cell3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Cell3D))

CT_Cell3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bevel'), CT_Bevel, scope=CT_Cell3D, documentation=u'Bevel'))

CT_Cell3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lightRig'), CT_LightRig, scope=CT_Cell3D, documentation=u'Light Rig'))
CT_Cell3D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Cell3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bevel')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Cell3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lightRig')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Cell3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Cell3D._ContentModel = pyxb.binding.content.ParticleModel(CT_Cell3D._GroupModel, min_occurs=1, max_occurs=1)



CT_Color._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_Color, documentation=u'RGB Color Model - Hex Variant'))

CT_Color._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_Color, documentation=u'System Color'))

CT_Color._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_Color, documentation=u'Scheme Color'))

CT_Color._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_Color, documentation=u'Preset Color'))

CT_Color._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_Color, documentation=u'RGB Color Model - Percentage Variant'))

CT_Color._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_Color, documentation=u'Hue, Saturation, Luminance Color Model'))
CT_Color._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Color._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Color._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Color._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Color._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Color._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Color._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_Color._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Color._GroupModel_, min_occurs=1, max_occurs=1)
    )
CT_Color._ContentModel = pyxb.binding.content.ParticleModel(CT_Color._GroupModel, min_occurs=1, max_occurs=1)



CT_SlideMasterTextStyles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_SlideMasterTextStyles))

CT_SlideMasterTextStyles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'titleStyle'), CT_TextListStyle, scope=CT_SlideMasterTextStyles, documentation=u'Slide Master Title Text Style'))

CT_SlideMasterTextStyles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'bodyStyle'), CT_TextListStyle, scope=CT_SlideMasterTextStyles, documentation=u'Slide Master Body Text Style'))

CT_SlideMasterTextStyles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'otherStyle'), CT_TextListStyle, scope=CT_SlideMasterTextStyles, documentation=u'Slide Master Other Text Style'))
CT_SlideMasterTextStyles._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideMasterTextStyles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'titleStyle')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideMasterTextStyles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'bodyStyle')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideMasterTextStyles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'otherStyle')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideMasterTextStyles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_SlideMasterTextStyles._ContentModel = pyxb.binding.content.ParticleModel(CT_SlideMasterTextStyles._GroupModel, min_occurs=1, max_occurs=1)



CT_EffectStyleItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), CT_Shape3D, scope=CT_EffectStyleItem, documentation=u'3D properties'))

CT_EffectStyleItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_EffectStyleItem, documentation=u'Effect Container'))

CT_EffectStyleItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), CT_Scene3D, scope=CT_EffectStyleItem, documentation=u'3D Scene Properties'))

CT_EffectStyleItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_EffectStyleItem, documentation=u'Effect Container'))
CT_EffectStyleItem._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_EffectStyleItem._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectStyleItem._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_EffectStyleItem._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EffectStyleItem._GroupModel_, min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectStyleItem._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectStyleItem._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d')), min_occurs=0L, max_occurs=1L)
    )
CT_EffectStyleItem._ContentModel = pyxb.binding.content.ParticleModel(CT_EffectStyleItem._GroupModel, min_occurs=1, max_occurs=1)



CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), CT_Scene3D, scope=CT_ShapeProperties))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_ShapeProperties))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_ShapeProperties, documentation=u'Effect Container'))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_ShapeProperties))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_ShapeProperties))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_ShapeProperties))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), CT_LineProperties, scope=CT_ShapeProperties))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_ShapeProperties, documentation=u'Effect Container'))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), CT_Shape3D, scope=CT_ShapeProperties))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ShapeProperties))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'custGeom'), CT_CustomGeometry2D, scope=CT_ShapeProperties, documentation=u'Custom geometry'))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstGeom'), CT_PresetGeometry2D, scope=CT_ShapeProperties, documentation=u'Preset geometry'))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_ShapeProperties, documentation=u'Pattern Fill'))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), CT_Transform2D, scope=CT_ShapeProperties, documentation=u'2D Transform for Individual Objects'))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_ShapeProperties, documentation=u'Group Fill'))
CT_ShapeProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'custGeom')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstGeom')), min_occurs=1L, max_occurs=1L)
    )
CT_ShapeProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_ShapeProperties._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_ShapeProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ln')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._GroupModel_3, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ShapeProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_ShapeProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_Choose._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'else'), CT_Otherwise, scope=CT_Choose, documentation=u'Else'))

CT_Choose._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'if'), CT_When, scope=CT_Choose, documentation=u'If'))
CT_Choose._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Choose._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'if')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Choose._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'else')), min_occurs=0L, max_occurs=1)
    )
CT_Choose._ContentModel = pyxb.binding.content.ParticleModel(CT_Choose._GroupModel, min_occurs=1, max_occurs=1)



CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_BackgroundFormatting))

CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_BackgroundFormatting, documentation=u'Pattern Fill'))

CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_BackgroundFormatting))

CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_BackgroundFormatting, documentation=u'Group Fill'))

CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_BackgroundFormatting, documentation=u'Effect Container'))

CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_BackgroundFormatting))

CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_BackgroundFormatting, documentation=u'Effect Container'))

CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_BackgroundFormatting))
CT_BackgroundFormatting._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_BackgroundFormatting._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_BackgroundFormatting._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._GroupModel_2, min_occurs=0L, max_occurs=1L)
    )
CT_BackgroundFormatting._ContentModel = pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._GroupModel, min_occurs=1, max_occurs=1)



CT_StyleMatrixReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_StyleMatrixReference, documentation=u'RGB Color Model - Hex Variant'))

CT_StyleMatrixReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_StyleMatrixReference, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_StyleMatrixReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_StyleMatrixReference, documentation=u'RGB Color Model - Percentage Variant'))

CT_StyleMatrixReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_StyleMatrixReference, documentation=u'System Color'))

CT_StyleMatrixReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_StyleMatrixReference, documentation=u'Scheme Color'))

CT_StyleMatrixReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_StyleMatrixReference, documentation=u'Preset Color'))
CT_StyleMatrixReference._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_StyleMatrixReference._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_StyleMatrixReference._ContentModel = pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorMapping._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ColorMapping))
CT_ColorMapping._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorMapping._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ColorMapping._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorMapping._GroupModel, min_occurs=1, max_occurs=1)



CT_FontCollection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_FontCollection))

CT_FontCollection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'latin'), CT_TextFont, scope=CT_FontCollection, documentation=u'Latin Font'))

CT_FontCollection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ea'), CT_TextFont, scope=CT_FontCollection, documentation=u'East Asian Font'))

CT_FontCollection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'font'), CT_SupplementalFont, scope=CT_FontCollection, documentation=u'Font'))

CT_FontCollection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cs'), CT_TextFont, scope=CT_FontCollection, documentation=u'Complex Script Font'))
CT_FontCollection._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FontCollection._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'latin')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontCollection._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ea')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontCollection._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cs')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontCollection._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'font')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_FontCollection._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_FontCollection._ContentModel = pyxb.binding.content.ParticleModel(CT_FontCollection._GroupModel, min_occurs=1, max_occurs=1)



CT_AudioCD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_AudioCD))

CT_AudioCD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'st'), CT_AudioCDTime, scope=CT_AudioCD, documentation=u'Audio Start Time'))

CT_AudioCD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'end'), CT_AudioCDTime, scope=CT_AudioCD, documentation=u'Audio End Time'))
CT_AudioCD._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AudioCD._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'st')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AudioCD._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'end')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AudioCD._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_AudioCD._ContentModel = pyxb.binding.content.ParticleModel(CT_AudioCD._GroupModel, min_occurs=1, max_occurs=1)



CT_TextTabStopList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tab'), CT_TextTabStop, scope=CT_TextTabStopList, documentation=u'Tab Stop'))
CT_TextTabStopList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextTabStopList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tab')), min_occurs=0L, max_occurs=32L)
    )
CT_TextTabStopList._ContentModel = pyxb.binding.content.ParticleModel(CT_TextTabStopList._GroupModel, min_occurs=1, max_occurs=1)



CT_SDCategories._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'cat'), CT_SDCategory, scope=CT_SDCategories, documentation=u'Category'))
CT_SDCategories._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SDCategories._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'cat')), min_occurs=0L, max_occurs=None)
    )
CT_SDCategories._ContentModel = pyxb.binding.content.ParticleModel(CT_SDCategories._GroupModel, min_occurs=0L, max_occurs=None)



CT_InnerShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_InnerShadowEffect, documentation=u'Scheme Color'))

CT_InnerShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_InnerShadowEffect, documentation=u'RGB Color Model - Hex Variant'))

CT_InnerShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_InnerShadowEffect, documentation=u'Preset Color'))

CT_InnerShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_InnerShadowEffect, documentation=u'RGB Color Model - Percentage Variant'))

CT_InnerShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_InnerShadowEffect, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_InnerShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_InnerShadowEffect, documentation=u'System Color'))
CT_InnerShadowEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_InnerShadowEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_InnerShadowEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_TLShapeTargetElement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'bg'), CT_Empty, scope=CT_TLShapeTargetElement, documentation=u'Background'))

CT_TLShapeTargetElement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'subSp'), CT_TLSubShapeId, scope=CT_TLShapeTargetElement, documentation=u'Subshape'))

CT_TLShapeTargetElement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'oleChartEl'), CT_TLOleChartTargetElement, scope=CT_TLShapeTargetElement, documentation=u'Embedded Chart Element'))

CT_TLShapeTargetElement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'txEl'), CT_TLTextTargetElement, scope=CT_TLShapeTargetElement, documentation=u'Text Element'))

CT_TLShapeTargetElement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'graphicEl'), CT_AnimationElementChoice, scope=CT_TLShapeTargetElement, documentation=u'Graphic Element'))
CT_TLShapeTargetElement._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TLShapeTargetElement._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'bg')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLShapeTargetElement._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'subSp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLShapeTargetElement._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'oleChartEl')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLShapeTargetElement._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'txEl')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLShapeTargetElement._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'graphicEl')), min_occurs=1, max_occurs=1)
    )
CT_TLShapeTargetElement._ContentModel = pyxb.binding.content.ParticleModel(CT_TLShapeTargetElement._GroupModel, min_occurs=0L, max_occurs=1L)



CT_TLGraphicalObjectBuild._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'bldAsOne'), CT_Empty, scope=CT_TLGraphicalObjectBuild, documentation=u'Build As One'))

CT_TLGraphicalObjectBuild._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'bldSub'), CT_AnimationGraphicalObjectBuildProperties, scope=CT_TLGraphicalObjectBuild, documentation=u'Build Sub Elements'))
CT_TLGraphicalObjectBuild._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TLGraphicalObjectBuild._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'bldAsOne')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLGraphicalObjectBuild._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'bldSub')), min_occurs=1, max_occurs=1)
    )
CT_TLGraphicalObjectBuild._ContentModel = pyxb.binding.content.ParticleModel(CT_TLGraphicalObjectBuild._GroupModel, min_occurs=1L, max_occurs=1L)



CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sp'), CT_GvmlShape, scope=CT_GvmlGroupShape, documentation=u'Shape'))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnSp'), CT_GvmlConnector, scope=CT_GvmlGroupShape, documentation=u'Connection Shape'))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'nvGrpSpPr'), CT_GvmlGroupShapeNonVisual, scope=CT_GvmlGroupShape, documentation=u'Non-Visual Properties for a Group Shape'))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pic'), CT_GvmlPicture, scope=CT_GvmlGroupShape, documentation=u'Picture'))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GvmlGroupShape))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSpPr'), CT_GroupShapeProperties, scope=CT_GvmlGroupShape, documentation=u'Visual Group Shape Properties'))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicFrame'), CT_GvmlGraphicalObjectFrame, scope=CT_GvmlGroupShape, documentation=u'Graphic Frame'))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSp'), CT_GvmlGroupShape, scope=CT_GvmlGroupShape, documentation=u'Group shape'))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'txSp'), CT_GvmlTextShape, scope=CT_GvmlGroupShape, documentation=u'Text shape'))
CT_GvmlGroupShape._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'txSp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnSp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pic')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicFrame')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSp')), min_occurs=1, max_occurs=1)
    )
CT_GvmlGroupShape._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'nvGrpSpPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSpPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GvmlGroupShape._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._GroupModel, min_occurs=1, max_occurs=1)



CT_GraphicalObjectFrameLocking._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GraphicalObjectFrameLocking))
CT_GraphicalObjectFrameLocking._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GraphicalObjectFrameLocking._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GraphicalObjectFrameLocking._ContentModel = pyxb.binding.content.ParticleModel(CT_GraphicalObjectFrameLocking._GroupModel, min_occurs=1, max_occurs=1)



CT_Control._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'pic'), CT_Picture, scope=CT_Control))

CT_Control._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_Control))
CT_Control._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Control._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Control._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'pic')), min_occurs=0L, max_occurs=1L)
    )
CT_Control._ContentModel = pyxb.binding.content.ParticleModel(CT_Control._GroupModel, min_occurs=1, max_occurs=1)



CT_Transform2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ext'), CT_PositiveSize2D, scope=CT_Transform2D, documentation=u'Extents'))

CT_Transform2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'off'), CT_Point2D, scope=CT_Transform2D, documentation=u'Offset'))
CT_Transform2D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Transform2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'off')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Transform2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ext')), min_occurs=0L, max_occurs=1L)
    )
CT_Transform2D._ContentModel = pyxb.binding.content.ParticleModel(CT_Transform2D._GroupModel, min_occurs=1, max_occurs=1)



CT_TextProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), CT_Shape3D, scope=CT_TextProps, documentation=u'Apply 3D shape properties'))

CT_TextProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'flatTx'), CT_FlatText, scope=CT_TextProps, documentation=u'No text in 3D scene'))
CT_TextProps._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'flatTx')), min_occurs=1L, max_occurs=1L)
    )
CT_TextProps._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextProps._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_TextProps._ContentModel = pyxb.binding.content.ParticleModel(CT_TextProps._GroupModel, min_occurs=1, max_occurs=1)



CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_TableCellProperties, documentation=u'Group Fill'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cell3D'), CT_Cell3D, scope=CT_TableCellProperties, documentation=u'Cell 3-D'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnR'), CT_LineProperties, scope=CT_TableCellProperties, documentation=u'Right Border Line Properties'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_TableCellProperties))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableCellProperties))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnT'), CT_LineProperties, scope=CT_TableCellProperties, documentation=u'Top Border Line Properties'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'headers'), CT_Headers, scope=CT_TableCellProperties, documentation=u'Header Cells Associated With Table Cell'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_TableCellProperties, documentation=u'Pattern Fill'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnB'), CT_LineProperties, scope=CT_TableCellProperties, documentation=u'Bottom Border Line Properties'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnTlToBr'), CT_LineProperties, scope=CT_TableCellProperties, documentation=u'Top-Left to Bottom-Right Border Line Properties'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_TableCellProperties))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_TableCellProperties))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnBlToTr'), CT_LineProperties, scope=CT_TableCellProperties, documentation=u'Bottom-Left to Top-Right Border Line Properties'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnL'), CT_LineProperties, scope=CT_TableCellProperties, documentation=u'Left Border Line Properties'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_TableCellProperties))
CT_TableCellProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_TableCellProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnL')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnR')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnT')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnB')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnTlToBr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnBlToTr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cell3D')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'headers')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableCellProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_TableCellProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_Constraint._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Constraint))
CT_Constraint._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Constraint._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Constraint._ContentModel = pyxb.binding.content.ParticleModel(CT_Constraint._GroupModel, min_occurs=1, max_occurs=1)



CT_Categories._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'cat'), CT_Category, scope=CT_Categories, documentation=u'Category'))
CT_Categories._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Categories._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'cat')), min_occurs=0L, max_occurs=None)
    )
CT_Categories._ContentModel = pyxb.binding.content.ParticleModel(CT_Categories._GroupModel, min_occurs=1, max_occurs=1)



CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'softEdge'), CT_SoftEdgesEffect, scope=CT_EffectList))

CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blur'), CT_BlurEffect, scope=CT_EffectList, documentation=u'Blur Effect'))

CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay'), CT_FillOverlayEffect, scope=CT_EffectList))

CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'reflection'), CT_ReflectionEffect, scope=CT_EffectList))

CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'innerShdw'), CT_InnerShadowEffect, scope=CT_EffectList))

CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'outerShdw'), CT_OuterShadowEffect, scope=CT_EffectList))

CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstShdw'), CT_PresetShadowEffect, scope=CT_EffectList))

CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'glow'), CT_GlowEffect, scope=CT_EffectList))
CT_EffectList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blur')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'glow')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'innerShdw')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'outerShdw')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstShdw')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'reflection')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'softEdge')), min_occurs=0L, max_occurs=1L)
    )
CT_EffectList._ContentModel = pyxb.binding.content.ParticleModel(CT_EffectList._GroupModel, min_occurs=1, max_occurs=1)



CT_GeomGuideList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gd'), CT_GeomGuide, scope=CT_GeomGuideList, documentation=u'Shape Guide'))
CT_GeomGuideList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GeomGuideList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gd')), min_occurs=0L, max_occurs=None)
    )
CT_GeomGuideList._ContentModel = pyxb.binding.content.ParticleModel(CT_GeomGuideList._GroupModel, min_occurs=1, max_occurs=1)



CT_Rules._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'rule'), CT_NumericRule, scope=CT_Rules, documentation=u'Rule'))
CT_Rules._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Rules._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'rule')), min_occurs=0L, max_occurs=None)
    )
CT_Rules._ContentModel = pyxb.binding.content.ParticleModel(CT_Rules._GroupModel, min_occurs=1, max_occurs=1)



CT_NormalViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_NormalViewProperties))

CT_NormalViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'restoredLeft'), CT_NormalViewPortion, scope=CT_NormalViewProperties, documentation=u'Normal View Restored Left Properties'))

CT_NormalViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'restoredTop'), CT_NormalViewPortion, scope=CT_NormalViewProperties, documentation=u'Normal View Restored Top Properties'))
CT_NormalViewProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NormalViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'restoredLeft')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NormalViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'restoredTop')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NormalViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NormalViewProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_NormalViewProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_TimeNodeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'audio'), CT_TLMediaNodeAudio, scope=CT_TimeNodeList, documentation=u'Audio'))

CT_TimeNodeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'animClr'), CT_TLAnimateColorBehavior, scope=CT_TimeNodeList, documentation=u'Animate Color Behavior'))

CT_TimeNodeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'set'), CT_TLSetBehavior, scope=CT_TimeNodeList, documentation=u'Set Time Node Behavior'))

CT_TimeNodeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'animEffect'), CT_TLAnimateEffectBehavior, scope=CT_TimeNodeList, documentation=u'Animate Effect'))

CT_TimeNodeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'par'), CT_TLTimeNodeParallel, scope=CT_TimeNodeList, documentation=u'Parallel Time Node'))

CT_TimeNodeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'seq'), CT_TLTimeNodeSequence, scope=CT_TimeNodeList, documentation=u'Sequence Time Node'))

CT_TimeNodeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'animMotion'), CT_TLAnimateMotionBehavior, scope=CT_TimeNodeList, documentation=u'Animate Motion'))

CT_TimeNodeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cmd'), CT_TLCommandBehavior, scope=CT_TimeNodeList, documentation=u'Command'))

CT_TimeNodeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'video'), CT_TLMediaNodeVideo, scope=CT_TimeNodeList, documentation=u'Video'))

CT_TimeNodeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'animRot'), CT_TLAnimateRotationBehavior, scope=CT_TimeNodeList, documentation=u'Animate Rotation'))

CT_TimeNodeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'excl'), CT_TLTimeNodeExclusive, scope=CT_TimeNodeList, documentation=u'Exclusive'))

CT_TimeNodeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'animScale'), CT_TLAnimateScaleBehavior, scope=CT_TimeNodeList, documentation=u'Animate Scale'))

CT_TimeNodeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'anim'), CT_TLAnimateBehavior, scope=CT_TimeNodeList, documentation=u'Animate'))
CT_TimeNodeList._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TimeNodeList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'par')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TimeNodeList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'seq')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TimeNodeList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'excl')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TimeNodeList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'anim')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TimeNodeList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'animClr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TimeNodeList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'animEffect')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TimeNodeList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'animMotion')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TimeNodeList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'animRot')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TimeNodeList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'animScale')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TimeNodeList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cmd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TimeNodeList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'set')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TimeNodeList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'audio')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TimeNodeList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'video')), min_occurs=1, max_occurs=1)
    )
CT_TimeNodeList._ContentModel = pyxb.binding.content.ParticleModel(CT_TimeNodeList._GroupModel, min_occurs=1L, max_occurs=None)



CT_SampleData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'dataModel'), CT_DataModel, scope=CT_SampleData, documentation=u'Data Model'))
CT_SampleData._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SampleData._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'dataModel')), min_occurs=0L, max_occurs=1)
    )
CT_SampleData._ContentModel = pyxb.binding.content.ParticleModel(CT_SampleData._GroupModel, min_occurs=1, max_occurs=1)



CT_Picture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_Picture))

CT_Picture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'nvPicPr'), CT_PictureNonVisual, scope=CT_Picture, documentation=u'Non-Visual Properties for a Picture'))

CT_Picture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'style'), CT_ShapeStyle, scope=CT_Picture))

CT_Picture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'spPr'), CT_ShapeProperties, scope=CT_Picture))

CT_Picture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'blipFill'), CT_BlipFillProperties, scope=CT_Picture, documentation=u'Picture Fill'))
CT_Picture._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Picture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'nvPicPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Picture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Picture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'spPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Picture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'style')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Picture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Picture._ContentModel = pyxb.binding.content.ParticleModel(CT_Picture._GroupModel, min_occurs=1, max_occurs=1)



CT_FillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_FillStyleList))

CT_FillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_FillStyleList, documentation=u'Group Fill'))

CT_FillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_FillStyleList, documentation=u'Pattern Fill'))

CT_FillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_FillStyleList))

CT_FillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_FillStyleList))

CT_FillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_FillStyleList))
CT_FillStyleList._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_FillStyleList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FillStyleList._GroupModel_, min_occurs=3L, max_occurs=None)
    )
CT_FillStyleList._ContentModel = pyxb.binding.content.ParticleModel(CT_FillStyleList._GroupModel, min_occurs=1, max_occurs=1)



CT_SolidColorFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_SolidColorFillProperties, documentation=u'System Color'))

CT_SolidColorFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_SolidColorFillProperties, documentation=u'RGB Color Model - Hex Variant'))

CT_SolidColorFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_SolidColorFillProperties, documentation=u'Scheme Color'))

CT_SolidColorFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_SolidColorFillProperties, documentation=u'Preset Color'))

CT_SolidColorFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_SolidColorFillProperties, documentation=u'RGB Color Model - Percentage Variant'))

CT_SolidColorFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_SolidColorFillProperties, documentation=u'Hue, Saturation, Luminance Color Model'))
CT_SolidColorFillProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_SolidColorFillProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_SolidColorFillProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_TLAnimateBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'tavLst'), CT_TLTimeAnimateValueList, scope=CT_TLAnimateBehavior, documentation=u'Time Animated Value List'))

CT_TLAnimateBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), CT_TLCommonBehaviorData, scope=CT_TLAnimateBehavior))
CT_TLAnimateBehavior._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLAnimateBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLAnimateBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'tavLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TLAnimateBehavior._ContentModel = pyxb.binding.content.ParticleModel(CT_TLAnimateBehavior._GroupModel, min_occurs=1, max_occurs=1)



CT_BlipFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tile'), CT_TileInfoProperties, scope=CT_BlipFillProperties, documentation=u'Tile'))

CT_BlipFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blip'), CT_Blip, scope=CT_BlipFillProperties))

CT_BlipFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'stretch'), CT_StretchInfoProperties, scope=CT_BlipFillProperties, documentation=u'Stretch'))

CT_BlipFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srcRect'), CT_RelativeRect, scope=CT_BlipFillProperties, documentation=u'Source Rectangle'))
CT_BlipFillProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BlipFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tile')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BlipFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'stretch')), min_occurs=1L, max_occurs=1L)
    )
CT_BlipFillProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BlipFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blip')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BlipFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srcRect')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BlipFillProperties._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_BlipFillProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_BlipFillProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_NonVisualPictureProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_NonVisualPictureProperties))

CT_NonVisualPictureProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'picLocks'), CT_PictureLocking, scope=CT_NonVisualPictureProperties, documentation=u'Picture Locks'))
CT_NonVisualPictureProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NonVisualPictureProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'picLocks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualPictureProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NonVisualPictureProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_NonVisualPictureProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_FillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_FillProperties))

CT_FillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_FillProperties))

CT_FillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_FillProperties, documentation=u'Pattern Fill'))

CT_FillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_FillProperties))

CT_FillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_FillProperties, documentation=u'Group Fill'))

CT_FillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_FillProperties))
CT_FillProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_FillProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FillProperties._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_FillProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_FillProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_Shape3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Shape3D))

CT_Shape3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bevelT'), CT_Bevel, scope=CT_Shape3D, documentation=u'Top Bevel'))

CT_Shape3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'contourClr'), CT_Color, scope=CT_Shape3D, documentation=u'Contour Color'))

CT_Shape3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bevelB'), CT_Bevel, scope=CT_Shape3D, documentation=u'Bottom Bevel'))

CT_Shape3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extrusionClr'), CT_Color, scope=CT_Shape3D, documentation=u'Extrusion Color'))
CT_Shape3D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Shape3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bevelT')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Shape3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bevelB')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Shape3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extrusionClr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Shape3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'contourClr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Shape3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Shape3D._ContentModel = pyxb.binding.content.ParticleModel(CT_Shape3D._GroupModel, min_occurs=1, max_occurs=1)



CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_GroupShapeProperties))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), CT_GroupTransform2D, scope=CT_GroupShapeProperties, documentation=u'2D Transform for Grouped Objects'))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_GroupShapeProperties, documentation=u'Effect Container'))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_GroupShapeProperties))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_GroupShapeProperties, documentation=u'Effect Container'))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), CT_Scene3D, scope=CT_GroupShapeProperties))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GroupShapeProperties))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_GroupShapeProperties, documentation=u'Pattern Fill'))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_GroupShapeProperties, documentation=u'Group Fill'))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_GroupShapeProperties))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_GroupShapeProperties))
CT_GroupShapeProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_GroupShapeProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_GroupShapeProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GroupShapeProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_AlphaInverseEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_AlphaInverseEffect, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_AlphaInverseEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_AlphaInverseEffect, documentation=u'RGB Color Model - Hex Variant'))

CT_AlphaInverseEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_AlphaInverseEffect, documentation=u'System Color'))

CT_AlphaInverseEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_AlphaInverseEffect, documentation=u'Scheme Color'))

CT_AlphaInverseEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_AlphaInverseEffect, documentation=u'RGB Color Model - Percentage Variant'))

CT_AlphaInverseEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_AlphaInverseEffect, documentation=u'Preset Color'))
CT_AlphaInverseEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_AlphaInverseEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_AlphaInverseEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_ExtensionListModify._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'ext'), CT_Extension, scope=CT_ExtensionListModify, documentation=u'Extension'))
CT_ExtensionListModify._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ExtensionListModify._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'ext')), min_occurs=0L, max_occurs=None)
    )
CT_ExtensionListModify._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ExtensionListModify._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_ExtensionListModify._ContentModel = pyxb.binding.content.ParticleModel(CT_ExtensionListModify._GroupModel, min_occurs=1, max_occurs=1)



CT_OutlineViewSlideList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sld'), CT_OutlineViewSlideEntry, scope=CT_OutlineViewSlideList, documentation=u'Presentation Slide'))
CT_OutlineViewSlideList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OutlineViewSlideList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sld')), min_occurs=0L, max_occurs=None)
    )
CT_OutlineViewSlideList._ContentModel = pyxb.binding.content.ParticleModel(CT_OutlineViewSlideList._GroupModel, min_occurs=1, max_occurs=1)



CT_XYAdjustHandle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pos'), CT_AdjPoint2D, scope=CT_XYAdjustHandle, documentation=u'Position'))
CT_XYAdjustHandle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_XYAdjustHandle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pos')), min_occurs=1L, max_occurs=1L)
    )
CT_XYAdjustHandle._ContentModel = pyxb.binding.content.ParticleModel(CT_XYAdjustHandle._GroupModel, min_occurs=1, max_occurs=1)



CT_Backdrop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Backdrop))

CT_Backdrop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'anchor'), CT_Point3D, scope=CT_Backdrop, documentation=u'Anchor Point'))

CT_Backdrop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'up'), CT_Vector3D, scope=CT_Backdrop, documentation=u'Up Vector'))

CT_Backdrop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'norm'), CT_Vector3D, scope=CT_Backdrop, documentation=u'Normal'))
CT_Backdrop._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Backdrop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'anchor')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Backdrop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'norm')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Backdrop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'up')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Backdrop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Backdrop._ContentModel = pyxb.binding.content.ParticleModel(CT_Backdrop._GroupModel, min_occurs=1, max_occurs=1)



CT_Headers._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'header'), pyxb.binding.datatypes.string, scope=CT_Headers, documentation=u'Header Cell Reference'))
CT_Headers._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Headers._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'header')), min_occurs=1, max_occurs=1)
    )
CT_Headers._ContentModel = pyxb.binding.content.ParticleModel(CT_Headers._GroupModel, min_occurs=0L, max_occurs=None)


CT_Extension._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), min_occurs=1, max_occurs=1)
    )
CT_Extension._ContentModel = pyxb.binding.content.ParticleModel(CT_Extension._GroupModel, min_occurs=1, max_occurs=1)



CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), CT_Constraints, scope=CT_ForEach, documentation=u'Constraint List'))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), CT_ForEach, scope=CT_ForEach, documentation=u'For Each'))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'shape'), CT_Shape, scope=CT_ForEach, documentation=u'Shape'))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'alg'), CT_Algorithm, scope=CT_ForEach, documentation=u'Algorithm'))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), CT_LayoutNode, scope=CT_ForEach, documentation=u'Layout Node'))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'choose'), CT_Choose, scope=CT_ForEach, documentation=u'Choose Element'))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), CT_PresentationOf, scope=CT_ForEach, documentation=u'Presentation Of'))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ForEach))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), CT_Rules, scope=CT_ForEach, documentation=u'Rule List'))
CT_ForEach._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'alg')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'shape')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'presOf')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'constrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'forEach')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'choose')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ForEach._ContentModel = pyxb.binding.content.ParticleModel(CT_ForEach._GroupModel, min_occurs=0L, max_occurs=None)



CT_TextField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u't'), pyxb.binding.datatypes.string, scope=CT_TextField))

CT_TextField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr'), CT_TextCharacterProperties, scope=CT_TextField, documentation=u'Text Character Properties'))

CT_TextField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pPr'), CT_TextParagraphProperties, scope=CT_TextField, documentation=u'Text Paragraph Properties'))
CT_TextField._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u't')), min_occurs=0L, max_occurs=1L)
    )
CT_TextField._ContentModel = pyxb.binding.content.ParticleModel(CT_TextField._GroupModel, min_occurs=1, max_occurs=1)



CT_ControlList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'control'), CT_Control, scope=CT_ControlList, documentation=u'Embedded Control'))
CT_ControlList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ControlList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'control')), min_occurs=0L, max_occurs=None)
    )
CT_ControlList._ContentModel = pyxb.binding.content.ParticleModel(CT_ControlList._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlShapeNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvSpPr'), CT_NonVisualDrawingShapeProps, scope=CT_GvmlShapeNonVisual, documentation=u'Non-Visual Shape Drawing Properties'))

CT_GvmlShapeNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), CT_NonVisualDrawingProps, scope=CT_GvmlShapeNonVisual))
CT_GvmlShapeNonVisual._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlShapeNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlShapeNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvSpPr')), min_occurs=1L, max_occurs=1L)
    )
CT_GvmlShapeNonVisual._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlShapeNonVisual._GroupModel, min_occurs=1, max_occurs=1)



CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstTxWarp'), CT_PresetTextShape, scope=CT_TextBodyProperties, documentation=u'Preset Text Shape'))

CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), CT_Shape3D, scope=CT_TextBodyProperties, documentation=u'Apply 3D shape properties'))

CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TextBodyProperties))

CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noAutofit'), CT_TextNoAutofit, scope=CT_TextBodyProperties, documentation=u'No AutoFit'))

CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'normAutofit'), CT_TextNormalAutofit, scope=CT_TextBodyProperties, documentation=u'Normal AutoFit'))

CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'flatTx'), CT_FlatText, scope=CT_TextBodyProperties, documentation=u'No text in 3D scene'))

CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), CT_Scene3D, scope=CT_TextBodyProperties, documentation=u'3D Scene Properties'))

CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spAutoFit'), CT_TextShapeAutofit, scope=CT_TextBodyProperties, documentation=u'Shape AutoFit'))
CT_TextBodyProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noAutofit')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'normAutofit')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spAutoFit')), min_occurs=1, max_occurs=1)
    )
CT_TextBodyProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'flatTx')), min_occurs=1L, max_occurs=1L)
    )
CT_TextBodyProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstTxWarp')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TextBodyProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_TextBodyProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_NotesSlide._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_NotesSlide))

CT_NotesSlide._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cSld'), CT_CommonSlideData, scope=CT_NotesSlide, documentation=u'Common slide data for notes slides'))

CT_NotesSlide._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'clrMapOvr'), CT_ColorMappingOverride, scope=CT_NotesSlide, documentation=u'Color Scheme Map Override'))
CT_NotesSlide._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NotesSlide._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'clrMapOvr')), min_occurs=0L, max_occurs=1L)
    )
CT_NotesSlide._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NotesSlide._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cSld')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NotesSlide._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NotesSlide._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NotesSlide._ContentModel = pyxb.binding.content.ParticleModel(CT_NotesSlide._GroupModel, min_occurs=1L, max_occurs=1L)



CT_StyleDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'scene3d'), CT_Scene3D, scope=CT_StyleDefinition, documentation=u'3-D Scene'))

CT_StyleDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'styleLbl'), CT_StyleLabel, scope=CT_StyleDefinition, documentation=u'Style Label'))

CT_StyleDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), CT_SDCategories, scope=CT_StyleDefinition, documentation=u'Category List'))

CT_StyleDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_StyleDefinition))

CT_StyleDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'title'), CT_SDName, scope=CT_StyleDefinition, documentation=u'Title'))

CT_StyleDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'desc'), CT_SDDescription, scope=CT_StyleDefinition, documentation=u'Style Label Description'))
CT_StyleDefinition._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_StyleDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'title')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_StyleDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'desc')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_StyleDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'catLst')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_StyleDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'scene3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'styleLbl')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_StyleDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_StyleDefinition._ContentModel = pyxb.binding.content.ParticleModel(CT_StyleDefinition._GroupModel, min_occurs=1, max_occurs=1)



CT_OuterShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_OuterShadowEffect, documentation=u'RGB Color Model - Hex Variant'))

CT_OuterShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_OuterShadowEffect, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_OuterShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_OuterShadowEffect, documentation=u'RGB Color Model - Percentage Variant'))

CT_OuterShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_OuterShadowEffect, documentation=u'System Color'))

CT_OuterShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_OuterShadowEffect, documentation=u'Scheme Color'))

CT_OuterShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_OuterShadowEffect, documentation=u'Preset Color'))
CT_OuterShadowEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_OuterShadowEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_OuterShadowEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_TableCol._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableCol))
CT_TableCol._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableCol._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableCol._ContentModel = pyxb.binding.content.ParticleModel(CT_TableCol._GroupModel, min_occurs=1, max_occurs=1)



CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Blue Offset'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), CT_GrayscaleTransform, scope=CT_ScRgbColor, documentation=u'Gray'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Blue Modification'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), CT_FixedPercentage, scope=CT_ScRgbColor, documentation=u'Alpha Offset'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_PositivePercentage, scope=CT_ScRgbColor, documentation=u'Alpha Modulation'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), CT_Angle, scope=CT_ScRgbColor, documentation=u'Hue Offset'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), CT_PositivePercentage, scope=CT_ScRgbColor, documentation=u'Hue Modulate'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Green Offset'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), CT_PositiveFixedPercentage, scope=CT_ScRgbColor, documentation=u'Alpha'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Saturation'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Saturation Offset'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Luminance'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), CT_InverseGammaTransform, scope=CT_ScRgbColor, documentation=u'Inverse Gamma'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), CT_GammaTransform, scope=CT_ScRgbColor, documentation=u'Gamma'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Luminance Offset'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Green Modification'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Saturation Modulation'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Luminance Modulation'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Red'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Red Offset'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), CT_PositiveFixedAngle, scope=CT_ScRgbColor, documentation=u'Hue'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Red Modulation'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Blue'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Green'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), CT_InverseTransform, scope=CT_ScRgbColor, documentation=u'Inverse'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_PositiveFixedPercentage, scope=CT_ScRgbColor, documentation=u'Tint'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), CT_PositiveFixedPercentage, scope=CT_ScRgbColor, documentation=u'Shade'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), CT_ComplementTransform, scope=CT_ScRgbColor, documentation=u'Complement'))
CT_ScRgbColor._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'shade')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'comp')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'inv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gray')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sat')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'red')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'green')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma')), min_occurs=1L, max_occurs=1L)
    )
CT_ScRgbColor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_ScRgbColor._ContentModel = pyxb.binding.content.ParticleModel(CT_ScRgbColor._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlGraphicFrameNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvGraphicFramePr'), CT_NonVisualGraphicFrameProperties, scope=CT_GvmlGraphicFrameNonVisual, documentation=u'Non-Visual Graphic Frame Drawing Properties'))

CT_GvmlGraphicFrameNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), CT_NonVisualDrawingProps, scope=CT_GvmlGraphicFrameNonVisual))
CT_GvmlGraphicFrameNonVisual._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlGraphicFrameNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlGraphicFrameNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvGraphicFramePr')), min_occurs=1L, max_occurs=1L)
    )
CT_GvmlGraphicFrameNonVisual._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlGraphicFrameNonVisual._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorTransformHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ColorTransformHeader))

CT_ColorTransformHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'title'), CT_CTName, scope=CT_ColorTransformHeader, documentation=u'Title'))

CT_ColorTransformHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), CT_CTCategories, scope=CT_ColorTransformHeader, documentation=u'Color Transform Category List'))

CT_ColorTransformHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'desc'), CT_CTDescription, scope=CT_ColorTransformHeader, documentation=u'Description'))
CT_ColorTransformHeader._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorTransformHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'title')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_ColorTransformHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'desc')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_ColorTransformHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'catLst')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ColorTransformHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ColorTransformHeader._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorTransformHeader._GroupModel, min_occurs=1, max_occurs=1)



CT_ShapeLocking._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ShapeLocking))
CT_ShapeLocking._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ShapeLocking._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ShapeLocking._ContentModel = pyxb.binding.content.ParticleModel(CT_ShapeLocking._GroupModel, min_occurs=1, max_occurs=1)



CT_DefaultShapeDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_DefaultShapeDefinition))

CT_DefaultShapeDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), CT_ShapeProperties, scope=CT_DefaultShapeDefinition, documentation=u'Visual Properties'))

CT_DefaultShapeDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bodyPr'), CT_TextBodyProperties, scope=CT_DefaultShapeDefinition))

CT_DefaultShapeDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), CT_ShapeStyle, scope=CT_DefaultShapeDefinition))

CT_DefaultShapeDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lstStyle'), CT_TextListStyle, scope=CT_DefaultShapeDefinition))
CT_DefaultShapeDefinition._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DefaultShapeDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DefaultShapeDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bodyPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DefaultShapeDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lstStyle')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DefaultShapeDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'style')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DefaultShapeDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_DefaultShapeDefinition._ContentModel = pyxb.binding.content.ParticleModel(CT_DefaultShapeDefinition._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorChangeEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrTo'), CT_Color, scope=CT_ColorChangeEffect, documentation=u'Change Color To'))

CT_ColorChangeEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrFrom'), CT_Color, scope=CT_ColorChangeEffect, documentation=u'Change Color From'))
CT_ColorChangeEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorChangeEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrFrom')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorChangeEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrTo')), min_occurs=1L, max_occurs=1L)
    )
CT_ColorChangeEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorChangeEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_NonVisualConnectorProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_NonVisualConnectorProperties))

CT_NonVisualConnectorProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnSpLocks'), CT_ConnectorLocking, scope=CT_NonVisualConnectorProperties, documentation=u'Connection Shape Locks'))

CT_NonVisualConnectorProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'stCxn'), CT_Connection, scope=CT_NonVisualConnectorProperties, documentation=u'Connection Start'))

CT_NonVisualConnectorProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'endCxn'), CT_Connection, scope=CT_NonVisualConnectorProperties, documentation=u'Connection End'))
CT_NonVisualConnectorProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NonVisualConnectorProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnSpLocks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualConnectorProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'stCxn')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualConnectorProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'endCxn')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualConnectorProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NonVisualConnectorProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_NonVisualConnectorProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_TablePartStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tcStyle'), CT_TableStyleCellStyle, scope=CT_TablePartStyle, documentation=u'Table Cell Style'))

CT_TablePartStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tcTxStyle'), CT_TableStyleTextStyle, scope=CT_TablePartStyle, documentation=u'Table Cell Text Style'))
CT_TablePartStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TablePartStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tcTxStyle')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TablePartStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tcStyle')), min_occurs=0L, max_occurs=1L)
    )
CT_TablePartStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_TablePartStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_HtmlPublishProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_HtmlPublishProperties))

CT_HtmlPublishProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldAll'), CT_Empty, scope=CT_HtmlPublishProperties, documentation=u'All Slides'))

CT_HtmlPublishProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'custShow'), CT_CustomShowId, scope=CT_HtmlPublishProperties, documentation=u'Custom Show'))

CT_HtmlPublishProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldRg'), CT_IndexRange, scope=CT_HtmlPublishProperties, documentation=u'Slide Range'))
CT_HtmlPublishProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_HtmlPublishProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sldAll')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HtmlPublishProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sldRg')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HtmlPublishProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'custShow')), min_occurs=1, max_occurs=1)
    )
CT_HtmlPublishProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_HtmlPublishProperties._GroupModel_, min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HtmlPublishProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_HtmlPublishProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_HtmlPublishProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_PresetTextShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst'), CT_GeomGuideList, scope=CT_PresetTextShape, documentation=u'Adjust Value List'))
CT_PresetTextShape._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PresetTextShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst')), min_occurs=0L, max_occurs=1L)
    )
CT_PresetTextShape._ContentModel = pyxb.binding.content.ParticleModel(CT_PresetTextShape._GroupModel, min_occurs=1, max_occurs=1)



CT_VideoFile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_VideoFile))
CT_VideoFile._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_VideoFile._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_VideoFile._ContentModel = pyxb.binding.content.ParticleModel(CT_VideoFile._GroupModel, min_occurs=1, max_occurs=1)



CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'choose'), CT_Choose, scope=CT_LayoutNode, documentation=u'Choose Element'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), CT_LayoutNode, scope=CT_LayoutNode, documentation=u'Layout Node'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), CT_PresentationOf, scope=CT_LayoutNode, documentation=u'Presentation Of'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), CT_Constraints, scope=CT_LayoutNode, documentation=u'Constraint List'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'shape'), CT_Shape, scope=CT_LayoutNode, documentation=u'Shape'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), CT_Rules, scope=CT_LayoutNode, documentation=u'Rule List'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_LayoutNode))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'varLst'), CT_LayoutVariablePropertySet, scope=CT_LayoutNode, documentation=u'Variable List'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'alg'), CT_Algorithm, scope=CT_LayoutNode, documentation=u'Algorithm'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), CT_ForEach, scope=CT_LayoutNode, documentation=u'For Each'))
CT_LayoutNode._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'alg')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'shape')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'presOf')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'constrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'varLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'forEach')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'choose')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_LayoutNode._ContentModel = pyxb.binding.content.ParticleModel(CT_LayoutNode._GroupModel, min_occurs=0L, max_occurs=None)



CT_ApplicationNonVisualDrawingProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'wavAudioFile'), CT_EmbeddedWAVAudioFile, scope=CT_ApplicationNonVisualDrawingProps, documentation=u'Audio from WAV File'))

CT_ApplicationNonVisualDrawingProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'ph'), CT_Placeholder, scope=CT_ApplicationNonVisualDrawingProps, documentation=u'Placeholder Shape'))

CT_ApplicationNonVisualDrawingProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'custDataLst'), CT_CustomerDataList, scope=CT_ApplicationNonVisualDrawingProps, documentation=u'Customer Data List'))

CT_ApplicationNonVisualDrawingProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'audioFile'), CT_AudioFile, scope=CT_ApplicationNonVisualDrawingProps, documentation=u'Audio from File'))

CT_ApplicationNonVisualDrawingProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'videoFile'), CT_VideoFile, scope=CT_ApplicationNonVisualDrawingProps, documentation=u'Video from File'))

CT_ApplicationNonVisualDrawingProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_ApplicationNonVisualDrawingProps))

CT_ApplicationNonVisualDrawingProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'quickTimeFile'), CT_QuickTimeFile, scope=CT_ApplicationNonVisualDrawingProps, documentation=u'QuickTime from File'))

CT_ApplicationNonVisualDrawingProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'audioCd'), CT_AudioCD, scope=CT_ApplicationNonVisualDrawingProps, documentation=u'Audio from CD'))
CT_ApplicationNonVisualDrawingProps._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ApplicationNonVisualDrawingProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'audioCd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ApplicationNonVisualDrawingProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'wavAudioFile')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ApplicationNonVisualDrawingProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'audioFile')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ApplicationNonVisualDrawingProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'videoFile')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ApplicationNonVisualDrawingProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'quickTimeFile')), min_occurs=1, max_occurs=1)
    )
CT_ApplicationNonVisualDrawingProps._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ApplicationNonVisualDrawingProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'ph')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ApplicationNonVisualDrawingProps._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ApplicationNonVisualDrawingProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'custDataLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ApplicationNonVisualDrawingProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ApplicationNonVisualDrawingProps._ContentModel = pyxb.binding.content.ParticleModel(CT_ApplicationNonVisualDrawingProps._GroupModel, min_occurs=1, max_occurs=1)



CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Luminance Modulation'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Luminance Offset'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Red'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), CT_InverseGammaTransform, scope=CT_SRgbColor, documentation=u'Inverse Gamma'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Red Offset'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Blue'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Red Modulation'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), CT_InverseTransform, scope=CT_SRgbColor, documentation=u'Inverse'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Green'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_PositiveFixedPercentage, scope=CT_SRgbColor, documentation=u'Tint'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Green Modification'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Green Offset'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), CT_ComplementTransform, scope=CT_SRgbColor, documentation=u'Complement'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Blue Offset'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), CT_GrayscaleTransform, scope=CT_SRgbColor, documentation=u'Gray'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), CT_PositiveFixedPercentage, scope=CT_SRgbColor, documentation=u'Alpha'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), CT_FixedPercentage, scope=CT_SRgbColor, documentation=u'Alpha Offset'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Luminance'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_PositivePercentage, scope=CT_SRgbColor, documentation=u'Alpha Modulation'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), CT_PositiveFixedAngle, scope=CT_SRgbColor, documentation=u'Hue'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), CT_Angle, scope=CT_SRgbColor, documentation=u'Hue Offset'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Blue Modification'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), CT_PositiveFixedPercentage, scope=CT_SRgbColor, documentation=u'Shade'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), CT_PositivePercentage, scope=CT_SRgbColor, documentation=u'Hue Modulate'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Saturation'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Saturation Offset'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), CT_GammaTransform, scope=CT_SRgbColor, documentation=u'Gamma'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Saturation Modulation'))
CT_SRgbColor._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'shade')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'comp')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'inv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gray')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sat')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'red')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'green')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma')), min_occurs=1L, max_occurs=1L)
    )
CT_SRgbColor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SRgbColor._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_SRgbColor._ContentModel = pyxb.binding.content.ParticleModel(CT_SRgbColor._GroupModel, min_occurs=1, max_occurs=1)



CT_NonVisualDrawingShapeProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_NonVisualDrawingShapeProps))

CT_NonVisualDrawingShapeProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spLocks'), CT_ShapeLocking, scope=CT_NonVisualDrawingShapeProps, documentation=u'Shape Locks'))
CT_NonVisualDrawingShapeProps._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NonVisualDrawingShapeProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spLocks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualDrawingShapeProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NonVisualDrawingShapeProps._ContentModel = pyxb.binding.content.ParticleModel(CT_NonVisualDrawingShapeProps._GroupModel, min_occurs=1, max_occurs=1)



CT_CommentAuthorList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cmAuthor'), CT_CommentAuthor, scope=CT_CommentAuthorList, documentation=u'Comment Author'))
CT_CommentAuthorList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CommentAuthorList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cmAuthor')), min_occurs=0L, max_occurs=None)
    )
CT_CommentAuthorList._ContentModel = pyxb.binding.content.ParticleModel(CT_CommentAuthorList._GroupModel, min_occurs=1, max_occurs=1)



CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaBiLevel'), CT_AlphaBiLevelEffect, scope=CT_Blip, documentation=u'Alpha Bi-Level Effect'))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'biLevel'), CT_BiLevelEffect, scope=CT_Blip, documentation=u'Bi-Level (Black/White) Effect'))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaFloor'), CT_AlphaFloorEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blur'), CT_BlurEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_LuminanceEffect, scope=CT_Blip, documentation=u'Luminance Effect'))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrChange'), CT_ColorChangeEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_TintEffect, scope=CT_Blip, documentation=u'Tint Effect'))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaCeiling'), CT_AlphaCeilingEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hsl'), CT_HSLEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grayscl'), CT_GrayscaleEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_AlphaModulateEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'duotone'), CT_DuotoneEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaInv'), CT_AlphaInverseEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrRepl'), CT_ColorReplaceEffect, scope=CT_Blip, documentation=u'Solid Color Replacement'))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay'), CT_FillOverlayEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaRepl'), CT_AlphaReplaceEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaModFix'), CT_AlphaModulateFixedEffect, scope=CT_Blip, documentation=u'Alpha Modulate Fixed Effect'))
CT_Blip._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaBiLevel')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaCeiling')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaFloor')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaInv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaModFix')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaRepl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'biLevel')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blur')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrChange')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrRepl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'duotone')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grayscl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hsl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L)
    )
CT_Blip._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Blip._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Blip._ContentModel = pyxb.binding.content.ParticleModel(CT_Blip._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomGeometry2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'rect'), CT_GeomRect, scope=CT_CustomGeometry2D, documentation=u'Shape Text Rectangle'))

CT_CustomGeometry2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pathLst'), CT_Path2DList, scope=CT_CustomGeometry2D, documentation=u'List of Shape Paths'))

CT_CustomGeometry2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnLst'), CT_ConnectionSiteList, scope=CT_CustomGeometry2D, documentation=u'List of Shape Connection Sites'))

CT_CustomGeometry2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gdLst'), CT_GeomGuideList, scope=CT_CustomGeometry2D, documentation=u'List of Shape Guides'))

CT_CustomGeometry2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ahLst'), CT_AdjustHandleList, scope=CT_CustomGeometry2D, documentation=u'List of Shape Adjust Handles'))

CT_CustomGeometry2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst'), CT_GeomGuideList, scope=CT_CustomGeometry2D, documentation=u'Adjust Value List'))
CT_CustomGeometry2D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomGeometry2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomGeometry2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gdLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomGeometry2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ahLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomGeometry2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomGeometry2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'rect')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomGeometry2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pathLst')), min_occurs=1L, max_occurs=1L)
    )
CT_CustomGeometry2D._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomGeometry2D._GroupModel, min_occurs=1, max_occurs=1)



CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableCellBorderStyle))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bottom'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Bottom Border'))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'insideV'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Inside Vertical Border'))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'insideH'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Inside Horizontal Border'))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'left'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Left Border'))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tl2br'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Top Left to Bottom Right Border'))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'right'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Right Border'))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tr2bl'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Top Right to Bottom Left Border'))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'top'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Top Border'))
CT_TableCellBorderStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'left')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'right')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'top')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bottom')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'insideH')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'insideV')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tl2br')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tr2bl')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableCellBorderStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_TableCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableCell))

CT_TableCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'txBody'), CT_TextBody, scope=CT_TableCell, documentation=u'Text Body'))

CT_TableCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tcPr'), CT_TableCellProperties, scope=CT_TableCell, documentation=u'Table Cell Properties'))
CT_TableCell._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'txBody')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tcPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableCell._ContentModel = pyxb.binding.content.ParticleModel(CT_TableCell._GroupModel, min_occurs=1, max_occurs=1)



CT_NonVisualGroupDrawingShapeProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_NonVisualGroupDrawingShapeProps))

CT_NonVisualGroupDrawingShapeProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSpLocks'), CT_GroupLocking, scope=CT_NonVisualGroupDrawingShapeProps, documentation=u'Group Shape Locks'))
CT_NonVisualGroupDrawingShapeProps._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NonVisualGroupDrawingShapeProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSpLocks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualGroupDrawingShapeProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NonVisualGroupDrawingShapeProps._ContentModel = pyxb.binding.content.ParticleModel(CT_NonVisualGroupDrawingShapeProps._GroupModel, min_occurs=1, max_occurs=1)



CT_SlideTiming._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_SlideTiming))

CT_SlideTiming._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'tnLst'), CT_TimeNodeList, scope=CT_SlideTiming))

CT_SlideTiming._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'bldLst'), CT_BuildList, scope=CT_SlideTiming, documentation=u'Build List'))
CT_SlideTiming._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideTiming._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'tnLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideTiming._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'bldLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideTiming._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_SlideTiming._ContentModel = pyxb.binding.content.ParticleModel(CT_SlideTiming._GroupModel, min_occurs=1, max_occurs=1)



CT_EffectProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_EffectProperties, documentation=u'Effect Container'))

CT_EffectProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_EffectProperties, documentation=u'Effect Container'))
CT_EffectProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_EffectProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_EffectProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EffectProperties._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_EffectProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_EffectProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlConnector._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GvmlConnector))

CT_GvmlConnector._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'nvCxnSpPr'), CT_GvmlConnectorNonVisual, scope=CT_GvmlConnector, documentation=u'Non-Visual Properties for a Connection Shape'))

CT_GvmlConnector._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), CT_ShapeStyle, scope=CT_GvmlConnector, documentation=u'Shape Style'))

CT_GvmlConnector._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), CT_ShapeProperties, scope=CT_GvmlConnector, documentation=u'Visual Properties'))
CT_GvmlConnector._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlConnector._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'nvCxnSpPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlConnector._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlConnector._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'style')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlConnector._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GvmlConnector._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlConnector._GroupModel, min_occurs=1, max_occurs=1)



CT_NotesTextViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_NotesTextViewProperties))

CT_NotesTextViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cViewPr'), CT_CommonViewProperties, scope=CT_NotesTextViewProperties, documentation=u'Base properties for Notes View'))
CT_NotesTextViewProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NotesTextViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cViewPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NotesTextViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NotesTextViewProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_NotesTextViewProperties._GroupModel, min_occurs=1L, max_occurs=1L)



CT_Pt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Pt))

CT_Pt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'prSet'), CT_ElemPropSet, scope=CT_Pt, documentation=u'Property Set'))

CT_Pt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u't'), CT_TextBody, scope=CT_Pt, documentation=u'Text Body'))

CT_Pt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'spPr'), CT_ShapeProperties, scope=CT_Pt, documentation=u'Shape Properties'))
CT_Pt._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Pt._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'prSet')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Pt._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'spPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Pt._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u't')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Pt._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Pt._ContentModel = pyxb.binding.content.ParticleModel(CT_Pt._GroupModel, min_occurs=1, max_occurs=1)



CT_NotesMasterIdListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_NotesMasterIdListEntry))
CT_NotesMasterIdListEntry._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NotesMasterIdListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NotesMasterIdListEntry._ContentModel = pyxb.binding.content.ParticleModel(CT_NotesMasterIdListEntry._GroupModel, min_occurs=1, max_occurs=1)



CT_GroupLocking._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GroupLocking))
CT_GroupLocking._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GroupLocking._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GroupLocking._ContentModel = pyxb.binding.content.ParticleModel(CT_GroupLocking._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorMappingOverride._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'masterClrMapping'), CT_EmptyElement, scope=CT_ColorMappingOverride, documentation=u'Master Color Mapping'))

CT_ColorMappingOverride._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'overrideClrMapping'), CT_ColorMapping, scope=CT_ColorMappingOverride, documentation=u'Override Color Mapping'))
CT_ColorMappingOverride._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ColorMappingOverride._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'masterClrMapping')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ColorMappingOverride._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'overrideClrMapping')), min_occurs=1, max_occurs=1)
    )
CT_ColorMappingOverride._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorMappingOverride._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_ColorMappingOverride._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorMappingOverride._GroupModel, min_occurs=1, max_occurs=1)



CT_QuickTimeFile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_QuickTimeFile))
CT_QuickTimeFile._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_QuickTimeFile._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_QuickTimeFile._ContentModel = pyxb.binding.content.ParticleModel(CT_QuickTimeFile._GroupModel, min_occurs=1, max_occurs=1)



CT_TextSpacing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spcPct'), CT_TextSpacingPercent, scope=CT_TextSpacing, documentation=u'Spacing Percent'))

CT_TextSpacing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spcPts'), CT_TextSpacingPoint, scope=CT_TextSpacing, documentation=u'Spacing Points'))
CT_TextSpacing._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextSpacing._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spcPct')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextSpacing._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spcPts')), min_occurs=1, max_occurs=1)
    )
CT_TextSpacing._ContentModel = pyxb.binding.content.ParticleModel(CT_TextSpacing._GroupModel, min_occurs=1, max_occurs=1)



CT_FillEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_FillEffect))

CT_FillEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_FillEffect))

CT_FillEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_FillEffect))

CT_FillEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_FillEffect, documentation=u'Pattern Fill'))

CT_FillEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_FillEffect, documentation=u'Group Fill'))

CT_FillEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_FillEffect))
CT_FillEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FillEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_FillEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FillEffect._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_FillEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_FillEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_TLAnimateMotionBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'rCtr'), CT_TLPoint, scope=CT_TLAnimateMotionBehavior, documentation=u'Rotation Center'))

CT_TLAnimateMotionBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), CT_TLCommonBehaviorData, scope=CT_TLAnimateMotionBehavior))

CT_TLAnimateMotionBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'from'), CT_TLPoint, scope=CT_TLAnimateMotionBehavior, documentation=u'From'))

CT_TLAnimateMotionBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'by'), CT_TLPoint, scope=CT_TLAnimateMotionBehavior))

CT_TLAnimateMotionBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'to'), CT_TLPoint, scope=CT_TLAnimateMotionBehavior))
CT_TLAnimateMotionBehavior._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLAnimateMotionBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLAnimateMotionBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'by')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLAnimateMotionBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'from')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLAnimateMotionBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'to')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLAnimateMotionBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'rCtr')), min_occurs=0L, max_occurs=1L)
    )
CT_TLAnimateMotionBehavior._ContentModel = pyxb.binding.content.ParticleModel(CT_TLAnimateMotionBehavior._GroupModel, min_occurs=1, max_occurs=1)



CT_OleObjectLink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_OleObjectLink))
CT_OleObjectLink._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OleObjectLink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_OleObjectLink._ContentModel = pyxb.binding.content.ParticleModel(CT_OleObjectLink._GroupModel, min_occurs=1, max_occurs=1)



CT_PresentationOf._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_PresentationOf))
CT_PresentationOf._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PresentationOf._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_PresentationOf._ContentModel = pyxb.binding.content.ParticleModel(CT_PresentationOf._GroupModel, min_occurs=1, max_occurs=1)



CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tableStyle'), CT_TableStyle, scope=CT_TableProperties, documentation=u'Table Style'))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_TableProperties))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tableStyleId'), _s.ST_Guid, scope=CT_TableProperties, documentation=u'Table Style ID'))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_TableProperties, documentation=u'Effect Container'))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_TableProperties))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_TableProperties))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_TableProperties, documentation=u'Effect Container'))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableProperties, documentation=u'Extension List'))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_TableProperties))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_TableProperties, documentation=u'Pattern Fill'))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_TableProperties, documentation=u'Group Fill'))
CT_TableProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_TableProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_TableProperties._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tableStyle')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tableStyleId')), min_occurs=1, max_occurs=1)
    )
CT_TableProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._GroupModel_3, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_TableProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_TLTimeCondition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'tgtEl'), CT_TLTimeTargetElement, scope=CT_TLTimeCondition, documentation=u'Target Element Trigger Choice'))

CT_TLTimeCondition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'tn'), CT_TLTriggerTimeNodeID, scope=CT_TLTimeCondition, documentation=u'Time Node'))

CT_TLTimeCondition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'rtn'), CT_TLTriggerRuntimeNode, scope=CT_TLTimeCondition, documentation=u'Runtime Node Trigger Choice'))
CT_TLTimeCondition._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TLTimeCondition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'tgtEl')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLTimeCondition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'tn')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLTimeCondition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'rtn')), min_occurs=1, max_occurs=1)
    )
CT_TLTimeCondition._ContentModel = pyxb.binding.content.ParticleModel(CT_TLTimeCondition._GroupModel, min_occurs=0L, max_occurs=1L)



CT_TLCommonMediaNodeData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'tgtEl'), CT_TLTimeTargetElement, scope=CT_TLCommonMediaNodeData))

CT_TLCommonMediaNodeData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cTn'), CT_TLCommonTimeNodeData, scope=CT_TLCommonMediaNodeData, documentation=u'Common Time Node Properties'))
CT_TLCommonMediaNodeData._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLCommonMediaNodeData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cTn')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLCommonMediaNodeData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'tgtEl')), min_occurs=1L, max_occurs=1L)
    )
CT_TLCommonMediaNodeData._ContentModel = pyxb.binding.content.ParticleModel(CT_TLCommonMediaNodeData._GroupModel, min_occurs=1, max_occurs=1)



CT_PrintProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_PrintProperties))
CT_PrintProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PrintProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_PrintProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_PrintProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_LightRig._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'rot'), CT_SphereCoords, scope=CT_LightRig, documentation=u'Rotation'))
CT_LightRig._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_LightRig._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'rot')), min_occurs=0L, max_occurs=1L)
    )
CT_LightRig._ContentModel = pyxb.binding.content.ParticleModel(CT_LightRig._GroupModel, min_occurs=1, max_occurs=1)



CT_CTCategories._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'cat'), CT_CTCategory, scope=CT_CTCategories, documentation=u'Color Transform Category'))
CT_CTCategories._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CTCategories._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'cat')), min_occurs=0L, max_occurs=None)
    )
CT_CTCategories._ContentModel = pyxb.binding.content.ParticleModel(CT_CTCategories._GroupModel, min_occurs=0L, max_occurs=None)



CT_NonVisualDrawingProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_NonVisualDrawingProps))

CT_NonVisualDrawingProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkClick'), CT_Hyperlink, scope=CT_NonVisualDrawingProps, documentation=u'Drawing Element On Click Hyperlink'))

CT_NonVisualDrawingProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkHover'), CT_Hyperlink, scope=CT_NonVisualDrawingProps, documentation=u'Hyperlink for Hover'))
CT_NonVisualDrawingProps._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NonVisualDrawingProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkClick')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualDrawingProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkHover')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualDrawingProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NonVisualDrawingProps._ContentModel = pyxb.binding.content.ParticleModel(CT_NonVisualDrawingProps._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'dk1'), CT_Color, scope=CT_ColorScheme, documentation=u'Dark 1'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'accent4'), CT_Color, scope=CT_ColorScheme, documentation=u'Accent 4'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'dk2'), CT_Color, scope=CT_ColorScheme, documentation=u'Dark 2'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'accent6'), CT_Color, scope=CT_ColorScheme, documentation=u'Accent 6'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'accent5'), CT_Color, scope=CT_ColorScheme, documentation=u'Accent 5'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lt2'), CT_Color, scope=CT_ColorScheme, documentation=u'Light 2'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lt1'), CT_Color, scope=CT_ColorScheme, documentation=u'Light 1'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ColorScheme))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'accent1'), CT_Color, scope=CT_ColorScheme, documentation=u'Accent 1'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hlink'), CT_Color, scope=CT_ColorScheme, documentation=u'Hyperlink'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'accent2'), CT_Color, scope=CT_ColorScheme, documentation=u'Accent 2'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'folHlink'), CT_Color, scope=CT_ColorScheme, documentation=u'Followed Hyperlink'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'accent3'), CT_Color, scope=CT_ColorScheme, documentation=u'Accent 3'))
CT_ColorScheme._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'dk1')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lt1')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'dk2')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lt2')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'accent1')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'accent2')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'accent3')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'accent4')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'accent5')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'accent6')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hlink')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'folHlink')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ColorScheme._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorScheme._GroupModel, min_occurs=1, max_occurs=1)



CT_ViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'slideViewPr'), CT_SlideViewProperties, scope=CT_ViewProperties, documentation=u'Slide View Properties'))

CT_ViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'normalViewPr'), CT_NormalViewProperties, scope=CT_ViewProperties, documentation=u'Normal View Properties'))

CT_ViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'gridSpacing'), CT_PositiveSize2D, scope=CT_ViewProperties, documentation=u'Grid Spacing'))

CT_ViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_ViewProperties))

CT_ViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'outlineViewPr'), CT_OutlineViewProperties, scope=CT_ViewProperties, documentation=u'Outline View Properties'))

CT_ViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'notesViewPr'), CT_NotesViewProperties, scope=CT_ViewProperties, documentation=u'Notes View Properties'))

CT_ViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'notesTextViewPr'), CT_NotesTextViewProperties, scope=CT_ViewProperties, documentation=u'Notes Text View Properties'))

CT_ViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sorterViewPr'), CT_SlideSorterViewProperties, scope=CT_ViewProperties, documentation=u'Slide Sorter View Properties'))
CT_ViewProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'normalViewPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'slideViewPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'outlineViewPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'notesTextViewPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sorterViewPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'notesViewPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'gridSpacing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ViewProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_ViewProperties._GroupModel, min_occurs=0L, max_occurs=1L)



CT_BaseStylesOverride._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fmtScheme'), CT_StyleMatrix, scope=CT_BaseStylesOverride))

CT_BaseStylesOverride._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme'), CT_ColorScheme, scope=CT_BaseStylesOverride, documentation=u'Color Scheme'))

CT_BaseStylesOverride._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fontScheme'), CT_FontScheme, scope=CT_BaseStylesOverride))
CT_BaseStylesOverride._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BaseStylesOverride._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BaseStylesOverride._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fontScheme')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BaseStylesOverride._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fmtScheme')), min_occurs=0L, max_occurs=1L)
    )
CT_BaseStylesOverride._ContentModel = pyxb.binding.content.ParticleModel(CT_BaseStylesOverride._GroupModel, min_occurs=1, max_occurs=1)



CT_LineStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), CT_LineProperties, scope=CT_LineStyleList))
CT_LineStyleList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_LineStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ln')), min_occurs=3L, max_occurs=None)
    )
CT_LineStyleList._ContentModel = pyxb.binding.content.ParticleModel(CT_LineStyleList._GroupModel, min_occurs=1, max_occurs=1)



CT_AnimationElementChoice._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'dgm'), CT_AnimationDgmElement, scope=CT_AnimationElementChoice, documentation=u'Diagram to Animate'))

CT_AnimationElementChoice._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'chart'), CT_AnimationChartElement, scope=CT_AnimationElementChoice, documentation=u'Chart to Animate'))
CT_AnimationElementChoice._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_AnimationElementChoice._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'dgm')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_AnimationElementChoice._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'chart')), min_occurs=1, max_occurs=1)
    )
CT_AnimationElementChoice._ContentModel = pyxb.binding.content.ParticleModel(CT_AnimationElementChoice._GroupModel, min_occurs=1L, max_occurs=1L)



CT_Shape_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_Shape_))

CT_Shape_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'nvSpPr'), CT_ShapeNonVisual, scope=CT_Shape_, documentation=u'Non-Visual Properties for a Shape'))

CT_Shape_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'style'), CT_ShapeStyle, scope=CT_Shape_, documentation=u'Shape Style'))

CT_Shape_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'txBody'), CT_TextBody, scope=CT_Shape_, documentation=u'Shape Text Body'))

CT_Shape_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'spPr'), CT_ShapeProperties, scope=CT_Shape_))
CT_Shape_._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Shape_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'nvSpPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Shape_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'spPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Shape_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'style')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Shape_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'txBody')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Shape_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Shape_._ContentModel = pyxb.binding.content.ParticleModel(CT_Shape_._GroupModel, min_occurs=1, max_occurs=1)



CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_Comment))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'pos'), CT_Point2D, scope=CT_Comment, documentation=u'Comment Position'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'text'), pyxb.binding.datatypes.string, scope=CT_Comment, documentation=u"Comment's Text Content"))
CT_Comment._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'pos')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'text')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Comment._ContentModel = pyxb.binding.content.ParticleModel(CT_Comment._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomShow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_CustomShow))

CT_CustomShow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldLst'), CT_SlideRelationshipList, scope=CT_CustomShow, documentation=u'List of Presentation Slides'))
CT_CustomShow._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomShow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sldLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomShow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_CustomShow._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomShow._GroupModel, min_occurs=1, max_occurs=1)



CT_TLCommonTimeNodeData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'subTnLst'), CT_TimeNodeList, scope=CT_TLCommonTimeNodeData, documentation=u'Sub-TimeNodes List'))

CT_TLCommonTimeNodeData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'stCondLst'), CT_TLTimeConditionList, scope=CT_TLCommonTimeNodeData, documentation=u'Start Conditions List'))

CT_TLCommonTimeNodeData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'endCondLst'), CT_TLTimeConditionList, scope=CT_TLCommonTimeNodeData, documentation=u'End Conditions List'))

CT_TLCommonTimeNodeData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'iterate'), CT_TLIterateData, scope=CT_TLCommonTimeNodeData, documentation=u'Iterate'))

CT_TLCommonTimeNodeData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'endSync'), CT_TLTimeCondition, scope=CT_TLCommonTimeNodeData, documentation=u'EndSync'))

CT_TLCommonTimeNodeData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'childTnLst'), CT_TimeNodeList, scope=CT_TLCommonTimeNodeData, documentation=u'Children Time Node List'))
CT_TLCommonTimeNodeData._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLCommonTimeNodeData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'stCondLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLCommonTimeNodeData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'endCondLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLCommonTimeNodeData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'endSync')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLCommonTimeNodeData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'iterate')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLCommonTimeNodeData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'childTnLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLCommonTimeNodeData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'subTnLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TLCommonTimeNodeData._ContentModel = pyxb.binding.content.ParticleModel(CT_TLCommonTimeNodeData._GroupModel, min_occurs=1, max_occurs=1)



CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_TableStyleTextStyle, documentation=u'Preset Color'))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'font'), CT_FontCollection, scope=CT_TableStyleTextStyle, documentation=u'Font'))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_TableStyleTextStyle, documentation=u'RGB Color Model - Percentage Variant'))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_TableStyleTextStyle, documentation=u'RGB Color Model - Hex Variant'))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_TableStyleTextStyle, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableStyleTextStyle))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_TableStyleTextStyle, documentation=u'System Color'))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fontRef'), CT_FontReference, scope=CT_TableStyleTextStyle))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_TableStyleTextStyle, documentation=u'Scheme Color'))
CT_TableStyleTextStyle._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'font')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fontRef')), min_occurs=1L, max_occurs=1L)
    )
CT_TableStyleTextStyle._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_TableStyleTextStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableStyleTextStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorReplaceEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_ColorReplaceEffect, documentation=u'RGB Color Model - Hex Variant'))

CT_ColorReplaceEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_ColorReplaceEffect, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_ColorReplaceEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_ColorReplaceEffect, documentation=u'System Color'))

CT_ColorReplaceEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_ColorReplaceEffect, documentation=u'RGB Color Model - Percentage Variant'))

CT_ColorReplaceEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_ColorReplaceEffect, documentation=u'Scheme Color'))

CT_ColorReplaceEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_ColorReplaceEffect, documentation=u'Preset Color'))
CT_ColorReplaceEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_ColorReplaceEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_ColorReplaceEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_GraphicalObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicData'), CT_GraphicalObjectData, scope=CT_GraphicalObject, documentation=u'Graphic Object Data'))
CT_GraphicalObject._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GraphicalObject._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicData')), min_occurs=1, max_occurs=1)
    )
CT_GraphicalObject._ContentModel = pyxb.binding.content.ParticleModel(CT_GraphicalObject._GroupModel, min_occurs=1, max_occurs=1)



CT_GroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'graphicFrame'), CT_GraphicalObjectFrame, scope=CT_GroupShape, documentation=u'Graphic Frame'))

CT_GroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cxnSp'), CT_Connector, scope=CT_GroupShape, documentation=u'Connection Shape'))

CT_GroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'grpSpPr'), CT_GroupShapeProperties, scope=CT_GroupShape, documentation=u'Group Shape Properties'))

CT_GroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'pic'), CT_Picture, scope=CT_GroupShape, documentation=u'Picture'))

CT_GroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'nvGrpSpPr'), CT_GroupShapeNonVisual, scope=CT_GroupShape, documentation=u'Non-Visual Properties for a Group Shape'))

CT_GroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'contentPart'), CT_Rel, scope=CT_GroupShape, documentation=u'Content Part'))

CT_GroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sp'), CT_Shape_, scope=CT_GroupShape, documentation=u'Shape'))

CT_GroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_GroupShape))

CT_GroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'grpSp'), CT_GroupShape, scope=CT_GroupShape, documentation=u'Group Shape'))
CT_GroupShape._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'grpSp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'graphicFrame')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cxnSp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'pic')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'contentPart')), min_occurs=1, max_occurs=1)
    )
CT_GroupShape._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'nvGrpSpPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'grpSpPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShape._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_GroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GroupShape._ContentModel = pyxb.binding.content.ParticleModel(CT_GroupShape._GroupModel, min_occurs=1, max_occurs=1)



CT_DashStopList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ds'), CT_DashStop, scope=CT_DashStopList, documentation=u'Dash Stop'))
CT_DashStopList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DashStopList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ds')), min_occurs=0L, max_occurs=None)
    )
CT_DashStopList._ContentModel = pyxb.binding.content.ParticleModel(CT_DashStopList._GroupModel, min_occurs=1, max_occurs=1)



CT_NotesMasterIdList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'notesMasterId'), CT_NotesMasterIdListEntry, scope=CT_NotesMasterIdList, documentation=u'Notes Master ID'))
CT_NotesMasterIdList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NotesMasterIdList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'notesMasterId')), min_occurs=0L, max_occurs=1L)
    )
CT_NotesMasterIdList._ContentModel = pyxb.binding.content.ParticleModel(CT_NotesMasterIdList._GroupModel, min_occurs=1, max_occurs=1)



CT_TextLineBreak._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr'), CT_TextCharacterProperties, scope=CT_TextLineBreak, documentation=u'Text Run Properties'))
CT_TextLineBreak._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextLineBreak._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr')), min_occurs=0L, max_occurs=1L)
    )
CT_TextLineBreak._ContentModel = pyxb.binding.content.ParticleModel(CT_TextLineBreak._GroupModel, min_occurs=1, max_occurs=1)



CT_PtList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'pt'), CT_Pt, scope=CT_PtList, documentation=u'Point'))
CT_PtList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PtList._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'pt')), min_occurs=0L, max_occurs=None)
    )
CT_PtList._ContentModel = pyxb.binding.content.ParticleModel(CT_PtList._GroupModel, min_occurs=1, max_occurs=1)



CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'styleData'), CT_SampleData, scope=CT_DiagramDefinition, documentation=u'Style Data'))

CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'sampData'), CT_SampleData, scope=CT_DiagramDefinition, documentation=u'Sample Data'))

CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'title'), CT_Name, scope=CT_DiagramDefinition, documentation=u'Title'))

CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), CT_LayoutNode, scope=CT_DiagramDefinition, documentation=u'Layout Node'))

CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'desc'), CT_Description, scope=CT_DiagramDefinition, documentation=u'Description'))

CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'clrData'), CT_SampleData, scope=CT_DiagramDefinition, documentation=u'Color Transform Sample Data'))

CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_DiagramDefinition))

CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), CT_Categories, scope=CT_DiagramDefinition, documentation=u'Category List'))
CT_DiagramDefinition._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'title')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'desc')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'catLst')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'sampData')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'styleData')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'clrData')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_DiagramDefinition._ContentModel = pyxb.binding.content.ParticleModel(CT_DiagramDefinition._GroupModel, min_occurs=1, max_occurs=1)



CT_PictureLocking._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_PictureLocking))
CT_PictureLocking._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PictureLocking._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_PictureLocking._ContentModel = pyxb.binding.content.ParticleModel(CT_PictureLocking._GroupModel, min_occurs=1, max_occurs=1)



CT_TLCommandBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), CT_TLCommonBehaviorData, scope=CT_TLCommandBehavior))
CT_TLCommandBehavior._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLCommandBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr')), min_occurs=1L, max_occurs=1L)
    )
CT_TLCommandBehavior._ContentModel = pyxb.binding.content.ParticleModel(CT_TLCommandBehavior._GroupModel, min_occurs=1, max_occurs=1)



CT_Path2DQuadBezierTo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), CT_AdjPoint2D, scope=CT_Path2DQuadBezierTo, documentation=u'Shape Path Point'))
CT_Path2DQuadBezierTo._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Path2DQuadBezierTo._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pt')), min_occurs=2L, max_occurs=2L)
    )
CT_Path2DQuadBezierTo._ContentModel = pyxb.binding.content.ParticleModel(CT_Path2DQuadBezierTo._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlTextShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GvmlTextShape))

CT_GvmlTextShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'txBody'), CT_TextBody, scope=CT_GvmlTextShape, documentation=u'Shape Text Body'))

CT_GvmlTextShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'useSpRect'), CT_GvmlUseShapeRectangle, scope=CT_GvmlTextShape, documentation=u'Use Shape Text Rectangle'))

CT_GvmlTextShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), CT_Transform2D, scope=CT_GvmlTextShape))
CT_GvmlTextShape._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GvmlTextShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'useSpRect')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlTextShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm')), min_occurs=1L, max_occurs=1L)
    )
CT_GvmlTextShape._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlTextShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'txBody')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlTextShape._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GvmlTextShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GvmlTextShape._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlTextShape._GroupModel, min_occurs=1, max_occurs=1)



CT_TableStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tblStyle'), CT_TableStyle, scope=CT_TableStyleList, documentation=u'Table Style'))
CT_TableStyleList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tblStyle')), min_occurs=0L, max_occurs=None)
    )
CT_TableStyleList._ContentModel = pyxb.binding.content.ParticleModel(CT_TableStyleList._GroupModel, min_occurs=1, max_occurs=1)



CT_HeaderFooter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_HeaderFooter))
CT_HeaderFooter._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_HeaderFooter._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_HeaderFooter._ContentModel = pyxb.binding.content.ParticleModel(CT_HeaderFooter._GroupModel, min_occurs=1, max_occurs=1)



CT_ConnectorLocking._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ConnectorLocking))
CT_ConnectorLocking._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ConnectorLocking._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ConnectorLocking._ContentModel = pyxb.binding.content.ParticleModel(CT_ConnectorLocking._GroupModel, min_occurs=1, max_occurs=1)


CT_OfficeArtExtension._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), min_occurs=1, max_occurs=1)
    )
CT_OfficeArtExtension._ContentModel = pyxb.binding.content.ParticleModel(CT_OfficeArtExtension._GroupModel, min_occurs=1, max_occurs=1)



CT_BaseStyles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_BaseStyles))

CT_BaseStyles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme'), CT_ColorScheme, scope=CT_BaseStyles))

CT_BaseStyles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fontScheme'), CT_FontScheme, scope=CT_BaseStyles, documentation=u'Font Scheme'))

CT_BaseStyles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fmtScheme'), CT_StyleMatrix, scope=CT_BaseStyles, documentation=u'Format Scheme'))
CT_BaseStyles._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BaseStyles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BaseStyles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fontScheme')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BaseStyles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fmtScheme')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BaseStyles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_BaseStyles._ContentModel = pyxb.binding.content.ParticleModel(CT_BaseStyles._GroupModel, min_occurs=1, max_occurs=1)



CT_TLTimeTargetElement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldTgt'), CT_Empty, scope=CT_TLTimeTargetElement, documentation=u'Slide Target'))

CT_TLTimeTargetElement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sndTgt'), CT_EmbeddedWAVAudioFile, scope=CT_TLTimeTargetElement, documentation=u'Sound Target'))

CT_TLTimeTargetElement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'inkTgt'), CT_TLSubShapeId, scope=CT_TLTimeTargetElement, documentation=u'Ink Target'))

CT_TLTimeTargetElement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'spTgt'), CT_TLShapeTargetElement, scope=CT_TLTimeTargetElement, documentation=u'Shape Target'))
CT_TLTimeTargetElement._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TLTimeTargetElement._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sldTgt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLTimeTargetElement._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sndTgt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLTimeTargetElement._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'spTgt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLTimeTargetElement._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'inkTgt')), min_occurs=1, max_occurs=1)
    )
CT_TLTimeTargetElement._ContentModel = pyxb.binding.content.ParticleModel(CT_TLTimeTargetElement._GroupModel, min_occurs=1L, max_occurs=1L)



CT_ShowProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'present'), CT_Empty, scope=CT_ShowProperties, documentation=u'Presenter Slide Show Mode'))

CT_ShowProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'kiosk'), CT_ShowInfoKiosk, scope=CT_ShowProperties, documentation=u'Kiosk Slide Show Mode'))

CT_ShowProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldAll'), CT_Empty, scope=CT_ShowProperties, documentation=u'All Slides'))

CT_ShowProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_ShowProperties))

CT_ShowProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldRg'), CT_IndexRange, scope=CT_ShowProperties, documentation=u'Slide Range'))

CT_ShowProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'custShow'), CT_CustomShowId, scope=CT_ShowProperties, documentation=u'Custom Show'))

CT_ShowProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'browse'), CT_ShowInfoBrowse, scope=CT_ShowProperties, documentation=u'Browse Slide Show Mode'))

CT_ShowProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'penClr'), CT_Color, scope=CT_ShowProperties, documentation=u'Pen Color for Slide Show'))
CT_ShowProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ShowProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'present')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ShowProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'browse')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ShowProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'kiosk')), min_occurs=1, max_occurs=1)
    )
CT_ShowProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ShowProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sldAll')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ShowProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sldRg')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ShowProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'custShow')), min_occurs=1, max_occurs=1)
    )
CT_ShowProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ShowProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShowProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShowProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'penClr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShowProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ShowProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_ShowProperties._GroupModel, min_occurs=0L, max_occurs=1L)



CT_ColorSchemeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extraClrScheme'), CT_ColorSchemeAndMapping, scope=CT_ColorSchemeList, documentation=u'Extra Color Scheme'))
CT_ColorSchemeList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorSchemeList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extraClrScheme')), min_occurs=0L, max_occurs=None)
    )
CT_ColorSchemeList._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorSchemeList._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlConnectorNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvCxnSpPr'), CT_NonVisualConnectorProperties, scope=CT_GvmlConnectorNonVisual, documentation=u'Non-Visual Connector Shape Drawing Properties'))

CT_GvmlConnectorNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), CT_NonVisualDrawingProps, scope=CT_GvmlConnectorNonVisual, documentation=u'Non-Visual Drawing Properties'))
CT_GvmlConnectorNonVisual._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlConnectorNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlConnectorNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvCxnSpPr')), min_occurs=1L, max_occurs=1L)
    )
CT_GvmlConnectorNonVisual._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlConnectorNonVisual._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomColorList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'custClr'), CT_CustomColor, scope=CT_CustomColorList, documentation=u'Custom color'))
CT_CustomColorList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomColorList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'custClr')), min_occurs=0L, max_occurs=None)
    )
CT_CustomColorList._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomColorList._GroupModel, min_occurs=1, max_occurs=1)



CT_DataModel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_DataModel))

CT_DataModel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'ptLst'), CT_PtList, scope=CT_DataModel, documentation=u'Point List'))

CT_DataModel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'whole'), CT_WholeE2oFormatting, scope=CT_DataModel, documentation=u'Whole E2O Formatting'))

CT_DataModel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'bg'), CT_BackgroundFormatting, scope=CT_DataModel, documentation=u'Background Formatting'))

CT_DataModel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'cxnLst'), CT_CxnList, scope=CT_DataModel, documentation=u'Connection List'))
CT_DataModel._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DataModel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'ptLst')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DataModel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'cxnLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DataModel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'bg')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DataModel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'whole')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DataModel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_DataModel._ContentModel = pyxb.binding.content.ParticleModel(CT_DataModel._GroupModel, min_occurs=1, max_occurs=1)



CT_ShapeNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'nvPr'), CT_ApplicationNonVisualDrawingProps, scope=CT_ShapeNonVisual, documentation=u'Application Non-Visual Drawing Properties'))

CT_ShapeNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPr'), CT_NonVisualDrawingProps, scope=CT_ShapeNonVisual, documentation=u'Non-Visual Drawing Properties'))

CT_ShapeNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cNvSpPr'), CT_NonVisualDrawingShapeProps, scope=CT_ShapeNonVisual, documentation=u'Non-Visual Drawing Properties for a Shape'))
CT_ShapeNonVisual._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ShapeNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cNvSpPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'nvPr')), min_occurs=1L, max_occurs=1L)
    )
CT_ShapeNonVisual._ContentModel = pyxb.binding.content.ParticleModel(CT_ShapeNonVisual._GroupModel, min_occurs=1, max_occurs=1)



CT_AlphaModulateEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cont'), CT_EffectContainer, scope=CT_AlphaModulateEffect))
CT_AlphaModulateEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AlphaModulateEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cont')), min_occurs=1L, max_occurs=1L)
    )
CT_AlphaModulateEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_AlphaModulateEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_SlideMasterIdListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_SlideMasterIdListEntry))
CT_SlideMasterIdListEntry._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideMasterIdListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_SlideMasterIdListEntry._ContentModel = pyxb.binding.content.ParticleModel(CT_SlideMasterIdListEntry._GroupModel, min_occurs=1, max_occurs=1)



CT_OleObjectEmbed._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_OleObjectEmbed))
CT_OleObjectEmbed._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OleObjectEmbed._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_OleObjectEmbed._ContentModel = pyxb.binding.content.ParticleModel(CT_OleObjectEmbed._GroupModel, min_occurs=1, max_occurs=1)



CT_Connector._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_Connector))

CT_Connector._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'nvCxnSpPr'), CT_ConnectorNonVisual, scope=CT_Connector, documentation=u'Non-Visual Properties for a Connection Shape'))

CT_Connector._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'style'), CT_ShapeStyle, scope=CT_Connector, documentation=u'Connector Shape Style'))

CT_Connector._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'spPr'), CT_ShapeProperties, scope=CT_Connector, documentation=u'Shape Properties'))
CT_Connector._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Connector._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'nvCxnSpPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Connector._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'spPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Connector._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'style')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Connector._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Connector._ContentModel = pyxb.binding.content.ParticleModel(CT_Connector._GroupModel, min_occurs=1, max_occurs=1)



CT_PathShadeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillToRect'), CT_RelativeRect, scope=CT_PathShadeProperties, documentation=u'Fill To Rectangle'))
CT_PathShadeProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PathShadeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillToRect')), min_occurs=0L, max_occurs=1L)
    )
CT_PathShadeProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_PathShadeProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_SlideIdListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_SlideIdListEntry))
CT_SlideIdListEntry._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideIdListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_SlideIdListEntry._ContentModel = pyxb.binding.content.ParticleModel(CT_SlideIdListEntry._GroupModel, min_occurs=1, max_occurs=1)



CT_TLTimeNodeExclusive._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cTn'), CT_TLCommonTimeNodeData, scope=CT_TLTimeNodeExclusive, documentation=u'Common TimeNode Properties'))
CT_TLTimeNodeExclusive._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLTimeNodeExclusive._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cTn')), min_occurs=1L, max_occurs=1L)
    )
CT_TLTimeNodeExclusive._ContentModel = pyxb.binding.content.ParticleModel(CT_TLTimeNodeExclusive._GroupModel, min_occurs=1, max_occurs=1)



CT_GroupShapeNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'nvPr'), CT_ApplicationNonVisualDrawingProps, scope=CT_GroupShapeNonVisual, documentation=u'Non-Visual Properties'))

CT_GroupShapeNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPr'), CT_NonVisualDrawingProps, scope=CT_GroupShapeNonVisual, documentation=u'Non-visual Drawing Properties'))

CT_GroupShapeNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cNvGrpSpPr'), CT_NonVisualGroupDrawingShapeProps, scope=CT_GroupShapeNonVisual, documentation=u'Non-Visual Group Shape Drawing Properties'))
CT_GroupShapeNonVisual._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GroupShapeNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cNvGrpSpPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'nvPr')), min_occurs=1L, max_occurs=1L)
    )
CT_GroupShapeNonVisual._ContentModel = pyxb.binding.content.ParticleModel(CT_GroupShapeNonVisual._GroupModel, min_occurs=1, max_occurs=1)



CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tblBg'), CT_TableBackgroundStyle, scope=CT_TableStyle, documentation=u'Table Background'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'band2V'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Band 2 Vertical'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'firstRow'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'First Row'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'firstCol'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'First Column'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lastCol'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Last Column'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'neCell'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Northeast Cell'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'swCell'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Southwest Cell'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'band1H'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Band 1 Horizontal'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'nwCell'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Northwest Cell'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'wholeTbl'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Whole Table'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lastRow'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Last Row'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'band2H'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Band 2 Horizontal'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableStyle))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'seCell'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Southeast Cell'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'band1V'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Band 1 Vertical'))
CT_TableStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tblBg')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'wholeTbl')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'band1H')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'band2H')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'band1V')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'band2V')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lastCol')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'firstCol')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lastRow')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'seCell')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'swCell')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'firstRow')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'neCell')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'nwCell')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_TableStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_TransitionStartSoundAction._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'snd'), CT_EmbeddedWAVAudioFile, scope=CT_TransitionStartSoundAction, documentation=u'Sound'))
CT_TransitionStartSoundAction._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TransitionStartSoundAction._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'snd')), min_occurs=1L, max_occurs=1L)
    )
CT_TransitionStartSoundAction._ContentModel = pyxb.binding.content.ParticleModel(CT_TransitionStartSoundAction._GroupModel, min_occurs=1, max_occurs=1)



CT_Table._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tr'), CT_TableRow, scope=CT_Table, documentation=u'Table Row'))

CT_Table._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tblPr'), CT_TableProperties, scope=CT_Table, documentation=u'Table Properties'))

CT_Table._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tblGrid'), CT_TableGrid, scope=CT_Table, documentation=u'Table Grid'))
CT_Table._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Table._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tblPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Table._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tblGrid')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Table._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tr')), min_occurs=0L, max_occurs=None)
    )
CT_Table._ContentModel = pyxb.binding.content.ParticleModel(CT_Table._GroupModel, min_occurs=1, max_occurs=1)



CT_CommonViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'origin'), CT_Point2D, scope=CT_CommonViewProperties, documentation=u'View Origin'))

CT_CommonViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'scale'), CT_Scale2D, scope=CT_CommonViewProperties, documentation=u'View Scale'))
CT_CommonViewProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CommonViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'scale')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CommonViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'origin')), min_occurs=1L, max_occurs=1L)
    )
CT_CommonViewProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_CommonViewProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_SlideLayoutIdListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_SlideLayoutIdListEntry))
CT_SlideLayoutIdListEntry._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideLayoutIdListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_SlideLayoutIdListEntry._ContentModel = pyxb.binding.content.ParticleModel(CT_SlideLayoutIdListEntry._GroupModel, min_occurs=1, max_occurs=1)



CT_PresetShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_PresetShadowEffect, documentation=u'RGB Color Model - Hex Variant'))

CT_PresetShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_PresetShadowEffect, documentation=u'Scheme Color'))

CT_PresetShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_PresetShadowEffect, documentation=u'Preset Color'))

CT_PresetShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_PresetShadowEffect, documentation=u'RGB Color Model - Percentage Variant'))

CT_PresetShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_PresetShadowEffect, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_PresetShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_PresetShadowEffect, documentation=u'System Color'))
CT_PresetShadowEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_PresetShadowEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_PresetShadowEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'embeddedFontLst'), CT_EmbeddedFontList, scope=CT_Presentation, documentation=u'Embedded Font List'))

CT_Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'custDataLst'), CT_CustomerDataList, scope=CT_Presentation, documentation=u'List of Customer Data Buckets'))

CT_Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'handoutMasterIdLst'), CT_HandoutMasterIdList, scope=CT_Presentation, documentation=u'List of Handout Master IDs'))

CT_Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'modifyVerifier'), CT_ModifyVerifier, scope=CT_Presentation, documentation=u'Modification Verifier'))

CT_Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'custShowLst'), CT_CustomShowList, scope=CT_Presentation, documentation=u'List of Custom Shows'))

CT_Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_Presentation, documentation=u'Extension List'))

CT_Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'photoAlbum'), CT_PhotoAlbum, scope=CT_Presentation, documentation=u'Photo Album Information'))

CT_Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'defaultTextStyle'), CT_TextListStyle, scope=CT_Presentation, documentation=u'Presentation Default Text Style'))

CT_Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldIdLst'), CT_SlideIdList, scope=CT_Presentation, documentation=u'List of Slide IDs'))

CT_Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldSz'), CT_SlideSize, scope=CT_Presentation, documentation=u'Presentation Slide Size'))

CT_Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'notesSz'), CT_PositiveSize2D, scope=CT_Presentation, documentation=u'Notes Slide Size'))

CT_Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldMasterIdLst'), CT_SlideMasterIdList, scope=CT_Presentation, documentation=u'List of Slide Master IDs'))

CT_Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'kinsoku'), CT_Kinsoku, scope=CT_Presentation, documentation=u'Kinsoku Settings'))

CT_Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'smartTags'), CT_SmartTags, scope=CT_Presentation, documentation=u'Smart Tags'))

CT_Presentation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'notesMasterIdLst'), CT_NotesMasterIdList, scope=CT_Presentation, documentation=u'List of Notes Master IDs'))
CT_Presentation._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Presentation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sldMasterIdLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Presentation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'notesMasterIdLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Presentation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'handoutMasterIdLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Presentation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sldIdLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Presentation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sldSz')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Presentation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'notesSz')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Presentation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'smartTags')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Presentation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'embeddedFontLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Presentation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'custShowLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Presentation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'photoAlbum')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Presentation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'custDataLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Presentation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'kinsoku')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Presentation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'defaultTextStyle')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Presentation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'modifyVerifier')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Presentation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Presentation._ContentModel = pyxb.binding.content.ParticleModel(CT_Presentation._GroupModel, min_occurs=1, max_occurs=1)



CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'orgChart'), CT_OrgChart, scope=CT_LayoutVariablePropertySet, documentation=u'Show Organization Chart User Interface'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'hierBranch'), CT_HierBranchStyle, scope=CT_LayoutVariablePropertySet, documentation=u'Organization Chart Branch Style'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'animOne'), CT_AnimOne, scope=CT_LayoutVariablePropertySet, documentation=u'One by One Animation String'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'chMax'), CT_ChildMax, scope=CT_LayoutVariablePropertySet, documentation=u'Maximum Children'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'chPref'), CT_ChildPref, scope=CT_LayoutVariablePropertySet, documentation=u'Preferred Number of Children'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'bulletEnabled'), CT_BulletEnabled, scope=CT_LayoutVariablePropertySet, documentation=u'Show Insert Bullet'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'resizeHandles'), CT_ResizeHandles, scope=CT_LayoutVariablePropertySet, documentation=u'Shape Resize Style'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'dir'), CT_Direction, scope=CT_LayoutVariablePropertySet, documentation=u'Diagram Direction'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'animLvl'), CT_AnimLvl, scope=CT_LayoutVariablePropertySet, documentation=u'Level Animation'))
CT_LayoutVariablePropertySet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'orgChart')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'chMax')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'chPref')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'bulletEnabled')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'dir')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'hierBranch')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'animOne')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'animLvl')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'resizeHandles')), min_occurs=0L, max_occurs=1L)
    )
CT_LayoutVariablePropertySet._ContentModel = pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._GroupModel, min_occurs=1, max_occurs=1)



CT_BlendEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cont'), CT_EffectContainer, scope=CT_BlendEffect, documentation=u'Effect to blend'))
CT_BlendEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BlendEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cont')), min_occurs=1L, max_occurs=1L)
    )
CT_BlendEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_BlendEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_WholeE2oFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_WholeE2oFormatting, documentation=u'Effect Container'))

CT_WholeE2oFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), CT_LineProperties, scope=CT_WholeE2oFormatting, documentation=u'Outline'))

CT_WholeE2oFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_WholeE2oFormatting, documentation=u'Effect Container'))
CT_WholeE2oFormatting._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_WholeE2oFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_WholeE2oFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_WholeE2oFormatting._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_WholeE2oFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ln')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_WholeE2oFormatting._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_WholeE2oFormatting._ContentModel = pyxb.binding.content.ParticleModel(CT_WholeE2oFormatting._GroupModel, min_occurs=1, max_occurs=1)



CT_TLTimeAnimateValue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'val'), CT_TLAnimVariant, scope=CT_TLTimeAnimateValue, documentation=u'Value'))
CT_TLTimeAnimateValue._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLTimeAnimateValue._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'val')), min_occurs=0L, max_occurs=1L)
    )
CT_TLTimeAnimateValue._ContentModel = pyxb.binding.content.ParticleModel(CT_TLTimeAnimateValue._GroupModel, min_occurs=1, max_occurs=1)



CT_TLMediaNodeVideo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cMediaNode'), CT_TLCommonMediaNodeData, scope=CT_TLMediaNodeVideo, documentation=u'Common Media Node Properties'))
CT_TLMediaNodeVideo._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLMediaNodeVideo._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cMediaNode')), min_occurs=1L, max_occurs=1L)
    )
CT_TLMediaNodeVideo._ContentModel = pyxb.binding.content.ParticleModel(CT_TLMediaNodeVideo._GroupModel, min_occurs=1, max_occurs=1)



CT_Path2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'quadBezTo'), CT_Path2DQuadBezierTo, scope=CT_Path2D, documentation=u'Draw Quadratic Bezier Curve To'))

CT_Path2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'arcTo'), CT_Path2DArcTo, scope=CT_Path2D, documentation=u'Draw Arc To'))

CT_Path2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnTo'), CT_Path2DLineTo, scope=CT_Path2D, documentation=u'Draw Line To'))

CT_Path2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cubicBezTo'), CT_Path2DCubicBezierTo, scope=CT_Path2D, documentation=u'Draw Cubic Bezier Curve To'))

CT_Path2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'close'), CT_Path2DClose, scope=CT_Path2D, documentation=u'Close Shape Path'))

CT_Path2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'moveTo'), CT_Path2DMoveTo, scope=CT_Path2D, documentation=u'Move Path To'))
CT_Path2D._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Path2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'close')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Path2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'moveTo')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Path2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnTo')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Path2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'arcTo')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Path2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'quadBezTo')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Path2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cubicBezTo')), min_occurs=1L, max_occurs=1L)
    )
CT_Path2D._ContentModel = pyxb.binding.content.ParticleModel(CT_Path2D._GroupModel, min_occurs=0L, max_occurs=None)



CT_FontReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_FontReference, documentation=u'RGB Color Model - Hex Variant'))

CT_FontReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_FontReference, documentation=u'System Color'))

CT_FontReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_FontReference, documentation=u'Scheme Color'))

CT_FontReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_FontReference, documentation=u'Preset Color'))

CT_FontReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_FontReference, documentation=u'RGB Color Model - Percentage Variant'))

CT_FontReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_FontReference, documentation=u'Hue, Saturation, Luminance Color Model'))
CT_FontReference._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FontReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_FontReference._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FontReference._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_FontReference._ContentModel = pyxb.binding.content.ParticleModel(CT_FontReference._GroupModel, min_occurs=1, max_occurs=1)



CT_GuideList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'guide'), CT_Guide, scope=CT_GuideList, documentation=u'A Guide'))
CT_GuideList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GuideList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'guide')), min_occurs=0L, max_occurs=None)
    )
CT_GuideList._ContentModel = pyxb.binding.content.ParticleModel(CT_GuideList._GroupModel, min_occurs=0L, max_occurs=1L)



CT_Colors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_Colors, documentation=u'Scheme Color'))

CT_Colors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_Colors, documentation=u'Preset Color'))

CT_Colors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_Colors, documentation=u'RGB Color Model - Percentage Variant'))

CT_Colors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_Colors, documentation=u'System Color'))

CT_Colors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_Colors, documentation=u'RGB Color Model - Hex Variant'))

CT_Colors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_Colors, documentation=u'Hue, Saturation, Luminance Color Model'))
CT_Colors._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Colors._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Colors._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Colors._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Colors._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Colors._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Colors._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_Colors._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Colors._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_Colors._ContentModel = pyxb.binding.content.ParticleModel(CT_Colors._GroupModel, min_occurs=1, max_occurs=1)



CT_TableGrid._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gridCol'), CT_TableCol, scope=CT_TableGrid, documentation=u'Table Grid Column'))
CT_TableGrid._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableGrid._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gridCol')), min_occurs=0L, max_occurs=None)
    )
CT_TableGrid._ContentModel = pyxb.binding.content.ParticleModel(CT_TableGrid._GroupModel, min_occurs=1, max_occurs=1)



CT_Algorithm._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Algorithm))

CT_Algorithm._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'param'), CT_Parameter, scope=CT_Algorithm, documentation=u'Parameter'))
CT_Algorithm._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Algorithm._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'param')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Algorithm._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Algorithm._ContentModel = pyxb.binding.content.ParticleModel(CT_Algorithm._GroupModel, min_occurs=1, max_occurs=1)



CT_WebProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_WebProperties))
CT_WebProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_WebProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_WebProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_WebProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_AudioFile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_AudioFile))
CT_AudioFile._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AudioFile._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_AudioFile._ContentModel = pyxb.binding.content.ParticleModel(CT_AudioFile._GroupModel, min_occurs=1, max_occurs=1)



CT_TLBehaviorAttributeNameList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'attrName'), pyxb.binding.datatypes.string, scope=CT_TLBehaviorAttributeNameList, documentation=u'Attribute Name'))
CT_TLBehaviorAttributeNameList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLBehaviorAttributeNameList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'attrName')), min_occurs=1L, max_occurs=None)
    )
CT_TLBehaviorAttributeNameList._ContentModel = pyxb.binding.content.ParticleModel(CT_TLBehaviorAttributeNameList._GroupModel, min_occurs=1, max_occurs=1)



CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Hyperlink))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'snd'), CT_EmbeddedWAVAudioFile, scope=CT_Hyperlink, documentation=u'Hyperlink Sound'))
CT_Hyperlink._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'snd')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Hyperlink._ContentModel = pyxb.binding.content.ParticleModel(CT_Hyperlink._GroupModel, min_occurs=1, max_occurs=1)



CT_PhotoAlbum._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_PhotoAlbum))
CT_PhotoAlbum._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PhotoAlbum._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_PhotoAlbum._ContentModel = pyxb.binding.content.ParticleModel(CT_PhotoAlbum._GroupModel, min_occurs=1, max_occurs=1)



CT_OleObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'embed'), CT_OleObjectEmbed, scope=CT_OleObject, documentation=u'Embedded Object or Control'))

CT_OleObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'link'), CT_OleObjectLink, scope=CT_OleObject, documentation=u'Linked Object or Control'))

CT_OleObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'pic'), CT_Picture, scope=CT_OleObject))
CT_OleObject._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_OleObject._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'embed')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OleObject._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'link')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OleObject._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'pic')), min_occurs=1, max_occurs=1)
    )
CT_OleObject._ContentModel = pyxb.binding.content.ParticleModel(CT_OleObject._GroupModel, min_occurs=1L, max_occurs=1L)



CT_CommonSlideViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'guideLst'), CT_GuideList, scope=CT_CommonSlideViewProperties, documentation=u'List of Guides'))

CT_CommonSlideViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cViewPr'), CT_CommonViewProperties, scope=CT_CommonSlideViewProperties, documentation=u'Base properties for Slide View'))
CT_CommonSlideViewProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CommonSlideViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cViewPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CommonSlideViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'guideLst')), min_occurs=0L, max_occurs=1L)
    )
CT_CommonSlideViewProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_CommonSlideViewProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GvmlShape))

CT_GvmlShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'nvSpPr'), CT_GvmlShapeNonVisual, scope=CT_GvmlShape, documentation=u'Non-Visual Properties for a Shape'))

CT_GvmlShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), CT_ShapeProperties, scope=CT_GvmlShape, documentation=u'Visual Properties'))

CT_GvmlShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), CT_ShapeStyle, scope=CT_GvmlShape, documentation=u'Style'))

CT_GvmlShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'txSp'), CT_GvmlTextShape, scope=CT_GvmlShape, documentation=u'Text Shape'))
CT_GvmlShape._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'nvSpPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'txSp')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'style')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GvmlShape._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlShape._GroupModel, min_occurs=1, max_occurs=1)



CT_TLTimeNodeParallel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cTn'), CT_TLCommonTimeNodeData, scope=CT_TLTimeNodeParallel, documentation=u'Parallel TimeNode'))
CT_TLTimeNodeParallel._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLTimeNodeParallel._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cTn')), min_occurs=1L, max_occurs=1L)
    )
CT_TLTimeNodeParallel._ContentModel = pyxb.binding.content.ParticleModel(CT_TLTimeNodeParallel._GroupModel, min_occurs=1, max_occurs=1)



CT_DuotoneEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_DuotoneEffect, documentation=u'RGB Color Model - Percentage Variant'))

CT_DuotoneEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_DuotoneEffect, documentation=u'Preset Color'))

CT_DuotoneEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_DuotoneEffect, documentation=u'RGB Color Model - Hex Variant'))

CT_DuotoneEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_DuotoneEffect, documentation=u'Scheme Color'))

CT_DuotoneEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_DuotoneEffect, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_DuotoneEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_DuotoneEffect, documentation=u'System Color'))
CT_DuotoneEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_DuotoneEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DuotoneEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DuotoneEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DuotoneEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DuotoneEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DuotoneEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_DuotoneEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DuotoneEffect._GroupModel_, min_occurs=2L, max_occurs=2L)
    )
CT_DuotoneEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_DuotoneEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_TLAnimateEffectBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'progress'), CT_TLAnimVariant, scope=CT_TLAnimateEffectBehavior, documentation=u'Progress'))

CT_TLAnimateEffectBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), CT_TLCommonBehaviorData, scope=CT_TLAnimateEffectBehavior))
CT_TLAnimateEffectBehavior._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLAnimateEffectBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLAnimateEffectBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'progress')), min_occurs=0L, max_occurs=1L)
    )
CT_TLAnimateEffectBehavior._ContentModel = pyxb.binding.content.ParticleModel(CT_TLAnimateEffectBehavior._GroupModel, min_occurs=1, max_occurs=1)



CT_TLTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'tnLst'), CT_TimeNodeList, scope=CT_TLTemplate, documentation=u'Time Node List'))
CT_TLTemplate._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLTemplate._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'tnLst')), min_occurs=1L, max_occurs=1L)
    )
CT_TLTemplate._ContentModel = pyxb.binding.content.ParticleModel(CT_TLTemplate._GroupModel, min_occurs=1, max_occurs=1)



CT_Scale2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sy'), CT_Ratio, scope=CT_Scale2D, documentation=u'Vertical Ratio'))

CT_Scale2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sx'), CT_Ratio, scope=CT_Scale2D, documentation=u'Horizontal Ratio'))
CT_Scale2D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Scale2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sx')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Scale2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sy')), min_occurs=1L, max_occurs=1L)
    )
CT_Scale2D._ContentModel = pyxb.binding.content.ParticleModel(CT_Scale2D._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomShowList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'custShow'), CT_CustomShow, scope=CT_CustomShowList, documentation=u'Custom Show'))
CT_CustomShowList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomShowList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'custShow')), min_occurs=0L, max_occurs=None)
    )
CT_CustomShowList._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomShowList._GroupModel, min_occurs=1, max_occurs=1)



CT_EmbeddedFontListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'boldItalic'), CT_EmbeddedFontDataId, scope=CT_EmbeddedFontListEntry, documentation=u'Bold Italic Embedded Font'))

CT_EmbeddedFontListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'font'), CT_TextFont, scope=CT_EmbeddedFontListEntry, documentation=u'Embedded Font Name'))

CT_EmbeddedFontListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'regular'), CT_EmbeddedFontDataId, scope=CT_EmbeddedFontListEntry, documentation=u'Regular Embedded Font'))

CT_EmbeddedFontListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'italic'), CT_EmbeddedFontDataId, scope=CT_EmbeddedFontListEntry, documentation=u'Italic Embedded Font'))

CT_EmbeddedFontListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'bold'), CT_EmbeddedFontDataId, scope=CT_EmbeddedFontListEntry, documentation=u'Bold Embedded Font'))
CT_EmbeddedFontListEntry._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EmbeddedFontListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'font')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EmbeddedFontListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'regular')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EmbeddedFontListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'bold')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EmbeddedFontListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'italic')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EmbeddedFontListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'boldItalic')), min_occurs=0L, max_occurs=1L)
    )
CT_EmbeddedFontListEntry._ContentModel = pyxb.binding.content.ParticleModel(CT_EmbeddedFontListEntry._GroupModel, min_occurs=1, max_occurs=1)



CT_OfficeStyleSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_OfficeStyleSheet))

CT_OfficeStyleSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'themeElements'), CT_BaseStyles, scope=CT_OfficeStyleSheet, documentation=u'Theme Elements'))

CT_OfficeStyleSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extraClrSchemeLst'), CT_ColorSchemeList, scope=CT_OfficeStyleSheet, documentation=u'Extra Color Scheme List'))

CT_OfficeStyleSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'custClrLst'), CT_CustomColorList, scope=CT_OfficeStyleSheet, documentation=u'Custom Color List'))

CT_OfficeStyleSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'objectDefaults'), CT_ObjectStyleDefaults, scope=CT_OfficeStyleSheet, documentation=u'Object Defaults'))
CT_OfficeStyleSheet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OfficeStyleSheet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'themeElements')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OfficeStyleSheet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'objectDefaults')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OfficeStyleSheet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extraClrSchemeLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OfficeStyleSheet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'custClrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OfficeStyleSheet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_OfficeStyleSheet._ContentModel = pyxb.binding.content.ParticleModel(CT_OfficeStyleSheet._GroupModel, min_occurs=1, max_occurs=1)



CT_CxnList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'cxn'), CT_Cxn, scope=CT_CxnList, documentation=u'Connection'))
CT_CxnList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CxnList._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'cxn')), min_occurs=0L, max_occurs=None)
    )
CT_CxnList._ContentModel = pyxb.binding.content.ParticleModel(CT_CxnList._GroupModel, min_occurs=1, max_occurs=1)



CT_TextParagraph._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'endParaRPr'), CT_TextCharacterProperties, scope=CT_TextParagraph, documentation=u'End Paragraph Run Properties'))

CT_TextParagraph._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pPr'), CT_TextParagraphProperties, scope=CT_TextParagraph, documentation=u'Text Paragraph Properties'))

CT_TextParagraph._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'br'), CT_TextLineBreak, scope=CT_TextParagraph, documentation=u'Text Line Break'))

CT_TextParagraph._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fld'), CT_TextField, scope=CT_TextParagraph, documentation=u'Text Field'))

CT_TextParagraph._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'r'), CT_RegularTextRun, scope=CT_TextParagraph, documentation=u'Text Run'))
CT_TextParagraph._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextParagraph._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'r')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraph._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraph._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fld')), min_occurs=1, max_occurs=1)
    )
CT_TextParagraph._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextParagraph._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraph._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_TextParagraph._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'endParaRPr')), min_occurs=0L, max_occurs=1L)
    )
CT_TextParagraph._ContentModel = pyxb.binding.content.ParticleModel(CT_TextParagraph._GroupModel, min_occurs=1, max_occurs=1)



CT_TLTextTargetElement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'charRg'), CT_IndexRange, scope=CT_TLTextTargetElement, documentation=u'Character Range'))

CT_TLTextTargetElement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'pRg'), CT_IndexRange, scope=CT_TLTextTargetElement, documentation=u'Paragraph Text Range'))
CT_TLTextTargetElement._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TLTextTargetElement._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'charRg')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLTextTargetElement._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'pRg')), min_occurs=1, max_occurs=1)
    )
CT_TLTextTargetElement._ContentModel = pyxb.binding.content.ParticleModel(CT_TLTextTargetElement._GroupModel, min_occurs=0L, max_occurs=1L)



CT_NotesMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_NotesMaster))

CT_NotesMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cSld'), CT_CommonSlideData, scope=CT_NotesMaster, documentation=u'Common Slide Data'))

CT_NotesMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'hf'), CT_HeaderFooter, scope=CT_NotesMaster, documentation=u'Header/Footer Information for a Notes Master'))

CT_NotesMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'clrMap'), CT_ColorMapping, scope=CT_NotesMaster, documentation=u'Color Scheme Map'))

CT_NotesMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'notesStyle'), CT_TextListStyle, scope=CT_NotesMaster, documentation=u'Notes Text Style'))
CT_NotesMaster._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NotesMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'clrMap')), min_occurs=1L, max_occurs=1L)
    )
CT_NotesMaster._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NotesMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cSld')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NotesMaster._GroupModel_, min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NotesMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'hf')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NotesMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'notesStyle')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NotesMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NotesMaster._ContentModel = pyxb.binding.content.ParticleModel(CT_NotesMaster._GroupModel, min_occurs=1, max_occurs=1)



CT_AnimationGraphicalObjectBuildProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bldDgm'), CT_AnimationDgmBuildProperties, scope=CT_AnimationGraphicalObjectBuildProperties, documentation=u'Build Diagram'))

CT_AnimationGraphicalObjectBuildProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bldChart'), CT_AnimationChartBuildProperties, scope=CT_AnimationGraphicalObjectBuildProperties, documentation=u'Build Chart'))
CT_AnimationGraphicalObjectBuildProperties._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_AnimationGraphicalObjectBuildProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bldDgm')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_AnimationGraphicalObjectBuildProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bldChart')), min_occurs=1, max_occurs=1)
    )
CT_AnimationGraphicalObjectBuildProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_AnimationGraphicalObjectBuildProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_StyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_StyleLabel))

CT_StyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'scene3d'), CT_Scene3D, scope=CT_StyleLabel, documentation=u'3-D Scene'))

CT_StyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'style'), CT_ShapeStyle, scope=CT_StyleLabel, documentation=u'Shape Style'))

CT_StyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'txPr'), CT_TextProps, scope=CT_StyleLabel, documentation=u'Text Properties'))

CT_StyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'sp3d'), CT_Shape3D, scope=CT_StyleLabel, documentation=u'3-D Shape Properties'))
CT_StyleLabel._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_StyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'scene3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'sp3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'txPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'style')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_StyleLabel._ContentModel = pyxb.binding.content.ParticleModel(CT_StyleLabel._GroupModel, min_occurs=1, max_occurs=1)



CT_TagList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'tag'), CT_StringTag, scope=CT_TagList, documentation=u'Programmable Extensibility Tag'))
CT_TagList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TagList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'tag')), min_occurs=0L, max_occurs=None)
    )
CT_TagList._ContentModel = pyxb.binding.content.ParticleModel(CT_TagList._GroupModel, min_occurs=1, max_occurs=1)



CT_TLIterateData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'tmAbs'), CT_TLIterateIntervalTime, scope=CT_TLIterateData, documentation=u'Time Absolute'))

CT_TLIterateData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'tmPct'), CT_TLIterateIntervalPercentage, scope=CT_TLIterateData, documentation=u'Time Percentage'))
CT_TLIterateData._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TLIterateData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'tmAbs')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLIterateData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'tmPct')), min_occurs=1, max_occurs=1)
    )
CT_TLIterateData._ContentModel = pyxb.binding.content.ParticleModel(CT_TLIterateData._GroupModel, min_occurs=1L, max_occurs=1L)



CT_SlideLayout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cSld'), CT_CommonSlideData, scope=CT_SlideLayout, documentation=u'Common slide data for slide layouts'))

CT_SlideLayout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_SlideLayout))

CT_SlideLayout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'transition'), CT_SlideTransition, scope=CT_SlideLayout, documentation=u'Slide Transition for a Slide Layout'))

CT_SlideLayout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'timing'), CT_SlideTiming, scope=CT_SlideLayout, documentation=u'Slide Timing Information for a Slide Layout'))

CT_SlideLayout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'clrMapOvr'), CT_ColorMappingOverride, scope=CT_SlideLayout, documentation=u'Color Scheme Map Override'))

CT_SlideLayout._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'hf'), CT_HeaderFooter, scope=CT_SlideLayout, documentation=u'Header/Footer information for a slide layout'))
CT_SlideLayout._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideLayout._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'clrMapOvr')), min_occurs=0L, max_occurs=1L)
    )
CT_SlideLayout._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideLayout._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cSld')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideLayout._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideLayout._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'transition')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideLayout._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'timing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideLayout._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'hf')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideLayout._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_SlideLayout._ContentModel = pyxb.binding.content.ParticleModel(CT_SlideLayout._GroupModel, min_occurs=1L, max_occurs=1L)



CT_ConnectionSiteList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cxn'), CT_ConnectionSite, scope=CT_ConnectionSiteList, documentation=u'Shape Connection Site'))
CT_ConnectionSiteList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ConnectionSiteList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cxn')), min_occurs=0L, max_occurs=None)
    )
CT_ConnectionSiteList._ContentModel = pyxb.binding.content.ParticleModel(CT_ConnectionSiteList._GroupModel, min_occurs=1, max_occurs=1)



CT_NonVisualGraphicFrameProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_NonVisualGraphicFrameProperties))

CT_NonVisualGraphicFrameProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicFrameLocks'), CT_GraphicalObjectFrameLocking, scope=CT_NonVisualGraphicFrameProperties, documentation=u'Graphic Frame Locks'))
CT_NonVisualGraphicFrameProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NonVisualGraphicFrameProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicFrameLocks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualGraphicFrameProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NonVisualGraphicFrameProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_NonVisualGraphicFrameProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_Slide._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_Slide))

CT_Slide._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cSld'), CT_CommonSlideData, scope=CT_Slide, documentation=u'Common slide data for slides'))

CT_Slide._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'timing'), CT_SlideTiming, scope=CT_Slide, documentation=u'Slide Timing Information for a Slide'))

CT_Slide._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'clrMapOvr'), CT_ColorMappingOverride, scope=CT_Slide, documentation=u'Color Scheme Map Override'))

CT_Slide._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'transition'), CT_SlideTransition, scope=CT_Slide, documentation=u'Slide Transition'))
CT_Slide._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Slide._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'clrMapOvr')), min_occurs=0L, max_occurs=1L)
    )
CT_Slide._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Slide._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cSld')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Slide._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Slide._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'transition')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Slide._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'timing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Slide._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Slide._ContentModel = pyxb.binding.content.ParticleModel(CT_Slide._GroupModel, min_occurs=1L, max_occurs=1L)



CT_GvmlGraphicalObjectFrame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GvmlGraphicalObjectFrame))

CT_GvmlGraphicalObjectFrame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'nvGraphicFramePr'), CT_GvmlGraphicFrameNonVisual, scope=CT_GvmlGraphicalObjectFrame, documentation=u'Non-Visual Properties for a Graphic Frame'))

CT_GvmlGraphicalObjectFrame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), CT_Transform2D, scope=CT_GvmlGraphicalObjectFrame))

CT_GvmlGraphicalObjectFrame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'graphic'), CT_GraphicalObject, scope=CT_GvmlGraphicalObjectFrame, documentation=u'Graphic Object'))
CT_GvmlGraphicalObjectFrame._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlGraphicalObjectFrame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'nvGraphicFramePr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlGraphicalObjectFrame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'graphic')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlGraphicalObjectFrame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlGraphicalObjectFrame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GvmlGraphicalObjectFrame._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlGraphicalObjectFrame._GroupModel, min_occurs=1, max_occurs=1)



CT_NotesViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_NotesViewProperties))

CT_NotesViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cSldViewPr'), CT_CommonSlideViewProperties, scope=CT_NotesViewProperties, documentation=u'Common Slide View Properties'))
CT_NotesViewProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NotesViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cSldViewPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NotesViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NotesViewProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_NotesViewProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_CustomColor, documentation=u'RGB Color Model - Hex Variant'))

CT_CustomColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_CustomColor, documentation=u'Preset Color'))

CT_CustomColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_CustomColor, documentation=u'RGB Color Model - Percentage Variant'))

CT_CustomColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_CustomColor, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_CustomColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_CustomColor, documentation=u'System Color'))

CT_CustomColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_CustomColor, documentation=u'Scheme Color'))
CT_CustomColor._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_CustomColor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomColor._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_CustomColor._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomColor._GroupModel, min_occurs=1, max_occurs=1)



CT_TLTemplateList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'tmpl'), CT_TLTemplate, scope=CT_TLTemplateList, documentation=u'Template Effects'))
CT_TLTemplateList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLTemplateList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'tmpl')), min_occurs=0L, max_occurs=9L)
    )
CT_TLTemplateList._ContentModel = pyxb.binding.content.ParticleModel(CT_TLTemplateList._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorTransformHeaderLst._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'colorsDefHdr'), CT_ColorTransformHeader, scope=CT_ColorTransformHeaderLst, documentation=u'Color Transform Definition Header'))
CT_ColorTransformHeaderLst._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorTransformHeaderLst._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'colorsDefHdr')), min_occurs=0L, max_occurs=None)
    )
CT_ColorTransformHeaderLst._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorTransformHeaderLst._GroupModel, min_occurs=1, max_occurs=1)



CT_TLCommonBehaviorData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'attrNameLst'), CT_TLBehaviorAttributeNameList, scope=CT_TLCommonBehaviorData, documentation=u'Attribute Name List'))

CT_TLCommonBehaviorData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cTn'), CT_TLCommonTimeNodeData, scope=CT_TLCommonBehaviorData))

CT_TLCommonBehaviorData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'tgtEl'), CT_TLTimeTargetElement, scope=CT_TLCommonBehaviorData, documentation=u'Target Element'))
CT_TLCommonBehaviorData._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLCommonBehaviorData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cTn')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLCommonBehaviorData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'tgtEl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLCommonBehaviorData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'attrNameLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TLCommonBehaviorData._ContentModel = pyxb.binding.content.ParticleModel(CT_TLCommonBehaviorData._GroupModel, min_occurs=1, max_occurs=1)



CT_ConnectorNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'nvPr'), CT_ApplicationNonVisualDrawingProps, scope=CT_ConnectorNonVisual, documentation=u'Application Non-Visual Drawing Properties'))

CT_ConnectorNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPr'), CT_NonVisualDrawingProps, scope=CT_ConnectorNonVisual, documentation=u'Non-Visual Drawing Properties'))

CT_ConnectorNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cNvCxnSpPr'), CT_NonVisualConnectorProperties, scope=CT_ConnectorNonVisual, documentation=u'Non-Visual Connector Shape Drawing Properties'))
CT_ConnectorNonVisual._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ConnectorNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ConnectorNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cNvCxnSpPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ConnectorNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'nvPr')), min_occurs=1L, max_occurs=1L)
    )
CT_ConnectorNonVisual._ContentModel = pyxb.binding.content.ParticleModel(CT_ConnectorNonVisual._GroupModel, min_occurs=1, max_occurs=1)



CT_TLAnimateScaleBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'to'), CT_TLPoint, scope=CT_TLAnimateScaleBehavior, documentation=u'To'))

CT_TLAnimateScaleBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), CT_TLCommonBehaviorData, scope=CT_TLAnimateScaleBehavior))

CT_TLAnimateScaleBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'from'), CT_TLPoint, scope=CT_TLAnimateScaleBehavior))

CT_TLAnimateScaleBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'by'), CT_TLPoint, scope=CT_TLAnimateScaleBehavior, documentation=u'By'))
CT_TLAnimateScaleBehavior._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLAnimateScaleBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLAnimateScaleBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'by')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLAnimateScaleBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'from')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLAnimateScaleBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'to')), min_occurs=0L, max_occurs=1L)
    )
CT_TLAnimateScaleBehavior._ContentModel = pyxb.binding.content.ParticleModel(CT_TLAnimateScaleBehavior._GroupModel, min_occurs=1, max_occurs=1)



CT_NumericRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_NumericRule))
CT_NumericRule._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NumericRule._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NumericRule._ContentModel = pyxb.binding.content.ParticleModel(CT_NumericRule._GroupModel, min_occurs=1, max_occurs=1)



CT_TableRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableRow))

CT_TableRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tc'), CT_TableCell, scope=CT_TableRow, documentation=u'Table Cell'))
CT_TableRow._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tc')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_TableRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableRow._ContentModel = pyxb.binding.content.ParticleModel(CT_TableRow._GroupModel, min_occurs=1, max_occurs=1)



CT_OutlineViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_OutlineViewProperties))

CT_OutlineViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cViewPr'), CT_CommonViewProperties, scope=CT_OutlineViewProperties, documentation=u'Common View Properties'))

CT_OutlineViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldLst'), CT_OutlineViewSlideList, scope=CT_OutlineViewProperties, documentation=u'List of Presentation Slides'))
CT_OutlineViewProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OutlineViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cViewPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OutlineViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sldLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OutlineViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_OutlineViewProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_OutlineViewProperties._GroupModel, min_occurs=1L, max_occurs=1L)



CT_GroupTransform2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'chExt'), CT_PositiveSize2D, scope=CT_GroupTransform2D, documentation=u'Child Extents'))

CT_GroupTransform2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'off'), CT_Point2D, scope=CT_GroupTransform2D, documentation=u'Offset'))

CT_GroupTransform2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ext'), CT_PositiveSize2D, scope=CT_GroupTransform2D, documentation=u'Extents'))

CT_GroupTransform2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'chOff'), CT_Point2D, scope=CT_GroupTransform2D, documentation=u'Child Offset'))
CT_GroupTransform2D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GroupTransform2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'off')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupTransform2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ext')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupTransform2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'chOff')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupTransform2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'chExt')), min_occurs=0L, max_occurs=1L)
    )
CT_GroupTransform2D._ContentModel = pyxb.binding.content.ParticleModel(CT_GroupTransform2D._GroupModel, min_occurs=1, max_occurs=1)



CT_ClipboardStyleSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrMap'), CT_ColorMapping, scope=CT_ClipboardStyleSheet, documentation=u'Color Map'))

CT_ClipboardStyleSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'themeElements'), CT_BaseStyles, scope=CT_ClipboardStyleSheet))
CT_ClipboardStyleSheet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ClipboardStyleSheet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'themeElements')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ClipboardStyleSheet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrMap')), min_occurs=1L, max_occurs=1L)
    )
CT_ClipboardStyleSheet._ContentModel = pyxb.binding.content.ParticleModel(CT_ClipboardStyleSheet._GroupModel, min_occurs=1, max_occurs=1)



CT_AdjustHandleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ahPolar'), CT_PolarAdjustHandle, scope=CT_AdjustHandleList, documentation=u'Polar Adjust Handle'))

CT_AdjustHandleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ahXY'), CT_XYAdjustHandle, scope=CT_AdjustHandleList, documentation=u'XY Adjust Handle'))
CT_AdjustHandleList._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_AdjustHandleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ahXY')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AdjustHandleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ahPolar')), min_occurs=1L, max_occurs=1L)
    )
CT_AdjustHandleList._ContentModel = pyxb.binding.content.ParticleModel(CT_AdjustHandleList._GroupModel, min_occurs=0L, max_occurs=None)



CT_Placeholder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_Placeholder))
CT_Placeholder._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Placeholder._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Placeholder._ContentModel = pyxb.binding.content.ParticleModel(CT_Placeholder._GroupModel, min_occurs=1, max_occurs=1)



CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'checker'), CT_OrientationTransition, scope=CT_SlideTransition, documentation=u'Checker Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'blinds'), CT_OrientationTransition, scope=CT_SlideTransition, documentation=u'Blinds Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'dissolve'), CT_Empty, scope=CT_SlideTransition, documentation=u'Dissolve Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'comb'), CT_OrientationTransition, scope=CT_SlideTransition, documentation=u'Comb Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'strips'), CT_CornerDirectionTransition, scope=CT_SlideTransition, documentation=u'Strips Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'wedge'), CT_Empty, scope=CT_SlideTransition, documentation=u'Wedge Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'push'), CT_SideDirectionTransition, scope=CT_SlideTransition, documentation=u'Push Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'random'), CT_Empty, scope=CT_SlideTransition, documentation=u'Random Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'diamond'), CT_Empty, scope=CT_SlideTransition, documentation=u'Diamond Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'fade'), CT_OptionalBlackTransition, scope=CT_SlideTransition, documentation=u'Fade Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'newsflash'), CT_Empty, scope=CT_SlideTransition, documentation=u'Newsflash Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'split'), CT_SplitTransition, scope=CT_SlideTransition, documentation=u'Split Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'wheel'), CT_WheelTransition, scope=CT_SlideTransition, documentation=u'Wheel Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'randomBar'), CT_OrientationTransition, scope=CT_SlideTransition, documentation=u'Random Bar Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'pull'), CT_EightDirectionTransition, scope=CT_SlideTransition, documentation=u'Pull Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'wipe'), CT_SideDirectionTransition, scope=CT_SlideTransition, documentation=u'Wipe Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'plus'), CT_Empty, scope=CT_SlideTransition, documentation=u'Plus Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'zoom'), CT_InOutTransition, scope=CT_SlideTransition, documentation=u'Zoom Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sndAc'), CT_TransitionSoundAction, scope=CT_SlideTransition, documentation=u'Sound Action'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_SlideTransition))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cover'), CT_EightDirectionTransition, scope=CT_SlideTransition, documentation=u'Cover Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cut'), CT_OptionalBlackTransition, scope=CT_SlideTransition, documentation=u'Cut Slide Transition'))

CT_SlideTransition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'circle'), CT_Empty, scope=CT_SlideTransition, documentation=u'Circle Slide Transition'))
CT_SlideTransition._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'blinds')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'checker')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'circle')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'dissolve')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'comb')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cover')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cut')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'diamond')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'fade')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'newsflash')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'plus')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'pull')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'push')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'random')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'randomBar')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'split')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'strips')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'wedge')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'wheel')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'wipe')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'zoom')), min_occurs=1, max_occurs=1)
    )
CT_SlideTransition._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideTransition._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sndAc')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideTransition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_SlideTransition._ContentModel = pyxb.binding.content.ParticleModel(CT_SlideTransition._GroupModel, min_occurs=1, max_occurs=1)



CT_GraphicalObjectFrame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_GraphicalObjectFrame, documentation=u'Extension List with Modification Flag'))

CT_GraphicalObjectFrame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'nvGraphicFramePr'), CT_GraphicalObjectFrameNonVisual, scope=CT_GraphicalObjectFrame, documentation=u'Non-Visual Properties for a Graphic Frame'))

CT_GraphicalObjectFrame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'graphic'), CT_GraphicalObject, scope=CT_GraphicalObjectFrame, documentation=u'Graphic Object'))

CT_GraphicalObjectFrame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'xfrm'), CT_Transform2D, scope=CT_GraphicalObjectFrame, documentation=u'2D Transform for Graphic Frame'))
CT_GraphicalObjectFrame._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GraphicalObjectFrame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'nvGraphicFramePr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GraphicalObjectFrame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'xfrm')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GraphicalObjectFrame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'graphic')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GraphicalObjectFrame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GraphicalObjectFrame._ContentModel = pyxb.binding.content.ParticleModel(CT_GraphicalObjectFrame._GroupModel, min_occurs=1, max_occurs=1)



CT_StyleMatrix._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bgFillStyleLst'), CT_BackgroundFillStyleList, scope=CT_StyleMatrix, documentation=u'Background Fill Style List'))

CT_StyleMatrix._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillStyleLst'), CT_FillStyleList, scope=CT_StyleMatrix, documentation=u'Fill Style List'))

CT_StyleMatrix._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnStyleLst'), CT_LineStyleList, scope=CT_StyleMatrix, documentation=u'Line Style List'))

CT_StyleMatrix._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectStyleLst'), CT_EffectStyleList, scope=CT_StyleMatrix, documentation=u'Effect Style List'))
CT_StyleMatrix._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_StyleMatrix._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillStyleLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrix._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnStyleLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrix._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectStyleLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrix._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bgFillStyleLst')), min_occurs=1L, max_occurs=1L)
    )
CT_StyleMatrix._ContentModel = pyxb.binding.content.ParticleModel(CT_StyleMatrix._GroupModel, min_occurs=1, max_occurs=1)



CT_SlideIdList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldId'), CT_SlideIdListEntry, scope=CT_SlideIdList, documentation=u'Slide ID'))
CT_SlideIdList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideIdList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sldId')), min_occurs=0L, max_occurs=None)
    )
CT_SlideIdList._ContentModel = pyxb.binding.content.ParticleModel(CT_SlideIdList._GroupModel, min_occurs=1, max_occurs=1)



CT_TLTimeNodeSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'nextCondLst'), CT_TLTimeConditionList, scope=CT_TLTimeNodeSequence, documentation=u'Next Conditions List'))

CT_TLTimeNodeSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cTn'), CT_TLCommonTimeNodeData, scope=CT_TLTimeNodeSequence, documentation=u'Common TimeNode Properties'))

CT_TLTimeNodeSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'prevCondLst'), CT_TLTimeConditionList, scope=CT_TLTimeNodeSequence, documentation=u'Previous Conditions List'))
CT_TLTimeNodeSequence._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLTimeNodeSequence._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cTn')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLTimeNodeSequence._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'prevCondLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLTimeNodeSequence._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'nextCondLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TLTimeNodeSequence._ContentModel = pyxb.binding.content.ParticleModel(CT_TLTimeNodeSequence._GroupModel, min_occurs=1, max_occurs=1)



CT_SlideLayoutIdList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldLayoutId'), CT_SlideLayoutIdListEntry, scope=CT_SlideLayoutIdList, documentation=u'Slide Layout Id'))
CT_SlideLayoutIdList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideLayoutIdList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sldLayoutId')), min_occurs=0L, max_occurs=None)
    )
CT_SlideLayoutIdList._ContentModel = pyxb.binding.content.ParticleModel(CT_SlideLayoutIdList._GroupModel, min_occurs=1, max_occurs=1)



CT_Camera._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'rot'), CT_SphereCoords, scope=CT_Camera, documentation=u'Rotation'))
CT_Camera._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Camera._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'rot')), min_occurs=0L, max_occurs=1L)
    )
CT_Camera._ContentModel = pyxb.binding.content.ParticleModel(CT_Camera._GroupModel, min_occurs=1, max_occurs=1)



CT_BackgroundProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_BackgroundProperties))

CT_BackgroundProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_BackgroundProperties, documentation=u'Group Fill'))

CT_BackgroundProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_BackgroundProperties))

CT_BackgroundProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_BackgroundProperties))

CT_BackgroundProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_BackgroundProperties, documentation=u'Effect Container'))

CT_BackgroundProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_BackgroundProperties))

CT_BackgroundProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_BackgroundProperties, documentation=u'Effect Container'))

CT_BackgroundProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_BackgroundProperties))

CT_BackgroundProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_BackgroundProperties, documentation=u'Pattern Fill'))
CT_BackgroundProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BackgroundProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_BackgroundProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BackgroundProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_BackgroundProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BackgroundProperties._GroupModel_, min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_BackgroundProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_BackgroundProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_SlideRelationshipList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sld'), CT_SlideRelationshipListEntry, scope=CT_SlideRelationshipList, documentation=u'Presentation Slide'))
CT_SlideRelationshipList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideRelationshipList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sld')), min_occurs=0L, max_occurs=None)
    )
CT_SlideRelationshipList._ContentModel = pyxb.binding.content.ParticleModel(CT_SlideRelationshipList._GroupModel, min_occurs=1, max_occurs=1)



CT_RegularTextRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u't'), pyxb.binding.datatypes.string, scope=CT_RegularTextRun, documentation=u'Text String'))

CT_RegularTextRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr'), CT_TextCharacterProperties, scope=CT_RegularTextRun, documentation=u'Text Character Properties'))
CT_RegularTextRun._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RegularTextRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RegularTextRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u't')), min_occurs=1L, max_occurs=1L)
    )
CT_RegularTextRun._ContentModel = pyxb.binding.content.ParticleModel(CT_RegularTextRun._GroupModel, min_occurs=1, max_occurs=1)



CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'alg'), CT_Algorithm, scope=CT_Otherwise, documentation=u'Algorithm'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'choose'), CT_Choose, scope=CT_Otherwise, documentation=u'Choose Element'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), CT_LayoutNode, scope=CT_Otherwise, documentation=u'Layout Node'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'shape'), CT_Shape, scope=CT_Otherwise, documentation=u'Shape'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), CT_PresentationOf, scope=CT_Otherwise, documentation=u'Presentation Of'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), CT_ForEach, scope=CT_Otherwise, documentation=u'For Each'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Otherwise, documentation=u'Extension List'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), CT_Constraints, scope=CT_Otherwise, documentation=u'Constraint List'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), CT_Rules, scope=CT_Otherwise, documentation=u'Rule List'))
CT_Otherwise._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'alg')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'shape')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'presOf')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'constrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'forEach')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'choose')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Otherwise._ContentModel = pyxb.binding.content.ParticleModel(CT_Otherwise._GroupModel, min_occurs=0L, max_occurs=None)



CT_TLByAnimateColorTransform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'rgb'), CT_TLByRgbColorTransform, scope=CT_TLByAnimateColorTransform, documentation=u'RGB'))

CT_TLByAnimateColorTransform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'hsl'), CT_TLByHslColorTransform, scope=CT_TLByAnimateColorTransform, documentation=u'HSL'))
CT_TLByAnimateColorTransform._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TLByAnimateColorTransform._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'rgb')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TLByAnimateColorTransform._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'hsl')), min_occurs=1, max_occurs=1)
    )
CT_TLByAnimateColorTransform._ContentModel = pyxb.binding.content.ParticleModel(CT_TLByAnimateColorTransform._GroupModel, min_occurs=1L, max_occurs=1L)



CT_TLMediaNodeAudio._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cMediaNode'), CT_TLCommonMediaNodeData, scope=CT_TLMediaNodeAudio, documentation=u'Common Media Node Properties'))
CT_TLMediaNodeAudio._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLMediaNodeAudio._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cMediaNode')), min_occurs=1L, max_occurs=1L)
    )
CT_TLMediaNodeAudio._ContentModel = pyxb.binding.content.ParticleModel(CT_TLMediaNodeAudio._GroupModel, min_occurs=1, max_occurs=1)



CT_CommentList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cm'), CT_Comment, scope=CT_CommentList, documentation=u'Comment'))
CT_CommentList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CommentList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cm')), min_occurs=0L, max_occurs=None)
    )
CT_CommentList._ContentModel = pyxb.binding.content.ParticleModel(CT_CommentList._GroupModel, min_occurs=1, max_occurs=1)



CT_HandoutMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionListModify, scope=CT_HandoutMaster))

CT_HandoutMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cSld'), CT_CommonSlideData, scope=CT_HandoutMaster, documentation=u'Common slide data for handout master'))

CT_HandoutMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'clrMap'), CT_ColorMapping, scope=CT_HandoutMaster, documentation=u'Color Scheme Map'))

CT_HandoutMaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'hf'), CT_HeaderFooter, scope=CT_HandoutMaster, documentation=u'Header/Footer information for a handout master'))
CT_HandoutMaster._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_HandoutMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'clrMap')), min_occurs=1L, max_occurs=1L)
    )
CT_HandoutMaster._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_HandoutMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cSld')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HandoutMaster._GroupModel_, min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HandoutMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'hf')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HandoutMaster._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_HandoutMaster._ContentModel = pyxb.binding.content.ParticleModel(CT_HandoutMaster._GroupModel, min_occurs=1, max_occurs=1)



CT_TLAnimateRotationBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), CT_TLCommonBehaviorData, scope=CT_TLAnimateRotationBehavior))
CT_TLAnimateRotationBehavior._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLAnimateRotationBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr')), min_occurs=1L, max_occurs=1L)
    )
CT_TLAnimateRotationBehavior._ContentModel = pyxb.binding.content.ParticleModel(CT_TLAnimateRotationBehavior._GroupModel, min_occurs=1, max_occurs=1)



CT_TLTimeAnimateValueList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'tav'), CT_TLTimeAnimateValue, scope=CT_TLTimeAnimateValueList, documentation=u'Time Animate Value'))
CT_TLTimeAnimateValueList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLTimeAnimateValueList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'tav')), min_occurs=0L, max_occurs=None)
    )
CT_TLTimeAnimateValueList._ContentModel = pyxb.binding.content.ParticleModel(CT_TLTimeAnimateValueList._GroupModel, min_occurs=1, max_occurs=1)



CT_GradientStop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_GradientStop, documentation=u'RGB Color Model - Hex Variant'))

CT_GradientStop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_GradientStop, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_GradientStop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_GradientStop, documentation=u'System Color'))

CT_GradientStop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_GradientStop, documentation=u'RGB Color Model - Percentage Variant'))

CT_GradientStop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_GradientStop, documentation=u'Scheme Color'))

CT_GradientStop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_GradientStop, documentation=u'Preset Color'))
CT_GradientStop._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GradientStop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientStop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientStop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientStop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientStop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientStop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_GradientStop._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GradientStop._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_GradientStop._ContentModel = pyxb.binding.content.ParticleModel(CT_GradientStop._GroupModel, min_occurs=1, max_occurs=1)



CT_EffectStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectStyle'), CT_EffectStyleItem, scope=CT_EffectStyleList, documentation=u'Effect Style'))
CT_EffectStyleList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EffectStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectStyle')), min_occurs=3L, max_occurs=None)
    )
CT_EffectStyleList._ContentModel = pyxb.binding.content.ParticleModel(CT_EffectStyleList._GroupModel, min_occurs=1, max_occurs=1)



CT_PresetGeometry2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst'), CT_GeomGuideList, scope=CT_PresetGeometry2D, documentation=u'List of Shape Adjust Values'))
CT_PresetGeometry2D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PresetGeometry2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst')), min_occurs=0L, max_occurs=1L)
    )
CT_PresetGeometry2D._ContentModel = pyxb.binding.content.ParticleModel(CT_PresetGeometry2D._GroupModel, min_occurs=1, max_occurs=1)



CT_BackgroundFillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_BackgroundFillStyleList))

CT_BackgroundFillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_BackgroundFillStyleList))

CT_BackgroundFillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_BackgroundFillStyleList))

CT_BackgroundFillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_BackgroundFillStyleList, documentation=u'Pattern Fill'))

CT_BackgroundFillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_BackgroundFillStyleList, documentation=u'Group Fill'))

CT_BackgroundFillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_BackgroundFillStyleList))
CT_BackgroundFillStyleList._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_BackgroundFillStyleList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._GroupModel_, min_occurs=3L, max_occurs=None)
    )
CT_BackgroundFillStyleList._ContentModel = pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._GroupModel, min_occurs=1, max_occurs=1)



CT_SlideViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_SlideViewProperties))

CT_SlideViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cSldViewPr'), CT_CommonSlideViewProperties, scope=CT_SlideViewProperties))
CT_SlideViewProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cSldViewPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_SlideViewProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_SlideViewProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_Path2DMoveTo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), CT_AdjPoint2D, scope=CT_Path2DMoveTo, documentation=u'Move end point'))
CT_Path2DMoveTo._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Path2DMoveTo._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pt')), min_occurs=1L, max_occurs=1L)
    )
CT_Path2DMoveTo._ContentModel = pyxb.binding.content.ParticleModel(CT_Path2DMoveTo._GroupModel, min_occurs=1, max_occurs=1)



CT_ConnectionSite._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pos'), CT_AdjPoint2D, scope=CT_ConnectionSite, documentation=u'Position'))
CT_ConnectionSite._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ConnectionSite._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pos')), min_occurs=1L, max_occurs=1L)
    )
CT_ConnectionSite._ContentModel = pyxb.binding.content.ParticleModel(CT_ConnectionSite._GroupModel, min_occurs=1, max_occurs=1)



CT_TLAnimateColorBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'to'), CT_Color, scope=CT_TLAnimateColorBehavior, documentation=u'To'))

CT_TLAnimateColorBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr'), CT_TLCommonBehaviorData, scope=CT_TLAnimateColorBehavior))

CT_TLAnimateColorBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'from'), CT_Color, scope=CT_TLAnimateColorBehavior, documentation=u'From'))

CT_TLAnimateColorBehavior._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'by'), CT_TLByAnimateColorTransform, scope=CT_TLAnimateColorBehavior, documentation=u'By'))
CT_TLAnimateColorBehavior._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLAnimateColorBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cBhvr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLAnimateColorBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'by')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLAnimateColorBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'from')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TLAnimateColorBehavior._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'to')), min_occurs=0L, max_occurs=1L)
    )
CT_TLAnimateColorBehavior._ContentModel = pyxb.binding.content.ParticleModel(CT_TLAnimateColorBehavior._GroupModel, min_occurs=1, max_occurs=1)



CT_TextUnderlineFillGroupWrapper._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_TextUnderlineFillGroupWrapper, documentation=u'Group Fill'))

CT_TextUnderlineFillGroupWrapper._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_TextUnderlineFillGroupWrapper))

CT_TextUnderlineFillGroupWrapper._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_TextUnderlineFillGroupWrapper))

CT_TextUnderlineFillGroupWrapper._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_TextUnderlineFillGroupWrapper, documentation=u'Pattern Fill'))

CT_TextUnderlineFillGroupWrapper._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_TextUnderlineFillGroupWrapper))

CT_TextUnderlineFillGroupWrapper._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_TextUnderlineFillGroupWrapper))
CT_TextUnderlineFillGroupWrapper._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextUnderlineFillGroupWrapper._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextUnderlineFillGroupWrapper._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextUnderlineFillGroupWrapper._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextUnderlineFillGroupWrapper._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextUnderlineFillGroupWrapper._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextUnderlineFillGroupWrapper._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_TextUnderlineFillGroupWrapper._ContentModel = pyxb.binding.content.ParticleModel(CT_TextUnderlineFillGroupWrapper._GroupModel, min_occurs=1L, max_occurs=1L)



CT_TableBackgroundStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effect'), CT_EffectProperties, scope=CT_TableBackgroundStyle, documentation=u'Effect'))

CT_TableBackgroundStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fill'), CT_FillProperties, scope=CT_TableBackgroundStyle, documentation=u'Fill'))

CT_TableBackgroundStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectRef'), CT_StyleMatrixReference, scope=CT_TableBackgroundStyle, documentation=u'Effect Reference'))

CT_TableBackgroundStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef'), CT_StyleMatrixReference, scope=CT_TableBackgroundStyle, documentation=u'Fill Reference'))
CT_TableBackgroundStyle._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableBackgroundStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableBackgroundStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef')), min_occurs=1L, max_occurs=1L)
    )
CT_TableBackgroundStyle._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableBackgroundStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effect')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableBackgroundStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectRef')), min_occurs=1L, max_occurs=1L)
    )
CT_TableBackgroundStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableBackgroundStyle._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableBackgroundStyle._GroupModel_2, min_occurs=0L, max_occurs=1L)
    )
CT_TableBackgroundStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_TableBackgroundStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_PolarAdjustHandle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pos'), CT_AdjPoint2D, scope=CT_PolarAdjustHandle, documentation=u'Shape Position Coordinate'))
CT_PolarAdjustHandle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PolarAdjustHandle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pos')), min_occurs=1L, max_occurs=1L)
    )
CT_PolarAdjustHandle._ContentModel = pyxb.binding.content.ParticleModel(CT_PolarAdjustHandle._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorSchemeAndMapping._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrMap'), CT_ColorMapping, scope=CT_ColorSchemeAndMapping))

CT_ColorSchemeAndMapping._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme'), CT_ColorScheme, scope=CT_ColorSchemeAndMapping))
CT_ColorSchemeAndMapping._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorSchemeAndMapping._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorSchemeAndMapping._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrMap')), min_occurs=0L, max_occurs=1L)
    )
CT_ColorSchemeAndMapping._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorSchemeAndMapping._GroupModel, min_occurs=1, max_occurs=1)


CT_GraphicalObjectData._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_strict, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), min_occurs=0L, max_occurs=None)
    )
CT_GraphicalObjectData._ContentModel = pyxb.binding.content.ParticleModel(CT_GraphicalObjectData._GroupModel, min_occurs=1, max_occurs=1)



CT_GradientStopList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gs'), CT_GradientStop, scope=CT_GradientStopList, documentation=u'Gradient stops'))
CT_GradientStopList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GradientStopList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gs')), min_occurs=2L, max_occurs=None)
    )
CT_GradientStopList._ContentModel = pyxb.binding.content.ParticleModel(CT_GradientStopList._GroupModel, min_occurs=1, max_occurs=1)



CT_SlideMasterIdList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'sldMasterId'), CT_SlideMasterIdListEntry, scope=CT_SlideMasterIdList, documentation=u'Slide Master ID'))
CT_SlideMasterIdList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideMasterIdList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'sldMasterId')), min_occurs=0L, max_occurs=None)
    )
CT_SlideMasterIdList._ContentModel = pyxb.binding.content.ParticleModel(CT_SlideMasterIdList._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorTransform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ColorTransform))

CT_ColorTransform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'title'), CT_CTName, scope=CT_ColorTransform, documentation=u'Title'))

CT_ColorTransform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), CT_CTCategories, scope=CT_ColorTransform, documentation=u'Color Transform Category List'))

CT_ColorTransform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'styleLbl'), CT_CTStyleLabel, scope=CT_ColorTransform, documentation=u'Style Label'))

CT_ColorTransform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'desc'), CT_CTDescription, scope=CT_ColorTransform, documentation=u'Description'))
CT_ColorTransform._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorTransform._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'title')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_ColorTransform._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'desc')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_ColorTransform._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'catLst')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ColorTransform._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'styleLbl')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_ColorTransform._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ColorTransform._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorTransform._GroupModel, min_occurs=1, max_occurs=1)



CT_PictureNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'nvPr'), CT_ApplicationNonVisualDrawingProps, scope=CT_PictureNonVisual))

CT_PictureNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPr'), CT_NonVisualDrawingProps, scope=CT_PictureNonVisual))

CT_PictureNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPicPr'), CT_NonVisualPictureProperties, scope=CT_PictureNonVisual, documentation=u'Non-Visual Picture Drawing Properties'))
CT_PictureNonVisual._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PictureNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PictureNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cNvPicPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PictureNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'nvPr')), min_occurs=1L, max_occurs=1L)
    )
CT_PictureNonVisual._ContentModel = pyxb.binding.content.ParticleModel(CT_PictureNonVisual._GroupModel, min_occurs=1, max_occurs=1)



CT_StyleDefinitionHeaderLst._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'styleDefHdr'), CT_StyleDefinitionHeader, scope=CT_StyleDefinitionHeaderLst, documentation=u'Style Definition Header'))
CT_StyleDefinitionHeaderLst._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_StyleDefinitionHeaderLst._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'styleDefHdr')), min_occurs=0L, max_occurs=None)
    )
CT_StyleDefinitionHeaderLst._ContentModel = pyxb.binding.content.ParticleModel(CT_StyleDefinitionHeaderLst._GroupModel, min_occurs=1, max_occurs=1)



CT_EmbeddedFontList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'embeddedFont'), CT_EmbeddedFontListEntry, scope=CT_EmbeddedFontList, documentation=u'Embedded Font'))
CT_EmbeddedFontList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EmbeddedFontList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'embeddedFont')), min_occurs=0L, max_occurs=None)
    )
CT_EmbeddedFontList._ContentModel = pyxb.binding.content.ParticleModel(CT_EmbeddedFontList._GroupModel, min_occurs=1, max_occurs=1)



CT_CommentAuthor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_CommentAuthor))
CT_CommentAuthor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CommentAuthor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_CommentAuthor._ContentModel = pyxb.binding.content.ParticleModel(CT_CommentAuthor._GroupModel, min_occurs=1, max_occurs=1)



CT_DiagramDefinitionHeaderLst._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutDefHdr'), CT_DiagramDefinitionHeader, scope=CT_DiagramDefinitionHeaderLst, documentation=u'Layout Definition Header'))
CT_DiagramDefinitionHeaderLst._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DiagramDefinitionHeaderLst._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'layoutDefHdr')), min_occurs=0L, max_occurs=None)
    )
CT_DiagramDefinitionHeaderLst._ContentModel = pyxb.binding.content.ParticleModel(CT_DiagramDefinitionHeaderLst._GroupModel, min_occurs=1, max_occurs=1)



CT_Path2DList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'path'), CT_Path2D, scope=CT_Path2DList, documentation=u'Shape Path'))
CT_Path2DList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Path2DList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'path')), min_occurs=0L, max_occurs=None)
    )
CT_Path2DList._ContentModel = pyxb.binding.content.ParticleModel(CT_Path2DList._GroupModel, min_occurs=1, max_occurs=1)



CT_SlideSorterViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_SlideSorterViewProperties))

CT_SlideSorterViewProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'cViewPr'), CT_CommonViewProperties, scope=CT_SlideSorterViewProperties, documentation=u'Base properties for Slide Sorter View'))
CT_SlideSorterViewProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideSorterViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'cViewPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SlideSorterViewProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_SlideSorterViewProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_SlideSorterViewProperties._GroupModel, min_occurs=1L, max_occurs=1L)



CT_GvmlGroupShapeNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvGrpSpPr'), CT_NonVisualGroupDrawingShapeProps, scope=CT_GvmlGroupShapeNonVisual, documentation=u'Non-Visual Group Shape Drawing Properties'))

CT_GvmlGroupShapeNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), CT_NonVisualDrawingProps, scope=CT_GvmlGroupShapeNonVisual))
CT_GvmlGroupShapeNonVisual._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShapeNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShapeNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvGrpSpPr')), min_occurs=1L, max_occurs=1L)
    )
CT_GvmlGroupShapeNonVisual._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlGroupShapeNonVisual._GroupModel, min_occurs=1, max_occurs=1)



CT_Cxn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Cxn))
CT_Cxn._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Cxn._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Cxn._ContentModel = pyxb.binding.content.ParticleModel(CT_Cxn._GroupModel, min_occurs=1, max_occurs=1)



CT_ElemPropSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'style'), CT_ShapeStyle, scope=CT_ElemPropSet, documentation=u'Shape Style'))

CT_ElemPropSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'presLayoutVars'), CT_LayoutVariablePropertySet, scope=CT_ElemPropSet, documentation=u'Presentation Layout Variables'))
CT_ElemPropSet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ElemPropSet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'presLayoutVars')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ElemPropSet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'style')), min_occurs=0L, max_occurs=1L)
    )
CT_ElemPropSet._ContentModel = pyxb.binding.content.ParticleModel(CT_ElemPropSet._GroupModel, min_occurs=1, max_occurs=1)



CT_Path2DLineTo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), CT_AdjPoint2D, scope=CT_Path2DLineTo, documentation=u'Line end point'))
CT_Path2DLineTo._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Path2DLineTo._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pt')), min_occurs=1L, max_occurs=1L)
    )
CT_Path2DLineTo._ContentModel = pyxb.binding.content.ParticleModel(CT_Path2DLineTo._GroupModel, min_occurs=1, max_occurs=1)



CT_CTStyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'txFillClrLst'), CT_Colors, scope=CT_CTStyleLabel, documentation=u'Text Fill Color List'))

CT_CTStyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'linClrLst'), CT_Colors, scope=CT_CTStyleLabel, documentation=u'Line Color List'))

CT_CTStyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'txEffectClrLst'), CT_Colors, scope=CT_CTStyleLabel, documentation=u'Text Effect Color List'))

CT_CTStyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'fillClrLst'), CT_Colors, scope=CT_CTStyleLabel, documentation=u'Fill Color List'))

CT_CTStyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'effectClrLst'), CT_Colors, scope=CT_CTStyleLabel, documentation=u'Effect Color List'))

CT_CTStyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_CTStyleLabel))

CT_CTStyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'txLinClrLst'), CT_Colors, scope=CT_CTStyleLabel, documentation=u'Text Line Color List'))
CT_CTStyleLabel._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CTStyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'fillClrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CTStyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'linClrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CTStyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'effectClrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CTStyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'txLinClrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CTStyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'txFillClrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CTStyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'txEffectClrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CTStyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_CTStyleLabel._ContentModel = pyxb.binding.content.ParticleModel(CT_CTStyleLabel._GroupModel, min_occurs=1, max_occurs=1)



CT_ObjectStyleDefaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ObjectStyleDefaults))

CT_ObjectStyleDefaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spDef'), CT_DefaultShapeDefinition, scope=CT_ObjectStyleDefaults, documentation=u'Shape Default'))

CT_ObjectStyleDefaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'txDef'), CT_DefaultShapeDefinition, scope=CT_ObjectStyleDefaults, documentation=u'Text Default'))

CT_ObjectStyleDefaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnDef'), CT_DefaultShapeDefinition, scope=CT_ObjectStyleDefaults, documentation=u'Line Default'))
CT_ObjectStyleDefaults._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ObjectStyleDefaults._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spDef')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ObjectStyleDefaults._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnDef')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ObjectStyleDefaults._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'txDef')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ObjectStyleDefaults._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ObjectStyleDefaults._ContentModel = pyxb.binding.content.ParticleModel(CT_ObjectStyleDefaults._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlPictureNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPicPr'), CT_NonVisualPictureProperties, scope=CT_GvmlPictureNonVisual, documentation=u'Non-Visual Picture Drawing Properties'))

CT_GvmlPictureNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), CT_NonVisualDrawingProps, scope=CT_GvmlPictureNonVisual))
CT_GvmlPictureNonVisual._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlPictureNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlPictureNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPicPr')), min_occurs=1L, max_occurs=1L)
    )
CT_GvmlPictureNonVisual._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlPictureNonVisual._GroupModel, min_occurs=1, max_occurs=1)



CT_FontScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_FontScheme))

CT_FontScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'majorFont'), CT_FontCollection, scope=CT_FontScheme, documentation=u'Major Font'))

CT_FontScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'minorFont'), CT_FontCollection, scope=CT_FontScheme, documentation=u'Minor fonts'))
CT_FontScheme._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FontScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'majorFont')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'minorFont')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_FontScheme._ContentModel = pyxb.binding.content.ParticleModel(CT_FontScheme._GroupModel, min_occurs=1, max_occurs=1)



CT_BuildList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'bldGraphic'), CT_TLGraphicalObjectBuild, scope=CT_BuildList, documentation=u'Build Graphics'))

CT_BuildList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'bldOleChart'), CT_TLOleBuildChart, scope=CT_BuildList, documentation=u'Build Embedded Chart'))

CT_BuildList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'bldDgm'), CT_TLBuildDiagram, scope=CT_BuildList, documentation=u'Build Diagram'))

CT_BuildList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'bldP'), CT_TLBuildParagraph, scope=CT_BuildList, documentation=u'Build Paragraph'))
CT_BuildList._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BuildList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'bldP')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BuildList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'bldDgm')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BuildList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'bldOleChart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BuildList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'bldGraphic')), min_occurs=1, max_occurs=1)
    )
CT_BuildList._ContentModel = pyxb.binding.content.ParticleModel(CT_BuildList._GroupModel, min_occurs=1L, max_occurs=None)



CT_PresentationProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'showPr'), CT_ShowProperties, scope=CT_PresentationProperties, documentation=u'Presentation-wide Show Properties'))

CT_PresentationProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'clrMru'), CT_ColorMRU, scope=CT_PresentationProperties, documentation=u'Color MRU'))

CT_PresentationProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_PresentationProperties))

CT_PresentationProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'htmlPubPr'), CT_HtmlPublishProperties, scope=CT_PresentationProperties, documentation=u'HTML Publishing Properties'))

CT_PresentationProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'webPr'), CT_WebProperties, scope=CT_PresentationProperties, documentation=u'Web Properties'))

CT_PresentationProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'prnPr'), CT_PrintProperties, scope=CT_PresentationProperties, documentation=u'Printing Properties'))
CT_PresentationProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PresentationProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'htmlPubPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresentationProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'webPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresentationProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'prnPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresentationProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'showPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresentationProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'clrMru')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresentationProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_PresentationProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_PresentationProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_SlideSyncProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'extLst'), CT_ExtensionList, scope=CT_SlideSyncProperties))
CT_SlideSyncProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SlideSyncProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_SlideSyncProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_SlideSyncProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_TLBuildParagraph._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_, u'tmplLst'), CT_TLTemplateList, scope=CT_TLBuildParagraph, documentation=u'Template effects'))
CT_TLBuildParagraph._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TLBuildParagraph._UseForTag(pyxb.namespace.ExpandedName(_Namespace_, u'tmplLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TLBuildParagraph._ContentModel = pyxb.binding.content.ParticleModel(CT_TLBuildParagraph._GroupModel, min_occurs=1, max_occurs=1)



CT_AdjLst._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'adj'), CT_Adj, scope=CT_AdjLst, documentation=u'Shape Adjust'))
CT_AdjLst._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AdjLst._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'adj')), min_occurs=0L, max_occurs=None)
    )
CT_AdjLst._ContentModel = pyxb.binding.content.ParticleModel(CT_AdjLst._GroupModel, min_occurs=1, max_occurs=1)
