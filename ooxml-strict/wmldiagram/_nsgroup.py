# ./_nsgroup.py
# PyXB bindings for NamespaceGroupModule
# NGM:b277d263ed04688567a4f906b66c8bcb846a1dc3
# Incorporated namespaces:
#  http://schemas.openxmlformats.org/drawingml/2006/diagram None
#  http://schemas.openxmlformats.org/drawingml/2006/main a

import pyxb
import pyxb.binding
import pyxb.utils.utility

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:dd24c2f4-85d5-11df-8277-0026b9799156')

# Import bindings for schemas in group
import pyxb.binding.datatypes
import _s
import _r

_Namespace_a = pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/drawingml/2006/main', create_if_missing=True)
_Namespace_a.configureCategories(['typeBinding', 'elementBinding'])
_Namespace = pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/drawingml/2006/diagram', create_if_missing=True)
_Namespace.configureCategories(['typeBinding', 'elementBinding'])

# Atomic SimpleTypeDefinition
class ST_DrawingElementId (pyxb.binding.datatypes.unsignedInt):

    """Drawing Element ID"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_DrawingElementId')
    _Documentation = u'Drawing Element ID'
ST_DrawingElementId._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_DrawingElementId', ST_DrawingElementId)

# Atomic SimpleTypeDefinition
class ST_LineEndLength (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Line End Length"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_LineEndLength')
    _Documentation = u'Line End Length'
ST_LineEndLength._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LineEndLength, enum_prefix=None)
ST_LineEndLength.sm = ST_LineEndLength._CF_enumeration.addEnumeration(unicode_value=u'sm')
ST_LineEndLength.med = ST_LineEndLength._CF_enumeration.addEnumeration(unicode_value=u'med')
ST_LineEndLength.lg = ST_LineEndLength._CF_enumeration.addEnumeration(unicode_value=u'lg')
ST_LineEndLength._InitializeFacetMap(ST_LineEndLength._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_LineEndLength', ST_LineEndLength)

# Atomic SimpleTypeDefinition
class ST_LineEndType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Line End Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_LineEndType')
    _Documentation = u'Line End Type'
ST_LineEndType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LineEndType, enum_prefix=None)
ST_LineEndType.none = ST_LineEndType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_LineEndType.triangle = ST_LineEndType._CF_enumeration.addEnumeration(unicode_value=u'triangle')
ST_LineEndType.stealth = ST_LineEndType._CF_enumeration.addEnumeration(unicode_value=u'stealth')
ST_LineEndType.diamond = ST_LineEndType._CF_enumeration.addEnumeration(unicode_value=u'diamond')
ST_LineEndType.oval = ST_LineEndType._CF_enumeration.addEnumeration(unicode_value=u'oval')
ST_LineEndType.arrow = ST_LineEndType._CF_enumeration.addEnumeration(unicode_value=u'arrow')
ST_LineEndType._InitializeFacetMap(ST_LineEndType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_LineEndType', ST_LineEndType)

# Atomic SimpleTypeDefinition
class ST_LineEndWidth (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Line End Width"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_LineEndWidth')
    _Documentation = u'Line End Width'
ST_LineEndWidth._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LineEndWidth, enum_prefix=None)
ST_LineEndWidth.sm = ST_LineEndWidth._CF_enumeration.addEnumeration(unicode_value=u'sm')
ST_LineEndWidth.med = ST_LineEndWidth._CF_enumeration.addEnumeration(unicode_value=u'med')
ST_LineEndWidth.lg = ST_LineEndWidth._CF_enumeration.addEnumeration(unicode_value=u'lg')
ST_LineEndWidth._InitializeFacetMap(ST_LineEndWidth._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_LineEndWidth', ST_LineEndWidth)

# Atomic SimpleTypeDefinition
class ST_PercentageDecimal (pyxb.binding.datatypes.int):

    """Percentage as Decimal Number"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PercentageDecimal')
    _Documentation = u'Percentage as Decimal Number'
ST_PercentageDecimal._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_PercentageDecimal', ST_PercentageDecimal)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_Percentage (pyxb.binding.basis.STD_union):

    """Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_Percentage')
    _Documentation = u'Percentage'

    _MemberTypes = ( ST_PercentageDecimal, _s.ST_Percentage, )
ST_Percentage._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_Percentage._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Percentage)
ST_Percentage._InitializeFacetMap(ST_Percentage._CF_pattern,
   ST_Percentage._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_Percentage', ST_Percentage)

# Atomic SimpleTypeDefinition
class ST_TextAlignType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Alignment Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextAlignType')
    _Documentation = u'Text Alignment Types'
ST_TextAlignType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextAlignType, enum_prefix=None)
ST_TextAlignType.l = ST_TextAlignType._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_TextAlignType.ctr = ST_TextAlignType._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_TextAlignType.r = ST_TextAlignType._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_TextAlignType.just = ST_TextAlignType._CF_enumeration.addEnumeration(unicode_value=u'just')
ST_TextAlignType.justLow = ST_TextAlignType._CF_enumeration.addEnumeration(unicode_value=u'justLow')
ST_TextAlignType.dist = ST_TextAlignType._CF_enumeration.addEnumeration(unicode_value=u'dist')
ST_TextAlignType.thaiDist = ST_TextAlignType._CF_enumeration.addEnumeration(unicode_value=u'thaiDist')
ST_TextAlignType._InitializeFacetMap(ST_TextAlignType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextAlignType', ST_TextAlignType)

# Atomic SimpleTypeDefinition
class ST_Coordinate32Unqualified (pyxb.binding.datatypes.int):

    """Coordinate Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_Coordinate32Unqualified')
    _Documentation = u'Coordinate Point'
ST_Coordinate32Unqualified._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_Coordinate32Unqualified', ST_Coordinate32Unqualified)

# Atomic SimpleTypeDefinition
class ST_TextMargin (ST_Coordinate32Unqualified):

    """Text Margin"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextMargin')
    _Documentation = u'Text Margin'
ST_TextMargin._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextMargin, value=pyxb.binding.datatypes.int(0))
ST_TextMargin._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextMargin, value=pyxb.binding.datatypes.int(51206400))
ST_TextMargin._InitializeFacetMap(ST_TextMargin._CF_minInclusive,
   ST_TextMargin._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextMargin', ST_TextMargin)

# Atomic SimpleTypeDefinition
class ST_TextIndent (ST_Coordinate32Unqualified):

    """Text Indentation"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextIndent')
    _Documentation = u'Text Indentation'
ST_TextIndent._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextIndent, value=pyxb.binding.datatypes.int(-51206400))
ST_TextIndent._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextIndent, value=pyxb.binding.datatypes.int(51206400))
ST_TextIndent._InitializeFacetMap(ST_TextIndent._CF_minInclusive,
   ST_TextIndent._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextIndent', ST_TextIndent)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_Coordinate32 (pyxb.binding.basis.STD_union):

    """Coordinate Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_Coordinate32')
    _Documentation = u'Coordinate Point'

    _MemberTypes = ( ST_Coordinate32Unqualified, _s.ST_UniversalMeasure, )
ST_Coordinate32._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_Coordinate32._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Coordinate32)
ST_Coordinate32._InitializeFacetMap(ST_Coordinate32._CF_pattern,
   ST_Coordinate32._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_Coordinate32', ST_Coordinate32)

# Atomic SimpleTypeDefinition
class ST_TextFontAlignType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Font Alignment Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextFontAlignType')
    _Documentation = u'Font Alignment Types'
ST_TextFontAlignType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextFontAlignType, enum_prefix=None)
ST_TextFontAlignType.auto = ST_TextFontAlignType._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_TextFontAlignType.t = ST_TextFontAlignType._CF_enumeration.addEnumeration(unicode_value=u't')
ST_TextFontAlignType.ctr = ST_TextFontAlignType._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_TextFontAlignType.base = ST_TextFontAlignType._CF_enumeration.addEnumeration(unicode_value=u'base')
ST_TextFontAlignType.b = ST_TextFontAlignType._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_TextFontAlignType._InitializeFacetMap(ST_TextFontAlignType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextFontAlignType', ST_TextFontAlignType)

# Atomic SimpleTypeDefinition
class ST_TextIndentLevelType (pyxb.binding.datatypes.int):

    """Text Indent Level Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextIndentLevelType')
    _Documentation = u'Text Indent Level Type'
ST_TextIndentLevelType._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextIndentLevelType, value=pyxb.binding.datatypes.int(0))
ST_TextIndentLevelType._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextIndentLevelType, value=pyxb.binding.datatypes.int(8))
ST_TextIndentLevelType._InitializeFacetMap(ST_TextIndentLevelType._CF_minInclusive,
   ST_TextIndentLevelType._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextIndentLevelType', ST_TextIndentLevelType)

# Atomic SimpleTypeDefinition
class ST_PositivePercentageDecimal (ST_PercentageDecimal):

    """Positive Percentage as Decimal Number"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PositivePercentageDecimal')
    _Documentation = u'Positive Percentage as Decimal Number'
ST_PositivePercentageDecimal._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_PositivePercentageDecimal, value=pyxb.binding.datatypes.int(0))
ST_PositivePercentageDecimal._InitializeFacetMap(ST_PositivePercentageDecimal._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PositivePercentageDecimal', ST_PositivePercentageDecimal)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_PositivePercentage (pyxb.binding.basis.STD_union):

    """Positive Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PositivePercentage')
    _Documentation = u'Positive Percentage'

    _MemberTypes = ( ST_PositivePercentageDecimal, _s.ST_PositivePercentage, )
ST_PositivePercentage._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_PositivePercentage._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PositivePercentage)
ST_PositivePercentage._InitializeFacetMap(ST_PositivePercentage._CF_pattern,
   ST_PositivePercentage._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PositivePercentage', ST_PositivePercentage)

# Atomic SimpleTypeDefinition
class ST_SystemColorVal (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """System Color Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_SystemColorVal')
    _Documentation = u'System Color Value'
ST_SystemColorVal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SystemColorVal, enum_prefix=None)
ST_SystemColorVal.scrollBar = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'scrollBar')
ST_SystemColorVal.background = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'background')
ST_SystemColorVal.activeCaption = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'activeCaption')
ST_SystemColorVal.inactiveCaption = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'inactiveCaption')
ST_SystemColorVal.menu = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'menu')
ST_SystemColorVal.window = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'window')
ST_SystemColorVal.windowFrame = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'windowFrame')
ST_SystemColorVal.menuText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'menuText')
ST_SystemColorVal.windowText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'windowText')
ST_SystemColorVal.captionText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'captionText')
ST_SystemColorVal.activeBorder = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'activeBorder')
ST_SystemColorVal.inactiveBorder = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'inactiveBorder')
ST_SystemColorVal.appWorkspace = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'appWorkspace')
ST_SystemColorVal.highlight = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'highlight')
ST_SystemColorVal.highlightText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'highlightText')
ST_SystemColorVal.btnFace = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'btnFace')
ST_SystemColorVal.btnShadow = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'btnShadow')
ST_SystemColorVal.grayText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'grayText')
ST_SystemColorVal.btnText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'btnText')
ST_SystemColorVal.inactiveCaptionText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'inactiveCaptionText')
ST_SystemColorVal.btnHighlight = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'btnHighlight')
ST_SystemColorVal.n3dDkShadow = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'3dDkShadow')
ST_SystemColorVal.n3dLight = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'3dLight')
ST_SystemColorVal.infoText = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'infoText')
ST_SystemColorVal.infoBk = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'infoBk')
ST_SystemColorVal.hotLight = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'hotLight')
ST_SystemColorVal.gradientActiveCaption = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'gradientActiveCaption')
ST_SystemColorVal.gradientInactiveCaption = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'gradientInactiveCaption')
ST_SystemColorVal.menuHighlight = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'menuHighlight')
ST_SystemColorVal.menuBar = ST_SystemColorVal._CF_enumeration.addEnumeration(unicode_value=u'menuBar')
ST_SystemColorVal._InitializeFacetMap(ST_SystemColorVal._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_SystemColorVal', ST_SystemColorVal)

# Atomic SimpleTypeDefinition
class ST_Angle (pyxb.binding.datatypes.int):

    """Angle"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_Angle')
    _Documentation = u'Angle'
ST_Angle._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_Angle', ST_Angle)

# Atomic SimpleTypeDefinition
class ST_GeomGuideName (pyxb.binding.datatypes.token):

    """Geometry Guide Name Properties"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_GeomGuideName')
    _Documentation = u'Geometry Guide Name Properties'
ST_GeomGuideName._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_GeomGuideName', ST_GeomGuideName)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_AdjAngle (pyxb.binding.basis.STD_union):

    """Adjustable Angle Methods"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_AdjAngle')
    _Documentation = u'Adjustable Angle Methods'

    _MemberTypes = ( ST_Angle, ST_GeomGuideName, )
ST_AdjAngle._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_AdjAngle._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AdjAngle)
ST_AdjAngle._InitializeFacetMap(ST_AdjAngle._CF_pattern,
   ST_AdjAngle._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_AdjAngle', ST_AdjAngle)

# Atomic SimpleTypeDefinition
class ST_Direction (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Diagram Direction Definition"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_Direction')
    _Documentation = u'Diagram Direction Definition'
ST_Direction._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Direction, enum_prefix=None)
ST_Direction.norm = ST_Direction._CF_enumeration.addEnumeration(unicode_value=u'norm')
ST_Direction.rev = ST_Direction._CF_enumeration.addEnumeration(unicode_value=u'rev')
ST_Direction._InitializeFacetMap(ST_Direction._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_Direction', ST_Direction)

# Atomic SimpleTypeDefinition
class ST_StyleMatrixColumnIndex (pyxb.binding.datatypes.unsignedInt):

    """Style Matrix Column Index"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_StyleMatrixColumnIndex')
    _Documentation = u'Style Matrix Column Index'
ST_StyleMatrixColumnIndex._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_StyleMatrixColumnIndex', ST_StyleMatrixColumnIndex)

# Atomic SimpleTypeDefinition
class ST_LightRigDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Light Rig Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_LightRigDirection')
    _Documentation = u'Light Rig Direction'
ST_LightRigDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LightRigDirection, enum_prefix=None)
ST_LightRigDirection.tl = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u'tl')
ST_LightRigDirection.t = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u't')
ST_LightRigDirection.tr = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u'tr')
ST_LightRigDirection.l = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_LightRigDirection.r = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_LightRigDirection.bl = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u'bl')
ST_LightRigDirection.b = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_LightRigDirection.br = ST_LightRigDirection._CF_enumeration.addEnumeration(unicode_value=u'br')
ST_LightRigDirection._InitializeFacetMap(ST_LightRigDirection._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_LightRigDirection', ST_LightRigDirection)

# Atomic SimpleTypeDefinition
class ST_LightRigType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Light Rig Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_LightRigType')
    _Documentation = u'Light Rig Type'
ST_LightRigType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LightRigType, enum_prefix=None)
ST_LightRigType.legacyFlat1 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyFlat1')
ST_LightRigType.legacyFlat2 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyFlat2')
ST_LightRigType.legacyFlat3 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyFlat3')
ST_LightRigType.legacyFlat4 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyFlat4')
ST_LightRigType.legacyNormal1 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyNormal1')
ST_LightRigType.legacyNormal2 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyNormal2')
ST_LightRigType.legacyNormal3 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyNormal3')
ST_LightRigType.legacyNormal4 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyNormal4')
ST_LightRigType.legacyHarsh1 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyHarsh1')
ST_LightRigType.legacyHarsh2 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyHarsh2')
ST_LightRigType.legacyHarsh3 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyHarsh3')
ST_LightRigType.legacyHarsh4 = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'legacyHarsh4')
ST_LightRigType.threePt = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'threePt')
ST_LightRigType.balanced = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'balanced')
ST_LightRigType.soft = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'soft')
ST_LightRigType.harsh = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'harsh')
ST_LightRigType.flood = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'flood')
ST_LightRigType.contrasting = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'contrasting')
ST_LightRigType.morning = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'morning')
ST_LightRigType.sunrise = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'sunrise')
ST_LightRigType.sunset = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'sunset')
ST_LightRigType.chilly = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'chilly')
ST_LightRigType.freezing = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'freezing')
ST_LightRigType.flat = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'flat')
ST_LightRigType.twoPt = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'twoPt')
ST_LightRigType.glow = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'glow')
ST_LightRigType.brightRoom = ST_LightRigType._CF_enumeration.addEnumeration(unicode_value=u'brightRoom')
ST_LightRigType._InitializeFacetMap(ST_LightRigType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_LightRigType', ST_LightRigType)

# Atomic SimpleTypeDefinition
class ST_BlipCompression (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Blip Compression Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_BlipCompression')
    _Documentation = u'Blip Compression Type'
ST_BlipCompression._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BlipCompression, enum_prefix=None)
ST_BlipCompression.email = ST_BlipCompression._CF_enumeration.addEnumeration(unicode_value=u'email')
ST_BlipCompression.screen = ST_BlipCompression._CF_enumeration.addEnumeration(unicode_value=u'screen')
ST_BlipCompression.print_ = ST_BlipCompression._CF_enumeration.addEnumeration(unicode_value=u'print')
ST_BlipCompression.hqprint = ST_BlipCompression._CF_enumeration.addEnumeration(unicode_value=u'hqprint')
ST_BlipCompression.none = ST_BlipCompression._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_BlipCompression._InitializeFacetMap(ST_BlipCompression._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_BlipCompression', ST_BlipCompression)

# Atomic SimpleTypeDefinition
class ST_BlackWhiteMode (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Black and White Mode"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_BlackWhiteMode')
    _Documentation = u'Black and White Mode'
ST_BlackWhiteMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BlackWhiteMode, enum_prefix=None)
ST_BlackWhiteMode.clr = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'clr')
ST_BlackWhiteMode.auto = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_BlackWhiteMode.gray = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'gray')
ST_BlackWhiteMode.ltGray = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'ltGray')
ST_BlackWhiteMode.invGray = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'invGray')
ST_BlackWhiteMode.grayWhite = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'grayWhite')
ST_BlackWhiteMode.blackGray = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'blackGray')
ST_BlackWhiteMode.blackWhite = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'blackWhite')
ST_BlackWhiteMode.black = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'black')
ST_BlackWhiteMode.white = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'white')
ST_BlackWhiteMode.hidden = ST_BlackWhiteMode._CF_enumeration.addEnumeration(unicode_value=u'hidden')
ST_BlackWhiteMode._InitializeFacetMap(ST_BlackWhiteMode._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_BlackWhiteMode', ST_BlackWhiteMode)

# Atomic SimpleTypeDefinition
class ST_TextFontSize (pyxb.binding.datatypes.int):

    """Text Font Size"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextFontSize')
    _Documentation = u'Text Font Size'
ST_TextFontSize._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextFontSize, value=pyxb.binding.datatypes.int(100))
ST_TextFontSize._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextFontSize, value=pyxb.binding.datatypes.int(400000))
ST_TextFontSize._InitializeFacetMap(ST_TextFontSize._CF_minInclusive,
   ST_TextFontSize._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextFontSize', ST_TextFontSize)

# Atomic SimpleTypeDefinition
class ST_PositiveFixedAngle (ST_Angle):

    """Positive Fixed Angle"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PositiveFixedAngle')
    _Documentation = u'Positive Fixed Angle'
ST_PositiveFixedAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_PositiveFixedAngle, value=pyxb.binding.datatypes.int(0))
ST_PositiveFixedAngle._CF_maxExclusive = pyxb.binding.facets.CF_maxExclusive(value_datatype=ST_Angle, value=pyxb.binding.datatypes.long(21600000L))
ST_PositiveFixedAngle._InitializeFacetMap(ST_PositiveFixedAngle._CF_minInclusive,
   ST_PositiveFixedAngle._CF_maxExclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PositiveFixedAngle', ST_PositiveFixedAngle)

# Atomic SimpleTypeDefinition
class ST_FixedPercentageDecimal (ST_PercentageDecimal):

    """Fixed Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_FixedPercentageDecimal')
    _Documentation = u'Fixed Percentage'
ST_FixedPercentageDecimal._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_FixedPercentageDecimal, value=pyxb.binding.datatypes.int(-100000))
ST_FixedPercentageDecimal._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_FixedPercentageDecimal, value=pyxb.binding.datatypes.int(100000))
ST_FixedPercentageDecimal._InitializeFacetMap(ST_FixedPercentageDecimal._CF_minInclusive,
   ST_FixedPercentageDecimal._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_FixedPercentageDecimal', ST_FixedPercentageDecimal)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_FixedPercentage (pyxb.binding.basis.STD_union):

    """Fixed Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_FixedPercentage')
    _Documentation = u'Fixed Percentage'

    _MemberTypes = ( ST_FixedPercentageDecimal, _s.ST_FixedPercentage, )
ST_FixedPercentage._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_FixedPercentage._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FixedPercentage)
ST_FixedPercentage._InitializeFacetMap(ST_FixedPercentage._CF_pattern,
   ST_FixedPercentage._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_FixedPercentage', ST_FixedPercentage)

# Atomic SimpleTypeDefinition
class ST_CoordinateUnqualified (pyxb.binding.datatypes.long):

    """Coordinate"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_CoordinateUnqualified')
    _Documentation = u'Coordinate'
ST_CoordinateUnqualified._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_CoordinateUnqualified, value=pyxb.binding.datatypes.long(-27273042329600L))
ST_CoordinateUnqualified._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_CoordinateUnqualified, value=pyxb.binding.datatypes.long(27273042316900L))
ST_CoordinateUnqualified._InitializeFacetMap(ST_CoordinateUnqualified._CF_minInclusive,
   ST_CoordinateUnqualified._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_CoordinateUnqualified', ST_CoordinateUnqualified)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_Coordinate (pyxb.binding.basis.STD_union):

    """Coordinate"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_Coordinate')
    _Documentation = u'Coordinate'

    _MemberTypes = ( ST_CoordinateUnqualified, _s.ST_UniversalMeasure, )
ST_Coordinate._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_Coordinate._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Coordinate)
ST_Coordinate._InitializeFacetMap(ST_Coordinate._CF_pattern,
   ST_Coordinate._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_Coordinate', ST_Coordinate)

# Atomic SimpleTypeDefinition
class ST_BlendMode (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Blend Mode"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_BlendMode')
    _Documentation = u'Blend Mode'
ST_BlendMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BlendMode, enum_prefix=None)
ST_BlendMode.over = ST_BlendMode._CF_enumeration.addEnumeration(unicode_value=u'over')
ST_BlendMode.mult = ST_BlendMode._CF_enumeration.addEnumeration(unicode_value=u'mult')
ST_BlendMode.screen = ST_BlendMode._CF_enumeration.addEnumeration(unicode_value=u'screen')
ST_BlendMode.darken = ST_BlendMode._CF_enumeration.addEnumeration(unicode_value=u'darken')
ST_BlendMode.lighten = ST_BlendMode._CF_enumeration.addEnumeration(unicode_value=u'lighten')
ST_BlendMode._InitializeFacetMap(ST_BlendMode._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_BlendMode', ST_BlendMode)

# Atomic SimpleTypeDefinition
class ST_PositiveCoordinate (pyxb.binding.datatypes.long):

    """Positive Coordinate"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PositiveCoordinate')
    _Documentation = u'Positive Coordinate'
ST_PositiveCoordinate._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_PositiveCoordinate, value=pyxb.binding.datatypes.long(0L))
ST_PositiveCoordinate._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_PositiveCoordinate, value=pyxb.binding.datatypes.long(27273042316900L))
ST_PositiveCoordinate._InitializeFacetMap(ST_PositiveCoordinate._CF_minInclusive,
   ST_PositiveCoordinate._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PositiveCoordinate', ST_PositiveCoordinate)

# Atomic SimpleTypeDefinition
class ST_PositiveFixedPercentageDecimal (ST_PercentageDecimal):

    """Positive Fixed Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PositiveFixedPercentageDecimal')
    _Documentation = u'Positive Fixed Percentage'
ST_PositiveFixedPercentageDecimal._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_PositiveFixedPercentageDecimal, value=pyxb.binding.datatypes.int(0))
ST_PositiveFixedPercentageDecimal._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_PositiveFixedPercentageDecimal, value=pyxb.binding.datatypes.int(100000))
ST_PositiveFixedPercentageDecimal._InitializeFacetMap(ST_PositiveFixedPercentageDecimal._CF_minInclusive,
   ST_PositiveFixedPercentageDecimal._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PositiveFixedPercentageDecimal', ST_PositiveFixedPercentageDecimal)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_PositiveFixedPercentage (pyxb.binding.basis.STD_union):

    """Positive Fixed Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PositiveFixedPercentage')
    _Documentation = u'Positive Fixed Percentage'

    _MemberTypes = ( ST_PositiveFixedPercentageDecimal, _s.ST_PositiveFixedPercentage, )
ST_PositiveFixedPercentage._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_PositiveFixedPercentage._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PositiveFixedPercentage)
ST_PositiveFixedPercentage._InitializeFacetMap(ST_PositiveFixedPercentage._CF_pattern,
   ST_PositiveFixedPercentage._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PositiveFixedPercentage', ST_PositiveFixedPercentage)

# Atomic SimpleTypeDefinition
class ST_PresetPatternVal (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Pattern Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PresetPatternVal')
    _Documentation = u'Preset Pattern Value'
ST_PresetPatternVal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PresetPatternVal, enum_prefix=None)
ST_PresetPatternVal.pct5 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct5')
ST_PresetPatternVal.pct10 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct10')
ST_PresetPatternVal.pct20 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct20')
ST_PresetPatternVal.pct25 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct25')
ST_PresetPatternVal.pct30 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct30')
ST_PresetPatternVal.pct40 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct40')
ST_PresetPatternVal.pct50 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct50')
ST_PresetPatternVal.pct60 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct60')
ST_PresetPatternVal.pct70 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct70')
ST_PresetPatternVal.pct75 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct75')
ST_PresetPatternVal.pct80 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct80')
ST_PresetPatternVal.pct90 = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'pct90')
ST_PresetPatternVal.horz = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'horz')
ST_PresetPatternVal.vert = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'vert')
ST_PresetPatternVal.ltHorz = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'ltHorz')
ST_PresetPatternVal.ltVert = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'ltVert')
ST_PresetPatternVal.dkHorz = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dkHorz')
ST_PresetPatternVal.dkVert = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dkVert')
ST_PresetPatternVal.narHorz = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'narHorz')
ST_PresetPatternVal.narVert = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'narVert')
ST_PresetPatternVal.dashHorz = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dashHorz')
ST_PresetPatternVal.dashVert = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dashVert')
ST_PresetPatternVal.cross = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'cross')
ST_PresetPatternVal.dnDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dnDiag')
ST_PresetPatternVal.upDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'upDiag')
ST_PresetPatternVal.ltDnDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'ltDnDiag')
ST_PresetPatternVal.ltUpDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'ltUpDiag')
ST_PresetPatternVal.dkDnDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dkDnDiag')
ST_PresetPatternVal.dkUpDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dkUpDiag')
ST_PresetPatternVal.wdDnDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'wdDnDiag')
ST_PresetPatternVal.wdUpDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'wdUpDiag')
ST_PresetPatternVal.dashDnDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dashDnDiag')
ST_PresetPatternVal.dashUpDiag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dashUpDiag')
ST_PresetPatternVal.diagCross = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'diagCross')
ST_PresetPatternVal.smCheck = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'smCheck')
ST_PresetPatternVal.lgCheck = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'lgCheck')
ST_PresetPatternVal.smGrid = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'smGrid')
ST_PresetPatternVal.lgGrid = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'lgGrid')
ST_PresetPatternVal.dotGrid = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dotGrid')
ST_PresetPatternVal.smConfetti = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'smConfetti')
ST_PresetPatternVal.lgConfetti = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'lgConfetti')
ST_PresetPatternVal.horzBrick = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'horzBrick')
ST_PresetPatternVal.diagBrick = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'diagBrick')
ST_PresetPatternVal.solidDmnd = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'solidDmnd')
ST_PresetPatternVal.openDmnd = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'openDmnd')
ST_PresetPatternVal.dotDmnd = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'dotDmnd')
ST_PresetPatternVal.plaid = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'plaid')
ST_PresetPatternVal.sphere = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'sphere')
ST_PresetPatternVal.weave = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'weave')
ST_PresetPatternVal.divot = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'divot')
ST_PresetPatternVal.shingle = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'shingle')
ST_PresetPatternVal.wave = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'wave')
ST_PresetPatternVal.trellis = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'trellis')
ST_PresetPatternVal.zigZag = ST_PresetPatternVal._CF_enumeration.addEnumeration(unicode_value=u'zigZag')
ST_PresetPatternVal._InitializeFacetMap(ST_PresetPatternVal._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PresetPatternVal', ST_PresetPatternVal)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_AdjCoordinate (pyxb.binding.basis.STD_union):

    """Adjustable Coordinate Methods"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_AdjCoordinate')
    _Documentation = u'Adjustable Coordinate Methods'

    _MemberTypes = ( ST_CoordinateUnqualified, _s.ST_UniversalMeasure, ST_GeomGuideName, )
ST_AdjCoordinate._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_AdjCoordinate._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AdjCoordinate)
ST_AdjCoordinate._InitializeFacetMap(ST_AdjCoordinate._CF_pattern,
   ST_AdjCoordinate._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_AdjCoordinate', ST_AdjCoordinate)

# Atomic SimpleTypeDefinition
class ST_PresetColorVal (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Color Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PresetColorVal')
    _Documentation = u'Preset Color Value'
ST_PresetColorVal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PresetColorVal, enum_prefix=None)
ST_PresetColorVal.aliceBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'aliceBlue')
ST_PresetColorVal.antiqueWhite = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'antiqueWhite')
ST_PresetColorVal.aqua = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'aqua')
ST_PresetColorVal.aquamarine = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'aquamarine')
ST_PresetColorVal.azure = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'azure')
ST_PresetColorVal.beige = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'beige')
ST_PresetColorVal.bisque = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'bisque')
ST_PresetColorVal.black = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'black')
ST_PresetColorVal.blanchedAlmond = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'blanchedAlmond')
ST_PresetColorVal.blue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'blue')
ST_PresetColorVal.blueViolet = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'blueViolet')
ST_PresetColorVal.brown = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'brown')
ST_PresetColorVal.burlyWood = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'burlyWood')
ST_PresetColorVal.cadetBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'cadetBlue')
ST_PresetColorVal.chartreuse = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'chartreuse')
ST_PresetColorVal.chocolate = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'chocolate')
ST_PresetColorVal.coral = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'coral')
ST_PresetColorVal.cornflowerBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'cornflowerBlue')
ST_PresetColorVal.cornsilk = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'cornsilk')
ST_PresetColorVal.crimson = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'crimson')
ST_PresetColorVal.cyan = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'cyan')
ST_PresetColorVal.darkBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkBlue')
ST_PresetColorVal.darkCyan = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkCyan')
ST_PresetColorVal.darkGoldenrod = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkGoldenrod')
ST_PresetColorVal.darkGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkGray')
ST_PresetColorVal.darkGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkGrey')
ST_PresetColorVal.darkGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkGreen')
ST_PresetColorVal.darkKhaki = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkKhaki')
ST_PresetColorVal.darkMagenta = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkMagenta')
ST_PresetColorVal.darkOliveGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkOliveGreen')
ST_PresetColorVal.darkOrange = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkOrange')
ST_PresetColorVal.darkOrchid = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkOrchid')
ST_PresetColorVal.darkRed = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkRed')
ST_PresetColorVal.darkSalmon = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkSalmon')
ST_PresetColorVal.darkSeaGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkSeaGreen')
ST_PresetColorVal.darkSlateBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkSlateBlue')
ST_PresetColorVal.darkSlateGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkSlateGray')
ST_PresetColorVal.darkSlateGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkSlateGrey')
ST_PresetColorVal.darkTurquoise = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkTurquoise')
ST_PresetColorVal.darkViolet = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'darkViolet')
ST_PresetColorVal.dkBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkBlue')
ST_PresetColorVal.dkCyan = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkCyan')
ST_PresetColorVal.dkGoldenrod = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkGoldenrod')
ST_PresetColorVal.dkGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkGray')
ST_PresetColorVal.dkGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkGrey')
ST_PresetColorVal.dkGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkGreen')
ST_PresetColorVal.dkKhaki = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkKhaki')
ST_PresetColorVal.dkMagenta = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkMagenta')
ST_PresetColorVal.dkOliveGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkOliveGreen')
ST_PresetColorVal.dkOrange = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkOrange')
ST_PresetColorVal.dkOrchid = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkOrchid')
ST_PresetColorVal.dkRed = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkRed')
ST_PresetColorVal.dkSalmon = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkSalmon')
ST_PresetColorVal.dkSeaGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkSeaGreen')
ST_PresetColorVal.dkSlateBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkSlateBlue')
ST_PresetColorVal.dkSlateGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkSlateGray')
ST_PresetColorVal.dkSlateGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkSlateGrey')
ST_PresetColorVal.dkTurquoise = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkTurquoise')
ST_PresetColorVal.dkViolet = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dkViolet')
ST_PresetColorVal.deepPink = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'deepPink')
ST_PresetColorVal.deepSkyBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'deepSkyBlue')
ST_PresetColorVal.dimGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dimGray')
ST_PresetColorVal.dimGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dimGrey')
ST_PresetColorVal.dodgerBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'dodgerBlue')
ST_PresetColorVal.firebrick = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'firebrick')
ST_PresetColorVal.floralWhite = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'floralWhite')
ST_PresetColorVal.forestGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'forestGreen')
ST_PresetColorVal.fuchsia = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'fuchsia')
ST_PresetColorVal.gainsboro = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'gainsboro')
ST_PresetColorVal.ghostWhite = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ghostWhite')
ST_PresetColorVal.gold = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'gold')
ST_PresetColorVal.goldenrod = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'goldenrod')
ST_PresetColorVal.gray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'gray')
ST_PresetColorVal.grey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'grey')
ST_PresetColorVal.green = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'green')
ST_PresetColorVal.greenYellow = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'greenYellow')
ST_PresetColorVal.honeydew = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'honeydew')
ST_PresetColorVal.hotPink = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'hotPink')
ST_PresetColorVal.indianRed = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'indianRed')
ST_PresetColorVal.indigo = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'indigo')
ST_PresetColorVal.ivory = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ivory')
ST_PresetColorVal.khaki = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'khaki')
ST_PresetColorVal.lavender = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lavender')
ST_PresetColorVal.lavenderBlush = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lavenderBlush')
ST_PresetColorVal.lawnGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lawnGreen')
ST_PresetColorVal.lemonChiffon = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lemonChiffon')
ST_PresetColorVal.lightBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightBlue')
ST_PresetColorVal.lightCoral = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightCoral')
ST_PresetColorVal.lightCyan = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightCyan')
ST_PresetColorVal.lightGoldenrodYellow = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightGoldenrodYellow')
ST_PresetColorVal.lightGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightGray')
ST_PresetColorVal.lightGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightGrey')
ST_PresetColorVal.lightGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightGreen')
ST_PresetColorVal.lightPink = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightPink')
ST_PresetColorVal.lightSalmon = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightSalmon')
ST_PresetColorVal.lightSeaGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightSeaGreen')
ST_PresetColorVal.lightSkyBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightSkyBlue')
ST_PresetColorVal.lightSlateGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightSlateGray')
ST_PresetColorVal.lightSlateGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightSlateGrey')
ST_PresetColorVal.lightSteelBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightSteelBlue')
ST_PresetColorVal.lightYellow = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lightYellow')
ST_PresetColorVal.ltBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltBlue')
ST_PresetColorVal.ltCoral = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltCoral')
ST_PresetColorVal.ltCyan = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltCyan')
ST_PresetColorVal.ltGoldenrodYellow = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltGoldenrodYellow')
ST_PresetColorVal.ltGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltGray')
ST_PresetColorVal.ltGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltGrey')
ST_PresetColorVal.ltGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltGreen')
ST_PresetColorVal.ltPink = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltPink')
ST_PresetColorVal.ltSalmon = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltSalmon')
ST_PresetColorVal.ltSeaGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltSeaGreen')
ST_PresetColorVal.ltSkyBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltSkyBlue')
ST_PresetColorVal.ltSlateGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltSlateGray')
ST_PresetColorVal.ltSlateGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltSlateGrey')
ST_PresetColorVal.ltSteelBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltSteelBlue')
ST_PresetColorVal.ltYellow = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'ltYellow')
ST_PresetColorVal.lime = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'lime')
ST_PresetColorVal.limeGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'limeGreen')
ST_PresetColorVal.linen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'linen')
ST_PresetColorVal.magenta = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'magenta')
ST_PresetColorVal.maroon = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'maroon')
ST_PresetColorVal.medAquamarine = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medAquamarine')
ST_PresetColorVal.medBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medBlue')
ST_PresetColorVal.medOrchid = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medOrchid')
ST_PresetColorVal.medPurple = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medPurple')
ST_PresetColorVal.medSeaGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medSeaGreen')
ST_PresetColorVal.medSlateBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medSlateBlue')
ST_PresetColorVal.medSpringGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medSpringGreen')
ST_PresetColorVal.medTurquoise = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medTurquoise')
ST_PresetColorVal.medVioletRed = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'medVioletRed')
ST_PresetColorVal.mediumAquamarine = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumAquamarine')
ST_PresetColorVal.mediumBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumBlue')
ST_PresetColorVal.mediumOrchid = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumOrchid')
ST_PresetColorVal.mediumPurple = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumPurple')
ST_PresetColorVal.mediumSeaGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumSeaGreen')
ST_PresetColorVal.mediumSlateBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumSlateBlue')
ST_PresetColorVal.mediumSpringGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumSpringGreen')
ST_PresetColorVal.mediumTurquoise = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumTurquoise')
ST_PresetColorVal.mediumVioletRed = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mediumVioletRed')
ST_PresetColorVal.midnightBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'midnightBlue')
ST_PresetColorVal.mintCream = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mintCream')
ST_PresetColorVal.mistyRose = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'mistyRose')
ST_PresetColorVal.moccasin = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'moccasin')
ST_PresetColorVal.navajoWhite = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'navajoWhite')
ST_PresetColorVal.navy = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'navy')
ST_PresetColorVal.oldLace = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'oldLace')
ST_PresetColorVal.olive = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'olive')
ST_PresetColorVal.oliveDrab = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'oliveDrab')
ST_PresetColorVal.orange = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'orange')
ST_PresetColorVal.orangeRed = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'orangeRed')
ST_PresetColorVal.orchid = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'orchid')
ST_PresetColorVal.paleGoldenrod = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'paleGoldenrod')
ST_PresetColorVal.paleGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'paleGreen')
ST_PresetColorVal.paleTurquoise = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'paleTurquoise')
ST_PresetColorVal.paleVioletRed = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'paleVioletRed')
ST_PresetColorVal.papayaWhip = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'papayaWhip')
ST_PresetColorVal.peachPuff = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'peachPuff')
ST_PresetColorVal.peru = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'peru')
ST_PresetColorVal.pink = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'pink')
ST_PresetColorVal.plum = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'plum')
ST_PresetColorVal.powderBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'powderBlue')
ST_PresetColorVal.purple = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'purple')
ST_PresetColorVal.red = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'red')
ST_PresetColorVal.rosyBrown = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'rosyBrown')
ST_PresetColorVal.royalBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'royalBlue')
ST_PresetColorVal.saddleBrown = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'saddleBrown')
ST_PresetColorVal.salmon = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'salmon')
ST_PresetColorVal.sandyBrown = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'sandyBrown')
ST_PresetColorVal.seaGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'seaGreen')
ST_PresetColorVal.seaShell = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'seaShell')
ST_PresetColorVal.sienna = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'sienna')
ST_PresetColorVal.silver = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'silver')
ST_PresetColorVal.skyBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'skyBlue')
ST_PresetColorVal.slateBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'slateBlue')
ST_PresetColorVal.slateGray = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'slateGray')
ST_PresetColorVal.slateGrey = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'slateGrey')
ST_PresetColorVal.snow = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'snow')
ST_PresetColorVal.springGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'springGreen')
ST_PresetColorVal.steelBlue = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'steelBlue')
ST_PresetColorVal.tan = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'tan')
ST_PresetColorVal.teal = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'teal')
ST_PresetColorVal.thistle = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'thistle')
ST_PresetColorVal.tomato = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'tomato')
ST_PresetColorVal.turquoise = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'turquoise')
ST_PresetColorVal.violet = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'violet')
ST_PresetColorVal.wheat = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'wheat')
ST_PresetColorVal.white = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'white')
ST_PresetColorVal.whiteSmoke = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'whiteSmoke')
ST_PresetColorVal.yellow = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'yellow')
ST_PresetColorVal.yellowGreen = ST_PresetColorVal._CF_enumeration.addEnumeration(unicode_value=u'yellowGreen')
ST_PresetColorVal._InitializeFacetMap(ST_PresetColorVal._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PresetColorVal', ST_PresetColorVal)

# Atomic SimpleTypeDefinition
class ST_TextTypeface (pyxb.binding.datatypes.string):

    """Text Typeface"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextTypeface')
    _Documentation = u'Text Typeface'
ST_TextTypeface._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextTypeface', ST_TextTypeface)

# Atomic SimpleTypeDefinition
class ST_OnOffStyleType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """On/Off Style Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_OnOffStyleType')
    _Documentation = u'On/Off Style Type'
ST_OnOffStyleType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_OnOffStyleType, enum_prefix=None)
ST_OnOffStyleType.on = ST_OnOffStyleType._CF_enumeration.addEnumeration(unicode_value=u'on')
ST_OnOffStyleType.off = ST_OnOffStyleType._CF_enumeration.addEnumeration(unicode_value=u'off')
ST_OnOffStyleType.def_ = ST_OnOffStyleType._CF_enumeration.addEnumeration(unicode_value=u'def')
ST_OnOffStyleType._InitializeFacetMap(ST_OnOffStyleType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_OnOffStyleType', ST_OnOffStyleType)

# Atomic SimpleTypeDefinition
class ST_PresetMaterialType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Material Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PresetMaterialType')
    _Documentation = u'Preset Material Type'
ST_PresetMaterialType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PresetMaterialType, enum_prefix=None)
ST_PresetMaterialType.legacyMatte = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'legacyMatte')
ST_PresetMaterialType.legacyPlastic = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'legacyPlastic')
ST_PresetMaterialType.legacyMetal = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'legacyMetal')
ST_PresetMaterialType.legacyWireframe = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'legacyWireframe')
ST_PresetMaterialType.matte = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'matte')
ST_PresetMaterialType.plastic = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'plastic')
ST_PresetMaterialType.metal = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'metal')
ST_PresetMaterialType.warmMatte = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'warmMatte')
ST_PresetMaterialType.translucentPowder = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'translucentPowder')
ST_PresetMaterialType.powder = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'powder')
ST_PresetMaterialType.dkEdge = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'dkEdge')
ST_PresetMaterialType.softEdge = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'softEdge')
ST_PresetMaterialType.clear = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'clear')
ST_PresetMaterialType.flat = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'flat')
ST_PresetMaterialType.softmetal = ST_PresetMaterialType._CF_enumeration.addEnumeration(unicode_value=u'softmetal')
ST_PresetMaterialType._InitializeFacetMap(ST_PresetMaterialType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PresetMaterialType', ST_PresetMaterialType)

# Atomic SimpleTypeDefinition
class ST_PenAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Alignment Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PenAlignment')
    _Documentation = u'Alignment Type'
ST_PenAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PenAlignment, enum_prefix=None)
ST_PenAlignment.ctr = ST_PenAlignment._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_PenAlignment.in_ = ST_PenAlignment._CF_enumeration.addEnumeration(unicode_value=u'in')
ST_PenAlignment._InitializeFacetMap(ST_PenAlignment._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PenAlignment', ST_PenAlignment)

# Atomic SimpleTypeDefinition
class ST_LineCap (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """End Line Cap"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_LineCap')
    _Documentation = u'End Line Cap'
ST_LineCap._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LineCap, enum_prefix=None)
ST_LineCap.rnd = ST_LineCap._CF_enumeration.addEnumeration(unicode_value=u'rnd')
ST_LineCap.sq = ST_LineCap._CF_enumeration.addEnumeration(unicode_value=u'sq')
ST_LineCap.flat = ST_LineCap._CF_enumeration.addEnumeration(unicode_value=u'flat')
ST_LineCap._InitializeFacetMap(ST_LineCap._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_LineCap', ST_LineCap)

# Atomic SimpleTypeDefinition
class ST_CompoundLine (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Compound Line Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_CompoundLine')
    _Documentation = u'Compound Line Type'
ST_CompoundLine._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CompoundLine, enum_prefix=None)
ST_CompoundLine.sng = ST_CompoundLine._CF_enumeration.addEnumeration(unicode_value=u'sng')
ST_CompoundLine.dbl = ST_CompoundLine._CF_enumeration.addEnumeration(unicode_value=u'dbl')
ST_CompoundLine.thickThin = ST_CompoundLine._CF_enumeration.addEnumeration(unicode_value=u'thickThin')
ST_CompoundLine.thinThick = ST_CompoundLine._CF_enumeration.addEnumeration(unicode_value=u'thinThick')
ST_CompoundLine.tri = ST_CompoundLine._CF_enumeration.addEnumeration(unicode_value=u'tri')
ST_CompoundLine._InitializeFacetMap(ST_CompoundLine._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_CompoundLine', ST_CompoundLine)

# Atomic SimpleTypeDefinition
class ST_LineWidth (ST_Coordinate32Unqualified):

    """Line Width"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_LineWidth')
    _Documentation = u'Line Width'
ST_LineWidth._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_LineWidth, value=pyxb.binding.datatypes.int(0))
ST_LineWidth._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_LineWidth, value=pyxb.binding.datatypes.int(20116800))
ST_LineWidth._InitializeFacetMap(ST_LineWidth._CF_minInclusive,
   ST_LineWidth._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_LineWidth', ST_LineWidth)

# Atomic SimpleTypeDefinition
class ST_HueDir (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Hue Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_HueDir')
    _Documentation = u'Hue Direction'
ST_HueDir._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_HueDir, enum_prefix=None)
ST_HueDir.cw = ST_HueDir._CF_enumeration.addEnumeration(unicode_value=u'cw')
ST_HueDir.ccw = ST_HueDir._CF_enumeration.addEnumeration(unicode_value=u'ccw')
ST_HueDir._InitializeFacetMap(ST_HueDir._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_HueDir', ST_HueDir)

# Atomic SimpleTypeDefinition
class ST_ClrAppMethod (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Color Application Method Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ClrAppMethod')
    _Documentation = u'Color Application Method Type'
ST_ClrAppMethod._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ClrAppMethod, enum_prefix=None)
ST_ClrAppMethod.span = ST_ClrAppMethod._CF_enumeration.addEnumeration(unicode_value=u'span')
ST_ClrAppMethod.cycle = ST_ClrAppMethod._CF_enumeration.addEnumeration(unicode_value=u'cycle')
ST_ClrAppMethod.repeat = ST_ClrAppMethod._CF_enumeration.addEnumeration(unicode_value=u'repeat')
ST_ClrAppMethod._InitializeFacetMap(ST_ClrAppMethod._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ClrAppMethod', ST_ClrAppMethod)

# Atomic SimpleTypeDefinition
class ST_AnimLvlStr (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Animation Level String Definition"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_AnimLvlStr')
    _Documentation = u'Animation Level String Definition'
ST_AnimLvlStr._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AnimLvlStr, enum_prefix=None)
ST_AnimLvlStr.none = ST_AnimLvlStr._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_AnimLvlStr.lvl = ST_AnimLvlStr._CF_enumeration.addEnumeration(unicode_value=u'lvl')
ST_AnimLvlStr.ctr = ST_AnimLvlStr._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_AnimLvlStr._InitializeFacetMap(ST_AnimLvlStr._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_AnimLvlStr', ST_AnimLvlStr)

# Atomic SimpleTypeDefinition
class ST_FixedAngle (ST_Angle):

    """Fixed Angle"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_FixedAngle')
    _Documentation = u'Fixed Angle'
ST_FixedAngle._CF_minExclusive = pyxb.binding.facets.CF_minExclusive(value_datatype=ST_Angle, value=pyxb.binding.datatypes.long(-5400000L))
ST_FixedAngle._CF_maxExclusive = pyxb.binding.facets.CF_maxExclusive(value_datatype=ST_Angle, value=pyxb.binding.datatypes.long(5400000L))
ST_FixedAngle._InitializeFacetMap(ST_FixedAngle._CF_minExclusive,
   ST_FixedAngle._CF_maxExclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_FixedAngle', ST_FixedAngle)

# Atomic SimpleTypeDefinition
class ST_RectAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Rectangle Alignments"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_RectAlignment')
    _Documentation = u'Rectangle Alignments'
ST_RectAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_RectAlignment, enum_prefix=None)
ST_RectAlignment.tl = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'tl')
ST_RectAlignment.t = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u't')
ST_RectAlignment.tr = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'tr')
ST_RectAlignment.l = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_RectAlignment.ctr = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_RectAlignment.r = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_RectAlignment.bl = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'bl')
ST_RectAlignment.b = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_RectAlignment.br = ST_RectAlignment._CF_enumeration.addEnumeration(unicode_value=u'br')
ST_RectAlignment._InitializeFacetMap(ST_RectAlignment._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_RectAlignment', ST_RectAlignment)

# Atomic SimpleTypeDefinition
class ST_ChildOrderType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Child Order"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ChildOrderType')
    _Documentation = u'Child Order'
ST_ChildOrderType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ChildOrderType, enum_prefix=None)
ST_ChildOrderType.b = ST_ChildOrderType._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_ChildOrderType.t = ST_ChildOrderType._CF_enumeration.addEnumeration(unicode_value=u't')
ST_ChildOrderType._InitializeFacetMap(ST_ChildOrderType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ChildOrderType', ST_ChildOrderType)

# Atomic SimpleTypeDefinition
class ST_TextSpacingPercent (ST_PercentageDecimal):

    """Text Spacing Percent"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextSpacingPercent')
    _Documentation = u'Text Spacing Percent'
ST_TextSpacingPercent._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextSpacingPercent, value=pyxb.binding.datatypes.int(0))
ST_TextSpacingPercent._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextSpacingPercent, value=pyxb.binding.datatypes.int(13200000))
ST_TextSpacingPercent._InitializeFacetMap(ST_TextSpacingPercent._CF_minInclusive,
   ST_TextSpacingPercent._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextSpacingPercent', ST_TextSpacingPercent)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_TextSpacingPercentOrPercentString (pyxb.binding.basis.STD_union):

    """Text Spacing Percent"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextSpacingPercentOrPercentString')
    _Documentation = u'Text Spacing Percent'

    _MemberTypes = ( ST_TextSpacingPercent, _s.ST_Percentage, )
ST_TextSpacingPercentOrPercentString._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_TextSpacingPercentOrPercentString._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextSpacingPercentOrPercentString)
ST_TextSpacingPercentOrPercentString._InitializeFacetMap(ST_TextSpacingPercentOrPercentString._CF_pattern,
   ST_TextSpacingPercentOrPercentString._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextSpacingPercentOrPercentString', ST_TextSpacingPercentOrPercentString)

# Atomic SimpleTypeDefinition
class ST_TileFlipMode (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Tile Flip Mode"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TileFlipMode')
    _Documentation = u'Tile Flip Mode'
ST_TileFlipMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TileFlipMode, enum_prefix=None)
ST_TileFlipMode.none = ST_TileFlipMode._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TileFlipMode.x = ST_TileFlipMode._CF_enumeration.addEnumeration(unicode_value=u'x')
ST_TileFlipMode.y = ST_TileFlipMode._CF_enumeration.addEnumeration(unicode_value=u'y')
ST_TileFlipMode.xy = ST_TileFlipMode._CF_enumeration.addEnumeration(unicode_value=u'xy')
ST_TileFlipMode._InitializeFacetMap(ST_TileFlipMode._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TileFlipMode', ST_TileFlipMode)

# Atomic SimpleTypeDefinition
class ST_EffectContainerType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Effect Container Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_EffectContainerType')
    _Documentation = u'Effect Container Type'
ST_EffectContainerType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_EffectContainerType, enum_prefix=None)
ST_EffectContainerType.sib = ST_EffectContainerType._CF_enumeration.addEnumeration(unicode_value=u'sib')
ST_EffectContainerType.tree = ST_EffectContainerType._CF_enumeration.addEnumeration(unicode_value=u'tree')
ST_EffectContainerType._InitializeFacetMap(ST_EffectContainerType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_EffectContainerType', ST_EffectContainerType)

# Atomic SimpleTypeDefinition
class ST_PathShadeType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Path Shade Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PathShadeType')
    _Documentation = u'Path Shade Type'
ST_PathShadeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PathShadeType, enum_prefix=None)
ST_PathShadeType.shape = ST_PathShadeType._CF_enumeration.addEnumeration(unicode_value=u'shape')
ST_PathShadeType.circle = ST_PathShadeType._CF_enumeration.addEnumeration(unicode_value=u'circle')
ST_PathShadeType.rect = ST_PathShadeType._CF_enumeration.addEnumeration(unicode_value=u'rect')
ST_PathShadeType._InitializeFacetMap(ST_PathShadeType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PathShadeType', ST_PathShadeType)

# Atomic SimpleTypeDefinition
class ST_AxisType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Axis Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_AxisType')
    _Documentation = u'Axis Type'
ST_AxisType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AxisType, enum_prefix=None)
ST_AxisType.self = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'self')
ST_AxisType.ch = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'ch')
ST_AxisType.des = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'des')
ST_AxisType.desOrSelf = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'desOrSelf')
ST_AxisType.par = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'par')
ST_AxisType.ancst = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'ancst')
ST_AxisType.ancstOrSelf = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'ancstOrSelf')
ST_AxisType.followSib = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'followSib')
ST_AxisType.precedSib = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'precedSib')
ST_AxisType.follow = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'follow')
ST_AxisType.preced = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'preced')
ST_AxisType.root = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'root')
ST_AxisType.none = ST_AxisType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_AxisType._InitializeFacetMap(ST_AxisType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_AxisType', ST_AxisType)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_AxisTypes (pyxb.binding.basis.STD_list):

    """Axis Type List"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_AxisTypes')
    _Documentation = u'Axis Type List'

    _ItemType = ST_AxisType
ST_AxisTypes._InitializeFacetMap()
_Namespace.addCategoryObject('typeBinding', u'ST_AxisTypes', ST_AxisTypes)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_Booleans (pyxb.binding.basis.STD_list):

    """Boolean List."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_Booleans')
    _Documentation = u'Boolean List.'

    _ItemType = pyxb.binding.datatypes.boolean
ST_Booleans._InitializeFacetMap()
_Namespace.addCategoryObject('typeBinding', u'ST_Booleans', ST_Booleans)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_Ints (pyxb.binding.basis.STD_list):

    """Integer List"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_Ints')
    _Documentation = u'Integer List'

    _ItemType = pyxb.binding.datatypes.int
ST_Ints._InitializeFacetMap()
_Namespace.addCategoryObject('typeBinding', u'ST_Ints', ST_Ints)

# Atomic SimpleTypeDefinition
class ST_ElementType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Data Point Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ElementType')
    _Documentation = u'Data Point Type'
ST_ElementType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ElementType, enum_prefix=None)
ST_ElementType.all = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'all')
ST_ElementType.doc = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'doc')
ST_ElementType.node = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'node')
ST_ElementType.norm = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'norm')
ST_ElementType.nonNorm = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'nonNorm')
ST_ElementType.asst = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'asst')
ST_ElementType.nonAsst = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'nonAsst')
ST_ElementType.parTrans = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'parTrans')
ST_ElementType.pres = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'pres')
ST_ElementType.sibTrans = ST_ElementType._CF_enumeration.addEnumeration(unicode_value=u'sibTrans')
ST_ElementType._InitializeFacetMap(ST_ElementType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ElementType', ST_ElementType)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_ElementTypes (pyxb.binding.basis.STD_list):

    """Diagream Layout Node Type List"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ElementTypes')
    _Documentation = u'Diagream Layout Node Type List'

    _ItemType = ST_ElementType
ST_ElementTypes._InitializeFacetMap()
_Namespace.addCategoryObject('typeBinding', u'ST_ElementTypes', ST_ElementTypes)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_UnsignedInts (pyxb.binding.basis.STD_list):

    """Unsigned Integer List"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_UnsignedInts')
    _Documentation = u'Unsigned Integer List'

    _ItemType = pyxb.binding.datatypes.unsignedInt
ST_UnsignedInts._InitializeFacetMap()
_Namespace.addCategoryObject('typeBinding', u'ST_UnsignedInts', ST_UnsignedInts)

# Atomic SimpleTypeDefinition
class ST_FontCollectionIndex (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Font Collection Index"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_FontCollectionIndex')
    _Documentation = u'Font Collection Index'
ST_FontCollectionIndex._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FontCollectionIndex, enum_prefix=None)
ST_FontCollectionIndex.major = ST_FontCollectionIndex._CF_enumeration.addEnumeration(unicode_value=u'major')
ST_FontCollectionIndex.minor = ST_FontCollectionIndex._CF_enumeration.addEnumeration(unicode_value=u'minor')
ST_FontCollectionIndex.none = ST_FontCollectionIndex._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_FontCollectionIndex._InitializeFacetMap(ST_FontCollectionIndex._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_FontCollectionIndex', ST_FontCollectionIndex)

# Atomic SimpleTypeDefinition
class ST_TextBulletStartAtNum (pyxb.binding.datatypes.int):

    """Start Bullet At Number"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextBulletStartAtNum')
    _Documentation = u'Start Bullet At Number'
ST_TextBulletStartAtNum._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextBulletStartAtNum, value=pyxb.binding.datatypes.int(1))
ST_TextBulletStartAtNum._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextBulletStartAtNum, value=pyxb.binding.datatypes.int(32767))
ST_TextBulletStartAtNum._InitializeFacetMap(ST_TextBulletStartAtNum._CF_minInclusive,
   ST_TextBulletStartAtNum._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextBulletStartAtNum', ST_TextBulletStartAtNum)

# Atomic SimpleTypeDefinition
class ST_TextAutonumberScheme (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Auto-number Schemes"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextAutonumberScheme')
    _Documentation = u'Text Auto-number Schemes'
ST_TextAutonumberScheme._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextAutonumberScheme, enum_prefix=None)
ST_TextAutonumberScheme.alphaLcParenBoth = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'alphaLcParenBoth')
ST_TextAutonumberScheme.alphaUcParenBoth = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'alphaUcParenBoth')
ST_TextAutonumberScheme.alphaLcParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'alphaLcParenR')
ST_TextAutonumberScheme.alphaUcParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'alphaUcParenR')
ST_TextAutonumberScheme.alphaLcPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'alphaLcPeriod')
ST_TextAutonumberScheme.alphaUcPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'alphaUcPeriod')
ST_TextAutonumberScheme.arabicParenBoth = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabicParenBoth')
ST_TextAutonumberScheme.arabicParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabicParenR')
ST_TextAutonumberScheme.arabicPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabicPeriod')
ST_TextAutonumberScheme.arabicPlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabicPlain')
ST_TextAutonumberScheme.romanLcParenBoth = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'romanLcParenBoth')
ST_TextAutonumberScheme.romanUcParenBoth = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'romanUcParenBoth')
ST_TextAutonumberScheme.romanLcParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'romanLcParenR')
ST_TextAutonumberScheme.romanUcParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'romanUcParenR')
ST_TextAutonumberScheme.romanLcPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'romanLcPeriod')
ST_TextAutonumberScheme.romanUcPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'romanUcPeriod')
ST_TextAutonumberScheme.circleNumDbPlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'circleNumDbPlain')
ST_TextAutonumberScheme.circleNumWdBlackPlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'circleNumWdBlackPlain')
ST_TextAutonumberScheme.circleNumWdWhitePlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'circleNumWdWhitePlain')
ST_TextAutonumberScheme.arabicDbPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabicDbPeriod')
ST_TextAutonumberScheme.arabicDbPlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabicDbPlain')
ST_TextAutonumberScheme.ea1ChsPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'ea1ChsPeriod')
ST_TextAutonumberScheme.ea1ChsPlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'ea1ChsPlain')
ST_TextAutonumberScheme.ea1ChtPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'ea1ChtPeriod')
ST_TextAutonumberScheme.ea1ChtPlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'ea1ChtPlain')
ST_TextAutonumberScheme.ea1JpnChsDbPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'ea1JpnChsDbPeriod')
ST_TextAutonumberScheme.ea1JpnKorPlain = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'ea1JpnKorPlain')
ST_TextAutonumberScheme.ea1JpnKorPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'ea1JpnKorPeriod')
ST_TextAutonumberScheme.arabic1Minus = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabic1Minus')
ST_TextAutonumberScheme.arabic2Minus = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'arabic2Minus')
ST_TextAutonumberScheme.hebrew2Minus = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'hebrew2Minus')
ST_TextAutonumberScheme.thaiAlphaPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'thaiAlphaPeriod')
ST_TextAutonumberScheme.thaiAlphaParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'thaiAlphaParenR')
ST_TextAutonumberScheme.thaiAlphaParenBoth = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'thaiAlphaParenBoth')
ST_TextAutonumberScheme.thaiNumPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'thaiNumPeriod')
ST_TextAutonumberScheme.thaiNumParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'thaiNumParenR')
ST_TextAutonumberScheme.thaiNumParenBoth = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'thaiNumParenBoth')
ST_TextAutonumberScheme.hindiAlphaPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'hindiAlphaPeriod')
ST_TextAutonumberScheme.hindiNumPeriod = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'hindiNumPeriod')
ST_TextAutonumberScheme.hindiNumParenR = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'hindiNumParenR')
ST_TextAutonumberScheme.hindiAlpha1Period = ST_TextAutonumberScheme._CF_enumeration.addEnumeration(unicode_value=u'hindiAlpha1Period')
ST_TextAutonumberScheme._InitializeFacetMap(ST_TextAutonumberScheme._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextAutonumberScheme', ST_TextAutonumberScheme)

# Atomic SimpleTypeDefinition
class ST_SchemeColorVal (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Scheme Color"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_SchemeColorVal')
    _Documentation = u'Scheme Color'
ST_SchemeColorVal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SchemeColorVal, enum_prefix=None)
ST_SchemeColorVal.bg1 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'bg1')
ST_SchemeColorVal.tx1 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'tx1')
ST_SchemeColorVal.bg2 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'bg2')
ST_SchemeColorVal.tx2 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'tx2')
ST_SchemeColorVal.accent1 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'accent1')
ST_SchemeColorVal.accent2 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'accent2')
ST_SchemeColorVal.accent3 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'accent3')
ST_SchemeColorVal.accent4 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'accent4')
ST_SchemeColorVal.accent5 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'accent5')
ST_SchemeColorVal.accent6 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'accent6')
ST_SchemeColorVal.hlink = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'hlink')
ST_SchemeColorVal.folHlink = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'folHlink')
ST_SchemeColorVal.phClr = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'phClr')
ST_SchemeColorVal.dk1 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'dk1')
ST_SchemeColorVal.lt1 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'lt1')
ST_SchemeColorVal.dk2 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'dk2')
ST_SchemeColorVal.lt2 = ST_SchemeColorVal._CF_enumeration.addEnumeration(unicode_value=u'lt2')
ST_SchemeColorVal._InitializeFacetMap(ST_SchemeColorVal._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_SchemeColorVal', ST_SchemeColorVal)

# Atomic SimpleTypeDefinition
class ST_ShapeType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Shape Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_ShapeType')
    _Documentation = u'Preset Shape Types'
ST_ShapeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ShapeType, enum_prefix=None)
ST_ShapeType.line = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'line')
ST_ShapeType.lineInv = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'lineInv')
ST_ShapeType.triangle = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'triangle')
ST_ShapeType.rtTriangle = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'rtTriangle')
ST_ShapeType.rect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'rect')
ST_ShapeType.diamond = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'diamond')
ST_ShapeType.parallelogram = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'parallelogram')
ST_ShapeType.trapezoid = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'trapezoid')
ST_ShapeType.nonIsoscelesTrapezoid = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'nonIsoscelesTrapezoid')
ST_ShapeType.pentagon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'pentagon')
ST_ShapeType.hexagon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'hexagon')
ST_ShapeType.heptagon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'heptagon')
ST_ShapeType.octagon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'octagon')
ST_ShapeType.decagon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'decagon')
ST_ShapeType.dodecagon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'dodecagon')
ST_ShapeType.star4 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star4')
ST_ShapeType.star5 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star5')
ST_ShapeType.star6 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star6')
ST_ShapeType.star7 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star7')
ST_ShapeType.star8 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star8')
ST_ShapeType.star10 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star10')
ST_ShapeType.star12 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star12')
ST_ShapeType.star16 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star16')
ST_ShapeType.star24 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star24')
ST_ShapeType.star32 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'star32')
ST_ShapeType.roundRect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'roundRect')
ST_ShapeType.round1Rect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'round1Rect')
ST_ShapeType.round2SameRect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'round2SameRect')
ST_ShapeType.round2DiagRect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'round2DiagRect')
ST_ShapeType.snipRoundRect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'snipRoundRect')
ST_ShapeType.snip1Rect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'snip1Rect')
ST_ShapeType.snip2SameRect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'snip2SameRect')
ST_ShapeType.snip2DiagRect = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'snip2DiagRect')
ST_ShapeType.plaque = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'plaque')
ST_ShapeType.ellipse = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'ellipse')
ST_ShapeType.teardrop = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'teardrop')
ST_ShapeType.homePlate = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'homePlate')
ST_ShapeType.chevron = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'chevron')
ST_ShapeType.pieWedge = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'pieWedge')
ST_ShapeType.pie = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'pie')
ST_ShapeType.blockArc = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'blockArc')
ST_ShapeType.donut = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'donut')
ST_ShapeType.noSmoking = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'noSmoking')
ST_ShapeType.rightArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'rightArrow')
ST_ShapeType.leftArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftArrow')
ST_ShapeType.upArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'upArrow')
ST_ShapeType.downArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'downArrow')
ST_ShapeType.stripedRightArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'stripedRightArrow')
ST_ShapeType.notchedRightArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'notchedRightArrow')
ST_ShapeType.bentUpArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bentUpArrow')
ST_ShapeType.leftRightArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftRightArrow')
ST_ShapeType.upDownArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'upDownArrow')
ST_ShapeType.leftUpArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftUpArrow')
ST_ShapeType.leftRightUpArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftRightUpArrow')
ST_ShapeType.quadArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'quadArrow')
ST_ShapeType.leftArrowCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftArrowCallout')
ST_ShapeType.rightArrowCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'rightArrowCallout')
ST_ShapeType.upArrowCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'upArrowCallout')
ST_ShapeType.downArrowCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'downArrowCallout')
ST_ShapeType.leftRightArrowCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftRightArrowCallout')
ST_ShapeType.upDownArrowCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'upDownArrowCallout')
ST_ShapeType.quadArrowCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'quadArrowCallout')
ST_ShapeType.bentArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bentArrow')
ST_ShapeType.uturnArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'uturnArrow')
ST_ShapeType.circularArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'circularArrow')
ST_ShapeType.leftCircularArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftCircularArrow')
ST_ShapeType.leftRightCircularArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftRightCircularArrow')
ST_ShapeType.curvedRightArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedRightArrow')
ST_ShapeType.curvedLeftArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedLeftArrow')
ST_ShapeType.curvedUpArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedUpArrow')
ST_ShapeType.curvedDownArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedDownArrow')
ST_ShapeType.swooshArrow = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'swooshArrow')
ST_ShapeType.cube = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'cube')
ST_ShapeType.can = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'can')
ST_ShapeType.lightningBolt = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'lightningBolt')
ST_ShapeType.heart = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'heart')
ST_ShapeType.sun = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'sun')
ST_ShapeType.moon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'moon')
ST_ShapeType.smileyFace = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'smileyFace')
ST_ShapeType.irregularSeal1 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'irregularSeal1')
ST_ShapeType.irregularSeal2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'irregularSeal2')
ST_ShapeType.foldedCorner = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'foldedCorner')
ST_ShapeType.bevel = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bevel')
ST_ShapeType.frame = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'frame')
ST_ShapeType.halfFrame = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'halfFrame')
ST_ShapeType.corner = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'corner')
ST_ShapeType.diagStripe = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'diagStripe')
ST_ShapeType.chord = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'chord')
ST_ShapeType.arc = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'arc')
ST_ShapeType.leftBracket = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftBracket')
ST_ShapeType.rightBracket = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'rightBracket')
ST_ShapeType.leftBrace = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftBrace')
ST_ShapeType.rightBrace = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'rightBrace')
ST_ShapeType.bracketPair = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bracketPair')
ST_ShapeType.bracePair = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bracePair')
ST_ShapeType.straightConnector1 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'straightConnector1')
ST_ShapeType.bentConnector2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bentConnector2')
ST_ShapeType.bentConnector3 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bentConnector3')
ST_ShapeType.bentConnector4 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bentConnector4')
ST_ShapeType.bentConnector5 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'bentConnector5')
ST_ShapeType.curvedConnector2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedConnector2')
ST_ShapeType.curvedConnector3 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedConnector3')
ST_ShapeType.curvedConnector4 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedConnector4')
ST_ShapeType.curvedConnector5 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'curvedConnector5')
ST_ShapeType.callout1 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'callout1')
ST_ShapeType.callout2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'callout2')
ST_ShapeType.callout3 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'callout3')
ST_ShapeType.accentCallout1 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'accentCallout1')
ST_ShapeType.accentCallout2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'accentCallout2')
ST_ShapeType.accentCallout3 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'accentCallout3')
ST_ShapeType.borderCallout1 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'borderCallout1')
ST_ShapeType.borderCallout2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'borderCallout2')
ST_ShapeType.borderCallout3 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'borderCallout3')
ST_ShapeType.accentBorderCallout1 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'accentBorderCallout1')
ST_ShapeType.accentBorderCallout2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'accentBorderCallout2')
ST_ShapeType.accentBorderCallout3 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'accentBorderCallout3')
ST_ShapeType.wedgeRectCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'wedgeRectCallout')
ST_ShapeType.wedgeRoundRectCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'wedgeRoundRectCallout')
ST_ShapeType.wedgeEllipseCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'wedgeEllipseCallout')
ST_ShapeType.cloudCallout = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'cloudCallout')
ST_ShapeType.cloud = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'cloud')
ST_ShapeType.ribbon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'ribbon')
ST_ShapeType.ribbon2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'ribbon2')
ST_ShapeType.ellipseRibbon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'ellipseRibbon')
ST_ShapeType.ellipseRibbon2 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'ellipseRibbon2')
ST_ShapeType.leftRightRibbon = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'leftRightRibbon')
ST_ShapeType.verticalScroll = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'verticalScroll')
ST_ShapeType.horizontalScroll = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'horizontalScroll')
ST_ShapeType.wave = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'wave')
ST_ShapeType.doubleWave = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'doubleWave')
ST_ShapeType.plus = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'plus')
ST_ShapeType.flowChartProcess = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartProcess')
ST_ShapeType.flowChartDecision = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartDecision')
ST_ShapeType.flowChartInputOutput = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartInputOutput')
ST_ShapeType.flowChartPredefinedProcess = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartPredefinedProcess')
ST_ShapeType.flowChartInternalStorage = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartInternalStorage')
ST_ShapeType.flowChartDocument = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartDocument')
ST_ShapeType.flowChartMultidocument = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartMultidocument')
ST_ShapeType.flowChartTerminator = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartTerminator')
ST_ShapeType.flowChartPreparation = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartPreparation')
ST_ShapeType.flowChartManualInput = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartManualInput')
ST_ShapeType.flowChartManualOperation = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartManualOperation')
ST_ShapeType.flowChartConnector = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartConnector')
ST_ShapeType.flowChartPunchedCard = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartPunchedCard')
ST_ShapeType.flowChartPunchedTape = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartPunchedTape')
ST_ShapeType.flowChartSummingJunction = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartSummingJunction')
ST_ShapeType.flowChartOr = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartOr')
ST_ShapeType.flowChartCollate = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartCollate')
ST_ShapeType.flowChartSort = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartSort')
ST_ShapeType.flowChartExtract = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartExtract')
ST_ShapeType.flowChartMerge = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartMerge')
ST_ShapeType.flowChartOfflineStorage = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartOfflineStorage')
ST_ShapeType.flowChartOnlineStorage = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartOnlineStorage')
ST_ShapeType.flowChartMagneticTape = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartMagneticTape')
ST_ShapeType.flowChartMagneticDisk = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartMagneticDisk')
ST_ShapeType.flowChartMagneticDrum = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartMagneticDrum')
ST_ShapeType.flowChartDisplay = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartDisplay')
ST_ShapeType.flowChartDelay = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartDelay')
ST_ShapeType.flowChartAlternateProcess = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartAlternateProcess')
ST_ShapeType.flowChartOffpageConnector = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'flowChartOffpageConnector')
ST_ShapeType.actionButtonBlank = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonBlank')
ST_ShapeType.actionButtonHome = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonHome')
ST_ShapeType.actionButtonHelp = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonHelp')
ST_ShapeType.actionButtonInformation = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonInformation')
ST_ShapeType.actionButtonForwardNext = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonForwardNext')
ST_ShapeType.actionButtonBackPrevious = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonBackPrevious')
ST_ShapeType.actionButtonEnd = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonEnd')
ST_ShapeType.actionButtonBeginning = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonBeginning')
ST_ShapeType.actionButtonReturn = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonReturn')
ST_ShapeType.actionButtonDocument = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonDocument')
ST_ShapeType.actionButtonSound = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonSound')
ST_ShapeType.actionButtonMovie = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'actionButtonMovie')
ST_ShapeType.gear6 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'gear6')
ST_ShapeType.gear9 = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'gear9')
ST_ShapeType.funnel = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'funnel')
ST_ShapeType.mathPlus = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'mathPlus')
ST_ShapeType.mathMinus = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'mathMinus')
ST_ShapeType.mathMultiply = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'mathMultiply')
ST_ShapeType.mathDivide = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'mathDivide')
ST_ShapeType.mathEqual = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'mathEqual')
ST_ShapeType.mathNotEqual = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'mathNotEqual')
ST_ShapeType.cornerTabs = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'cornerTabs')
ST_ShapeType.squareTabs = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'squareTabs')
ST_ShapeType.plaqueTabs = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'plaqueTabs')
ST_ShapeType.chartX = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'chartX')
ST_ShapeType.chartStar = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'chartStar')
ST_ShapeType.chartPlus = ST_ShapeType._CF_enumeration.addEnumeration(unicode_value=u'chartPlus')
ST_ShapeType._InitializeFacetMap(ST_ShapeType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_ShapeType', ST_ShapeType)

# Atomic SimpleTypeDefinition
class ST_OutputShapeType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Output Shape Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_OutputShapeType')
    _Documentation = u'Output Shape Type'
ST_OutputShapeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_OutputShapeType, enum_prefix=None)
ST_OutputShapeType.none = ST_OutputShapeType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_OutputShapeType.conn = ST_OutputShapeType._CF_enumeration.addEnumeration(unicode_value=u'conn')
ST_OutputShapeType._InitializeFacetMap(ST_OutputShapeType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_OutputShapeType', ST_OutputShapeType)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_LayoutShapeType (pyxb.binding.basis.STD_union):

    """Layout Shape Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_LayoutShapeType')
    _Documentation = u'Layout Shape Type'

    _MemberTypes = ( ST_ShapeType, ST_OutputShapeType, )
ST_LayoutShapeType._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_LayoutShapeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LayoutShapeType)
ST_LayoutShapeType.line = u'line'                 # originally ST_ShapeType.line
ST_LayoutShapeType.lineInv = u'lineInv'           # originally ST_ShapeType.lineInv
ST_LayoutShapeType.triangle = u'triangle'         # originally ST_ShapeType.triangle
ST_LayoutShapeType.rtTriangle = u'rtTriangle'     # originally ST_ShapeType.rtTriangle
ST_LayoutShapeType.rect = u'rect'                 # originally ST_ShapeType.rect
ST_LayoutShapeType.diamond = u'diamond'           # originally ST_ShapeType.diamond
ST_LayoutShapeType.parallelogram = u'parallelogram'# originally ST_ShapeType.parallelogram
ST_LayoutShapeType.trapezoid = u'trapezoid'       # originally ST_ShapeType.trapezoid
ST_LayoutShapeType.nonIsoscelesTrapezoid = u'nonIsoscelesTrapezoid'# originally ST_ShapeType.nonIsoscelesTrapezoid
ST_LayoutShapeType.pentagon = u'pentagon'         # originally ST_ShapeType.pentagon
ST_LayoutShapeType.hexagon = u'hexagon'           # originally ST_ShapeType.hexagon
ST_LayoutShapeType.heptagon = u'heptagon'         # originally ST_ShapeType.heptagon
ST_LayoutShapeType.octagon = u'octagon'           # originally ST_ShapeType.octagon
ST_LayoutShapeType.decagon = u'decagon'           # originally ST_ShapeType.decagon
ST_LayoutShapeType.dodecagon = u'dodecagon'       # originally ST_ShapeType.dodecagon
ST_LayoutShapeType.star4 = u'star4'               # originally ST_ShapeType.star4
ST_LayoutShapeType.star5 = u'star5'               # originally ST_ShapeType.star5
ST_LayoutShapeType.star6 = u'star6'               # originally ST_ShapeType.star6
ST_LayoutShapeType.star7 = u'star7'               # originally ST_ShapeType.star7
ST_LayoutShapeType.star8 = u'star8'               # originally ST_ShapeType.star8
ST_LayoutShapeType.star10 = u'star10'             # originally ST_ShapeType.star10
ST_LayoutShapeType.star12 = u'star12'             # originally ST_ShapeType.star12
ST_LayoutShapeType.star16 = u'star16'             # originally ST_ShapeType.star16
ST_LayoutShapeType.star24 = u'star24'             # originally ST_ShapeType.star24
ST_LayoutShapeType.star32 = u'star32'             # originally ST_ShapeType.star32
ST_LayoutShapeType.roundRect = u'roundRect'       # originally ST_ShapeType.roundRect
ST_LayoutShapeType.round1Rect = u'round1Rect'     # originally ST_ShapeType.round1Rect
ST_LayoutShapeType.round2SameRect = u'round2SameRect'# originally ST_ShapeType.round2SameRect
ST_LayoutShapeType.round2DiagRect = u'round2DiagRect'# originally ST_ShapeType.round2DiagRect
ST_LayoutShapeType.snipRoundRect = u'snipRoundRect'# originally ST_ShapeType.snipRoundRect
ST_LayoutShapeType.snip1Rect = u'snip1Rect'       # originally ST_ShapeType.snip1Rect
ST_LayoutShapeType.snip2SameRect = u'snip2SameRect'# originally ST_ShapeType.snip2SameRect
ST_LayoutShapeType.snip2DiagRect = u'snip2DiagRect'# originally ST_ShapeType.snip2DiagRect
ST_LayoutShapeType.plaque = u'plaque'             # originally ST_ShapeType.plaque
ST_LayoutShapeType.ellipse = u'ellipse'           # originally ST_ShapeType.ellipse
ST_LayoutShapeType.teardrop = u'teardrop'         # originally ST_ShapeType.teardrop
ST_LayoutShapeType.homePlate = u'homePlate'       # originally ST_ShapeType.homePlate
ST_LayoutShapeType.chevron = u'chevron'           # originally ST_ShapeType.chevron
ST_LayoutShapeType.pieWedge = u'pieWedge'         # originally ST_ShapeType.pieWedge
ST_LayoutShapeType.pie = u'pie'                   # originally ST_ShapeType.pie
ST_LayoutShapeType.blockArc = u'blockArc'         # originally ST_ShapeType.blockArc
ST_LayoutShapeType.donut = u'donut'               # originally ST_ShapeType.donut
ST_LayoutShapeType.noSmoking = u'noSmoking'       # originally ST_ShapeType.noSmoking
ST_LayoutShapeType.rightArrow = u'rightArrow'     # originally ST_ShapeType.rightArrow
ST_LayoutShapeType.leftArrow = u'leftArrow'       # originally ST_ShapeType.leftArrow
ST_LayoutShapeType.upArrow = u'upArrow'           # originally ST_ShapeType.upArrow
ST_LayoutShapeType.downArrow = u'downArrow'       # originally ST_ShapeType.downArrow
ST_LayoutShapeType.stripedRightArrow = u'stripedRightArrow'# originally ST_ShapeType.stripedRightArrow
ST_LayoutShapeType.notchedRightArrow = u'notchedRightArrow'# originally ST_ShapeType.notchedRightArrow
ST_LayoutShapeType.bentUpArrow = u'bentUpArrow'   # originally ST_ShapeType.bentUpArrow
ST_LayoutShapeType.leftRightArrow = u'leftRightArrow'# originally ST_ShapeType.leftRightArrow
ST_LayoutShapeType.upDownArrow = u'upDownArrow'   # originally ST_ShapeType.upDownArrow
ST_LayoutShapeType.leftUpArrow = u'leftUpArrow'   # originally ST_ShapeType.leftUpArrow
ST_LayoutShapeType.leftRightUpArrow = u'leftRightUpArrow'# originally ST_ShapeType.leftRightUpArrow
ST_LayoutShapeType.quadArrow = u'quadArrow'       # originally ST_ShapeType.quadArrow
ST_LayoutShapeType.leftArrowCallout = u'leftArrowCallout'# originally ST_ShapeType.leftArrowCallout
ST_LayoutShapeType.rightArrowCallout = u'rightArrowCallout'# originally ST_ShapeType.rightArrowCallout
ST_LayoutShapeType.upArrowCallout = u'upArrowCallout'# originally ST_ShapeType.upArrowCallout
ST_LayoutShapeType.downArrowCallout = u'downArrowCallout'# originally ST_ShapeType.downArrowCallout
ST_LayoutShapeType.leftRightArrowCallout = u'leftRightArrowCallout'# originally ST_ShapeType.leftRightArrowCallout
ST_LayoutShapeType.upDownArrowCallout = u'upDownArrowCallout'# originally ST_ShapeType.upDownArrowCallout
ST_LayoutShapeType.quadArrowCallout = u'quadArrowCallout'# originally ST_ShapeType.quadArrowCallout
ST_LayoutShapeType.bentArrow = u'bentArrow'       # originally ST_ShapeType.bentArrow
ST_LayoutShapeType.uturnArrow = u'uturnArrow'     # originally ST_ShapeType.uturnArrow
ST_LayoutShapeType.circularArrow = u'circularArrow'# originally ST_ShapeType.circularArrow
ST_LayoutShapeType.leftCircularArrow = u'leftCircularArrow'# originally ST_ShapeType.leftCircularArrow
ST_LayoutShapeType.leftRightCircularArrow = u'leftRightCircularArrow'# originally ST_ShapeType.leftRightCircularArrow
ST_LayoutShapeType.curvedRightArrow = u'curvedRightArrow'# originally ST_ShapeType.curvedRightArrow
ST_LayoutShapeType.curvedLeftArrow = u'curvedLeftArrow'# originally ST_ShapeType.curvedLeftArrow
ST_LayoutShapeType.curvedUpArrow = u'curvedUpArrow'# originally ST_ShapeType.curvedUpArrow
ST_LayoutShapeType.curvedDownArrow = u'curvedDownArrow'# originally ST_ShapeType.curvedDownArrow
ST_LayoutShapeType.swooshArrow = u'swooshArrow'   # originally ST_ShapeType.swooshArrow
ST_LayoutShapeType.cube = u'cube'                 # originally ST_ShapeType.cube
ST_LayoutShapeType.can = u'can'                   # originally ST_ShapeType.can
ST_LayoutShapeType.lightningBolt = u'lightningBolt'# originally ST_ShapeType.lightningBolt
ST_LayoutShapeType.heart = u'heart'               # originally ST_ShapeType.heart
ST_LayoutShapeType.sun = u'sun'                   # originally ST_ShapeType.sun
ST_LayoutShapeType.moon = u'moon'                 # originally ST_ShapeType.moon
ST_LayoutShapeType.smileyFace = u'smileyFace'     # originally ST_ShapeType.smileyFace
ST_LayoutShapeType.irregularSeal1 = u'irregularSeal1'# originally ST_ShapeType.irregularSeal1
ST_LayoutShapeType.irregularSeal2 = u'irregularSeal2'# originally ST_ShapeType.irregularSeal2
ST_LayoutShapeType.foldedCorner = u'foldedCorner' # originally ST_ShapeType.foldedCorner
ST_LayoutShapeType.bevel = u'bevel'               # originally ST_ShapeType.bevel
ST_LayoutShapeType.frame = u'frame'               # originally ST_ShapeType.frame
ST_LayoutShapeType.halfFrame = u'halfFrame'       # originally ST_ShapeType.halfFrame
ST_LayoutShapeType.corner = u'corner'             # originally ST_ShapeType.corner
ST_LayoutShapeType.diagStripe = u'diagStripe'     # originally ST_ShapeType.diagStripe
ST_LayoutShapeType.chord = u'chord'               # originally ST_ShapeType.chord
ST_LayoutShapeType.arc = u'arc'                   # originally ST_ShapeType.arc
ST_LayoutShapeType.leftBracket = u'leftBracket'   # originally ST_ShapeType.leftBracket
ST_LayoutShapeType.rightBracket = u'rightBracket' # originally ST_ShapeType.rightBracket
ST_LayoutShapeType.leftBrace = u'leftBrace'       # originally ST_ShapeType.leftBrace
ST_LayoutShapeType.rightBrace = u'rightBrace'     # originally ST_ShapeType.rightBrace
ST_LayoutShapeType.bracketPair = u'bracketPair'   # originally ST_ShapeType.bracketPair
ST_LayoutShapeType.bracePair = u'bracePair'       # originally ST_ShapeType.bracePair
ST_LayoutShapeType.straightConnector1 = u'straightConnector1'# originally ST_ShapeType.straightConnector1
ST_LayoutShapeType.bentConnector2 = u'bentConnector2'# originally ST_ShapeType.bentConnector2
ST_LayoutShapeType.bentConnector3 = u'bentConnector3'# originally ST_ShapeType.bentConnector3
ST_LayoutShapeType.bentConnector4 = u'bentConnector4'# originally ST_ShapeType.bentConnector4
ST_LayoutShapeType.bentConnector5 = u'bentConnector5'# originally ST_ShapeType.bentConnector5
ST_LayoutShapeType.curvedConnector2 = u'curvedConnector2'# originally ST_ShapeType.curvedConnector2
ST_LayoutShapeType.curvedConnector3 = u'curvedConnector3'# originally ST_ShapeType.curvedConnector3
ST_LayoutShapeType.curvedConnector4 = u'curvedConnector4'# originally ST_ShapeType.curvedConnector4
ST_LayoutShapeType.curvedConnector5 = u'curvedConnector5'# originally ST_ShapeType.curvedConnector5
ST_LayoutShapeType.callout1 = u'callout1'         # originally ST_ShapeType.callout1
ST_LayoutShapeType.callout2 = u'callout2'         # originally ST_ShapeType.callout2
ST_LayoutShapeType.callout3 = u'callout3'         # originally ST_ShapeType.callout3
ST_LayoutShapeType.accentCallout1 = u'accentCallout1'# originally ST_ShapeType.accentCallout1
ST_LayoutShapeType.accentCallout2 = u'accentCallout2'# originally ST_ShapeType.accentCallout2
ST_LayoutShapeType.accentCallout3 = u'accentCallout3'# originally ST_ShapeType.accentCallout3
ST_LayoutShapeType.borderCallout1 = u'borderCallout1'# originally ST_ShapeType.borderCallout1
ST_LayoutShapeType.borderCallout2 = u'borderCallout2'# originally ST_ShapeType.borderCallout2
ST_LayoutShapeType.borderCallout3 = u'borderCallout3'# originally ST_ShapeType.borderCallout3
ST_LayoutShapeType.accentBorderCallout1 = u'accentBorderCallout1'# originally ST_ShapeType.accentBorderCallout1
ST_LayoutShapeType.accentBorderCallout2 = u'accentBorderCallout2'# originally ST_ShapeType.accentBorderCallout2
ST_LayoutShapeType.accentBorderCallout3 = u'accentBorderCallout3'# originally ST_ShapeType.accentBorderCallout3
ST_LayoutShapeType.wedgeRectCallout = u'wedgeRectCallout'# originally ST_ShapeType.wedgeRectCallout
ST_LayoutShapeType.wedgeRoundRectCallout = u'wedgeRoundRectCallout'# originally ST_ShapeType.wedgeRoundRectCallout
ST_LayoutShapeType.wedgeEllipseCallout = u'wedgeEllipseCallout'# originally ST_ShapeType.wedgeEllipseCallout
ST_LayoutShapeType.cloudCallout = u'cloudCallout' # originally ST_ShapeType.cloudCallout
ST_LayoutShapeType.cloud = u'cloud'               # originally ST_ShapeType.cloud
ST_LayoutShapeType.ribbon = u'ribbon'             # originally ST_ShapeType.ribbon
ST_LayoutShapeType.ribbon2 = u'ribbon2'           # originally ST_ShapeType.ribbon2
ST_LayoutShapeType.ellipseRibbon = u'ellipseRibbon'# originally ST_ShapeType.ellipseRibbon
ST_LayoutShapeType.ellipseRibbon2 = u'ellipseRibbon2'# originally ST_ShapeType.ellipseRibbon2
ST_LayoutShapeType.leftRightRibbon = u'leftRightRibbon'# originally ST_ShapeType.leftRightRibbon
ST_LayoutShapeType.verticalScroll = u'verticalScroll'# originally ST_ShapeType.verticalScroll
ST_LayoutShapeType.horizontalScroll = u'horizontalScroll'# originally ST_ShapeType.horizontalScroll
ST_LayoutShapeType.wave = u'wave'                 # originally ST_ShapeType.wave
ST_LayoutShapeType.doubleWave = u'doubleWave'     # originally ST_ShapeType.doubleWave
ST_LayoutShapeType.plus = u'plus'                 # originally ST_ShapeType.plus
ST_LayoutShapeType.flowChartProcess = u'flowChartProcess'# originally ST_ShapeType.flowChartProcess
ST_LayoutShapeType.flowChartDecision = u'flowChartDecision'# originally ST_ShapeType.flowChartDecision
ST_LayoutShapeType.flowChartInputOutput = u'flowChartInputOutput'# originally ST_ShapeType.flowChartInputOutput
ST_LayoutShapeType.flowChartPredefinedProcess = u'flowChartPredefinedProcess'# originally ST_ShapeType.flowChartPredefinedProcess
ST_LayoutShapeType.flowChartInternalStorage = u'flowChartInternalStorage'# originally ST_ShapeType.flowChartInternalStorage
ST_LayoutShapeType.flowChartDocument = u'flowChartDocument'# originally ST_ShapeType.flowChartDocument
ST_LayoutShapeType.flowChartMultidocument = u'flowChartMultidocument'# originally ST_ShapeType.flowChartMultidocument
ST_LayoutShapeType.flowChartTerminator = u'flowChartTerminator'# originally ST_ShapeType.flowChartTerminator
ST_LayoutShapeType.flowChartPreparation = u'flowChartPreparation'# originally ST_ShapeType.flowChartPreparation
ST_LayoutShapeType.flowChartManualInput = u'flowChartManualInput'# originally ST_ShapeType.flowChartManualInput
ST_LayoutShapeType.flowChartManualOperation = u'flowChartManualOperation'# originally ST_ShapeType.flowChartManualOperation
ST_LayoutShapeType.flowChartConnector = u'flowChartConnector'# originally ST_ShapeType.flowChartConnector
ST_LayoutShapeType.flowChartPunchedCard = u'flowChartPunchedCard'# originally ST_ShapeType.flowChartPunchedCard
ST_LayoutShapeType.flowChartPunchedTape = u'flowChartPunchedTape'# originally ST_ShapeType.flowChartPunchedTape
ST_LayoutShapeType.flowChartSummingJunction = u'flowChartSummingJunction'# originally ST_ShapeType.flowChartSummingJunction
ST_LayoutShapeType.flowChartOr = u'flowChartOr'   # originally ST_ShapeType.flowChartOr
ST_LayoutShapeType.flowChartCollate = u'flowChartCollate'# originally ST_ShapeType.flowChartCollate
ST_LayoutShapeType.flowChartSort = u'flowChartSort'# originally ST_ShapeType.flowChartSort
ST_LayoutShapeType.flowChartExtract = u'flowChartExtract'# originally ST_ShapeType.flowChartExtract
ST_LayoutShapeType.flowChartMerge = u'flowChartMerge'# originally ST_ShapeType.flowChartMerge
ST_LayoutShapeType.flowChartOfflineStorage = u'flowChartOfflineStorage'# originally ST_ShapeType.flowChartOfflineStorage
ST_LayoutShapeType.flowChartOnlineStorage = u'flowChartOnlineStorage'# originally ST_ShapeType.flowChartOnlineStorage
ST_LayoutShapeType.flowChartMagneticTape = u'flowChartMagneticTape'# originally ST_ShapeType.flowChartMagneticTape
ST_LayoutShapeType.flowChartMagneticDisk = u'flowChartMagneticDisk'# originally ST_ShapeType.flowChartMagneticDisk
ST_LayoutShapeType.flowChartMagneticDrum = u'flowChartMagneticDrum'# originally ST_ShapeType.flowChartMagneticDrum
ST_LayoutShapeType.flowChartDisplay = u'flowChartDisplay'# originally ST_ShapeType.flowChartDisplay
ST_LayoutShapeType.flowChartDelay = u'flowChartDelay'# originally ST_ShapeType.flowChartDelay
ST_LayoutShapeType.flowChartAlternateProcess = u'flowChartAlternateProcess'# originally ST_ShapeType.flowChartAlternateProcess
ST_LayoutShapeType.flowChartOffpageConnector = u'flowChartOffpageConnector'# originally ST_ShapeType.flowChartOffpageConnector
ST_LayoutShapeType.actionButtonBlank = u'actionButtonBlank'# originally ST_ShapeType.actionButtonBlank
ST_LayoutShapeType.actionButtonHome = u'actionButtonHome'# originally ST_ShapeType.actionButtonHome
ST_LayoutShapeType.actionButtonHelp = u'actionButtonHelp'# originally ST_ShapeType.actionButtonHelp
ST_LayoutShapeType.actionButtonInformation = u'actionButtonInformation'# originally ST_ShapeType.actionButtonInformation
ST_LayoutShapeType.actionButtonForwardNext = u'actionButtonForwardNext'# originally ST_ShapeType.actionButtonForwardNext
ST_LayoutShapeType.actionButtonBackPrevious = u'actionButtonBackPrevious'# originally ST_ShapeType.actionButtonBackPrevious
ST_LayoutShapeType.actionButtonEnd = u'actionButtonEnd'# originally ST_ShapeType.actionButtonEnd
ST_LayoutShapeType.actionButtonBeginning = u'actionButtonBeginning'# originally ST_ShapeType.actionButtonBeginning
ST_LayoutShapeType.actionButtonReturn = u'actionButtonReturn'# originally ST_ShapeType.actionButtonReturn
ST_LayoutShapeType.actionButtonDocument = u'actionButtonDocument'# originally ST_ShapeType.actionButtonDocument
ST_LayoutShapeType.actionButtonSound = u'actionButtonSound'# originally ST_ShapeType.actionButtonSound
ST_LayoutShapeType.actionButtonMovie = u'actionButtonMovie'# originally ST_ShapeType.actionButtonMovie
ST_LayoutShapeType.gear6 = u'gear6'               # originally ST_ShapeType.gear6
ST_LayoutShapeType.gear9 = u'gear9'               # originally ST_ShapeType.gear9
ST_LayoutShapeType.funnel = u'funnel'             # originally ST_ShapeType.funnel
ST_LayoutShapeType.mathPlus = u'mathPlus'         # originally ST_ShapeType.mathPlus
ST_LayoutShapeType.mathMinus = u'mathMinus'       # originally ST_ShapeType.mathMinus
ST_LayoutShapeType.mathMultiply = u'mathMultiply' # originally ST_ShapeType.mathMultiply
ST_LayoutShapeType.mathDivide = u'mathDivide'     # originally ST_ShapeType.mathDivide
ST_LayoutShapeType.mathEqual = u'mathEqual'       # originally ST_ShapeType.mathEqual
ST_LayoutShapeType.mathNotEqual = u'mathNotEqual' # originally ST_ShapeType.mathNotEqual
ST_LayoutShapeType.cornerTabs = u'cornerTabs'     # originally ST_ShapeType.cornerTabs
ST_LayoutShapeType.squareTabs = u'squareTabs'     # originally ST_ShapeType.squareTabs
ST_LayoutShapeType.plaqueTabs = u'plaqueTabs'     # originally ST_ShapeType.plaqueTabs
ST_LayoutShapeType.chartX = u'chartX'             # originally ST_ShapeType.chartX
ST_LayoutShapeType.chartStar = u'chartStar'       # originally ST_ShapeType.chartStar
ST_LayoutShapeType.chartPlus = u'chartPlus'       # originally ST_ShapeType.chartPlus
ST_LayoutShapeType.none = u'none'                 # originally ST_OutputShapeType.none
ST_LayoutShapeType.conn = u'conn'                 # originally ST_OutputShapeType.conn
ST_LayoutShapeType._InitializeFacetMap(ST_LayoutShapeType._CF_pattern,
   ST_LayoutShapeType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_LayoutShapeType', ST_LayoutShapeType)

# Atomic SimpleTypeDefinition
class ST_TextFontScalePercent (ST_PercentageDecimal):

    """Text Font Scale Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextFontScalePercent')
    _Documentation = u'Text Font Scale Percentage'
ST_TextFontScalePercent._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextFontScalePercent, value=pyxb.binding.datatypes.int(1000))
ST_TextFontScalePercent._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextFontScalePercent, value=pyxb.binding.datatypes.int(100000))
ST_TextFontScalePercent._InitializeFacetMap(ST_TextFontScalePercent._CF_minInclusive,
   ST_TextFontScalePercent._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextFontScalePercent', ST_TextFontScalePercent)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_TextFontScalePercentOrPercentString (pyxb.binding.basis.STD_union):

    """Text Font Scale Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextFontScalePercentOrPercentString')
    _Documentation = u'Text Font Scale Percentage'

    _MemberTypes = ( ST_TextFontScalePercent, _s.ST_Percentage, )
ST_TextFontScalePercentOrPercentString._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_TextFontScalePercentOrPercentString._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextFontScalePercentOrPercentString)
ST_TextFontScalePercentOrPercentString._InitializeFacetMap(ST_TextFontScalePercentOrPercentString._CF_pattern,
   ST_TextFontScalePercentOrPercentString._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextFontScalePercentOrPercentString', ST_TextFontScalePercentOrPercentString)

# Atomic SimpleTypeDefinition
class ST_NodeCount (pyxb.binding.datatypes.int):

    """Number of Nodes Definition"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_NodeCount')
    _Documentation = u'Number of Nodes Definition'
ST_NodeCount._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_NodeCount, value=pyxb.binding.datatypes.int(-1))
ST_NodeCount._InitializeFacetMap(ST_NodeCount._CF_minInclusive)
_Namespace.addCategoryObject('typeBinding', u'ST_NodeCount', ST_NodeCount)

# Atomic SimpleTypeDefinition
class ST_ConstraintType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Constraint Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ConstraintType')
    _Documentation = u'Constraint Type'
ST_ConstraintType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ConstraintType, enum_prefix=None)
ST_ConstraintType.none = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_ConstraintType.alignOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'alignOff')
ST_ConstraintType.begMarg = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'begMarg')
ST_ConstraintType.bendDist = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'bendDist')
ST_ConstraintType.begPad = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'begPad')
ST_ConstraintType.b = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_ConstraintType.bMarg = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'bMarg')
ST_ConstraintType.bOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'bOff')
ST_ConstraintType.ctrX = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'ctrX')
ST_ConstraintType.ctrXOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'ctrXOff')
ST_ConstraintType.ctrY = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'ctrY')
ST_ConstraintType.ctrYOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'ctrYOff')
ST_ConstraintType.connDist = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'connDist')
ST_ConstraintType.diam = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'diam')
ST_ConstraintType.endMarg = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'endMarg')
ST_ConstraintType.endPad = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'endPad')
ST_ConstraintType.h = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'h')
ST_ConstraintType.hArH = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'hArH')
ST_ConstraintType.hOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'hOff')
ST_ConstraintType.l = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_ConstraintType.lMarg = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'lMarg')
ST_ConstraintType.lOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'lOff')
ST_ConstraintType.r = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_ConstraintType.rMarg = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'rMarg')
ST_ConstraintType.rOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'rOff')
ST_ConstraintType.primFontSz = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'primFontSz')
ST_ConstraintType.pyraAcctRatio = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'pyraAcctRatio')
ST_ConstraintType.secFontSz = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'secFontSz')
ST_ConstraintType.sibSp = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'sibSp')
ST_ConstraintType.secSibSp = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'secSibSp')
ST_ConstraintType.sp = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'sp')
ST_ConstraintType.stemThick = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'stemThick')
ST_ConstraintType.t = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u't')
ST_ConstraintType.tMarg = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'tMarg')
ST_ConstraintType.tOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'tOff')
ST_ConstraintType.userA = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userA')
ST_ConstraintType.userB = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userB')
ST_ConstraintType.userC = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userC')
ST_ConstraintType.userD = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userD')
ST_ConstraintType.userE = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userE')
ST_ConstraintType.userF = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userF')
ST_ConstraintType.userG = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userG')
ST_ConstraintType.userH = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userH')
ST_ConstraintType.userI = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userI')
ST_ConstraintType.userJ = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userJ')
ST_ConstraintType.userK = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userK')
ST_ConstraintType.userL = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userL')
ST_ConstraintType.userM = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userM')
ST_ConstraintType.userN = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userN')
ST_ConstraintType.userO = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userO')
ST_ConstraintType.userP = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userP')
ST_ConstraintType.userQ = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userQ')
ST_ConstraintType.userR = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userR')
ST_ConstraintType.userS = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userS')
ST_ConstraintType.userT = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userT')
ST_ConstraintType.userU = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userU')
ST_ConstraintType.userV = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userV')
ST_ConstraintType.userW = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userW')
ST_ConstraintType.userX = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userX')
ST_ConstraintType.userY = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userY')
ST_ConstraintType.userZ = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'userZ')
ST_ConstraintType.w = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'w')
ST_ConstraintType.wArH = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'wArH')
ST_ConstraintType.wOff = ST_ConstraintType._CF_enumeration.addEnumeration(unicode_value=u'wOff')
ST_ConstraintType._InitializeFacetMap(ST_ConstraintType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ConstraintType', ST_ConstraintType)

# Atomic SimpleTypeDefinition
class ST_BoolOperator (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Boolean Constraint"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_BoolOperator')
    _Documentation = u'Boolean Constraint'
ST_BoolOperator._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BoolOperator, enum_prefix=None)
ST_BoolOperator.none = ST_BoolOperator._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_BoolOperator.equ = ST_BoolOperator._CF_enumeration.addEnumeration(unicode_value=u'equ')
ST_BoolOperator.gte = ST_BoolOperator._CF_enumeration.addEnumeration(unicode_value=u'gte')
ST_BoolOperator.lte = ST_BoolOperator._CF_enumeration.addEnumeration(unicode_value=u'lte')
ST_BoolOperator._InitializeFacetMap(ST_BoolOperator._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_BoolOperator', ST_BoolOperator)

# Atomic SimpleTypeDefinition
class ST_ConstraintRelationship (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Constraint Relationship"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ConstraintRelationship')
    _Documentation = u'Constraint Relationship'
ST_ConstraintRelationship._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ConstraintRelationship, enum_prefix=None)
ST_ConstraintRelationship.self = ST_ConstraintRelationship._CF_enumeration.addEnumeration(unicode_value=u'self')
ST_ConstraintRelationship.ch = ST_ConstraintRelationship._CF_enumeration.addEnumeration(unicode_value=u'ch')
ST_ConstraintRelationship.des = ST_ConstraintRelationship._CF_enumeration.addEnumeration(unicode_value=u'des')
ST_ConstraintRelationship._InitializeFacetMap(ST_ConstraintRelationship._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ConstraintRelationship', ST_ConstraintRelationship)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_ModelId (pyxb.binding.basis.STD_union):

    """Model Identifier"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ModelId')
    _Documentation = u'Model Identifier'

    _MemberTypes = ( pyxb.binding.datatypes.int, _s.ST_Guid, )
ST_ModelId._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_ModelId._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ModelId)
ST_ModelId._InitializeFacetMap(ST_ModelId._CF_pattern,
   ST_ModelId._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ModelId', ST_ModelId)

# Atomic SimpleTypeDefinition
class ST_ColorSchemeIndex (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Theme Color Reference"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_ColorSchemeIndex')
    _Documentation = u'Theme Color Reference'
ST_ColorSchemeIndex._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ColorSchemeIndex, enum_prefix=None)
ST_ColorSchemeIndex.dk1 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'dk1')
ST_ColorSchemeIndex.lt1 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'lt1')
ST_ColorSchemeIndex.dk2 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'dk2')
ST_ColorSchemeIndex.lt2 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'lt2')
ST_ColorSchemeIndex.accent1 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent1')
ST_ColorSchemeIndex.accent2 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent2')
ST_ColorSchemeIndex.accent3 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent3')
ST_ColorSchemeIndex.accent4 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent4')
ST_ColorSchemeIndex.accent5 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent5')
ST_ColorSchemeIndex.accent6 = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent6')
ST_ColorSchemeIndex.hlink = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'hlink')
ST_ColorSchemeIndex.folHlink = ST_ColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'folHlink')
ST_ColorSchemeIndex._InitializeFacetMap(ST_ColorSchemeIndex._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_ColorSchemeIndex', ST_ColorSchemeIndex)

# Atomic SimpleTypeDefinition
class ST_TextBulletSizePercent (ST_PercentageDecimal):

    """Bullet Size Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextBulletSizePercent')
    _Documentation = u'Bullet Size Percentage'
ST_TextBulletSizePercent._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextBulletSizePercent, value=pyxb.binding.datatypes.int(25000))
ST_TextBulletSizePercent._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextBulletSizePercent, value=pyxb.binding.datatypes.int(400000))
ST_TextBulletSizePercent._InitializeFacetMap(ST_TextBulletSizePercent._CF_minInclusive,
   ST_TextBulletSizePercent._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextBulletSizePercent', ST_TextBulletSizePercent)

# Atomic SimpleTypeDefinition
class ST_PathFillMode (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Path Fill Mode"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PathFillMode')
    _Documentation = u'Path Fill Mode'
ST_PathFillMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PathFillMode, enum_prefix=None)
ST_PathFillMode.none = ST_PathFillMode._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_PathFillMode.norm = ST_PathFillMode._CF_enumeration.addEnumeration(unicode_value=u'norm')
ST_PathFillMode.lighten = ST_PathFillMode._CF_enumeration.addEnumeration(unicode_value=u'lighten')
ST_PathFillMode.lightenLess = ST_PathFillMode._CF_enumeration.addEnumeration(unicode_value=u'lightenLess')
ST_PathFillMode.darken = ST_PathFillMode._CF_enumeration.addEnumeration(unicode_value=u'darken')
ST_PathFillMode.darkenLess = ST_PathFillMode._CF_enumeration.addEnumeration(unicode_value=u'darkenLess')
ST_PathFillMode._InitializeFacetMap(ST_PathFillMode._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PathFillMode', ST_PathFillMode)

# Atomic SimpleTypeDefinition
class ST_ShapeID (pyxb.binding.datatypes.token):

    """Shape ID"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_ShapeID')
    _Documentation = u'Shape ID'
ST_ShapeID._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_ShapeID', ST_ShapeID)

# Atomic SimpleTypeDefinition
class ST_PresetLineDashVal (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Line Dash Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PresetLineDashVal')
    _Documentation = u'Preset Line Dash Value'
ST_PresetLineDashVal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PresetLineDashVal, enum_prefix=None)
ST_PresetLineDashVal.solid = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'solid')
ST_PresetLineDashVal.dot = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'dot')
ST_PresetLineDashVal.dash = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'dash')
ST_PresetLineDashVal.lgDash = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'lgDash')
ST_PresetLineDashVal.dashDot = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'dashDot')
ST_PresetLineDashVal.lgDashDot = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'lgDashDot')
ST_PresetLineDashVal.lgDashDotDot = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'lgDashDotDot')
ST_PresetLineDashVal.sysDash = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'sysDash')
ST_PresetLineDashVal.sysDot = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'sysDot')
ST_PresetLineDashVal.sysDashDot = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'sysDashDot')
ST_PresetLineDashVal.sysDashDotDot = ST_PresetLineDashVal._CF_enumeration.addEnumeration(unicode_value=u'sysDashDotDot')
ST_PresetLineDashVal._InitializeFacetMap(ST_PresetLineDashVal._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PresetLineDashVal', ST_PresetLineDashVal)

# Atomic SimpleTypeDefinition
class ST_AnimationBuildType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Animation Build Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_AnimationBuildType')
    _Documentation = u'Animation Build Type'
ST_AnimationBuildType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AnimationBuildType, enum_prefix=None)
ST_AnimationBuildType.allAtOnce = ST_AnimationBuildType._CF_enumeration.addEnumeration(unicode_value=u'allAtOnce')
ST_AnimationBuildType._InitializeFacetMap(ST_AnimationBuildType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_AnimationBuildType', ST_AnimationBuildType)

# Atomic SimpleTypeDefinition
class ST_AnimationChartOnlyBuildType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Chart only Animation Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_AnimationChartOnlyBuildType')
    _Documentation = u'Chart only Animation Types'
ST_AnimationChartOnlyBuildType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AnimationChartOnlyBuildType, enum_prefix=None)
ST_AnimationChartOnlyBuildType.series = ST_AnimationChartOnlyBuildType._CF_enumeration.addEnumeration(unicode_value=u'series')
ST_AnimationChartOnlyBuildType.category = ST_AnimationChartOnlyBuildType._CF_enumeration.addEnumeration(unicode_value=u'category')
ST_AnimationChartOnlyBuildType.seriesEl = ST_AnimationChartOnlyBuildType._CF_enumeration.addEnumeration(unicode_value=u'seriesEl')
ST_AnimationChartOnlyBuildType.categoryEl = ST_AnimationChartOnlyBuildType._CF_enumeration.addEnumeration(unicode_value=u'categoryEl')
ST_AnimationChartOnlyBuildType._InitializeFacetMap(ST_AnimationChartOnlyBuildType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_AnimationChartOnlyBuildType', ST_AnimationChartOnlyBuildType)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_AnimationChartBuildType (pyxb.binding.basis.STD_union):

    """Chart Animation Build Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_AnimationChartBuildType')
    _Documentation = u'Chart Animation Build Type'

    _MemberTypes = ( ST_AnimationBuildType, ST_AnimationChartOnlyBuildType, )
ST_AnimationChartBuildType._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_AnimationChartBuildType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AnimationChartBuildType)
ST_AnimationChartBuildType.allAtOnce = u'allAtOnce'# originally ST_AnimationBuildType.allAtOnce
ST_AnimationChartBuildType.series = u'series'     # originally ST_AnimationChartOnlyBuildType.series
ST_AnimationChartBuildType.category = u'category' # originally ST_AnimationChartOnlyBuildType.category
ST_AnimationChartBuildType.seriesEl = u'seriesEl' # originally ST_AnimationChartOnlyBuildType.seriesEl
ST_AnimationChartBuildType.categoryEl = u'categoryEl'# originally ST_AnimationChartOnlyBuildType.categoryEl
ST_AnimationChartBuildType._InitializeFacetMap(ST_AnimationChartBuildType._CF_pattern,
   ST_AnimationChartBuildType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_AnimationChartBuildType', ST_AnimationChartBuildType)

# Atomic SimpleTypeDefinition
class ST_ParameterId (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Parameter Identifier"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ParameterId')
    _Documentation = u'Parameter Identifier'
ST_ParameterId._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ParameterId, enum_prefix=None)
ST_ParameterId.horzAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'horzAlign')
ST_ParameterId.vertAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'vertAlign')
ST_ParameterId.chDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'chDir')
ST_ParameterId.chAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'chAlign')
ST_ParameterId.secChAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'secChAlign')
ST_ParameterId.linDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'linDir')
ST_ParameterId.secLinDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'secLinDir')
ST_ParameterId.stElem = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'stElem')
ST_ParameterId.bendPt = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'bendPt')
ST_ParameterId.connRout = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'connRout')
ST_ParameterId.begSty = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'begSty')
ST_ParameterId.endSty = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'endSty')
ST_ParameterId.dim = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'dim')
ST_ParameterId.rotPath = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'rotPath')
ST_ParameterId.ctrShpMap = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'ctrShpMap')
ST_ParameterId.nodeHorzAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'nodeHorzAlign')
ST_ParameterId.nodeVertAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'nodeVertAlign')
ST_ParameterId.fallback = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'fallback')
ST_ParameterId.txDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'txDir')
ST_ParameterId.pyraAcctPos = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'pyraAcctPos')
ST_ParameterId.pyraAcctTxMar = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'pyraAcctTxMar')
ST_ParameterId.txBlDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'txBlDir')
ST_ParameterId.txAnchorHorz = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'txAnchorHorz')
ST_ParameterId.txAnchorVert = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'txAnchorVert')
ST_ParameterId.txAnchorHorzCh = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'txAnchorHorzCh')
ST_ParameterId.txAnchorVertCh = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'txAnchorVertCh')
ST_ParameterId.parTxLTRAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'parTxLTRAlign')
ST_ParameterId.parTxRTLAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'parTxRTLAlign')
ST_ParameterId.shpTxLTRAlignCh = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'shpTxLTRAlignCh')
ST_ParameterId.shpTxRTLAlignCh = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'shpTxRTLAlignCh')
ST_ParameterId.autoTxRot = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'autoTxRot')
ST_ParameterId.grDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'grDir')
ST_ParameterId.flowDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'flowDir')
ST_ParameterId.contDir = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'contDir')
ST_ParameterId.bkpt = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'bkpt')
ST_ParameterId.off = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'off')
ST_ParameterId.hierAlign = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'hierAlign')
ST_ParameterId.bkPtFixedVal = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'bkPtFixedVal')
ST_ParameterId.stBulletLvl = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'stBulletLvl')
ST_ParameterId.stAng = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'stAng')
ST_ParameterId.spanAng = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'spanAng')
ST_ParameterId.ar = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'ar')
ST_ParameterId.lnSpPar = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'lnSpPar')
ST_ParameterId.lnSpAfParP = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'lnSpAfParP')
ST_ParameterId.lnSpCh = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'lnSpCh')
ST_ParameterId.lnSpAfChP = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'lnSpAfChP')
ST_ParameterId.rtShortDist = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'rtShortDist')
ST_ParameterId.alignTx = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'alignTx')
ST_ParameterId.pyraLvlNode = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'pyraLvlNode')
ST_ParameterId.pyraAcctBkgdNode = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'pyraAcctBkgdNode')
ST_ParameterId.pyraAcctTxNode = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'pyraAcctTxNode')
ST_ParameterId.srcNode = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'srcNode')
ST_ParameterId.dstNode = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'dstNode')
ST_ParameterId.begPts = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'begPts')
ST_ParameterId.endPts = ST_ParameterId._CF_enumeration.addEnumeration(unicode_value=u'endPts')
ST_ParameterId._InitializeFacetMap(ST_ParameterId._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ParameterId', ST_ParameterId)

# Atomic SimpleTypeDefinition
class ST_PyramidAccentTextMargin (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Pyramid Accent Text Margin"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_PyramidAccentTextMargin')
    _Documentation = u'Pyramid Accent Text Margin'
ST_PyramidAccentTextMargin._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PyramidAccentTextMargin, enum_prefix=None)
ST_PyramidAccentTextMargin.step = ST_PyramidAccentTextMargin._CF_enumeration.addEnumeration(unicode_value=u'step')
ST_PyramidAccentTextMargin.stack = ST_PyramidAccentTextMargin._CF_enumeration.addEnumeration(unicode_value=u'stack')
ST_PyramidAccentTextMargin._InitializeFacetMap(ST_PyramidAccentTextMargin._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_PyramidAccentTextMargin', ST_PyramidAccentTextMargin)

# Atomic SimpleTypeDefinition
class ST_TextBlockDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Block Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_TextBlockDirection')
    _Documentation = u'Text Block Direction'
ST_TextBlockDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextBlockDirection, enum_prefix=None)
ST_TextBlockDirection.horz = ST_TextBlockDirection._CF_enumeration.addEnumeration(unicode_value=u'horz')
ST_TextBlockDirection.vert = ST_TextBlockDirection._CF_enumeration.addEnumeration(unicode_value=u'vert')
ST_TextBlockDirection._InitializeFacetMap(ST_TextBlockDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_TextBlockDirection', ST_TextBlockDirection)

# Atomic SimpleTypeDefinition
class ST_TextAnchorHorizontal (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Anchor Horizontal"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_TextAnchorHorizontal')
    _Documentation = u'Text Anchor Horizontal'
ST_TextAnchorHorizontal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextAnchorHorizontal, enum_prefix=None)
ST_TextAnchorHorizontal.none = ST_TextAnchorHorizontal._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TextAnchorHorizontal.ctr = ST_TextAnchorHorizontal._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_TextAnchorHorizontal._InitializeFacetMap(ST_TextAnchorHorizontal._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_TextAnchorHorizontal', ST_TextAnchorHorizontal)

# Atomic SimpleTypeDefinition
class ST_DiagramTextAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_DiagramTextAlignment')
    _Documentation = u'Text Alignment'
ST_DiagramTextAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DiagramTextAlignment, enum_prefix=None)
ST_DiagramTextAlignment.l = ST_DiagramTextAlignment._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_DiagramTextAlignment.ctr = ST_DiagramTextAlignment._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_DiagramTextAlignment.r = ST_DiagramTextAlignment._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_DiagramTextAlignment._InitializeFacetMap(ST_DiagramTextAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_DiagramTextAlignment', ST_DiagramTextAlignment)

# Atomic SimpleTypeDefinition
class ST_LinearDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Linear Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_LinearDirection')
    _Documentation = u'Linear Direction'
ST_LinearDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LinearDirection, enum_prefix=None)
ST_LinearDirection.fromL = ST_LinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromL')
ST_LinearDirection.fromR = ST_LinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromR')
ST_LinearDirection.fromT = ST_LinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromT')
ST_LinearDirection.fromB = ST_LinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromB')
ST_LinearDirection._InitializeFacetMap(ST_LinearDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_LinearDirection', ST_LinearDirection)

# Atomic SimpleTypeDefinition
class ST_AutoTextRotation (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Auto Text Rotation"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_AutoTextRotation')
    _Documentation = u'Auto Text Rotation'
ST_AutoTextRotation._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AutoTextRotation, enum_prefix=None)
ST_AutoTextRotation.none = ST_AutoTextRotation._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_AutoTextRotation.upr = ST_AutoTextRotation._CF_enumeration.addEnumeration(unicode_value=u'upr')
ST_AutoTextRotation.grav = ST_AutoTextRotation._CF_enumeration.addEnumeration(unicode_value=u'grav')
ST_AutoTextRotation._InitializeFacetMap(ST_AutoTextRotation._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_AutoTextRotation', ST_AutoTextRotation)

# Atomic SimpleTypeDefinition
class ST_GrowDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Grow Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_GrowDirection')
    _Documentation = u'Grow Direction'
ST_GrowDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_GrowDirection, enum_prefix=None)
ST_GrowDirection.tL = ST_GrowDirection._CF_enumeration.addEnumeration(unicode_value=u'tL')
ST_GrowDirection.tR = ST_GrowDirection._CF_enumeration.addEnumeration(unicode_value=u'tR')
ST_GrowDirection.bL = ST_GrowDirection._CF_enumeration.addEnumeration(unicode_value=u'bL')
ST_GrowDirection.bR = ST_GrowDirection._CF_enumeration.addEnumeration(unicode_value=u'bR')
ST_GrowDirection._InitializeFacetMap(ST_GrowDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_GrowDirection', ST_GrowDirection)

# Atomic SimpleTypeDefinition
class ST_FlowDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Flow Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_FlowDirection')
    _Documentation = u'Flow Direction'
ST_FlowDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FlowDirection, enum_prefix=None)
ST_FlowDirection.row = ST_FlowDirection._CF_enumeration.addEnumeration(unicode_value=u'row')
ST_FlowDirection.col = ST_FlowDirection._CF_enumeration.addEnumeration(unicode_value=u'col')
ST_FlowDirection._InitializeFacetMap(ST_FlowDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_FlowDirection', ST_FlowDirection)

# Atomic SimpleTypeDefinition
class ST_Breakpoint (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Breakpoint"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_Breakpoint')
    _Documentation = u'Breakpoint'
ST_Breakpoint._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Breakpoint, enum_prefix=None)
ST_Breakpoint.endCnv = ST_Breakpoint._CF_enumeration.addEnumeration(unicode_value=u'endCnv')
ST_Breakpoint.bal = ST_Breakpoint._CF_enumeration.addEnumeration(unicode_value=u'bal')
ST_Breakpoint.fixed = ST_Breakpoint._CF_enumeration.addEnumeration(unicode_value=u'fixed')
ST_Breakpoint._InitializeFacetMap(ST_Breakpoint._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_Breakpoint', ST_Breakpoint)

# Atomic SimpleTypeDefinition
class ST_Offset (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Offset"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_Offset')
    _Documentation = u'Offset'
ST_Offset._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Offset, enum_prefix=None)
ST_Offset.ctr = ST_Offset._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_Offset.off = ST_Offset._CF_enumeration.addEnumeration(unicode_value=u'off')
ST_Offset._InitializeFacetMap(ST_Offset._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_Offset', ST_Offset)

# Atomic SimpleTypeDefinition
class ST_HierarchyAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Hierarchy Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_HierarchyAlignment')
    _Documentation = u'Hierarchy Alignment'
ST_HierarchyAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_HierarchyAlignment, enum_prefix=None)
ST_HierarchyAlignment.tL = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'tL')
ST_HierarchyAlignment.tR = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'tR')
ST_HierarchyAlignment.tCtrCh = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'tCtrCh')
ST_HierarchyAlignment.tCtrDes = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'tCtrDes')
ST_HierarchyAlignment.bL = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'bL')
ST_HierarchyAlignment.bR = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'bR')
ST_HierarchyAlignment.bCtrCh = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'bCtrCh')
ST_HierarchyAlignment.bCtrDes = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'bCtrDes')
ST_HierarchyAlignment.lT = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'lT')
ST_HierarchyAlignment.lB = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'lB')
ST_HierarchyAlignment.lCtrCh = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'lCtrCh')
ST_HierarchyAlignment.lCtrDes = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'lCtrDes')
ST_HierarchyAlignment.rT = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'rT')
ST_HierarchyAlignment.rB = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'rB')
ST_HierarchyAlignment.rCtrCh = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'rCtrCh')
ST_HierarchyAlignment.rCtrDes = ST_HierarchyAlignment._CF_enumeration.addEnumeration(unicode_value=u'rCtrDes')
ST_HierarchyAlignment._InitializeFacetMap(ST_HierarchyAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_HierarchyAlignment', ST_HierarchyAlignment)

# Atomic SimpleTypeDefinition
class ST_DiagramHorizontalAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Horizontal Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_DiagramHorizontalAlignment')
    _Documentation = u'Horizontal Alignment'
ST_DiagramHorizontalAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DiagramHorizontalAlignment, enum_prefix=None)
ST_DiagramHorizontalAlignment.l = ST_DiagramHorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_DiagramHorizontalAlignment.ctr = ST_DiagramHorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_DiagramHorizontalAlignment.r = ST_DiagramHorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_DiagramHorizontalAlignment.none = ST_DiagramHorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_DiagramHorizontalAlignment._InitializeFacetMap(ST_DiagramHorizontalAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_DiagramHorizontalAlignment', ST_DiagramHorizontalAlignment)

# Atomic SimpleTypeDefinition
class ST_VerticalAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Vertical Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_VerticalAlignment')
    _Documentation = u'Vertical Alignment'
ST_VerticalAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_VerticalAlignment, enum_prefix=None)
ST_VerticalAlignment.t = ST_VerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u't')
ST_VerticalAlignment.mid = ST_VerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u'mid')
ST_VerticalAlignment.b = ST_VerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_VerticalAlignment.none = ST_VerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_VerticalAlignment._InitializeFacetMap(ST_VerticalAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_VerticalAlignment', ST_VerticalAlignment)

# Atomic SimpleTypeDefinition
class ST_ChildDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Child Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ChildDirection')
    _Documentation = u'Child Direction'
ST_ChildDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ChildDirection, enum_prefix=None)
ST_ChildDirection.horz = ST_ChildDirection._CF_enumeration.addEnumeration(unicode_value=u'horz')
ST_ChildDirection.vert = ST_ChildDirection._CF_enumeration.addEnumeration(unicode_value=u'vert')
ST_ChildDirection._InitializeFacetMap(ST_ChildDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ChildDirection', ST_ChildDirection)

# Atomic SimpleTypeDefinition
class ST_ChildAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Child Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ChildAlignment')
    _Documentation = u'Child Alignment'
ST_ChildAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ChildAlignment, enum_prefix=None)
ST_ChildAlignment.t = ST_ChildAlignment._CF_enumeration.addEnumeration(unicode_value=u't')
ST_ChildAlignment.b = ST_ChildAlignment._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_ChildAlignment.l = ST_ChildAlignment._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_ChildAlignment.r = ST_ChildAlignment._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_ChildAlignment._InitializeFacetMap(ST_ChildAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ChildAlignment', ST_ChildAlignment)

# Atomic SimpleTypeDefinition
class ST_SecondaryChildAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Secondary Child Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_SecondaryChildAlignment')
    _Documentation = u'Secondary Child Alignment'
ST_SecondaryChildAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SecondaryChildAlignment, enum_prefix=None)
ST_SecondaryChildAlignment.none = ST_SecondaryChildAlignment._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_SecondaryChildAlignment.t = ST_SecondaryChildAlignment._CF_enumeration.addEnumeration(unicode_value=u't')
ST_SecondaryChildAlignment.b = ST_SecondaryChildAlignment._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_SecondaryChildAlignment.l = ST_SecondaryChildAlignment._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_SecondaryChildAlignment.r = ST_SecondaryChildAlignment._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_SecondaryChildAlignment._InitializeFacetMap(ST_SecondaryChildAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_SecondaryChildAlignment', ST_SecondaryChildAlignment)

# Atomic SimpleTypeDefinition
class ST_SecondaryLinearDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Secondary Linear Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_SecondaryLinearDirection')
    _Documentation = u'Secondary Linear Direction'
ST_SecondaryLinearDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SecondaryLinearDirection, enum_prefix=None)
ST_SecondaryLinearDirection.none = ST_SecondaryLinearDirection._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_SecondaryLinearDirection.fromL = ST_SecondaryLinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromL')
ST_SecondaryLinearDirection.fromR = ST_SecondaryLinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromR')
ST_SecondaryLinearDirection.fromT = ST_SecondaryLinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromT')
ST_SecondaryLinearDirection.fromB = ST_SecondaryLinearDirection._CF_enumeration.addEnumeration(unicode_value=u'fromB')
ST_SecondaryLinearDirection._InitializeFacetMap(ST_SecondaryLinearDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_SecondaryLinearDirection', ST_SecondaryLinearDirection)

# Atomic SimpleTypeDefinition
class ST_StartingElement (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Starting Element"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_StartingElement')
    _Documentation = u'Starting Element'
ST_StartingElement._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_StartingElement, enum_prefix=None)
ST_StartingElement.node = ST_StartingElement._CF_enumeration.addEnumeration(unicode_value=u'node')
ST_StartingElement.trans = ST_StartingElement._CF_enumeration.addEnumeration(unicode_value=u'trans')
ST_StartingElement._InitializeFacetMap(ST_StartingElement._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_StartingElement', ST_StartingElement)

# Atomic SimpleTypeDefinition
class ST_RotationPath (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Rotation Path"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_RotationPath')
    _Documentation = u'Rotation Path'
ST_RotationPath._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_RotationPath, enum_prefix=None)
ST_RotationPath.none = ST_RotationPath._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_RotationPath.alongPath = ST_RotationPath._CF_enumeration.addEnumeration(unicode_value=u'alongPath')
ST_RotationPath._InitializeFacetMap(ST_RotationPath._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_RotationPath', ST_RotationPath)

# Atomic SimpleTypeDefinition
class ST_ContinueDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Continue Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ContinueDirection')
    _Documentation = u'Continue Direction'
ST_ContinueDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ContinueDirection, enum_prefix=None)
ST_ContinueDirection.revDir = ST_ContinueDirection._CF_enumeration.addEnumeration(unicode_value=u'revDir')
ST_ContinueDirection.sameDir = ST_ContinueDirection._CF_enumeration.addEnumeration(unicode_value=u'sameDir')
ST_ContinueDirection._InitializeFacetMap(ST_ContinueDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ContinueDirection', ST_ContinueDirection)

# Atomic SimpleTypeDefinition
class ST_CenterShapeMapping (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Center Shape Mapping"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_CenterShapeMapping')
    _Documentation = u'Center Shape Mapping'
ST_CenterShapeMapping._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CenterShapeMapping, enum_prefix=None)
ST_CenterShapeMapping.none = ST_CenterShapeMapping._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_CenterShapeMapping.fNode = ST_CenterShapeMapping._CF_enumeration.addEnumeration(unicode_value=u'fNode')
ST_CenterShapeMapping._InitializeFacetMap(ST_CenterShapeMapping._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_CenterShapeMapping', ST_CenterShapeMapping)

# Atomic SimpleTypeDefinition
class ST_BendPoint (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Bend Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_BendPoint')
    _Documentation = u'Bend Point'
ST_BendPoint._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BendPoint, enum_prefix=None)
ST_BendPoint.beg = ST_BendPoint._CF_enumeration.addEnumeration(unicode_value=u'beg')
ST_BendPoint.def_ = ST_BendPoint._CF_enumeration.addEnumeration(unicode_value=u'def')
ST_BendPoint.end = ST_BendPoint._CF_enumeration.addEnumeration(unicode_value=u'end')
ST_BendPoint._InitializeFacetMap(ST_BendPoint._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_BendPoint', ST_BendPoint)

# Atomic SimpleTypeDefinition
class ST_ConnectorRouting (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Connector Routing"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ConnectorRouting')
    _Documentation = u'Connector Routing'
ST_ConnectorRouting._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ConnectorRouting, enum_prefix=None)
ST_ConnectorRouting.stra = ST_ConnectorRouting._CF_enumeration.addEnumeration(unicode_value=u'stra')
ST_ConnectorRouting.bend = ST_ConnectorRouting._CF_enumeration.addEnumeration(unicode_value=u'bend')
ST_ConnectorRouting.curve = ST_ConnectorRouting._CF_enumeration.addEnumeration(unicode_value=u'curve')
ST_ConnectorRouting.longCurve = ST_ConnectorRouting._CF_enumeration.addEnumeration(unicode_value=u'longCurve')
ST_ConnectorRouting._InitializeFacetMap(ST_ConnectorRouting._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ConnectorRouting', ST_ConnectorRouting)

# Atomic SimpleTypeDefinition
class ST_ArrowheadStyle (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Arrowhead Styles"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ArrowheadStyle')
    _Documentation = u'Arrowhead Styles'
ST_ArrowheadStyle._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ArrowheadStyle, enum_prefix=None)
ST_ArrowheadStyle.auto = ST_ArrowheadStyle._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_ArrowheadStyle.arr = ST_ArrowheadStyle._CF_enumeration.addEnumeration(unicode_value=u'arr')
ST_ArrowheadStyle.noArr = ST_ArrowheadStyle._CF_enumeration.addEnumeration(unicode_value=u'noArr')
ST_ArrowheadStyle._InitializeFacetMap(ST_ArrowheadStyle._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ArrowheadStyle', ST_ArrowheadStyle)

# Atomic SimpleTypeDefinition
class ST_TextAnchorVertical (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Anchor Vertical"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_TextAnchorVertical')
    _Documentation = u'Text Anchor Vertical'
ST_TextAnchorVertical._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextAnchorVertical, enum_prefix=None)
ST_TextAnchorVertical.t = ST_TextAnchorVertical._CF_enumeration.addEnumeration(unicode_value=u't')
ST_TextAnchorVertical.mid = ST_TextAnchorVertical._CF_enumeration.addEnumeration(unicode_value=u'mid')
ST_TextAnchorVertical.b = ST_TextAnchorVertical._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_TextAnchorVertical._InitializeFacetMap(ST_TextAnchorVertical._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_TextAnchorVertical', ST_TextAnchorVertical)

# Atomic SimpleTypeDefinition
class ST_ConnectorDimension (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Connector Dimension"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ConnectorDimension')
    _Documentation = u'Connector Dimension'
ST_ConnectorDimension._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ConnectorDimension, enum_prefix=None)
ST_ConnectorDimension.n1D = ST_ConnectorDimension._CF_enumeration.addEnumeration(unicode_value=u'1D')
ST_ConnectorDimension.n2D = ST_ConnectorDimension._CF_enumeration.addEnumeration(unicode_value=u'2D')
ST_ConnectorDimension.cust = ST_ConnectorDimension._CF_enumeration.addEnumeration(unicode_value=u'cust')
ST_ConnectorDimension._InitializeFacetMap(ST_ConnectorDimension._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ConnectorDimension', ST_ConnectorDimension)

# Atomic SimpleTypeDefinition
class ST_ConnectorPoint (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Connector Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ConnectorPoint')
    _Documentation = u'Connector Point'
ST_ConnectorPoint._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ConnectorPoint, enum_prefix=None)
ST_ConnectorPoint.auto = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_ConnectorPoint.bCtr = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'bCtr')
ST_ConnectorPoint.ctr = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_ConnectorPoint.midL = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'midL')
ST_ConnectorPoint.midR = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'midR')
ST_ConnectorPoint.tCtr = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'tCtr')
ST_ConnectorPoint.bL = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'bL')
ST_ConnectorPoint.bR = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'bR')
ST_ConnectorPoint.tL = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'tL')
ST_ConnectorPoint.tR = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'tR')
ST_ConnectorPoint.radial = ST_ConnectorPoint._CF_enumeration.addEnumeration(unicode_value=u'radial')
ST_ConnectorPoint._InitializeFacetMap(ST_ConnectorPoint._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ConnectorPoint', ST_ConnectorPoint)

# Atomic SimpleTypeDefinition
class ST_NodeHorizontalAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Node Horizontal Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_NodeHorizontalAlignment')
    _Documentation = u'Node Horizontal Alignment'
ST_NodeHorizontalAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_NodeHorizontalAlignment, enum_prefix=None)
ST_NodeHorizontalAlignment.l = ST_NodeHorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_NodeHorizontalAlignment.ctr = ST_NodeHorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_NodeHorizontalAlignment.r = ST_NodeHorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_NodeHorizontalAlignment._InitializeFacetMap(ST_NodeHorizontalAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_NodeHorizontalAlignment', ST_NodeHorizontalAlignment)

# Atomic SimpleTypeDefinition
class ST_NodeVerticalAlignment (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Node Vertical Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_NodeVerticalAlignment')
    _Documentation = u'Node Vertical Alignment'
ST_NodeVerticalAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_NodeVerticalAlignment, enum_prefix=None)
ST_NodeVerticalAlignment.t = ST_NodeVerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u't')
ST_NodeVerticalAlignment.mid = ST_NodeVerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u'mid')
ST_NodeVerticalAlignment.b = ST_NodeVerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_NodeVerticalAlignment._InitializeFacetMap(ST_NodeVerticalAlignment._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_NodeVerticalAlignment', ST_NodeVerticalAlignment)

# Atomic SimpleTypeDefinition
class ST_FallbackDimension (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Fallback Dimension"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_FallbackDimension')
    _Documentation = u'Fallback Dimension'
ST_FallbackDimension._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FallbackDimension, enum_prefix=None)
ST_FallbackDimension.n1D = ST_FallbackDimension._CF_enumeration.addEnumeration(unicode_value=u'1D')
ST_FallbackDimension.n2D = ST_FallbackDimension._CF_enumeration.addEnumeration(unicode_value=u'2D')
ST_FallbackDimension._InitializeFacetMap(ST_FallbackDimension._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_FallbackDimension', ST_FallbackDimension)

# Atomic SimpleTypeDefinition
class ST_TextDirection (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_TextDirection')
    _Documentation = u'Text Direction'
ST_TextDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextDirection, enum_prefix=None)
ST_TextDirection.fromT = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'fromT')
ST_TextDirection.fromB = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'fromB')
ST_TextDirection._InitializeFacetMap(ST_TextDirection._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_TextDirection', ST_TextDirection)

# Atomic SimpleTypeDefinition
class ST_PyramidAccentPosition (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Pyramid Accent Position"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_PyramidAccentPosition')
    _Documentation = u'Pyramid Accent Position'
ST_PyramidAccentPosition._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PyramidAccentPosition, enum_prefix=None)
ST_PyramidAccentPosition.bef = ST_PyramidAccentPosition._CF_enumeration.addEnumeration(unicode_value=u'bef')
ST_PyramidAccentPosition.aft = ST_PyramidAccentPosition._CF_enumeration.addEnumeration(unicode_value=u'aft')
ST_PyramidAccentPosition._InitializeFacetMap(ST_PyramidAccentPosition._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_PyramidAccentPosition', ST_PyramidAccentPosition)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_ParameterVal (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ST_DiagramHorizontalAlignment, ST_VerticalAlignment, ST_ChildDirection, ST_ChildAlignment, ST_SecondaryChildAlignment, ST_LinearDirection, ST_SecondaryLinearDirection, ST_StartingElement, ST_BendPoint, ST_ConnectorRouting, ST_ArrowheadStyle, ST_ConnectorDimension, ST_RotationPath, ST_CenterShapeMapping, ST_NodeHorizontalAlignment, ST_NodeVerticalAlignment, ST_FallbackDimension, ST_TextDirection, ST_PyramidAccentPosition, ST_PyramidAccentTextMargin, ST_TextBlockDirection, ST_TextAnchorHorizontal, ST_TextAnchorVertical, ST_DiagramTextAlignment, ST_AutoTextRotation, ST_GrowDirection, ST_FlowDirection, ST_ContinueDirection, ST_Breakpoint, ST_Offset, ST_HierarchyAlignment, pyxb.binding.datatypes.int, pyxb.binding.datatypes.double, pyxb.binding.datatypes.boolean, pyxb.binding.datatypes.string, ST_ConnectorPoint."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ParameterVal')
    _Documentation = None

    _MemberTypes = ( ST_DiagramHorizontalAlignment, ST_VerticalAlignment, ST_ChildDirection, ST_ChildAlignment, ST_SecondaryChildAlignment, ST_LinearDirection, ST_SecondaryLinearDirection, ST_StartingElement, ST_BendPoint, ST_ConnectorRouting, ST_ArrowheadStyle, ST_ConnectorDimension, ST_RotationPath, ST_CenterShapeMapping, ST_NodeHorizontalAlignment, ST_NodeVerticalAlignment, ST_FallbackDimension, ST_TextDirection, ST_PyramidAccentPosition, ST_PyramidAccentTextMargin, ST_TextBlockDirection, ST_TextAnchorHorizontal, ST_TextAnchorVertical, ST_DiagramTextAlignment, ST_AutoTextRotation, ST_GrowDirection, ST_FlowDirection, ST_ContinueDirection, ST_Breakpoint, ST_Offset, ST_HierarchyAlignment, pyxb.binding.datatypes.int, pyxb.binding.datatypes.double, pyxb.binding.datatypes.boolean, pyxb.binding.datatypes.string, ST_ConnectorPoint, )
ST_ParameterVal._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_ParameterVal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ParameterVal)
ST_ParameterVal.l = u'l'                          # originally ST_DiagramHorizontalAlignment.l
ST_ParameterVal.ctr = u'ctr'                      # originally ST_DiagramHorizontalAlignment.ctr
ST_ParameterVal.r = u'r'                          # originally ST_DiagramHorizontalAlignment.r
ST_ParameterVal.none = u'none'                    # originally ST_DiagramHorizontalAlignment.none
ST_ParameterVal.t = u't'                          # originally ST_VerticalAlignment.t
ST_ParameterVal.mid = u'mid'                      # originally ST_VerticalAlignment.mid
ST_ParameterVal.b = u'b'                          # originally ST_VerticalAlignment.b
ST_ParameterVal.none_ = u'none'                   # originally ST_VerticalAlignment.none
ST_ParameterVal.horz = u'horz'                    # originally ST_ChildDirection.horz
ST_ParameterVal.vert = u'vert'                    # originally ST_ChildDirection.vert
ST_ParameterVal.t_ = u't'                         # originally ST_ChildAlignment.t
ST_ParameterVal.b_ = u'b'                         # originally ST_ChildAlignment.b
ST_ParameterVal.l_ = u'l'                         # originally ST_ChildAlignment.l
ST_ParameterVal.r_ = u'r'                         # originally ST_ChildAlignment.r
ST_ParameterVal.none_2 = u'none'                  # originally ST_SecondaryChildAlignment.none
ST_ParameterVal.t_2 = u't'                        # originally ST_SecondaryChildAlignment.t
ST_ParameterVal.b_2 = u'b'                        # originally ST_SecondaryChildAlignment.b
ST_ParameterVal.l_2 = u'l'                        # originally ST_SecondaryChildAlignment.l
ST_ParameterVal.r_2 = u'r'                        # originally ST_SecondaryChildAlignment.r
ST_ParameterVal.fromL = u'fromL'                  # originally ST_LinearDirection.fromL
ST_ParameterVal.fromR = u'fromR'                  # originally ST_LinearDirection.fromR
ST_ParameterVal.fromT = u'fromT'                  # originally ST_LinearDirection.fromT
ST_ParameterVal.fromB = u'fromB'                  # originally ST_LinearDirection.fromB
ST_ParameterVal.none_3 = u'none'                  # originally ST_SecondaryLinearDirection.none
ST_ParameterVal.fromL_ = u'fromL'                 # originally ST_SecondaryLinearDirection.fromL
ST_ParameterVal.fromR_ = u'fromR'                 # originally ST_SecondaryLinearDirection.fromR
ST_ParameterVal.fromT_ = u'fromT'                 # originally ST_SecondaryLinearDirection.fromT
ST_ParameterVal.fromB_ = u'fromB'                 # originally ST_SecondaryLinearDirection.fromB
ST_ParameterVal.node = u'node'                    # originally ST_StartingElement.node
ST_ParameterVal.trans = u'trans'                  # originally ST_StartingElement.trans
ST_ParameterVal.beg = u'beg'                      # originally ST_BendPoint.beg
ST_ParameterVal.def_ = u'def'                     # originally ST_BendPoint.def_
ST_ParameterVal.end = u'end'                      # originally ST_BendPoint.end
ST_ParameterVal.stra = u'stra'                    # originally ST_ConnectorRouting.stra
ST_ParameterVal.bend = u'bend'                    # originally ST_ConnectorRouting.bend
ST_ParameterVal.curve = u'curve'                  # originally ST_ConnectorRouting.curve
ST_ParameterVal.longCurve = u'longCurve'          # originally ST_ConnectorRouting.longCurve
ST_ParameterVal.auto = u'auto'                    # originally ST_ArrowheadStyle.auto
ST_ParameterVal.arr = u'arr'                      # originally ST_ArrowheadStyle.arr
ST_ParameterVal.noArr = u'noArr'                  # originally ST_ArrowheadStyle.noArr
ST_ParameterVal.n1D = u'1D'                       # originally ST_ConnectorDimension.n1D
ST_ParameterVal.n2D = u'2D'                       # originally ST_ConnectorDimension.n2D
ST_ParameterVal.cust = u'cust'                    # originally ST_ConnectorDimension.cust
ST_ParameterVal.none_4 = u'none'                  # originally ST_RotationPath.none
ST_ParameterVal.alongPath = u'alongPath'          # originally ST_RotationPath.alongPath
ST_ParameterVal.none_5 = u'none'                  # originally ST_CenterShapeMapping.none
ST_ParameterVal.fNode = u'fNode'                  # originally ST_CenterShapeMapping.fNode
ST_ParameterVal.l_3 = u'l'                        # originally ST_NodeHorizontalAlignment.l
ST_ParameterVal.ctr_ = u'ctr'                     # originally ST_NodeHorizontalAlignment.ctr
ST_ParameterVal.r_3 = u'r'                        # originally ST_NodeHorizontalAlignment.r
ST_ParameterVal.t_3 = u't'                        # originally ST_NodeVerticalAlignment.t
ST_ParameterVal.mid_ = u'mid'                     # originally ST_NodeVerticalAlignment.mid
ST_ParameterVal.b_3 = u'b'                        # originally ST_NodeVerticalAlignment.b
ST_ParameterVal.n1D_ = u'1D'                      # originally ST_FallbackDimension.n1D
ST_ParameterVal.n2D_ = u'2D'                      # originally ST_FallbackDimension.n2D
ST_ParameterVal.fromT_2 = u'fromT'                # originally ST_TextDirection.fromT
ST_ParameterVal.fromB_2 = u'fromB'                # originally ST_TextDirection.fromB
ST_ParameterVal.bef = u'bef'                      # originally ST_PyramidAccentPosition.bef
ST_ParameterVal.aft = u'aft'                      # originally ST_PyramidAccentPosition.aft
ST_ParameterVal.step = u'step'                    # originally ST_PyramidAccentTextMargin.step
ST_ParameterVal.stack = u'stack'                  # originally ST_PyramidAccentTextMargin.stack
ST_ParameterVal.horz_ = u'horz'                   # originally ST_TextBlockDirection.horz
ST_ParameterVal.vert_ = u'vert'                   # originally ST_TextBlockDirection.vert
ST_ParameterVal.none_6 = u'none'                  # originally ST_TextAnchorHorizontal.none
ST_ParameterVal.ctr_2 = u'ctr'                    # originally ST_TextAnchorHorizontal.ctr
ST_ParameterVal.t_4 = u't'                        # originally ST_TextAnchorVertical.t
ST_ParameterVal.mid_2 = u'mid'                    # originally ST_TextAnchorVertical.mid
ST_ParameterVal.b_4 = u'b'                        # originally ST_TextAnchorVertical.b
ST_ParameterVal.l_4 = u'l'                        # originally ST_DiagramTextAlignment.l
ST_ParameterVal.ctr_3 = u'ctr'                    # originally ST_DiagramTextAlignment.ctr
ST_ParameterVal.r_4 = u'r'                        # originally ST_DiagramTextAlignment.r
ST_ParameterVal.none_7 = u'none'                  # originally ST_AutoTextRotation.none
ST_ParameterVal.upr = u'upr'                      # originally ST_AutoTextRotation.upr
ST_ParameterVal.grav = u'grav'                    # originally ST_AutoTextRotation.grav
ST_ParameterVal.tL = u'tL'                        # originally ST_GrowDirection.tL
ST_ParameterVal.tR = u'tR'                        # originally ST_GrowDirection.tR
ST_ParameterVal.bL = u'bL'                        # originally ST_GrowDirection.bL
ST_ParameterVal.bR = u'bR'                        # originally ST_GrowDirection.bR
ST_ParameterVal.row = u'row'                      # originally ST_FlowDirection.row
ST_ParameterVal.col = u'col'                      # originally ST_FlowDirection.col
ST_ParameterVal.revDir = u'revDir'                # originally ST_ContinueDirection.revDir
ST_ParameterVal.sameDir = u'sameDir'              # originally ST_ContinueDirection.sameDir
ST_ParameterVal.endCnv = u'endCnv'                # originally ST_Breakpoint.endCnv
ST_ParameterVal.bal = u'bal'                      # originally ST_Breakpoint.bal
ST_ParameterVal.fixed = u'fixed'                  # originally ST_Breakpoint.fixed
ST_ParameterVal.ctr_4 = u'ctr'                    # originally ST_Offset.ctr
ST_ParameterVal.off = u'off'                      # originally ST_Offset.off
ST_ParameterVal.tL_ = u'tL'                       # originally ST_HierarchyAlignment.tL
ST_ParameterVal.tR_ = u'tR'                       # originally ST_HierarchyAlignment.tR
ST_ParameterVal.tCtrCh = u'tCtrCh'                # originally ST_HierarchyAlignment.tCtrCh
ST_ParameterVal.tCtrDes = u'tCtrDes'              # originally ST_HierarchyAlignment.tCtrDes
ST_ParameterVal.bL_ = u'bL'                       # originally ST_HierarchyAlignment.bL
ST_ParameterVal.bR_ = u'bR'                       # originally ST_HierarchyAlignment.bR
ST_ParameterVal.bCtrCh = u'bCtrCh'                # originally ST_HierarchyAlignment.bCtrCh
ST_ParameterVal.bCtrDes = u'bCtrDes'              # originally ST_HierarchyAlignment.bCtrDes
ST_ParameterVal.lT = u'lT'                        # originally ST_HierarchyAlignment.lT
ST_ParameterVal.lB = u'lB'                        # originally ST_HierarchyAlignment.lB
ST_ParameterVal.lCtrCh = u'lCtrCh'                # originally ST_HierarchyAlignment.lCtrCh
ST_ParameterVal.lCtrDes = u'lCtrDes'              # originally ST_HierarchyAlignment.lCtrDes
ST_ParameterVal.rT = u'rT'                        # originally ST_HierarchyAlignment.rT
ST_ParameterVal.rB = u'rB'                        # originally ST_HierarchyAlignment.rB
ST_ParameterVal.rCtrCh = u'rCtrCh'                # originally ST_HierarchyAlignment.rCtrCh
ST_ParameterVal.rCtrDes = u'rCtrDes'              # originally ST_HierarchyAlignment.rCtrDes
ST_ParameterVal.auto_ = u'auto'                   # originally ST_ConnectorPoint.auto
ST_ParameterVal.bCtr = u'bCtr'                    # originally ST_ConnectorPoint.bCtr
ST_ParameterVal.ctr_5 = u'ctr'                    # originally ST_ConnectorPoint.ctr
ST_ParameterVal.midL = u'midL'                    # originally ST_ConnectorPoint.midL
ST_ParameterVal.midR = u'midR'                    # originally ST_ConnectorPoint.midR
ST_ParameterVal.tCtr = u'tCtr'                    # originally ST_ConnectorPoint.tCtr
ST_ParameterVal.bL_2 = u'bL'                      # originally ST_ConnectorPoint.bL
ST_ParameterVal.bR_2 = u'bR'                      # originally ST_ConnectorPoint.bR
ST_ParameterVal.tL_2 = u'tL'                      # originally ST_ConnectorPoint.tL
ST_ParameterVal.tR_2 = u'tR'                      # originally ST_ConnectorPoint.tR
ST_ParameterVal.radial = u'radial'                # originally ST_ConnectorPoint.radial
ST_ParameterVal._InitializeFacetMap(ST_ParameterVal._CF_pattern,
   ST_ParameterVal._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ParameterVal', ST_ParameterVal)

# Atomic SimpleTypeDefinition
class ST_AlgorithmType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Algorithm Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_AlgorithmType')
    _Documentation = u'Algorithm Types'
ST_AlgorithmType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AlgorithmType, enum_prefix=None)
ST_AlgorithmType.composite = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'composite')
ST_AlgorithmType.conn = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'conn')
ST_AlgorithmType.cycle = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'cycle')
ST_AlgorithmType.hierChild = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'hierChild')
ST_AlgorithmType.hierRoot = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'hierRoot')
ST_AlgorithmType.pyra = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'pyra')
ST_AlgorithmType.lin = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'lin')
ST_AlgorithmType.sp = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'sp')
ST_AlgorithmType.tx = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'tx')
ST_AlgorithmType.snake = ST_AlgorithmType._CF_enumeration.addEnumeration(unicode_value=u'snake')
ST_AlgorithmType._InitializeFacetMap(ST_AlgorithmType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_AlgorithmType', ST_AlgorithmType)

# Atomic SimpleTypeDefinition
class ST_TextUnderlineType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Underline Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextUnderlineType')
    _Documentation = u'Text Underline Types'
ST_TextUnderlineType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextUnderlineType, enum_prefix=None)
ST_TextUnderlineType.none = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TextUnderlineType.words = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'words')
ST_TextUnderlineType.sng = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'sng')
ST_TextUnderlineType.dbl = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dbl')
ST_TextUnderlineType.heavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'heavy')
ST_TextUnderlineType.dotted = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dotted')
ST_TextUnderlineType.dottedHeavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dottedHeavy')
ST_TextUnderlineType.dash = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dash')
ST_TextUnderlineType.dashHeavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dashHeavy')
ST_TextUnderlineType.dashLong = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dashLong')
ST_TextUnderlineType.dashLongHeavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dashLongHeavy')
ST_TextUnderlineType.dotDash = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dotDash')
ST_TextUnderlineType.dotDashHeavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dotDashHeavy')
ST_TextUnderlineType.dotDotDash = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dotDotDash')
ST_TextUnderlineType.dotDotDashHeavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'dotDotDashHeavy')
ST_TextUnderlineType.wavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'wavy')
ST_TextUnderlineType.wavyHeavy = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'wavyHeavy')
ST_TextUnderlineType.wavyDbl = ST_TextUnderlineType._CF_enumeration.addEnumeration(unicode_value=u'wavyDbl')
ST_TextUnderlineType._InitializeFacetMap(ST_TextUnderlineType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextUnderlineType', ST_TextUnderlineType)

# Atomic SimpleTypeDefinition
class ST_TextCapsType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Cap Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextCapsType')
    _Documentation = u'Text Cap Types'
ST_TextCapsType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextCapsType, enum_prefix=None)
ST_TextCapsType.none = ST_TextCapsType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TextCapsType.small = ST_TextCapsType._CF_enumeration.addEnumeration(unicode_value=u'small')
ST_TextCapsType.all = ST_TextCapsType._CF_enumeration.addEnumeration(unicode_value=u'all')
ST_TextCapsType._InitializeFacetMap(ST_TextCapsType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextCapsType', ST_TextCapsType)

# Atomic SimpleTypeDefinition
class ST_TextNonNegativePoint (pyxb.binding.datatypes.int):

    """Text Non-Negative Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextNonNegativePoint')
    _Documentation = u'Text Non-Negative Point'
ST_TextNonNegativePoint._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextNonNegativePoint, value=pyxb.binding.datatypes.int(0))
ST_TextNonNegativePoint._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextNonNegativePoint, value=pyxb.binding.datatypes.int(400000))
ST_TextNonNegativePoint._InitializeFacetMap(ST_TextNonNegativePoint._CF_minInclusive,
   ST_TextNonNegativePoint._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextNonNegativePoint', ST_TextNonNegativePoint)

# Atomic SimpleTypeDefinition
class ST_TextPointUnqualified (pyxb.binding.datatypes.int):

    """Text Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextPointUnqualified')
    _Documentation = u'Text Point'
ST_TextPointUnqualified._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextPointUnqualified, value=pyxb.binding.datatypes.int(-400000))
ST_TextPointUnqualified._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextPointUnqualified, value=pyxb.binding.datatypes.int(400000))
ST_TextPointUnqualified._InitializeFacetMap(ST_TextPointUnqualified._CF_minInclusive,
   ST_TextPointUnqualified._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextPointUnqualified', ST_TextPointUnqualified)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_TextPoint (pyxb.binding.basis.STD_union):

    """Text Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextPoint')
    _Documentation = u'Text Point'

    _MemberTypes = ( ST_TextPointUnqualified, _s.ST_UniversalMeasure, )
ST_TextPoint._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_TextPoint._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextPoint)
ST_TextPoint._InitializeFacetMap(ST_TextPoint._CF_pattern,
   ST_TextPoint._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextPoint', ST_TextPoint)

# Atomic SimpleTypeDefinition
class ST_TextStrikeType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Strike Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextStrikeType')
    _Documentation = u'Text Strike Type'
ST_TextStrikeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextStrikeType, enum_prefix=None)
ST_TextStrikeType.noStrike = ST_TextStrikeType._CF_enumeration.addEnumeration(unicode_value=u'noStrike')
ST_TextStrikeType.sngStrike = ST_TextStrikeType._CF_enumeration.addEnumeration(unicode_value=u'sngStrike')
ST_TextStrikeType.dblStrike = ST_TextStrikeType._CF_enumeration.addEnumeration(unicode_value=u'dblStrike')
ST_TextStrikeType._InitializeFacetMap(ST_TextStrikeType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextStrikeType', ST_TextStrikeType)

# Atomic SimpleTypeDefinition
class ST_AnimationDgmOnlyBuildType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Diagram only Animation Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_AnimationDgmOnlyBuildType')
    _Documentation = u'Diagram only Animation Types'
ST_AnimationDgmOnlyBuildType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AnimationDgmOnlyBuildType, enum_prefix=None)
ST_AnimationDgmOnlyBuildType.one = ST_AnimationDgmOnlyBuildType._CF_enumeration.addEnumeration(unicode_value=u'one')
ST_AnimationDgmOnlyBuildType.lvlOne = ST_AnimationDgmOnlyBuildType._CF_enumeration.addEnumeration(unicode_value=u'lvlOne')
ST_AnimationDgmOnlyBuildType.lvlAtOnce = ST_AnimationDgmOnlyBuildType._CF_enumeration.addEnumeration(unicode_value=u'lvlAtOnce')
ST_AnimationDgmOnlyBuildType._InitializeFacetMap(ST_AnimationDgmOnlyBuildType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_AnimationDgmOnlyBuildType', ST_AnimationDgmOnlyBuildType)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_AnimationDgmBuildType (pyxb.binding.basis.STD_union):

    """Diagram Animation Build Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_AnimationDgmBuildType')
    _Documentation = u'Diagram Animation Build Type'

    _MemberTypes = ( ST_AnimationBuildType, ST_AnimationDgmOnlyBuildType, )
ST_AnimationDgmBuildType._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_AnimationDgmBuildType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AnimationDgmBuildType)
ST_AnimationDgmBuildType.allAtOnce = u'allAtOnce' # originally ST_AnimationBuildType.allAtOnce
ST_AnimationDgmBuildType.one = u'one'             # originally ST_AnimationDgmOnlyBuildType.one
ST_AnimationDgmBuildType.lvlOne = u'lvlOne'       # originally ST_AnimationDgmOnlyBuildType.lvlOne
ST_AnimationDgmBuildType.lvlAtOnce = u'lvlAtOnce' # originally ST_AnimationDgmOnlyBuildType.lvlAtOnce
ST_AnimationDgmBuildType._InitializeFacetMap(ST_AnimationDgmBuildType._CF_pattern,
   ST_AnimationDgmBuildType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_AnimationDgmBuildType', ST_AnimationDgmBuildType)

# Atomic SimpleTypeDefinition
class ST_BevelPresetType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Bevel Presets"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_BevelPresetType')
    _Documentation = u'Bevel Presets'
ST_BevelPresetType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BevelPresetType, enum_prefix=None)
ST_BevelPresetType.relaxedInset = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'relaxedInset')
ST_BevelPresetType.circle = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'circle')
ST_BevelPresetType.slope = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'slope')
ST_BevelPresetType.cross = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'cross')
ST_BevelPresetType.angle = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'angle')
ST_BevelPresetType.softRound = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'softRound')
ST_BevelPresetType.convex = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'convex')
ST_BevelPresetType.coolSlant = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'coolSlant')
ST_BevelPresetType.divot = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'divot')
ST_BevelPresetType.riblet = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'riblet')
ST_BevelPresetType.hardEdge = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'hardEdge')
ST_BevelPresetType.artDeco = ST_BevelPresetType._CF_enumeration.addEnumeration(unicode_value=u'artDeco')
ST_BevelPresetType._InitializeFacetMap(ST_BevelPresetType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_BevelPresetType', ST_BevelPresetType)

# Atomic SimpleTypeDefinition
class ST_FOVAngle (ST_Angle):

    """Field of View Angle"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_FOVAngle')
    _Documentation = u'Field of View Angle'
ST_FOVAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_FOVAngle, value=pyxb.binding.datatypes.int(0))
ST_FOVAngle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_FOVAngle, value=pyxb.binding.datatypes.int(10800000))
ST_FOVAngle._InitializeFacetMap(ST_FOVAngle._CF_minInclusive,
   ST_FOVAngle._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_FOVAngle', ST_FOVAngle)

# Atomic SimpleTypeDefinition
class ST_PresetCameraType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Camera Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PresetCameraType')
    _Documentation = u'Preset Camera Type'
ST_PresetCameraType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PresetCameraType, enum_prefix=None)
ST_PresetCameraType.legacyObliqueTopLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueTopLeft')
ST_PresetCameraType.legacyObliqueTop = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueTop')
ST_PresetCameraType.legacyObliqueTopRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueTopRight')
ST_PresetCameraType.legacyObliqueLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueLeft')
ST_PresetCameraType.legacyObliqueFront = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueFront')
ST_PresetCameraType.legacyObliqueRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueRight')
ST_PresetCameraType.legacyObliqueBottomLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueBottomLeft')
ST_PresetCameraType.legacyObliqueBottom = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueBottom')
ST_PresetCameraType.legacyObliqueBottomRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyObliqueBottomRight')
ST_PresetCameraType.legacyPerspectiveTopLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveTopLeft')
ST_PresetCameraType.legacyPerspectiveTop = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveTop')
ST_PresetCameraType.legacyPerspectiveTopRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveTopRight')
ST_PresetCameraType.legacyPerspectiveLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveLeft')
ST_PresetCameraType.legacyPerspectiveFront = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveFront')
ST_PresetCameraType.legacyPerspectiveRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveRight')
ST_PresetCameraType.legacyPerspectiveBottomLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveBottomLeft')
ST_PresetCameraType.legacyPerspectiveBottom = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveBottom')
ST_PresetCameraType.legacyPerspectiveBottomRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'legacyPerspectiveBottomRight')
ST_PresetCameraType.orthographicFront = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'orthographicFront')
ST_PresetCameraType.isometricTopUp = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricTopUp')
ST_PresetCameraType.isometricTopDown = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricTopDown')
ST_PresetCameraType.isometricBottomUp = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricBottomUp')
ST_PresetCameraType.isometricBottomDown = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricBottomDown')
ST_PresetCameraType.isometricLeftUp = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricLeftUp')
ST_PresetCameraType.isometricLeftDown = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricLeftDown')
ST_PresetCameraType.isometricRightUp = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricRightUp')
ST_PresetCameraType.isometricRightDown = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricRightDown')
ST_PresetCameraType.isometricOffAxis1Left = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis1Left')
ST_PresetCameraType.isometricOffAxis1Right = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis1Right')
ST_PresetCameraType.isometricOffAxis1Top = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis1Top')
ST_PresetCameraType.isometricOffAxis2Left = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis2Left')
ST_PresetCameraType.isometricOffAxis2Right = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis2Right')
ST_PresetCameraType.isometricOffAxis2Top = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis2Top')
ST_PresetCameraType.isometricOffAxis3Left = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis3Left')
ST_PresetCameraType.isometricOffAxis3Right = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis3Right')
ST_PresetCameraType.isometricOffAxis3Bottom = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis3Bottom')
ST_PresetCameraType.isometricOffAxis4Left = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis4Left')
ST_PresetCameraType.isometricOffAxis4Right = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis4Right')
ST_PresetCameraType.isometricOffAxis4Bottom = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'isometricOffAxis4Bottom')
ST_PresetCameraType.obliqueTopLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueTopLeft')
ST_PresetCameraType.obliqueTop = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueTop')
ST_PresetCameraType.obliqueTopRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueTopRight')
ST_PresetCameraType.obliqueLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueLeft')
ST_PresetCameraType.obliqueRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueRight')
ST_PresetCameraType.obliqueBottomLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueBottomLeft')
ST_PresetCameraType.obliqueBottom = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueBottom')
ST_PresetCameraType.obliqueBottomRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'obliqueBottomRight')
ST_PresetCameraType.perspectiveFront = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveFront')
ST_PresetCameraType.perspectiveLeft = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveLeft')
ST_PresetCameraType.perspectiveRight = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveRight')
ST_PresetCameraType.perspectiveAbove = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveAbove')
ST_PresetCameraType.perspectiveBelow = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveBelow')
ST_PresetCameraType.perspectiveAboveLeftFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveAboveLeftFacing')
ST_PresetCameraType.perspectiveAboveRightFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveAboveRightFacing')
ST_PresetCameraType.perspectiveContrastingLeftFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveContrastingLeftFacing')
ST_PresetCameraType.perspectiveContrastingRightFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveContrastingRightFacing')
ST_PresetCameraType.perspectiveHeroicLeftFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveHeroicLeftFacing')
ST_PresetCameraType.perspectiveHeroicRightFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveHeroicRightFacing')
ST_PresetCameraType.perspectiveHeroicExtremeLeftFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveHeroicExtremeLeftFacing')
ST_PresetCameraType.perspectiveHeroicExtremeRightFacing = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveHeroicExtremeRightFacing')
ST_PresetCameraType.perspectiveRelaxed = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveRelaxed')
ST_PresetCameraType.perspectiveRelaxedModerately = ST_PresetCameraType._CF_enumeration.addEnumeration(unicode_value=u'perspectiveRelaxedModerately')
ST_PresetCameraType._InitializeFacetMap(ST_PresetCameraType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PresetCameraType', ST_PresetCameraType)

# Atomic SimpleTypeDefinition
class ST_FunctionType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Function Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_FunctionType')
    _Documentation = u'Function Type'
ST_FunctionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FunctionType, enum_prefix=None)
ST_FunctionType.cnt = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'cnt')
ST_FunctionType.pos = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'pos')
ST_FunctionType.revPos = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'revPos')
ST_FunctionType.posEven = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'posEven')
ST_FunctionType.posOdd = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'posOdd')
ST_FunctionType.var = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'var')
ST_FunctionType.depth = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'depth')
ST_FunctionType.maxDepth = ST_FunctionType._CF_enumeration.addEnumeration(unicode_value=u'maxDepth')
ST_FunctionType._InitializeFacetMap(ST_FunctionType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_FunctionType', ST_FunctionType)

# Atomic SimpleTypeDefinition
class ST_FunctionOperator (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Function Operator"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_FunctionOperator')
    _Documentation = u'Function Operator'
ST_FunctionOperator._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FunctionOperator, enum_prefix=None)
ST_FunctionOperator.equ = ST_FunctionOperator._CF_enumeration.addEnumeration(unicode_value=u'equ')
ST_FunctionOperator.neq = ST_FunctionOperator._CF_enumeration.addEnumeration(unicode_value=u'neq')
ST_FunctionOperator.gt = ST_FunctionOperator._CF_enumeration.addEnumeration(unicode_value=u'gt')
ST_FunctionOperator.lt = ST_FunctionOperator._CF_enumeration.addEnumeration(unicode_value=u'lt')
ST_FunctionOperator.gte = ST_FunctionOperator._CF_enumeration.addEnumeration(unicode_value=u'gte')
ST_FunctionOperator.lte = ST_FunctionOperator._CF_enumeration.addEnumeration(unicode_value=u'lte')
ST_FunctionOperator._InitializeFacetMap(ST_FunctionOperator._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_FunctionOperator', ST_FunctionOperator)

# Atomic SimpleTypeDefinition
class ST_ResizeHandlesStr (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Resize Handle"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_ResizeHandlesStr')
    _Documentation = u'Resize Handle'
ST_ResizeHandlesStr._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ResizeHandlesStr, enum_prefix=None)
ST_ResizeHandlesStr.exact = ST_ResizeHandlesStr._CF_enumeration.addEnumeration(unicode_value=u'exact')
ST_ResizeHandlesStr.rel = ST_ResizeHandlesStr._CF_enumeration.addEnumeration(unicode_value=u'rel')
ST_ResizeHandlesStr._InitializeFacetMap(ST_ResizeHandlesStr._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_ResizeHandlesStr', ST_ResizeHandlesStr)

# Atomic SimpleTypeDefinition
class ST_AnimOneStr (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """One by One Animation Value Definition"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_AnimOneStr')
    _Documentation = u'One by One Animation Value Definition'
ST_AnimOneStr._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AnimOneStr, enum_prefix=None)
ST_AnimOneStr.none = ST_AnimOneStr._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_AnimOneStr.one = ST_AnimOneStr._CF_enumeration.addEnumeration(unicode_value=u'one')
ST_AnimOneStr.branch = ST_AnimOneStr._CF_enumeration.addEnumeration(unicode_value=u'branch')
ST_AnimOneStr._InitializeFacetMap(ST_AnimOneStr._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_AnimOneStr', ST_AnimOneStr)

# Atomic SimpleTypeDefinition
class ST_HierBranchStyle (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Hierarchy Branch Style Definition"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_HierBranchStyle')
    _Documentation = u'Hierarchy Branch Style Definition'
ST_HierBranchStyle._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_HierBranchStyle, enum_prefix=None)
ST_HierBranchStyle.l = ST_HierBranchStyle._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_HierBranchStyle.r = ST_HierBranchStyle._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_HierBranchStyle.hang = ST_HierBranchStyle._CF_enumeration.addEnumeration(unicode_value=u'hang')
ST_HierBranchStyle.std = ST_HierBranchStyle._CF_enumeration.addEnumeration(unicode_value=u'std')
ST_HierBranchStyle.init = ST_HierBranchStyle._CF_enumeration.addEnumeration(unicode_value=u'init')
ST_HierBranchStyle._InitializeFacetMap(ST_HierBranchStyle._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_HierBranchStyle', ST_HierBranchStyle)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_FunctionValue (pyxb.binding.basis.STD_union):

    """Function Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_FunctionValue')
    _Documentation = u'Function Value'

    _MemberTypes = ( pyxb.binding.datatypes.int, pyxb.binding.datatypes.boolean, ST_Direction, ST_HierBranchStyle, ST_AnimOneStr, ST_AnimLvlStr, ST_ResizeHandlesStr, )
ST_FunctionValue._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_FunctionValue._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FunctionValue)
ST_FunctionValue.norm = u'norm'                   # originally ST_Direction.norm
ST_FunctionValue.rev = u'rev'                     # originally ST_Direction.rev
ST_FunctionValue.l = u'l'                         # originally ST_HierBranchStyle.l
ST_FunctionValue.r = u'r'                         # originally ST_HierBranchStyle.r
ST_FunctionValue.hang = u'hang'                   # originally ST_HierBranchStyle.hang
ST_FunctionValue.std = u'std'                     # originally ST_HierBranchStyle.std
ST_FunctionValue.init = u'init'                   # originally ST_HierBranchStyle.init
ST_FunctionValue.none = u'none'                   # originally ST_AnimOneStr.none
ST_FunctionValue.one = u'one'                     # originally ST_AnimOneStr.one
ST_FunctionValue.branch = u'branch'               # originally ST_AnimOneStr.branch
ST_FunctionValue.none_ = u'none'                  # originally ST_AnimLvlStr.none
ST_FunctionValue.lvl = u'lvl'                     # originally ST_AnimLvlStr.lvl
ST_FunctionValue.ctr = u'ctr'                     # originally ST_AnimLvlStr.ctr
ST_FunctionValue.exact = u'exact'                 # originally ST_ResizeHandlesStr.exact
ST_FunctionValue.rel = u'rel'                     # originally ST_ResizeHandlesStr.rel
ST_FunctionValue._InitializeFacetMap(ST_FunctionValue._CF_pattern,
   ST_FunctionValue._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_FunctionValue', ST_FunctionValue)

# Atomic SimpleTypeDefinition
class ST_VariableType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Variable Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_VariableType')
    _Documentation = u'Variable Type'
ST_VariableType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_VariableType, enum_prefix=None)
ST_VariableType.none = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_VariableType.orgChart = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'orgChart')
ST_VariableType.chMax = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'chMax')
ST_VariableType.chPref = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'chPref')
ST_VariableType.bulEnabled = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'bulEnabled')
ST_VariableType.dir = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'dir')
ST_VariableType.hierBranch = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'hierBranch')
ST_VariableType.animOne = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'animOne')
ST_VariableType.animLvl = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'animLvl')
ST_VariableType.resizeHandles = ST_VariableType._CF_enumeration.addEnumeration(unicode_value=u'resizeHandles')
ST_VariableType._InitializeFacetMap(ST_VariableType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_VariableType', ST_VariableType)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_FunctionArgument (pyxb.binding.basis.STD_union):

    """Function Argument"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_FunctionArgument')
    _Documentation = u'Function Argument'

    _MemberTypes = ( ST_VariableType, )
ST_FunctionArgument._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_FunctionArgument._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FunctionArgument)
ST_FunctionArgument.none = u'none'                # originally ST_VariableType.none
ST_FunctionArgument.orgChart = u'orgChart'        # originally ST_VariableType.orgChart
ST_FunctionArgument.chMax = u'chMax'              # originally ST_VariableType.chMax
ST_FunctionArgument.chPref = u'chPref'            # originally ST_VariableType.chPref
ST_FunctionArgument.bulEnabled = u'bulEnabled'    # originally ST_VariableType.bulEnabled
ST_FunctionArgument.dir = u'dir'                  # originally ST_VariableType.dir
ST_FunctionArgument.hierBranch = u'hierBranch'    # originally ST_VariableType.hierBranch
ST_FunctionArgument.animOne = u'animOne'          # originally ST_VariableType.animOne
ST_FunctionArgument.animLvl = u'animLvl'          # originally ST_VariableType.animLvl
ST_FunctionArgument.resizeHandles = u'resizeHandles'# originally ST_VariableType.resizeHandles
ST_FunctionArgument._InitializeFacetMap(ST_FunctionArgument._CF_pattern,
   ST_FunctionArgument._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_FunctionArgument', ST_FunctionArgument)

# Atomic SimpleTypeDefinition
class ST_TextShapeType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Text Shape Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextShapeType')
    _Documentation = u'Preset Text Shape Types'
ST_TextShapeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextShapeType, enum_prefix=None)
ST_TextShapeType.textNoShape = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textNoShape')
ST_TextShapeType.textPlain = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textPlain')
ST_TextShapeType.textStop = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textStop')
ST_TextShapeType.textTriangle = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textTriangle')
ST_TextShapeType.textTriangleInverted = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textTriangleInverted')
ST_TextShapeType.textChevron = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textChevron')
ST_TextShapeType.textChevronInverted = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textChevronInverted')
ST_TextShapeType.textRingInside = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textRingInside')
ST_TextShapeType.textRingOutside = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textRingOutside')
ST_TextShapeType.textArchUp = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textArchUp')
ST_TextShapeType.textArchDown = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textArchDown')
ST_TextShapeType.textCircle = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCircle')
ST_TextShapeType.textButton = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textButton')
ST_TextShapeType.textArchUpPour = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textArchUpPour')
ST_TextShapeType.textArchDownPour = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textArchDownPour')
ST_TextShapeType.textCirclePour = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCirclePour')
ST_TextShapeType.textButtonPour = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textButtonPour')
ST_TextShapeType.textCurveUp = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCurveUp')
ST_TextShapeType.textCurveDown = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCurveDown')
ST_TextShapeType.textCanUp = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCanUp')
ST_TextShapeType.textCanDown = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCanDown')
ST_TextShapeType.textWave1 = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textWave1')
ST_TextShapeType.textWave2 = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textWave2')
ST_TextShapeType.textDoubleWave1 = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textDoubleWave1')
ST_TextShapeType.textWave4 = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textWave4')
ST_TextShapeType.textInflate = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textInflate')
ST_TextShapeType.textDeflate = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textDeflate')
ST_TextShapeType.textInflateBottom = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textInflateBottom')
ST_TextShapeType.textDeflateBottom = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textDeflateBottom')
ST_TextShapeType.textInflateTop = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textInflateTop')
ST_TextShapeType.textDeflateTop = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textDeflateTop')
ST_TextShapeType.textDeflateInflate = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textDeflateInflate')
ST_TextShapeType.textDeflateInflateDeflate = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textDeflateInflateDeflate')
ST_TextShapeType.textFadeRight = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textFadeRight')
ST_TextShapeType.textFadeLeft = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textFadeLeft')
ST_TextShapeType.textFadeUp = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textFadeUp')
ST_TextShapeType.textFadeDown = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textFadeDown')
ST_TextShapeType.textSlantUp = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textSlantUp')
ST_TextShapeType.textSlantDown = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textSlantDown')
ST_TextShapeType.textCascadeUp = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCascadeUp')
ST_TextShapeType.textCascadeDown = ST_TextShapeType._CF_enumeration.addEnumeration(unicode_value=u'textCascadeDown')
ST_TextShapeType._InitializeFacetMap(ST_TextShapeType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextShapeType', ST_TextShapeType)

# Atomic SimpleTypeDefinition
class ST_ChartBuildStep (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Chart Animation Build Step"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_ChartBuildStep')
    _Documentation = u'Chart Animation Build Step'
ST_ChartBuildStep._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ChartBuildStep, enum_prefix=None)
ST_ChartBuildStep.category = ST_ChartBuildStep._CF_enumeration.addEnumeration(unicode_value=u'category')
ST_ChartBuildStep.ptInCategory = ST_ChartBuildStep._CF_enumeration.addEnumeration(unicode_value=u'ptInCategory')
ST_ChartBuildStep.series = ST_ChartBuildStep._CF_enumeration.addEnumeration(unicode_value=u'series')
ST_ChartBuildStep.ptInSeries = ST_ChartBuildStep._CF_enumeration.addEnumeration(unicode_value=u'ptInSeries')
ST_ChartBuildStep.allPts = ST_ChartBuildStep._CF_enumeration.addEnumeration(unicode_value=u'allPts')
ST_ChartBuildStep.gridLegend = ST_ChartBuildStep._CF_enumeration.addEnumeration(unicode_value=u'gridLegend')
ST_ChartBuildStep._InitializeFacetMap(ST_ChartBuildStep._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_ChartBuildStep', ST_ChartBuildStep)

# Atomic SimpleTypeDefinition
class ST_PtType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Point Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_PtType')
    _Documentation = u'Point Type'
ST_PtType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PtType, enum_prefix=None)
ST_PtType.node = ST_PtType._CF_enumeration.addEnumeration(unicode_value=u'node')
ST_PtType.asst = ST_PtType._CF_enumeration.addEnumeration(unicode_value=u'asst')
ST_PtType.doc = ST_PtType._CF_enumeration.addEnumeration(unicode_value=u'doc')
ST_PtType.pres = ST_PtType._CF_enumeration.addEnumeration(unicode_value=u'pres')
ST_PtType.parTrans = ST_PtType._CF_enumeration.addEnumeration(unicode_value=u'parTrans')
ST_PtType.sibTrans = ST_PtType._CF_enumeration.addEnumeration(unicode_value=u'sibTrans')
ST_PtType._InitializeFacetMap(ST_PtType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_PtType', ST_PtType)

# Atomic SimpleTypeDefinition
class ST_TextSpacingPoint (pyxb.binding.datatypes.int):

    """Text Spacing Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextSpacingPoint')
    _Documentation = u'Text Spacing Point'
ST_TextSpacingPoint._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextSpacingPoint, value=pyxb.binding.datatypes.int(0))
ST_TextSpacingPoint._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextSpacingPoint, value=pyxb.binding.datatypes.int(158400))
ST_TextSpacingPoint._InitializeFacetMap(ST_TextSpacingPoint._CF_minInclusive,
   ST_TextSpacingPoint._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextSpacingPoint', ST_TextSpacingPoint)

# Atomic SimpleTypeDefinition
class ST_Index1 (pyxb.binding.datatypes.unsignedInt):

    """1-Based Index"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_Index1')
    _Documentation = u'1-Based Index'
ST_Index1._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_Index1, value=pyxb.binding.datatypes.unsignedInt(1L))
ST_Index1._InitializeFacetMap(ST_Index1._CF_minInclusive)
_Namespace.addCategoryObject('typeBinding', u'ST_Index1', ST_Index1)

# Atomic SimpleTypeDefinition
class ST_PresetShadowVal (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Preset Shadow Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PresetShadowVal')
    _Documentation = u'Preset Shadow Type'
ST_PresetShadowVal._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PresetShadowVal, enum_prefix=None)
ST_PresetShadowVal.shdw1 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw1')
ST_PresetShadowVal.shdw2 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw2')
ST_PresetShadowVal.shdw3 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw3')
ST_PresetShadowVal.shdw4 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw4')
ST_PresetShadowVal.shdw5 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw5')
ST_PresetShadowVal.shdw6 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw6')
ST_PresetShadowVal.shdw7 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw7')
ST_PresetShadowVal.shdw8 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw8')
ST_PresetShadowVal.shdw9 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw9')
ST_PresetShadowVal.shdw10 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw10')
ST_PresetShadowVal.shdw11 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw11')
ST_PresetShadowVal.shdw12 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw12')
ST_PresetShadowVal.shdw13 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw13')
ST_PresetShadowVal.shdw14 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw14')
ST_PresetShadowVal.shdw15 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw15')
ST_PresetShadowVal.shdw16 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw16')
ST_PresetShadowVal.shdw17 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw17')
ST_PresetShadowVal.shdw18 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw18')
ST_PresetShadowVal.shdw19 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw19')
ST_PresetShadowVal.shdw20 = ST_PresetShadowVal._CF_enumeration.addEnumeration(unicode_value=u'shdw20')
ST_PresetShadowVal._InitializeFacetMap(ST_PresetShadowVal._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PresetShadowVal', ST_PresetShadowVal)

# Atomic SimpleTypeDefinition
class ST_TextTabAlignType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Tab Alignment Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextTabAlignType')
    _Documentation = u'Text Tab Alignment Types'
ST_TextTabAlignType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextTabAlignType, enum_prefix=None)
ST_TextTabAlignType.l = ST_TextTabAlignType._CF_enumeration.addEnumeration(unicode_value=u'l')
ST_TextTabAlignType.ctr = ST_TextTabAlignType._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_TextTabAlignType.r = ST_TextTabAlignType._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_TextTabAlignType.dec = ST_TextTabAlignType._CF_enumeration.addEnumeration(unicode_value=u'dec')
ST_TextTabAlignType._InitializeFacetMap(ST_TextTabAlignType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextTabAlignType', ST_TextTabAlignType)

# Atomic SimpleTypeDefinition
class ST_GeomGuideFormula (pyxb.binding.datatypes.string):

    """Geometry Guide Formula Properties"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_GeomGuideFormula')
    _Documentation = u'Geometry Guide Formula Properties'
ST_GeomGuideFormula._InitializeFacetMap()
_Namespace_a.addCategoryObject('typeBinding', u'ST_GeomGuideFormula', ST_GeomGuideFormula)

# Atomic SimpleTypeDefinition
class ST_CxnType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Connection Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ST_CxnType')
    _Documentation = u'Connection Type'
ST_CxnType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CxnType, enum_prefix=None)
ST_CxnType.parOf = ST_CxnType._CF_enumeration.addEnumeration(unicode_value=u'parOf')
ST_CxnType.presOf = ST_CxnType._CF_enumeration.addEnumeration(unicode_value=u'presOf')
ST_CxnType.presParOf = ST_CxnType._CF_enumeration.addEnumeration(unicode_value=u'presParOf')
ST_CxnType.unknownRelationship = ST_CxnType._CF_enumeration.addEnumeration(unicode_value=u'unknownRelationship')
ST_CxnType._InitializeFacetMap(ST_CxnType._CF_enumeration)
_Namespace.addCategoryObject('typeBinding', u'ST_CxnType', ST_CxnType)

# Atomic SimpleTypeDefinition
class ST_DgmBuildStep (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Diagram Animation Build Steps"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_DgmBuildStep')
    _Documentation = u'Diagram Animation Build Steps'
ST_DgmBuildStep._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DgmBuildStep, enum_prefix=None)
ST_DgmBuildStep.sp = ST_DgmBuildStep._CF_enumeration.addEnumeration(unicode_value=u'sp')
ST_DgmBuildStep.bg = ST_DgmBuildStep._CF_enumeration.addEnumeration(unicode_value=u'bg')
ST_DgmBuildStep._InitializeFacetMap(ST_DgmBuildStep._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_DgmBuildStep', ST_DgmBuildStep)

# Atomic SimpleTypeDefinition
class ST_TextHorzOverflowType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Horizontal Overflow Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextHorzOverflowType')
    _Documentation = u'Text Horizontal Overflow Types'
ST_TextHorzOverflowType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextHorzOverflowType, enum_prefix=None)
ST_TextHorzOverflowType.overflow = ST_TextHorzOverflowType._CF_enumeration.addEnumeration(unicode_value=u'overflow')
ST_TextHorzOverflowType.clip = ST_TextHorzOverflowType._CF_enumeration.addEnumeration(unicode_value=u'clip')
ST_TextHorzOverflowType._InitializeFacetMap(ST_TextHorzOverflowType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextHorzOverflowType', ST_TextHorzOverflowType)

# Atomic SimpleTypeDefinition
class ST_TextVerticalType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Vertical Text Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextVerticalType')
    _Documentation = u'Vertical Text Types'
ST_TextVerticalType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextVerticalType, enum_prefix=None)
ST_TextVerticalType.horz = ST_TextVerticalType._CF_enumeration.addEnumeration(unicode_value=u'horz')
ST_TextVerticalType.vert = ST_TextVerticalType._CF_enumeration.addEnumeration(unicode_value=u'vert')
ST_TextVerticalType.vert270 = ST_TextVerticalType._CF_enumeration.addEnumeration(unicode_value=u'vert270')
ST_TextVerticalType.wordArtVert = ST_TextVerticalType._CF_enumeration.addEnumeration(unicode_value=u'wordArtVert')
ST_TextVerticalType.eaVert = ST_TextVerticalType._CF_enumeration.addEnumeration(unicode_value=u'eaVert')
ST_TextVerticalType.mongolianVert = ST_TextVerticalType._CF_enumeration.addEnumeration(unicode_value=u'mongolianVert')
ST_TextVerticalType.wordArtVertRtl = ST_TextVerticalType._CF_enumeration.addEnumeration(unicode_value=u'wordArtVertRtl')
ST_TextVerticalType._InitializeFacetMap(ST_TextVerticalType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextVerticalType', ST_TextVerticalType)

# Atomic SimpleTypeDefinition
class ST_TextWrappingType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Wrapping Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextWrappingType')
    _Documentation = u'Text Wrapping Types'
ST_TextWrappingType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextWrappingType, enum_prefix=None)
ST_TextWrappingType.none = ST_TextWrappingType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TextWrappingType.square = ST_TextWrappingType._CF_enumeration.addEnumeration(unicode_value=u'square')
ST_TextWrappingType._InitializeFacetMap(ST_TextWrappingType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextWrappingType', ST_TextWrappingType)

# Atomic SimpleTypeDefinition
class ST_TextColumnCount (pyxb.binding.datatypes.int):

    """Text Column Count"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextColumnCount')
    _Documentation = u'Text Column Count'
ST_TextColumnCount._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextColumnCount, value=pyxb.binding.datatypes.int(1))
ST_TextColumnCount._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextColumnCount, value=pyxb.binding.datatypes.int(16))
ST_TextColumnCount._InitializeFacetMap(ST_TextColumnCount._CF_minInclusive,
   ST_TextColumnCount._CF_maxInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextColumnCount', ST_TextColumnCount)

# Atomic SimpleTypeDefinition
class ST_TextAnchoringType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Anchoring Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextAnchoringType')
    _Documentation = u'Text Anchoring Types'
ST_TextAnchoringType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextAnchoringType, enum_prefix=None)
ST_TextAnchoringType.t = ST_TextAnchoringType._CF_enumeration.addEnumeration(unicode_value=u't')
ST_TextAnchoringType.ctr = ST_TextAnchoringType._CF_enumeration.addEnumeration(unicode_value=u'ctr')
ST_TextAnchoringType.b = ST_TextAnchoringType._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_TextAnchoringType.just = ST_TextAnchoringType._CF_enumeration.addEnumeration(unicode_value=u'just')
ST_TextAnchoringType.dist = ST_TextAnchoringType._CF_enumeration.addEnumeration(unicode_value=u'dist')
ST_TextAnchoringType._InitializeFacetMap(ST_TextAnchoringType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextAnchoringType', ST_TextAnchoringType)

# Atomic SimpleTypeDefinition
class ST_PositiveCoordinate32 (ST_Coordinate32Unqualified):

    """Positive Coordinate Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_PositiveCoordinate32')
    _Documentation = u'Positive Coordinate Point'
ST_PositiveCoordinate32._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_PositiveCoordinate32, value=pyxb.binding.datatypes.int(0))
ST_PositiveCoordinate32._InitializeFacetMap(ST_PositiveCoordinate32._CF_minInclusive)
_Namespace_a.addCategoryObject('typeBinding', u'ST_PositiveCoordinate32', ST_PositiveCoordinate32)

# Atomic SimpleTypeDefinition
class ST_TextVertOverflowType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Text Vertical Overflow"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'ST_TextVertOverflowType')
    _Documentation = u'Text Vertical Overflow'
ST_TextVertOverflowType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextVertOverflowType, enum_prefix=None)
ST_TextVertOverflowType.overflow = ST_TextVertOverflowType._CF_enumeration.addEnumeration(unicode_value=u'overflow')
ST_TextVertOverflowType.ellipsis = ST_TextVertOverflowType._CF_enumeration.addEnumeration(unicode_value=u'ellipsis')
ST_TextVertOverflowType.clip = ST_TextVertOverflowType._CF_enumeration.addEnumeration(unicode_value=u'clip')
ST_TextVertOverflowType._InitializeFacetMap(ST_TextVertOverflowType._CF_enumeration)
_Namespace_a.addCategoryObject('typeBinding', u'ST_TextVertOverflowType', ST_TextVertOverflowType)

# Complex type CT_SampleData with content type ELEMENT_ONLY
class CT_SampleData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_SampleData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}dataModel uses Python identifier dataModel
    __dataModel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'dataModel'), 'dataModel', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SampleData_httpschemas_openxmlformats_orgdrawingml2006diagramdataModel', False)

    
    dataModel = property(__dataModel.value, __dataModel.set, None, u'Data Model')

    
    # Attribute useDef uses Python identifier useDef
    __useDef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'useDef'), 'useDef', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SampleData_useDef', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    useDef = property(__useDef.value, __useDef.set, None, u'Use Default')


    _ElementMap = {
        __dataModel.name() : __dataModel
    }
    _AttributeMap = {
        __useDef.name() : __useDef
    }
_Namespace.addCategoryObject('typeBinding', u'CT_SampleData', CT_SampleData)


# Complex type CT_ThemeableLineStyle with content type ELEMENT_ONLY
class CT_ThemeableLineStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ThemeableLineStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ln uses Python identifier ln
    __ln = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), 'ln', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ThemeableLineStyle_httpschemas_openxmlformats_orgdrawingml2006mainln', False)

    
    ln = property(__ln.value, __ln.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnRef uses Python identifier lnRef
    __lnRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnRef'), 'lnRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ThemeableLineStyle_httpschemas_openxmlformats_orgdrawingml2006mainlnRef', False)

    
    lnRef = property(__lnRef.value, __lnRef.set, None, u'Line Reference')


    _ElementMap = {
        __ln.name() : __ln,
        __lnRef.name() : __lnRef
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ThemeableLineStyle', CT_ThemeableLineStyle)


# Complex type CT_TextShapeAutofit with content type EMPTY
class CT_TextShapeAutofit (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextShapeAutofit')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextShapeAutofit', CT_TextShapeAutofit)


# Complex type CT_Connection with content type EMPTY
class CT_Connection (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Connection')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Connection_id', ST_DrawingElementId, required=True)
    
    id = property(__id.value, __id.set, None, u'Identifier')

    
    # Attribute idx uses Python identifier idx
    __idx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'idx'), 'idx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Connection_idx', pyxb.binding.datatypes.unsignedInt, required=True)
    
    idx = property(__idx.value, __idx.set, None, u'Index')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id,
        __idx.name() : __idx
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Connection', CT_Connection)


# Complex type CT_LineEndProperties with content type EMPTY
class CT_LineEndProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LineEndProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineEndProperties_type', ST_LineEndType)
    
    type = property(__type.value, __type.set, None, u'Line Head/End Type')

    
    # Attribute len uses Python identifier len
    __len = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'len'), 'len', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineEndProperties_len', ST_LineEndLength)
    
    len = property(__len.value, __len.set, None, u'Length of Head/End')

    
    # Attribute w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'w'), 'w', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineEndProperties_w', ST_LineEndWidth)
    
    w = property(__w.value, __w.set, None, u'Width of Head/End')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __type.name() : __type,
        __len.name() : __len,
        __w.name() : __w
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LineEndProperties', CT_LineEndProperties)


# Complex type CT_Percentage with content type EMPTY
class CT_Percentage (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Percentage')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Percentage_val', ST_Percentage, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Percentage', CT_Percentage)


# Complex type CT_ComplementTransform with content type EMPTY
class CT_ComplementTransform (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ComplementTransform')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ComplementTransform', CT_ComplementTransform)


# Complex type CT_TextParagraphProperties with content type ELEMENT_ONLY
class CT_TextParagraphProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextParagraphProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buClrTx uses Python identifier buClrTx
    __buClrTx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buClrTx'), 'buClrTx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuClrTx', False)

    
    buClrTx = property(__buClrTx.value, __buClrTx.set, None, u'Follow Text')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buClr uses Python identifier buClr
    __buClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buClr'), 'buClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuClr', False)

    
    buClr = property(__buClr.value, __buClr.set, None, u'Color Specified')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buAutoNum uses Python identifier buAutoNum
    __buAutoNum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buAutoNum'), 'buAutoNum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuAutoNum', False)

    
    buAutoNum = property(__buAutoNum.value, __buAutoNum.set, None, u'Auto-Numbered Bullet')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buChar uses Python identifier buChar
    __buChar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buChar'), 'buChar', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuChar', False)

    
    buChar = property(__buChar.value, __buChar.set, None, u'Character Bullet')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}defRPr uses Python identifier defRPr
    __defRPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'defRPr'), 'defRPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006maindefRPr', False)

    
    defRPr = property(__defRPr.value, __defRPr.set, None, u'Default Text Run Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buFontTx uses Python identifier buFontTx
    __buFontTx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buFontTx'), 'buFontTx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuFontTx', False)

    
    buFontTx = property(__buFontTx.value, __buFontTx.set, None, u'Follow text')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buBlip uses Python identifier buBlip
    __buBlip = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buBlip'), 'buBlip', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuBlip', False)

    
    buBlip = property(__buBlip.value, __buBlip.set, None, u'Picture Bullet')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tabLst uses Python identifier tabLst
    __tabLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tabLst'), 'tabLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006maintabLst', False)

    
    tabLst = property(__tabLst.value, __tabLst.set, None, u'Tab List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buSzPts uses Python identifier buSzPts
    __buSzPts = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzPts'), 'buSzPts', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuSzPts', False)

    
    buSzPts = property(__buSzPts.value, __buSzPts.set, None, u'Bullet Size Points')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spcAft uses Python identifier spcAft
    __spcAft = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spcAft'), 'spcAft', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainspcAft', False)

    
    spcAft = property(__spcAft.value, __spcAft.set, None, u'Space After')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buFont uses Python identifier buFont
    __buFont = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buFont'), 'buFont', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuFont', False)

    
    buFont = property(__buFont.value, __buFont.set, None, u'Specified')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spcBef uses Python identifier spcBef
    __spcBef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spcBef'), 'spcBef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainspcBef', False)

    
    spcBef = property(__spcBef.value, __spcBef.set, None, u'Space Before')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnSpc uses Python identifier lnSpc
    __lnSpc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnSpc'), 'lnSpc', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainlnSpc', False)

    
    lnSpc = property(__lnSpc.value, __lnSpc.set, None, u'Line Spacing')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buSzTx uses Python identifier buSzTx
    __buSzTx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzTx'), 'buSzTx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuSzTx', False)

    
    buSzTx = property(__buSzTx.value, __buSzTx.set, None, u'Bullet Size Follows Text')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buSzPct uses Python identifier buSzPct
    __buSzPct = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzPct'), 'buSzPct', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuSzPct', False)

    
    buSzPct = property(__buSzPct.value, __buSzPct.set, None, u'Bullet Size Percentage')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}buNone uses Python identifier buNone
    __buNone = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'buNone'), 'buNone', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_httpschemas_openxmlformats_orgdrawingml2006mainbuNone', False)

    
    buNone = property(__buNone.value, __buNone.set, None, u'No Bullet')

    
    # Attribute defTabSz uses Python identifier defTabSz
    __defTabSz = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defTabSz'), 'defTabSz', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_defTabSz', ST_Coordinate32)
    
    defTabSz = property(__defTabSz.value, __defTabSz.set, None, u'Default Tab Size')

    
    # Attribute hangingPunct uses Python identifier hangingPunct
    __hangingPunct = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hangingPunct'), 'hangingPunct', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_hangingPunct', pyxb.binding.datatypes.boolean)
    
    hangingPunct = property(__hangingPunct.value, __hangingPunct.set, None, u'Hanging Punctuation')

    
    # Attribute marL uses Python identifier marL
    __marL = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'marL'), 'marL', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_marL', ST_TextMargin)
    
    marL = property(__marL.value, __marL.set, None, u'Left Margin')

    
    # Attribute eaLnBrk uses Python identifier eaLnBrk
    __eaLnBrk = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'eaLnBrk'), 'eaLnBrk', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_eaLnBrk', pyxb.binding.datatypes.boolean)
    
    eaLnBrk = property(__eaLnBrk.value, __eaLnBrk.set, None, u'East Asian Line Break')

    
    # Attribute rtl uses Python identifier rtl
    __rtl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rtl'), 'rtl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_rtl', pyxb.binding.datatypes.boolean)
    
    rtl = property(__rtl.value, __rtl.set, None, u'Right To Left')

    
    # Attribute marR uses Python identifier marR
    __marR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'marR'), 'marR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_marR', ST_TextMargin)
    
    marR = property(__marR.value, __marR.set, None, u'Right Margin')

    
    # Attribute indent uses Python identifier indent
    __indent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'indent'), 'indent', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_indent', ST_TextIndent)
    
    indent = property(__indent.value, __indent.set, None, u'Indent')

    
    # Attribute lvl uses Python identifier lvl
    __lvl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lvl'), 'lvl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_lvl', ST_TextIndentLevelType)
    
    lvl = property(__lvl.value, __lvl.set, None, u'Level')

    
    # Attribute fontAlgn uses Python identifier fontAlgn
    __fontAlgn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fontAlgn'), 'fontAlgn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_fontAlgn', ST_TextFontAlignType)
    
    fontAlgn = property(__fontAlgn.value, __fontAlgn.set, None, u'Font Alignment')

    
    # Attribute latinLnBrk uses Python identifier latinLnBrk
    __latinLnBrk = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'latinLnBrk'), 'latinLnBrk', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_latinLnBrk', pyxb.binding.datatypes.boolean)
    
    latinLnBrk = property(__latinLnBrk.value, __latinLnBrk.set, None, u'Latin Line Break')

    
    # Attribute algn uses Python identifier algn
    __algn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algn'), 'algn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraphProperties_algn', ST_TextAlignType)
    
    algn = property(__algn.value, __algn.set, None, u'Alignment')


    _ElementMap = {
        __buClrTx.name() : __buClrTx,
        __buClr.name() : __buClr,
        __buAutoNum.name() : __buAutoNum,
        __buChar.name() : __buChar,
        __defRPr.name() : __defRPr,
        __buFontTx.name() : __buFontTx,
        __buBlip.name() : __buBlip,
        __tabLst.name() : __tabLst,
        __buSzPts.name() : __buSzPts,
        __extLst.name() : __extLst,
        __spcAft.name() : __spcAft,
        __buFont.name() : __buFont,
        __spcBef.name() : __spcBef,
        __lnSpc.name() : __lnSpc,
        __buSzTx.name() : __buSzTx,
        __buSzPct.name() : __buSzPct,
        __buNone.name() : __buNone
    }
    _AttributeMap = {
        __defTabSz.name() : __defTabSz,
        __hangingPunct.name() : __hangingPunct,
        __marL.name() : __marL,
        __eaLnBrk.name() : __eaLnBrk,
        __rtl.name() : __rtl,
        __marR.name() : __marR,
        __indent.name() : __indent,
        __lvl.name() : __lvl,
        __fontAlgn.name() : __fontAlgn,
        __latinLnBrk.name() : __latinLnBrk,
        __algn.name() : __algn
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextParagraphProperties', CT_TextParagraphProperties)


# Complex type CT_NonVisualDrawingProps with content type ELEMENT_ONLY
class CT_NonVisualDrawingProps (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_NonVisualDrawingProps')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hlinkClick uses Python identifier hlinkClick
    __hlinkClick = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkClick'), 'hlinkClick', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_httpschemas_openxmlformats_orgdrawingml2006mainhlinkClick', False)

    
    hlinkClick = property(__hlinkClick.value, __hlinkClick.set, None, u'Drawing Element On Click Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hlinkHover uses Python identifier hlinkHover
    __hlinkHover = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkHover'), 'hlinkHover', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_httpschemas_openxmlformats_orgdrawingml2006mainhlinkHover', False)

    
    hlinkHover = property(__hlinkHover.value, __hlinkHover.set, None, u'Hyperlink for Hover')

    
    # Attribute hidden uses Python identifier hidden
    __hidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hidden'), 'hidden', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_hidden', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hidden = property(__hidden.value, __hidden.set, None, u'Hidden')

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_title', pyxb.binding.datatypes.string, unicode_default=u'')
    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Attribute descr uses Python identifier descr
    __descr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'descr'), 'descr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_descr', pyxb.binding.datatypes.string, unicode_default=u'')
    
    descr = property(__descr.value, __descr.set, None, u'Alternative Text for Object')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_name', pyxb.binding.datatypes.string, required=True)
    
    name = property(__name.value, __name.set, None, u'Name')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingProps_id', ST_DrawingElementId, required=True)
    
    id = property(__id.value, __id.set, None, u'Unique Identifier')


    _ElementMap = {
        __extLst.name() : __extLst,
        __hlinkClick.name() : __hlinkClick,
        __hlinkHover.name() : __hlinkHover
    }
    _AttributeMap = {
        __hidden.name() : __hidden,
        __title.name() : __title,
        __descr.name() : __descr,
        __name.name() : __name,
        __id.name() : __id
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_NonVisualDrawingProps', CT_NonVisualDrawingProps)


# Complex type CT_ScRgbColor with content type ELEMENT_ONLY
class CT_ScRgbColor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ScRgbColor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}comp uses Python identifier comp
    __comp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), 'comp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maincomp', True)

    
    comp = property(__comp.value, __comp.set, None, u'Complement')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenOff uses Python identifier greenOff
    __greenOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), 'greenOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingreenOff', True)

    
    greenOff = property(__greenOff.value, __greenOff.set, None, u'Green Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}inv uses Python identifier inv
    __inv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), 'inv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maininv', True)

    
    inv = property(__inv.value, __inv.set, None, u'Inverse')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}shade uses Python identifier shade
    __shade = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), 'shade', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainshade', True)

    
    shade = property(__shade.value, __shade.set, None, u'Shade')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueOff uses Python identifier blueOff
    __blueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), 'blueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainblueOff', True)

    
    blueOff = property(__blueOff.value, __blueOff.set, None, u'Blue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alpha uses Python identifier alpha
    __alpha = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), 'alpha', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainalpha', True)

    
    alpha = property(__alpha.value, __alpha.set, None, u'Alpha')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueMod uses Python identifier blueMod
    __blueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), 'blueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainblueMod', True)

    
    blueMod = property(__blueMod.value, __blueMod.set, None, u'Blue Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), 'gamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingamma', True)

    
    gamma = property(__gamma.value, __gamma.set, None, u'Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, u'Alpha Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hue uses Python identifier hue
    __hue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainhue', True)

    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueOff uses Python identifier hueOff
    __hueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), 'hueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainhueOff', True)

    
    hueOff = property(__hueOff.value, __hueOff.set, None, u'Hue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueMod uses Python identifier hueMod
    __hueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), 'hueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainhueMod', True)

    
    hueMod = property(__hueMod.value, __hueMod.set, None, u'Hue Modulate')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sat uses Python identifier sat
    __sat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), 'sat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainsat', True)

    
    sat = property(__sat.value, __sat.set, None, u'Saturation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blue uses Python identifier blue
    __blue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), 'blue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainblue', True)

    
    blue = property(__blue.value, __blue.set, None, u'Blue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satMod uses Python identifier satMod
    __satMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), 'satMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainsatMod', True)

    
    satMod = property(__satMod.value, __satMod.set, None, u'Saturation Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satOff uses Python identifier satOff
    __satOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), 'satOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainsatOff', True)

    
    satOff = property(__satOff.value, __satOff.set, None, u'Saturation Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumOff uses Python identifier lumOff
    __lumOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), 'lumOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainlumOff', True)

    
    lumOff = property(__lumOff.value, __lumOff.set, None, u'Luminance Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumMod uses Python identifier lumMod
    __lumMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), 'lumMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainlumMod', True)

    
    lumMod = property(__lumMod.value, __lumMod.set, None, u'Luminance Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}red uses Python identifier red
    __red = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), 'red', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainred', True)

    
    red = property(__red.value, __red.set, None, u'Red')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaOff uses Python identifier alphaOff
    __alphaOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), 'alphaOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaOff', True)

    
    alphaOff = property(__alphaOff.value, __alphaOff.set, None, u'Alpha Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redOff uses Python identifier redOff
    __redOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), 'redOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainredOff', True)

    
    redOff = property(__redOff.value, __redOff.set, None, u'Red Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gray uses Python identifier gray
    __gray = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), 'gray', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingray', True)

    
    gray = property(__gray.value, __gray.set, None, u'Gray')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redMod uses Python identifier redMod
    __redMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), 'redMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainredMod', True)

    
    redMod = property(__redMod.value, __redMod.set, None, u'Red Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, u'Tint')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}green uses Python identifier green
    __green = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), 'green', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingreen', True)

    
    green = property(__green.value, __green.set, None, u'Green')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}invGamma uses Python identifier invGamma
    __invGamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), 'invGamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maininvGamma', True)

    
    invGamma = property(__invGamma.value, __invGamma.set, None, u'Inverse Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenMod uses Python identifier greenMod
    __greenMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), 'greenMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingreenMod', True)

    
    greenMod = property(__greenMod.value, __greenMod.set, None, u'Green Modification')

    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_r', ST_Percentage, required=True)
    
    r = property(__r.value, __r.set, None, u'Red')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_b', ST_Percentage, required=True)
    
    b = property(__b.value, __b.set, None, u'Blue')

    
    # Attribute g uses Python identifier g
    __g = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'g'), 'g', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ScRgbColor_g', ST_Percentage, required=True)
    
    g = property(__g.value, __g.set, None, u'Green')


    _ElementMap = {
        __comp.name() : __comp,
        __greenOff.name() : __greenOff,
        __inv.name() : __inv,
        __shade.name() : __shade,
        __blueOff.name() : __blueOff,
        __alpha.name() : __alpha,
        __blueMod.name() : __blueMod,
        __gamma.name() : __gamma,
        __alphaMod.name() : __alphaMod,
        __hue.name() : __hue,
        __hueOff.name() : __hueOff,
        __hueMod.name() : __hueMod,
        __sat.name() : __sat,
        __blue.name() : __blue,
        __satMod.name() : __satMod,
        __lum.name() : __lum,
        __satOff.name() : __satOff,
        __lumOff.name() : __lumOff,
        __lumMod.name() : __lumMod,
        __red.name() : __red,
        __alphaOff.name() : __alphaOff,
        __redOff.name() : __redOff,
        __gray.name() : __gray,
        __redMod.name() : __redMod,
        __tint.name() : __tint,
        __green.name() : __green,
        __invGamma.name() : __invGamma,
        __greenMod.name() : __greenMod
    }
    _AttributeMap = {
        __r.name() : __r,
        __b.name() : __b,
        __g.name() : __g
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ScRgbColor', CT_ScRgbColor)


# Complex type CT_PositivePercentage with content type EMPTY
class CT_PositivePercentage (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PositivePercentage')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PositivePercentage_val', ST_PositivePercentage, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PositivePercentage', CT_PositivePercentage)


# Complex type CT_SystemColor with content type ELEMENT_ONLY
class CT_SystemColor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_SystemColor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alpha uses Python identifier alpha
    __alpha = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), 'alpha', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainalpha', True)

    
    alpha = property(__alpha.value, __alpha.set, None, u'Alpha')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}invGamma uses Python identifier invGamma
    __invGamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), 'invGamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maininvGamma', True)

    
    invGamma = property(__invGamma.value, __invGamma.set, None, u'Inverse Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, u'Alpha Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaOff uses Python identifier alphaOff
    __alphaOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), 'alphaOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaOff', True)

    
    alphaOff = property(__alphaOff.value, __alphaOff.set, None, u'Alpha Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hue uses Python identifier hue
    __hue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainhue', True)

    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueMod uses Python identifier blueMod
    __blueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), 'blueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainblueMod', True)

    
    blueMod = property(__blueMod.value, __blueMod.set, None, u'Blue Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueOff uses Python identifier hueOff
    __hueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), 'hueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainhueOff', True)

    
    hueOff = property(__hueOff.value, __hueOff.set, None, u'Hue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueMod uses Python identifier hueMod
    __hueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), 'hueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainhueMod', True)

    
    hueMod = property(__hueMod.value, __hueMod.set, None, u'Hue Modulate')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sat uses Python identifier sat
    __sat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), 'sat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainsat', True)

    
    sat = property(__sat.value, __sat.set, None, u'Saturation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satOff uses Python identifier satOff
    __satOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), 'satOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainsatOff', True)

    
    satOff = property(__satOff.value, __satOff.set, None, u'Saturation Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satMod uses Python identifier satMod
    __satMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), 'satMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainsatMod', True)

    
    satMod = property(__satMod.value, __satMod.set, None, u'Saturation Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), 'gamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maingamma', True)

    
    gamma = property(__gamma.value, __gamma.set, None, u'Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumOff uses Python identifier lumOff
    __lumOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), 'lumOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainlumOff', True)

    
    lumOff = property(__lumOff.value, __lumOff.set, None, u'Luminance Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenMod uses Python identifier greenMod
    __greenMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), 'greenMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maingreenMod', True)

    
    greenMod = property(__greenMod.value, __greenMod.set, None, u'Green Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}red uses Python identifier red
    __red = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), 'red', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainred', True)

    
    red = property(__red.value, __red.set, None, u'Red')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redOff uses Python identifier redOff
    __redOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), 'redOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainredOff', True)

    
    redOff = property(__redOff.value, __redOff.set, None, u'Red Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenOff uses Python identifier greenOff
    __greenOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), 'greenOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maingreenOff', True)

    
    greenOff = property(__greenOff.value, __greenOff.set, None, u'Green Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redMod uses Python identifier redMod
    __redMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), 'redMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainredMod', True)

    
    redMod = property(__redMod.value, __redMod.set, None, u'Red Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}green uses Python identifier green
    __green = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), 'green', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maingreen', True)

    
    green = property(__green.value, __green.set, None, u'Green')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blue uses Python identifier blue
    __blue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), 'blue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainblue', True)

    
    blue = property(__blue.value, __blue.set, None, u'Blue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, u'Tint')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumMod uses Python identifier lumMod
    __lumMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), 'lumMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainlumMod', True)

    
    lumMod = property(__lumMod.value, __lumMod.set, None, u'Luminance Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}shade uses Python identifier shade
    __shade = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), 'shade', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainshade', True)

    
    shade = property(__shade.value, __shade.set, None, u'Shade')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}comp uses Python identifier comp
    __comp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), 'comp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maincomp', True)

    
    comp = property(__comp.value, __comp.set, None, u'Complement')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}inv uses Python identifier inv
    __inv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), 'inv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maininv', True)

    
    inv = property(__inv.value, __inv.set, None, u'Inverse')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueOff uses Python identifier blueOff
    __blueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), 'blueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006mainblueOff', True)

    
    blueOff = property(__blueOff.value, __blueOff.set, None, u'Blue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gray uses Python identifier gray
    __gray = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), 'gray', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_httpschemas_openxmlformats_orgdrawingml2006maingray', True)

    
    gray = property(__gray.value, __gray.set, None, u'Gray')

    
    # Attribute lastClr uses Python identifier lastClr
    __lastClr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lastClr'), 'lastClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_lastClr', _s.ST_HexColorRGB)
    
    lastClr = property(__lastClr.value, __lastClr.set, None, u'Last Color')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SystemColor_val', ST_SystemColorVal, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        __alpha.name() : __alpha,
        __invGamma.name() : __invGamma,
        __alphaMod.name() : __alphaMod,
        __alphaOff.name() : __alphaOff,
        __hue.name() : __hue,
        __blueMod.name() : __blueMod,
        __hueOff.name() : __hueOff,
        __hueMod.name() : __hueMod,
        __sat.name() : __sat,
        __satOff.name() : __satOff,
        __satMod.name() : __satMod,
        __gamma.name() : __gamma,
        __lum.name() : __lum,
        __lumOff.name() : __lumOff,
        __greenMod.name() : __greenMod,
        __red.name() : __red,
        __redOff.name() : __redOff,
        __greenOff.name() : __greenOff,
        __redMod.name() : __redMod,
        __green.name() : __green,
        __blue.name() : __blue,
        __tint.name() : __tint,
        __lumMod.name() : __lumMod,
        __shade.name() : __shade,
        __comp.name() : __comp,
        __inv.name() : __inv,
        __blueOff.name() : __blueOff,
        __gray.name() : __gray
    }
    _AttributeMap = {
        __lastClr.name() : __lastClr,
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_SystemColor', CT_SystemColor)


# Complex type CT_OfficeArtExtensionList with content type ELEMENT_ONLY
class CT_OfficeArtExtensionList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_OfficeArtExtensionList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ext uses Python identifier ext
    __ext = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ext'), 'ext', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeArtExtensionList_httpschemas_openxmlformats_orgdrawingml2006mainext', True)

    
    ext = property(__ext.value, __ext.set, None, u'Extension')


    _ElementMap = {
        __ext.name() : __ext
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_OfficeArtExtensionList', CT_OfficeArtExtensionList)


# Complex type CT_EffectList with content type ELEMENT_ONLY
class CT_EffectList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EffectList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}outerShdw uses Python identifier outerShdw
    __outerShdw = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'outerShdw'), 'outerShdw', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006mainouterShdw', False)

    
    outerShdw = property(__outerShdw.value, __outerShdw.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}glow uses Python identifier glow
    __glow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'glow'), 'glow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006mainglow', False)

    
    glow = property(__glow.value, __glow.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstShdw uses Python identifier prstShdw
    __prstShdw = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstShdw'), 'prstShdw', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006mainprstShdw', False)

    
    prstShdw = property(__prstShdw.value, __prstShdw.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}innerShdw uses Python identifier innerShdw
    __innerShdw = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'innerShdw'), 'innerShdw', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006maininnerShdw', False)

    
    innerShdw = property(__innerShdw.value, __innerShdw.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}reflection uses Python identifier reflection
    __reflection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'reflection'), 'reflection', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006mainreflection', False)

    
    reflection = property(__reflection.value, __reflection.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}softEdge uses Python identifier softEdge
    __softEdge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'softEdge'), 'softEdge', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006mainsoftEdge', False)

    
    softEdge = property(__softEdge.value, __softEdge.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blur uses Python identifier blur
    __blur = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blur'), 'blur', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006mainblur', False)

    
    blur = property(__blur.value, __blur.set, None, u'Blur Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillOverlay uses Python identifier fillOverlay
    __fillOverlay = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay'), 'fillOverlay', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectList_httpschemas_openxmlformats_orgdrawingml2006mainfillOverlay', False)

    
    fillOverlay = property(__fillOverlay.value, __fillOverlay.set, None, None)


    _ElementMap = {
        __outerShdw.name() : __outerShdw,
        __glow.name() : __glow,
        __prstShdw.name() : __prstShdw,
        __innerShdw.name() : __innerShdw,
        __reflection.name() : __reflection,
        __softEdge.name() : __softEdge,
        __blur.name() : __blur,
        __fillOverlay.name() : __fillOverlay
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EffectList', CT_EffectList)


# Complex type CT_BlipFillProperties with content type ELEMENT_ONLY
class CT_BlipFillProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BlipFillProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tile uses Python identifier tile
    __tile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tile'), 'tile', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlipFillProperties_httpschemas_openxmlformats_orgdrawingml2006maintile', False)

    
    tile = property(__tile.value, __tile.set, None, u'Tile')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blip uses Python identifier blip
    __blip = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blip'), 'blip', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlipFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainblip', False)

    
    blip = property(__blip.value, __blip.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}stretch uses Python identifier stretch
    __stretch = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'stretch'), 'stretch', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlipFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainstretch', False)

    
    stretch = property(__stretch.value, __stretch.set, None, u'Stretch')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srcRect uses Python identifier srcRect
    __srcRect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srcRect'), 'srcRect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlipFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainsrcRect', False)

    
    srcRect = property(__srcRect.value, __srcRect.set, None, u'Source Rectangle')

    
    # Attribute rotWithShape uses Python identifier rotWithShape
    __rotWithShape = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rotWithShape'), 'rotWithShape', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlipFillProperties_rotWithShape', pyxb.binding.datatypes.boolean)
    
    rotWithShape = property(__rotWithShape.value, __rotWithShape.set, None, u'Rotate With Shape')

    
    # Attribute dpi uses Python identifier dpi
    __dpi = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dpi'), 'dpi', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlipFillProperties_dpi', pyxb.binding.datatypes.unsignedInt)
    
    dpi = property(__dpi.value, __dpi.set, None, u'DPI Setting')


    _ElementMap = {
        __tile.name() : __tile,
        __blip.name() : __blip,
        __stretch.name() : __stretch,
        __srcRect.name() : __srcRect
    }
    _AttributeMap = {
        __rotWithShape.name() : __rotWithShape,
        __dpi.name() : __dpi
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BlipFillProperties', CT_BlipFillProperties)


# Complex type CT_BaseStyles with content type ELEMENT_ONLY
class CT_BaseStyles (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BaseStyles')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BaseStyles_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrScheme uses Python identifier clrScheme
    __clrScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme'), 'clrScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BaseStyles_httpschemas_openxmlformats_orgdrawingml2006mainclrScheme', False)

    
    clrScheme = property(__clrScheme.value, __clrScheme.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fontScheme uses Python identifier fontScheme
    __fontScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fontScheme'), 'fontScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BaseStyles_httpschemas_openxmlformats_orgdrawingml2006mainfontScheme', False)

    
    fontScheme = property(__fontScheme.value, __fontScheme.set, None, u'Font Scheme')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fmtScheme uses Python identifier fmtScheme
    __fmtScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fmtScheme'), 'fmtScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BaseStyles_httpschemas_openxmlformats_orgdrawingml2006mainfmtScheme', False)

    
    fmtScheme = property(__fmtScheme.value, __fmtScheme.set, None, u'Format Scheme')


    _ElementMap = {
        __extLst.name() : __extLst,
        __clrScheme.name() : __clrScheme,
        __fontScheme.name() : __fontScheme,
        __fmtScheme.name() : __fmtScheme
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BaseStyles', CT_BaseStyles)


# Complex type CT_ConnectionSite with content type ELEMENT_ONLY
class CT_ConnectionSite (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ConnectionSite')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pos'), 'pos', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectionSite_httpschemas_openxmlformats_orgdrawingml2006mainpos', False)

    
    pos = property(__pos.value, __pos.set, None, u'Position')

    
    # Attribute ang uses Python identifier ang
    __ang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ang'), 'ang', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectionSite_ang', ST_AdjAngle, required=True)
    
    ang = property(__ang.value, __ang.set, None, u'Connection Site Angle')


    _ElementMap = {
        __pos.name() : __pos
    }
    _AttributeMap = {
        __ang.name() : __ang
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ConnectionSite', CT_ConnectionSite)


# Complex type CT_SRgbColor with content type ELEMENT_ONLY
class CT_SRgbColor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_SRgbColor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenMod uses Python identifier greenMod
    __greenMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), 'greenMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingreenMod', True)

    
    greenMod = property(__greenMod.value, __greenMod.set, None, u'Green Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}inv uses Python identifier inv
    __inv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), 'inv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maininv', True)

    
    inv = property(__inv.value, __inv.set, None, u'Inverse')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumMod uses Python identifier lumMod
    __lumMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), 'lumMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainlumMod', True)

    
    lumMod = property(__lumMod.value, __lumMod.set, None, u'Luminance Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}red uses Python identifier red
    __red = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), 'red', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainred', True)

    
    red = property(__red.value, __red.set, None, u'Red')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redOff uses Python identifier redOff
    __redOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), 'redOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainredOff', True)

    
    redOff = property(__redOff.value, __redOff.set, None, u'Red Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blue uses Python identifier blue
    __blue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), 'blue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainblue', True)

    
    blue = property(__blue.value, __blue.set, None, u'Blue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redMod uses Python identifier redMod
    __redMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), 'redMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainredMod', True)

    
    redMod = property(__redMod.value, __redMod.set, None, u'Red Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}green uses Python identifier green
    __green = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), 'green', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingreen', True)

    
    green = property(__green.value, __green.set, None, u'Green')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenOff uses Python identifier greenOff
    __greenOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), 'greenOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingreenOff', True)

    
    greenOff = property(__greenOff.value, __greenOff.set, None, u'Green Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alpha uses Python identifier alpha
    __alpha = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), 'alpha', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainalpha', True)

    
    alpha = property(__alpha.value, __alpha.set, None, u'Alpha')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}comp uses Python identifier comp
    __comp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), 'comp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maincomp', True)

    
    comp = property(__comp.value, __comp.set, None, u'Complement')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}shade uses Python identifier shade
    __shade = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), 'shade', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainshade', True)

    
    shade = property(__shade.value, __shade.set, None, u'Shade')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueOff uses Python identifier blueOff
    __blueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), 'blueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainblueOff', True)

    
    blueOff = property(__blueOff.value, __blueOff.set, None, u'Blue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gray uses Python identifier gray
    __gray = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), 'gray', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingray', True)

    
    gray = property(__gray.value, __gray.set, None, u'Gray')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), 'gamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maingamma', True)

    
    gamma = property(__gamma.value, __gamma.set, None, u'Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satMod uses Python identifier satMod
    __satMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), 'satMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainsatMod', True)

    
    satMod = property(__satMod.value, __satMod.set, None, u'Saturation Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}invGamma uses Python identifier invGamma
    __invGamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), 'invGamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maininvGamma', True)

    
    invGamma = property(__invGamma.value, __invGamma.set, None, u'Inverse Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, u'Alpha Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueMod uses Python identifier blueMod
    __blueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), 'blueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainblueMod', True)

    
    blueMod = property(__blueMod.value, __blueMod.set, None, u'Blue Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hue uses Python identifier hue
    __hue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainhue', True)

    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumOff uses Python identifier lumOff
    __lumOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), 'lumOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainlumOff', True)

    
    lumOff = property(__lumOff.value, __lumOff.set, None, u'Luminance Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueOff uses Python identifier hueOff
    __hueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), 'hueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainhueOff', True)

    
    hueOff = property(__hueOff.value, __hueOff.set, None, u'Hue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueMod uses Python identifier hueMod
    __hueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), 'hueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainhueMod', True)

    
    hueMod = property(__hueMod.value, __hueMod.set, None, u'Hue Modulate')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, u'Tint')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sat uses Python identifier sat
    __sat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), 'sat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainsat', True)

    
    sat = property(__sat.value, __sat.set, None, u'Saturation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satOff uses Python identifier satOff
    __satOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), 'satOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainsatOff', True)

    
    satOff = property(__satOff.value, __satOff.set, None, u'Saturation Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaOff uses Python identifier alphaOff
    __alphaOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), 'alphaOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaOff', True)

    
    alphaOff = property(__alphaOff.value, __alphaOff.set, None, u'Alpha Offset')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SRgbColor_val', _s.ST_HexColorRGB, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        __greenMod.name() : __greenMod,
        __lum.name() : __lum,
        __inv.name() : __inv,
        __lumMod.name() : __lumMod,
        __red.name() : __red,
        __redOff.name() : __redOff,
        __blue.name() : __blue,
        __redMod.name() : __redMod,
        __green.name() : __green,
        __greenOff.name() : __greenOff,
        __alpha.name() : __alpha,
        __comp.name() : __comp,
        __shade.name() : __shade,
        __blueOff.name() : __blueOff,
        __gray.name() : __gray,
        __gamma.name() : __gamma,
        __satMod.name() : __satMod,
        __invGamma.name() : __invGamma,
        __alphaMod.name() : __alphaMod,
        __blueMod.name() : __blueMod,
        __hue.name() : __hue,
        __lumOff.name() : __lumOff,
        __hueOff.name() : __hueOff,
        __hueMod.name() : __hueMod,
        __tint.name() : __tint,
        __sat.name() : __sat,
        __satOff.name() : __satOff,
        __alphaOff.name() : __alphaOff
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_SRgbColor', CT_SRgbColor)


# Complex type CT_CustomColor with content type ELEMENT_ONLY
class CT_CustomColor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_CustomColor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColor_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColor_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColor_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColor_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColor_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColor_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColor_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __hslClr.name() : __hslClr,
        __srgbClr.name() : __srgbClr,
        __sysClr.name() : __sysClr,
        __schemeClr.name() : __schemeClr,
        __scrgbClr.name() : __scrgbClr,
        __prstClr.name() : __prstClr
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_CustomColor', CT_CustomColor)


# Complex type CT_Direction with content type EMPTY
class CT_Direction (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Direction')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Direction_val', ST_Direction, unicode_default=u'norm')
    
    val = property(__val.value, __val.set, None, u'Diagram Direction Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Direction', CT_Direction)


# Complex type CT_StyleMatrixReference with content type ELEMENT_ONLY
class CT_StyleMatrixReference (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_StyleMatrixReference')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrixReference_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrixReference_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrixReference_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrixReference_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrixReference_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrixReference_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Attribute idx uses Python identifier idx
    __idx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'idx'), 'idx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrixReference_idx', ST_StyleMatrixColumnIndex, required=True)
    
    idx = property(__idx.value, __idx.set, None, u'Style Matrix Index')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __hslClr.name() : __hslClr,
        __sysClr.name() : __sysClr,
        __scrgbClr.name() : __scrgbClr,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr
    }
    _AttributeMap = {
        __idx.name() : __idx
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_StyleMatrixReference', CT_StyleMatrixReference)


# Complex type CT_Angle with content type EMPTY
class CT_Angle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Angle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Angle_val', ST_Angle, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Angle', CT_Angle)


# Complex type CT_LightRig with content type ELEMENT_ONLY
class CT_LightRig (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LightRig')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}rot uses Python identifier rot
    __rot = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'rot'), 'rot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LightRig_httpschemas_openxmlformats_orgdrawingml2006mainrot', False)

    
    rot = property(__rot.value, __rot.set, None, u'Rotation')

    
    # Attribute rig uses Python identifier rig
    __rig = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rig'), 'rig', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LightRig_rig', ST_LightRigType, required=True)
    
    rig = property(__rig.value, __rig.set, None, u'Rig Preset')

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LightRig_dir', ST_LightRigDirection, required=True)
    
    dir = property(__dir.value, __dir.set, None, u'Direction')


    _ElementMap = {
        __rot.name() : __rot
    }
    _AttributeMap = {
        __rig.name() : __rig,
        __dir.name() : __dir
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LightRig', CT_LightRig)


# Complex type CT_SolidColorFillProperties with content type ELEMENT_ONLY
class CT_SolidColorFillProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_SolidColorFillProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SolidColorFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SolidColorFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SolidColorFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SolidColorFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SolidColorFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SolidColorFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __hslClr.name() : __hslClr,
        __sysClr.name() : __sysClr,
        __scrgbClr.name() : __scrgbClr,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_SolidColorFillProperties', CT_SolidColorFillProperties)


# Complex type CT_GvmlConnector with content type ELEMENT_ONLY
class CT_GvmlConnector (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlConnector')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlConnector_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}nvCxnSpPr uses Python identifier nvCxnSpPr
    __nvCxnSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'nvCxnSpPr'), 'nvCxnSpPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlConnector_httpschemas_openxmlformats_orgdrawingml2006mainnvCxnSpPr', False)

    
    nvCxnSpPr = property(__nvCxnSpPr.value, __nvCxnSpPr.set, None, u'Non-Visual Properties for a Connection Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spPr uses Python identifier spPr
    __spPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), 'spPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlConnector_httpschemas_openxmlformats_orgdrawingml2006mainspPr', False)

    
    spPr = property(__spPr.value, __spPr.set, None, u'Visual Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), 'style', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlConnector_httpschemas_openxmlformats_orgdrawingml2006mainstyle', False)

    
    style = property(__style.value, __style.set, None, u'Shape Style')


    _ElementMap = {
        __extLst.name() : __extLst,
        __nvCxnSpPr.name() : __nvCxnSpPr,
        __spPr.name() : __spPr,
        __style.name() : __style
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlConnector', CT_GvmlConnector)


# Complex type CT_Blip with content type ELEMENT_ONLY
class CT_Blip (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Blip')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, u'Tint Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrRepl uses Python identifier clrRepl
    __clrRepl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrRepl'), 'clrRepl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainclrRepl', True)

    
    clrRepl = property(__clrRepl.value, __clrRepl.set, None, u'Solid Color Replacement')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaInv uses Python identifier alphaInv
    __alphaInv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaInv'), 'alphaInv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainalphaInv', True)

    
    alphaInv = property(__alphaInv.value, __alphaInv.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blur uses Python identifier blur
    __blur = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blur'), 'blur', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainblur', True)

    
    blur = property(__blur.value, __blur.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaModFix uses Python identifier alphaModFix
    __alphaModFix = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaModFix'), 'alphaModFix', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainalphaModFix', True)

    
    alphaModFix = property(__alphaModFix.value, __alphaModFix.set, None, u'Alpha Modulate Fixed Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}biLevel uses Python identifier biLevel
    __biLevel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'biLevel'), 'biLevel', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainbiLevel', True)

    
    biLevel = property(__biLevel.value, __biLevel.set, None, u'Bi-Level (Black/White) Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillOverlay uses Python identifier fillOverlay
    __fillOverlay = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay'), 'fillOverlay', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainfillOverlay', True)

    
    fillOverlay = property(__fillOverlay.value, __fillOverlay.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaRepl uses Python identifier alphaRepl
    __alphaRepl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaRepl'), 'alphaRepl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainalphaRepl', True)

    
    alphaRepl = property(__alphaRepl.value, __alphaRepl.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaCeiling uses Python identifier alphaCeiling
    __alphaCeiling = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaCeiling'), 'alphaCeiling', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainalphaCeiling', True)

    
    alphaCeiling = property(__alphaCeiling.value, __alphaCeiling.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grayscl uses Python identifier grayscl
    __grayscl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grayscl'), 'grayscl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006maingrayscl', True)

    
    grayscl = property(__grayscl.value, __grayscl.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaBiLevel uses Python identifier alphaBiLevel
    __alphaBiLevel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaBiLevel'), 'alphaBiLevel', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainalphaBiLevel', True)

    
    alphaBiLevel = property(__alphaBiLevel.value, __alphaBiLevel.set, None, u'Alpha Bi-Level Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hsl uses Python identifier hsl
    __hsl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hsl'), 'hsl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainhsl', True)

    
    hsl = property(__hsl.value, __hsl.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}duotone uses Python identifier duotone
    __duotone = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'duotone'), 'duotone', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainduotone', True)

    
    duotone = property(__duotone.value, __duotone.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrChange uses Python identifier clrChange
    __clrChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrChange'), 'clrChange', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainclrChange', True)

    
    clrChange = property(__clrChange.value, __clrChange.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaFloor uses Python identifier alphaFloor
    __alphaFloor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaFloor'), 'alphaFloor', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgdrawingml2006mainalphaFloor', True)

    
    alphaFloor = property(__alphaFloor.value, __alphaFloor.set, None, None)

    
    # Attribute cstate uses Python identifier cstate
    __cstate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cstate'), 'cstate', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_cstate', ST_BlipCompression, unicode_default=u'none')
    
    cstate = property(__cstate.value, __cstate.set, None, u'Compression State')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}embed uses Python identifier embed
    __embed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'embed'), 'embed', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgofficeDocument2006relationshipsembed', _r.ST_RelationshipId, unicode_default=u'')
    
    embed = property(__embed.value, __embed.set, None, u'Embedded Image Relationship Target')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}link uses Python identifier link
    __link = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'link'), 'link', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Blip_httpschemas_openxmlformats_orgofficeDocument2006relationshipslink', _r.ST_RelationshipId, unicode_default=u'')
    
    link = property(__link.value, __link.set, None, None)


    _ElementMap = {
        __tint.name() : __tint,
        __clrRepl.name() : __clrRepl,
        __alphaInv.name() : __alphaInv,
        __extLst.name() : __extLst,
        __alphaMod.name() : __alphaMod,
        __blur.name() : __blur,
        __alphaModFix.name() : __alphaModFix,
        __biLevel.name() : __biLevel,
        __fillOverlay.name() : __fillOverlay,
        __alphaRepl.name() : __alphaRepl,
        __alphaCeiling.name() : __alphaCeiling,
        __grayscl.name() : __grayscl,
        __alphaBiLevel.name() : __alphaBiLevel,
        __hsl.name() : __hsl,
        __duotone.name() : __duotone,
        __lum.name() : __lum,
        __clrChange.name() : __clrChange,
        __alphaFloor.name() : __alphaFloor
    }
    _AttributeMap = {
        __cstate.name() : __cstate,
        __embed.name() : __embed,
        __link.name() : __link
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Blip', CT_Blip)


# Complex type CT_ShapeProperties with content type ELEMENT_ONLY
class CT_ShapeProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ShapeProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sp3d uses Python identifier sp3d
    __sp3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), 'sp3d', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainsp3d', False)

    
    sp3d = property(__sp3d.value, __sp3d.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstGeom uses Python identifier prstGeom
    __prstGeom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstGeom'), 'prstGeom', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainprstGeom', False)

    
    prstGeom = property(__prstGeom.value, __prstGeom.set, None, u'Preset geometry')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scene3d uses Python identifier scene3d
    __scene3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), 'scene3d', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainscene3d', False)

    
    scene3d = property(__scene3d.value, __scene3d.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}custGeom uses Python identifier custGeom
    __custGeom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'custGeom'), 'custGeom', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maincustGeom', False)

    
    custGeom = property(__custGeom.value, __custGeom.set, None, u'Custom geometry')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}xfrm uses Python identifier xfrm
    __xfrm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), 'xfrm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainxfrm', False)

    
    xfrm = property(__xfrm.value, __xfrm.set, None, u'2D Transform for Individual Objects')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ln uses Python identifier ln
    __ln = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), 'ln', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainln', False)

    
    ln = property(__ln.value, __ln.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Attribute bwMode uses Python identifier bwMode
    __bwMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bwMode'), 'bwMode', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeProperties_bwMode', ST_BlackWhiteMode)
    
    bwMode = property(__bwMode.value, __bwMode.set, None, u'Black and White Mode')


    _ElementMap = {
        __grpFill.name() : __grpFill,
        __noFill.name() : __noFill,
        __sp3d.name() : __sp3d,
        __extLst.name() : __extLst,
        __blipFill.name() : __blipFill,
        __prstGeom.name() : __prstGeom,
        __effectLst.name() : __effectLst,
        __scene3d.name() : __scene3d,
        __custGeom.name() : __custGeom,
        __effectDag.name() : __effectDag,
        __xfrm.name() : __xfrm,
        __pattFill.name() : __pattFill,
        __ln.name() : __ln,
        __gradFill.name() : __gradFill,
        __solidFill.name() : __solidFill
    }
    _AttributeMap = {
        __bwMode.name() : __bwMode
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ShapeProperties', CT_ShapeProperties)


# Complex type CT_NoFillProperties with content type EMPTY
class CT_NoFillProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_NoFillProperties')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_NoFillProperties', CT_NoFillProperties)


# Complex type CT_TextBulletSizePoint with content type EMPTY
class CT_TextBulletSizePoint (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBulletSizePoint')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBulletSizePoint_val', ST_TextFontSize)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBulletSizePoint', CT_TextBulletSizePoint)


# Complex type CT_PositiveFixedAngle with content type EMPTY
class CT_PositiveFixedAngle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PositiveFixedAngle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PositiveFixedAngle_val', ST_PositiveFixedAngle, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PositiveFixedAngle', CT_PositiveFixedAngle)


# Complex type CT_FillEffect with content type ELEMENT_ONLY
class CT_FillEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FillEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillEffect_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillEffect_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillEffect_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillEffect_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillEffect_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillEffect_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')


    _ElementMap = {
        __solidFill.name() : __solidFill,
        __gradFill.name() : __gradFill,
        __blipFill.name() : __blipFill,
        __noFill.name() : __noFill,
        __pattFill.name() : __pattFill,
        __grpFill.name() : __grpFill
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FillEffect', CT_FillEffect)


# Complex type CT_TableGrid with content type ELEMENT_ONLY
class CT_TableGrid (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableGrid')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gridCol uses Python identifier gridCol
    __gridCol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gridCol'), 'gridCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableGrid_httpschemas_openxmlformats_orgdrawingml2006maingridCol', True)

    
    gridCol = property(__gridCol.value, __gridCol.set, None, u'Table Grid Column')


    _ElementMap = {
        __gridCol.name() : __gridCol
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableGrid', CT_TableGrid)


# Complex type CT_LuminanceEffect with content type EMPTY
class CT_LuminanceEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LuminanceEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute bright uses Python identifier bright
    __bright = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bright'), 'bright', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LuminanceEffect_bright', ST_FixedPercentage, unicode_default=u'0%')
    
    bright = property(__bright.value, __bright.set, None, u'Brightness')

    
    # Attribute contrast uses Python identifier contrast
    __contrast = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'contrast'), 'contrast', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LuminanceEffect_contrast', ST_FixedPercentage, unicode_default=u'0%')
    
    contrast = property(__contrast.value, __contrast.set, None, u'Contrast')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __bright.name() : __bright,
        __contrast.name() : __contrast
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LuminanceEffect', CT_LuminanceEffect)


# Complex type CT_AlphaOutsetEffect with content type EMPTY
class CT_AlphaOutsetEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaOutsetEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute rad uses Python identifier rad
    __rad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rad'), 'rad', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaOutsetEffect_rad', ST_Coordinate, unicode_default=u'0')
    
    rad = property(__rad.value, __rad.set, None, u'Radius')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __rad.name() : __rad
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaOutsetEffect', CT_AlphaOutsetEffect)


# Complex type CT_Path2DMoveTo with content type ELEMENT_ONLY
class CT_Path2DMoveTo (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2DMoveTo')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pt uses Python identifier pt
    __pt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), 'pt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DMoveTo_httpschemas_openxmlformats_orgdrawingml2006mainpt', False)

    
    pt = property(__pt.value, __pt.set, None, u'Move end point')


    _ElementMap = {
        __pt.name() : __pt
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2DMoveTo', CT_Path2DMoveTo)


# Complex type CT_Scene3D with content type ELEMENT_ONLY
class CT_Scene3D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Scene3D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Scene3D_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}camera uses Python identifier camera
    __camera = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'camera'), 'camera', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Scene3D_httpschemas_openxmlformats_orgdrawingml2006maincamera', False)

    
    camera = property(__camera.value, __camera.set, None, u'Camera')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lightRig uses Python identifier lightRig
    __lightRig = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lightRig'), 'lightRig', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Scene3D_httpschemas_openxmlformats_orgdrawingml2006mainlightRig', False)

    
    lightRig = property(__lightRig.value, __lightRig.set, None, u'Light Rig')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}backdrop uses Python identifier backdrop
    __backdrop = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'backdrop'), 'backdrop', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Scene3D_httpschemas_openxmlformats_orgdrawingml2006mainbackdrop', False)

    
    backdrop = property(__backdrop.value, __backdrop.set, None, u'Backdrop Plane')


    _ElementMap = {
        __extLst.name() : __extLst,
        __camera.name() : __camera,
        __lightRig.name() : __lightRig,
        __backdrop.name() : __backdrop
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Scene3D', CT_Scene3D)


# Complex type CT_HslColor with content type ELEMENT_ONLY
class CT_HslColor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_HslColor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), 'gamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maingamma', True)

    
    gamma = property(__gamma.value, __gamma.set, None, u'Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}invGamma uses Python identifier invGamma
    __invGamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), 'invGamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maininvGamma', True)

    
    invGamma = property(__invGamma.value, __invGamma.set, None, u'Inverse Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueMod uses Python identifier blueMod
    __blueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), 'blueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainblueMod', True)

    
    blueMod = property(__blueMod.value, __blueMod.set, None, u'Blue Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaOff uses Python identifier alphaOff
    __alphaOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), 'alphaOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaOff', True)

    
    alphaOff = property(__alphaOff.value, __alphaOff.set, None, u'Alpha Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hue uses Python identifier hue
    __hue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainhue', True)

    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alpha uses Python identifier alpha
    __alpha = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), 'alpha', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainalpha', True)

    
    alpha = property(__alpha.value, __alpha.set, None, u'Alpha')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueOff uses Python identifier hueOff
    __hueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), 'hueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainhueOff', True)

    
    hueOff = property(__hueOff.value, __hueOff.set, None, u'Hue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sat uses Python identifier sat
    __sat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), 'sat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainsat', True)

    
    sat = property(__sat.value, __sat.set, None, u'Saturation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satOff uses Python identifier satOff
    __satOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), 'satOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainsatOff', True)

    
    satOff = property(__satOff.value, __satOff.set, None, u'Saturation Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenMod uses Python identifier greenMod
    __greenMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), 'greenMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maingreenMod', True)

    
    greenMod = property(__greenMod.value, __greenMod.set, None, u'Green Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satMod uses Python identifier satMod
    __satMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), 'satMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainsatMod', True)

    
    satMod = property(__satMod.value, __satMod.set, None, u'Saturation Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumMod uses Python identifier lumMod
    __lumMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), 'lumMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainlumMod', True)

    
    lumMod = property(__lumMod.value, __lumMod.set, None, u'Luminance Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}red uses Python identifier red
    __red = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), 'red', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainred', True)

    
    red = property(__red.value, __red.set, None, u'Red')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blue uses Python identifier blue
    __blue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), 'blue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainblue', True)

    
    blue = property(__blue.value, __blue.set, None, u'Blue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumOff uses Python identifier lumOff
    __lumOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), 'lumOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainlumOff', True)

    
    lumOff = property(__lumOff.value, __lumOff.set, None, u'Luminance Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redOff uses Python identifier redOff
    __redOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), 'redOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainredOff', True)

    
    redOff = property(__redOff.value, __redOff.set, None, u'Red Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, u'Alpha Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redMod uses Python identifier redMod
    __redMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), 'redMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainredMod', True)

    
    redMod = property(__redMod.value, __redMod.set, None, u'Red Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}green uses Python identifier green
    __green = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), 'green', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maingreen', True)

    
    green = property(__green.value, __green.set, None, u'Green')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueMod uses Python identifier hueMod
    __hueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), 'hueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainhueMod', True)

    
    hueMod = property(__hueMod.value, __hueMod.set, None, u'Hue Modulate')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenOff uses Python identifier greenOff
    __greenOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), 'greenOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maingreenOff', True)

    
    greenOff = property(__greenOff.value, __greenOff.set, None, u'Green Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, u'Tint')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}shade uses Python identifier shade
    __shade = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), 'shade', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainshade', True)

    
    shade = property(__shade.value, __shade.set, None, u'Shade')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueOff uses Python identifier blueOff
    __blueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), 'blueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006mainblueOff', True)

    
    blueOff = property(__blueOff.value, __blueOff.set, None, u'Blue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}comp uses Python identifier comp
    __comp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), 'comp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maincomp', True)

    
    comp = property(__comp.value, __comp.set, None, u'Complement')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}inv uses Python identifier inv
    __inv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), 'inv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maininv', True)

    
    inv = property(__inv.value, __inv.set, None, u'Inverse')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gray uses Python identifier gray
    __gray = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), 'gray', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_httpschemas_openxmlformats_orgdrawingml2006maingray', True)

    
    gray = property(__gray.value, __gray.set, None, u'Gray')

    
    # Attribute hue uses Python identifier hue_
    __hue_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hue'), 'hue_', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_hue', ST_PositiveFixedAngle, required=True)
    
    hue_ = property(__hue_.value, __hue_.set, None, u'Hue')

    
    # Attribute lum uses Python identifier lum_
    __lum_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lum'), 'lum_', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_lum', ST_Percentage, required=True)
    
    lum_ = property(__lum_.value, __lum_.set, None, u'Luminance')

    
    # Attribute sat uses Python identifier sat_
    __sat_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sat'), 'sat_', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HslColor_sat', ST_Percentage, required=True)
    
    sat_ = property(__sat_.value, __sat_.set, None, u'Saturation')


    _ElementMap = {
        __gamma.name() : __gamma,
        __invGamma.name() : __invGamma,
        __blueMod.name() : __blueMod,
        __alphaOff.name() : __alphaOff,
        __hue.name() : __hue,
        __alpha.name() : __alpha,
        __hueOff.name() : __hueOff,
        __sat.name() : __sat,
        __satOff.name() : __satOff,
        __greenMod.name() : __greenMod,
        __satMod.name() : __satMod,
        __lum.name() : __lum,
        __lumMod.name() : __lumMod,
        __red.name() : __red,
        __blue.name() : __blue,
        __lumOff.name() : __lumOff,
        __redOff.name() : __redOff,
        __alphaMod.name() : __alphaMod,
        __redMod.name() : __redMod,
        __green.name() : __green,
        __hueMod.name() : __hueMod,
        __greenOff.name() : __greenOff,
        __tint.name() : __tint,
        __shade.name() : __shade,
        __blueOff.name() : __blueOff,
        __comp.name() : __comp,
        __inv.name() : __inv,
        __gray.name() : __gray
    }
    _AttributeMap = {
        __hue_.name() : __hue_,
        __lum_.name() : __lum_,
        __sat_.name() : __sat_
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_HslColor', CT_HslColor)


# Complex type CT_TextBody with content type ELEMENT_ONLY
class CT_TextBody (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBody')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'p'), 'p', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBody_httpschemas_openxmlformats_orgdrawingml2006mainp', True)

    
    p = property(__p.value, __p.set, None, u'Text Paragraphs')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bodyPr uses Python identifier bodyPr
    __bodyPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bodyPr'), 'bodyPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBody_httpschemas_openxmlformats_orgdrawingml2006mainbodyPr', False)

    
    bodyPr = property(__bodyPr.value, __bodyPr.set, None, u'Body Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lstStyle uses Python identifier lstStyle
    __lstStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lstStyle'), 'lstStyle', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBody_httpschemas_openxmlformats_orgdrawingml2006mainlstStyle', False)

    
    lstStyle = property(__lstStyle.value, __lstStyle.set, None, u'Text List Styles')


    _ElementMap = {
        __p.name() : __p,
        __bodyPr.name() : __bodyPr,
        __lstStyle.name() : __lstStyle
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBody', CT_TextBody)


# Complex type CT_FillOverlayEffect with content type ELEMENT_ONLY
class CT_FillOverlayEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FillOverlayEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillOverlayEffect_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillOverlayEffect_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillOverlayEffect_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillOverlayEffect_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillOverlayEffect_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillOverlayEffect_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Attribute blend uses Python identifier blend
    __blend = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blend'), 'blend', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillOverlayEffect_blend', ST_BlendMode, required=True)
    
    blend = property(__blend.value, __blend.set, None, u'Blend')


    _ElementMap = {
        __solidFill.name() : __solidFill,
        __blipFill.name() : __blipFill,
        __pattFill.name() : __pattFill,
        __noFill.name() : __noFill,
        __grpFill.name() : __grpFill,
        __gradFill.name() : __gradFill
    }
    _AttributeMap = {
        __blend.name() : __blend
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FillOverlayEffect', CT_FillOverlayEffect)


# Complex type CT_BlurEffect with content type EMPTY
class CT_BlurEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BlurEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute rad uses Python identifier rad
    __rad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rad'), 'rad', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlurEffect_rad', ST_PositiveCoordinate, unicode_default=u'0')
    
    rad = property(__rad.value, __rad.set, None, u'Radius')

    
    # Attribute grow uses Python identifier grow
    __grow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'grow'), 'grow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlurEffect_grow', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    grow = property(__grow.value, __grow.set, None, u'Grow Bounds')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __rad.name() : __rad,
        __grow.name() : __grow
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BlurEffect', CT_BlurEffect)


# Complex type CT_InverseGammaTransform with content type EMPTY
class CT_InverseGammaTransform (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_InverseGammaTransform')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_InverseGammaTransform', CT_InverseGammaTransform)


# Complex type CT_AlphaReplaceEffect with content type EMPTY
class CT_AlphaReplaceEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaReplaceEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute a uses Python identifier a
    __a = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'a'), 'a', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaReplaceEffect_a', ST_PositiveFixedPercentage, required=True)
    
    a = property(__a.value, __a.set, None, u'Alpha')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __a.name() : __a
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaReplaceEffect', CT_AlphaReplaceEffect)


# Complex type CT_PatternFillProperties with content type ELEMENT_ONLY
class CT_PatternFillProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PatternFillProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bgClr uses Python identifier bgClr
    __bgClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bgClr'), 'bgClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PatternFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainbgClr', False)

    
    bgClr = property(__bgClr.value, __bgClr.set, None, u'Background color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fgClr uses Python identifier fgClr
    __fgClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fgClr'), 'fgClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PatternFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainfgClr', False)

    
    fgClr = property(__fgClr.value, __fgClr.set, None, u'Foreground color')

    
    # Attribute prst uses Python identifier prst
    __prst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prst'), 'prst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PatternFillProperties_prst', ST_PresetPatternVal)
    
    prst = property(__prst.value, __prst.set, None, u'Preset Pattern')


    _ElementMap = {
        __bgClr.name() : __bgClr,
        __fgClr.name() : __fgClr
    }
    _AttributeMap = {
        __prst.name() : __prst
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PatternFillProperties', CT_PatternFillProperties)


# Complex type CT_AdjPoint2D with content type EMPTY
class CT_AdjPoint2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AdjPoint2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'y'), 'y', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AdjPoint2D_y', ST_AdjCoordinate, required=True)
    
    y = property(__y.value, __y.set, None, u'Y-Coordinate')

    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'x'), 'x', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AdjPoint2D_x', ST_AdjCoordinate, required=True)
    
    x = property(__x.value, __x.set, None, u'X-Coordinate')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __y.name() : __y,
        __x.name() : __x
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AdjPoint2D', CT_AdjPoint2D)


# Complex type CT_Choose with content type ELEMENT_ONLY
class CT_Choose (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Choose')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}else uses Python identifier else_
    __else = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'else'), 'else_', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Choose_httpschemas_openxmlformats_orgdrawingml2006diagramelse', False)

    
    else_ = property(__else.value, __else.set, None, u'Else')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}if uses Python identifier if_
    __if = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'if'), 'if_', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Choose_httpschemas_openxmlformats_orgdrawingml2006diagramif', True)

    
    if_ = property(__if.value, __if.set, None, u'If')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Choose_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __else.name() : __else,
        __if.name() : __if
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Choose', CT_Choose)


# Complex type CT_PresetColor with content type ELEMENT_ONLY
class CT_PresetColor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PresetColor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}green uses Python identifier green
    __green = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), 'green', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maingreen', True)

    
    green = property(__green.value, __green.set, None, u'Green')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, u'Tint')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}comp uses Python identifier comp
    __comp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), 'comp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maincomp', True)

    
    comp = property(__comp.value, __comp.set, None, u'Complement')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}invGamma uses Python identifier invGamma
    __invGamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), 'invGamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maininvGamma', True)

    
    invGamma = property(__invGamma.value, __invGamma.set, None, u'Inverse Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueOff uses Python identifier hueOff
    __hueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), 'hueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainhueOff', True)

    
    hueOff = property(__hueOff.value, __hueOff.set, None, u'Hue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenMod uses Python identifier greenMod
    __greenMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), 'greenMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maingreenMod', True)

    
    greenMod = property(__greenMod.value, __greenMod.set, None, u'Green Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blue uses Python identifier blue
    __blue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), 'blue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainblue', True)

    
    blue = property(__blue.value, __blue.set, None, u'Blue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}inv uses Python identifier inv
    __inv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), 'inv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maininv', True)

    
    inv = property(__inv.value, __inv.set, None, u'Inverse')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueMod uses Python identifier blueMod
    __blueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), 'blueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainblueMod', True)

    
    blueMod = property(__blueMod.value, __blueMod.set, None, u'Blue Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alpha uses Python identifier alpha
    __alpha = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), 'alpha', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainalpha', True)

    
    alpha = property(__alpha.value, __alpha.set, None, u'Alpha')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaOff uses Python identifier alphaOff
    __alphaOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), 'alphaOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaOff', True)

    
    alphaOff = property(__alphaOff.value, __alphaOff.set, None, u'Alpha Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueOff uses Python identifier blueOff
    __blueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), 'blueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainblueOff', True)

    
    blueOff = property(__blueOff.value, __blueOff.set, None, u'Blue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, u'Alpha Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hue uses Python identifier hue
    __hue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainhue', True)

    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueMod uses Python identifier hueMod
    __hueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), 'hueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainhueMod', True)

    
    hueMod = property(__hueMod.value, __hueMod.set, None, u'Hue Modulate')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gray uses Python identifier gray
    __gray = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), 'gray', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maingray', True)

    
    gray = property(__gray.value, __gray.set, None, u'Gray')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sat uses Python identifier sat
    __sat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), 'sat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainsat', True)

    
    sat = property(__sat.value, __sat.set, None, u'Saturation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redMod uses Python identifier redMod
    __redMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), 'redMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainredMod', True)

    
    redMod = property(__redMod.value, __redMod.set, None, u'Red Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satOff uses Python identifier satOff
    __satOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), 'satOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainsatOff', True)

    
    satOff = property(__satOff.value, __satOff.set, None, u'Saturation Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satMod uses Python identifier satMod
    __satMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), 'satMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainsatMod', True)

    
    satMod = property(__satMod.value, __satMod.set, None, u'Saturation Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenOff uses Python identifier greenOff
    __greenOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), 'greenOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maingreenOff', True)

    
    greenOff = property(__greenOff.value, __greenOff.set, None, u'Green Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumOff uses Python identifier lumOff
    __lumOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), 'lumOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainlumOff', True)

    
    lumOff = property(__lumOff.value, __lumOff.set, None, u'Luminance Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumMod uses Python identifier lumMod
    __lumMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), 'lumMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainlumMod', True)

    
    lumMod = property(__lumMod.value, __lumMod.set, None, u'Luminance Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}shade uses Python identifier shade
    __shade = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), 'shade', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainshade', True)

    
    shade = property(__shade.value, __shade.set, None, u'Shade')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), 'gamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006maingamma', True)

    
    gamma = property(__gamma.value, __gamma.set, None, u'Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}red uses Python identifier red
    __red = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), 'red', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainred', True)

    
    red = property(__red.value, __red.set, None, u'Red')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redOff uses Python identifier redOff
    __redOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), 'redOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_httpschemas_openxmlformats_orgdrawingml2006mainredOff', True)

    
    redOff = property(__redOff.value, __redOff.set, None, u'Red Offset')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetColor_val', ST_PresetColorVal)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        __green.name() : __green,
        __tint.name() : __tint,
        __comp.name() : __comp,
        __invGamma.name() : __invGamma,
        __hueOff.name() : __hueOff,
        __greenMod.name() : __greenMod,
        __blue.name() : __blue,
        __inv.name() : __inv,
        __blueMod.name() : __blueMod,
        __alpha.name() : __alpha,
        __alphaOff.name() : __alphaOff,
        __blueOff.name() : __blueOff,
        __alphaMod.name() : __alphaMod,
        __hue.name() : __hue,
        __hueMod.name() : __hueMod,
        __gray.name() : __gray,
        __sat.name() : __sat,
        __redMod.name() : __redMod,
        __satOff.name() : __satOff,
        __satMod.name() : __satMod,
        __lum.name() : __lum,
        __greenOff.name() : __greenOff,
        __lumOff.name() : __lumOff,
        __lumMod.name() : __lumMod,
        __shade.name() : __shade,
        __gamma.name() : __gamma,
        __red.name() : __red,
        __redOff.name() : __redOff
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PresetColor', CT_PresetColor)


# Complex type CT_FixedPercentage with content type EMPTY
class CT_FixedPercentage (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FixedPercentage')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FixedPercentage_val', ST_FixedPercentage, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FixedPercentage', CT_FixedPercentage)


# Complex type CT_Color with content type ELEMENT_ONLY
class CT_Color (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Color')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Color_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Color_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Color_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Color_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Color_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Color_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __hslClr.name() : __hslClr,
        __sysClr.name() : __sysClr,
        __schemeClr.name() : __schemeClr,
        __scrgbClr.name() : __scrgbClr,
        __prstClr.name() : __prstClr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Color', CT_Color)


# Complex type CT_SphereCoords with content type EMPTY
class CT_SphereCoords (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_SphereCoords')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lat uses Python identifier lat
    __lat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lat'), 'lat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SphereCoords_lat', ST_PositiveFixedAngle, required=True)
    
    lat = property(__lat.value, __lat.set, None, u'Latitude')

    
    # Attribute rev uses Python identifier rev
    __rev = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rev'), 'rev', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SphereCoords_rev', ST_PositiveFixedAngle, required=True)
    
    rev = property(__rev.value, __rev.set, None, u'Revolution')

    
    # Attribute lon uses Python identifier lon
    __lon = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lon'), 'lon', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SphereCoords_lon', ST_PositiveFixedAngle, required=True)
    
    lon = property(__lon.value, __lon.set, None, u'Longitude')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lat.name() : __lat,
        __rev.name() : __rev,
        __lon.name() : __lon
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_SphereCoords', CT_SphereCoords)


# Complex type CT_LineJoinBevel with content type EMPTY
class CT_LineJoinBevel (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LineJoinBevel')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LineJoinBevel', CT_LineJoinBevel)


# Complex type CT_TextNoBullet with content type EMPTY
class CT_TextNoBullet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextNoBullet')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextNoBullet', CT_TextNoBullet)


# Complex type CT_RelativeOffsetEffect with content type EMPTY
class CT_RelativeOffsetEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_RelativeOffsetEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute tx uses Python identifier tx
    __tx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tx'), 'tx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RelativeOffsetEffect_tx', ST_Percentage, unicode_default=u'0%')
    
    tx = property(__tx.value, __tx.set, None, u'Offset X')

    
    # Attribute ty uses Python identifier ty
    __ty = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ty'), 'ty', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RelativeOffsetEffect_ty', ST_Percentage, unicode_default=u'0%')
    
    ty = property(__ty.value, __ty.set, None, u'Offset Y')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __tx.name() : __tx,
        __ty.name() : __ty
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_RelativeOffsetEffect', CT_RelativeOffsetEffect)


# Complex type CT_TextFont with content type EMPTY
class CT_TextFont (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextFont')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute panose uses Python identifier panose
    __panose = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'panose'), 'panose', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextFont_panose', _s.ST_Panose)
    
    panose = property(__panose.value, __panose.set, None, u'Panose Setting')

    
    # Attribute typeface uses Python identifier typeface
    __typeface = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'typeface'), 'typeface', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextFont_typeface', ST_TextTypeface)
    
    typeface = property(__typeface.value, __typeface.set, None, u'Text Typeface')

    
    # Attribute pitchFamily uses Python identifier pitchFamily
    __pitchFamily = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pitchFamily'), 'pitchFamily', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextFont_pitchFamily', pyxb.binding.datatypes.byte, unicode_default=u'0')
    
    pitchFamily = property(__pitchFamily.value, __pitchFamily.set, None, u'Similar Font Family')

    
    # Attribute charset uses Python identifier charset
    __charset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'charset'), 'charset', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextFont_charset', pyxb.binding.datatypes.byte, unicode_default=u'1')
    
    charset = property(__charset.value, __charset.set, None, u'Similar Character Set')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __panose.name() : __panose,
        __typeface.name() : __typeface,
        __pitchFamily.name() : __pitchFamily,
        __charset.name() : __charset
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextFont', CT_TextFont)


# Complex type CT_BiLevelEffect with content type EMPTY
class CT_BiLevelEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BiLevelEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute thresh uses Python identifier thresh
    __thresh = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'thresh'), 'thresh', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BiLevelEffect_thresh', ST_PositiveFixedPercentage, required=True)
    
    thresh = property(__thresh.value, __thresh.set, None, u'Threshold')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __thresh.name() : __thresh
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BiLevelEffect', CT_BiLevelEffect)


# Complex type CT_Path2DArcTo with content type EMPTY
class CT_Path2DArcTo (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2DArcTo')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute hR uses Python identifier hR
    __hR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hR'), 'hR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DArcTo_hR', ST_AdjCoordinate, required=True)
    
    hR = property(__hR.value, __hR.set, None, u'Shape Arc Height Radius')

    
    # Attribute wR uses Python identifier wR
    __wR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'wR'), 'wR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DArcTo_wR', ST_AdjCoordinate, required=True)
    
    wR = property(__wR.value, __wR.set, None, u'Shape Arc Width Radius')

    
    # Attribute swAng uses Python identifier swAng
    __swAng = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'swAng'), 'swAng', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DArcTo_swAng', ST_AdjAngle, required=True)
    
    swAng = property(__swAng.value, __swAng.set, None, u'Shape Arc Swing Angle')

    
    # Attribute stAng uses Python identifier stAng
    __stAng = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stAng'), 'stAng', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DArcTo_stAng', ST_AdjAngle, required=True)
    
    stAng = property(__stAng.value, __stAng.set, None, u'Shape Arc Start Angle')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __hR.name() : __hR,
        __wR.name() : __wR,
        __swAng.name() : __swAng,
        __stAng.name() : __stAng
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2DArcTo', CT_Path2DArcTo)


# Complex type CT_TableStyleTextStyle with content type ELEMENT_ONLY
class CT_TableStyleTextStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableStyleTextStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}font uses Python identifier font
    __font = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'font'), 'font', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainfont', False)

    
    font = property(__font.value, __font.set, None, u'Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fontRef uses Python identifier fontRef
    __fontRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fontRef'), 'fontRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainfontRef', False)

    
    fontRef = property(__fontRef.value, __fontRef.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Attribute i uses Python identifier i
    __i = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'i'), 'i', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_i', ST_OnOffStyleType, unicode_default=u'def')
    
    i = property(__i.value, __i.set, None, u'Italic')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleTextStyle_b', ST_OnOffStyleType, unicode_default=u'def')
    
    b = property(__b.value, __b.set, None, u'Bold')


    _ElementMap = {
        __font.name() : __font,
        __srgbClr.name() : __srgbClr,
        __sysClr.name() : __sysClr,
        __hslClr.name() : __hslClr,
        __extLst.name() : __extLst,
        __fontRef.name() : __fontRef,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr,
        __scrgbClr.name() : __scrgbClr
    }
    _AttributeMap = {
        __i.name() : __i,
        __b.name() : __b
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableStyleTextStyle', CT_TableStyleTextStyle)


# Complex type CT_StyleDefinitionHeaderLst with content type ELEMENT_ONLY
class CT_StyleDefinitionHeaderLst (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_StyleDefinitionHeaderLst')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}styleDefHdr uses Python identifier styleDefHdr
    __styleDefHdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'styleDefHdr'), 'styleDefHdr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeaderLst_httpschemas_openxmlformats_orgdrawingml2006diagramstyleDefHdr', True)

    
    styleDefHdr = property(__styleDefHdr.value, __styleDefHdr.set, None, u'Style Definition Header')


    _ElementMap = {
        __styleDefHdr.name() : __styleDefHdr
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_StyleDefinitionHeaderLst', CT_StyleDefinitionHeaderLst)


# Complex type CT_PositiveFixedPercentage with content type EMPTY
class CT_PositiveFixedPercentage (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PositiveFixedPercentage')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PositiveFixedPercentage_val', ST_PositiveFixedPercentage, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PositiveFixedPercentage', CT_PositiveFixedPercentage)


# Complex type CT_Shape3D with content type ELEMENT_ONLY
class CT_Shape3D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Shape3D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bevelT uses Python identifier bevelT
    __bevelT = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bevelT'), 'bevelT', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_httpschemas_openxmlformats_orgdrawingml2006mainbevelT', False)

    
    bevelT = property(__bevelT.value, __bevelT.set, None, u'Top Bevel')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}contourClr uses Python identifier contourClr
    __contourClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'contourClr'), 'contourClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_httpschemas_openxmlformats_orgdrawingml2006maincontourClr', False)

    
    contourClr = property(__contourClr.value, __contourClr.set, None, u'Contour Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bevelB uses Python identifier bevelB
    __bevelB = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bevelB'), 'bevelB', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_httpschemas_openxmlformats_orgdrawingml2006mainbevelB', False)

    
    bevelB = property(__bevelB.value, __bevelB.set, None, u'Bottom Bevel')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extrusionClr uses Python identifier extrusionClr
    __extrusionClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extrusionClr'), 'extrusionClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_httpschemas_openxmlformats_orgdrawingml2006mainextrusionClr', False)

    
    extrusionClr = property(__extrusionClr.value, __extrusionClr.set, None, u'Extrusion Color')

    
    # Attribute prstMaterial uses Python identifier prstMaterial
    __prstMaterial = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prstMaterial'), 'prstMaterial', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_prstMaterial', ST_PresetMaterialType, unicode_default=u'warmMatte')
    
    prstMaterial = property(__prstMaterial.value, __prstMaterial.set, None, u'Preset Material Type')

    
    # Attribute contourW uses Python identifier contourW
    __contourW = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'contourW'), 'contourW', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_contourW', ST_PositiveCoordinate, unicode_default=u'0')
    
    contourW = property(__contourW.value, __contourW.set, None, u'Contour Width')

    
    # Attribute extrusionH uses Python identifier extrusionH
    __extrusionH = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'extrusionH'), 'extrusionH', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_extrusionH', ST_PositiveCoordinate, unicode_default=u'0')
    
    extrusionH = property(__extrusionH.value, __extrusionH.set, None, u'Extrusion Height')

    
    # Attribute z uses Python identifier z
    __z = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'z'), 'z', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Shape3D_z', ST_Coordinate, unicode_default=u'0')
    
    z = property(__z.value, __z.set, None, u'Shape Depth')


    _ElementMap = {
        __extLst.name() : __extLst,
        __bevelT.name() : __bevelT,
        __contourClr.name() : __contourClr,
        __bevelB.name() : __bevelB,
        __extrusionClr.name() : __extrusionClr
    }
    _AttributeMap = {
        __prstMaterial.name() : __prstMaterial,
        __contourW.name() : __contourW,
        __extrusionH.name() : __extrusionH,
        __z.name() : __z
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Shape3D', CT_Shape3D)


# Complex type CT_Constraints with content type ELEMENT_ONLY
class CT_Constraints (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Constraints')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}constr uses Python identifier constr
    __constr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'constr'), 'constr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraints_httpschemas_openxmlformats_orgdrawingml2006diagramconstr', True)

    
    constr = property(__constr.value, __constr.set, None, u'Constraint')


    _ElementMap = {
        __constr.name() : __constr
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Constraints', CT_Constraints)


# Complex type CT_GraphicalObjectData with content type ELEMENT_ONLY
class CT_GraphicalObjectData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GraphicalObjectData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute uri uses Python identifier uri
    __uri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uri'), 'uri', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectData_uri', pyxb.binding.datatypes.token)
    
    uri = property(__uri.value, __uri.set, None, u'Uniform Resource Identifier')

    _HasWildcardElement = True

    _ElementMap = {
        
    }
    _AttributeMap = {
        __uri.name() : __uri
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GraphicalObjectData', CT_GraphicalObjectData)


# Complex type CT_Point2D with content type EMPTY
class CT_Point2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Point2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'y'), 'y', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Point2D_y', ST_Coordinate, required=True)
    
    y = property(__y.value, __y.set, None, u'Y-Axis Coordinate')

    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'x'), 'x', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Point2D_x', ST_Coordinate, required=True)
    
    x = property(__x.value, __x.set, None, u'X-Axis Coordinate')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __y.name() : __y,
        __x.name() : __x
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Point2D', CT_Point2D)


# Complex type CT_GraphicalObject with content type ELEMENT_ONLY
class CT_GraphicalObject (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GraphicalObject')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}graphicData uses Python identifier graphicData
    __graphicData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicData'), 'graphicData', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObject_httpschemas_openxmlformats_orgdrawingml2006maingraphicData', False)

    
    graphicData = property(__graphicData.value, __graphicData.set, None, u'Graphic Object Data')


    _ElementMap = {
        __graphicData.name() : __graphicData
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GraphicalObject', CT_GraphicalObject)


# Complex type CT_BackgroundFormatting with content type ELEMENT_ONLY
class CT_BackgroundFormatting (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BackgroundFormatting')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFormatting_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')


    _ElementMap = {
        __noFill.name() : __noFill,
        __solidFill.name() : __solidFill,
        __gradFill.name() : __gradFill,
        __effectDag.name() : __effectDag,
        __effectLst.name() : __effectLst,
        __blipFill.name() : __blipFill,
        __pattFill.name() : __pattFill,
        __grpFill.name() : __grpFill
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BackgroundFormatting', CT_BackgroundFormatting)


# Complex type CT_RelativeRect with content type EMPTY
class CT_RelativeRect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_RelativeRect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RelativeRect_r', ST_Percentage, unicode_default=u'0%')
    
    r = property(__r.value, __r.set, None, u'Right Offset')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RelativeRect_b', ST_Percentage, unicode_default=u'0%')
    
    b = property(__b.value, __b.set, None, u'Bottom Offset')

    
    # Attribute t uses Python identifier t
    __t = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u't'), 't', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RelativeRect_t', ST_Percentage, unicode_default=u'0%')
    
    t = property(__t.value, __t.set, None, u'Top Offset')

    
    # Attribute l uses Python identifier l
    __l = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'l'), 'l', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RelativeRect_l', ST_Percentage, unicode_default=u'0%')
    
    l = property(__l.value, __l.set, None, u'Left Offset')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __r.name() : __r,
        __b.name() : __b,
        __t.name() : __t,
        __l.name() : __l
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_RelativeRect', CT_RelativeRect)


# Complex type CT_LineProperties with content type ELEMENT_ONLY
class CT_LineProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LineProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, u'No Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bevel uses Python identifier bevel
    __bevel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bevel'), 'bevel', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainbevel', False)

    
    bevel = property(__bevel.value, __bevel.set, None, u'Line Join Bevel')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}miter uses Python identifier miter
    __miter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'miter'), 'miter', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainmiter', False)

    
    miter = property(__miter.value, __miter.set, None, u'Miter Line Join')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstDash uses Python identifier prstDash
    __prstDash = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstDash'), 'prstDash', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainprstDash', False)

    
    prstDash = property(__prstDash.value, __prstDash.set, None, u'Preset Dash')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}custDash uses Python identifier custDash
    __custDash = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'custDash'), 'custDash', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006maincustDash', False)

    
    custDash = property(__custDash.value, __custDash.set, None, u'Custom Dash')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tailEnd uses Python identifier tailEnd
    __tailEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tailEnd'), 'tailEnd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006maintailEnd', False)

    
    tailEnd = property(__tailEnd.value, __tailEnd.set, None, u'Tail line end style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}headEnd uses Python identifier headEnd
    __headEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'headEnd'), 'headEnd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainheadEnd', False)

    
    headEnd = property(__headEnd.value, __headEnd.set, None, u'Line Head/End Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, u'Solid Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, u'Gradient Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}round uses Python identifier round
    __round = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'round'), 'round', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_httpschemas_openxmlformats_orgdrawingml2006mainround', False)

    
    round = property(__round.value, __round.set, None, u'Round Line Join')

    
    # Attribute algn uses Python identifier algn
    __algn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algn'), 'algn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_algn', ST_PenAlignment)
    
    algn = property(__algn.value, __algn.set, None, u'Stroke Alignment')

    
    # Attribute cap uses Python identifier cap
    __cap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cap'), 'cap', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_cap', ST_LineCap)
    
    cap = property(__cap.value, __cap.set, None, u'Line Ending Cap Type')

    
    # Attribute cmpd uses Python identifier cmpd
    __cmpd = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cmpd'), 'cmpd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_cmpd', ST_CompoundLine)
    
    cmpd = property(__cmpd.value, __cmpd.set, None, u'Compound Line Type')

    
    # Attribute w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'w'), 'w', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineProperties_w', ST_LineWidth)
    
    w = property(__w.value, __w.set, None, u'Line Width')


    _ElementMap = {
        __noFill.name() : __noFill,
        __bevel.name() : __bevel,
        __miter.name() : __miter,
        __prstDash.name() : __prstDash,
        __pattFill.name() : __pattFill,
        __custDash.name() : __custDash,
        __tailEnd.name() : __tailEnd,
        __headEnd.name() : __headEnd,
        __solidFill.name() : __solidFill,
        __extLst.name() : __extLst,
        __gradFill.name() : __gradFill,
        __round.name() : __round
    }
    _AttributeMap = {
        __algn.name() : __algn,
        __cap.name() : __cap,
        __cmpd.name() : __cmpd,
        __w.name() : __w
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LineProperties', CT_LineProperties)


# Complex type CT_NonVisualPictureProperties with content type ELEMENT_ONLY
class CT_NonVisualPictureProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_NonVisualPictureProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualPictureProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}picLocks uses Python identifier picLocks
    __picLocks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'picLocks'), 'picLocks', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualPictureProperties_httpschemas_openxmlformats_orgdrawingml2006mainpicLocks', False)

    
    picLocks = property(__picLocks.value, __picLocks.set, None, u'Picture Locks')

    
    # Attribute preferRelativeResize uses Python identifier preferRelativeResize
    __preferRelativeResize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'preferRelativeResize'), 'preferRelativeResize', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualPictureProperties_preferRelativeResize', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    preferRelativeResize = property(__preferRelativeResize.value, __preferRelativeResize.set, None, u'Relative Resize Preferred')


    _ElementMap = {
        __extLst.name() : __extLst,
        __picLocks.name() : __picLocks
    }
    _AttributeMap = {
        __preferRelativeResize.name() : __preferRelativeResize
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_NonVisualPictureProperties', CT_NonVisualPictureProperties)


# Complex type CT_DashStopList with content type ELEMENT_ONLY
class CT_DashStopList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_DashStopList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ds uses Python identifier ds
    __ds = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ds'), 'ds', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DashStopList_httpschemas_openxmlformats_orgdrawingml2006mainds', True)

    
    ds = property(__ds.value, __ds.set, None, u'Dash Stop')


    _ElementMap = {
        __ds.name() : __ds
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_DashStopList', CT_DashStopList)


# Complex type CT_Colors with content type ELEMENT_ONLY
class CT_Colors (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Colors')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', True)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', True)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', True)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', True)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', True)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', True)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Attribute hueDir uses Python identifier hueDir
    __hueDir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hueDir'), 'hueDir', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_hueDir', ST_HueDir, unicode_default=u'cw')
    
    hueDir = property(__hueDir.value, __hueDir.set, None, u'Hue Direction')

    
    # Attribute meth uses Python identifier meth
    __meth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'meth'), 'meth', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Colors_meth', ST_ClrAppMethod, unicode_default=u'span')
    
    meth = property(__meth.value, __meth.set, None, u'Color Application Method Type')


    _ElementMap = {
        __schemeClr.name() : __schemeClr,
        __scrgbClr.name() : __scrgbClr,
        __prstClr.name() : __prstClr,
        __sysClr.name() : __sysClr,
        __srgbClr.name() : __srgbClr,
        __hslClr.name() : __hslClr
    }
    _AttributeMap = {
        __hueDir.name() : __hueDir,
        __meth.name() : __meth
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Colors', CT_Colors)


# Complex type CT_TableStyleList with content type ELEMENT_ONLY
class CT_TableStyleList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableStyleList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tblStyle uses Python identifier tblStyle
    __tblStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tblStyle'), 'tblStyle', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleList_httpschemas_openxmlformats_orgdrawingml2006maintblStyle', True)

    
    tblStyle = property(__tblStyle.value, __tblStyle.set, None, u'Table Style')

    
    # Attribute def uses Python identifier def_
    __def = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'def'), 'def_', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleList_def', _s.ST_Guid, required=True)
    
    def_ = property(__def.value, __def.set, None, u'Default')


    _ElementMap = {
        __tblStyle.name() : __tblStyle
    }
    _AttributeMap = {
        __def.name() : __def
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableStyleList', CT_TableStyleList)


# Complex type CT_AlphaInverseEffect with content type ELEMENT_ONLY
class CT_AlphaInverseEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaInverseEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaInverseEffect_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaInverseEffect_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaInverseEffect_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaInverseEffect_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaInverseEffect_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaInverseEffect_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __hslClr.name() : __hslClr,
        __scrgbClr.name() : __scrgbClr,
        __sysClr.name() : __sysClr,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaInverseEffect', CT_AlphaInverseEffect)


# Complex type CT_EmbeddedWAVAudioFile with content type EMPTY
class CT_EmbeddedWAVAudioFile (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EmbeddedWAVAudioFile')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}embed uses Python identifier embed
    __embed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'embed'), 'embed', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EmbeddedWAVAudioFile_httpschemas_openxmlformats_orgofficeDocument2006relationshipsembed', _r.ST_RelationshipId, required=True)
    
    embed = property(__embed.value, __embed.set, None, u'Embedded Image Relationship Target')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EmbeddedWAVAudioFile_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Sound Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __embed.name() : __embed,
        __name.name() : __name
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EmbeddedWAVAudioFile', CT_EmbeddedWAVAudioFile)


# Complex type CT_PositiveSize2D with content type EMPTY
class CT_PositiveSize2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PositiveSize2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute cy uses Python identifier cy
    __cy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cy'), 'cy', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PositiveSize2D_cy', ST_PositiveCoordinate, required=True)
    
    cy = property(__cy.value, __cy.set, None, u'Extent Width')

    
    # Attribute cx uses Python identifier cx
    __cx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cx'), 'cx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PositiveSize2D_cx', ST_PositiveCoordinate, required=True)
    
    cx = property(__cx.value, __cx.set, None, u'Extent Length')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __cy.name() : __cy,
        __cx.name() : __cx
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PositiveSize2D', CT_PositiveSize2D)


# Complex type CT_AnimLvl with content type EMPTY
class CT_AnimLvl (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_AnimLvl')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_AnimLvl_val', ST_AnimLvlStr, unicode_default=u'none')
    
    val = property(__val.value, __val.set, None, u'Level Animation Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_AnimLvl', CT_AnimLvl)


# Complex type CT_ReflectionEffect with content type EMPTY
class CT_ReflectionEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ReflectionEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute sx uses Python identifier sx
    __sx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sx'), 'sx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_sx', ST_Percentage, unicode_default=u'100%')
    
    sx = property(__sx.value, __sx.set, None, u'Horizontal Ratio')

    
    # Attribute ky uses Python identifier ky
    __ky = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ky'), 'ky', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_ky', ST_FixedAngle, unicode_default=u'0')
    
    ky = property(__ky.value, __ky.set, None, u'Vertical Skew')

    
    # Attribute stA uses Python identifier stA
    __stA = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stA'), 'stA', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_stA', ST_PositiveFixedPercentage, unicode_default=u'100%')
    
    stA = property(__stA.value, __stA.set, None, u'Start Opacity')

    
    # Attribute algn uses Python identifier algn
    __algn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algn'), 'algn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_algn', ST_RectAlignment, unicode_default=u'b')
    
    algn = property(__algn.value, __algn.set, None, u'Shadow Alignment')

    
    # Attribute kx uses Python identifier kx
    __kx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'kx'), 'kx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_kx', ST_FixedAngle, unicode_default=u'0')
    
    kx = property(__kx.value, __kx.set, None, u'Horizontal Skew')

    
    # Attribute stPos uses Python identifier stPos
    __stPos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stPos'), 'stPos', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_stPos', ST_PositiveFixedPercentage, unicode_default=u'0%')
    
    stPos = property(__stPos.value, __stPos.set, None, u'Start Position')

    
    # Attribute rotWithShape uses Python identifier rotWithShape
    __rotWithShape = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rotWithShape'), 'rotWithShape', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_rotWithShape', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    rotWithShape = property(__rotWithShape.value, __rotWithShape.set, None, u'Rotate With Shape')

    
    # Attribute fadeDir uses Python identifier fadeDir
    __fadeDir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fadeDir'), 'fadeDir', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_fadeDir', ST_PositiveFixedAngle, unicode_default=u'5400000')
    
    fadeDir = property(__fadeDir.value, __fadeDir.set, None, u'Fade Direction')

    
    # Attribute sy uses Python identifier sy
    __sy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sy'), 'sy', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_sy', ST_Percentage, unicode_default=u'100%')
    
    sy = property(__sy.value, __sy.set, None, u'Vertical Ratio')

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_dir', ST_PositiveFixedAngle, unicode_default=u'0')
    
    dir = property(__dir.value, __dir.set, None, u'Direction')

    
    # Attribute endPos uses Python identifier endPos
    __endPos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'endPos'), 'endPos', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_endPos', ST_PositiveFixedPercentage, unicode_default=u'100%')
    
    endPos = property(__endPos.value, __endPos.set, None, u'End Position')

    
    # Attribute endA uses Python identifier endA
    __endA = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'endA'), 'endA', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_endA', ST_PositiveFixedPercentage, unicode_default=u'0%')
    
    endA = property(__endA.value, __endA.set, None, u'End Alpha')

    
    # Attribute dist uses Python identifier dist
    __dist = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dist'), 'dist', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_dist', ST_PositiveCoordinate, unicode_default=u'0')
    
    dist = property(__dist.value, __dist.set, None, u'Distance')

    
    # Attribute blurRad uses Python identifier blurRad
    __blurRad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blurRad'), 'blurRad', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ReflectionEffect_blurRad', ST_PositiveCoordinate, unicode_default=u'0')
    
    blurRad = property(__blurRad.value, __blurRad.set, None, u'Blur Radius')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __sx.name() : __sx,
        __ky.name() : __ky,
        __stA.name() : __stA,
        __algn.name() : __algn,
        __kx.name() : __kx,
        __stPos.name() : __stPos,
        __rotWithShape.name() : __rotWithShape,
        __fadeDir.name() : __fadeDir,
        __sy.name() : __sy,
        __dir.name() : __dir,
        __endPos.name() : __endPos,
        __endA.name() : __endA,
        __dist.name() : __dist,
        __blurRad.name() : __blurRad
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ReflectionEffect', CT_ReflectionEffect)


# Complex type CT_GammaTransform with content type EMPTY
class CT_GammaTransform (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GammaTransform')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GammaTransform', CT_GammaTransform)


# Complex type CT_GvmlGroupShape with content type ELEMENT_ONLY
class CT_GvmlGroupShape (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlGroupShape')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pic uses Python identifier pic
    __pic = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pic'), 'pic', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006mainpic', True)

    
    pic = property(__pic.value, __pic.set, None, u'Picture')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpSpPr uses Python identifier grpSpPr
    __grpSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSpPr'), 'grpSpPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006maingrpSpPr', False)

    
    grpSpPr = property(__grpSpPr.value, __grpSpPr.set, None, u'Visual Group Shape Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}graphicFrame uses Python identifier graphicFrame
    __graphicFrame = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicFrame'), 'graphicFrame', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006maingraphicFrame', True)

    
    graphicFrame = property(__graphicFrame.value, __graphicFrame.set, None, u'Graphic Frame')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpSp uses Python identifier grpSp
    __grpSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSp'), 'grpSp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006maingrpSp', True)

    
    grpSp = property(__grpSp.value, __grpSp.set, None, u'Group shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}txSp uses Python identifier txSp
    __txSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'txSp'), 'txSp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006maintxSp', True)

    
    txSp = property(__txSp.value, __txSp.set, None, u'Text shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}nvGrpSpPr uses Python identifier nvGrpSpPr
    __nvGrpSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'nvGrpSpPr'), 'nvGrpSpPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006mainnvGrpSpPr', False)

    
    nvGrpSpPr = property(__nvGrpSpPr.value, __nvGrpSpPr.set, None, u'Non-Visual Properties for a Group Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sp uses Python identifier sp
    __sp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sp'), 'sp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006mainsp', True)

    
    sp = property(__sp.value, __sp.set, None, u'Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cxnSp uses Python identifier cxnSp
    __cxnSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnSp'), 'cxnSp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShape_httpschemas_openxmlformats_orgdrawingml2006maincxnSp', True)

    
    cxnSp = property(__cxnSp.value, __cxnSp.set, None, u'Connection Shape')


    _ElementMap = {
        __pic.name() : __pic,
        __grpSpPr.name() : __grpSpPr,
        __graphicFrame.name() : __graphicFrame,
        __grpSp.name() : __grpSp,
        __txSp.name() : __txSp,
        __nvGrpSpPr.name() : __nvGrpSpPr,
        __extLst.name() : __extLst,
        __sp.name() : __sp,
        __cxnSp.name() : __cxnSp
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlGroupShape', CT_GvmlGroupShape)


# Complex type CT_TextSpacing with content type ELEMENT_ONLY
class CT_TextSpacing (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextSpacing')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spcPct uses Python identifier spcPct
    __spcPct = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spcPct'), 'spcPct', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextSpacing_httpschemas_openxmlformats_orgdrawingml2006mainspcPct', False)

    
    spcPct = property(__spcPct.value, __spcPct.set, None, u'Spacing Percent')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spcPts uses Python identifier spcPts
    __spcPts = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spcPts'), 'spcPts', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextSpacing_httpschemas_openxmlformats_orgdrawingml2006mainspcPts', False)

    
    spcPts = property(__spcPts.value, __spcPts.set, None, u'Spacing Points')


    _ElementMap = {
        __spcPct.name() : __spcPct,
        __spcPts.name() : __spcPts
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextSpacing', CT_TextSpacing)


# Complex type CT_ColorReplaceEffect with content type ELEMENT_ONLY
class CT_ColorReplaceEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorReplaceEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorReplaceEffect_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorReplaceEffect_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorReplaceEffect_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorReplaceEffect_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorReplaceEffect_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorReplaceEffect_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __prstClr.name() : __prstClr,
        __scrgbClr.name() : __scrgbClr,
        __sysClr.name() : __sysClr,
        __hslClr.name() : __hslClr,
        __schemeClr.name() : __schemeClr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorReplaceEffect', CT_ColorReplaceEffect)


# Complex type CT_ColorTransformHeader with content type ELEMENT_ONLY
class CT_ColorTransformHeader (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ColorTransformHeader')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeader_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'title'), 'title', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeader_httpschemas_openxmlformats_orgdrawingml2006diagramtitle', True)

    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}catLst uses Python identifier catLst
    __catLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), 'catLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeader_httpschemas_openxmlformats_orgdrawingml2006diagramcatLst', False)

    
    catLst = property(__catLst.value, __catLst.set, None, u'Color Transform Category List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}desc uses Python identifier desc
    __desc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'desc'), 'desc', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeader_httpschemas_openxmlformats_orgdrawingml2006diagramdesc', True)

    
    desc = property(__desc.value, __desc.set, None, u'Description')

    
    # Attribute resId uses Python identifier resId
    __resId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'resId'), 'resId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeader_resId', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    resId = property(__resId.value, __resId.set, None, u'Resource ID')

    
    # Attribute minVer uses Python identifier minVer
    __minVer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minVer'), 'minVer', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeader_minVer', pyxb.binding.datatypes.string, unicode_default=u'http://schemas.openxmlformats.org/drawingml/2006/diagram')
    
    minVer = property(__minVer.value, __minVer.set, None, u'Minimum Version')

    
    # Attribute uniqueId uses Python identifier uniqueId
    __uniqueId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueId'), 'uniqueId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeader_uniqueId', pyxb.binding.datatypes.string, required=True)
    
    uniqueId = property(__uniqueId.value, __uniqueId.set, None, u'Unique ID')


    _ElementMap = {
        __extLst.name() : __extLst,
        __title.name() : __title,
        __catLst.name() : __catLst,
        __desc.name() : __desc
    }
    _AttributeMap = {
        __resId.name() : __resId,
        __minVer.name() : __minVer,
        __uniqueId.name() : __uniqueId
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ColorTransformHeader', CT_ColorTransformHeader)


# Complex type CT_GrayscaleTransform with content type EMPTY
class CT_GrayscaleTransform (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GrayscaleTransform')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GrayscaleTransform', CT_GrayscaleTransform)


# Complex type CT_BackgroundFillStyleList with content type ELEMENT_ONLY
class CT_BackgroundFillStyleList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BackgroundFillStyleList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', True)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFillStyleList_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', True)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', True)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', True)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFillStyleList_httpschemas_openxmlformats_orgdrawingml2006maingradFill', True)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BackgroundFillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', True)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)


    _ElementMap = {
        __noFill.name() : __noFill,
        __grpFill.name() : __grpFill,
        __pattFill.name() : __pattFill,
        __solidFill.name() : __solidFill,
        __gradFill.name() : __gradFill,
        __blipFill.name() : __blipFill
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BackgroundFillStyleList', CT_BackgroundFillStyleList)


# Complex type CT_ColorChangeEffect with content type ELEMENT_ONLY
class CT_ColorChangeEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorChangeEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrTo uses Python identifier clrTo
    __clrTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrTo'), 'clrTo', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorChangeEffect_httpschemas_openxmlformats_orgdrawingml2006mainclrTo', False)

    
    clrTo = property(__clrTo.value, __clrTo.set, None, u'Change Color To')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrFrom uses Python identifier clrFrom
    __clrFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrFrom'), 'clrFrom', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorChangeEffect_httpschemas_openxmlformats_orgdrawingml2006mainclrFrom', False)

    
    clrFrom = property(__clrFrom.value, __clrFrom.set, None, u'Change Color From')

    
    # Attribute useA uses Python identifier useA
    __useA = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'useA'), 'useA', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorChangeEffect_useA', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    useA = property(__useA.value, __useA.set, None, u'Consider Alpha Values')


    _ElementMap = {
        __clrTo.name() : __clrTo,
        __clrFrom.name() : __clrFrom
    }
    _AttributeMap = {
        __useA.name() : __useA
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorChangeEffect', CT_ColorChangeEffect)


# Complex type CT_OfficeArtExtension with content type ELEMENT_ONLY
class CT_OfficeArtExtension (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_OfficeArtExtension')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute uri uses Python identifier uri
    __uri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uri'), 'uri', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeArtExtension_uri', pyxb.binding.datatypes.token)
    
    uri = property(__uri.value, __uri.set, None, u'Uniform Resource Identifier')

    _HasWildcardElement = True

    _ElementMap = {
        
    }
    _AttributeMap = {
        __uri.name() : __uri
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_OfficeArtExtension', CT_OfficeArtExtension)


# Complex type CT_FlatText with content type EMPTY
class CT_FlatText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FlatText')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute z uses Python identifier z
    __z = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'z'), 'z', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FlatText_z', ST_Coordinate, unicode_default=u'0')
    
    z = property(__z.value, __z.set, None, u'Z Coordinate')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __z.name() : __z
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FlatText', CT_FlatText)


# Complex type CT_GroupLocking with content type ELEMENT_ONLY
class CT_GroupLocking (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GroupLocking')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute noChangeAspect uses Python identifier noChangeAspect
    __noChangeAspect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeAspect'), 'noChangeAspect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_noChangeAspect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeAspect = property(__noChangeAspect.value, __noChangeAspect.set, None, u'Disallow Aspect Ratio Change')

    
    # Attribute noRot uses Python identifier noRot
    __noRot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noRot'), 'noRot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_noRot', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noRot = property(__noRot.value, __noRot.set, None, u'Disallow Shape Rotation')

    
    # Attribute noGrp uses Python identifier noGrp
    __noGrp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noGrp'), 'noGrp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_noGrp', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noGrp = property(__noGrp.value, __noGrp.set, None, u'Disallow Shape Grouping')

    
    # Attribute noUngrp uses Python identifier noUngrp
    __noUngrp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noUngrp'), 'noUngrp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_noUngrp', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noUngrp = property(__noUngrp.value, __noUngrp.set, None, u'Disallow Shape Ungrouping')

    
    # Attribute noMove uses Python identifier noMove
    __noMove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noMove'), 'noMove', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_noMove', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noMove = property(__noMove.value, __noMove.set, None, u'Disallow Moving Shape')

    
    # Attribute noResize uses Python identifier noResize
    __noResize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noResize'), 'noResize', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_noResize', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noResize = property(__noResize.value, __noResize.set, None, u'Disallow Shape Resizing')

    
    # Attribute noSelect uses Python identifier noSelect
    __noSelect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noSelect'), 'noSelect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupLocking_noSelect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noSelect = property(__noSelect.value, __noSelect.set, None, u'Disallow Shape Selection')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __noChangeAspect.name() : __noChangeAspect,
        __noRot.name() : __noRot,
        __noGrp.name() : __noGrp,
        __noUngrp.name() : __noUngrp,
        __noMove.name() : __noMove,
        __noResize.name() : __noResize,
        __noSelect.name() : __noSelect
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GroupLocking', CT_GroupLocking)


# Complex type CT_DuotoneEffect with content type ELEMENT_ONLY
class CT_DuotoneEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_DuotoneEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DuotoneEffect_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', True)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DuotoneEffect_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', True)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DuotoneEffect_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', True)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DuotoneEffect_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', True)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DuotoneEffect_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', True)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DuotoneEffect_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', True)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')


    _ElementMap = {
        __sysClr.name() : __sysClr,
        __prstClr.name() : __prstClr,
        __schemeClr.name() : __schemeClr,
        __srgbClr.name() : __srgbClr,
        __scrgbClr.name() : __scrgbClr,
        __hslClr.name() : __hslClr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_DuotoneEffect', CT_DuotoneEffect)


# Complex type CT_GvmlConnectorNonVisual with content type ELEMENT_ONLY
class CT_GvmlConnectorNonVisual (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlConnectorNonVisual')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvCxnSpPr uses Python identifier cNvCxnSpPr
    __cNvCxnSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvCxnSpPr'), 'cNvCxnSpPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlConnectorNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvCxnSpPr', False)

    
    cNvCxnSpPr = property(__cNvCxnSpPr.value, __cNvCxnSpPr.set, None, u'Non-Visual Connector Shape Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvPr uses Python identifier cNvPr
    __cNvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), 'cNvPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlConnectorNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvPr', False)

    
    cNvPr = property(__cNvPr.value, __cNvPr.set, None, u'Non-Visual Drawing Properties')


    _ElementMap = {
        __cNvCxnSpPr.name() : __cNvCxnSpPr,
        __cNvPr.name() : __cNvPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlConnectorNonVisual', CT_GvmlConnectorNonVisual)


# Complex type CT_LayoutNode with content type ELEMENT_ONLY
class CT_LayoutNode (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_LayoutNode')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}ruleLst uses Python identifier ruleLst
    __ruleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), 'ruleLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramruleLst', True)

    
    ruleLst = property(__ruleLst.value, __ruleLst.set, None, u'Rule List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', True)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}varLst uses Python identifier varLst
    __varLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'varLst'), 'varLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramvarLst', True)

    
    varLst = property(__varLst.value, __varLst.set, None, u'Variable List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}alg uses Python identifier alg
    __alg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'alg'), 'alg', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramalg', True)

    
    alg = property(__alg.value, __alg.set, None, u'Algorithm')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}choose uses Python identifier choose
    __choose = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'choose'), 'choose', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramchoose', True)

    
    choose = property(__choose.value, __choose.set, None, u'Choose Element')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}shape uses Python identifier shape
    __shape = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'shape'), 'shape', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramshape', True)

    
    shape = property(__shape.value, __shape.set, None, u'Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}layoutNode uses Python identifier layoutNode
    __layoutNode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), 'layoutNode', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramlayoutNode', True)

    
    layoutNode = property(__layoutNode.value, __layoutNode.set, None, u'Layout Node')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}presOf uses Python identifier presOf
    __presOf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), 'presOf', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagrampresOf', True)

    
    presOf = property(__presOf.value, __presOf.set, None, u'Presentation Of')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}constrLst uses Python identifier constrLst
    __constrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), 'constrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramconstrLst', True)

    
    constrLst = property(__constrLst.value, __constrLst.set, None, u'Constraint List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}forEach uses Python identifier forEach
    __forEach = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), 'forEach', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_httpschemas_openxmlformats_orgdrawingml2006diagramforEach', True)

    
    forEach = property(__forEach.value, __forEach.set, None, u'For Each')

    
    # Attribute chOrder uses Python identifier chOrder
    __chOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'chOrder'), 'chOrder', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_chOrder', ST_ChildOrderType, unicode_default=u'b')
    
    chOrder = property(__chOrder.value, __chOrder.set, None, u'Child Order')

    
    # Attribute moveWith uses Python identifier moveWith
    __moveWith = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'moveWith'), 'moveWith', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_moveWith', pyxb.binding.datatypes.string, unicode_default=u'')
    
    moveWith = property(__moveWith.value, __moveWith.set, None, u'Move With')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')

    
    # Attribute styleLbl uses Python identifier styleLbl
    __styleLbl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'styleLbl'), 'styleLbl', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutNode_styleLbl', pyxb.binding.datatypes.string, unicode_default=u'')
    
    styleLbl = property(__styleLbl.value, __styleLbl.set, None, u'Style Label')


    _ElementMap = {
        __ruleLst.name() : __ruleLst,
        __extLst.name() : __extLst,
        __varLst.name() : __varLst,
        __alg.name() : __alg,
        __choose.name() : __choose,
        __shape.name() : __shape,
        __layoutNode.name() : __layoutNode,
        __presOf.name() : __presOf,
        __constrLst.name() : __constrLst,
        __forEach.name() : __forEach
    }
    _AttributeMap = {
        __chOrder.name() : __chOrder,
        __moveWith.name() : __moveWith,
        __name.name() : __name,
        __styleLbl.name() : __styleLbl
    }
_Namespace.addCategoryObject('typeBinding', u'CT_LayoutNode', CT_LayoutNode)


# Complex type CT_CustomColorList with content type ELEMENT_ONLY
class CT_CustomColorList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_CustomColorList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}custClr uses Python identifier custClr
    __custClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'custClr'), 'custClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomColorList_httpschemas_openxmlformats_orgdrawingml2006maincustClr', True)

    
    custClr = property(__custClr.value, __custClr.set, None, u'Custom color')


    _ElementMap = {
        __custClr.name() : __custClr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_CustomColorList', CT_CustomColorList)


# Complex type CT_OuterShadowEffect with content type ELEMENT_ONLY
class CT_OuterShadowEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_OuterShadowEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Attribute kx uses Python identifier kx
    __kx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'kx'), 'kx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_kx', ST_FixedAngle, unicode_default=u'0')
    
    kx = property(__kx.value, __kx.set, None, u'Horizontal Skew')

    
    # Attribute blurRad uses Python identifier blurRad
    __blurRad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blurRad'), 'blurRad', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_blurRad', ST_PositiveCoordinate, unicode_default=u'0')
    
    blurRad = property(__blurRad.value, __blurRad.set, None, u'Blur Radius')

    
    # Attribute ky uses Python identifier ky
    __ky = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ky'), 'ky', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_ky', ST_FixedAngle, unicode_default=u'0')
    
    ky = property(__ky.value, __ky.set, None, u'Vertical Skew')

    
    # Attribute dist uses Python identifier dist
    __dist = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dist'), 'dist', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_dist', ST_PositiveCoordinate, unicode_default=u'0')
    
    dist = property(__dist.value, __dist.set, None, u'Shadow Offset Distance')

    
    # Attribute algn uses Python identifier algn
    __algn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algn'), 'algn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_algn', ST_RectAlignment, unicode_default=u'b')
    
    algn = property(__algn.value, __algn.set, None, u'Shadow Alignment')

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_dir', ST_PositiveFixedAngle, unicode_default=u'0')
    
    dir = property(__dir.value, __dir.set, None, u'Shadow Direction')

    
    # Attribute sy uses Python identifier sy
    __sy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sy'), 'sy', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_sy', ST_Percentage, unicode_default=u'100%')
    
    sy = property(__sy.value, __sy.set, None, u'Vertical Scaling Factor')

    
    # Attribute rotWithShape uses Python identifier rotWithShape
    __rotWithShape = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rotWithShape'), 'rotWithShape', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_rotWithShape', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    rotWithShape = property(__rotWithShape.value, __rotWithShape.set, None, u'Rotate With Shape')

    
    # Attribute sx uses Python identifier sx
    __sx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sx'), 'sx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OuterShadowEffect_sx', ST_Percentage, unicode_default=u'100%')
    
    sx = property(__sx.value, __sx.set, None, u'Horizontal Scaling Factor')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr,
        __scrgbClr.name() : __scrgbClr,
        __hslClr.name() : __hslClr,
        __sysClr.name() : __sysClr
    }
    _AttributeMap = {
        __kx.name() : __kx,
        __blurRad.name() : __blurRad,
        __ky.name() : __ky,
        __dist.name() : __dist,
        __algn.name() : __algn,
        __dir.name() : __dir,
        __sy.name() : __sy,
        __rotWithShape.name() : __rotWithShape,
        __sx.name() : __sx
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_OuterShadowEffect', CT_OuterShadowEffect)


# Complex type CT_NonVisualGroupDrawingShapeProps with content type ELEMENT_ONLY
class CT_NonVisualGroupDrawingShapeProps (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_NonVisualGroupDrawingShapeProps')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualGroupDrawingShapeProps_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpSpLocks uses Python identifier grpSpLocks
    __grpSpLocks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSpLocks'), 'grpSpLocks', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualGroupDrawingShapeProps_httpschemas_openxmlformats_orgdrawingml2006maingrpSpLocks', False)

    
    grpSpLocks = property(__grpSpLocks.value, __grpSpLocks.set, None, u'Group Shape Locks')


    _ElementMap = {
        __extLst.name() : __extLst,
        __grpSpLocks.name() : __grpSpLocks
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_NonVisualGroupDrawingShapeProps', CT_NonVisualGroupDrawingShapeProps)


# Complex type CT_TextSpacingPercent with content type EMPTY
class CT_TextSpacingPercent (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextSpacingPercent')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextSpacingPercent_val', ST_TextSpacingPercentOrPercentString, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextSpacingPercent', CT_TextSpacingPercent)


# Complex type CT_AlphaModulateEffect with content type ELEMENT_ONLY
class CT_AlphaModulateEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaModulateEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cont uses Python identifier cont
    __cont = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cont'), 'cont', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaModulateEffect_httpschemas_openxmlformats_orgdrawingml2006maincont', False)

    
    cont = property(__cont.value, __cont.set, None, None)


    _ElementMap = {
        __cont.name() : __cont
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaModulateEffect', CT_AlphaModulateEffect)


# Complex type CT_GvmlUseShapeRectangle with content type EMPTY
class CT_GvmlUseShapeRectangle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlUseShapeRectangle')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlUseShapeRectangle', CT_GvmlUseShapeRectangle)


# Complex type CT_GradientFillProperties with content type ELEMENT_ONLY
class CT_GradientFillProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GradientFillProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tileRect uses Python identifier tileRect
    __tileRect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tileRect'), 'tileRect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientFillProperties_httpschemas_openxmlformats_orgdrawingml2006maintileRect', False)

    
    tileRect = property(__tileRect.value, __tileRect.set, None, u'Tile Rectangle')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gsLst uses Python identifier gsLst
    __gsLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gsLst'), 'gsLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientFillProperties_httpschemas_openxmlformats_orgdrawingml2006maingsLst', False)

    
    gsLst = property(__gsLst.value, __gsLst.set, None, u'Gradient Stop List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lin uses Python identifier lin
    __lin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lin'), 'lin', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainlin', False)

    
    lin = property(__lin.value, __lin.set, None, u'Linear Gradient Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}path uses Python identifier path
    __path = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'path'), 'path', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientFillProperties_httpschemas_openxmlformats_orgdrawingml2006mainpath', False)

    
    path = property(__path.value, __path.set, None, u'Path Gradient')

    
    # Attribute rotWithShape uses Python identifier rotWithShape
    __rotWithShape = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rotWithShape'), 'rotWithShape', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientFillProperties_rotWithShape', pyxb.binding.datatypes.boolean)
    
    rotWithShape = property(__rotWithShape.value, __rotWithShape.set, None, u'Rotate With Shape')

    
    # Attribute flip uses Python identifier flip
    __flip = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'flip'), 'flip', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientFillProperties_flip', ST_TileFlipMode)
    
    flip = property(__flip.value, __flip.set, None, u'Tile Flip')


    _ElementMap = {
        __tileRect.name() : __tileRect,
        __gsLst.name() : __gsLst,
        __lin.name() : __lin,
        __path.name() : __path
    }
    _AttributeMap = {
        __rotWithShape.name() : __rotWithShape,
        __flip.name() : __flip
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GradientFillProperties', CT_GradientFillProperties)


# Complex type CT_Hyperlink with content type ELEMENT_ONLY
class CT_Hyperlink (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Hyperlink')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}snd uses Python identifier snd
    __snd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'snd'), 'snd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgdrawingml2006mainsnd', False)

    
    snd = property(__snd.value, __snd.set, None, u'Hyperlink Sound')

    
    # Attribute highlightClick uses Python identifier highlightClick
    __highlightClick = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'highlightClick'), 'highlightClick', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_highlightClick', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    highlightClick = property(__highlightClick.value, __highlightClick.set, None, u'Highlight Click')

    
    # Attribute history uses Python identifier history
    __history = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'history'), 'history', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_history', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    history = property(__history.value, __history.set, None, u'Add Hyperlink to Page History')

    
    # Attribute action uses Python identifier action
    __action = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'action'), 'action', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_action', pyxb.binding.datatypes.string, unicode_default=u'')
    
    action = property(__action.value, __action.set, None, u'Action Setting')

    
    # Attribute invalidUrl uses Python identifier invalidUrl
    __invalidUrl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'invalidUrl'), 'invalidUrl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_invalidUrl', pyxb.binding.datatypes.string, unicode_default=u'')
    
    invalidUrl = property(__invalidUrl.value, __invalidUrl.set, None, u'Invalid URL')

    
    # Attribute endSnd uses Python identifier endSnd
    __endSnd = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'endSnd'), 'endSnd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_endSnd', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    endSnd = property(__endSnd.value, __endSnd.set, None, u'End Sounds')

    
    # Attribute tgtFrame uses Python identifier tgtFrame
    __tgtFrame = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tgtFrame'), 'tgtFrame', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_tgtFrame', pyxb.binding.datatypes.string, unicode_default=u'')
    
    tgtFrame = property(__tgtFrame.value, __tgtFrame.set, None, u'Target Frame')

    
    # Attribute tooltip uses Python identifier tooltip
    __tooltip = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tooltip'), 'tooltip', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_tooltip', pyxb.binding.datatypes.string, unicode_default=u'')
    
    tooltip = property(__tooltip.value, __tooltip.set, None, u'Hyperlink Tooltip')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        __extLst.name() : __extLst,
        __snd.name() : __snd
    }
    _AttributeMap = {
        __highlightClick.name() : __highlightClick,
        __history.name() : __history,
        __action.name() : __action,
        __invalidUrl.name() : __invalidUrl,
        __endSnd.name() : __endSnd,
        __tgtFrame.name() : __tgtFrame,
        __tooltip.name() : __tooltip,
        __id.name() : __id
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Hyperlink', CT_Hyperlink)


# Complex type CT_CustomGeometry2D with content type ELEMENT_ONLY
class CT_CustomGeometry2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_CustomGeometry2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gdLst uses Python identifier gdLst
    __gdLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gdLst'), 'gdLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomGeometry2D_httpschemas_openxmlformats_orgdrawingml2006maingdLst', False)

    
    gdLst = property(__gdLst.value, __gdLst.set, None, u'List of Shape Guides')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}avLst uses Python identifier avLst
    __avLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst'), 'avLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomGeometry2D_httpschemas_openxmlformats_orgdrawingml2006mainavLst', False)

    
    avLst = property(__avLst.value, __avLst.set, None, u'Adjust Value List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ahLst uses Python identifier ahLst
    __ahLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ahLst'), 'ahLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomGeometry2D_httpschemas_openxmlformats_orgdrawingml2006mainahLst', False)

    
    ahLst = property(__ahLst.value, __ahLst.set, None, u'List of Shape Adjust Handles')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pathLst uses Python identifier pathLst
    __pathLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pathLst'), 'pathLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomGeometry2D_httpschemas_openxmlformats_orgdrawingml2006mainpathLst', False)

    
    pathLst = property(__pathLst.value, __pathLst.set, None, u'List of Shape Paths')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cxnLst uses Python identifier cxnLst
    __cxnLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnLst'), 'cxnLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomGeometry2D_httpschemas_openxmlformats_orgdrawingml2006maincxnLst', False)

    
    cxnLst = property(__cxnLst.value, __cxnLst.set, None, u'List of Shape Connection Sites')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}rect uses Python identifier rect
    __rect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'rect'), 'rect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_CustomGeometry2D_httpschemas_openxmlformats_orgdrawingml2006mainrect', False)

    
    rect = property(__rect.value, __rect.set, None, u'Shape Text Rectangle')


    _ElementMap = {
        __gdLst.name() : __gdLst,
        __avLst.name() : __avLst,
        __ahLst.name() : __ahLst,
        __pathLst.name() : __pathLst,
        __cxnLst.name() : __cxnLst,
        __rect.name() : __rect
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_CustomGeometry2D', CT_CustomGeometry2D)


# Complex type CT_StyleDefinition with content type ELEMENT_ONLY
class CT_StyleDefinition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_StyleDefinition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'title'), 'title', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramtitle', True)

    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}styleLbl uses Python identifier styleLbl
    __styleLbl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'styleLbl'), 'styleLbl', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramstyleLbl', True)

    
    styleLbl = property(__styleLbl.value, __styleLbl.set, None, u'Style Label')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}catLst uses Python identifier catLst
    __catLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), 'catLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramcatLst', False)

    
    catLst = property(__catLst.value, __catLst.set, None, u'Category List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}desc uses Python identifier desc
    __desc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'desc'), 'desc', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramdesc', True)

    
    desc = property(__desc.value, __desc.set, None, u'Style Label Description')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}scene3d uses Python identifier scene3d
    __scene3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'scene3d'), 'scene3d', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramscene3d', False)

    
    scene3d = property(__scene3d.value, __scene3d.set, None, u'3-D Scene')

    
    # Attribute minVer uses Python identifier minVer
    __minVer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minVer'), 'minVer', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_minVer', pyxb.binding.datatypes.string, unicode_default=u'http://schemas.openxmlformats.org/drawingml/2006/diagram')
    
    minVer = property(__minVer.value, __minVer.set, None, u'Minimum Version')

    
    # Attribute uniqueId uses Python identifier uniqueId
    __uniqueId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueId'), 'uniqueId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinition_uniqueId', pyxb.binding.datatypes.string, unicode_default=u'')
    
    uniqueId = property(__uniqueId.value, __uniqueId.set, None, u'Unique Style ID')


    _ElementMap = {
        __extLst.name() : __extLst,
        __title.name() : __title,
        __styleLbl.name() : __styleLbl,
        __catLst.name() : __catLst,
        __desc.name() : __desc,
        __scene3d.name() : __scene3d
    }
    _AttributeMap = {
        __minVer.name() : __minVer,
        __uniqueId.name() : __uniqueId
    }
_Namespace.addCategoryObject('typeBinding', u'CT_StyleDefinition', CT_StyleDefinition)


# Complex type CT_DiagramDefinition with content type ELEMENT_ONLY
class CT_DiagramDefinition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_DiagramDefinition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'title'), 'title', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramtitle', True)

    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}clrData uses Python identifier clrData
    __clrData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'clrData'), 'clrData', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramclrData', False)

    
    clrData = property(__clrData.value, __clrData.set, None, u'Color Transform Sample Data')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}layoutNode uses Python identifier layoutNode
    __layoutNode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), 'layoutNode', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramlayoutNode', False)

    
    layoutNode = property(__layoutNode.value, __layoutNode.set, None, u'Layout Node')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}desc uses Python identifier desc
    __desc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'desc'), 'desc', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramdesc', True)

    
    desc = property(__desc.value, __desc.set, None, u'Description')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}catLst uses Python identifier catLst
    __catLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), 'catLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramcatLst', False)

    
    catLst = property(__catLst.value, __catLst.set, None, u'Category List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}sampData uses Python identifier sampData
    __sampData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'sampData'), 'sampData', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramsampData', False)

    
    sampData = property(__sampData.value, __sampData.set, None, u'Sample Data')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}styleData uses Python identifier styleData
    __styleData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'styleData'), 'styleData', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_httpschemas_openxmlformats_orgdrawingml2006diagramstyleData', False)

    
    styleData = property(__styleData.value, __styleData.set, None, u'Style Data')

    
    # Attribute defStyle uses Python identifier defStyle
    __defStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defStyle'), 'defStyle', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_defStyle', pyxb.binding.datatypes.string, unicode_default=u'')
    
    defStyle = property(__defStyle.value, __defStyle.set, None, u'Default Style')

    
    # Attribute minVer uses Python identifier minVer
    __minVer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minVer'), 'minVer', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_minVer', pyxb.binding.datatypes.string, unicode_default=u'http://schemas.openxmlformats.org/drawingml/2006/diagram')
    
    minVer = property(__minVer.value, __minVer.set, None, u'Minimum Version')

    
    # Attribute uniqueId uses Python identifier uniqueId
    __uniqueId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueId'), 'uniqueId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinition_uniqueId', pyxb.binding.datatypes.string, unicode_default=u'')
    
    uniqueId = property(__uniqueId.value, __uniqueId.set, None, u'Unique Identifier')


    _ElementMap = {
        __title.name() : __title,
        __clrData.name() : __clrData,
        __layoutNode.name() : __layoutNode,
        __desc.name() : __desc,
        __extLst.name() : __extLst,
        __catLst.name() : __catLst,
        __sampData.name() : __sampData,
        __styleData.name() : __styleData
    }
    _AttributeMap = {
        __defStyle.name() : __defStyle,
        __minVer.name() : __minVer,
        __uniqueId.name() : __uniqueId
    }
_Namespace.addCategoryObject('typeBinding', u'CT_DiagramDefinition', CT_DiagramDefinition)


# Complex type CT_TextField with content type ELEMENT_ONLY
class CT_TextField (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextField')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}t uses Python identifier t
    __t = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u't'), 't', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextField_httpschemas_openxmlformats_orgdrawingml2006maint', False)

    
    t = property(__t.value, __t.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextField_httpschemas_openxmlformats_orgdrawingml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Text Character Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pPr uses Python identifier pPr
    __pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pPr'), 'pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextField_httpschemas_openxmlformats_orgdrawingml2006mainpPr', False)

    
    pPr = property(__pPr.value, __pPr.set, None, u'Text Paragraph Properties')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextField_type', pyxb.binding.datatypes.string)
    
    type = property(__type.value, __type.set, None, u'Field Type')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextField_id', _s.ST_Guid, required=True)
    
    id = property(__id.value, __id.set, None, u'Field ID')


    _ElementMap = {
        __t.name() : __t,
        __rPr.name() : __rPr,
        __pPr.name() : __pPr
    }
    _AttributeMap = {
        __type.name() : __type,
        __id.name() : __id
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextField', CT_TextField)


# Complex type CT_CTCategories with content type ELEMENT_ONLY
class CT_CTCategories (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_CTCategories')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}cat uses Python identifier cat
    __cat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'cat'), 'cat', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTCategories_httpschemas_openxmlformats_orgdrawingml2006diagramcat', True)

    
    cat = property(__cat.value, __cat.set, None, u'Color Transform Category')


    _ElementMap = {
        __cat.name() : __cat
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_CTCategories', CT_CTCategories)


# Complex type CT_DashStop with content type EMPTY
class CT_DashStop (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_DashStop')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute sp uses Python identifier sp
    __sp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sp'), 'sp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DashStop_sp', ST_PositivePercentage, required=True)
    
    sp = property(__sp.value, __sp.set, None, u'Space Length')

    
    # Attribute d uses Python identifier d
    __d = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'd'), 'd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DashStop_d', ST_PositivePercentage, required=True)
    
    d = property(__d.value, __d.set, None, u'Dash Length')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __sp.name() : __sp,
        __d.name() : __d
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_DashStop', CT_DashStop)


# Complex type CT_LayoutVariablePropertySet with content type ELEMENT_ONLY
class CT_LayoutVariablePropertySet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_LayoutVariablePropertySet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}animOne uses Python identifier animOne
    __animOne = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'animOne'), 'animOne', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramanimOne', False)

    
    animOne = property(__animOne.value, __animOne.set, None, u'One by One Animation String')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}chPref uses Python identifier chPref
    __chPref = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'chPref'), 'chPref', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramchPref', False)

    
    chPref = property(__chPref.value, __chPref.set, None, u'Preferred Number of Children')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}resizeHandles uses Python identifier resizeHandles
    __resizeHandles = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'resizeHandles'), 'resizeHandles', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramresizeHandles', False)

    
    resizeHandles = property(__resizeHandles.value, __resizeHandles.set, None, u'Shape Resize Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}bulletEnabled uses Python identifier bulletEnabled
    __bulletEnabled = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'bulletEnabled'), 'bulletEnabled', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagrambulletEnabled', False)

    
    bulletEnabled = property(__bulletEnabled.value, __bulletEnabled.set, None, u'Show Insert Bullet')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}animLvl uses Python identifier animLvl
    __animLvl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'animLvl'), 'animLvl', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramanimLvl', False)

    
    animLvl = property(__animLvl.value, __animLvl.set, None, u'Level Animation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}dir uses Python identifier dir
    __dir = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'dir'), 'dir', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramdir', False)

    
    dir = property(__dir.value, __dir.set, None, u'Diagram Direction')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}orgChart uses Python identifier orgChart
    __orgChart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'orgChart'), 'orgChart', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramorgChart', False)

    
    orgChart = property(__orgChart.value, __orgChart.set, None, u'Show Organization Chart User Interface')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}hierBranch uses Python identifier hierBranch
    __hierBranch = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'hierBranch'), 'hierBranch', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramhierBranch', False)

    
    hierBranch = property(__hierBranch.value, __hierBranch.set, None, u'Organization Chart Branch Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}chMax uses Python identifier chMax
    __chMax = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'chMax'), 'chMax', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_LayoutVariablePropertySet_httpschemas_openxmlformats_orgdrawingml2006diagramchMax', False)

    
    chMax = property(__chMax.value, __chMax.set, None, u'Maximum Children')


    _ElementMap = {
        __animOne.name() : __animOne,
        __chPref.name() : __chPref,
        __resizeHandles.name() : __resizeHandles,
        __bulletEnabled.name() : __bulletEnabled,
        __animLvl.name() : __animLvl,
        __dir.name() : __dir,
        __orgChart.name() : __orgChart,
        __hierBranch.name() : __hierBranch,
        __chMax.name() : __chMax
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_LayoutVariablePropertySet', CT_LayoutVariablePropertySet)


# Complex type CT_EffectStyleList with content type ELEMENT_ONLY
class CT_EffectStyleList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EffectStyleList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectStyle uses Python identifier effectStyle
    __effectStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectStyle'), 'effectStyle', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectStyleList_httpschemas_openxmlformats_orgdrawingml2006maineffectStyle', True)

    
    effectStyle = property(__effectStyle.value, __effectStyle.set, None, u'Effect Style')


    _ElementMap = {
        __effectStyle.name() : __effectStyle
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EffectStyleList', CT_EffectStyleList)


# Complex type CT_Table with content type ELEMENT_ONLY
class CT_Table (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Table')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tr uses Python identifier tr
    __tr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tr'), 'tr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Table_httpschemas_openxmlformats_orgdrawingml2006maintr', True)

    
    tr = property(__tr.value, __tr.set, None, u'Table Row')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tblPr uses Python identifier tblPr
    __tblPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tblPr'), 'tblPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Table_httpschemas_openxmlformats_orgdrawingml2006maintblPr', False)

    
    tblPr = property(__tblPr.value, __tblPr.set, None, u'Table Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tblGrid uses Python identifier tblGrid
    __tblGrid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tblGrid'), 'tblGrid', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Table_httpschemas_openxmlformats_orgdrawingml2006maintblGrid', False)

    
    tblGrid = property(__tblGrid.value, __tblGrid.set, None, u'Table Grid')


    _ElementMap = {
        __tr.name() : __tr,
        __tblPr.name() : __tblPr,
        __tblGrid.name() : __tblGrid
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Table', CT_Table)


# Complex type CT_StyleMatrix with content type ELEMENT_ONLY
class CT_StyleMatrix (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_StyleMatrix')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bgFillStyleLst uses Python identifier bgFillStyleLst
    __bgFillStyleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bgFillStyleLst'), 'bgFillStyleLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrix_httpschemas_openxmlformats_orgdrawingml2006mainbgFillStyleLst', False)

    
    bgFillStyleLst = property(__bgFillStyleLst.value, __bgFillStyleLst.set, None, u'Background Fill Style List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillStyleLst uses Python identifier fillStyleLst
    __fillStyleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillStyleLst'), 'fillStyleLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrix_httpschemas_openxmlformats_orgdrawingml2006mainfillStyleLst', False)

    
    fillStyleLst = property(__fillStyleLst.value, __fillStyleLst.set, None, u'Fill Style List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectStyleLst uses Python identifier effectStyleLst
    __effectStyleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectStyleLst'), 'effectStyleLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrix_httpschemas_openxmlformats_orgdrawingml2006maineffectStyleLst', False)

    
    effectStyleLst = property(__effectStyleLst.value, __effectStyleLst.set, None, u'Effect Style List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnStyleLst uses Python identifier lnStyleLst
    __lnStyleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnStyleLst'), 'lnStyleLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrix_httpschemas_openxmlformats_orgdrawingml2006mainlnStyleLst', False)

    
    lnStyleLst = property(__lnStyleLst.value, __lnStyleLst.set, None, u'Line Style List')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StyleMatrix_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __bgFillStyleLst.name() : __bgFillStyleLst,
        __fillStyleLst.name() : __fillStyleLst,
        __effectStyleLst.name() : __effectStyleLst,
        __lnStyleLst.name() : __lnStyleLst
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_StyleMatrix', CT_StyleMatrix)


# Complex type CT_TableStyle with content type ELEMENT_ONLY
class CT_TableStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}band1H uses Python identifier band1H
    __band1H = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'band1H'), 'band1H', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainband1H', False)

    
    band1H = property(__band1H.value, __band1H.set, None, u'Band 1 Horizontal')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}firstCol uses Python identifier firstCol
    __firstCol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'firstCol'), 'firstCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainfirstCol', False)

    
    firstCol = property(__firstCol.value, __firstCol.set, None, u'First Column')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}nwCell uses Python identifier nwCell
    __nwCell = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'nwCell'), 'nwCell', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainnwCell', False)

    
    nwCell = property(__nwCell.value, __nwCell.set, None, u'Northwest Cell')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lastRow uses Python identifier lastRow
    __lastRow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lastRow'), 'lastRow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainlastRow', False)

    
    lastRow = property(__lastRow.value, __lastRow.set, None, u'Last Row')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}band2H uses Python identifier band2H
    __band2H = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'band2H'), 'band2H', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainband2H', False)

    
    band2H = property(__band2H.value, __band2H.set, None, u'Band 2 Horizontal')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}seCell uses Python identifier seCell
    __seCell = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'seCell'), 'seCell', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainseCell', False)

    
    seCell = property(__seCell.value, __seCell.set, None, u'Southeast Cell')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}neCell uses Python identifier neCell
    __neCell = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'neCell'), 'neCell', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainneCell', False)

    
    neCell = property(__neCell.value, __neCell.set, None, u'Northeast Cell')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}band1V uses Python identifier band1V
    __band1V = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'band1V'), 'band1V', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainband1V', False)

    
    band1V = property(__band1V.value, __band1V.set, None, u'Band 1 Vertical')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}swCell uses Python identifier swCell
    __swCell = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'swCell'), 'swCell', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainswCell', False)

    
    swCell = property(__swCell.value, __swCell.set, None, u'Southwest Cell')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}band2V uses Python identifier band2V
    __band2V = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'band2V'), 'band2V', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainband2V', False)

    
    band2V = property(__band2V.value, __band2V.set, None, u'Band 2 Vertical')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tblBg uses Python identifier tblBg
    __tblBg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tblBg'), 'tblBg', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006maintblBg', False)

    
    tblBg = property(__tblBg.value, __tblBg.set, None, u'Table Background')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}firstRow uses Python identifier firstRow
    __firstRow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'firstRow'), 'firstRow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainfirstRow', False)

    
    firstRow = property(__firstRow.value, __firstRow.set, None, u'First Row')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lastCol uses Python identifier lastCol
    __lastCol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lastCol'), 'lastCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainlastCol', False)

    
    lastCol = property(__lastCol.value, __lastCol.set, None, u'Last Column')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}wholeTbl uses Python identifier wholeTbl
    __wholeTbl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'wholeTbl'), 'wholeTbl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_httpschemas_openxmlformats_orgdrawingml2006mainwholeTbl', False)

    
    wholeTbl = property(__wholeTbl.value, __wholeTbl.set, None, u'Whole Table')

    
    # Attribute styleName uses Python identifier styleName
    __styleName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'styleName'), 'styleName', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_styleName', pyxb.binding.datatypes.string, required=True)
    
    styleName = property(__styleName.value, __styleName.set, None, u'Name')

    
    # Attribute styleId uses Python identifier styleId
    __styleId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'styleId'), 'styleId', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyle_styleId', _s.ST_Guid, required=True)
    
    styleId = property(__styleId.value, __styleId.set, None, u'Style ID')


    _ElementMap = {
        __band1H.name() : __band1H,
        __firstCol.name() : __firstCol,
        __nwCell.name() : __nwCell,
        __lastRow.name() : __lastRow,
        __band2H.name() : __band2H,
        __extLst.name() : __extLst,
        __seCell.name() : __seCell,
        __neCell.name() : __neCell,
        __band1V.name() : __band1V,
        __swCell.name() : __swCell,
        __band2V.name() : __band2V,
        __tblBg.name() : __tblBg,
        __firstRow.name() : __firstRow,
        __lastCol.name() : __lastCol,
        __wholeTbl.name() : __wholeTbl
    }
    _AttributeMap = {
        __styleName.name() : __styleName,
        __styleId.name() : __styleId
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableStyle', CT_TableStyle)


# Complex type CT_Name with content type EMPTY
class CT_Name (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Name')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Name_lang', pyxb.binding.datatypes.string, unicode_default=u'')
    
    lang = property(__lang.value, __lang.set, None, u'Language')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Name_val', pyxb.binding.datatypes.string, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lang.name() : __lang,
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Name', CT_Name)


# Complex type CT_TileInfoProperties with content type EMPTY
class CT_TileInfoProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TileInfoProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute sx uses Python identifier sx
    __sx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sx'), 'sx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TileInfoProperties_sx', ST_Percentage)
    
    sx = property(__sx.value, __sx.set, None, u'Horizontal Ratio')

    
    # Attribute ty uses Python identifier ty
    __ty = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ty'), 'ty', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TileInfoProperties_ty', ST_Coordinate)
    
    ty = property(__ty.value, __ty.set, None, u'Vertical Offset')

    
    # Attribute tx uses Python identifier tx
    __tx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tx'), 'tx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TileInfoProperties_tx', ST_Coordinate)
    
    tx = property(__tx.value, __tx.set, None, u'Horizontal Offset')

    
    # Attribute sy uses Python identifier sy
    __sy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sy'), 'sy', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TileInfoProperties_sy', ST_Percentage)
    
    sy = property(__sy.value, __sy.set, None, u'Vertical Ratio')

    
    # Attribute flip uses Python identifier flip
    __flip = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'flip'), 'flip', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TileInfoProperties_flip', ST_TileFlipMode)
    
    flip = property(__flip.value, __flip.set, None, u'Tile Flipping')

    
    # Attribute algn uses Python identifier algn
    __algn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algn'), 'algn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TileInfoProperties_algn', ST_RectAlignment)
    
    algn = property(__algn.value, __algn.set, None, u'Alignment')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __sx.name() : __sx,
        __ty.name() : __ty,
        __tx.name() : __tx,
        __sy.name() : __sy,
        __flip.name() : __flip,
        __algn.name() : __algn
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TileInfoProperties', CT_TileInfoProperties)


# Complex type CT_CTName with content type EMPTY
class CT_CTName (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_CTName')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTName_lang', pyxb.binding.datatypes.string, unicode_default=u'')
    
    lang = property(__lang.value, __lang.set, None, u'Language')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTName_val', pyxb.binding.datatypes.string, required=True)
    
    val = property(__val.value, __val.set, None, u'Description Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lang.name() : __lang,
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_CTName', CT_CTName)


# Complex type CT_Description with content type EMPTY
class CT_Description (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Description')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Description_lang', pyxb.binding.datatypes.string, unicode_default=u'')
    
    lang = property(__lang.value, __lang.set, None, u'Language')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Description_val', pyxb.binding.datatypes.string, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lang.name() : __lang,
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Description', CT_Description)


# Complex type CT_Vector3D with content type EMPTY
class CT_Vector3D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Vector3D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute dz uses Python identifier dz
    __dz = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dz'), 'dz', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Vector3D_dz', ST_Coordinate, required=True)
    
    dz = property(__dz.value, __dz.set, None, u'Distance along Z-axis in 3D')

    
    # Attribute dx uses Python identifier dx
    __dx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dx'), 'dx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Vector3D_dx', ST_Coordinate, required=True)
    
    dx = property(__dx.value, __dx.set, None, u'Distance along X-axis in 3D')

    
    # Attribute dy uses Python identifier dy
    __dy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dy'), 'dy', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Vector3D_dy', ST_Coordinate, required=True)
    
    dy = property(__dy.value, __dy.set, None, u'Distance along Y-axis in 3D')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __dz.name() : __dz,
        __dx.name() : __dx,
        __dy.name() : __dy
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Vector3D', CT_Vector3D)


# Complex type CT_TableStyleCellStyle with content type ELEMENT_ONLY
class CT_TableStyleCellStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableStyleCellStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cell3D uses Python identifier cell3D
    __cell3D = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cell3D'), 'cell3D', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleCellStyle_httpschemas_openxmlformats_orgdrawingml2006maincell3D', False)

    
    cell3D = property(__cell3D.value, __cell3D.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tcBdr uses Python identifier tcBdr
    __tcBdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tcBdr'), 'tcBdr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleCellStyle_httpschemas_openxmlformats_orgdrawingml2006maintcBdr', False)

    
    tcBdr = property(__tcBdr.value, __tcBdr.set, None, u'Table Cell Borders')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillRef uses Python identifier fillRef
    __fillRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef'), 'fillRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleCellStyle_httpschemas_openxmlformats_orgdrawingml2006mainfillRef', False)

    
    fillRef = property(__fillRef.value, __fillRef.set, None, u'Fill Reference')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fill uses Python identifier fill
    __fill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fill'), 'fill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableStyleCellStyle_httpschemas_openxmlformats_orgdrawingml2006mainfill', False)

    
    fill = property(__fill.value, __fill.set, None, u'Fill')


    _ElementMap = {
        __cell3D.name() : __cell3D,
        __tcBdr.name() : __tcBdr,
        __fillRef.name() : __fillRef,
        __fill.name() : __fill
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableStyleCellStyle', CT_TableStyleCellStyle)


# Complex type CT_EffectContainer with content type ELEMENT_ONLY
class CT_EffectContainer (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EffectContainer')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cont uses Python identifier cont
    __cont = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cont'), 'cont', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006maincont', True)

    
    cont = property(__cont.value, __cont.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effect uses Python identifier effect
    __effect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effect'), 'effect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006maineffect', True)

    
    effect = property(__effect.value, __effect.set, None, u'Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaOutset uses Python identifier alphaOutset
    __alphaOutset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOutset'), 'alphaOutset', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaOutset', True)

    
    alphaOutset = property(__alphaOutset.value, __alphaOutset.set, None, u'Alpha Inset/Outset Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstShdw uses Python identifier prstShdw
    __prstShdw = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstShdw'), 'prstShdw', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainprstShdw', True)

    
    prstShdw = property(__prstShdw.value, __prstShdw.set, None, u'Preset Shadow')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaFloor uses Python identifier alphaFloor
    __alphaFloor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaFloor'), 'alphaFloor', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaFloor', True)

    
    alphaFloor = property(__alphaFloor.value, __alphaFloor.set, None, u'Alpha Floor Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}relOff uses Python identifier relOff
    __relOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'relOff'), 'relOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainrelOff', True)

    
    relOff = property(__relOff.value, __relOff.set, None, u'Relative Offset Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}softEdge uses Python identifier softEdge
    __softEdge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'softEdge'), 'softEdge', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainsoftEdge', True)

    
    softEdge = property(__softEdge.value, __softEdge.set, None, u'Soft Edge Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}xfrm uses Python identifier xfrm
    __xfrm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), 'xfrm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainxfrm', True)

    
    xfrm = property(__xfrm.value, __xfrm.set, None, u'Transform Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}innerShdw uses Python identifier innerShdw
    __innerShdw = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'innerShdw'), 'innerShdw', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006maininnerShdw', True)

    
    innerShdw = property(__innerShdw.value, __innerShdw.set, None, u'Inner Shadow Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaRepl uses Python identifier alphaRepl
    __alphaRepl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaRepl'), 'alphaRepl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaRepl', True)

    
    alphaRepl = property(__alphaRepl.value, __alphaRepl.set, None, u'Alpha Replace Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blend uses Python identifier blend
    __blend = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blend'), 'blend', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainblend', True)

    
    blend = property(__blend.value, __blend.set, None, u'Blend Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blur uses Python identifier blur
    __blur = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blur'), 'blur', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainblur', True)

    
    blur = property(__blur.value, __blur.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}biLevel uses Python identifier biLevel
    __biLevel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'biLevel'), 'biLevel', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainbiLevel', True)

    
    biLevel = property(__biLevel.value, __biLevel.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrChange uses Python identifier clrChange
    __clrChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrChange'), 'clrChange', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainclrChange', True)

    
    clrChange = property(__clrChange.value, __clrChange.set, None, u'Color Change Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, u'Alpha Modulate Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrRepl uses Python identifier clrRepl
    __clrRepl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrRepl'), 'clrRepl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainclrRepl', True)

    
    clrRepl = property(__clrRepl.value, __clrRepl.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaBiLevel uses Python identifier alphaBiLevel
    __alphaBiLevel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaBiLevel'), 'alphaBiLevel', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaBiLevel', True)

    
    alphaBiLevel = property(__alphaBiLevel.value, __alphaBiLevel.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}duotone uses Python identifier duotone
    __duotone = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'duotone'), 'duotone', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainduotone', True)

    
    duotone = property(__duotone.value, __duotone.set, None, u'Duotone Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaInv uses Python identifier alphaInv
    __alphaInv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaInv'), 'alphaInv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaInv', True)

    
    alphaInv = property(__alphaInv.value, __alphaInv.set, None, u'Alpha Inverse Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fill uses Python identifier fill
    __fill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fill'), 'fill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainfill', True)

    
    fill = property(__fill.value, __fill.set, None, u'Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}reflection uses Python identifier reflection
    __reflection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'reflection'), 'reflection', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainreflection', True)

    
    reflection = property(__reflection.value, __reflection.set, None, u'Reflection Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillOverlay uses Python identifier fillOverlay
    __fillOverlay = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay'), 'fillOverlay', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainfillOverlay', True)

    
    fillOverlay = property(__fillOverlay.value, __fillOverlay.set, None, u'Fill Overlay Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaModFix uses Python identifier alphaModFix
    __alphaModFix = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaModFix'), 'alphaModFix', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaModFix', True)

    
    alphaModFix = property(__alphaModFix.value, __alphaModFix.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}glow uses Python identifier glow
    __glow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'glow'), 'glow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainglow', True)

    
    glow = property(__glow.value, __glow.set, None, u'Glow Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaCeiling uses Python identifier alphaCeiling
    __alphaCeiling = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaCeiling'), 'alphaCeiling', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainalphaCeiling', True)

    
    alphaCeiling = property(__alphaCeiling.value, __alphaCeiling.set, None, u'Alpha Ceiling Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grayscl uses Python identifier grayscl
    __grayscl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grayscl'), 'grayscl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006maingrayscl', True)

    
    grayscl = property(__grayscl.value, __grayscl.set, None, u'Gray Scale Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}outerShdw uses Python identifier outerShdw
    __outerShdw = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'outerShdw'), 'outerShdw', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainouterShdw', True)

    
    outerShdw = property(__outerShdw.value, __outerShdw.set, None, u'Outer Shadow Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hsl uses Python identifier hsl
    __hsl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hsl'), 'hsl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_httpschemas_openxmlformats_orgdrawingml2006mainhsl', True)

    
    hsl = property(__hsl.value, __hsl.set, None, u'Hue Saturation Luminance Effect')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_type', ST_EffectContainerType, unicode_default=u'sib')
    
    type = property(__type.value, __type.set, None, u'Effect Container Type')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectContainer_name', pyxb.binding.datatypes.token)
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __cont.name() : __cont,
        __effect.name() : __effect,
        __alphaOutset.name() : __alphaOutset,
        __lum.name() : __lum,
        __prstShdw.name() : __prstShdw,
        __alphaFloor.name() : __alphaFloor,
        __relOff.name() : __relOff,
        __softEdge.name() : __softEdge,
        __tint.name() : __tint,
        __xfrm.name() : __xfrm,
        __innerShdw.name() : __innerShdw,
        __alphaRepl.name() : __alphaRepl,
        __blend.name() : __blend,
        __blur.name() : __blur,
        __biLevel.name() : __biLevel,
        __clrChange.name() : __clrChange,
        __alphaMod.name() : __alphaMod,
        __clrRepl.name() : __clrRepl,
        __alphaBiLevel.name() : __alphaBiLevel,
        __duotone.name() : __duotone,
        __alphaInv.name() : __alphaInv,
        __fill.name() : __fill,
        __reflection.name() : __reflection,
        __fillOverlay.name() : __fillOverlay,
        __alphaModFix.name() : __alphaModFix,
        __glow.name() : __glow,
        __alphaCeiling.name() : __alphaCeiling,
        __grayscl.name() : __grayscl,
        __outerShdw.name() : __outerShdw,
        __hsl.name() : __hsl
    }
    _AttributeMap = {
        __type.name() : __type,
        __name.name() : __name
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EffectContainer', CT_EffectContainer)


# Complex type CT_QuickTimeFile with content type ELEMENT_ONLY
class CT_QuickTimeFile (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_QuickTimeFile')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_QuickTimeFile_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}link uses Python identifier link
    __link = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'link'), 'link', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_QuickTimeFile_httpschemas_openxmlformats_orgofficeDocument2006relationshipslink', _r.ST_RelationshipId, required=True)
    
    link = property(__link.value, __link.set, None, None)


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __link.name() : __link
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_QuickTimeFile', CT_QuickTimeFile)


# Complex type CT_GroupFillProperties with content type EMPTY
class CT_GroupFillProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GroupFillProperties')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GroupFillProperties', CT_GroupFillProperties)


# Complex type CT_TablePartStyle with content type ELEMENT_ONLY
class CT_TablePartStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TablePartStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tcStyle uses Python identifier tcStyle
    __tcStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tcStyle'), 'tcStyle', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TablePartStyle_httpschemas_openxmlformats_orgdrawingml2006maintcStyle', False)

    
    tcStyle = property(__tcStyle.value, __tcStyle.set, None, u'Table Cell Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tcTxStyle uses Python identifier tcTxStyle
    __tcTxStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tcTxStyle'), 'tcTxStyle', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TablePartStyle_httpschemas_openxmlformats_orgdrawingml2006maintcTxStyle', False)

    
    tcTxStyle = property(__tcTxStyle.value, __tcTxStyle.set, None, u'Table Cell Text Style')


    _ElementMap = {
        __tcStyle.name() : __tcStyle,
        __tcTxStyle.name() : __tcTxStyle
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TablePartStyle', CT_TablePartStyle)


# Complex type CT_ColorMRU with content type ELEMENT_ONLY
class CT_ColorMRU (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorMRU')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMRU_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', True)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMRU_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', True)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMRU_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', True)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMRU_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', True)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMRU_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', True)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMRU_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', True)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')


    _ElementMap = {
        __scrgbClr.name() : __scrgbClr,
        __prstClr.name() : __prstClr,
        __srgbClr.name() : __srgbClr,
        __schemeClr.name() : __schemeClr,
        __sysClr.name() : __sysClr,
        __hslClr.name() : __hslClr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorMRU', CT_ColorMRU)


# Complex type CT_AlphaFloorEffect with content type EMPTY
class CT_AlphaFloorEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaFloorEffect')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaFloorEffect', CT_AlphaFloorEffect)


# Complex type CT_Otherwise with content type ELEMENT_ONLY
class CT_Otherwise (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Otherwise')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}choose uses Python identifier choose
    __choose = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'choose'), 'choose', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramchoose', True)

    
    choose = property(__choose.value, __choose.set, None, u'Choose Element')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', True)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Extension List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}constrLst uses Python identifier constrLst
    __constrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), 'constrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramconstrLst', True)

    
    constrLst = property(__constrLst.value, __constrLst.set, None, u'Constraint List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}ruleLst uses Python identifier ruleLst
    __ruleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), 'ruleLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramruleLst', True)

    
    ruleLst = property(__ruleLst.value, __ruleLst.set, None, u'Rule List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}presOf uses Python identifier presOf
    __presOf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), 'presOf', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagrampresOf', True)

    
    presOf = property(__presOf.value, __presOf.set, None, u'Presentation Of')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}forEach uses Python identifier forEach
    __forEach = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), 'forEach', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramforEach', True)

    
    forEach = property(__forEach.value, __forEach.set, None, u'For Each')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}alg uses Python identifier alg
    __alg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'alg'), 'alg', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramalg', True)

    
    alg = property(__alg.value, __alg.set, None, u'Algorithm')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}layoutNode uses Python identifier layoutNode
    __layoutNode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), 'layoutNode', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramlayoutNode', True)

    
    layoutNode = property(__layoutNode.value, __layoutNode.set, None, u'Layout Node')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}shape uses Python identifier shape
    __shape = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'shape'), 'shape', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_httpschemas_openxmlformats_orgdrawingml2006diagramshape', True)

    
    shape = property(__shape.value, __shape.set, None, u'Shape')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Otherwise_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __choose.name() : __choose,
        __extLst.name() : __extLst,
        __constrLst.name() : __constrLst,
        __ruleLst.name() : __ruleLst,
        __presOf.name() : __presOf,
        __forEach.name() : __forEach,
        __alg.name() : __alg,
        __layoutNode.name() : __layoutNode,
        __shape.name() : __shape
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Otherwise', CT_Otherwise)


# Complex type CT_PathShadeProperties with content type ELEMENT_ONLY
class CT_PathShadeProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PathShadeProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillToRect uses Python identifier fillToRect
    __fillToRect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillToRect'), 'fillToRect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PathShadeProperties_httpschemas_openxmlformats_orgdrawingml2006mainfillToRect', False)

    
    fillToRect = property(__fillToRect.value, __fillToRect.set, None, u'Fill To Rectangle')

    
    # Attribute path uses Python identifier path
    __path = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'path'), 'path', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PathShadeProperties_path', ST_PathShadeType)
    
    path = property(__path.value, __path.set, None, u'Gradient Fill Path')


    _ElementMap = {
        __fillToRect.name() : __fillToRect
    }
    _AttributeMap = {
        __path.name() : __path
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PathShadeProperties', CT_PathShadeProperties)


# Complex type CT_DataModel with content type ELEMENT_ONLY
class CT_DataModel (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_DataModel')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DataModel_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}ptLst uses Python identifier ptLst
    __ptLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'ptLst'), 'ptLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DataModel_httpschemas_openxmlformats_orgdrawingml2006diagramptLst', False)

    
    ptLst = property(__ptLst.value, __ptLst.set, None, u'Point List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}cxnLst uses Python identifier cxnLst
    __cxnLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'cxnLst'), 'cxnLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DataModel_httpschemas_openxmlformats_orgdrawingml2006diagramcxnLst', False)

    
    cxnLst = property(__cxnLst.value, __cxnLst.set, None, u'Connection List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}whole uses Python identifier whole
    __whole = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'whole'), 'whole', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DataModel_httpschemas_openxmlformats_orgdrawingml2006diagramwhole', False)

    
    whole = property(__whole.value, __whole.set, None, u'Whole E2O Formatting')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}bg uses Python identifier bg
    __bg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'bg'), 'bg', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DataModel_httpschemas_openxmlformats_orgdrawingml2006diagrambg', False)

    
    bg = property(__bg.value, __bg.set, None, u'Background Formatting')


    _ElementMap = {
        __extLst.name() : __extLst,
        __ptLst.name() : __ptLst,
        __cxnLst.name() : __cxnLst,
        __whole.name() : __whole,
        __bg.name() : __bg
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_DataModel', CT_DataModel)


# Complex type CT_ForEach with content type ELEMENT_ONLY
class CT_ForEach (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ForEach')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}presOf uses Python identifier presOf
    __presOf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), 'presOf', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagrampresOf', True)

    
    presOf = property(__presOf.value, __presOf.set, None, u'Presentation Of')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', True)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}constrLst uses Python identifier constrLst
    __constrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), 'constrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramconstrLst', True)

    
    constrLst = property(__constrLst.value, __constrLst.set, None, u'Constraint List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}choose uses Python identifier choose
    __choose = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'choose'), 'choose', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramchoose', True)

    
    choose = property(__choose.value, __choose.set, None, u'Choose Element')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}ruleLst uses Python identifier ruleLst
    __ruleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), 'ruleLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramruleLst', True)

    
    ruleLst = property(__ruleLst.value, __ruleLst.set, None, u'Rule List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}alg uses Python identifier alg
    __alg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'alg'), 'alg', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramalg', True)

    
    alg = property(__alg.value, __alg.set, None, u'Algorithm')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}layoutNode uses Python identifier layoutNode
    __layoutNode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), 'layoutNode', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramlayoutNode', True)

    
    layoutNode = property(__layoutNode.value, __layoutNode.set, None, u'Layout Node')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}forEach uses Python identifier forEach
    __forEach = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), 'forEach', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramforEach', True)

    
    forEach = property(__forEach.value, __forEach.set, None, u'For Each')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}shape uses Python identifier shape
    __shape = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'shape'), 'shape', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_httpschemas_openxmlformats_orgdrawingml2006diagramshape', True)

    
    shape = property(__shape.value, __shape.set, None, u'Shape')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')

    
    # Attribute st uses Python identifier st
    __st = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'st'), 'st', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_st', ST_Ints, unicode_default=u'1')
    
    st = property(__st.value, __st.set, None, u'Start')

    
    # Attribute hideLastTrans uses Python identifier hideLastTrans
    __hideLastTrans = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hideLastTrans'), 'hideLastTrans', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_hideLastTrans', ST_Booleans, unicode_default=u'true')
    
    hideLastTrans = property(__hideLastTrans.value, __hideLastTrans.set, None, u'Hide Last Transition')

    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_ref', pyxb.binding.datatypes.string, unicode_default=u'')
    
    ref = property(__ref.value, __ref.set, None, u'Reference')

    
    # Attribute cnt uses Python identifier cnt
    __cnt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cnt'), 'cnt', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_cnt', ST_UnsignedInts, unicode_default=u'0')
    
    cnt = property(__cnt.value, __cnt.set, None, u'Count')

    
    # Attribute step uses Python identifier step
    __step = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'step'), 'step', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_step', ST_Ints, unicode_default=u'1')
    
    step = property(__step.value, __step.set, None, u'Step')

    
    # Attribute axis uses Python identifier axis
    __axis = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axis'), 'axis', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_axis', ST_AxisTypes, unicode_default=u'none')
    
    axis = property(__axis.value, __axis.set, None, u'Axis')

    
    # Attribute ptType uses Python identifier ptType
    __ptType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ptType'), 'ptType', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ForEach_ptType', ST_ElementTypes, unicode_default=u'all')
    
    ptType = property(__ptType.value, __ptType.set, None, u'Data Point Type')


    _ElementMap = {
        __presOf.name() : __presOf,
        __extLst.name() : __extLst,
        __constrLst.name() : __constrLst,
        __choose.name() : __choose,
        __ruleLst.name() : __ruleLst,
        __alg.name() : __alg,
        __layoutNode.name() : __layoutNode,
        __forEach.name() : __forEach,
        __shape.name() : __shape
    }
    _AttributeMap = {
        __name.name() : __name,
        __st.name() : __st,
        __hideLastTrans.name() : __hideLastTrans,
        __ref.name() : __ref,
        __cnt.name() : __cnt,
        __step.name() : __step,
        __axis.name() : __axis,
        __ptType.name() : __ptType
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ForEach', CT_ForEach)


# Complex type CT_FontReference with content type ELEMENT_ONLY
class CT_FontReference (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FontReference')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontReference_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontReference_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontReference_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontReference_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontReference_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontReference_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Attribute idx uses Python identifier idx
    __idx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'idx'), 'idx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontReference_idx', ST_FontCollectionIndex, required=True)
    
    idx = property(__idx.value, __idx.set, None, u'Identifier')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr,
        __scrgbClr.name() : __scrgbClr,
        __hslClr.name() : __hslClr,
        __sysClr.name() : __sysClr
    }
    _AttributeMap = {
        __idx.name() : __idx
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FontReference', CT_FontReference)


# Complex type CT_Ratio with content type EMPTY
class CT_Ratio (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Ratio')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute d uses Python identifier d
    __d = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'd'), 'd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Ratio_d', pyxb.binding.datatypes.long, required=True)
    
    d = property(__d.value, __d.set, None, u'Denominator')

    
    # Attribute n uses Python identifier n
    __n = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'n'), 'n', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Ratio_n', pyxb.binding.datatypes.long, required=True)
    
    n = property(__n.value, __n.set, None, u'Numerator')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __d.name() : __d,
        __n.name() : __n
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Ratio', CT_Ratio)


# Complex type CT_TextCharBullet with content type EMPTY
class CT_TextCharBullet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextCharBullet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute char uses Python identifier char
    __char = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'char'), 'char', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharBullet_char', pyxb.binding.datatypes.string, required=True)
    
    char = property(__char.value, __char.set, None, u'Bullet Character')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __char.name() : __char
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextCharBullet', CT_TextCharBullet)


# Complex type CT_EmptyElement with content type EMPTY
class CT_EmptyElement (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EmptyElement')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EmptyElement', CT_EmptyElement)


# Complex type CT_TextAutonumberBullet with content type EMPTY
class CT_TextAutonumberBullet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextAutonumberBullet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute startAt uses Python identifier startAt
    __startAt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'startAt'), 'startAt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextAutonumberBullet_startAt', ST_TextBulletStartAtNum, unicode_default=u'1')
    
    startAt = property(__startAt.value, __startAt.set, None, u'Start Numbering At')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextAutonumberBullet_type', ST_TextAutonumberScheme, required=True)
    
    type = property(__type.value, __type.set, None, u'Bullet Autonumbering Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __startAt.name() : __startAt,
        __type.name() : __type
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextAutonumberBullet', CT_TextAutonumberBullet)


# Complex type CT_GroupTransform2D with content type ELEMENT_ONLY
class CT_GroupTransform2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GroupTransform2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}chExt uses Python identifier chExt
    __chExt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'chExt'), 'chExt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupTransform2D_httpschemas_openxmlformats_orgdrawingml2006mainchExt', False)

    
    chExt = property(__chExt.value, __chExt.set, None, u'Child Extents')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}off uses Python identifier off
    __off = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'off'), 'off', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupTransform2D_httpschemas_openxmlformats_orgdrawingml2006mainoff', False)

    
    off = property(__off.value, __off.set, None, u'Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}chOff uses Python identifier chOff
    __chOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'chOff'), 'chOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupTransform2D_httpschemas_openxmlformats_orgdrawingml2006mainchOff', False)

    
    chOff = property(__chOff.value, __chOff.set, None, u'Child Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ext uses Python identifier ext
    __ext = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ext'), 'ext', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupTransform2D_httpschemas_openxmlformats_orgdrawingml2006mainext', False)

    
    ext = property(__ext.value, __ext.set, None, u'Extents')

    
    # Attribute flipV uses Python identifier flipV
    __flipV = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'flipV'), 'flipV', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupTransform2D_flipV', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    flipV = property(__flipV.value, __flipV.set, None, u'Vertical Flip')

    
    # Attribute rot uses Python identifier rot
    __rot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rot'), 'rot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupTransform2D_rot', ST_Angle, unicode_default=u'0')
    
    rot = property(__rot.value, __rot.set, None, u'Rotation')

    
    # Attribute flipH uses Python identifier flipH
    __flipH = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'flipH'), 'flipH', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupTransform2D_flipH', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    flipH = property(__flipH.value, __flipH.set, None, u'Horizontal Flip')


    _ElementMap = {
        __chExt.name() : __chExt,
        __off.name() : __off,
        __chOff.name() : __chOff,
        __ext.name() : __ext
    }
    _AttributeMap = {
        __flipV.name() : __flipV,
        __rot.name() : __rot,
        __flipH.name() : __flipH
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GroupTransform2D', CT_GroupTransform2D)


# Complex type CT_AlphaBiLevelEffect with content type EMPTY
class CT_AlphaBiLevelEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaBiLevelEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute thresh uses Python identifier thresh
    __thresh = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'thresh'), 'thresh', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaBiLevelEffect_thresh', ST_PositiveFixedPercentage, required=True)
    
    thresh = property(__thresh.value, __thresh.set, None, u'Threshold')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __thresh.name() : __thresh
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaBiLevelEffect', CT_AlphaBiLevelEffect)


# Complex type CT_PictureLocking with content type ELEMENT_ONLY
class CT_PictureLocking (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PictureLocking')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute noMove uses Python identifier noMove
    __noMove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noMove'), 'noMove', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noMove', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noMove = property(__noMove.value, __noMove.set, None, u'Disallow Shape Movement')

    
    # Attribute noCrop uses Python identifier noCrop
    __noCrop = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noCrop'), 'noCrop', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noCrop', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noCrop = property(__noCrop.value, __noCrop.set, None, u'Disallow Crop Changes')

    
    # Attribute noRot uses Python identifier noRot
    __noRot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noRot'), 'noRot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noRot', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noRot = property(__noRot.value, __noRot.set, None, u'Disallow Shape Rotation')

    
    # Attribute noSelect uses Python identifier noSelect
    __noSelect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noSelect'), 'noSelect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noSelect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noSelect = property(__noSelect.value, __noSelect.set, None, u'Disallow Shape Selection')

    
    # Attribute noResize uses Python identifier noResize
    __noResize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noResize'), 'noResize', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noResize', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noResize = property(__noResize.value, __noResize.set, None, u'Disallow Shape Resize')

    
    # Attribute noGrp uses Python identifier noGrp
    __noGrp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noGrp'), 'noGrp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noGrp', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noGrp = property(__noGrp.value, __noGrp.set, None, u'Disallow Shape Grouping')

    
    # Attribute noChangeAspect uses Python identifier noChangeAspect
    __noChangeAspect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeAspect'), 'noChangeAspect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noChangeAspect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeAspect = property(__noChangeAspect.value, __noChangeAspect.set, None, u'Disallow Aspect Ratio Change')

    
    # Attribute noChangeShapeType uses Python identifier noChangeShapeType
    __noChangeShapeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeShapeType'), 'noChangeShapeType', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noChangeShapeType', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeShapeType = property(__noChangeShapeType.value, __noChangeShapeType.set, None, u'Disallow Shape Type Change')

    
    # Attribute noChangeArrowheads uses Python identifier noChangeArrowheads
    __noChangeArrowheads = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeArrowheads'), 'noChangeArrowheads', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noChangeArrowheads', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeArrowheads = property(__noChangeArrowheads.value, __noChangeArrowheads.set, None, u'Disallow Arrowhead Changes')

    
    # Attribute noEditPoints uses Python identifier noEditPoints
    __noEditPoints = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noEditPoints'), 'noEditPoints', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noEditPoints', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noEditPoints = property(__noEditPoints.value, __noEditPoints.set, None, u'Disallow Shape Point Editing')

    
    # Attribute noAdjustHandles uses Python identifier noAdjustHandles
    __noAdjustHandles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noAdjustHandles'), 'noAdjustHandles', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PictureLocking_noAdjustHandles', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noAdjustHandles = property(__noAdjustHandles.value, __noAdjustHandles.set, None, u'Disallow Showing Adjust Handles')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __noMove.name() : __noMove,
        __noCrop.name() : __noCrop,
        __noRot.name() : __noRot,
        __noSelect.name() : __noSelect,
        __noResize.name() : __noResize,
        __noGrp.name() : __noGrp,
        __noChangeAspect.name() : __noChangeAspect,
        __noChangeShapeType.name() : __noChangeShapeType,
        __noChangeArrowheads.name() : __noChangeArrowheads,
        __noEditPoints.name() : __noEditPoints,
        __noAdjustHandles.name() : __noAdjustHandles
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PictureLocking', CT_PictureLocking)


# Complex type CT_SchemeColor with content type ELEMENT_ONLY
class CT_SchemeColor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_SchemeColor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sat uses Python identifier sat
    __sat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), 'sat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainsat', True)

    
    sat = property(__sat.value, __sat.set, None, u'Saturation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satMod uses Python identifier satMod
    __satMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), 'satMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainsatMod', True)

    
    satMod = property(__satMod.value, __satMod.set, None, u'Saturation Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gamma uses Python identifier gamma
    __gamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), 'gamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maingamma', True)

    
    gamma = property(__gamma.value, __gamma.set, None, u'Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}satOff uses Python identifier satOff
    __satOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), 'satOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainsatOff', True)

    
    satOff = property(__satOff.value, __satOff.set, None, u'Saturation Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lum uses Python identifier lum
    __lum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainlum', True)

    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenMod uses Python identifier greenMod
    __greenMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), 'greenMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maingreenMod', True)

    
    greenMod = property(__greenMod.value, __greenMod.set, None, u'Green Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumOff uses Python identifier lumOff
    __lumOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), 'lumOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainlumOff', True)

    
    lumOff = property(__lumOff.value, __lumOff.set, None, u'Luminance Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lumMod uses Python identifier lumMod
    __lumMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), 'lumMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainlumMod', True)

    
    lumMod = property(__lumMod.value, __lumMod.set, None, u'Luminance Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}red uses Python identifier red
    __red = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), 'red', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainred', True)

    
    red = property(__red.value, __red.set, None, u'Red')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redOff uses Python identifier redOff
    __redOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), 'redOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainredOff', True)

    
    redOff = property(__redOff.value, __redOff.set, None, u'Red Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}redMod uses Python identifier redMod
    __redMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), 'redMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainredMod', True)

    
    redMod = property(__redMod.value, __redMod.set, None, u'Red Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blue uses Python identifier blue
    __blue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), 'blue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainblue', True)

    
    blue = property(__blue.value, __blue.set, None, u'Blue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}green uses Python identifier green
    __green = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), 'green', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maingreen', True)

    
    green = property(__green.value, __green.set, None, u'Green')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}greenOff uses Python identifier greenOff
    __greenOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), 'greenOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maingreenOff', True)

    
    greenOff = property(__greenOff.value, __greenOff.set, None, u'Green Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}shade uses Python identifier shade
    __shade = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), 'shade', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainshade', True)

    
    shade = property(__shade.value, __shade.set, None, u'Shade')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}comp uses Python identifier comp
    __comp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), 'comp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maincomp', True)

    
    comp = property(__comp.value, __comp.set, None, u'Complement')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}inv uses Python identifier inv
    __inv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), 'inv', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maininv', True)

    
    inv = property(__inv.value, __inv.set, None, u'Inverse')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaOff uses Python identifier alphaOff
    __alphaOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), 'alphaOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaOff', True)

    
    alphaOff = property(__alphaOff.value, __alphaOff.set, None, u'Alpha Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueOff uses Python identifier blueOff
    __blueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), 'blueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainblueOff', True)

    
    blueOff = property(__blueOff.value, __blueOff.set, None, u'Blue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gray uses Python identifier gray
    __gray = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), 'gray', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maingray', True)

    
    gray = property(__gray.value, __gray.set, None, u'Gray')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alpha uses Python identifier alpha
    __alpha = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), 'alpha', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainalpha', True)

    
    alpha = property(__alpha.value, __alpha.set, None, u'Alpha')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}invGamma uses Python identifier invGamma
    __invGamma = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), 'invGamma', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maininvGamma', True)

    
    invGamma = property(__invGamma.value, __invGamma.set, None, u'Inverse Gamma')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tint uses Python identifier tint
    __tint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), 'tint', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006maintint', True)

    
    tint = property(__tint.value, __tint.set, None, u'Tint')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}alphaMod uses Python identifier alphaMod
    __alphaMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), 'alphaMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainalphaMod', True)

    
    alphaMod = property(__alphaMod.value, __alphaMod.set, None, u'Alpha Modulation')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hue uses Python identifier hue
    __hue = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainhue', True)

    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blueMod uses Python identifier blueMod
    __blueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), 'blueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainblueMod', True)

    
    blueMod = property(__blueMod.value, __blueMod.set, None, u'Blue Modification')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueOff uses Python identifier hueOff
    __hueOff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), 'hueOff', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainhueOff', True)

    
    hueOff = property(__hueOff.value, __hueOff.set, None, u'Hue Offset')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hueMod uses Python identifier hueMod
    __hueMod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), 'hueMod', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_httpschemas_openxmlformats_orgdrawingml2006mainhueMod', True)

    
    hueMod = property(__hueMod.value, __hueMod.set, None, u'Hue Modulate')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SchemeColor_val', ST_SchemeColorVal, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        __sat.name() : __sat,
        __satMod.name() : __satMod,
        __gamma.name() : __gamma,
        __satOff.name() : __satOff,
        __lum.name() : __lum,
        __greenMod.name() : __greenMod,
        __lumOff.name() : __lumOff,
        __lumMod.name() : __lumMod,
        __red.name() : __red,
        __redOff.name() : __redOff,
        __redMod.name() : __redMod,
        __blue.name() : __blue,
        __green.name() : __green,
        __greenOff.name() : __greenOff,
        __shade.name() : __shade,
        __comp.name() : __comp,
        __inv.name() : __inv,
        __alphaOff.name() : __alphaOff,
        __blueOff.name() : __blueOff,
        __gray.name() : __gray,
        __alpha.name() : __alpha,
        __invGamma.name() : __invGamma,
        __tint.name() : __tint,
        __alphaMod.name() : __alphaMod,
        __hue.name() : __hue,
        __blueMod.name() : __blueMod,
        __hueOff.name() : __hueOff,
        __hueMod.name() : __hueMod
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_SchemeColor', CT_SchemeColor)


# Complex type CT_NonVisualGraphicFrameProperties with content type ELEMENT_ONLY
class CT_NonVisualGraphicFrameProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_NonVisualGraphicFrameProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualGraphicFrameProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}graphicFrameLocks uses Python identifier graphicFrameLocks
    __graphicFrameLocks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicFrameLocks'), 'graphicFrameLocks', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualGraphicFrameProperties_httpschemas_openxmlformats_orgdrawingml2006maingraphicFrameLocks', False)

    
    graphicFrameLocks = property(__graphicFrameLocks.value, __graphicFrameLocks.set, None, u'Graphic Frame Locks')


    _ElementMap = {
        __extLst.name() : __extLst,
        __graphicFrameLocks.name() : __graphicFrameLocks
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_NonVisualGraphicFrameProperties', CT_NonVisualGraphicFrameProperties)


# Complex type CT_GrayscaleEffect with content type EMPTY
class CT_GrayscaleEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GrayscaleEffect')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GrayscaleEffect', CT_GrayscaleEffect)


# Complex type CT_Shape with content type ELEMENT_ONLY
class CT_Shape (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Shape')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}adjLst uses Python identifier adjLst
    __adjLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'adjLst'), 'adjLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_httpschemas_openxmlformats_orgdrawingml2006diagramadjLst', False)

    
    adjLst = property(__adjLst.value, __adjLst.set, None, u'Shape Adjust List')

    
    # Attribute lkTxEntry uses Python identifier lkTxEntry
    __lkTxEntry = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lkTxEntry'), 'lkTxEntry', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_lkTxEntry', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    lkTxEntry = property(__lkTxEntry.value, __lkTxEntry.set, None, u'Prevent Text Editing')

    
    # Attribute hideGeom uses Python identifier hideGeom
    __hideGeom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hideGeom'), 'hideGeom', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_hideGeom', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hideGeom = property(__hideGeom.value, __hideGeom.set, None, u'Hide Geometry')

    
    # Attribute rot uses Python identifier rot
    __rot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rot'), 'rot', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_rot', pyxb.binding.datatypes.double, unicode_default=u'0')
    
    rot = property(__rot.value, __rot.set, None, u'Rotation')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}blip uses Python identifier blip
    __blip = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'blip'), 'blip', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_httpschemas_openxmlformats_orgofficeDocument2006relationshipsblip', _r.ST_RelationshipId, unicode_default=u'')
    
    blip = property(__blip.value, __blip.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_type', ST_LayoutShapeType, unicode_default=u'none')
    
    type = property(__type.value, __type.set, None, u'Shape Type')

    
    # Attribute zOrderOff uses Python identifier zOrderOff
    __zOrderOff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'zOrderOff'), 'zOrderOff', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_zOrderOff', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    zOrderOff = property(__zOrderOff.value, __zOrderOff.set, None, u'Z-Order Offset')

    
    # Attribute blipPhldr uses Python identifier blipPhldr
    __blipPhldr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blipPhldr'), 'blipPhldr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Shape_blipPhldr', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    blipPhldr = property(__blipPhldr.value, __blipPhldr.set, None, u'Image Placeholder')


    _ElementMap = {
        __extLst.name() : __extLst,
        __adjLst.name() : __adjLst
    }
    _AttributeMap = {
        __lkTxEntry.name() : __lkTxEntry,
        __hideGeom.name() : __hideGeom,
        __rot.name() : __rot,
        __blip.name() : __blip,
        __type.name() : __type,
        __zOrderOff.name() : __zOrderOff,
        __blipPhldr.name() : __blipPhldr
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Shape', CT_Shape)


# Complex type CT_TextNormalAutofit with content type EMPTY
class CT_TextNormalAutofit (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextNormalAutofit')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute fontScale uses Python identifier fontScale
    __fontScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fontScale'), 'fontScale', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextNormalAutofit_fontScale', ST_TextFontScalePercentOrPercentString, unicode_default=u'100%')
    
    fontScale = property(__fontScale.value, __fontScale.set, None, u'Font Scale')

    
    # Attribute lnSpcReduction uses Python identifier lnSpcReduction
    __lnSpcReduction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lnSpcReduction'), 'lnSpcReduction', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextNormalAutofit_lnSpcReduction', ST_TextSpacingPercentOrPercentString, unicode_default=u'0%')
    
    lnSpcReduction = property(__lnSpcReduction.value, __lnSpcReduction.set, None, u'Line Space Reduction')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __fontScale.name() : __fontScale,
        __lnSpcReduction.name() : __lnSpcReduction
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextNormalAutofit', CT_TextNormalAutofit)


# Complex type CT_ConnectorLocking with content type ELEMENT_ONLY
class CT_ConnectorLocking (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ConnectorLocking')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute noMove uses Python identifier noMove
    __noMove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noMove'), 'noMove', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noMove', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noMove = property(__noMove.value, __noMove.set, None, u'Disallow Shape Movement')

    
    # Attribute noChangeArrowheads uses Python identifier noChangeArrowheads
    __noChangeArrowheads = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeArrowheads'), 'noChangeArrowheads', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noChangeArrowheads', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeArrowheads = property(__noChangeArrowheads.value, __noChangeArrowheads.set, None, u'Disallow Arrowhead Changes')

    
    # Attribute noEditPoints uses Python identifier noEditPoints
    __noEditPoints = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noEditPoints'), 'noEditPoints', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noEditPoints', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noEditPoints = property(__noEditPoints.value, __noEditPoints.set, None, u'Disallow Shape Point Editing')

    
    # Attribute noChangeShapeType uses Python identifier noChangeShapeType
    __noChangeShapeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeShapeType'), 'noChangeShapeType', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noChangeShapeType', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeShapeType = property(__noChangeShapeType.value, __noChangeShapeType.set, None, u'Disallow Shape Type Change')

    
    # Attribute noChangeAspect uses Python identifier noChangeAspect
    __noChangeAspect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeAspect'), 'noChangeAspect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noChangeAspect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeAspect = property(__noChangeAspect.value, __noChangeAspect.set, None, u'Disallow Aspect Ratio Change')

    
    # Attribute noRot uses Python identifier noRot
    __noRot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noRot'), 'noRot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noRot', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noRot = property(__noRot.value, __noRot.set, None, u'Disallow Shape Rotation')

    
    # Attribute noSelect uses Python identifier noSelect
    __noSelect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noSelect'), 'noSelect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noSelect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noSelect = property(__noSelect.value, __noSelect.set, None, u'Disallow Shape Selection')

    
    # Attribute noResize uses Python identifier noResize
    __noResize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noResize'), 'noResize', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noResize', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noResize = property(__noResize.value, __noResize.set, None, u'Disallow Shape Resize')

    
    # Attribute noAdjustHandles uses Python identifier noAdjustHandles
    __noAdjustHandles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noAdjustHandles'), 'noAdjustHandles', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noAdjustHandles', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noAdjustHandles = property(__noAdjustHandles.value, __noAdjustHandles.set, None, u'Disallow Showing Adjust Handles')

    
    # Attribute noGrp uses Python identifier noGrp
    __noGrp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noGrp'), 'noGrp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectorLocking_noGrp', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noGrp = property(__noGrp.value, __noGrp.set, None, u'Disallow Shape Grouping')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __noMove.name() : __noMove,
        __noChangeArrowheads.name() : __noChangeArrowheads,
        __noEditPoints.name() : __noEditPoints,
        __noChangeShapeType.name() : __noChangeShapeType,
        __noChangeAspect.name() : __noChangeAspect,
        __noRot.name() : __noRot,
        __noSelect.name() : __noSelect,
        __noResize.name() : __noResize,
        __noAdjustHandles.name() : __noAdjustHandles,
        __noGrp.name() : __noGrp
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ConnectorLocking', CT_ConnectorLocking)


# Complex type CT_Path2DClose with content type EMPTY
class CT_Path2DClose (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2DClose')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2DClose', CT_Path2DClose)


# Complex type CT_TextParagraph with content type ELEMENT_ONLY
class CT_TextParagraph (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextParagraph')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}endParaRPr uses Python identifier endParaRPr
    __endParaRPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'endParaRPr'), 'endParaRPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraph_httpschemas_openxmlformats_orgdrawingml2006mainendParaRPr', False)

    
    endParaRPr = property(__endParaRPr.value, __endParaRPr.set, None, u'End Paragraph Run Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pPr uses Python identifier pPr
    __pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pPr'), 'pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraph_httpschemas_openxmlformats_orgdrawingml2006mainpPr', False)

    
    pPr = property(__pPr.value, __pPr.set, None, u'Text Paragraph Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fld uses Python identifier fld
    __fld = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fld'), 'fld', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraph_httpschemas_openxmlformats_orgdrawingml2006mainfld', True)

    
    fld = property(__fld.value, __fld.set, None, u'Text Field')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}br uses Python identifier br
    __br = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'br'), 'br', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraph_httpschemas_openxmlformats_orgdrawingml2006mainbr', True)

    
    br = property(__br.value, __br.set, None, u'Text Line Break')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'r'), 'r', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextParagraph_httpschemas_openxmlformats_orgdrawingml2006mainr', True)

    
    r = property(__r.value, __r.set, None, u'Text Run')


    _ElementMap = {
        __endParaRPr.name() : __endParaRPr,
        __pPr.name() : __pPr,
        __fld.name() : __fld,
        __br.name() : __br,
        __r.name() : __r
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextParagraph', CT_TextParagraph)


# Complex type CT_InverseTransform with content type EMPTY
class CT_InverseTransform (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_InverseTransform')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_InverseTransform', CT_InverseTransform)


# Complex type CT_ChildPref with content type EMPTY
class CT_ChildPref (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ChildPref')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ChildPref_val', ST_NodeCount, unicode_default=u'-1')
    
    val = property(__val.value, __val.set, None, u'Preferred Number of CHildren Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ChildPref', CT_ChildPref)


# Complex type CT_EffectReference with content type EMPTY
class CT_EffectReference (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EffectReference')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectReference_ref', pyxb.binding.datatypes.token)
    
    ref = property(__ref.value, __ref.set, None, u'Reference')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __ref.name() : __ref
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EffectReference', CT_EffectReference)


# Complex type CT_Constraint with content type ELEMENT_ONLY
class CT_Constraint (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Constraint')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute forName uses Python identifier forName
    __forName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'forName'), 'forName', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_forName', pyxb.binding.datatypes.string, unicode_default=u'')
    
    forName = property(__forName.value, __forName.set, None, u'For Name')

    
    # Attribute fact uses Python identifier fact
    __fact = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fact'), 'fact', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_fact', pyxb.binding.datatypes.double, unicode_default=u'1')
    
    fact = property(__fact.value, __fact.set, None, u'Factor')

    
    # Attribute refFor uses Python identifier refFor
    __refFor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refFor'), 'refFor', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_refFor', ST_ConstraintRelationship, unicode_default=u'self')
    
    refFor = property(__refFor.value, __refFor.set, None, u'Reference For')

    
    # Attribute refPtType uses Python identifier refPtType
    __refPtType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refPtType'), 'refPtType', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_refPtType', ST_ElementType, unicode_default=u'all')
    
    refPtType = property(__refPtType.value, __refPtType.set, None, u'Reference Point Type')

    
    # Attribute ptType uses Python identifier ptType
    __ptType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ptType'), 'ptType', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_ptType', ST_ElementType, unicode_default=u'all')
    
    ptType = property(__ptType.value, __ptType.set, None, u'Data Point Type')

    
    # Attribute refType uses Python identifier refType
    __refType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refType'), 'refType', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_refType', ST_ConstraintType, unicode_default=u'none')
    
    refType = property(__refType.value, __refType.set, None, u'Reference Type')

    
    # Attribute for uses Python identifier for_
    __for = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'for'), 'for_', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_for', ST_ConstraintRelationship, unicode_default=u'self')
    
    for_ = property(__for.value, __for.set, None, u'For')

    
    # Attribute op uses Python identifier op
    __op = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'op'), 'op', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_op', ST_BoolOperator, unicode_default=u'none')
    
    op = property(__op.value, __op.set, None, u'Operator')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_val', pyxb.binding.datatypes.double, unicode_default=u'0')
    
    val = property(__val.value, __val.set, None, u'Value')

    
    # Attribute refForName uses Python identifier refForName
    __refForName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refForName'), 'refForName', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_refForName', pyxb.binding.datatypes.string, unicode_default=u'')
    
    refForName = property(__refForName.value, __refForName.set, None, u'Reference For Name')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Constraint_type', ST_ConstraintType, required=True)
    
    type = property(__type.value, __type.set, None, u'Constraint Type')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __forName.name() : __forName,
        __fact.name() : __fact,
        __refFor.name() : __refFor,
        __refPtType.name() : __refPtType,
        __ptType.name() : __ptType,
        __refType.name() : __refType,
        __for.name() : __for,
        __op.name() : __op,
        __val.name() : __val,
        __refForName.name() : __refForName,
        __type.name() : __type
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Constraint', CT_Constraint)


# Complex type CT_BulletEnabled with content type EMPTY
class CT_BulletEnabled (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_BulletEnabled')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_BulletEnabled_val', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    val = property(__val.value, __val.set, None, u'Show Insert Bullet Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_BulletEnabled', CT_BulletEnabled)


# Complex type CT_ColorScheme with content type ELEMENT_ONLY
class CT_ColorScheme (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorScheme')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}accent3 uses Python identifier accent3
    __accent3 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'accent3'), 'accent3', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainaccent3', False)

    
    accent3 = property(__accent3.value, __accent3.set, None, u'Accent 3')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}accent1 uses Python identifier accent1
    __accent1 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'accent1'), 'accent1', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainaccent1', False)

    
    accent1 = property(__accent1.value, __accent1.set, None, u'Accent 1')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hlink uses Python identifier hlink
    __hlink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hlink'), 'hlink', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainhlink', False)

    
    hlink = property(__hlink.value, __hlink.set, None, u'Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}accent2 uses Python identifier accent2
    __accent2 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'accent2'), 'accent2', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainaccent2', False)

    
    accent2 = property(__accent2.value, __accent2.set, None, u'Accent 2')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}dk1 uses Python identifier dk1
    __dk1 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'dk1'), 'dk1', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006maindk1', False)

    
    dk1 = property(__dk1.value, __dk1.set, None, u'Dark 1')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}folHlink uses Python identifier folHlink
    __folHlink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'folHlink'), 'folHlink', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainfolHlink', False)

    
    folHlink = property(__folHlink.value, __folHlink.set, None, u'Followed Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}accent6 uses Python identifier accent6
    __accent6 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'accent6'), 'accent6', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainaccent6', False)

    
    accent6 = property(__accent6.value, __accent6.set, None, u'Accent 6')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lt1 uses Python identifier lt1
    __lt1 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lt1'), 'lt1', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainlt1', False)

    
    lt1 = property(__lt1.value, __lt1.set, None, u'Light 1')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}accent4 uses Python identifier accent4
    __accent4 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'accent4'), 'accent4', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainaccent4', False)

    
    accent4 = property(__accent4.value, __accent4.set, None, u'Accent 4')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}dk2 uses Python identifier dk2
    __dk2 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'dk2'), 'dk2', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006maindk2', False)

    
    dk2 = property(__dk2.value, __dk2.set, None, u'Dark 2')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}accent5 uses Python identifier accent5
    __accent5 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'accent5'), 'accent5', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainaccent5', False)

    
    accent5 = property(__accent5.value, __accent5.set, None, u'Accent 5')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lt2 uses Python identifier lt2
    __lt2 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lt2'), 'lt2', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_httpschemas_openxmlformats_orgdrawingml2006mainlt2', False)

    
    lt2 = property(__lt2.value, __lt2.set, None, u'Light 2')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorScheme_name', pyxb.binding.datatypes.string, required=True)
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __accent3.name() : __accent3,
        __accent1.name() : __accent1,
        __hlink.name() : __hlink,
        __accent2.name() : __accent2,
        __dk1.name() : __dk1,
        __folHlink.name() : __folHlink,
        __accent6.name() : __accent6,
        __lt1.name() : __lt1,
        __extLst.name() : __extLst,
        __accent4.name() : __accent4,
        __dk2.name() : __dk2,
        __accent5.name() : __accent5,
        __lt2.name() : __lt2
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorScheme', CT_ColorScheme)


# Complex type CT_AlphaModulateFixedEffect with content type EMPTY
class CT_AlphaModulateFixedEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaModulateFixedEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute amt uses Python identifier amt
    __amt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'amt'), 'amt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AlphaModulateFixedEffect_amt', ST_PositivePercentage, unicode_default=u'100%')
    
    amt = property(__amt.value, __amt.set, None, u'Amount')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __amt.name() : __amt
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaModulateFixedEffect', CT_AlphaModulateFixedEffect)


# Complex type CT_ElemPropSet with content type ELEMENT_ONLY
class CT_ElemPropSet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ElemPropSet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'style'), 'style', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_httpschemas_openxmlformats_orgdrawingml2006diagramstyle', False)

    
    style = property(__style.value, __style.set, None, u'Shape Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}presLayoutVars uses Python identifier presLayoutVars
    __presLayoutVars = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'presLayoutVars'), 'presLayoutVars', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_httpschemas_openxmlformats_orgdrawingml2006diagrampresLayoutVars', False)

    
    presLayoutVars = property(__presLayoutVars.value, __presLayoutVars.set, None, u'Presentation Layout Variables')

    
    # Attribute phldrT uses Python identifier phldrT
    __phldrT = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'phldrT'), 'phldrT', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_phldrT', pyxb.binding.datatypes.string)
    
    phldrT = property(__phldrT.value, __phldrT.set, None, u'Placeholder Text')

    
    # Attribute phldr uses Python identifier phldr
    __phldr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'phldr'), 'phldr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_phldr', pyxb.binding.datatypes.boolean)
    
    phldr = property(__phldr.value, __phldr.set, None, u'Placeholder')

    
    # Attribute custAng uses Python identifier custAng
    __custAng = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custAng'), 'custAng', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custAng', pyxb.binding.datatypes.int)
    
    custAng = property(__custAng.value, __custAng.set, None, u'Custom Rotation')

    
    # Attribute custLinFactX uses Python identifier custLinFactX
    __custLinFactX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custLinFactX'), 'custLinFactX', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custLinFactX', pyxb.binding.datatypes.int)
    
    custLinFactX = property(__custLinFactX.value, __custLinFactX.set, None, u'Custom Factor Width')

    
    # Attribute coherent3DOff uses Python identifier coherent3DOff
    __coherent3DOff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'coherent3DOff'), 'coherent3DOff', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_coherent3DOff', pyxb.binding.datatypes.boolean)
    
    coherent3DOff = property(__coherent3DOff.value, __coherent3DOff.set, None, u'Coherent 3D Behavior')

    
    # Attribute custFlipVert uses Python identifier custFlipVert
    __custFlipVert = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custFlipVert'), 'custFlipVert', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custFlipVert', pyxb.binding.datatypes.boolean)
    
    custFlipVert = property(__custFlipVert.value, __custFlipVert.set, None, u'Custom Vertical Flip')

    
    # Attribute loCatId uses Python identifier loCatId
    __loCatId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'loCatId'), 'loCatId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_loCatId', pyxb.binding.datatypes.string)
    
    loCatId = property(__loCatId.value, __loCatId.set, None, u'Current Diagram Category')

    
    # Attribute custFlipHor uses Python identifier custFlipHor
    __custFlipHor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custFlipHor'), 'custFlipHor', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custFlipHor', pyxb.binding.datatypes.boolean)
    
    custFlipHor = property(__custFlipHor.value, __custFlipHor.set, None, u'Custom Horizontal Flip')

    
    # Attribute custSzX uses Python identifier custSzX
    __custSzX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custSzX'), 'custSzX', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custSzX', pyxb.binding.datatypes.int)
    
    custSzX = property(__custSzX.value, __custSzX.set, None, u'Fixed Width Override')

    
    # Attribute custSzY uses Python identifier custSzY
    __custSzY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custSzY'), 'custSzY', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custSzY', pyxb.binding.datatypes.int)
    
    custSzY = property(__custSzY.value, __custSzY.set, None, u'Fixed Height Override')

    
    # Attribute custScaleX uses Python identifier custScaleX
    __custScaleX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custScaleX'), 'custScaleX', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custScaleX', pyxb.binding.datatypes.int)
    
    custScaleX = property(__custScaleX.value, __custScaleX.set, None, u'Width Scale')

    
    # Attribute custScaleY uses Python identifier custScaleY
    __custScaleY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custScaleY'), 'custScaleY', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custScaleY', pyxb.binding.datatypes.int)
    
    custScaleY = property(__custScaleY.value, __custScaleY.set, None, u'Height Scale')

    
    # Attribute presAssocID uses Python identifier presAssocID
    __presAssocID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'presAssocID'), 'presAssocID', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_presAssocID', ST_ModelId)
    
    presAssocID = property(__presAssocID.value, __presAssocID.set, None, u'Presentation Element Identifier')

    
    # Attribute presStyleIdx uses Python identifier presStyleIdx
    __presStyleIdx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'presStyleIdx'), 'presStyleIdx', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_presStyleIdx', pyxb.binding.datatypes.int)
    
    presStyleIdx = property(__presStyleIdx.value, __presStyleIdx.set, None, u'Presentation Style Index')

    
    # Attribute presName uses Python identifier presName
    __presName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'presName'), 'presName', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_presName', pyxb.binding.datatypes.string)
    
    presName = property(__presName.value, __presName.set, None, u'Presentation Name')

    
    # Attribute custLinFactY uses Python identifier custLinFactY
    __custLinFactY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custLinFactY'), 'custLinFactY', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custLinFactY', pyxb.binding.datatypes.int)
    
    custLinFactY = property(__custLinFactY.value, __custLinFactY.set, None, u'Custom Factor Height')

    
    # Attribute custLinFactNeighborX uses Python identifier custLinFactNeighborX
    __custLinFactNeighborX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custLinFactNeighborX'), 'custLinFactNeighborX', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custLinFactNeighborX', pyxb.binding.datatypes.int)
    
    custLinFactNeighborX = property(__custLinFactNeighborX.value, __custLinFactNeighborX.set, None, u'Neighbor Offset Width')

    
    # Attribute custLinFactNeighborY uses Python identifier custLinFactNeighborY
    __custLinFactNeighborY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custLinFactNeighborY'), 'custLinFactNeighborY', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custLinFactNeighborY', pyxb.binding.datatypes.int)
    
    custLinFactNeighborY = property(__custLinFactNeighborY.value, __custLinFactNeighborY.set, None, u'Neighbor Offset Height')

    
    # Attribute qsTypeId uses Python identifier qsTypeId
    __qsTypeId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'qsTypeId'), 'qsTypeId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_qsTypeId', pyxb.binding.datatypes.string)
    
    qsTypeId = property(__qsTypeId.value, __qsTypeId.set, None, u'Current Style Type')

    
    # Attribute custRadScaleRad uses Python identifier custRadScaleRad
    __custRadScaleRad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custRadScaleRad'), 'custRadScaleRad', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custRadScaleRad', pyxb.binding.datatypes.int)
    
    custRadScaleRad = property(__custRadScaleRad.value, __custRadScaleRad.set, None, u'Radius Scale')

    
    # Attribute presStyleCnt uses Python identifier presStyleCnt
    __presStyleCnt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'presStyleCnt'), 'presStyleCnt', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_presStyleCnt', pyxb.binding.datatypes.int)
    
    presStyleCnt = property(__presStyleCnt.value, __presStyleCnt.set, None, u'Presentation Style Count')

    
    # Attribute custRadScaleInc uses Python identifier custRadScaleInc
    __custRadScaleInc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custRadScaleInc'), 'custRadScaleInc', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custRadScaleInc', pyxb.binding.datatypes.int)
    
    custRadScaleInc = property(__custRadScaleInc.value, __custRadScaleInc.set, None, u'Include Angle Scale')

    
    # Attribute presStyleLbl uses Python identifier presStyleLbl
    __presStyleLbl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'presStyleLbl'), 'presStyleLbl', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_presStyleLbl', pyxb.binding.datatypes.string)
    
    presStyleLbl = property(__presStyleLbl.value, __presStyleLbl.set, None, u'Presentation Style Label')

    
    # Attribute qsCatId uses Python identifier qsCatId
    __qsCatId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'qsCatId'), 'qsCatId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_qsCatId', pyxb.binding.datatypes.string)
    
    qsCatId = property(__qsCatId.value, __qsCatId.set, None, u'Current Style Category')

    
    # Attribute csTypeId uses Python identifier csTypeId
    __csTypeId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'csTypeId'), 'csTypeId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_csTypeId', pyxb.binding.datatypes.string)
    
    csTypeId = property(__csTypeId.value, __csTypeId.set, None, u'Color Transform Type Identifier')

    
    # Attribute custT uses Python identifier custT
    __custT = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'custT'), 'custT', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_custT', pyxb.binding.datatypes.boolean)
    
    custT = property(__custT.value, __custT.set, None, u'Text Changed')

    
    # Attribute csCatId uses Python identifier csCatId
    __csCatId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'csCatId'), 'csCatId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_csCatId', pyxb.binding.datatypes.string)
    
    csCatId = property(__csCatId.value, __csCatId.set, None, u'Color Transform Category')

    
    # Attribute loTypeId uses Python identifier loTypeId
    __loTypeId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'loTypeId'), 'loTypeId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ElemPropSet_loTypeId', pyxb.binding.datatypes.string)
    
    loTypeId = property(__loTypeId.value, __loTypeId.set, None, u'Current Diagram Type')


    _ElementMap = {
        __style.name() : __style,
        __presLayoutVars.name() : __presLayoutVars
    }
    _AttributeMap = {
        __phldrT.name() : __phldrT,
        __phldr.name() : __phldr,
        __custAng.name() : __custAng,
        __custLinFactX.name() : __custLinFactX,
        __coherent3DOff.name() : __coherent3DOff,
        __custFlipVert.name() : __custFlipVert,
        __loCatId.name() : __loCatId,
        __custFlipHor.name() : __custFlipHor,
        __custSzX.name() : __custSzX,
        __custSzY.name() : __custSzY,
        __custScaleX.name() : __custScaleX,
        __custScaleY.name() : __custScaleY,
        __presAssocID.name() : __presAssocID,
        __presStyleIdx.name() : __presStyleIdx,
        __presName.name() : __presName,
        __custLinFactY.name() : __custLinFactY,
        __custLinFactNeighborX.name() : __custLinFactNeighborX,
        __custLinFactNeighborY.name() : __custLinFactNeighborY,
        __qsTypeId.name() : __qsTypeId,
        __custRadScaleRad.name() : __custRadScaleRad,
        __presStyleCnt.name() : __presStyleCnt,
        __custRadScaleInc.name() : __custRadScaleInc,
        __presStyleLbl.name() : __presStyleLbl,
        __qsCatId.name() : __qsCatId,
        __csTypeId.name() : __csTypeId,
        __custT.name() : __custT,
        __csCatId.name() : __csCatId,
        __loTypeId.name() : __loTypeId
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ElemPropSet', CT_ElemPropSet)


# Complex type CT_GvmlPictureNonVisual with content type ELEMENT_ONLY
class CT_GvmlPictureNonVisual (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlPictureNonVisual')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvPicPr uses Python identifier cNvPicPr
    __cNvPicPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPicPr'), 'cNvPicPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlPictureNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvPicPr', False)

    
    cNvPicPr = property(__cNvPicPr.value, __cNvPicPr.set, None, u'Non-Visual Picture Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvPr uses Python identifier cNvPr
    __cNvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), 'cNvPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlPictureNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvPr', False)

    
    cNvPr = property(__cNvPr.value, __cNvPr.set, None, None)


    _ElementMap = {
        __cNvPicPr.name() : __cNvPicPr,
        __cNvPr.name() : __cNvPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlPictureNonVisual', CT_GvmlPictureNonVisual)


# Complex type CT_TransformEffect with content type EMPTY
class CT_TransformEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TransformEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute sx uses Python identifier sx
    __sx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sx'), 'sx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TransformEffect_sx', ST_Percentage, unicode_default=u'100%')
    
    sx = property(__sx.value, __sx.set, None, u'Horizontal Ratio')

    
    # Attribute kx uses Python identifier kx
    __kx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'kx'), 'kx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TransformEffect_kx', ST_FixedAngle, unicode_default=u'0')
    
    kx = property(__kx.value, __kx.set, None, u'Horizontal Skew')

    
    # Attribute ky uses Python identifier ky
    __ky = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ky'), 'ky', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TransformEffect_ky', ST_FixedAngle, unicode_default=u'0')
    
    ky = property(__ky.value, __ky.set, None, u'Vertical Skew')

    
    # Attribute sy uses Python identifier sy
    __sy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sy'), 'sy', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TransformEffect_sy', ST_Percentage, unicode_default=u'100%')
    
    sy = property(__sy.value, __sy.set, None, u'Vertical Ratio')

    
    # Attribute tx uses Python identifier tx
    __tx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tx'), 'tx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TransformEffect_tx', ST_Coordinate, unicode_default=u'0')
    
    tx = property(__tx.value, __tx.set, None, u'Horizontal Shift')

    
    # Attribute ty uses Python identifier ty
    __ty = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ty'), 'ty', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TransformEffect_ty', ST_Coordinate, unicode_default=u'0')
    
    ty = property(__ty.value, __ty.set, None, u'Vertical Shift')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __sx.name() : __sx,
        __kx.name() : __kx,
        __ky.name() : __ky,
        __sy.name() : __sy,
        __tx.name() : __tx,
        __ty.name() : __ty
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TransformEffect', CT_TransformEffect)


# Complex type CT_NonVisualDrawingShapeProps with content type ELEMENT_ONLY
class CT_NonVisualDrawingShapeProps (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_NonVisualDrawingShapeProps')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingShapeProps_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spLocks uses Python identifier spLocks
    __spLocks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spLocks'), 'spLocks', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingShapeProps_httpschemas_openxmlformats_orgdrawingml2006mainspLocks', False)

    
    spLocks = property(__spLocks.value, __spLocks.set, None, u'Shape Locks')

    
    # Attribute txBox uses Python identifier txBox
    __txBox = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'txBox'), 'txBox', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualDrawingShapeProps_txBox', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    txBox = property(__txBox.value, __txBox.set, None, u'Text Box')


    _ElementMap = {
        __extLst.name() : __extLst,
        __spLocks.name() : __spLocks
    }
    _AttributeMap = {
        __txBox.name() : __txBox
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_NonVisualDrawingShapeProps', CT_NonVisualDrawingShapeProps)


# Complex type CT_GeomGuideList with content type ELEMENT_ONLY
class CT_GeomGuideList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GeomGuideList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gd uses Python identifier gd
    __gd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gd'), 'gd', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GeomGuideList_httpschemas_openxmlformats_orgdrawingml2006maingd', True)

    
    gd = property(__gd.value, __gd.set, None, u'Shape Guide')


    _ElementMap = {
        __gd.name() : __gd
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GeomGuideList', CT_GeomGuideList)


# Complex type CT_ColorTransformHeaderLst with content type ELEMENT_ONLY
class CT_ColorTransformHeaderLst (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ColorTransformHeaderLst')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}colorsDefHdr uses Python identifier colorsDefHdr
    __colorsDefHdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'colorsDefHdr'), 'colorsDefHdr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransformHeaderLst_httpschemas_openxmlformats_orgdrawingml2006diagramcolorsDefHdr', True)

    
    colorsDefHdr = property(__colorsDefHdr.value, __colorsDefHdr.set, None, u'Color Transform Definition Header')


    _ElementMap = {
        __colorsDefHdr.name() : __colorsDefHdr
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ColorTransformHeaderLst', CT_ColorTransformHeaderLst)


# Complex type CT_CTStyleLabel with content type ELEMENT_ONLY
class CT_CTStyleLabel (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_CTStyleLabel')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}linClrLst uses Python identifier linClrLst
    __linClrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'linClrLst'), 'linClrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramlinClrLst', False)

    
    linClrLst = property(__linClrLst.value, __linClrLst.set, None, u'Line Color List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}effectClrLst uses Python identifier effectClrLst
    __effectClrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'effectClrLst'), 'effectClrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagrameffectClrLst', False)

    
    effectClrLst = property(__effectClrLst.value, __effectClrLst.set, None, u'Effect Color List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}txFillClrLst uses Python identifier txFillClrLst
    __txFillClrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'txFillClrLst'), 'txFillClrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramtxFillClrLst', False)

    
    txFillClrLst = property(__txFillClrLst.value, __txFillClrLst.set, None, u'Text Fill Color List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}txLinClrLst uses Python identifier txLinClrLst
    __txLinClrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'txLinClrLst'), 'txLinClrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramtxLinClrLst', False)

    
    txLinClrLst = property(__txLinClrLst.value, __txLinClrLst.set, None, u'Text Line Color List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}fillClrLst uses Python identifier fillClrLst
    __fillClrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'fillClrLst'), 'fillClrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramfillClrLst', False)

    
    fillClrLst = property(__fillClrLst.value, __fillClrLst.set, None, u'Fill Color List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}txEffectClrLst uses Python identifier txEffectClrLst
    __txEffectClrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'txEffectClrLst'), 'txEffectClrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramtxEffectClrLst', False)

    
    txEffectClrLst = property(__txEffectClrLst.value, __txEffectClrLst.set, None, u'Text Effect Color List')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTStyleLabel_name', pyxb.binding.datatypes.string, required=True)
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __linClrLst.name() : __linClrLst,
        __extLst.name() : __extLst,
        __effectClrLst.name() : __effectClrLst,
        __txFillClrLst.name() : __txFillClrLst,
        __txLinClrLst.name() : __txLinClrLst,
        __fillClrLst.name() : __fillClrLst,
        __txEffectClrLst.name() : __txEffectClrLst
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace.addCategoryObject('typeBinding', u'CT_CTStyleLabel', CT_CTStyleLabel)


# Complex type CT_ColorMapping with content type ELEMENT_ONLY
class CT_ColorMapping (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorMapping')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute folHlink uses Python identifier folHlink
    __folHlink = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'folHlink'), 'folHlink', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_folHlink', ST_ColorSchemeIndex, required=True)
    
    folHlink = property(__folHlink.value, __folHlink.set, None, u'Followed Hyperlink')

    
    # Attribute accent3 uses Python identifier accent3
    __accent3 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accent3'), 'accent3', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_accent3', ST_ColorSchemeIndex, required=True)
    
    accent3 = property(__accent3.value, __accent3.set, None, u'Accent 3')

    
    # Attribute tx1 uses Python identifier tx1
    __tx1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tx1'), 'tx1', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_tx1', ST_ColorSchemeIndex, required=True)
    
    tx1 = property(__tx1.value, __tx1.set, None, u'Text 1')

    
    # Attribute accent4 uses Python identifier accent4
    __accent4 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accent4'), 'accent4', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_accent4', ST_ColorSchemeIndex, required=True)
    
    accent4 = property(__accent4.value, __accent4.set, None, u'Accent 4')

    
    # Attribute tx2 uses Python identifier tx2
    __tx2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tx2'), 'tx2', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_tx2', ST_ColorSchemeIndex, required=True)
    
    tx2 = property(__tx2.value, __tx2.set, None, u'Text 2')

    
    # Attribute bg2 uses Python identifier bg2
    __bg2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bg2'), 'bg2', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_bg2', ST_ColorSchemeIndex, required=True)
    
    bg2 = property(__bg2.value, __bg2.set, None, u'Background 2')

    
    # Attribute bg1 uses Python identifier bg1
    __bg1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bg1'), 'bg1', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_bg1', ST_ColorSchemeIndex, required=True)
    
    bg1 = property(__bg1.value, __bg1.set, None, u'Background 1')

    
    # Attribute accent5 uses Python identifier accent5
    __accent5 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accent5'), 'accent5', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_accent5', ST_ColorSchemeIndex, required=True)
    
    accent5 = property(__accent5.value, __accent5.set, None, u'Accent 5')

    
    # Attribute accent1 uses Python identifier accent1
    __accent1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accent1'), 'accent1', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_accent1', ST_ColorSchemeIndex, required=True)
    
    accent1 = property(__accent1.value, __accent1.set, None, u'Accent 1')

    
    # Attribute accent6 uses Python identifier accent6
    __accent6 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accent6'), 'accent6', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_accent6', ST_ColorSchemeIndex, required=True)
    
    accent6 = property(__accent6.value, __accent6.set, None, u'Accent 6')

    
    # Attribute hlink uses Python identifier hlink
    __hlink = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hlink'), 'hlink', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_hlink', ST_ColorSchemeIndex, required=True)
    
    hlink = property(__hlink.value, __hlink.set, None, u'Hyperlink')

    
    # Attribute accent2 uses Python identifier accent2
    __accent2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'accent2'), 'accent2', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMapping_accent2', ST_ColorSchemeIndex, required=True)
    
    accent2 = property(__accent2.value, __accent2.set, None, u'Accent 2')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __folHlink.name() : __folHlink,
        __accent3.name() : __accent3,
        __tx1.name() : __tx1,
        __accent4.name() : __accent4,
        __tx2.name() : __tx2,
        __bg2.name() : __bg2,
        __bg1.name() : __bg1,
        __accent5.name() : __accent5,
        __accent1.name() : __accent1,
        __accent6.name() : __accent6,
        __hlink.name() : __hlink,
        __accent2.name() : __accent2
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorMapping', CT_ColorMapping)


# Complex type CT_TextBulletSizePercent with content type EMPTY
class CT_TextBulletSizePercent (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBulletSizePercent')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBulletSizePercent_val', ST_TextBulletSizePercent)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBulletSizePercent', CT_TextBulletSizePercent)


# Complex type CT_GroupShapeProperties with content type ELEMENT_ONLY
class CT_GroupShapeProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GroupShapeProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}xfrm uses Python identifier xfrm
    __xfrm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), 'xfrm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainxfrm', False)

    
    xfrm = property(__xfrm.value, __xfrm.set, None, u'2D Transform for Grouped Objects')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scene3d uses Python identifier scene3d
    __scene3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), 'scene3d', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainscene3d', False)

    
    scene3d = property(__scene3d.value, __scene3d.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Attribute bwMode uses Python identifier bwMode
    __bwMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bwMode'), 'bwMode', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GroupShapeProperties_bwMode', ST_BlackWhiteMode)
    
    bwMode = property(__bwMode.value, __bwMode.set, None, u'Black and White Mode')


    _ElementMap = {
        __gradFill.name() : __gradFill,
        __xfrm.name() : __xfrm,
        __scene3d.name() : __scene3d,
        __effectDag.name() : __effectDag,
        __blipFill.name() : __blipFill,
        __grpFill.name() : __grpFill,
        __pattFill.name() : __pattFill,
        __extLst.name() : __extLst,
        __noFill.name() : __noFill,
        __solidFill.name() : __solidFill,
        __effectLst.name() : __effectLst
    }
    _AttributeMap = {
        __bwMode.name() : __bwMode
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GroupShapeProperties', CT_GroupShapeProperties)


# Complex type CT_Path2D with content type ELEMENT_ONLY
class CT_Path2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}close uses Python identifier close
    __close = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'close'), 'close', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_httpschemas_openxmlformats_orgdrawingml2006mainclose', True)

    
    close = property(__close.value, __close.set, None, u'Close Shape Path')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cubicBezTo uses Python identifier cubicBezTo
    __cubicBezTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cubicBezTo'), 'cubicBezTo', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_httpschemas_openxmlformats_orgdrawingml2006maincubicBezTo', True)

    
    cubicBezTo = property(__cubicBezTo.value, __cubicBezTo.set, None, u'Draw Cubic Bezier Curve To')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_httpschemas_openxmlformats_orgdrawingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Path To')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}quadBezTo uses Python identifier quadBezTo
    __quadBezTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'quadBezTo'), 'quadBezTo', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_httpschemas_openxmlformats_orgdrawingml2006mainquadBezTo', True)

    
    quadBezTo = property(__quadBezTo.value, __quadBezTo.set, None, u'Draw Quadratic Bezier Curve To')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnTo uses Python identifier lnTo
    __lnTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnTo'), 'lnTo', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_httpschemas_openxmlformats_orgdrawingml2006mainlnTo', True)

    
    lnTo = property(__lnTo.value, __lnTo.set, None, u'Draw Line To')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}arcTo uses Python identifier arcTo
    __arcTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'arcTo'), 'arcTo', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_httpschemas_openxmlformats_orgdrawingml2006mainarcTo', True)

    
    arcTo = property(__arcTo.value, __arcTo.set, None, u'Draw Arc To')

    
    # Attribute extrusionOk uses Python identifier extrusionOk
    __extrusionOk = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'extrusionOk'), 'extrusionOk', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_extrusionOk', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    extrusionOk = property(__extrusionOk.value, __extrusionOk.set, None, u'3D Extrusion Allowed')

    
    # Attribute h uses Python identifier h
    __h = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'h'), 'h', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_h', ST_PositiveCoordinate, unicode_default=u'0')
    
    h = property(__h.value, __h.set, None, u'Path Height')

    
    # Attribute w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'w'), 'w', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_w', ST_PositiveCoordinate, unicode_default=u'0')
    
    w = property(__w.value, __w.set, None, u'Path Width')

    
    # Attribute fill uses Python identifier fill
    __fill = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fill'), 'fill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_fill', ST_PathFillMode, unicode_default=u'norm')
    
    fill = property(__fill.value, __fill.set, None, u'Path Fill')

    
    # Attribute stroke uses Python identifier stroke
    __stroke = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stroke'), 'stroke', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2D_stroke', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    stroke = property(__stroke.value, __stroke.set, None, u'Path Stroke')


    _ElementMap = {
        __close.name() : __close,
        __cubicBezTo.name() : __cubicBezTo,
        __moveTo.name() : __moveTo,
        __quadBezTo.name() : __quadBezTo,
        __lnTo.name() : __lnTo,
        __arcTo.name() : __arcTo
    }
    _AttributeMap = {
        __extrusionOk.name() : __extrusionOk,
        __h.name() : __h,
        __w.name() : __w,
        __fill.name() : __fill,
        __stroke.name() : __stroke
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2D', CT_Path2D)


# Complex type CT_GvmlShape with content type ELEMENT_ONLY
class CT_GvmlShape (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlShape')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlShape_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}nvSpPr uses Python identifier nvSpPr
    __nvSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'nvSpPr'), 'nvSpPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlShape_httpschemas_openxmlformats_orgdrawingml2006mainnvSpPr', False)

    
    nvSpPr = property(__nvSpPr.value, __nvSpPr.set, None, u'Non-Visual Properties for a Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spPr uses Python identifier spPr
    __spPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), 'spPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlShape_httpschemas_openxmlformats_orgdrawingml2006mainspPr', False)

    
    spPr = property(__spPr.value, __spPr.set, None, u'Visual Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}txSp uses Python identifier txSp
    __txSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'txSp'), 'txSp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlShape_httpschemas_openxmlformats_orgdrawingml2006maintxSp', False)

    
    txSp = property(__txSp.value, __txSp.set, None, u'Text Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), 'style', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlShape_httpschemas_openxmlformats_orgdrawingml2006mainstyle', False)

    
    style = property(__style.value, __style.set, None, u'Style')


    _ElementMap = {
        __extLst.name() : __extLst,
        __nvSpPr.name() : __nvSpPr,
        __spPr.name() : __spPr,
        __txSp.name() : __txSp,
        __style.name() : __style
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlShape', CT_GvmlShape)


# Complex type CT_DefaultShapeDefinition with content type ELEMENT_ONLY
class CT_DefaultShapeDefinition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_DefaultShapeDefinition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DefaultShapeDefinition_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spPr uses Python identifier spPr
    __spPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), 'spPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DefaultShapeDefinition_httpschemas_openxmlformats_orgdrawingml2006mainspPr', False)

    
    spPr = property(__spPr.value, __spPr.set, None, u'Visual Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), 'style', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DefaultShapeDefinition_httpschemas_openxmlformats_orgdrawingml2006mainstyle', False)

    
    style = property(__style.value, __style.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bodyPr uses Python identifier bodyPr
    __bodyPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bodyPr'), 'bodyPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DefaultShapeDefinition_httpschemas_openxmlformats_orgdrawingml2006mainbodyPr', False)

    
    bodyPr = property(__bodyPr.value, __bodyPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lstStyle uses Python identifier lstStyle
    __lstStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lstStyle'), 'lstStyle', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_DefaultShapeDefinition_httpschemas_openxmlformats_orgdrawingml2006mainlstStyle', False)

    
    lstStyle = property(__lstStyle.value, __lstStyle.set, None, None)


    _ElementMap = {
        __extLst.name() : __extLst,
        __spPr.name() : __spPr,
        __style.name() : __style,
        __bodyPr.name() : __bodyPr,
        __lstStyle.name() : __lstStyle
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_DefaultShapeDefinition', CT_DefaultShapeDefinition)


# Complex type CT_FontCollection with content type ELEMENT_ONLY
class CT_FontCollection (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FontCollection')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontCollection_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}latin uses Python identifier latin
    __latin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'latin'), 'latin', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontCollection_httpschemas_openxmlformats_orgdrawingml2006mainlatin', False)

    
    latin = property(__latin.value, __latin.set, None, u'Latin Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}font uses Python identifier font
    __font = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'font'), 'font', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontCollection_httpschemas_openxmlformats_orgdrawingml2006mainfont', True)

    
    font = property(__font.value, __font.set, None, u'Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cs uses Python identifier cs
    __cs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cs'), 'cs', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontCollection_httpschemas_openxmlformats_orgdrawingml2006maincs', False)

    
    cs = property(__cs.value, __cs.set, None, u'Complex Script Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ea uses Python identifier ea
    __ea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ea'), 'ea', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontCollection_httpschemas_openxmlformats_orgdrawingml2006mainea', False)

    
    ea = property(__ea.value, __ea.set, None, u'East Asian Font')


    _ElementMap = {
        __extLst.name() : __extLst,
        __latin.name() : __latin,
        __font.name() : __font,
        __cs.name() : __cs,
        __ea.name() : __ea
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FontCollection', CT_FontCollection)


# Complex type CT_PresetGeometry2D with content type ELEMENT_ONLY
class CT_PresetGeometry2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PresetGeometry2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}avLst uses Python identifier avLst
    __avLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst'), 'avLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetGeometry2D_httpschemas_openxmlformats_orgdrawingml2006mainavLst', False)

    
    avLst = property(__avLst.value, __avLst.set, None, u'List of Shape Adjust Values')

    
    # Attribute prst uses Python identifier prst
    __prst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prst'), 'prst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetGeometry2D_prst', ST_ShapeType, required=True)
    
    prst = property(__prst.value, __prst.set, None, u'Preset Shape')


    _ElementMap = {
        __avLst.name() : __avLst
    }
    _AttributeMap = {
        __prst.name() : __prst
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PresetGeometry2D', CT_PresetGeometry2D)


# Complex type CT_FillProperties with content type ELEMENT_ONLY
class CT_FillProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FillProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillProperties_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillProperties_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillProperties_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillProperties_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillProperties_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)


    _ElementMap = {
        __blipFill.name() : __blipFill,
        __solidFill.name() : __solidFill,
        __pattFill.name() : __pattFill,
        __grpFill.name() : __grpFill,
        __noFill.name() : __noFill,
        __gradFill.name() : __gradFill
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FillProperties', CT_FillProperties)


# Complex type CT_LineJoinRound with content type EMPTY
class CT_LineJoinRound (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LineJoinRound')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LineJoinRound', CT_LineJoinRound)


# Complex type CT_SoftEdgesEffect with content type EMPTY
class CT_SoftEdgesEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_SoftEdgesEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute rad uses Python identifier rad
    __rad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rad'), 'rad', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SoftEdgesEffect_rad', ST_PositiveCoordinate, required=True)
    
    rad = property(__rad.value, __rad.set, None, u'Radius')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __rad.name() : __rad
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_SoftEdgesEffect', CT_SoftEdgesEffect)


# Complex type CT_PresentationOf with content type ELEMENT_ONLY
class CT_PresentationOf (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_PresentationOf')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PresentationOf_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute ptType uses Python identifier ptType
    __ptType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ptType'), 'ptType', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PresentationOf_ptType', ST_ElementTypes, unicode_default=u'all')
    
    ptType = property(__ptType.value, __ptType.set, None, u'Data Point Type')

    
    # Attribute st uses Python identifier st
    __st = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'st'), 'st', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PresentationOf_st', ST_Ints, unicode_default=u'1')
    
    st = property(__st.value, __st.set, None, u'Start')

    
    # Attribute hideLastTrans uses Python identifier hideLastTrans
    __hideLastTrans = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hideLastTrans'), 'hideLastTrans', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PresentationOf_hideLastTrans', ST_Booleans, unicode_default=u'true')
    
    hideLastTrans = property(__hideLastTrans.value, __hideLastTrans.set, None, u'Hide Last Transition')

    
    # Attribute cnt uses Python identifier cnt
    __cnt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cnt'), 'cnt', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PresentationOf_cnt', ST_UnsignedInts, unicode_default=u'0')
    
    cnt = property(__cnt.value, __cnt.set, None, u'Count')

    
    # Attribute step uses Python identifier step
    __step = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'step'), 'step', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PresentationOf_step', ST_Ints, unicode_default=u'1')
    
    step = property(__step.value, __step.set, None, u'Step')

    
    # Attribute axis uses Python identifier axis
    __axis = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axis'), 'axis', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PresentationOf_axis', ST_AxisTypes, unicode_default=u'none')
    
    axis = property(__axis.value, __axis.set, None, u'Axis')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __ptType.name() : __ptType,
        __st.name() : __st,
        __hideLastTrans.name() : __hideLastTrans,
        __cnt.name() : __cnt,
        __step.name() : __step,
        __axis.name() : __axis
    }
_Namespace.addCategoryObject('typeBinding', u'CT_PresentationOf', CT_PresentationOf)


# Complex type CT_TextBulletSizeFollowText with content type EMPTY
class CT_TextBulletSizeFollowText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBulletSizeFollowText')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBulletSizeFollowText', CT_TextBulletSizeFollowText)


# Complex type CT_SDDescription with content type EMPTY
class CT_SDDescription (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_SDDescription')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SDDescription_lang', pyxb.binding.datatypes.string, unicode_default=u'')
    
    lang = property(__lang.value, __lang.set, None, u'Natural Language')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SDDescription_val', pyxb.binding.datatypes.string, required=True)
    
    val = property(__val.value, __val.set, None, u'Description Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lang.name() : __lang,
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_SDDescription', CT_SDDescription)


# Complex type CT_PresetLineDashProperties with content type EMPTY
class CT_PresetLineDashProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PresetLineDashProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetLineDashProperties_val', ST_PresetLineDashVal)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PresetLineDashProperties', CT_PresetLineDashProperties)


# Complex type CT_AnimationChartBuildProperties with content type EMPTY
class CT_AnimationChartBuildProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AnimationChartBuildProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute bld uses Python identifier bld
    __bld = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bld'), 'bld', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationChartBuildProperties_bld', ST_AnimationChartBuildType, unicode_default=u'allAtOnce')
    
    bld = property(__bld.value, __bld.set, None, u'Build')

    
    # Attribute animBg uses Python identifier animBg
    __animBg = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'animBg'), 'animBg', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationChartBuildProperties_animBg', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    animBg = property(__animBg.value, __animBg.set, None, u'Animate Background')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __bld.name() : __bld,
        __animBg.name() : __animBg
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AnimationChartBuildProperties', CT_AnimationChartBuildProperties)


# Complex type CT_GradientStopList with content type ELEMENT_ONLY
class CT_GradientStopList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GradientStopList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gs uses Python identifier gs
    __gs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gs'), 'gs', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStopList_httpschemas_openxmlformats_orgdrawingml2006maings', True)

    
    gs = property(__gs.value, __gs.set, None, u'Gradient stops')


    _ElementMap = {
        __gs.name() : __gs
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GradientStopList', CT_GradientStopList)


# Complex type CT_TextUnderlineFillGroupWrapper with content type ELEMENT_ONLY
class CT_TextUnderlineFillGroupWrapper (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextUnderlineFillGroupWrapper')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextUnderlineFillGroupWrapper_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextUnderlineFillGroupWrapper_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextUnderlineFillGroupWrapper_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextUnderlineFillGroupWrapper_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextUnderlineFillGroupWrapper_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextUnderlineFillGroupWrapper_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)


    _ElementMap = {
        __blipFill.name() : __blipFill,
        __solidFill.name() : __solidFill,
        __pattFill.name() : __pattFill,
        __grpFill.name() : __grpFill,
        __noFill.name() : __noFill,
        __gradFill.name() : __gradFill
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextUnderlineFillGroupWrapper', CT_TextUnderlineFillGroupWrapper)


# Complex type CT_AudioCD with content type ELEMENT_ONLY
class CT_AudioCD (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AudioCD')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioCD_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}st uses Python identifier st
    __st = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'st'), 'st', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioCD_httpschemas_openxmlformats_orgdrawingml2006mainst', False)

    
    st = property(__st.value, __st.set, None, u'Audio Start Time')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}end uses Python identifier end
    __end = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'end'), 'end', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioCD_httpschemas_openxmlformats_orgdrawingml2006mainend', False)

    
    end = property(__end.value, __end.set, None, u'Audio End Time')


    _ElementMap = {
        __extLst.name() : __extLst,
        __st.name() : __st,
        __end.name() : __end
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AudioCD', CT_AudioCD)


# Complex type CT_EffectStyleItem with content type ELEMENT_ONLY
class CT_EffectStyleItem (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EffectStyleItem')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sp3d uses Python identifier sp3d
    __sp3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), 'sp3d', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectStyleItem_httpschemas_openxmlformats_orgdrawingml2006mainsp3d', False)

    
    sp3d = property(__sp3d.value, __sp3d.set, None, u'3D properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectStyleItem_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectStyleItem_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scene3d uses Python identifier scene3d
    __scene3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), 'scene3d', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectStyleItem_httpschemas_openxmlformats_orgdrawingml2006mainscene3d', False)

    
    scene3d = property(__scene3d.value, __scene3d.set, None, u'3D Scene Properties')


    _ElementMap = {
        __sp3d.name() : __sp3d,
        __effectLst.name() : __effectLst,
        __effectDag.name() : __effectDag,
        __scene3d.name() : __scene3d
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EffectStyleItem', CT_EffectStyleItem)


# Complex type CT_Parameter with content type EMPTY
class CT_Parameter (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Parameter')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Parameter_type', ST_ParameterId, required=True)
    
    type = property(__type.value, __type.set, None, u'Parameter Type')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Parameter_val', ST_ParameterVal, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __type.name() : __type,
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Parameter', CT_Parameter)


# Complex type CT_ShapeStyle with content type ELEMENT_ONLY
class CT_ShapeStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ShapeStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fontRef uses Python identifier fontRef
    __fontRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fontRef'), 'fontRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeStyle_httpschemas_openxmlformats_orgdrawingml2006mainfontRef', False)

    
    fontRef = property(__fontRef.value, __fontRef.set, None, u'Font Reference')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnRef uses Python identifier lnRef
    __lnRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnRef'), 'lnRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeStyle_httpschemas_openxmlformats_orgdrawingml2006mainlnRef', False)

    
    lnRef = property(__lnRef.value, __lnRef.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillRef uses Python identifier fillRef
    __fillRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef'), 'fillRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeStyle_httpschemas_openxmlformats_orgdrawingml2006mainfillRef', False)

    
    fillRef = property(__fillRef.value, __fillRef.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectRef uses Python identifier effectRef
    __effectRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectRef'), 'effectRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeStyle_httpschemas_openxmlformats_orgdrawingml2006maineffectRef', False)

    
    effectRef = property(__effectRef.value, __effectRef.set, None, None)


    _ElementMap = {
        __fontRef.name() : __fontRef,
        __lnRef.name() : __lnRef,
        __fillRef.name() : __fillRef,
        __effectRef.name() : __effectRef
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ShapeStyle', CT_ShapeStyle)


# Complex type CT_Algorithm with content type ELEMENT_ONLY
class CT_Algorithm (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Algorithm')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Algorithm_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}param uses Python identifier param
    __param = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'param'), 'param', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Algorithm_httpschemas_openxmlformats_orgdrawingml2006diagramparam', True)

    
    param = property(__param.value, __param.set, None, u'Parameter')

    
    # Attribute rev uses Python identifier rev
    __rev = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rev'), 'rev', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Algorithm_rev', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    rev = property(__rev.value, __rev.set, None, u'Revision Number')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Algorithm_type', ST_AlgorithmType, required=True)
    
    type = property(__type.value, __type.set, None, u'Algorithm Type')


    _ElementMap = {
        __extLst.name() : __extLst,
        __param.name() : __param
    }
    _AttributeMap = {
        __rev.name() : __rev,
        __type.name() : __type
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Algorithm', CT_Algorithm)


# Complex type CT_ConnectionSiteList with content type ELEMENT_ONLY
class CT_ConnectionSiteList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ConnectionSiteList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cxn uses Python identifier cxn
    __cxn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cxn'), 'cxn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ConnectionSiteList_httpschemas_openxmlformats_orgdrawingml2006maincxn', True)

    
    cxn = property(__cxn.value, __cxn.set, None, u'Shape Connection Site')


    _ElementMap = {
        __cxn.name() : __cxn
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ConnectionSiteList', CT_ConnectionSiteList)


# Complex type CT_GlowEffect with content type ELEMENT_ONLY
class CT_GlowEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GlowEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GlowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GlowEffect_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GlowEffect_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GlowEffect_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GlowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GlowEffect_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Attribute rad uses Python identifier rad
    __rad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rad'), 'rad', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GlowEffect_rad', ST_PositiveCoordinate, unicode_default=u'0')
    
    rad = property(__rad.value, __rad.set, None, u'Radius')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __hslClr.name() : __hslClr,
        __scrgbClr.name() : __scrgbClr,
        __schemeClr.name() : __schemeClr,
        __sysClr.name() : __sysClr,
        __prstClr.name() : __prstClr
    }
    _AttributeMap = {
        __rad.name() : __rad
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GlowEffect', CT_GlowEffect)


# Complex type CT_ClipboardStyleSheet with content type ELEMENT_ONLY
class CT_ClipboardStyleSheet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ClipboardStyleSheet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrMap uses Python identifier clrMap
    __clrMap = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrMap'), 'clrMap', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ClipboardStyleSheet_httpschemas_openxmlformats_orgdrawingml2006mainclrMap', False)

    
    clrMap = property(__clrMap.value, __clrMap.set, None, u'Color Map')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}themeElements uses Python identifier themeElements
    __themeElements = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'themeElements'), 'themeElements', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ClipboardStyleSheet_httpschemas_openxmlformats_orgdrawingml2006mainthemeElements', False)

    
    themeElements = property(__themeElements.value, __themeElements.set, None, None)


    _ElementMap = {
        __clrMap.name() : __clrMap,
        __themeElements.name() : __themeElements
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ClipboardStyleSheet', CT_ClipboardStyleSheet)


# Complex type CT_TextCharacterProperties with content type ELEMENT_ONLY
class CT_TextCharacterProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextCharacterProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}uLnTx uses Python identifier uLnTx
    __uLnTx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'uLnTx'), 'uLnTx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainuLnTx', False)

    
    uLnTx = property(__uLnTx.value, __uLnTx.set, None, u'Underline Follows Text')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}rtl uses Python identifier rtl
    __rtl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'rtl'), 'rtl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainrtl', False)

    
    rtl = property(__rtl.value, __rtl.set, None, u'Right to Left Run')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}uLn uses Python identifier uLn
    __uLn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'uLn'), 'uLn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainuLn', False)

    
    uLn = property(__uLn.value, __uLn.set, None, u'Underline Stroke')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}uFillTx uses Python identifier uFillTx
    __uFillTx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'uFillTx'), 'uFillTx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainuFillTx', False)

    
    uFillTx = property(__uFillTx.value, __uFillTx.set, None, u'Underline Fill Properties Follow Text')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}uFill uses Python identifier uFill
    __uFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'uFill'), 'uFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainuFill', False)

    
    uFill = property(__uFill.value, __uFill.set, None, u'Underline Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ln uses Python identifier ln
    __ln = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), 'ln', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainln', False)

    
    ln = property(__ln.value, __ln.set, None, u'Line')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}highlight uses Python identifier highlight
    __highlight = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'highlight'), 'highlight', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainhighlight', False)

    
    highlight = property(__highlight.value, __highlight.set, None, u'Highlight Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}latin uses Python identifier latin
    __latin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'latin'), 'latin', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainlatin', False)

    
    latin = property(__latin.value, __latin.set, None, u'Latin Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hlinkMouseOver uses Python identifier hlinkMouseOver
    __hlinkMouseOver = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkMouseOver'), 'hlinkMouseOver', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainhlinkMouseOver', False)

    
    hlinkMouseOver = property(__hlinkMouseOver.value, __hlinkMouseOver.set, None, u'Mouse-Over Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ea uses Python identifier ea
    __ea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ea'), 'ea', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainea', False)

    
    ea = property(__ea.value, __ea.set, None, u'East Asian Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cs uses Python identifier cs
    __cs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cs'), 'cs', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006maincs', False)

    
    cs = property(__cs.value, __cs.set, None, u'Complex Script Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sym uses Python identifier sym
    __sym = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sym'), 'sym', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainsym', False)

    
    sym = property(__sym.value, __sym.set, None, u'Symbol Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hlinkClick uses Python identifier hlinkClick
    __hlinkClick = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkClick'), 'hlinkClick', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_httpschemas_openxmlformats_orgdrawingml2006mainhlinkClick', False)

    
    hlinkClick = property(__hlinkClick.value, __hlinkClick.set, None, u'Click Hyperlink')

    
    # Attribute bmk uses Python identifier bmk
    __bmk = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bmk'), 'bmk', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_bmk', pyxb.binding.datatypes.string)
    
    bmk = property(__bmk.value, __bmk.set, None, u'Bookmark Link Target')

    
    # Attribute sz uses Python identifier sz
    __sz = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sz'), 'sz', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_sz', ST_TextFontSize)
    
    sz = property(__sz.value, __sz.set, None, u'Font Size')

    
    # Attribute kern uses Python identifier kern
    __kern = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'kern'), 'kern', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_kern', ST_TextNonNegativePoint)
    
    kern = property(__kern.value, __kern.set, None, u'Kerning')

    
    # Attribute strike uses Python identifier strike
    __strike = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'strike'), 'strike', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_strike', ST_TextStrikeType)
    
    strike = property(__strike.value, __strike.set, None, u'Strikethrough')

    
    # Attribute i uses Python identifier i
    __i = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'i'), 'i', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_i', pyxb.binding.datatypes.boolean)
    
    i = property(__i.value, __i.set, None, u'Italics')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_b', pyxb.binding.datatypes.boolean)
    
    b = property(__b.value, __b.set, None, u'Bold')

    
    # Attribute err uses Python identifier err
    __err = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'err'), 'err', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_err', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    err = property(__err.value, __err.set, None, u'Spelling Error')

    
    # Attribute dirty uses Python identifier dirty
    __dirty = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dirty'), 'dirty', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_dirty', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    dirty = property(__dirty.value, __dirty.set, None, u'Dirty')

    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_lang', _s.ST_Lang)
    
    lang = property(__lang.value, __lang.set, None, u'Language ID')

    
    # Attribute kumimoji uses Python identifier kumimoji
    __kumimoji = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'kumimoji'), 'kumimoji', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_kumimoji', pyxb.binding.datatypes.boolean)
    
    kumimoji = property(__kumimoji.value, __kumimoji.set, None, u'Kumimoji')

    
    # Attribute smtClean uses Python identifier smtClean
    __smtClean = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'smtClean'), 'smtClean', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_smtClean', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    smtClean = property(__smtClean.value, __smtClean.set, None, u'SmartTag Clean')

    
    # Attribute u uses Python identifier u
    __u = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'u'), 'u', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_u', ST_TextUnderlineType)
    
    u = property(__u.value, __u.set, None, u'Underline')

    
    # Attribute noProof uses Python identifier noProof
    __noProof = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noProof'), 'noProof', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_noProof', pyxb.binding.datatypes.boolean)
    
    noProof = property(__noProof.value, __noProof.set, None, u'No Proofing')

    
    # Attribute smtId uses Python identifier smtId
    __smtId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'smtId'), 'smtId', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_smtId', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    smtId = property(__smtId.value, __smtId.set, None, u'SmartTag ID')

    
    # Attribute normalizeH uses Python identifier normalizeH
    __normalizeH = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'normalizeH'), 'normalizeH', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_normalizeH', pyxb.binding.datatypes.boolean)
    
    normalizeH = property(__normalizeH.value, __normalizeH.set, None, u'Normalize Heights')

    
    # Attribute baseline uses Python identifier baseline
    __baseline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'baseline'), 'baseline', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_baseline', ST_Percentage)
    
    baseline = property(__baseline.value, __baseline.set, None, u'Baseline')

    
    # Attribute spc uses Python identifier spc
    __spc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spc'), 'spc', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_spc', ST_TextPoint)
    
    spc = property(__spc.value, __spc.set, None, u'Spacing')

    
    # Attribute altLang uses Python identifier altLang
    __altLang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'altLang'), 'altLang', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_altLang', _s.ST_Lang)
    
    altLang = property(__altLang.value, __altLang.set, None, u'Alternative Language')

    
    # Attribute cap uses Python identifier cap
    __cap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cap'), 'cap', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextCharacterProperties_cap', ST_TextCapsType)
    
    cap = property(__cap.value, __cap.set, None, u'Capitalization')


    _ElementMap = {
        __uLnTx.name() : __uLnTx,
        __rtl.name() : __rtl,
        __uLn.name() : __uLn,
        __noFill.name() : __noFill,
        __uFillTx.name() : __uFillTx,
        __uFill.name() : __uFill,
        __ln.name() : __ln,
        __highlight.name() : __highlight,
        __latin.name() : __latin,
        __hlinkMouseOver.name() : __hlinkMouseOver,
        __ea.name() : __ea,
        __cs.name() : __cs,
        __effectDag.name() : __effectDag,
        __solidFill.name() : __solidFill,
        __gradFill.name() : __gradFill,
        __sym.name() : __sym,
        __blipFill.name() : __blipFill,
        __pattFill.name() : __pattFill,
        __grpFill.name() : __grpFill,
        __extLst.name() : __extLst,
        __effectLst.name() : __effectLst,
        __hlinkClick.name() : __hlinkClick
    }
    _AttributeMap = {
        __bmk.name() : __bmk,
        __sz.name() : __sz,
        __kern.name() : __kern,
        __strike.name() : __strike,
        __i.name() : __i,
        __b.name() : __b,
        __err.name() : __err,
        __dirty.name() : __dirty,
        __lang.name() : __lang,
        __kumimoji.name() : __kumimoji,
        __smtClean.name() : __smtClean,
        __u.name() : __u,
        __noProof.name() : __noProof,
        __smtId.name() : __smtId,
        __normalizeH.name() : __normalizeH,
        __baseline.name() : __baseline,
        __spc.name() : __spc,
        __altLang.name() : __altLang,
        __cap.name() : __cap
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextCharacterProperties', CT_TextCharacterProperties)


# Complex type CT_AnimationDgmBuildProperties with content type EMPTY
class CT_AnimationDgmBuildProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AnimationDgmBuildProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute bld uses Python identifier bld
    __bld = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bld'), 'bld', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationDgmBuildProperties_bld', ST_AnimationDgmBuildType, unicode_default=u'allAtOnce')
    
    bld = property(__bld.value, __bld.set, None, u'Build')

    
    # Attribute rev uses Python identifier rev
    __rev = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rev'), 'rev', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationDgmBuildProperties_rev', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    rev = property(__rev.value, __rev.set, None, u'Reverse Animation')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __bld.name() : __bld,
        __rev.name() : __rev
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AnimationDgmBuildProperties', CT_AnimationDgmBuildProperties)


# Complex type CT_AlphaCeilingEffect with content type EMPTY
class CT_AlphaCeilingEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AlphaCeilingEffect')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AlphaCeilingEffect', CT_AlphaCeilingEffect)


# Complex type CT_GvmlTextShape with content type ELEMENT_ONLY
class CT_GvmlTextShape (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlTextShape')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlTextShape_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}txBody uses Python identifier txBody
    __txBody = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'txBody'), 'txBody', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlTextShape_httpschemas_openxmlformats_orgdrawingml2006maintxBody', False)

    
    txBody = property(__txBody.value, __txBody.set, None, u'Shape Text Body')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}xfrm uses Python identifier xfrm
    __xfrm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), 'xfrm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlTextShape_httpschemas_openxmlformats_orgdrawingml2006mainxfrm', False)

    
    xfrm = property(__xfrm.value, __xfrm.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}useSpRect uses Python identifier useSpRect
    __useSpRect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'useSpRect'), 'useSpRect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlTextShape_httpschemas_openxmlformats_orgdrawingml2006mainuseSpRect', False)

    
    useSpRect = property(__useSpRect.value, __useSpRect.set, None, u'Use Shape Text Rectangle')


    _ElementMap = {
        __extLst.name() : __extLst,
        __txBody.name() : __txBody,
        __xfrm.name() : __xfrm,
        __useSpRect.name() : __useSpRect
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlTextShape', CT_GvmlTextShape)


# Complex type CT_GvmlGroupShapeNonVisual with content type ELEMENT_ONLY
class CT_GvmlGroupShapeNonVisual (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlGroupShapeNonVisual')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvGrpSpPr uses Python identifier cNvGrpSpPr
    __cNvGrpSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvGrpSpPr'), 'cNvGrpSpPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShapeNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvGrpSpPr', False)

    
    cNvGrpSpPr = property(__cNvGrpSpPr.value, __cNvGrpSpPr.set, None, u'Non-Visual Group Shape Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvPr uses Python identifier cNvPr
    __cNvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), 'cNvPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGroupShapeNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvPr', False)

    
    cNvPr = property(__cNvPr.value, __cNvPr.set, None, None)


    _ElementMap = {
        __cNvGrpSpPr.name() : __cNvGrpSpPr,
        __cNvPr.name() : __cNvPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlGroupShapeNonVisual', CT_GvmlGroupShapeNonVisual)


# Complex type CT_StyleDefinitionHeader with content type ELEMENT_ONLY
class CT_StyleDefinitionHeader (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_StyleDefinitionHeader')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'title'), 'title', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramtitle', True)

    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}catLst uses Python identifier catLst
    __catLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), 'catLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramcatLst', False)

    
    catLst = property(__catLst.value, __catLst.set, None, u'Category List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}desc uses Python identifier desc
    __desc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'desc'), 'desc', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramdesc', True)

    
    desc = property(__desc.value, __desc.set, None, u'Style Label Description')

    
    # Attribute resId uses Python identifier resId
    __resId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'resId'), 'resId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeader_resId', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    resId = property(__resId.value, __resId.set, None, u'Resource ID')

    
    # Attribute minVer uses Python identifier minVer
    __minVer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minVer'), 'minVer', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeader_minVer', pyxb.binding.datatypes.string, unicode_default=u'http://schemas.openxmlformats.org/drawingml/2006/diagram')
    
    minVer = property(__minVer.value, __minVer.set, None, u'Minimum Version')

    
    # Attribute uniqueId uses Python identifier uniqueId
    __uniqueId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueId'), 'uniqueId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleDefinitionHeader_uniqueId', pyxb.binding.datatypes.string, required=True)
    
    uniqueId = property(__uniqueId.value, __uniqueId.set, None, u'Unique Style ID')


    _ElementMap = {
        __extLst.name() : __extLst,
        __title.name() : __title,
        __catLst.name() : __catLst,
        __desc.name() : __desc
    }
    _AttributeMap = {
        __resId.name() : __resId,
        __minVer.name() : __minVer,
        __uniqueId.name() : __uniqueId
    }
_Namespace.addCategoryObject('typeBinding', u'CT_StyleDefinitionHeader', CT_StyleDefinitionHeader)


# Complex type CT_ColorSchemeList with content type ELEMENT_ONLY
class CT_ColorSchemeList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorSchemeList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extraClrScheme uses Python identifier extraClrScheme
    __extraClrScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extraClrScheme'), 'extraClrScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorSchemeList_httpschemas_openxmlformats_orgdrawingml2006mainextraClrScheme', True)

    
    extraClrScheme = property(__extraClrScheme.value, __extraClrScheme.set, None, u'Extra Color Scheme')


    _ElementMap = {
        __extraClrScheme.name() : __extraClrScheme
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorSchemeList', CT_ColorSchemeList)


# Complex type CT_TextBulletTypefaceFollowText with content type EMPTY
class CT_TextBulletTypefaceFollowText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBulletTypefaceFollowText')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBulletTypefaceFollowText', CT_TextBulletTypefaceFollowText)


# Complex type CT_DiagramDefinitionHeaderLst with content type ELEMENT_ONLY
class CT_DiagramDefinitionHeaderLst (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_DiagramDefinitionHeaderLst')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}layoutDefHdr uses Python identifier layoutDefHdr
    __layoutDefHdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'layoutDefHdr'), 'layoutDefHdr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeaderLst_httpschemas_openxmlformats_orgdrawingml2006diagramlayoutDefHdr', True)

    
    layoutDefHdr = property(__layoutDefHdr.value, __layoutDefHdr.set, None, u'Layout Definition Header')


    _ElementMap = {
        __layoutDefHdr.name() : __layoutDefHdr
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_DiagramDefinitionHeaderLst', CT_DiagramDefinitionHeaderLst)


# Complex type CT_TableCell with content type ELEMENT_ONLY
class CT_TableCell (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableCell')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}txBody uses Python identifier txBody
    __txBody = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'txBody'), 'txBody', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_httpschemas_openxmlformats_orgdrawingml2006maintxBody', False)

    
    txBody = property(__txBody.value, __txBody.set, None, u'Text Body')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tcPr uses Python identifier tcPr
    __tcPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tcPr'), 'tcPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_httpschemas_openxmlformats_orgdrawingml2006maintcPr', False)

    
    tcPr = property(__tcPr.value, __tcPr.set, None, u'Table Cell Properties')

    
    # Attribute gridSpan uses Python identifier gridSpan
    __gridSpan = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gridSpan'), 'gridSpan', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_gridSpan', pyxb.binding.datatypes.int, unicode_default=u'1')
    
    gridSpan = property(__gridSpan.value, __gridSpan.set, None, u'Grid Span')

    
    # Attribute vMerge uses Python identifier vMerge
    __vMerge = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vMerge'), 'vMerge', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_vMerge', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    vMerge = property(__vMerge.value, __vMerge.set, None, u'Vertical Merge')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_id', pyxb.binding.datatypes.string)
    
    id = property(__id.value, __id.set, None, u'Table Cell Identifier')

    
    # Attribute hMerge uses Python identifier hMerge
    __hMerge = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hMerge'), 'hMerge', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_hMerge', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hMerge = property(__hMerge.value, __hMerge.set, None, u'Horizontal Merge')

    
    # Attribute rowSpan uses Python identifier rowSpan
    __rowSpan = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rowSpan'), 'rowSpan', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCell_rowSpan', pyxb.binding.datatypes.int, unicode_default=u'1')
    
    rowSpan = property(__rowSpan.value, __rowSpan.set, None, u'Row Span')


    _ElementMap = {
        __extLst.name() : __extLst,
        __txBody.name() : __txBody,
        __tcPr.name() : __tcPr
    }
    _AttributeMap = {
        __gridSpan.name() : __gridSpan,
        __vMerge.name() : __vMerge,
        __id.name() : __id,
        __hMerge.name() : __hMerge,
        __rowSpan.name() : __rowSpan
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableCell', CT_TableCell)


# Complex type CT_Rules with content type ELEMENT_ONLY
class CT_Rules (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Rules')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}rule uses Python identifier rule
    __rule = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'rule'), 'rule', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Rules_httpschemas_openxmlformats_orgdrawingml2006diagramrule', True)

    
    rule = property(__rule.value, __rule.set, None, u'Rule')


    _ElementMap = {
        __rule.name() : __rule
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Rules', CT_Rules)


# Complex type CT_ColorMappingOverride with content type ELEMENT_ONLY
class CT_ColorMappingOverride (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorMappingOverride')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}masterClrMapping uses Python identifier masterClrMapping
    __masterClrMapping = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'masterClrMapping'), 'masterClrMapping', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMappingOverride_httpschemas_openxmlformats_orgdrawingml2006mainmasterClrMapping', False)

    
    masterClrMapping = property(__masterClrMapping.value, __masterClrMapping.set, None, u'Master Color Mapping')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}overrideClrMapping uses Python identifier overrideClrMapping
    __overrideClrMapping = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'overrideClrMapping'), 'overrideClrMapping', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorMappingOverride_httpschemas_openxmlformats_orgdrawingml2006mainoverrideClrMapping', False)

    
    overrideClrMapping = property(__overrideClrMapping.value, __overrideClrMapping.set, None, u'Override Color Mapping')


    _ElementMap = {
        __masterClrMapping.name() : __masterClrMapping,
        __overrideClrMapping.name() : __overrideClrMapping
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorMappingOverride', CT_ColorMappingOverride)


# Complex type CT_TextProps with content type ELEMENT_ONLY
class CT_TextProps (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_TextProps')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sp3d uses Python identifier sp3d
    __sp3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), 'sp3d', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_TextProps_httpschemas_openxmlformats_orgdrawingml2006mainsp3d', False)

    
    sp3d = property(__sp3d.value, __sp3d.set, None, u'Apply 3D shape properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}flatTx uses Python identifier flatTx
    __flatTx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'flatTx'), 'flatTx', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_TextProps_httpschemas_openxmlformats_orgdrawingml2006mainflatTx', False)

    
    flatTx = property(__flatTx.value, __flatTx.set, None, u'No text in 3D scene')


    _ElementMap = {
        __sp3d.name() : __sp3d,
        __flatTx.name() : __flatTx
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_TextProps', CT_TextProps)


# Complex type CT_TintEffect with content type EMPTY
class CT_TintEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TintEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute hue uses Python identifier hue
    __hue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TintEffect_hue', ST_PositiveFixedAngle, unicode_default=u'0')
    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Attribute amt uses Python identifier amt
    __amt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'amt'), 'amt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TintEffect_amt', ST_FixedPercentage, unicode_default=u'0%')
    
    amt = property(__amt.value, __amt.set, None, u'Amount')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __hue.name() : __hue,
        __amt.name() : __amt
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TintEffect', CT_TintEffect)


# Complex type CT_TextLineBreak with content type ELEMENT_ONLY
class CT_TextLineBreak (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextLineBreak')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextLineBreak_httpschemas_openxmlformats_orgdrawingml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Text Run Properties')


    _ElementMap = {
        __rPr.name() : __rPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextLineBreak', CT_TextLineBreak)


# Complex type CT_CTDescription with content type EMPTY
class CT_CTDescription (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_CTDescription')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTDescription_lang', pyxb.binding.datatypes.string, unicode_default=u'')
    
    lang = property(__lang.value, __lang.set, None, u'Language')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTDescription_val', pyxb.binding.datatypes.string, required=True)
    
    val = property(__val.value, __val.set, None, u'Description Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lang.name() : __lang,
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_CTDescription', CT_CTDescription)


# Complex type CT_BlendEffect with content type ELEMENT_ONLY
class CT_BlendEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BlendEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cont uses Python identifier cont
    __cont = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cont'), 'cont', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlendEffect_httpschemas_openxmlformats_orgdrawingml2006maincont', False)

    
    cont = property(__cont.value, __cont.set, None, u'Effect to blend')

    
    # Attribute blend uses Python identifier blend
    __blend = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blend'), 'blend', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BlendEffect_blend', ST_BlendMode, required=True)
    
    blend = property(__blend.value, __blend.set, None, u'Blend Mode')


    _ElementMap = {
        __cont.name() : __cont
    }
    _AttributeMap = {
        __blend.name() : __blend
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BlendEffect', CT_BlendEffect)


# Complex type CT_LineStyleList with content type ELEMENT_ONLY
class CT_LineStyleList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LineStyleList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ln uses Python identifier ln
    __ln = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), 'ln', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineStyleList_httpschemas_openxmlformats_orgdrawingml2006mainln', True)

    
    ln = property(__ln.value, __ln.set, None, None)


    _ElementMap = {
        __ln.name() : __ln
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LineStyleList', CT_LineStyleList)


# Complex type CT_TextBulletColorFollowText with content type EMPTY
class CT_TextBulletColorFollowText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBulletColorFollowText')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBulletColorFollowText', CT_TextBulletColorFollowText)


# Complex type CT_RelIds with content type EMPTY
class CT_RelIds (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_RelIds')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}lo uses Python identifier lo
    __lo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'lo'), 'lo', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_RelIds_httpschemas_openxmlformats_orgofficeDocument2006relationshipslo', _r.ST_RelationshipId, unicode_default=u'', required=True)
    
    lo = property(__lo.value, __lo.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}dm uses Python identifier dm
    __dm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'dm'), 'dm', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_RelIds_httpschemas_openxmlformats_orgofficeDocument2006relationshipsdm', _r.ST_RelationshipId, unicode_default=u'', required=True)
    
    dm = property(__dm.value, __dm.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}qs uses Python identifier qs
    __qs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'qs'), 'qs', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_RelIds_httpschemas_openxmlformats_orgofficeDocument2006relationshipsqs', _r.ST_RelationshipId, unicode_default=u'', required=True)
    
    qs = property(__qs.value, __qs.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}cs uses Python identifier cs
    __cs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'cs'), 'cs', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_RelIds_httpschemas_openxmlformats_orgofficeDocument2006relationshipscs', _r.ST_RelationshipId, unicode_default=u'', required=True)
    
    cs = property(__cs.value, __cs.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lo.name() : __lo,
        __dm.name() : __dm,
        __qs.name() : __qs,
        __cs.name() : __cs
    }
_Namespace.addCategoryObject('typeBinding', u'CT_RelIds', CT_RelIds)


# Complex type CT_Bevel with content type EMPTY
class CT_Bevel (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Bevel')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute h uses Python identifier h
    __h = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'h'), 'h', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Bevel_h', ST_PositiveCoordinate, unicode_default=u'76200')
    
    h = property(__h.value, __h.set, None, u'Height')

    
    # Attribute w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'w'), 'w', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Bevel_w', ST_PositiveCoordinate, unicode_default=u'76200')
    
    w = property(__w.value, __w.set, None, u'Width')

    
    # Attribute prst uses Python identifier prst
    __prst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prst'), 'prst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Bevel_prst', ST_BevelPresetType, unicode_default=u'circle')
    
    prst = property(__prst.value, __prst.set, None, u'Preset Bevel')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __h.name() : __h,
        __w.name() : __w,
        __prst.name() : __prst
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Bevel', CT_Bevel)


# Complex type CT_VideoFile with content type ELEMENT_ONLY
class CT_VideoFile (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_VideoFile')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_VideoFile_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute contentType uses Python identifier contentType
    __contentType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'contentType'), 'contentType', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_VideoFile_contentType', pyxb.binding.datatypes.string)
    
    contentType = property(__contentType.value, __contentType.set, None, u'Content Type of Linked Video File')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}link uses Python identifier link
    __link = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'link'), 'link', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_VideoFile_httpschemas_openxmlformats_orgofficeDocument2006relationshipslink', _r.ST_RelationshipId, required=True)
    
    link = property(__link.value, __link.set, None, None)


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __contentType.name() : __contentType,
        __link.name() : __link
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_VideoFile', CT_VideoFile)


# Complex type CT_Camera with content type ELEMENT_ONLY
class CT_Camera (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Camera')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}rot uses Python identifier rot
    __rot = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'rot'), 'rot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Camera_httpschemas_openxmlformats_orgdrawingml2006mainrot', False)

    
    rot = property(__rot.value, __rot.set, None, u'Rotation')

    
    # Attribute fov uses Python identifier fov
    __fov = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fov'), 'fov', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Camera_fov', ST_FOVAngle)
    
    fov = property(__fov.value, __fov.set, None, u'Field of View')

    
    # Attribute zoom uses Python identifier zoom
    __zoom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'zoom'), 'zoom', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Camera_zoom', ST_PositivePercentage, unicode_default=u'100%')
    
    zoom = property(__zoom.value, __zoom.set, None, u'Zoom')

    
    # Attribute prst uses Python identifier prst
    __prst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prst'), 'prst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Camera_prst', ST_PresetCameraType, required=True)
    
    prst = property(__prst.value, __prst.set, None, u'Preset Camera Type')


    _ElementMap = {
        __rot.name() : __rot
    }
    _AttributeMap = {
        __fov.name() : __fov,
        __zoom.name() : __zoom,
        __prst.name() : __prst
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Camera', CT_Camera)


# Complex type CT_AudioCDTime with content type EMPTY
class CT_AudioCDTime (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AudioCDTime')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute track uses Python identifier track
    __track = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'track'), 'track', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioCDTime_track', pyxb.binding.datatypes.unsignedByte, required=True)
    
    track = property(__track.value, __track.set, None, u'Track')

    
    # Attribute time uses Python identifier time
    __time = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'time'), 'time', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioCDTime_time', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    time = property(__time.value, __time.set, None, u'Time')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __track.name() : __track,
        __time.name() : __time
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AudioCDTime', CT_AudioCDTime)


# Complex type CT_When with content type ELEMENT_ONLY
class CT_When (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_When')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}constrLst uses Python identifier constrLst
    __constrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), 'constrLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramconstrLst', True)

    
    constrLst = property(__constrLst.value, __constrLst.set, None, u'Constraint List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', True)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}ruleLst uses Python identifier ruleLst
    __ruleLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), 'ruleLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramruleLst', True)

    
    ruleLst = property(__ruleLst.value, __ruleLst.set, None, u'Rule List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}choose uses Python identifier choose
    __choose = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'choose'), 'choose', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramchoose', True)

    
    choose = property(__choose.value, __choose.set, None, u'Choose Element')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}alg uses Python identifier alg
    __alg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'alg'), 'alg', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramalg', True)

    
    alg = property(__alg.value, __alg.set, None, u'Algorithm')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}layoutNode uses Python identifier layoutNode
    __layoutNode = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), 'layoutNode', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramlayoutNode', True)

    
    layoutNode = property(__layoutNode.value, __layoutNode.set, None, u'Layout Node')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}forEach uses Python identifier forEach
    __forEach = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), 'forEach', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramforEach', True)

    
    forEach = property(__forEach.value, __forEach.set, None, u'For Each')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}presOf uses Python identifier presOf
    __presOf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), 'presOf', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagrampresOf', True)

    
    presOf = property(__presOf.value, __presOf.set, None, u'Presentation Of')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}shape uses Python identifier shape
    __shape = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'shape'), 'shape', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_httpschemas_openxmlformats_orgdrawingml2006diagramshape', True)

    
    shape = property(__shape.value, __shape.set, None, u'Shape')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')

    
    # Attribute op uses Python identifier op
    __op = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'op'), 'op', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_op', ST_FunctionOperator, required=True)
    
    op = property(__op.value, __op.set, None, u'Operator')

    
    # Attribute step uses Python identifier step
    __step = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'step'), 'step', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_step', ST_Ints, unicode_default=u'1')
    
    step = property(__step.value, __step.set, None, u'Step')

    
    # Attribute hideLastTrans uses Python identifier hideLastTrans
    __hideLastTrans = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hideLastTrans'), 'hideLastTrans', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_hideLastTrans', ST_Booleans, unicode_default=u'true')
    
    hideLastTrans = property(__hideLastTrans.value, __hideLastTrans.set, None, u'Hide Last Transition')

    
    # Attribute axis uses Python identifier axis
    __axis = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axis'), 'axis', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_axis', ST_AxisTypes, unicode_default=u'none')
    
    axis = property(__axis.value, __axis.set, None, u'Axis')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_val', ST_FunctionValue, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')

    
    # Attribute cnt uses Python identifier cnt
    __cnt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cnt'), 'cnt', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_cnt', ST_UnsignedInts, unicode_default=u'0')
    
    cnt = property(__cnt.value, __cnt.set, None, u'Count')

    
    # Attribute ptType uses Python identifier ptType
    __ptType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ptType'), 'ptType', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_ptType', ST_ElementTypes, unicode_default=u'all')
    
    ptType = property(__ptType.value, __ptType.set, None, u'Data Point Type')

    
    # Attribute st uses Python identifier st
    __st = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'st'), 'st', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_st', ST_Ints, unicode_default=u'1')
    
    st = property(__st.value, __st.set, None, u'Start')

    
    # Attribute arg uses Python identifier arg
    __arg = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'arg'), 'arg', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_arg', ST_FunctionArgument, unicode_default=u'none')
    
    arg = property(__arg.value, __arg.set, None, u'Argument')

    
    # Attribute func uses Python identifier func
    __func = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'func'), 'func', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_When_func', ST_FunctionType, required=True)
    
    func = property(__func.value, __func.set, None, u'Function')


    _ElementMap = {
        __constrLst.name() : __constrLst,
        __extLst.name() : __extLst,
        __ruleLst.name() : __ruleLst,
        __choose.name() : __choose,
        __alg.name() : __alg,
        __layoutNode.name() : __layoutNode,
        __forEach.name() : __forEach,
        __presOf.name() : __presOf,
        __shape.name() : __shape
    }
    _AttributeMap = {
        __name.name() : __name,
        __op.name() : __op,
        __step.name() : __step,
        __hideLastTrans.name() : __hideLastTrans,
        __axis.name() : __axis,
        __val.name() : __val,
        __cnt.name() : __cnt,
        __ptType.name() : __ptType,
        __st.name() : __st,
        __arg.name() : __arg,
        __func.name() : __func
    }
_Namespace.addCategoryObject('typeBinding', u'CT_When', CT_When)


# Complex type CT_LinearShadeProperties with content type EMPTY
class CT_LinearShadeProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LinearShadeProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute scaled uses Python identifier scaled
    __scaled = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'scaled'), 'scaled', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LinearShadeProperties_scaled', pyxb.binding.datatypes.boolean)
    
    scaled = property(__scaled.value, __scaled.set, None, u'Scaled')

    
    # Attribute ang uses Python identifier ang
    __ang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ang'), 'ang', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LinearShadeProperties_ang', ST_PositiveFixedAngle)
    
    ang = property(__ang.value, __ang.set, None, u'Angle')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __scaled.name() : __scaled,
        __ang.name() : __ang
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LinearShadeProperties', CT_LinearShadeProperties)


# Complex type CT_XYAdjustHandle with content type ELEMENT_ONLY
class CT_XYAdjustHandle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_XYAdjustHandle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pos'), 'pos', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_XYAdjustHandle_httpschemas_openxmlformats_orgdrawingml2006mainpos', False)

    
    pos = property(__pos.value, __pos.set, None, u'Position')

    
    # Attribute gdRefY uses Python identifier gdRefY
    __gdRefY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gdRefY'), 'gdRefY', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_XYAdjustHandle_gdRefY', ST_GeomGuideName)
    
    gdRefY = property(__gdRefY.value, __gdRefY.set, None, u'Vertical Adjustment Guide')

    
    # Attribute minY uses Python identifier minY
    __minY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minY'), 'minY', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_XYAdjustHandle_minY', ST_AdjCoordinate)
    
    minY = property(__minY.value, __minY.set, None, u'Minimum Vertical Adjustment')

    
    # Attribute gdRefX uses Python identifier gdRefX
    __gdRefX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gdRefX'), 'gdRefX', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_XYAdjustHandle_gdRefX', ST_GeomGuideName)
    
    gdRefX = property(__gdRefX.value, __gdRefX.set, None, u'Horizontal Adjustment Guide')

    
    # Attribute maxY uses Python identifier maxY
    __maxY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxY'), 'maxY', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_XYAdjustHandle_maxY', ST_AdjCoordinate)
    
    maxY = property(__maxY.value, __maxY.set, None, u'Maximum Vertical Adjustment')

    
    # Attribute minX uses Python identifier minX
    __minX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minX'), 'minX', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_XYAdjustHandle_minX', ST_AdjCoordinate)
    
    minX = property(__minX.value, __minX.set, None, u'Minimum Horizontal Adjustment')

    
    # Attribute maxX uses Python identifier maxX
    __maxX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxX'), 'maxX', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_XYAdjustHandle_maxX', ST_AdjCoordinate)
    
    maxX = property(__maxX.value, __maxX.set, None, u'Maximum Horizontal Adjustment')


    _ElementMap = {
        __pos.name() : __pos
    }
    _AttributeMap = {
        __gdRefY.name() : __gdRefY,
        __minY.name() : __minY,
        __gdRefX.name() : __gdRefX,
        __maxY.name() : __maxY,
        __minX.name() : __minX,
        __maxX.name() : __maxX
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_XYAdjustHandle', CT_XYAdjustHandle)


# Complex type CT_EffectProperties with content type ELEMENT_ONLY
class CT_EffectProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_EffectProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_EffectProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')


    _ElementMap = {
        __effectLst.name() : __effectLst,
        __effectDag.name() : __effectDag
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_EffectProperties', CT_EffectProperties)


# Complex type CT_NonVisualConnectorProperties with content type ELEMENT_ONLY
class CT_NonVisualConnectorProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_NonVisualConnectorProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualConnectorProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cxnSpLocks uses Python identifier cxnSpLocks
    __cxnSpLocks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnSpLocks'), 'cxnSpLocks', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualConnectorProperties_httpschemas_openxmlformats_orgdrawingml2006maincxnSpLocks', False)

    
    cxnSpLocks = property(__cxnSpLocks.value, __cxnSpLocks.set, None, u'Connection Shape Locks')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}endCxn uses Python identifier endCxn
    __endCxn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'endCxn'), 'endCxn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualConnectorProperties_httpschemas_openxmlformats_orgdrawingml2006mainendCxn', False)

    
    endCxn = property(__endCxn.value, __endCxn.set, None, u'Connection End')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}stCxn uses Python identifier stCxn
    __stCxn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'stCxn'), 'stCxn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_NonVisualConnectorProperties_httpschemas_openxmlformats_orgdrawingml2006mainstCxn', False)

    
    stCxn = property(__stCxn.value, __stCxn.set, None, u'Connection Start')


    _ElementMap = {
        __extLst.name() : __extLst,
        __cxnSpLocks.name() : __cxnSpLocks,
        __endCxn.name() : __endCxn,
        __stCxn.name() : __stCxn
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_NonVisualConnectorProperties', CT_NonVisualConnectorProperties)


# Complex type CT_StretchInfoProperties with content type ELEMENT_ONLY
class CT_StretchInfoProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_StretchInfoProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillRect uses Python identifier fillRect
    __fillRect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRect'), 'fillRect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_StretchInfoProperties_httpschemas_openxmlformats_orgdrawingml2006mainfillRect', False)

    
    fillRect = property(__fillRect.value, __fillRect.set, None, u'Fill Rectangle')


    _ElementMap = {
        __fillRect.name() : __fillRect
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_StretchInfoProperties', CT_StretchInfoProperties)


# Complex type CT_Path2DLineTo with content type ELEMENT_ONLY
class CT_Path2DLineTo (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2DLineTo')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pt uses Python identifier pt
    __pt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), 'pt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DLineTo_httpschemas_openxmlformats_orgdrawingml2006mainpt', False)

    
    pt = property(__pt.value, __pt.set, None, u'Line end point')


    _ElementMap = {
        __pt.name() : __pt
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2DLineTo', CT_Path2DLineTo)


# Complex type CT_HSLEffect with content type EMPTY
class CT_HSLEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_HSLEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute hue uses Python identifier hue
    __hue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hue'), 'hue', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HSLEffect_hue', ST_PositiveFixedAngle, unicode_default=u'0')
    
    hue = property(__hue.value, __hue.set, None, u'Hue')

    
    # Attribute lum uses Python identifier lum
    __lum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lum'), 'lum', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HSLEffect_lum', ST_FixedPercentage, unicode_default=u'0%')
    
    lum = property(__lum.value, __lum.set, None, u'Luminance')

    
    # Attribute sat uses Python identifier sat
    __sat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sat'), 'sat', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_HSLEffect_sat', ST_FixedPercentage, unicode_default=u'0%')
    
    sat = property(__sat.value, __sat.set, None, u'Saturation')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __hue.name() : __hue,
        __lum.name() : __lum,
        __sat.name() : __sat
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_HSLEffect', CT_HSLEffect)


# Complex type CT_DiagramDefinitionHeader with content type ELEMENT_ONLY
class CT_DiagramDefinitionHeader (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_DiagramDefinitionHeader')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'title'), 'title', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramtitle', True)

    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}catLst uses Python identifier catLst
    __catLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), 'catLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramcatLst', False)

    
    catLst = property(__catLst.value, __catLst.set, None, u'Category List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}desc uses Python identifier desc
    __desc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'desc'), 'desc', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_httpschemas_openxmlformats_orgdrawingml2006diagramdesc', True)

    
    desc = property(__desc.value, __desc.set, None, u'Description')

    
    # Attribute defStyle uses Python identifier defStyle
    __defStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defStyle'), 'defStyle', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_defStyle', pyxb.binding.datatypes.string, unicode_default=u'')
    
    defStyle = property(__defStyle.value, __defStyle.set, None, u'Default Style')

    
    # Attribute resId uses Python identifier resId
    __resId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'resId'), 'resId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_resId', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    resId = property(__resId.value, __resId.set, None, u'Resource Identifier')

    
    # Attribute uniqueId uses Python identifier uniqueId
    __uniqueId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueId'), 'uniqueId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_uniqueId', pyxb.binding.datatypes.string, required=True)
    
    uniqueId = property(__uniqueId.value, __uniqueId.set, None, u'Unique Identifier')

    
    # Attribute minVer uses Python identifier minVer
    __minVer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minVer'), 'minVer', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_DiagramDefinitionHeader_minVer', pyxb.binding.datatypes.string, unicode_default=u'http://schemas.openxmlformats.org/drawingml/2006/diagram')
    
    minVer = property(__minVer.value, __minVer.set, None, u'Minimum Version')


    _ElementMap = {
        __extLst.name() : __extLst,
        __title.name() : __title,
        __catLst.name() : __catLst,
        __desc.name() : __desc
    }
    _AttributeMap = {
        __defStyle.name() : __defStyle,
        __resId.name() : __resId,
        __uniqueId.name() : __uniqueId,
        __minVer.name() : __minVer
    }
_Namespace.addCategoryObject('typeBinding', u'CT_DiagramDefinitionHeader', CT_DiagramDefinitionHeader)


# Complex type CT_PresetTextShape with content type ELEMENT_ONLY
class CT_PresetTextShape (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PresetTextShape')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}avLst uses Python identifier avLst
    __avLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst'), 'avLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetTextShape_httpschemas_openxmlformats_orgdrawingml2006mainavLst', False)

    
    avLst = property(__avLst.value, __avLst.set, None, u'Adjust Value List')

    
    # Attribute prst uses Python identifier prst
    __prst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prst'), 'prst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetTextShape_prst', ST_TextShapeType, required=True)
    
    prst = property(__prst.value, __prst.set, None, u'Preset Warp Shape')


    _ElementMap = {
        __avLst.name() : __avLst
    }
    _AttributeMap = {
        __prst.name() : __prst
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PresetTextShape', CT_PresetTextShape)


# Complex type CT_TextNoAutofit with content type EMPTY
class CT_TextNoAutofit (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextNoAutofit')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextNoAutofit', CT_TextNoAutofit)


# Complex type CT_FillStyleList with content type ELEMENT_ONLY
class CT_FillStyleList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FillStyleList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', True)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillStyleList_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', True)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillStyleList_httpschemas_openxmlformats_orgdrawingml2006maingradFill', True)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', True)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', True)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FillStyleList_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', True)

    
    noFill = property(__noFill.value, __noFill.set, None, None)


    _ElementMap = {
        __solidFill.name() : __solidFill,
        __grpFill.name() : __grpFill,
        __gradFill.name() : __gradFill,
        __pattFill.name() : __pattFill,
        __blipFill.name() : __blipFill,
        __noFill.name() : __noFill
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FillStyleList', CT_FillStyleList)


# Complex type CT_NumericRule with content type ELEMENT_ONLY
class CT_NumericRule (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_NumericRule')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_val', pyxb.binding.datatypes.double, unicode_default=u'NaN')
    
    val = property(__val.value, __val.set, None, u'Value')

    
    # Attribute max uses Python identifier max
    __max = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'max'), 'max', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_max', pyxb.binding.datatypes.double, unicode_default=u'NaN')
    
    max = property(__max.value, __max.set, None, u'Max Value')

    
    # Attribute for uses Python identifier for_
    __for = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'for'), 'for_', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_for', ST_ConstraintRelationship, unicode_default=u'self')
    
    for_ = property(__for.value, __for.set, None, u'For')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_type', ST_ConstraintType, required=True)
    
    type = property(__type.value, __type.set, None, u'Constraint Type')

    
    # Attribute forName uses Python identifier forName
    __forName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'forName'), 'forName', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_forName', pyxb.binding.datatypes.string, unicode_default=u'')
    
    forName = property(__forName.value, __forName.set, None, u'For Name')

    
    # Attribute ptType uses Python identifier ptType
    __ptType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ptType'), 'ptType', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_ptType', ST_ElementType, unicode_default=u'all')
    
    ptType = property(__ptType.value, __ptType.set, None, u'Data Point Type')

    
    # Attribute fact uses Python identifier fact
    __fact = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fact'), 'fact', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_NumericRule_fact', pyxb.binding.datatypes.double, unicode_default=u'NaN')
    
    fact = property(__fact.value, __fact.set, None, u'Factor')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __val.name() : __val,
        __max.name() : __max,
        __for.name() : __for,
        __type.name() : __type,
        __forName.name() : __forName,
        __ptType.name() : __ptType,
        __fact.name() : __fact
    }
_Namespace.addCategoryObject('typeBinding', u'CT_NumericRule', CT_NumericRule)


# Complex type CT_TextListStyle with content type ELEMENT_ONLY
class CT_TextListStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextListStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl2pPr uses Python identifier lvl2pPr
    __lvl2pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl2pPr'), 'lvl2pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl2pPr', False)

    
    lvl2pPr = property(__lvl2pPr.value, __lvl2pPr.set, None, u'List Level 2 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl7pPr uses Python identifier lvl7pPr
    __lvl7pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl7pPr'), 'lvl7pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl7pPr', False)

    
    lvl7pPr = property(__lvl7pPr.value, __lvl7pPr.set, None, u'List Level 7 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl8pPr uses Python identifier lvl8pPr
    __lvl8pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl8pPr'), 'lvl8pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl8pPr', False)

    
    lvl8pPr = property(__lvl8pPr.value, __lvl8pPr.set, None, u'List Level 8 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl9pPr uses Python identifier lvl9pPr
    __lvl9pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl9pPr'), 'lvl9pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl9pPr', False)

    
    lvl9pPr = property(__lvl9pPr.value, __lvl9pPr.set, None, u'List Level 9 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl1pPr uses Python identifier lvl1pPr
    __lvl1pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl1pPr'), 'lvl1pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl1pPr', False)

    
    lvl1pPr = property(__lvl1pPr.value, __lvl1pPr.set, None, u'List Level 1 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl4pPr uses Python identifier lvl4pPr
    __lvl4pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl4pPr'), 'lvl4pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl4pPr', False)

    
    lvl4pPr = property(__lvl4pPr.value, __lvl4pPr.set, None, u'List Level 4 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl3pPr uses Python identifier lvl3pPr
    __lvl3pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl3pPr'), 'lvl3pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl3pPr', False)

    
    lvl3pPr = property(__lvl3pPr.value, __lvl3pPr.set, None, u'List Level 3 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl5pPr uses Python identifier lvl5pPr
    __lvl5pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl5pPr'), 'lvl5pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl5pPr', False)

    
    lvl5pPr = property(__lvl5pPr.value, __lvl5pPr.set, None, u'List Level 5 Text Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}defPPr uses Python identifier defPPr
    __defPPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'defPPr'), 'defPPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006maindefPPr', False)

    
    defPPr = property(__defPPr.value, __defPPr.set, None, u'Default Paragraph Style')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lvl6pPr uses Python identifier lvl6pPr
    __lvl6pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl6pPr'), 'lvl6pPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextListStyle_httpschemas_openxmlformats_orgdrawingml2006mainlvl6pPr', False)

    
    lvl6pPr = property(__lvl6pPr.value, __lvl6pPr.set, None, u'List Level 6 Text Style')


    _ElementMap = {
        __lvl2pPr.name() : __lvl2pPr,
        __lvl7pPr.name() : __lvl7pPr,
        __lvl8pPr.name() : __lvl8pPr,
        __lvl9pPr.name() : __lvl9pPr,
        __lvl1pPr.name() : __lvl1pPr,
        __lvl4pPr.name() : __lvl4pPr,
        __extLst.name() : __extLst,
        __lvl3pPr.name() : __lvl3pPr,
        __lvl5pPr.name() : __lvl5pPr,
        __defPPr.name() : __defPPr,
        __lvl6pPr.name() : __lvl6pPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextListStyle', CT_TextListStyle)


# Complex type CT_Cell3D with content type ELEMENT_ONLY
class CT_Cell3D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Cell3D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Cell3D_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bevel uses Python identifier bevel
    __bevel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bevel'), 'bevel', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Cell3D_httpschemas_openxmlformats_orgdrawingml2006mainbevel', False)

    
    bevel = property(__bevel.value, __bevel.set, None, u'Bevel')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lightRig uses Python identifier lightRig
    __lightRig = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lightRig'), 'lightRig', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Cell3D_httpschemas_openxmlformats_orgdrawingml2006mainlightRig', False)

    
    lightRig = property(__lightRig.value, __lightRig.set, None, u'Light Rig')

    
    # Attribute prstMaterial uses Python identifier prstMaterial
    __prstMaterial = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prstMaterial'), 'prstMaterial', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Cell3D_prstMaterial', ST_PresetMaterialType, unicode_default=u'plastic')
    
    prstMaterial = property(__prstMaterial.value, __prstMaterial.set, None, u'Preset Material')


    _ElementMap = {
        __extLst.name() : __extLst,
        __bevel.name() : __bevel,
        __lightRig.name() : __lightRig
    }
    _AttributeMap = {
        __prstMaterial.name() : __prstMaterial
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Cell3D', CT_Cell3D)


# Complex type CT_Path2DQuadBezierTo with content type ELEMENT_ONLY
class CT_Path2DQuadBezierTo (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2DQuadBezierTo')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pt uses Python identifier pt
    __pt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), 'pt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DQuadBezierTo_httpschemas_openxmlformats_orgdrawingml2006mainpt', True)

    
    pt = property(__pt.value, __pt.set, None, u'Shape Path Point')


    _ElementMap = {
        __pt.name() : __pt
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2DQuadBezierTo', CT_Path2DQuadBezierTo)


# Complex type CT_AnimationChartElement with content type EMPTY
class CT_AnimationChartElement (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AnimationChartElement')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute seriesIdx uses Python identifier seriesIdx
    __seriesIdx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'seriesIdx'), 'seriesIdx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationChartElement_seriesIdx', pyxb.binding.datatypes.int, unicode_default=u'-1')
    
    seriesIdx = property(__seriesIdx.value, __seriesIdx.set, None, u'Series Index')

    
    # Attribute bldStep uses Python identifier bldStep
    __bldStep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bldStep'), 'bldStep', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationChartElement_bldStep', ST_ChartBuildStep, required=True)
    
    bldStep = property(__bldStep.value, __bldStep.set, None, u'Animation Build Step')

    
    # Attribute categoryIdx uses Python identifier categoryIdx
    __categoryIdx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'categoryIdx'), 'categoryIdx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationChartElement_categoryIdx', pyxb.binding.datatypes.int, unicode_default=u'-1')
    
    categoryIdx = property(__categoryIdx.value, __categoryIdx.set, None, u'Category Index')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __seriesIdx.name() : __seriesIdx,
        __bldStep.name() : __bldStep,
        __categoryIdx.name() : __categoryIdx
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AnimationChartElement', CT_AnimationChartElement)


# Complex type CT_Pt with content type ELEMENT_ONLY
class CT_Pt (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Pt')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Pt_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}prSet uses Python identifier prSet
    __prSet = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'prSet'), 'prSet', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Pt_httpschemas_openxmlformats_orgdrawingml2006diagramprSet', False)

    
    prSet = property(__prSet.value, __prSet.set, None, u'Property Set')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}t uses Python identifier t
    __t = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u't'), 't', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Pt_httpschemas_openxmlformats_orgdrawingml2006diagramt', False)

    
    t = property(__t.value, __t.set, None, u'Text Body')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}spPr uses Python identifier spPr
    __spPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'spPr'), 'spPr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Pt_httpschemas_openxmlformats_orgdrawingml2006diagramspPr', False)

    
    spPr = property(__spPr.value, __spPr.set, None, u'Shape Properties')

    
    # Attribute cxnId uses Python identifier cxnId
    __cxnId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cxnId'), 'cxnId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Pt_cxnId', ST_ModelId, unicode_default=u'0')
    
    cxnId = property(__cxnId.value, __cxnId.set, None, u'Connection Identifier')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Pt_type', ST_PtType, unicode_default=u'node')
    
    type = property(__type.value, __type.set, None, u'Point Type')

    
    # Attribute modelId uses Python identifier modelId
    __modelId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelId'), 'modelId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Pt_modelId', ST_ModelId, required=True)
    
    modelId = property(__modelId.value, __modelId.set, None, u'Model Identifier')


    _ElementMap = {
        __extLst.name() : __extLst,
        __prSet.name() : __prSet,
        __t.name() : __t,
        __spPr.name() : __spPr
    }
    _AttributeMap = {
        __cxnId.name() : __cxnId,
        __type.name() : __type,
        __modelId.name() : __modelId
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Pt', CT_Pt)


# Complex type CT_SDCategories with content type ELEMENT_ONLY
class CT_SDCategories (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_SDCategories')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}cat uses Python identifier cat
    __cat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'cat'), 'cat', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SDCategories_httpschemas_openxmlformats_orgdrawingml2006diagramcat', True)

    
    cat = property(__cat.value, __cat.set, None, u'Category')


    _ElementMap = {
        __cat.name() : __cat
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_SDCategories', CT_SDCategories)


# Complex type CT_CxnList with content type ELEMENT_ONLY
class CT_CxnList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_CxnList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}cxn uses Python identifier cxn
    __cxn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'cxn'), 'cxn', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CxnList_httpschemas_openxmlformats_orgdrawingml2006diagramcxn', True)

    
    cxn = property(__cxn.value, __cxn.set, None, u'Connection')


    _ElementMap = {
        __cxn.name() : __cxn
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_CxnList', CT_CxnList)


# Complex type CT_TextSpacingPoint with content type EMPTY
class CT_TextSpacingPoint (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextSpacingPoint')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextSpacingPoint_val', ST_TextSpacingPoint, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextSpacingPoint', CT_TextSpacingPoint)


# Complex type CT_SDCategory with content type EMPTY
class CT_SDCategory (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_SDCategory')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute pri uses Python identifier pri
    __pri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pri'), 'pri', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SDCategory_pri', pyxb.binding.datatypes.unsignedInt, required=True)
    
    pri = property(__pri.value, __pri.set, None, u'Priority')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SDCategory_type', pyxb.binding.datatypes.anyURI, required=True)
    
    type = property(__type.value, __type.set, None, u'Category Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __pri.name() : __pri,
        __type.name() : __type
    }
_Namespace.addCategoryObject('typeBinding', u'CT_SDCategory', CT_SDCategory)


# Complex type CT_Adj with content type EMPTY
class CT_Adj (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Adj')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Adj_val', pyxb.binding.datatypes.double, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')

    
    # Attribute idx uses Python identifier idx
    __idx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'idx'), 'idx', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Adj_idx', ST_Index1, required=True)
    
    idx = property(__idx.value, __idx.set, None, u'Adjust Handle Index')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __idx.name() : __idx
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Adj', CT_Adj)


# Complex type CT_ColorSchemeAndMapping with content type ELEMENT_ONLY
class CT_ColorSchemeAndMapping (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ColorSchemeAndMapping')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrMap uses Python identifier clrMap
    __clrMap = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrMap'), 'clrMap', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorSchemeAndMapping_httpschemas_openxmlformats_orgdrawingml2006mainclrMap', False)

    
    clrMap = property(__clrMap.value, __clrMap.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrScheme uses Python identifier clrScheme
    __clrScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme'), 'clrScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ColorSchemeAndMapping_httpschemas_openxmlformats_orgdrawingml2006mainclrScheme', False)

    
    clrScheme = property(__clrScheme.value, __clrScheme.set, None, None)


    _ElementMap = {
        __clrMap.name() : __clrMap,
        __clrScheme.name() : __clrScheme
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ColorSchemeAndMapping', CT_ColorSchemeAndMapping)


# Complex type CT_PresetShadowEffect with content type ELEMENT_ONLY
class CT_PresetShadowEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PresetShadowEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Attribute dist uses Python identifier dist
    __dist = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dist'), 'dist', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_dist', ST_PositiveCoordinate, unicode_default=u'0')
    
    dist = property(__dist.value, __dist.set, None, u'Distance')

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_dir', ST_PositiveFixedAngle, unicode_default=u'0')
    
    dir = property(__dir.value, __dir.set, None, u'Direction')

    
    # Attribute prst uses Python identifier prst
    __prst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prst'), 'prst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PresetShadowEffect_prst', ST_PresetShadowVal, required=True)
    
    prst = property(__prst.value, __prst.set, None, u'Preset Shadow')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __sysClr.name() : __sysClr,
        __schemeClr.name() : __schemeClr,
        __scrgbClr.name() : __scrgbClr,
        __prstClr.name() : __prstClr,
        __hslClr.name() : __hslClr
    }
    _AttributeMap = {
        __dist.name() : __dist,
        __dir.name() : __dir,
        __prst.name() : __prst
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PresetShadowEffect', CT_PresetShadowEffect)


# Complex type CT_TextTabStop with content type EMPTY
class CT_TextTabStop (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextTabStop')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute algn uses Python identifier algn
    __algn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algn'), 'algn', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextTabStop_algn', ST_TextTabAlignType)
    
    algn = property(__algn.value, __algn.set, None, u'Tab Alignment')

    
    # Attribute pos uses Python identifier pos
    __pos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pos'), 'pos', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextTabStop_pos', ST_Coordinate32)
    
    pos = property(__pos.value, __pos.set, None, u'Tab Position')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __algn.name() : __algn,
        __pos.name() : __pos
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextTabStop', CT_TextTabStop)


# Complex type CT_TextBlipBullet with content type ELEMENT_ONLY
class CT_TextBlipBullet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBlipBullet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blip uses Python identifier blip
    __blip = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blip'), 'blip', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBlipBullet_httpschemas_openxmlformats_orgdrawingml2006mainblip', False)

    
    blip = property(__blip.value, __blip.set, None, u'Blip')


    _ElementMap = {
        __blip.name() : __blip
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBlipBullet', CT_TextBlipBullet)


# Complex type CT_GeomGuide with content type EMPTY
class CT_GeomGuide (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GeomGuide')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GeomGuide_name', ST_GeomGuideName, required=True)
    
    name = property(__name.value, __name.set, None, u'Shape Guide Name')

    
    # Attribute fmla uses Python identifier fmla
    __fmla = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fmla'), 'fmla', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GeomGuide_fmla', ST_GeomGuideFormula, required=True)
    
    fmla = property(__fmla.value, __fmla.set, None, u'Shape Guide Formula')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __name.name() : __name,
        __fmla.name() : __fmla
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GeomGuide', CT_GeomGuide)


# Complex type CT_InnerShadowEffect with content type ELEMENT_ONLY
class CT_InnerShadowEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_InnerShadowEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Attribute blurRad uses Python identifier blurRad
    __blurRad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blurRad'), 'blurRad', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_blurRad', ST_PositiveCoordinate, unicode_default=u'0')
    
    blurRad = property(__blurRad.value, __blurRad.set, None, u'Blur Radius')

    
    # Attribute dist uses Python identifier dist
    __dist = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dist'), 'dist', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_dist', ST_PositiveCoordinate, unicode_default=u'0')
    
    dist = property(__dist.value, __dist.set, None, u'Distance')

    
    # Attribute dir uses Python identifier dir
    __dir = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dir'), 'dir', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_InnerShadowEffect_dir', ST_PositiveFixedAngle, unicode_default=u'0')
    
    dir = property(__dir.value, __dir.set, None, u'Direction')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __sysClr.name() : __sysClr,
        __schemeClr.name() : __schemeClr,
        __prstClr.name() : __prstClr,
        __scrgbClr.name() : __scrgbClr,
        __hslClr.name() : __hslClr
    }
    _AttributeMap = {
        __blurRad.name() : __blurRad,
        __dist.name() : __dist,
        __dir.name() : __dir
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_InnerShadowEffect', CT_InnerShadowEffect)


# Complex type CT_WholeE2oFormatting with content type ELEMENT_ONLY
class CT_WholeE2oFormatting (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_WholeE2oFormatting')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_WholeE2oFormatting_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ln uses Python identifier ln
    __ln = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), 'ln', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_WholeE2oFormatting_httpschemas_openxmlformats_orgdrawingml2006mainln', False)

    
    ln = property(__ln.value, __ln.set, None, u'Outline')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_WholeE2oFormatting_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')


    _ElementMap = {
        __effectLst.name() : __effectLst,
        __ln.name() : __ln,
        __effectDag.name() : __effectDag
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_WholeE2oFormatting', CT_WholeE2oFormatting)


# Complex type CT_PtList with content type ELEMENT_ONLY
class CT_PtList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_PtList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}pt uses Python identifier pt
    __pt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'pt'), 'pt', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_PtList_httpschemas_openxmlformats_orgdrawingml2006diagrampt', True)

    
    pt = property(__pt.value, __pt.set, None, u'Point')


    _ElementMap = {
        __pt.name() : __pt
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_PtList', CT_PtList)


# Complex type CT_OfficeStyleSheet with content type ELEMENT_ONLY
class CT_OfficeStyleSheet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_OfficeStyleSheet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeStyleSheet_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}themeElements uses Python identifier themeElements
    __themeElements = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'themeElements'), 'themeElements', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeStyleSheet_httpschemas_openxmlformats_orgdrawingml2006mainthemeElements', False)

    
    themeElements = property(__themeElements.value, __themeElements.set, None, u'Theme Elements')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}objectDefaults uses Python identifier objectDefaults
    __objectDefaults = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'objectDefaults'), 'objectDefaults', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeStyleSheet_httpschemas_openxmlformats_orgdrawingml2006mainobjectDefaults', False)

    
    objectDefaults = property(__objectDefaults.value, __objectDefaults.set, None, u'Object Defaults')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extraClrSchemeLst uses Python identifier extraClrSchemeLst
    __extraClrSchemeLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extraClrSchemeLst'), 'extraClrSchemeLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeStyleSheet_httpschemas_openxmlformats_orgdrawingml2006mainextraClrSchemeLst', False)

    
    extraClrSchemeLst = property(__extraClrSchemeLst.value, __extraClrSchemeLst.set, None, u'Extra Color Scheme List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}custClrLst uses Python identifier custClrLst
    __custClrLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'custClrLst'), 'custClrLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeStyleSheet_httpschemas_openxmlformats_orgdrawingml2006maincustClrLst', False)

    
    custClrLst = property(__custClrLst.value, __custClrLst.set, None, u'Custom Color List')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_OfficeStyleSheet_name', pyxb.binding.datatypes.string, unicode_default=u'')
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __extLst.name() : __extLst,
        __themeElements.name() : __themeElements,
        __objectDefaults.name() : __objectDefaults,
        __extraClrSchemeLst.name() : __extraClrSchemeLst,
        __custClrLst.name() : __custClrLst
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_OfficeStyleSheet', CT_OfficeStyleSheet)


# Complex type CT_AnimOne with content type EMPTY
class CT_AnimOne (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_AnimOne')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_AnimOne_val', ST_AnimOneStr, unicode_default=u'one')
    
    val = property(__val.value, __val.set, None, u'One By One Animation Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_AnimOne', CT_AnimOne)


# Complex type CT_TextUnderlineFillFollowText with content type EMPTY
class CT_TextUnderlineFillFollowText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextUnderlineFillFollowText')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextUnderlineFillFollowText', CT_TextUnderlineFillFollowText)


# Complex type CT_TableCol with content type ELEMENT_ONLY
class CT_TableCol (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableCol')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCol_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'w'), 'w', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCol_w', ST_Coordinate, required=True)
    
    w = property(__w.value, __w.set, None, u'Width')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __w.name() : __w
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableCol', CT_TableCol)


# Complex type CT_Category with content type EMPTY
class CT_Category (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Category')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute pri uses Python identifier pri
    __pri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pri'), 'pri', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Category_pri', pyxb.binding.datatypes.unsignedInt, required=True)
    
    pri = property(__pri.value, __pri.set, None, u'Priority')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Category_type', pyxb.binding.datatypes.anyURI, required=True)
    
    type = property(__type.value, __type.set, None, u'Category Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __pri.name() : __pri,
        __type.name() : __type
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Category', CT_Category)


# Complex type CT_HierBranchStyle with content type EMPTY
class CT_HierBranchStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_HierBranchStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_HierBranchStyle_val', ST_HierBranchStyle, unicode_default=u'std')
    
    val = property(__val.value, __val.set, None, u'Organization Chart Branch Style Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_HierBranchStyle', CT_HierBranchStyle)


# Complex type CT_GvmlShapeNonVisual with content type ELEMENT_ONLY
class CT_GvmlShapeNonVisual (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlShapeNonVisual')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvSpPr uses Python identifier cNvSpPr
    __cNvSpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvSpPr'), 'cNvSpPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlShapeNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvSpPr', False)

    
    cNvSpPr = property(__cNvSpPr.value, __cNvSpPr.set, None, u'Non-Visual Shape Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvPr uses Python identifier cNvPr
    __cNvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), 'cNvPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlShapeNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvPr', False)

    
    cNvPr = property(__cNvPr.value, __cNvPr.set, None, None)


    _ElementMap = {
        __cNvSpPr.name() : __cNvSpPr,
        __cNvPr.name() : __cNvPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlShapeNonVisual', CT_GvmlShapeNonVisual)


# Complex type CT_TableProperties with content type ELEMENT_ONLY
class CT_TableProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Extension List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectLst uses Python identifier effectLst
    __effectLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), 'effectLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectLst', False)

    
    effectLst = property(__effectLst.value, __effectLst.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectDag uses Python identifier effectDag
    __effectDag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), 'effectDag', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006maineffectDag', False)

    
    effectDag = property(__effectDag.value, __effectDag.set, None, u'Effect Container')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tableStyleId uses Python identifier tableStyleId
    __tableStyleId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tableStyleId'), 'tableStyleId', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006maintableStyleId', False)

    
    tableStyleId = property(__tableStyleId.value, __tableStyleId.set, None, u'Table Style ID')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tableStyle uses Python identifier tableStyle
    __tableStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tableStyle'), 'tableStyle', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_httpschemas_openxmlformats_orgdrawingml2006maintableStyle', False)

    
    tableStyle = property(__tableStyle.value, __tableStyle.set, None, u'Table Style')

    
    # Attribute bandCol uses Python identifier bandCol
    __bandCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bandCol'), 'bandCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_bandCol', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    bandCol = property(__bandCol.value, __bandCol.set, None, u'Banded Columns')

    
    # Attribute rtl uses Python identifier rtl
    __rtl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rtl'), 'rtl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_rtl', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    rtl = property(__rtl.value, __rtl.set, None, u'Right-to-Left')

    
    # Attribute firstRow uses Python identifier firstRow
    __firstRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'firstRow'), 'firstRow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_firstRow', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    firstRow = property(__firstRow.value, __firstRow.set, None, u'First Row')

    
    # Attribute firstCol uses Python identifier firstCol
    __firstCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'firstCol'), 'firstCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_firstCol', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    firstCol = property(__firstCol.value, __firstCol.set, None, u'First Column')

    
    # Attribute lastRow uses Python identifier lastRow
    __lastRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lastRow'), 'lastRow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_lastRow', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    lastRow = property(__lastRow.value, __lastRow.set, None, u'Last Row')

    
    # Attribute bandRow uses Python identifier bandRow
    __bandRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bandRow'), 'bandRow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_bandRow', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    bandRow = property(__bandRow.value, __bandRow.set, None, u'Banded Rows')

    
    # Attribute lastCol uses Python identifier lastCol
    __lastCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lastCol'), 'lastCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableProperties_lastCol', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    lastCol = property(__lastCol.value, __lastCol.set, None, u'Last Column')


    _ElementMap = {
        __pattFill.name() : __pattFill,
        __noFill.name() : __noFill,
        __grpFill.name() : __grpFill,
        __solidFill.name() : __solidFill,
        __extLst.name() : __extLst,
        __effectLst.name() : __effectLst,
        __gradFill.name() : __gradFill,
        __effectDag.name() : __effectDag,
        __blipFill.name() : __blipFill,
        __tableStyleId.name() : __tableStyleId,
        __tableStyle.name() : __tableStyle
    }
    _AttributeMap = {
        __bandCol.name() : __bandCol,
        __rtl.name() : __rtl,
        __firstRow.name() : __firstRow,
        __firstCol.name() : __firstCol,
        __lastRow.name() : __lastRow,
        __bandRow.name() : __bandRow,
        __lastCol.name() : __lastCol
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableProperties', CT_TableProperties)


# Complex type CT_Path2DList with content type ELEMENT_ONLY
class CT_Path2DList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2DList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}path uses Python identifier path
    __path = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'path'), 'path', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DList_httpschemas_openxmlformats_orgdrawingml2006mainpath', True)

    
    path = property(__path.value, __path.set, None, u'Shape Path')


    _ElementMap = {
        __path.name() : __path
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2DList', CT_Path2DList)


# Complex type CT_Cxn with content type ELEMENT_ONLY
class CT_Cxn (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Cxn')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute modelId uses Python identifier modelId
    __modelId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'modelId'), 'modelId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_modelId', ST_ModelId, required=True)
    
    modelId = property(__modelId.value, __modelId.set, None, u'Model Identifier')

    
    # Attribute parTransId uses Python identifier parTransId
    __parTransId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parTransId'), 'parTransId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_parTransId', ST_ModelId, unicode_default=u'0')
    
    parTransId = property(__parTransId.value, __parTransId.set, None, u'Parent Transition Identifier')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_type', ST_CxnType, unicode_default=u'parOf')
    
    type = property(__type.value, __type.set, None, u'Point Type')

    
    # Attribute srcId uses Python identifier srcId
    __srcId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'srcId'), 'srcId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_srcId', ST_ModelId, required=True)
    
    srcId = property(__srcId.value, __srcId.set, None, u'Source Identifier')

    
    # Attribute sibTransId uses Python identifier sibTransId
    __sibTransId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sibTransId'), 'sibTransId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_sibTransId', ST_ModelId, unicode_default=u'0')
    
    sibTransId = property(__sibTransId.value, __sibTransId.set, None, u'Sibling Transition Identifier')

    
    # Attribute destId uses Python identifier destId
    __destId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'destId'), 'destId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_destId', ST_ModelId, required=True)
    
    destId = property(__destId.value, __destId.set, None, u'Destination Identifier')

    
    # Attribute presId uses Python identifier presId
    __presId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'presId'), 'presId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_presId', pyxb.binding.datatypes.string, unicode_default=u'')
    
    presId = property(__presId.value, __presId.set, None, u'Presentation Identifier')

    
    # Attribute srcOrd uses Python identifier srcOrd
    __srcOrd = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'srcOrd'), 'srcOrd', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_srcOrd', pyxb.binding.datatypes.unsignedInt, required=True)
    
    srcOrd = property(__srcOrd.value, __srcOrd.set, None, u'Source Position')

    
    # Attribute destOrd uses Python identifier destOrd
    __destOrd = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'destOrd'), 'destOrd', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Cxn_destOrd', pyxb.binding.datatypes.unsignedInt, required=True)
    
    destOrd = property(__destOrd.value, __destOrd.set, None, u'Destination Position')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __modelId.name() : __modelId,
        __parTransId.name() : __parTransId,
        __type.name() : __type,
        __srcId.name() : __srcId,
        __sibTransId.name() : __sibTransId,
        __destId.name() : __destId,
        __presId.name() : __presId,
        __srcOrd.name() : __srcOrd,
        __destOrd.name() : __destOrd
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Cxn', CT_Cxn)


# Complex type CT_Headers with content type ELEMENT_ONLY
class CT_Headers (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Headers')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}header uses Python identifier header
    __header = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'header'), 'header', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Headers_httpschemas_openxmlformats_orgdrawingml2006mainheader', True)

    
    header = property(__header.value, __header.set, None, u'Header Cell Reference')


    _ElementMap = {
        __header.name() : __header
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Headers', CT_Headers)


# Complex type CT_LineJoinMiterProperties with content type EMPTY
class CT_LineJoinMiterProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_LineJoinMiterProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lim uses Python identifier lim
    __lim = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lim'), 'lim', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_LineJoinMiterProperties_lim', ST_PositivePercentage)
    
    lim = property(__lim.value, __lim.set, None, u'Miter Join Limit')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lim.name() : __lim
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_LineJoinMiterProperties', CT_LineJoinMiterProperties)


# Complex type CT_TextTabStopList with content type ELEMENT_ONLY
class CT_TextTabStopList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextTabStopList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tab uses Python identifier tab
    __tab = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tab'), 'tab', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextTabStopList_httpschemas_openxmlformats_orgdrawingml2006maintab', True)

    
    tab = property(__tab.value, __tab.set, None, u'Tab Stop')


    _ElementMap = {
        __tab.name() : __tab
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextTabStopList', CT_TextTabStopList)


# Complex type CT_ColorTransform with content type ELEMENT_ONLY
class CT_ColorTransform (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ColorTransform')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransform_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'title'), 'title', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransform_httpschemas_openxmlformats_orgdrawingml2006diagramtitle', True)

    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}styleLbl uses Python identifier styleLbl
    __styleLbl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'styleLbl'), 'styleLbl', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransform_httpschemas_openxmlformats_orgdrawingml2006diagramstyleLbl', True)

    
    styleLbl = property(__styleLbl.value, __styleLbl.set, None, u'Style Label')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}catLst uses Python identifier catLst
    __catLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), 'catLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransform_httpschemas_openxmlformats_orgdrawingml2006diagramcatLst', False)

    
    catLst = property(__catLst.value, __catLst.set, None, u'Color Transform Category List')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}desc uses Python identifier desc
    __desc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'desc'), 'desc', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransform_httpschemas_openxmlformats_orgdrawingml2006diagramdesc', True)

    
    desc = property(__desc.value, __desc.set, None, u'Description')

    
    # Attribute minVer uses Python identifier minVer
    __minVer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minVer'), 'minVer', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransform_minVer', pyxb.binding.datatypes.string, unicode_default=u'http://schemas.openxmlformats.org/drawingml/2006/diagram')
    
    minVer = property(__minVer.value, __minVer.set, None, u'Minimum Version')

    
    # Attribute uniqueId uses Python identifier uniqueId
    __uniqueId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueId'), 'uniqueId', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ColorTransform_uniqueId', pyxb.binding.datatypes.string, unicode_default=u'')
    
    uniqueId = property(__uniqueId.value, __uniqueId.set, None, u'Unique ID')


    _ElementMap = {
        __extLst.name() : __extLst,
        __title.name() : __title,
        __styleLbl.name() : __styleLbl,
        __catLst.name() : __catLst,
        __desc.name() : __desc
    }
    _AttributeMap = {
        __minVer.name() : __minVer,
        __uniqueId.name() : __uniqueId
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ColorTransform', CT_ColorTransform)


# Complex type CT_TableRow with content type ELEMENT_ONLY
class CT_TableRow (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableRow')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableRow_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tc uses Python identifier tc
    __tc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tc'), 'tc', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableRow_httpschemas_openxmlformats_orgdrawingml2006maintc', True)

    
    tc = property(__tc.value, __tc.set, None, u'Table Cell')

    
    # Attribute h uses Python identifier h
    __h = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'h'), 'h', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableRow_h', ST_Coordinate, required=True)
    
    h = property(__h.value, __h.set, None, u'Height')


    _ElementMap = {
        __extLst.name() : __extLst,
        __tc.name() : __tc
    }
    _AttributeMap = {
        __h.name() : __h
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableRow', CT_TableRow)


# Complex type CT_FontScheme with content type ELEMENT_ONLY
class CT_FontScheme (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_FontScheme')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontScheme_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}majorFont uses Python identifier majorFont
    __majorFont = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'majorFont'), 'majorFont', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontScheme_httpschemas_openxmlformats_orgdrawingml2006mainmajorFont', False)

    
    majorFont = property(__majorFont.value, __majorFont.set, None, u'Major Font')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}minorFont uses Python identifier minorFont
    __minorFont = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'minorFont'), 'minorFont', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontScheme_httpschemas_openxmlformats_orgdrawingml2006mainminorFont', False)

    
    minorFont = property(__minorFont.value, __minorFont.set, None, u'Minor fonts')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_FontScheme_name', pyxb.binding.datatypes.string, required=True)
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        __extLst.name() : __extLst,
        __majorFont.name() : __majorFont,
        __minorFont.name() : __minorFont
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_FontScheme', CT_FontScheme)


# Complex type CT_SDName with content type EMPTY
class CT_SDName (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_SDName')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lang'), 'lang', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SDName_lang', pyxb.binding.datatypes.string, unicode_default=u'')
    
    lang = property(__lang.value, __lang.set, None, u'Natural Language')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_SDName_val', pyxb.binding.datatypes.string, required=True)
    
    val = property(__val.value, __val.set, None, u'Description Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lang.name() : __lang,
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_SDName', CT_SDName)


# Complex type CT_BaseStylesOverride with content type ELEMENT_ONLY
class CT_BaseStylesOverride (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_BaseStylesOverride')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fmtScheme uses Python identifier fmtScheme
    __fmtScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fmtScheme'), 'fmtScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BaseStylesOverride_httpschemas_openxmlformats_orgdrawingml2006mainfmtScheme', False)

    
    fmtScheme = property(__fmtScheme.value, __fmtScheme.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}clrScheme uses Python identifier clrScheme
    __clrScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme'), 'clrScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BaseStylesOverride_httpschemas_openxmlformats_orgdrawingml2006mainclrScheme', False)

    
    clrScheme = property(__clrScheme.value, __clrScheme.set, None, u'Color Scheme')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fontScheme uses Python identifier fontScheme
    __fontScheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fontScheme'), 'fontScheme', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_BaseStylesOverride_httpschemas_openxmlformats_orgdrawingml2006mainfontScheme', False)

    
    fontScheme = property(__fontScheme.value, __fontScheme.set, None, None)


    _ElementMap = {
        __fmtScheme.name() : __fmtScheme,
        __clrScheme.name() : __clrScheme,
        __fontScheme.name() : __fontScheme
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_BaseStylesOverride', CT_BaseStylesOverride)


# Complex type CT_ShapeLocking with content type ELEMENT_ONLY
class CT_ShapeLocking (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ShapeLocking')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute noMove uses Python identifier noMove
    __noMove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noMove'), 'noMove', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noMove', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noMove = property(__noMove.value, __noMove.set, None, u'Disallow Shape Movement')

    
    # Attribute noResize uses Python identifier noResize
    __noResize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noResize'), 'noResize', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noResize', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noResize = property(__noResize.value, __noResize.set, None, u'Disallow Shape Resize')

    
    # Attribute noSelect uses Python identifier noSelect
    __noSelect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noSelect'), 'noSelect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noSelect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noSelect = property(__noSelect.value, __noSelect.set, None, u'Disallow Shape Selection')

    
    # Attribute noChangeShapeType uses Python identifier noChangeShapeType
    __noChangeShapeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeShapeType'), 'noChangeShapeType', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noChangeShapeType', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeShapeType = property(__noChangeShapeType.value, __noChangeShapeType.set, None, u'Disallow Shape Type Change')

    
    # Attribute noGrp uses Python identifier noGrp
    __noGrp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noGrp'), 'noGrp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noGrp', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noGrp = property(__noGrp.value, __noGrp.set, None, u'Disallow Shape Grouping')

    
    # Attribute noChangeArrowheads uses Python identifier noChangeArrowheads
    __noChangeArrowheads = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeArrowheads'), 'noChangeArrowheads', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noChangeArrowheads', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeArrowheads = property(__noChangeArrowheads.value, __noChangeArrowheads.set, None, u'Disallow Arrowhead Changes')

    
    # Attribute noChangeAspect uses Python identifier noChangeAspect
    __noChangeAspect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeAspect'), 'noChangeAspect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noChangeAspect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeAspect = property(__noChangeAspect.value, __noChangeAspect.set, None, u'Disallow Aspect Ratio Change')

    
    # Attribute noEditPoints uses Python identifier noEditPoints
    __noEditPoints = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noEditPoints'), 'noEditPoints', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noEditPoints', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noEditPoints = property(__noEditPoints.value, __noEditPoints.set, None, u'Disallow Shape Point Editing')

    
    # Attribute noTextEdit uses Python identifier noTextEdit
    __noTextEdit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noTextEdit'), 'noTextEdit', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noTextEdit', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noTextEdit = property(__noTextEdit.value, __noTextEdit.set, None, u'Disallow Shape Text Editing')

    
    # Attribute noAdjustHandles uses Python identifier noAdjustHandles
    __noAdjustHandles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noAdjustHandles'), 'noAdjustHandles', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noAdjustHandles', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noAdjustHandles = property(__noAdjustHandles.value, __noAdjustHandles.set, None, u'Disallow Showing Adjust Handles')

    
    # Attribute noRot uses Python identifier noRot
    __noRot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noRot'), 'noRot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ShapeLocking_noRot', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noRot = property(__noRot.value, __noRot.set, None, u'Disallow Shape Rotation')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __noMove.name() : __noMove,
        __noResize.name() : __noResize,
        __noSelect.name() : __noSelect,
        __noChangeShapeType.name() : __noChangeShapeType,
        __noGrp.name() : __noGrp,
        __noChangeArrowheads.name() : __noChangeArrowheads,
        __noChangeAspect.name() : __noChangeAspect,
        __noEditPoints.name() : __noEditPoints,
        __noTextEdit.name() : __noTextEdit,
        __noAdjustHandles.name() : __noAdjustHandles,
        __noRot.name() : __noRot
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ShapeLocking', CT_ShapeLocking)


# Complex type CT_Transform2D with content type ELEMENT_ONLY
class CT_Transform2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Transform2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ext uses Python identifier ext
    __ext = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ext'), 'ext', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Transform2D_httpschemas_openxmlformats_orgdrawingml2006mainext', False)

    
    ext = property(__ext.value, __ext.set, None, u'Extents')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}off uses Python identifier off
    __off = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'off'), 'off', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Transform2D_httpschemas_openxmlformats_orgdrawingml2006mainoff', False)

    
    off = property(__off.value, __off.set, None, u'Offset')

    
    # Attribute flipV uses Python identifier flipV
    __flipV = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'flipV'), 'flipV', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Transform2D_flipV', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    flipV = property(__flipV.value, __flipV.set, None, u'Vertical Flip')

    
    # Attribute rot uses Python identifier rot
    __rot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rot'), 'rot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Transform2D_rot', ST_Angle, unicode_default=u'0')
    
    rot = property(__rot.value, __rot.set, None, u'Rotation')

    
    # Attribute flipH uses Python identifier flipH
    __flipH = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'flipH'), 'flipH', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Transform2D_flipH', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    flipH = property(__flipH.value, __flipH.set, None, u'Horizontal Flip')


    _ElementMap = {
        __ext.name() : __ext,
        __off.name() : __off
    }
    _AttributeMap = {
        __flipV.name() : __flipV,
        __rot.name() : __rot,
        __flipH.name() : __flipH
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Transform2D', CT_Transform2D)


# Complex type CT_SupplementalFont with content type EMPTY
class CT_SupplementalFont (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_SupplementalFont')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute typeface uses Python identifier typeface
    __typeface = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'typeface'), 'typeface', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SupplementalFont_typeface', ST_TextTypeface, required=True)
    
    typeface = property(__typeface.value, __typeface.set, None, u'Typeface')

    
    # Attribute script uses Python identifier script
    __script = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'script'), 'script', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_SupplementalFont_script', pyxb.binding.datatypes.string, required=True)
    
    script = property(__script.value, __script.set, None, u'Script')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __typeface.name() : __typeface,
        __script.name() : __script
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_SupplementalFont', CT_SupplementalFont)


# Complex type CT_AnimationDgmElement with content type EMPTY
class CT_AnimationDgmElement (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AnimationDgmElement')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute bldStep uses Python identifier bldStep
    __bldStep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bldStep'), 'bldStep', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationDgmElement_bldStep', ST_DgmBuildStep, unicode_default=u'sp')
    
    bldStep = property(__bldStep.value, __bldStep.set, None, u'Animation Build Step')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationDgmElement_id', _s.ST_Guid, unicode_default=u'{00000000-0000-0000-0000-000000000000}')
    
    id = property(__id.value, __id.set, None, u'Identifier')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __bldStep.name() : __bldStep,
        __id.name() : __id
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AnimationDgmElement', CT_AnimationDgmElement)


# Complex type CT_Path2DCubicBezierTo with content type ELEMENT_ONLY
class CT_Path2DCubicBezierTo (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Path2DCubicBezierTo')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pt uses Python identifier pt
    __pt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), 'pt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Path2DCubicBezierTo_httpschemas_openxmlformats_orgdrawingml2006mainpt', True)

    
    pt = property(__pt.value, __pt.set, None, u'Control points and end point')


    _ElementMap = {
        __pt.name() : __pt
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Path2DCubicBezierTo', CT_Path2DCubicBezierTo)


# Complex type CT_Point3D with content type EMPTY
class CT_Point3D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Point3D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'y'), 'y', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Point3D_y', ST_Coordinate, required=True)
    
    y = property(__y.value, __y.set, None, u'Y-Coordinate in 3D')

    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'x'), 'x', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Point3D_x', ST_Coordinate, required=True)
    
    x = property(__x.value, __x.set, None, u'X-Coordinate in 3D')

    
    # Attribute z uses Python identifier z
    __z = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'z'), 'z', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Point3D_z', ST_Coordinate, required=True)
    
    z = property(__z.value, __z.set, None, u'Z-Coordinate in 3D')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __y.name() : __y,
        __x.name() : __x,
        __z.name() : __z
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Point3D', CT_Point3D)


# Complex type CT_AudioFile with content type ELEMENT_ONLY
class CT_AudioFile (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AudioFile')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioFile_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute contentType uses Python identifier contentType
    __contentType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'contentType'), 'contentType', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioFile_contentType', pyxb.binding.datatypes.string)
    
    contentType = property(__contentType.value, __contentType.set, None, u'Content Type of Linked Audio File')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}link uses Python identifier link
    __link = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'link'), 'link', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AudioFile_httpschemas_openxmlformats_orgofficeDocument2006relationshipslink', _r.ST_RelationshipId, required=True)
    
    link = property(__link.value, __link.set, None, None)


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __contentType.name() : __contentType,
        __link.name() : __link
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AudioFile', CT_AudioFile)


# Complex type CT_RegularTextRun with content type ELEMENT_ONLY
class CT_RegularTextRun (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_RegularTextRun')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}t uses Python identifier t
    __t = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u't'), 't', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RegularTextRun_httpschemas_openxmlformats_orgdrawingml2006maint', False)

    
    t = property(__t.value, __t.set, None, u'Text String')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_RegularTextRun_httpschemas_openxmlformats_orgdrawingml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Text Character Properties')


    _ElementMap = {
        __t.name() : __t,
        __rPr.name() : __rPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_RegularTextRun', CT_RegularTextRun)


# Complex type CT_TextBodyProperties with content type ELEMENT_ONLY
class CT_TextBodyProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextBodyProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstTxWarp uses Python identifier prstTxWarp
    __prstTxWarp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstTxWarp'), 'prstTxWarp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainprstTxWarp', False)

    
    prstTxWarp = property(__prstTxWarp.value, __prstTxWarp.set, None, u'Preset Text Shape')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sp3d uses Python identifier sp3d
    __sp3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), 'sp3d', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainsp3d', False)

    
    sp3d = property(__sp3d.value, __sp3d.set, None, u'Apply 3D shape properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}flatTx uses Python identifier flatTx
    __flatTx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'flatTx'), 'flatTx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainflatTx', False)

    
    flatTx = property(__flatTx.value, __flatTx.set, None, u'No text in 3D scene')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scene3d uses Python identifier scene3d
    __scene3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), 'scene3d', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainscene3d', False)

    
    scene3d = property(__scene3d.value, __scene3d.set, None, u'3D Scene Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}normAutofit uses Python identifier normAutofit
    __normAutofit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'normAutofit'), 'normAutofit', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainnormAutofit', False)

    
    normAutofit = property(__normAutofit.value, __normAutofit.set, None, u'Normal AutoFit')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spAutoFit uses Python identifier spAutoFit
    __spAutoFit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spAutoFit'), 'spAutoFit', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainspAutoFit', False)

    
    spAutoFit = property(__spAutoFit.value, __spAutoFit.set, None, u'Shape AutoFit')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noAutofit uses Python identifier noAutofit
    __noAutofit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noAutofit'), 'noAutofit', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoAutofit', False)

    
    noAutofit = property(__noAutofit.value, __noAutofit.set, None, u'No AutoFit')

    
    # Attribute horzOverflow uses Python identifier horzOverflow
    __horzOverflow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'horzOverflow'), 'horzOverflow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_horzOverflow', ST_TextHorzOverflowType)
    
    horzOverflow = property(__horzOverflow.value, __horzOverflow.set, None, u'Text Horizontal Overflow')

    
    # Attribute forceAA uses Python identifier forceAA
    __forceAA = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'forceAA'), 'forceAA', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_forceAA', pyxb.binding.datatypes.boolean)
    
    forceAA = property(__forceAA.value, __forceAA.set, None, u'Force Anti-Alias')

    
    # Attribute anchor uses Python identifier anchor
    __anchor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'anchor'), 'anchor', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_anchor', ST_TextAnchoringType)
    
    anchor = property(__anchor.value, __anchor.set, None, u'Anchor')

    
    # Attribute bIns uses Python identifier bIns
    __bIns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bIns'), 'bIns', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_bIns', ST_Coordinate32)
    
    bIns = property(__bIns.value, __bIns.set, None, u'Bottom Inset')

    
    # Attribute vert uses Python identifier vert
    __vert = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vert'), 'vert', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_vert', ST_TextVerticalType)
    
    vert = property(__vert.value, __vert.set, None, u'Vertical Text')

    
    # Attribute numCol uses Python identifier numCol
    __numCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numCol'), 'numCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_numCol', ST_TextColumnCount)
    
    numCol = property(__numCol.value, __numCol.set, None, u'Number of Columns')

    
    # Attribute wrap uses Python identifier wrap
    __wrap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'wrap'), 'wrap', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_wrap', ST_TextWrappingType)
    
    wrap = property(__wrap.value, __wrap.set, None, u'Text Wrapping Type')

    
    # Attribute rot uses Python identifier rot
    __rot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rot'), 'rot', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_rot', ST_Angle)
    
    rot = property(__rot.value, __rot.set, None, u'Rotation')

    
    # Attribute spcCol uses Python identifier spcCol
    __spcCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spcCol'), 'spcCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_spcCol', ST_PositiveCoordinate32)
    
    spcCol = property(__spcCol.value, __spcCol.set, None, u'Space Between Columns')

    
    # Attribute lIns uses Python identifier lIns
    __lIns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lIns'), 'lIns', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_lIns', ST_Coordinate32)
    
    lIns = property(__lIns.value, __lIns.set, None, u'Left Inset')

    
    # Attribute spcFirstLastPara uses Python identifier spcFirstLastPara
    __spcFirstLastPara = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spcFirstLastPara'), 'spcFirstLastPara', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_spcFirstLastPara', pyxb.binding.datatypes.boolean)
    
    spcFirstLastPara = property(__spcFirstLastPara.value, __spcFirstLastPara.set, None, u'Paragraph Spacing')

    
    # Attribute compatLnSpc uses Python identifier compatLnSpc
    __compatLnSpc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'compatLnSpc'), 'compatLnSpc', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_compatLnSpc', pyxb.binding.datatypes.boolean)
    
    compatLnSpc = property(__compatLnSpc.value, __compatLnSpc.set, None, u'Compatible Line Spacing')

    
    # Attribute rtlCol uses Python identifier rtlCol
    __rtlCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rtlCol'), 'rtlCol', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_rtlCol', pyxb.binding.datatypes.boolean)
    
    rtlCol = property(__rtlCol.value, __rtlCol.set, None, u'Columns Right-To-Left')

    
    # Attribute upright uses Python identifier upright
    __upright = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'upright'), 'upright', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_upright', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    upright = property(__upright.value, __upright.set, None, u'Text Upright')

    
    # Attribute tIns uses Python identifier tIns
    __tIns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tIns'), 'tIns', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_tIns', ST_Coordinate32)
    
    tIns = property(__tIns.value, __tIns.set, None, u'Top Inset')

    
    # Attribute vertOverflow uses Python identifier vertOverflow
    __vertOverflow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vertOverflow'), 'vertOverflow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_vertOverflow', ST_TextVertOverflowType)
    
    vertOverflow = property(__vertOverflow.value, __vertOverflow.set, None, u'Text Vertical Overflow')

    
    # Attribute anchorCtr uses Python identifier anchorCtr
    __anchorCtr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'anchorCtr'), 'anchorCtr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_anchorCtr', pyxb.binding.datatypes.boolean)
    
    anchorCtr = property(__anchorCtr.value, __anchorCtr.set, None, u'Anchor Center')

    
    # Attribute fromWordArt uses Python identifier fromWordArt
    __fromWordArt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fromWordArt'), 'fromWordArt', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_fromWordArt', pyxb.binding.datatypes.boolean)
    
    fromWordArt = property(__fromWordArt.value, __fromWordArt.set, None, u'From WordArt')

    
    # Attribute rIns uses Python identifier rIns
    __rIns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rIns'), 'rIns', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TextBodyProperties_rIns', ST_Coordinate32)
    
    rIns = property(__rIns.value, __rIns.set, None, u'Right Inset')


    _ElementMap = {
        __prstTxWarp.name() : __prstTxWarp,
        __sp3d.name() : __sp3d,
        __flatTx.name() : __flatTx,
        __scene3d.name() : __scene3d,
        __extLst.name() : __extLst,
        __normAutofit.name() : __normAutofit,
        __spAutoFit.name() : __spAutoFit,
        __noAutofit.name() : __noAutofit
    }
    _AttributeMap = {
        __horzOverflow.name() : __horzOverflow,
        __forceAA.name() : __forceAA,
        __anchor.name() : __anchor,
        __bIns.name() : __bIns,
        __vert.name() : __vert,
        __numCol.name() : __numCol,
        __wrap.name() : __wrap,
        __rot.name() : __rot,
        __spcCol.name() : __spcCol,
        __lIns.name() : __lIns,
        __spcFirstLastPara.name() : __spcFirstLastPara,
        __compatLnSpc.name() : __compatLnSpc,
        __rtlCol.name() : __rtlCol,
        __upright.name() : __upright,
        __tIns.name() : __tIns,
        __vertOverflow.name() : __vertOverflow,
        __anchorCtr.name() : __anchorCtr,
        __fromWordArt.name() : __fromWordArt,
        __rIns.name() : __rIns
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextBodyProperties', CT_TextBodyProperties)


# Complex type CT_ResizeHandles with content type EMPTY
class CT_ResizeHandles (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ResizeHandles')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ResizeHandles_val', ST_ResizeHandlesStr, unicode_default=u'rel')
    
    val = property(__val.value, __val.set, None, u'Shape Resize Style Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ResizeHandles', CT_ResizeHandles)


# Complex type CT_CTCategory with content type EMPTY
class CT_CTCategory (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_CTCategory')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute pri uses Python identifier pri
    __pri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pri'), 'pri', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTCategory_pri', pyxb.binding.datatypes.unsignedInt, required=True)
    
    pri = property(__pri.value, __pri.set, None, u'Priority')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_CTCategory_type', pyxb.binding.datatypes.anyURI, required=True)
    
    type = property(__type.value, __type.set, None, u'Category Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __pri.name() : __pri,
        __type.name() : __type
    }
_Namespace.addCategoryObject('typeBinding', u'CT_CTCategory', CT_CTCategory)


# Complex type CT_TextUnderlineLineFollowText with content type EMPTY
class CT_TextUnderlineLineFollowText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TextUnderlineLineFollowText')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TextUnderlineLineFollowText', CT_TextUnderlineLineFollowText)


# Complex type CT_TableCellBorderStyle with content type ELEMENT_ONLY
class CT_TableCellBorderStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableCellBorderStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}insideV uses Python identifier insideV
    __insideV = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'insideV'), 'insideV', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006maininsideV', False)

    
    insideV = property(__insideV.value, __insideV.set, None, u'Inside Vertical Border')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tl2br uses Python identifier tl2br
    __tl2br = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tl2br'), 'tl2br', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006maintl2br', False)

    
    tl2br = property(__tl2br.value, __tl2br.set, None, u'Top Left to Bottom Right Border')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}right uses Python identifier right
    __right = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'right'), 'right', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006mainright', False)

    
    right = property(__right.value, __right.set, None, u'Right Border')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}tr2bl uses Python identifier tr2bl
    __tr2bl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'tr2bl'), 'tr2bl', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006maintr2bl', False)

    
    tr2bl = property(__tr2bl.value, __tr2bl.set, None, u'Top Right to Bottom Left Border')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}top uses Python identifier top
    __top = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'top'), 'top', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006maintop', False)

    
    top = property(__top.value, __top.set, None, u'Top Border')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}left uses Python identifier left
    __left = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'left'), 'left', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006mainleft', False)

    
    left = property(__left.value, __left.set, None, u'Left Border')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bottom uses Python identifier bottom
    __bottom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bottom'), 'bottom', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006mainbottom', False)

    
    bottom = property(__bottom.value, __bottom.set, None, u'Bottom Border')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}insideH uses Python identifier insideH
    __insideH = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'insideH'), 'insideH', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellBorderStyle_httpschemas_openxmlformats_orgdrawingml2006maininsideH', False)

    
    insideH = property(__insideH.value, __insideH.set, None, u'Inside Horizontal Border')


    _ElementMap = {
        __insideV.name() : __insideV,
        __tl2br.name() : __tl2br,
        __right.name() : __right,
        __tr2bl.name() : __tr2bl,
        __top.name() : __top,
        __left.name() : __left,
        __extLst.name() : __extLst,
        __bottom.name() : __bottom,
        __insideH.name() : __insideH
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableCellBorderStyle', CT_TableCellBorderStyle)


# Complex type CT_ObjectStyleDefaults with content type ELEMENT_ONLY
class CT_ObjectStyleDefaults (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_ObjectStyleDefaults')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ObjectStyleDefaults_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spDef uses Python identifier spDef
    __spDef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spDef'), 'spDef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ObjectStyleDefaults_httpschemas_openxmlformats_orgdrawingml2006mainspDef', False)

    
    spDef = property(__spDef.value, __spDef.set, None, u'Shape Default')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnDef uses Python identifier lnDef
    __lnDef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnDef'), 'lnDef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ObjectStyleDefaults_httpschemas_openxmlformats_orgdrawingml2006mainlnDef', False)

    
    lnDef = property(__lnDef.value, __lnDef.set, None, u'Line Default')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}txDef uses Python identifier txDef
    __txDef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'txDef'), 'txDef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_ObjectStyleDefaults_httpschemas_openxmlformats_orgdrawingml2006maintxDef', False)

    
    txDef = property(__txDef.value, __txDef.set, None, u'Text Default')


    _ElementMap = {
        __extLst.name() : __extLst,
        __spDef.name() : __spDef,
        __lnDef.name() : __lnDef,
        __txDef.name() : __txDef
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_ObjectStyleDefaults', CT_ObjectStyleDefaults)


# Complex type CT_AnimationElementChoice with content type ELEMENT_ONLY
class CT_AnimationElementChoice (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AnimationElementChoice')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}dgm uses Python identifier dgm
    __dgm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'dgm'), 'dgm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationElementChoice_httpschemas_openxmlformats_orgdrawingml2006maindgm', False)

    
    dgm = property(__dgm.value, __dgm.set, None, u'Diagram to Animate')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}chart uses Python identifier chart
    __chart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'chart'), 'chart', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationElementChoice_httpschemas_openxmlformats_orgdrawingml2006mainchart', False)

    
    chart = property(__chart.value, __chart.set, None, u'Chart to Animate')


    _ElementMap = {
        __dgm.name() : __dgm,
        __chart.name() : __chart
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AnimationElementChoice', CT_AnimationElementChoice)


# Complex type CT_GraphicalObjectFrameLocking with content type ELEMENT_ONLY
class CT_GraphicalObjectFrameLocking (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GraphicalObjectFrameLocking')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectFrameLocking_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute noMove uses Python identifier noMove
    __noMove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noMove'), 'noMove', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectFrameLocking_noMove', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noMove = property(__noMove.value, __noMove.set, None, u'Disallow Shape Movement')

    
    # Attribute noResize uses Python identifier noResize
    __noResize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noResize'), 'noResize', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectFrameLocking_noResize', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noResize = property(__noResize.value, __noResize.set, None, u'Disallow Shape Resize')

    
    # Attribute noGrp uses Python identifier noGrp
    __noGrp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noGrp'), 'noGrp', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectFrameLocking_noGrp', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noGrp = property(__noGrp.value, __noGrp.set, None, u'Disallow Shape Grouping')

    
    # Attribute noDrilldown uses Python identifier noDrilldown
    __noDrilldown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noDrilldown'), 'noDrilldown', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectFrameLocking_noDrilldown', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noDrilldown = property(__noDrilldown.value, __noDrilldown.set, None, u'Disallow Selection of Child Shapes')

    
    # Attribute noChangeAspect uses Python identifier noChangeAspect
    __noChangeAspect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noChangeAspect'), 'noChangeAspect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectFrameLocking_noChangeAspect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noChangeAspect = property(__noChangeAspect.value, __noChangeAspect.set, None, u'Disallow Aspect Ratio Change')

    
    # Attribute noSelect uses Python identifier noSelect
    __noSelect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'noSelect'), 'noSelect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GraphicalObjectFrameLocking_noSelect', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    noSelect = property(__noSelect.value, __noSelect.set, None, u'Disallow Shape Selection')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __noMove.name() : __noMove,
        __noResize.name() : __noResize,
        __noGrp.name() : __noGrp,
        __noDrilldown.name() : __noDrilldown,
        __noChangeAspect.name() : __noChangeAspect,
        __noSelect.name() : __noSelect
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GraphicalObjectFrameLocking', CT_GraphicalObjectFrameLocking)


# Complex type CT_Scale2D with content type ELEMENT_ONLY
class CT_Scale2D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Scale2D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sy uses Python identifier sy
    __sy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sy'), 'sy', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Scale2D_httpschemas_openxmlformats_orgdrawingml2006mainsy', False)

    
    sy = property(__sy.value, __sy.set, None, u'Vertical Ratio')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sx uses Python identifier sx
    __sx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sx'), 'sx', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Scale2D_httpschemas_openxmlformats_orgdrawingml2006mainsx', False)

    
    sx = property(__sx.value, __sx.set, None, u'Horizontal Ratio')


    _ElementMap = {
        __sy.name() : __sy,
        __sx.name() : __sx
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Scale2D', CT_Scale2D)


# Complex type CT_GradientStop with content type ELEMENT_ONLY
class CT_GradientStop (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GradientStop')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}srgbClr uses Python identifier srgbClr
    __srgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), 'srgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStop_httpschemas_openxmlformats_orgdrawingml2006mainsrgbClr', False)

    
    srgbClr = property(__srgbClr.value, __srgbClr.set, None, u'RGB Color Model - Hex Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}prstClr uses Python identifier prstClr
    __prstClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), 'prstClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStop_httpschemas_openxmlformats_orgdrawingml2006mainprstClr', False)

    
    prstClr = property(__prstClr.value, __prstClr.set, None, u'Preset Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}scrgbClr uses Python identifier scrgbClr
    __scrgbClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), 'scrgbClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStop_httpschemas_openxmlformats_orgdrawingml2006mainscrgbClr', False)

    
    scrgbClr = property(__scrgbClr.value, __scrgbClr.set, None, u'RGB Color Model - Percentage Variant')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}hslClr uses Python identifier hslClr
    __hslClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), 'hslClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStop_httpschemas_openxmlformats_orgdrawingml2006mainhslClr', False)

    
    hslClr = property(__hslClr.value, __hslClr.set, None, u'Hue, Saturation, Luminance Color Model')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}sysClr uses Python identifier sysClr
    __sysClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), 'sysClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStop_httpschemas_openxmlformats_orgdrawingml2006mainsysClr', False)

    
    sysClr = property(__sysClr.value, __sysClr.set, None, u'System Color')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}schemeClr uses Python identifier schemeClr
    __schemeClr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), 'schemeClr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStop_httpschemas_openxmlformats_orgdrawingml2006mainschemeClr', False)

    
    schemeClr = property(__schemeClr.value, __schemeClr.set, None, u'Scheme Color')

    
    # Attribute pos uses Python identifier pos
    __pos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pos'), 'pos', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GradientStop_pos', ST_PositiveFixedPercentage, required=True)
    
    pos = property(__pos.value, __pos.set, None, u'Position')


    _ElementMap = {
        __srgbClr.name() : __srgbClr,
        __prstClr.name() : __prstClr,
        __scrgbClr.name() : __scrgbClr,
        __hslClr.name() : __hslClr,
        __sysClr.name() : __sysClr,
        __schemeClr.name() : __schemeClr
    }
    _AttributeMap = {
        __pos.name() : __pos
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GradientStop', CT_GradientStop)


# Complex type CT_OrgChart with content type EMPTY
class CT_OrgChart (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_OrgChart')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_OrgChart_val', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    val = property(__val.value, __val.set, None, u'Show Organization Chart User Interface Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_OrgChart', CT_OrgChart)


# Complex type CT_Boolean with content type EMPTY
class CT_Boolean (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Boolean')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Boolean_val', _s.ST_OnOff, unicode_default=u'0')
    
    val = property(__val.value, __val.set, None, u'On/Off Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Boolean', CT_Boolean)


# Complex type CT_TableCellProperties with content type ELEMENT_ONLY
class CT_TableCellProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableCellProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnB uses Python identifier lnB
    __lnB = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnB'), 'lnB', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainlnB', False)

    
    lnB = property(__lnB.value, __lnB.set, None, u'Bottom Border Line Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}solidFill uses Python identifier solidFill
    __solidFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), 'solidFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainsolidFill', False)

    
    solidFill = property(__solidFill.value, __solidFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnTlToBr uses Python identifier lnTlToBr
    __lnTlToBr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnTlToBr'), 'lnTlToBr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainlnTlToBr', False)

    
    lnTlToBr = property(__lnTlToBr.value, __lnTlToBr.set, None, u'Top-Left to Bottom-Right Border Line Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}gradFill uses Python identifier gradFill
    __gradFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), 'gradFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006maingradFill', False)

    
    gradFill = property(__gradFill.value, __gradFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnBlToTr uses Python identifier lnBlToTr
    __lnBlToTr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnBlToTr'), 'lnBlToTr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainlnBlToTr', False)

    
    lnBlToTr = property(__lnBlToTr.value, __lnBlToTr.set, None, u'Bottom-Left to Top-Right Border Line Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}noFill uses Python identifier noFill
    __noFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), 'noFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainnoFill', False)

    
    noFill = property(__noFill.value, __noFill.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}headers uses Python identifier headers
    __headers = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'headers'), 'headers', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainheaders', False)

    
    headers = property(__headers.value, __headers.set, None, u'Header Cells Associated With Table Cell')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cell3D uses Python identifier cell3D
    __cell3D = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cell3D'), 'cell3D', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006maincell3D', False)

    
    cell3D = property(__cell3D.value, __cell3D.set, None, u'Cell 3-D')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnL uses Python identifier lnL
    __lnL = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnL'), 'lnL', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainlnL', False)

    
    lnL = property(__lnL.value, __lnL.set, None, u'Left Border Line Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnR uses Python identifier lnR
    __lnR = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnR'), 'lnR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainlnR', False)

    
    lnR = property(__lnR.value, __lnR.set, None, u'Right Border Line Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pattFill uses Python identifier pattFill
    __pattFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), 'pattFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainpattFill', False)

    
    pattFill = property(__pattFill.value, __pattFill.set, None, u'Pattern Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}lnT uses Python identifier lnT
    __lnT = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'lnT'), 'lnT', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006mainlnT', False)

    
    lnT = property(__lnT.value, __lnT.set, None, u'Top Border Line Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}grpFill uses Python identifier grpFill
    __grpFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), 'grpFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_httpschemas_openxmlformats_orgdrawingml2006maingrpFill', False)

    
    grpFill = property(__grpFill.value, __grpFill.set, None, u'Group Fill')

    
    # Attribute marR uses Python identifier marR
    __marR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'marR'), 'marR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_marR', ST_Coordinate32, unicode_default=u'91440')
    
    marR = property(__marR.value, __marR.set, None, u'Right Margin')

    
    # Attribute marB uses Python identifier marB
    __marB = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'marB'), 'marB', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_marB', ST_Coordinate32, unicode_default=u'45720')
    
    marB = property(__marB.value, __marB.set, None, u'Bottom Margin')

    
    # Attribute horzOverflow uses Python identifier horzOverflow
    __horzOverflow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'horzOverflow'), 'horzOverflow', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_horzOverflow', ST_TextHorzOverflowType, unicode_default=u'clip')
    
    horzOverflow = property(__horzOverflow.value, __horzOverflow.set, None, u'Horizontal Overflow')

    
    # Attribute marT uses Python identifier marT
    __marT = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'marT'), 'marT', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_marT', ST_Coordinate32, unicode_default=u'45720')
    
    marT = property(__marT.value, __marT.set, None, u'Top Margin')

    
    # Attribute vert uses Python identifier vert
    __vert = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vert'), 'vert', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_vert', ST_TextVerticalType, unicode_default=u'horz')
    
    vert = property(__vert.value, __vert.set, None, u'Text Direction')

    
    # Attribute anchor uses Python identifier anchor
    __anchor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'anchor'), 'anchor', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_anchor', ST_TextAnchoringType, unicode_default=u't')
    
    anchor = property(__anchor.value, __anchor.set, None, u'Anchor')

    
    # Attribute marL uses Python identifier marL
    __marL = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'marL'), 'marL', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_marL', ST_Coordinate32, unicode_default=u'91440')
    
    marL = property(__marL.value, __marL.set, None, u'Left Margin')

    
    # Attribute anchorCtr uses Python identifier anchorCtr
    __anchorCtr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'anchorCtr'), 'anchorCtr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableCellProperties_anchorCtr', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    anchorCtr = property(__anchorCtr.value, __anchorCtr.set, None, u'Anchor Center')


    _ElementMap = {
        __lnB.name() : __lnB,
        __extLst.name() : __extLst,
        __solidFill.name() : __solidFill,
        __lnTlToBr.name() : __lnTlToBr,
        __blipFill.name() : __blipFill,
        __gradFill.name() : __gradFill,
        __lnBlToTr.name() : __lnBlToTr,
        __noFill.name() : __noFill,
        __headers.name() : __headers,
        __cell3D.name() : __cell3D,
        __lnL.name() : __lnL,
        __lnR.name() : __lnR,
        __pattFill.name() : __pattFill,
        __lnT.name() : __lnT,
        __grpFill.name() : __grpFill
    }
    _AttributeMap = {
        __marR.name() : __marR,
        __marB.name() : __marB,
        __horzOverflow.name() : __horzOverflow,
        __marT.name() : __marT,
        __vert.name() : __vert,
        __anchor.name() : __anchor,
        __marL.name() : __marL,
        __anchorCtr.name() : __anchorCtr
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableCellProperties', CT_TableCellProperties)


# Complex type CT_PolarAdjustHandle with content type ELEMENT_ONLY
class CT_PolarAdjustHandle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_PolarAdjustHandle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'pos'), 'pos', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PolarAdjustHandle_httpschemas_openxmlformats_orgdrawingml2006mainpos', False)

    
    pos = property(__pos.value, __pos.set, None, u'Shape Position Coordinate')

    
    # Attribute maxAng uses Python identifier maxAng
    __maxAng = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxAng'), 'maxAng', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PolarAdjustHandle_maxAng', ST_AdjAngle)
    
    maxAng = property(__maxAng.value, __maxAng.set, None, u'Maximum Angle Adjustment')

    
    # Attribute gdRefR uses Python identifier gdRefR
    __gdRefR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gdRefR'), 'gdRefR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PolarAdjustHandle_gdRefR', ST_GeomGuideName)
    
    gdRefR = property(__gdRefR.value, __gdRefR.set, None, u'Radial Adjustment Guide')

    
    # Attribute minR uses Python identifier minR
    __minR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minR'), 'minR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PolarAdjustHandle_minR', ST_AdjCoordinate)
    
    minR = property(__minR.value, __minR.set, None, u'Minimum Radial Adjustment')

    
    # Attribute maxR uses Python identifier maxR
    __maxR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxR'), 'maxR', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PolarAdjustHandle_maxR', ST_AdjCoordinate)
    
    maxR = property(__maxR.value, __maxR.set, None, u'Maximum Radial Adjustment')

    
    # Attribute gdRefAng uses Python identifier gdRefAng
    __gdRefAng = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gdRefAng'), 'gdRefAng', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PolarAdjustHandle_gdRefAng', ST_GeomGuideName)
    
    gdRefAng = property(__gdRefAng.value, __gdRefAng.set, None, u'Angle Adjustment Guide')

    
    # Attribute minAng uses Python identifier minAng
    __minAng = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minAng'), 'minAng', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_PolarAdjustHandle_minAng', ST_AdjAngle)
    
    minAng = property(__minAng.value, __minAng.set, None, u'Minimum Angle Adjustment')


    _ElementMap = {
        __pos.name() : __pos
    }
    _AttributeMap = {
        __maxAng.name() : __maxAng,
        __gdRefR.name() : __gdRefR,
        __minR.name() : __minR,
        __maxR.name() : __maxR,
        __gdRefAng.name() : __gdRefAng,
        __minAng.name() : __minAng
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_PolarAdjustHandle', CT_PolarAdjustHandle)


# Complex type CT_TableBackgroundStyle with content type ELEMENT_ONLY
class CT_TableBackgroundStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_TableBackgroundStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effect uses Python identifier effect
    __effect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effect'), 'effect', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableBackgroundStyle_httpschemas_openxmlformats_orgdrawingml2006maineffect', False)

    
    effect = property(__effect.value, __effect.set, None, u'Effect')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fill uses Python identifier fill
    __fill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fill'), 'fill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableBackgroundStyle_httpschemas_openxmlformats_orgdrawingml2006mainfill', False)

    
    fill = property(__fill.value, __fill.set, None, u'Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}effectRef uses Python identifier effectRef
    __effectRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'effectRef'), 'effectRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableBackgroundStyle_httpschemas_openxmlformats_orgdrawingml2006maineffectRef', False)

    
    effectRef = property(__effectRef.value, __effectRef.set, None, u'Effect Reference')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}fillRef uses Python identifier fillRef
    __fillRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef'), 'fillRef', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_TableBackgroundStyle_httpschemas_openxmlformats_orgdrawingml2006mainfillRef', False)

    
    fillRef = property(__fillRef.value, __fillRef.set, None, u'Fill Reference')


    _ElementMap = {
        __effect.name() : __effect,
        __fill.name() : __fill,
        __effectRef.name() : __effectRef,
        __fillRef.name() : __fillRef
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_TableBackgroundStyle', CT_TableBackgroundStyle)


# Complex type CT_AdjustHandleList with content type ELEMENT_ONLY
class CT_AdjustHandleList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AdjustHandleList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ahPolar uses Python identifier ahPolar
    __ahPolar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ahPolar'), 'ahPolar', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AdjustHandleList_httpschemas_openxmlformats_orgdrawingml2006mainahPolar', True)

    
    ahPolar = property(__ahPolar.value, __ahPolar.set, None, u'Polar Adjust Handle')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}ahXY uses Python identifier ahXY
    __ahXY = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'ahXY'), 'ahXY', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AdjustHandleList_httpschemas_openxmlformats_orgdrawingml2006mainahXY', True)

    
    ahXY = property(__ahXY.value, __ahXY.set, None, u'XY Adjust Handle')


    _ElementMap = {
        __ahPolar.name() : __ahPolar,
        __ahXY.name() : __ahXY
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AdjustHandleList', CT_AdjustHandleList)


# Complex type CT_GvmlGraphicalObjectFrame with content type ELEMENT_ONLY
class CT_GvmlGraphicalObjectFrame (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlGraphicalObjectFrame')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGraphicalObjectFrame_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}nvGraphicFramePr uses Python identifier nvGraphicFramePr
    __nvGraphicFramePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'nvGraphicFramePr'), 'nvGraphicFramePr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGraphicalObjectFrame_httpschemas_openxmlformats_orgdrawingml2006mainnvGraphicFramePr', False)

    
    nvGraphicFramePr = property(__nvGraphicFramePr.value, __nvGraphicFramePr.set, None, u'Non-Visual Properties for a Graphic Frame')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}graphic uses Python identifier graphic
    __graphic = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'graphic'), 'graphic', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGraphicalObjectFrame_httpschemas_openxmlformats_orgdrawingml2006maingraphic', False)

    
    graphic = property(__graphic.value, __graphic.set, None, u'Graphic Object')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}xfrm uses Python identifier xfrm
    __xfrm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), 'xfrm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGraphicalObjectFrame_httpschemas_openxmlformats_orgdrawingml2006mainxfrm', False)

    
    xfrm = property(__xfrm.value, __xfrm.set, None, None)


    _ElementMap = {
        __extLst.name() : __extLst,
        __nvGraphicFramePr.name() : __nvGraphicFramePr,
        __graphic.name() : __graphic,
        __xfrm.name() : __xfrm
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlGraphicalObjectFrame', CT_GvmlGraphicalObjectFrame)


# Complex type CT_Categories with content type ELEMENT_ONLY
class CT_Categories (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_Categories')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}cat uses Python identifier cat
    __cat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'cat'), 'cat', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_Categories_httpschemas_openxmlformats_orgdrawingml2006diagramcat', True)

    
    cat = property(__cat.value, __cat.set, None, u'Category')


    _ElementMap = {
        __cat.name() : __cat
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_Categories', CT_Categories)


# Complex type CT_AdjLst with content type ELEMENT_ONLY
class CT_AdjLst (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_AdjLst')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}adj uses Python identifier adj
    __adj = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'adj'), 'adj', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_AdjLst_httpschemas_openxmlformats_orgdrawingml2006diagramadj', True)

    
    adj = property(__adj.value, __adj.set, None, u'Shape Adjust')


    _ElementMap = {
        __adj.name() : __adj
    }
    _AttributeMap = {
        
    }
_Namespace.addCategoryObject('typeBinding', u'CT_AdjLst', CT_AdjLst)


# Complex type CT_GvmlPicture with content type ELEMENT_ONLY
class CT_GvmlPicture (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlPicture')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlPicture_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}nvPicPr uses Python identifier nvPicPr
    __nvPicPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'nvPicPr'), 'nvPicPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlPicture_httpschemas_openxmlformats_orgdrawingml2006mainnvPicPr', False)

    
    nvPicPr = property(__nvPicPr.value, __nvPicPr.set, None, u'Non-Visual Properties for a Picture')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}spPr uses Python identifier spPr
    __spPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), 'spPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlPicture_httpschemas_openxmlformats_orgdrawingml2006mainspPr', False)

    
    spPr = property(__spPr.value, __spPr.set, None, u'Shape Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}blipFill uses Python identifier blipFill
    __blipFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), 'blipFill', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlPicture_httpschemas_openxmlformats_orgdrawingml2006mainblipFill', False)

    
    blipFill = property(__blipFill.value, __blipFill.set, None, u'Picture Fill')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), 'style', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlPicture_httpschemas_openxmlformats_orgdrawingml2006mainstyle', False)

    
    style = property(__style.value, __style.set, None, None)


    _ElementMap = {
        __extLst.name() : __extLst,
        __nvPicPr.name() : __nvPicPr,
        __spPr.name() : __spPr,
        __blipFill.name() : __blipFill,
        __style.name() : __style
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlPicture', CT_GvmlPicture)


# Complex type CT_GvmlGraphicFrameNonVisual with content type ELEMENT_ONLY
class CT_GvmlGraphicFrameNonVisual (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GvmlGraphicFrameNonVisual')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvGraphicFramePr uses Python identifier cNvGraphicFramePr
    __cNvGraphicFramePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvGraphicFramePr'), 'cNvGraphicFramePr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGraphicFrameNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvGraphicFramePr', False)

    
    cNvGraphicFramePr = property(__cNvGraphicFramePr.value, __cNvGraphicFramePr.set, None, u'Non-Visual Graphic Frame Drawing Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}cNvPr uses Python identifier cNvPr
    __cNvPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), 'cNvPr', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GvmlGraphicFrameNonVisual_httpschemas_openxmlformats_orgdrawingml2006maincNvPr', False)

    
    cNvPr = property(__cNvPr.value, __cNvPr.set, None, None)


    _ElementMap = {
        __cNvGraphicFramePr.name() : __cNvGraphicFramePr,
        __cNvPr.name() : __cNvPr
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GvmlGraphicFrameNonVisual', CT_GvmlGraphicFrameNonVisual)


# Complex type CT_GeomRect with content type EMPTY
class CT_GeomRect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_GeomRect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GeomRect_r', ST_AdjCoordinate, required=True)
    
    r = property(__r.value, __r.set, None, u'Right')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GeomRect_b', ST_AdjCoordinate, required=True)
    
    b = property(__b.value, __b.set, None, u'Bottom Position')

    
    # Attribute l uses Python identifier l
    __l = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'l'), 'l', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GeomRect_l', ST_AdjCoordinate, required=True)
    
    l = property(__l.value, __l.set, None, u'Left')

    
    # Attribute t uses Python identifier t
    __t = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u't'), 't', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_GeomRect_t', ST_AdjCoordinate, required=True)
    
    t = property(__t.value, __t.set, None, u'Top')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __r.name() : __r,
        __b.name() : __b,
        __l.name() : __l,
        __t.name() : __t
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_GeomRect', CT_GeomRect)


# Complex type CT_AnimationGraphicalObjectBuildProperties with content type ELEMENT_ONLY
class CT_AnimationGraphicalObjectBuildProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_AnimationGraphicalObjectBuildProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bldDgm uses Python identifier bldDgm
    __bldDgm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bldDgm'), 'bldDgm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationGraphicalObjectBuildProperties_httpschemas_openxmlformats_orgdrawingml2006mainbldDgm', False)

    
    bldDgm = property(__bldDgm.value, __bldDgm.set, None, u'Build Diagram')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}bldChart uses Python identifier bldChart
    __bldChart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'bldChart'), 'bldChart', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_AnimationGraphicalObjectBuildProperties_httpschemas_openxmlformats_orgdrawingml2006mainbldChart', False)

    
    bldChart = property(__bldChart.value, __bldChart.set, None, u'Build Chart')


    _ElementMap = {
        __bldDgm.name() : __bldDgm,
        __bldChart.name() : __bldChart
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_AnimationGraphicalObjectBuildProperties', CT_AnimationGraphicalObjectBuildProperties)


# Complex type CT_StyleLabel with content type ELEMENT_ONLY
class CT_StyleLabel (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_StyleLabel')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}scene3d uses Python identifier scene3d
    __scene3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'scene3d'), 'scene3d', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramscene3d', False)

    
    scene3d = property(__scene3d.value, __scene3d.set, None, u'3-D Scene')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}txPr uses Python identifier txPr
    __txPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'txPr'), 'txPr', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramtxPr', False)

    
    txPr = property(__txPr.value, __txPr.set, None, u'Text Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}sp3d uses Python identifier sp3d
    __sp3d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'sp3d'), 'sp3d', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramsp3d', False)

    
    sp3d = property(__sp3d.value, __sp3d.set, None, u'3-D Shape Properties')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/diagram}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace, u'style'), 'style', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleLabel_httpschemas_openxmlformats_orgdrawingml2006diagramstyle', False)

    
    style = property(__style.value, __style.set, None, u'Shape Style')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_StyleLabel_name', pyxb.binding.datatypes.string, required=True)
    
    name = property(__name.value, __name.set, None, u'Style Name')


    _ElementMap = {
        __extLst.name() : __extLst,
        __scene3d.name() : __scene3d,
        __txPr.name() : __txPr,
        __sp3d.name() : __sp3d,
        __style.name() : __style
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace.addCategoryObject('typeBinding', u'CT_StyleLabel', CT_StyleLabel)


# Complex type CT_Backdrop with content type ELEMENT_ONLY
class CT_Backdrop (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_a, u'CT_Backdrop')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Backdrop_httpschemas_openxmlformats_orgdrawingml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}anchor uses Python identifier anchor
    __anchor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'anchor'), 'anchor', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Backdrop_httpschemas_openxmlformats_orgdrawingml2006mainanchor', False)

    
    anchor = property(__anchor.value, __anchor.set, None, u'Anchor Point')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}up uses Python identifier up
    __up = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'up'), 'up', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Backdrop_httpschemas_openxmlformats_orgdrawingml2006mainup', False)

    
    up = property(__up.value, __up.set, None, u'Up Vector')

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/main}norm uses Python identifier norm
    __norm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_a, u'norm'), 'norm', '__httpschemas_openxmlformats_orgdrawingml2006main_CT_Backdrop_httpschemas_openxmlformats_orgdrawingml2006mainnorm', False)

    
    norm = property(__norm.value, __norm.set, None, u'Normal')


    _ElementMap = {
        __extLst.name() : __extLst,
        __anchor.name() : __anchor,
        __up.name() : __up,
        __norm.name() : __norm
    }
    _AttributeMap = {
        
    }
_Namespace_a.addCategoryObject('typeBinding', u'CT_Backdrop', CT_Backdrop)


# Complex type CT_ChildMax with content type EMPTY
class CT_ChildMax (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'CT_ChildMax')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgdrawingml2006diagram_CT_ChildMax_val', ST_NodeCount, unicode_default=u'-1')
    
    val = property(__val.value, __val.set, None, u'Maximum Children Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace.addCategoryObject('typeBinding', u'CT_ChildMax', CT_ChildMax)


styleDefHdrLst = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'styleDefHdrLst'), CT_StyleDefinitionHeaderLst, documentation=u'List of Style Definition Headers')
_Namespace.addCategoryObject('elementBinding', styleDefHdrLst.name().localName(), styleDefHdrLst)

tblStyleLst = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tblStyleLst'), CT_TableStyleList, documentation=u'Table Style List')
_Namespace_a.addCategoryObject('elementBinding', tblStyleLst.name().localName(), tblStyleLst)

colorsDefHdr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'colorsDefHdr'), CT_ColorTransformHeader, documentation=u'Color Transform Header')
_Namespace.addCategoryObject('elementBinding', colorsDefHdr.name().localName(), colorsDefHdr)

blip = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blip'), CT_Blip)
_Namespace_a.addCategoryObject('elementBinding', blip.name().localName(), blip)

styleDef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'styleDef'), CT_StyleDefinition, documentation=u'Style Definition')
_Namespace.addCategoryObject('elementBinding', styleDef.name().localName(), styleDef)

layoutDef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutDef'), CT_DiagramDefinition, documentation=u'Layout Definition')
_Namespace.addCategoryObject('elementBinding', layoutDef.name().localName(), layoutDef)

tbl = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tbl'), CT_Table, documentation=u'Table')
_Namespace_a.addCategoryObject('elementBinding', tbl.name().localName(), tbl)

themeManager = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'themeManager'), CT_EmptyElement, documentation=u'Theme Manager')
_Namespace_a.addCategoryObject('elementBinding', themeManager.name().localName(), themeManager)

colorsDefHdrLst = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'colorsDefHdrLst'), CT_ColorTransformHeaderLst, documentation=u'Color Transform Header List')
_Namespace.addCategoryObject('elementBinding', colorsDefHdrLst.name().localName(), colorsDefHdrLst)

layoutDefHdrLst = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutDefHdrLst'), CT_DiagramDefinitionHeaderLst, documentation=u'Diagram Layout Header List')
_Namespace.addCategoryObject('elementBinding', layoutDefHdrLst.name().localName(), layoutDefHdrLst)

relIds = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'relIds'), CT_RelIds, documentation=u'Explicit Relationships to Diagram Parts')
_Namespace.addCategoryObject('elementBinding', relIds.name().localName(), relIds)

styleDefHdr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'styleDefHdr'), CT_StyleDefinitionHeader, documentation=u'Style Definition Header')
_Namespace.addCategoryObject('elementBinding', styleDefHdr.name().localName(), styleDefHdr)

layoutDefHdr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutDefHdr'), CT_DiagramDefinitionHeader, documentation=u'Layout Definition Header')
_Namespace.addCategoryObject('elementBinding', layoutDefHdr.name().localName(), layoutDefHdr)

graphic = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'graphic'), CT_GraphicalObject, documentation=u'Graphic Object')
_Namespace_a.addCategoryObject('elementBinding', graphic.name().localName(), graphic)

theme = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'theme'), CT_OfficeStyleSheet, documentation=u'Theme')
_Namespace_a.addCategoryObject('elementBinding', theme.name().localName(), theme)

videoFile = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'videoFile'), CT_VideoFile)
_Namespace_a.addCategoryObject('elementBinding', videoFile.name().localName(), videoFile)

dataModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'dataModel'), CT_DataModel, documentation=u'Data Model')
_Namespace.addCategoryObject('elementBinding', dataModel.name().localName(), dataModel)

colorsDef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'colorsDef'), CT_ColorTransform, documentation=u'Color Transform Definitions')
_Namespace.addCategoryObject('elementBinding', colorsDef.name().localName(), colorsDef)

themeOverride = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'themeOverride'), CT_BaseStylesOverride, documentation=u'Theme Override')
_Namespace_a.addCategoryObject('elementBinding', themeOverride.name().localName(), themeOverride)



CT_SampleData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'dataModel'), CT_DataModel, scope=CT_SampleData, documentation=u'Data Model'))
CT_SampleData._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SampleData._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'dataModel')), min_occurs=0L, max_occurs=1)
    )
CT_SampleData._ContentModel = pyxb.binding.content.ParticleModel(CT_SampleData._GroupModel, min_occurs=1, max_occurs=1)



CT_ThemeableLineStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), CT_LineProperties, scope=CT_ThemeableLineStyle))

CT_ThemeableLineStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnRef'), CT_StyleMatrixReference, scope=CT_ThemeableLineStyle, documentation=u'Line Reference'))
CT_ThemeableLineStyle._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ThemeableLineStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ln')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ThemeableLineStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnRef')), min_occurs=1L, max_occurs=1L)
    )
CT_ThemeableLineStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_ThemeableLineStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buClrTx'), CT_TextBulletColorFollowText, scope=CT_TextParagraphProperties, documentation=u'Follow Text'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buClr'), CT_Color, scope=CT_TextParagraphProperties, documentation=u'Color Specified'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buAutoNum'), CT_TextAutonumberBullet, scope=CT_TextParagraphProperties, documentation=u'Auto-Numbered Bullet'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buChar'), CT_TextCharBullet, scope=CT_TextParagraphProperties, documentation=u'Character Bullet'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'defRPr'), CT_TextCharacterProperties, scope=CT_TextParagraphProperties, documentation=u'Default Text Run Properties'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buFontTx'), CT_TextBulletTypefaceFollowText, scope=CT_TextParagraphProperties, documentation=u'Follow text'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buBlip'), CT_TextBlipBullet, scope=CT_TextParagraphProperties, documentation=u'Picture Bullet'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tabLst'), CT_TextTabStopList, scope=CT_TextParagraphProperties, documentation=u'Tab List'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzPts'), CT_TextBulletSizePoint, scope=CT_TextParagraphProperties, documentation=u'Bullet Size Points'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TextParagraphProperties))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spcAft'), CT_TextSpacing, scope=CT_TextParagraphProperties, documentation=u'Space After'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buFont'), CT_TextFont, scope=CT_TextParagraphProperties, documentation=u'Specified'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spcBef'), CT_TextSpacing, scope=CT_TextParagraphProperties, documentation=u'Space Before'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnSpc'), CT_TextSpacing, scope=CT_TextParagraphProperties, documentation=u'Line Spacing'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzTx'), CT_TextBulletSizeFollowText, scope=CT_TextParagraphProperties, documentation=u'Bullet Size Follows Text'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzPct'), CT_TextBulletSizePercent, scope=CT_TextParagraphProperties, documentation=u'Bullet Size Percentage'))

CT_TextParagraphProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'buNone'), CT_TextNoBullet, scope=CT_TextParagraphProperties, documentation=u'No Bullet'))
CT_TextParagraphProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buClrTx')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buClr')), min_occurs=1L, max_occurs=1L)
    )
CT_TextParagraphProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzTx')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzPct')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buSzPts')), min_occurs=1, max_occurs=1)
    )
CT_TextParagraphProperties._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buFontTx')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buFont')), min_occurs=1, max_occurs=1)
    )
CT_TextParagraphProperties._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buNone')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buAutoNum')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buChar')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'buBlip')), min_occurs=1, max_occurs=1)
    )
CT_TextParagraphProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnSpc')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spcBef')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spcAft')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._GroupModel_3, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._GroupModel_4, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tabLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'defRPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TextParagraphProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_TextParagraphProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_NonVisualDrawingProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_NonVisualDrawingProps))

CT_NonVisualDrawingProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkClick'), CT_Hyperlink, scope=CT_NonVisualDrawingProps, documentation=u'Drawing Element On Click Hyperlink'))

CT_NonVisualDrawingProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkHover'), CT_Hyperlink, scope=CT_NonVisualDrawingProps, documentation=u'Hyperlink for Hover'))
CT_NonVisualDrawingProps._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NonVisualDrawingProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkClick')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualDrawingProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkHover')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualDrawingProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NonVisualDrawingProps._ContentModel = pyxb.binding.content.ParticleModel(CT_NonVisualDrawingProps._GroupModel, min_occurs=1, max_occurs=1)



CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), CT_ComplementTransform, scope=CT_ScRgbColor, documentation=u'Complement'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Green Offset'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), CT_InverseTransform, scope=CT_ScRgbColor, documentation=u'Inverse'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), CT_PositiveFixedPercentage, scope=CT_ScRgbColor, documentation=u'Shade'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Blue Offset'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), CT_PositiveFixedPercentage, scope=CT_ScRgbColor, documentation=u'Alpha'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Blue Modification'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), CT_GammaTransform, scope=CT_ScRgbColor, documentation=u'Gamma'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_PositivePercentage, scope=CT_ScRgbColor, documentation=u'Alpha Modulation'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), CT_PositiveFixedAngle, scope=CT_ScRgbColor, documentation=u'Hue'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), CT_Angle, scope=CT_ScRgbColor, documentation=u'Hue Offset'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), CT_PositivePercentage, scope=CT_ScRgbColor, documentation=u'Hue Modulate'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Saturation'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Blue'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Saturation Modulation'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Luminance'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Saturation Offset'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Luminance Offset'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Luminance Modulation'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Red'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), CT_FixedPercentage, scope=CT_ScRgbColor, documentation=u'Alpha Offset'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Red Offset'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), CT_GrayscaleTransform, scope=CT_ScRgbColor, documentation=u'Gray'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Red Modulation'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_PositiveFixedPercentage, scope=CT_ScRgbColor, documentation=u'Tint'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Green'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), CT_InverseGammaTransform, scope=CT_ScRgbColor, documentation=u'Inverse Gamma'))

CT_ScRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), CT_Percentage, scope=CT_ScRgbColor, documentation=u'Green Modification'))
CT_ScRgbColor._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'shade')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'comp')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'inv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gray')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sat')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'red')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'green')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma')), min_occurs=1L, max_occurs=1L)
    )
CT_ScRgbColor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ScRgbColor._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_ScRgbColor._ContentModel = pyxb.binding.content.ParticleModel(CT_ScRgbColor._GroupModel, min_occurs=1, max_occurs=1)



CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), CT_PositiveFixedPercentage, scope=CT_SystemColor, documentation=u'Alpha'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), CT_InverseGammaTransform, scope=CT_SystemColor, documentation=u'Inverse Gamma'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_PositivePercentage, scope=CT_SystemColor, documentation=u'Alpha Modulation'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), CT_FixedPercentage, scope=CT_SystemColor, documentation=u'Alpha Offset'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), CT_PositiveFixedAngle, scope=CT_SystemColor, documentation=u'Hue'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), CT_Percentage, scope=CT_SystemColor, documentation=u'Blue Modification'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), CT_Angle, scope=CT_SystemColor, documentation=u'Hue Offset'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), CT_PositivePercentage, scope=CT_SystemColor, documentation=u'Hue Modulate'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), CT_Percentage, scope=CT_SystemColor, documentation=u'Saturation'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), CT_Percentage, scope=CT_SystemColor, documentation=u'Saturation Offset'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), CT_Percentage, scope=CT_SystemColor, documentation=u'Saturation Modulation'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), CT_GammaTransform, scope=CT_SystemColor, documentation=u'Gamma'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_Percentage, scope=CT_SystemColor, documentation=u'Luminance'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), CT_Percentage, scope=CT_SystemColor, documentation=u'Luminance Offset'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), CT_Percentage, scope=CT_SystemColor, documentation=u'Green Modification'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), CT_Percentage, scope=CT_SystemColor, documentation=u'Red'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), CT_Percentage, scope=CT_SystemColor, documentation=u'Red Offset'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), CT_Percentage, scope=CT_SystemColor, documentation=u'Green Offset'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), CT_Percentage, scope=CT_SystemColor, documentation=u'Red Modulation'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), CT_Percentage, scope=CT_SystemColor, documentation=u'Green'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), CT_Percentage, scope=CT_SystemColor, documentation=u'Blue'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_PositiveFixedPercentage, scope=CT_SystemColor, documentation=u'Tint'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), CT_Percentage, scope=CT_SystemColor, documentation=u'Luminance Modulation'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), CT_PositiveFixedPercentage, scope=CT_SystemColor, documentation=u'Shade'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), CT_ComplementTransform, scope=CT_SystemColor, documentation=u'Complement'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), CT_InverseTransform, scope=CT_SystemColor, documentation=u'Inverse'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), CT_Percentage, scope=CT_SystemColor, documentation=u'Blue Offset'))

CT_SystemColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), CT_GrayscaleTransform, scope=CT_SystemColor, documentation=u'Gray'))
CT_SystemColor._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'shade')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'comp')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'inv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gray')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sat')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'red')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'green')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SystemColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma')), min_occurs=1L, max_occurs=1L)
    )
CT_SystemColor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SystemColor._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_SystemColor._ContentModel = pyxb.binding.content.ParticleModel(CT_SystemColor._GroupModel, min_occurs=1, max_occurs=1)



CT_OfficeArtExtensionList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ext'), CT_OfficeArtExtension, scope=CT_OfficeArtExtensionList, documentation=u'Extension'))
CT_OfficeArtExtensionList._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OfficeArtExtensionList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ext')), min_occurs=0L, max_occurs=None)
    )
CT_OfficeArtExtensionList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OfficeArtExtensionList._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_OfficeArtExtensionList._ContentModel = pyxb.binding.content.ParticleModel(CT_OfficeArtExtensionList._GroupModel, min_occurs=1, max_occurs=1)



CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'outerShdw'), CT_OuterShadowEffect, scope=CT_EffectList))

CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'glow'), CT_GlowEffect, scope=CT_EffectList))

CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstShdw'), CT_PresetShadowEffect, scope=CT_EffectList))

CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'innerShdw'), CT_InnerShadowEffect, scope=CT_EffectList))

CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'reflection'), CT_ReflectionEffect, scope=CT_EffectList))

CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'softEdge'), CT_SoftEdgesEffect, scope=CT_EffectList))

CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blur'), CT_BlurEffect, scope=CT_EffectList, documentation=u'Blur Effect'))

CT_EffectList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay'), CT_FillOverlayEffect, scope=CT_EffectList))
CT_EffectList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blur')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'glow')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'innerShdw')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'outerShdw')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstShdw')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'reflection')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'softEdge')), min_occurs=0L, max_occurs=1L)
    )
CT_EffectList._ContentModel = pyxb.binding.content.ParticleModel(CT_EffectList._GroupModel, min_occurs=1, max_occurs=1)



CT_BlipFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tile'), CT_TileInfoProperties, scope=CT_BlipFillProperties, documentation=u'Tile'))

CT_BlipFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blip'), CT_Blip, scope=CT_BlipFillProperties))

CT_BlipFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'stretch'), CT_StretchInfoProperties, scope=CT_BlipFillProperties, documentation=u'Stretch'))

CT_BlipFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srcRect'), CT_RelativeRect, scope=CT_BlipFillProperties, documentation=u'Source Rectangle'))
CT_BlipFillProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BlipFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tile')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BlipFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'stretch')), min_occurs=1L, max_occurs=1L)
    )
CT_BlipFillProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BlipFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blip')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BlipFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srcRect')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BlipFillProperties._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_BlipFillProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_BlipFillProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_BaseStyles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_BaseStyles))

CT_BaseStyles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme'), CT_ColorScheme, scope=CT_BaseStyles))

CT_BaseStyles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fontScheme'), CT_FontScheme, scope=CT_BaseStyles, documentation=u'Font Scheme'))

CT_BaseStyles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fmtScheme'), CT_StyleMatrix, scope=CT_BaseStyles, documentation=u'Format Scheme'))
CT_BaseStyles._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BaseStyles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BaseStyles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fontScheme')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BaseStyles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fmtScheme')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BaseStyles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_BaseStyles._ContentModel = pyxb.binding.content.ParticleModel(CT_BaseStyles._GroupModel, min_occurs=1, max_occurs=1)



CT_ConnectionSite._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pos'), CT_AdjPoint2D, scope=CT_ConnectionSite, documentation=u'Position'))
CT_ConnectionSite._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ConnectionSite._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pos')), min_occurs=1L, max_occurs=1L)
    )
CT_ConnectionSite._ContentModel = pyxb.binding.content.ParticleModel(CT_ConnectionSite._GroupModel, min_occurs=1, max_occurs=1)



CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Green Modification'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Luminance'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), CT_InverseTransform, scope=CT_SRgbColor, documentation=u'Inverse'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Luminance Modulation'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Red'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Red Offset'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Blue'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Red Modulation'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Green'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Green Offset'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), CT_PositiveFixedPercentage, scope=CT_SRgbColor, documentation=u'Alpha'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), CT_ComplementTransform, scope=CT_SRgbColor, documentation=u'Complement'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), CT_PositiveFixedPercentage, scope=CT_SRgbColor, documentation=u'Shade'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Blue Offset'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), CT_GrayscaleTransform, scope=CT_SRgbColor, documentation=u'Gray'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), CT_GammaTransform, scope=CT_SRgbColor, documentation=u'Gamma'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Saturation Modulation'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), CT_InverseGammaTransform, scope=CT_SRgbColor, documentation=u'Inverse Gamma'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_PositivePercentage, scope=CT_SRgbColor, documentation=u'Alpha Modulation'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Blue Modification'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), CT_PositiveFixedAngle, scope=CT_SRgbColor, documentation=u'Hue'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Luminance Offset'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), CT_Angle, scope=CT_SRgbColor, documentation=u'Hue Offset'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), CT_PositivePercentage, scope=CT_SRgbColor, documentation=u'Hue Modulate'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_PositiveFixedPercentage, scope=CT_SRgbColor, documentation=u'Tint'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Saturation'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), CT_Percentage, scope=CT_SRgbColor, documentation=u'Saturation Offset'))

CT_SRgbColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), CT_FixedPercentage, scope=CT_SRgbColor, documentation=u'Alpha Offset'))
CT_SRgbColor._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'shade')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'comp')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'inv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gray')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sat')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'red')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'green')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SRgbColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma')), min_occurs=1L, max_occurs=1L)
    )
CT_SRgbColor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SRgbColor._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_SRgbColor._ContentModel = pyxb.binding.content.ParticleModel(CT_SRgbColor._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_CustomColor, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_CustomColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_CustomColor, documentation=u'RGB Color Model - Hex Variant'))

CT_CustomColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_CustomColor, documentation=u'System Color'))

CT_CustomColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_CustomColor, documentation=u'Scheme Color'))

CT_CustomColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_CustomColor, documentation=u'RGB Color Model - Percentage Variant'))

CT_CustomColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_CustomColor, documentation=u'Preset Color'))
CT_CustomColor._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_CustomColor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomColor._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_CustomColor._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomColor._GroupModel, min_occurs=1, max_occurs=1)



CT_StyleMatrixReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_StyleMatrixReference, documentation=u'RGB Color Model - Hex Variant'))

CT_StyleMatrixReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_StyleMatrixReference, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_StyleMatrixReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_StyleMatrixReference, documentation=u'System Color'))

CT_StyleMatrixReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_StyleMatrixReference, documentation=u'RGB Color Model - Percentage Variant'))

CT_StyleMatrixReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_StyleMatrixReference, documentation=u'Scheme Color'))

CT_StyleMatrixReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_StyleMatrixReference, documentation=u'Preset Color'))
CT_StyleMatrixReference._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_StyleMatrixReference._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_StyleMatrixReference._ContentModel = pyxb.binding.content.ParticleModel(CT_StyleMatrixReference._GroupModel, min_occurs=1, max_occurs=1)



CT_LightRig._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'rot'), CT_SphereCoords, scope=CT_LightRig, documentation=u'Rotation'))
CT_LightRig._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_LightRig._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'rot')), min_occurs=0L, max_occurs=1L)
    )
CT_LightRig._ContentModel = pyxb.binding.content.ParticleModel(CT_LightRig._GroupModel, min_occurs=1, max_occurs=1)



CT_SolidColorFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_SolidColorFillProperties, documentation=u'RGB Color Model - Hex Variant'))

CT_SolidColorFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_SolidColorFillProperties, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_SolidColorFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_SolidColorFillProperties, documentation=u'System Color'))

CT_SolidColorFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_SolidColorFillProperties, documentation=u'RGB Color Model - Percentage Variant'))

CT_SolidColorFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_SolidColorFillProperties, documentation=u'Scheme Color'))

CT_SolidColorFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_SolidColorFillProperties, documentation=u'Preset Color'))
CT_SolidColorFillProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_SolidColorFillProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_SolidColorFillProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_SolidColorFillProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlConnector._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GvmlConnector))

CT_GvmlConnector._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'nvCxnSpPr'), CT_GvmlConnectorNonVisual, scope=CT_GvmlConnector, documentation=u'Non-Visual Properties for a Connection Shape'))

CT_GvmlConnector._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), CT_ShapeProperties, scope=CT_GvmlConnector, documentation=u'Visual Properties'))

CT_GvmlConnector._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), CT_ShapeStyle, scope=CT_GvmlConnector, documentation=u'Shape Style'))
CT_GvmlConnector._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlConnector._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'nvCxnSpPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlConnector._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlConnector._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'style')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlConnector._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GvmlConnector._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlConnector._GroupModel, min_occurs=1, max_occurs=1)



CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_TintEffect, scope=CT_Blip, documentation=u'Tint Effect'))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrRepl'), CT_ColorReplaceEffect, scope=CT_Blip, documentation=u'Solid Color Replacement'))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaInv'), CT_AlphaInverseEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_AlphaModulateEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blur'), CT_BlurEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaModFix'), CT_AlphaModulateFixedEffect, scope=CT_Blip, documentation=u'Alpha Modulate Fixed Effect'))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'biLevel'), CT_BiLevelEffect, scope=CT_Blip, documentation=u'Bi-Level (Black/White) Effect'))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay'), CT_FillOverlayEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaRepl'), CT_AlphaReplaceEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaCeiling'), CT_AlphaCeilingEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grayscl'), CT_GrayscaleEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaBiLevel'), CT_AlphaBiLevelEffect, scope=CT_Blip, documentation=u'Alpha Bi-Level Effect'))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hsl'), CT_HSLEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'duotone'), CT_DuotoneEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_LuminanceEffect, scope=CT_Blip, documentation=u'Luminance Effect'))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrChange'), CT_ColorChangeEffect, scope=CT_Blip))

CT_Blip._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaFloor'), CT_AlphaFloorEffect, scope=CT_Blip))
CT_Blip._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaBiLevel')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaCeiling')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaFloor')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaInv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaModFix')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaRepl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'biLevel')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blur')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrChange')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrRepl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'duotone')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grayscl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hsl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L)
    )
CT_Blip._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Blip._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Blip._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Blip._ContentModel = pyxb.binding.content.ParticleModel(CT_Blip._GroupModel, min_occurs=1, max_occurs=1)



CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_ShapeProperties, documentation=u'Group Fill'))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_ShapeProperties))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), CT_Shape3D, scope=CT_ShapeProperties))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ShapeProperties))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_ShapeProperties))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstGeom'), CT_PresetGeometry2D, scope=CT_ShapeProperties, documentation=u'Preset geometry'))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_ShapeProperties, documentation=u'Effect Container'))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), CT_Scene3D, scope=CT_ShapeProperties))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'custGeom'), CT_CustomGeometry2D, scope=CT_ShapeProperties, documentation=u'Custom geometry'))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_ShapeProperties, documentation=u'Effect Container'))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), CT_Transform2D, scope=CT_ShapeProperties, documentation=u'2D Transform for Individual Objects'))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_ShapeProperties, documentation=u'Pattern Fill'))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), CT_LineProperties, scope=CT_ShapeProperties))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_ShapeProperties))

CT_ShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_ShapeProperties))
CT_ShapeProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'custGeom')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstGeom')), min_occurs=1L, max_occurs=1L)
    )
CT_ShapeProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_ShapeProperties._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_ShapeProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ln')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._GroupModel_3, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ShapeProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_ShapeProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_FillEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_FillEffect))

CT_FillEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_FillEffect))

CT_FillEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_FillEffect))

CT_FillEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_FillEffect))

CT_FillEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_FillEffect, documentation=u'Pattern Fill'))

CT_FillEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_FillEffect, documentation=u'Group Fill'))
CT_FillEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FillEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_FillEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FillEffect._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_FillEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_FillEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_TableGrid._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gridCol'), CT_TableCol, scope=CT_TableGrid, documentation=u'Table Grid Column'))
CT_TableGrid._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableGrid._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gridCol')), min_occurs=0L, max_occurs=None)
    )
CT_TableGrid._ContentModel = pyxb.binding.content.ParticleModel(CT_TableGrid._GroupModel, min_occurs=1, max_occurs=1)



CT_Path2DMoveTo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), CT_AdjPoint2D, scope=CT_Path2DMoveTo, documentation=u'Move end point'))
CT_Path2DMoveTo._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Path2DMoveTo._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pt')), min_occurs=1L, max_occurs=1L)
    )
CT_Path2DMoveTo._ContentModel = pyxb.binding.content.ParticleModel(CT_Path2DMoveTo._GroupModel, min_occurs=1, max_occurs=1)



CT_Scene3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Scene3D))

CT_Scene3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'camera'), CT_Camera, scope=CT_Scene3D, documentation=u'Camera'))

CT_Scene3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lightRig'), CT_LightRig, scope=CT_Scene3D, documentation=u'Light Rig'))

CT_Scene3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'backdrop'), CT_Backdrop, scope=CT_Scene3D, documentation=u'Backdrop Plane'))
CT_Scene3D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Scene3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'camera')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Scene3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lightRig')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Scene3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'backdrop')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Scene3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Scene3D._ContentModel = pyxb.binding.content.ParticleModel(CT_Scene3D._GroupModel, min_occurs=1, max_occurs=1)



CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), CT_GammaTransform, scope=CT_HslColor, documentation=u'Gamma'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), CT_InverseGammaTransform, scope=CT_HslColor, documentation=u'Inverse Gamma'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), CT_Percentage, scope=CT_HslColor, documentation=u'Blue Modification'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), CT_FixedPercentage, scope=CT_HslColor, documentation=u'Alpha Offset'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), CT_PositiveFixedAngle, scope=CT_HslColor, documentation=u'Hue'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), CT_PositiveFixedPercentage, scope=CT_HslColor, documentation=u'Alpha'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), CT_Angle, scope=CT_HslColor, documentation=u'Hue Offset'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), CT_Percentage, scope=CT_HslColor, documentation=u'Saturation'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), CT_Percentage, scope=CT_HslColor, documentation=u'Saturation Offset'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), CT_Percentage, scope=CT_HslColor, documentation=u'Green Modification'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), CT_Percentage, scope=CT_HslColor, documentation=u'Saturation Modulation'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_Percentage, scope=CT_HslColor, documentation=u'Luminance'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), CT_Percentage, scope=CT_HslColor, documentation=u'Luminance Modulation'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), CT_Percentage, scope=CT_HslColor, documentation=u'Red'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), CT_Percentage, scope=CT_HslColor, documentation=u'Blue'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), CT_Percentage, scope=CT_HslColor, documentation=u'Luminance Offset'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), CT_Percentage, scope=CT_HslColor, documentation=u'Red Offset'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_PositivePercentage, scope=CT_HslColor, documentation=u'Alpha Modulation'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), CT_Percentage, scope=CT_HslColor, documentation=u'Red Modulation'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), CT_Percentage, scope=CT_HslColor, documentation=u'Green'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), CT_PositivePercentage, scope=CT_HslColor, documentation=u'Hue Modulate'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), CT_Percentage, scope=CT_HslColor, documentation=u'Green Offset'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_PositiveFixedPercentage, scope=CT_HslColor, documentation=u'Tint'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), CT_PositiveFixedPercentage, scope=CT_HslColor, documentation=u'Shade'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), CT_Percentage, scope=CT_HslColor, documentation=u'Blue Offset'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), CT_ComplementTransform, scope=CT_HslColor, documentation=u'Complement'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), CT_InverseTransform, scope=CT_HslColor, documentation=u'Inverse'))

CT_HslColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), CT_GrayscaleTransform, scope=CT_HslColor, documentation=u'Gray'))
CT_HslColor._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'shade')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'comp')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'inv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gray')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sat')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'red')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'green')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HslColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma')), min_occurs=1L, max_occurs=1L)
    )
CT_HslColor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_HslColor._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_HslColor._ContentModel = pyxb.binding.content.ParticleModel(CT_HslColor._GroupModel, min_occurs=1, max_occurs=1)



CT_TextBody._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'p'), CT_TextParagraph, scope=CT_TextBody, documentation=u'Text Paragraphs'))

CT_TextBody._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bodyPr'), CT_TextBodyProperties, scope=CT_TextBody, documentation=u'Body Properties'))

CT_TextBody._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lstStyle'), CT_TextListStyle, scope=CT_TextBody, documentation=u'Text List Styles'))
CT_TextBody._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextBody._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bodyPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextBody._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lstStyle')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextBody._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'p')), min_occurs=1L, max_occurs=None)
    )
CT_TextBody._ContentModel = pyxb.binding.content.ParticleModel(CT_TextBody._GroupModel, min_occurs=1, max_occurs=1)



CT_FillOverlayEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_FillOverlayEffect))

CT_FillOverlayEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_FillOverlayEffect))

CT_FillOverlayEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_FillOverlayEffect, documentation=u'Pattern Fill'))

CT_FillOverlayEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_FillOverlayEffect))

CT_FillOverlayEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_FillOverlayEffect, documentation=u'Group Fill'))

CT_FillOverlayEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_FillOverlayEffect))
CT_FillOverlayEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_FillOverlayEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_FillOverlayEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_FillOverlayEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_PatternFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bgClr'), CT_Color, scope=CT_PatternFillProperties, documentation=u'Background color'))

CT_PatternFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fgClr'), CT_Color, scope=CT_PatternFillProperties, documentation=u'Foreground color'))
CT_PatternFillProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PatternFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fgClr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PatternFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bgClr')), min_occurs=0L, max_occurs=1L)
    )
CT_PatternFillProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_PatternFillProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_Choose._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'else'), CT_Otherwise, scope=CT_Choose, documentation=u'Else'))

CT_Choose._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'if'), CT_When, scope=CT_Choose, documentation=u'If'))
CT_Choose._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Choose._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'if')), min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Choose._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'else')), min_occurs=0L, max_occurs=1)
    )
CT_Choose._ContentModel = pyxb.binding.content.ParticleModel(CT_Choose._GroupModel, min_occurs=1, max_occurs=1)



CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), CT_Percentage, scope=CT_PresetColor, documentation=u'Green'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_PositiveFixedPercentage, scope=CT_PresetColor, documentation=u'Tint'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), CT_ComplementTransform, scope=CT_PresetColor, documentation=u'Complement'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), CT_InverseGammaTransform, scope=CT_PresetColor, documentation=u'Inverse Gamma'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), CT_Angle, scope=CT_PresetColor, documentation=u'Hue Offset'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), CT_Percentage, scope=CT_PresetColor, documentation=u'Green Modification'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), CT_Percentage, scope=CT_PresetColor, documentation=u'Blue'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), CT_InverseTransform, scope=CT_PresetColor, documentation=u'Inverse'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), CT_Percentage, scope=CT_PresetColor, documentation=u'Blue Modification'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), CT_PositiveFixedPercentage, scope=CT_PresetColor, documentation=u'Alpha'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), CT_FixedPercentage, scope=CT_PresetColor, documentation=u'Alpha Offset'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), CT_Percentage, scope=CT_PresetColor, documentation=u'Blue Offset'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_PositivePercentage, scope=CT_PresetColor, documentation=u'Alpha Modulation'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), CT_PositiveFixedAngle, scope=CT_PresetColor, documentation=u'Hue'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), CT_PositivePercentage, scope=CT_PresetColor, documentation=u'Hue Modulate'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), CT_GrayscaleTransform, scope=CT_PresetColor, documentation=u'Gray'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), CT_Percentage, scope=CT_PresetColor, documentation=u'Saturation'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), CT_Percentage, scope=CT_PresetColor, documentation=u'Red Modulation'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), CT_Percentage, scope=CT_PresetColor, documentation=u'Saturation Offset'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), CT_Percentage, scope=CT_PresetColor, documentation=u'Saturation Modulation'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_Percentage, scope=CT_PresetColor, documentation=u'Luminance'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), CT_Percentage, scope=CT_PresetColor, documentation=u'Green Offset'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), CT_Percentage, scope=CT_PresetColor, documentation=u'Luminance Offset'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), CT_Percentage, scope=CT_PresetColor, documentation=u'Luminance Modulation'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), CT_PositiveFixedPercentage, scope=CT_PresetColor, documentation=u'Shade'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), CT_GammaTransform, scope=CT_PresetColor, documentation=u'Gamma'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), CT_Percentage, scope=CT_PresetColor, documentation=u'Red'))

CT_PresetColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), CT_Percentage, scope=CT_PresetColor, documentation=u'Red Offset'))
CT_PresetColor._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'shade')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'comp')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'inv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gray')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sat')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'red')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'green')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma')), min_occurs=1L, max_occurs=1L)
    )
CT_PresetColor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PresetColor._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_PresetColor._ContentModel = pyxb.binding.content.ParticleModel(CT_PresetColor._GroupModel, min_occurs=1, max_occurs=1)



CT_Color._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_Color, documentation=u'RGB Color Model - Hex Variant'))

CT_Color._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_Color, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_Color._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_Color, documentation=u'System Color'))

CT_Color._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_Color, documentation=u'Scheme Color'))

CT_Color._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_Color, documentation=u'RGB Color Model - Percentage Variant'))

CT_Color._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_Color, documentation=u'Preset Color'))
CT_Color._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Color._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Color._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Color._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Color._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Color._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Color._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_Color._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Color._GroupModel_, min_occurs=1, max_occurs=1)
    )
CT_Color._ContentModel = pyxb.binding.content.ParticleModel(CT_Color._GroupModel, min_occurs=1, max_occurs=1)



CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'font'), CT_FontCollection, scope=CT_TableStyleTextStyle, documentation=u'Font'))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_TableStyleTextStyle, documentation=u'RGB Color Model - Hex Variant'))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_TableStyleTextStyle, documentation=u'System Color'))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_TableStyleTextStyle, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableStyleTextStyle))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fontRef'), CT_FontReference, scope=CT_TableStyleTextStyle))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_TableStyleTextStyle, documentation=u'Scheme Color'))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_TableStyleTextStyle, documentation=u'Preset Color'))

CT_TableStyleTextStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_TableStyleTextStyle, documentation=u'RGB Color Model - Percentage Variant'))
CT_TableStyleTextStyle._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'font')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fontRef')), min_occurs=1L, max_occurs=1L)
    )
CT_TableStyleTextStyle._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_TableStyleTextStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableStyleTextStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_TableStyleTextStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_StyleDefinitionHeaderLst._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'styleDefHdr'), CT_StyleDefinitionHeader, scope=CT_StyleDefinitionHeaderLst, documentation=u'Style Definition Header'))
CT_StyleDefinitionHeaderLst._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_StyleDefinitionHeaderLst._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'styleDefHdr')), min_occurs=0L, max_occurs=None)
    )
CT_StyleDefinitionHeaderLst._ContentModel = pyxb.binding.content.ParticleModel(CT_StyleDefinitionHeaderLst._GroupModel, min_occurs=1, max_occurs=1)



CT_Shape3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Shape3D))

CT_Shape3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bevelT'), CT_Bevel, scope=CT_Shape3D, documentation=u'Top Bevel'))

CT_Shape3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'contourClr'), CT_Color, scope=CT_Shape3D, documentation=u'Contour Color'))

CT_Shape3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bevelB'), CT_Bevel, scope=CT_Shape3D, documentation=u'Bottom Bevel'))

CT_Shape3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extrusionClr'), CT_Color, scope=CT_Shape3D, documentation=u'Extrusion Color'))
CT_Shape3D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Shape3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bevelT')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Shape3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bevelB')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Shape3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extrusionClr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Shape3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'contourClr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Shape3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Shape3D._ContentModel = pyxb.binding.content.ParticleModel(CT_Shape3D._GroupModel, min_occurs=1, max_occurs=1)



CT_Constraints._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'constr'), CT_Constraint, scope=CT_Constraints, documentation=u'Constraint'))
CT_Constraints._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Constraints._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'constr')), min_occurs=0L, max_occurs=None)
    )
CT_Constraints._ContentModel = pyxb.binding.content.ParticleModel(CT_Constraints._GroupModel, min_occurs=1, max_occurs=1)


CT_GraphicalObjectData._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_strict, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), min_occurs=0L, max_occurs=None)
    )
CT_GraphicalObjectData._ContentModel = pyxb.binding.content.ParticleModel(CT_GraphicalObjectData._GroupModel, min_occurs=1, max_occurs=1)



CT_GraphicalObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicData'), CT_GraphicalObjectData, scope=CT_GraphicalObject, documentation=u'Graphic Object Data'))
CT_GraphicalObject._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GraphicalObject._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicData')), min_occurs=1, max_occurs=1)
    )
CT_GraphicalObject._ContentModel = pyxb.binding.content.ParticleModel(CT_GraphicalObject._GroupModel, min_occurs=1, max_occurs=1)



CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_BackgroundFormatting))

CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_BackgroundFormatting))

CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_BackgroundFormatting))

CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_BackgroundFormatting, documentation=u'Effect Container'))

CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_BackgroundFormatting, documentation=u'Effect Container'))

CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_BackgroundFormatting))

CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_BackgroundFormatting, documentation=u'Pattern Fill'))

CT_BackgroundFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_BackgroundFormatting, documentation=u'Group Fill'))
CT_BackgroundFormatting._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_BackgroundFormatting._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_BackgroundFormatting._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._GroupModel_2, min_occurs=0L, max_occurs=1L)
    )
CT_BackgroundFormatting._ContentModel = pyxb.binding.content.ParticleModel(CT_BackgroundFormatting._GroupModel, min_occurs=1, max_occurs=1)



CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_LineProperties, documentation=u'No Fill'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bevel'), CT_LineJoinBevel, scope=CT_LineProperties, documentation=u'Line Join Bevel'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'miter'), CT_LineJoinMiterProperties, scope=CT_LineProperties, documentation=u'Miter Line Join'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstDash'), CT_PresetLineDashProperties, scope=CT_LineProperties, documentation=u'Preset Dash'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_LineProperties))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'custDash'), CT_DashStopList, scope=CT_LineProperties, documentation=u'Custom Dash'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tailEnd'), CT_LineEndProperties, scope=CT_LineProperties, documentation=u'Tail line end style'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'headEnd'), CT_LineEndProperties, scope=CT_LineProperties, documentation=u'Line Head/End Style'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_LineProperties, documentation=u'Solid Fill'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_LineProperties))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_LineProperties, documentation=u'Gradient Fill'))

CT_LineProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'round'), CT_LineJoinRound, scope=CT_LineProperties, documentation=u'Round Line Join'))
CT_LineProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L)
    )
CT_LineProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstDash')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'custDash')), min_occurs=1L, max_occurs=1L)
    )
CT_LineProperties._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'round')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bevel')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'miter')), min_occurs=1L, max_occurs=1L)
    )
CT_LineProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_LineProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._GroupModel_3, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'headEnd')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tailEnd')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LineProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_LineProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_LineProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_NonVisualPictureProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_NonVisualPictureProperties))

CT_NonVisualPictureProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'picLocks'), CT_PictureLocking, scope=CT_NonVisualPictureProperties, documentation=u'Picture Locks'))
CT_NonVisualPictureProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NonVisualPictureProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'picLocks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualPictureProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NonVisualPictureProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_NonVisualPictureProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_DashStopList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ds'), CT_DashStop, scope=CT_DashStopList, documentation=u'Dash Stop'))
CT_DashStopList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DashStopList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ds')), min_occurs=0L, max_occurs=None)
    )
CT_DashStopList._ContentModel = pyxb.binding.content.ParticleModel(CT_DashStopList._GroupModel, min_occurs=1, max_occurs=1)



CT_Colors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_Colors, documentation=u'Scheme Color'))

CT_Colors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_Colors, documentation=u'RGB Color Model - Percentage Variant'))

CT_Colors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_Colors, documentation=u'Preset Color'))

CT_Colors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_Colors, documentation=u'System Color'))

CT_Colors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_Colors, documentation=u'RGB Color Model - Hex Variant'))

CT_Colors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_Colors, documentation=u'Hue, Saturation, Luminance Color Model'))
CT_Colors._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Colors._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Colors._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Colors._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Colors._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Colors._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Colors._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_Colors._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Colors._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_Colors._ContentModel = pyxb.binding.content.ParticleModel(CT_Colors._GroupModel, min_occurs=1, max_occurs=1)



CT_TableStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tblStyle'), CT_TableStyle, scope=CT_TableStyleList, documentation=u'Table Style'))
CT_TableStyleList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tblStyle')), min_occurs=0L, max_occurs=None)
    )
CT_TableStyleList._ContentModel = pyxb.binding.content.ParticleModel(CT_TableStyleList._GroupModel, min_occurs=1, max_occurs=1)



CT_AlphaInverseEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_AlphaInverseEffect, documentation=u'RGB Color Model - Hex Variant'))

CT_AlphaInverseEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_AlphaInverseEffect, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_AlphaInverseEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_AlphaInverseEffect, documentation=u'RGB Color Model - Percentage Variant'))

CT_AlphaInverseEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_AlphaInverseEffect, documentation=u'System Color'))

CT_AlphaInverseEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_AlphaInverseEffect, documentation=u'Scheme Color'))

CT_AlphaInverseEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_AlphaInverseEffect, documentation=u'Preset Color'))
CT_AlphaInverseEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_AlphaInverseEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_AlphaInverseEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_AlphaInverseEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pic'), CT_GvmlPicture, scope=CT_GvmlGroupShape, documentation=u'Picture'))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSpPr'), CT_GroupShapeProperties, scope=CT_GvmlGroupShape, documentation=u'Visual Group Shape Properties'))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicFrame'), CT_GvmlGraphicalObjectFrame, scope=CT_GvmlGroupShape, documentation=u'Graphic Frame'))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSp'), CT_GvmlGroupShape, scope=CT_GvmlGroupShape, documentation=u'Group shape'))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'txSp'), CT_GvmlTextShape, scope=CT_GvmlGroupShape, documentation=u'Text shape'))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'nvGrpSpPr'), CT_GvmlGroupShapeNonVisual, scope=CT_GvmlGroupShape, documentation=u'Non-Visual Properties for a Group Shape'))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GvmlGroupShape))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sp'), CT_GvmlShape, scope=CT_GvmlGroupShape, documentation=u'Shape'))

CT_GvmlGroupShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnSp'), CT_GvmlConnector, scope=CT_GvmlGroupShape, documentation=u'Connection Shape'))
CT_GvmlGroupShape._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'txSp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnSp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pic')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicFrame')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSp')), min_occurs=1, max_occurs=1)
    )
CT_GvmlGroupShape._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'nvGrpSpPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSpPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GvmlGroupShape._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlGroupShape._GroupModel, min_occurs=1, max_occurs=1)



CT_TextSpacing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spcPct'), CT_TextSpacingPercent, scope=CT_TextSpacing, documentation=u'Spacing Percent'))

CT_TextSpacing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spcPts'), CT_TextSpacingPoint, scope=CT_TextSpacing, documentation=u'Spacing Points'))
CT_TextSpacing._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextSpacing._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spcPct')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextSpacing._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spcPts')), min_occurs=1, max_occurs=1)
    )
CT_TextSpacing._ContentModel = pyxb.binding.content.ParticleModel(CT_TextSpacing._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorReplaceEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_ColorReplaceEffect, documentation=u'RGB Color Model - Hex Variant'))

CT_ColorReplaceEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_ColorReplaceEffect, documentation=u'Preset Color'))

CT_ColorReplaceEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_ColorReplaceEffect, documentation=u'RGB Color Model - Percentage Variant'))

CT_ColorReplaceEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_ColorReplaceEffect, documentation=u'System Color'))

CT_ColorReplaceEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_ColorReplaceEffect, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_ColorReplaceEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_ColorReplaceEffect, documentation=u'Scheme Color'))
CT_ColorReplaceEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_ColorReplaceEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_ColorReplaceEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorReplaceEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorTransformHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ColorTransformHeader))

CT_ColorTransformHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'title'), CT_CTName, scope=CT_ColorTransformHeader, documentation=u'Title'))

CT_ColorTransformHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), CT_CTCategories, scope=CT_ColorTransformHeader, documentation=u'Color Transform Category List'))

CT_ColorTransformHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'desc'), CT_CTDescription, scope=CT_ColorTransformHeader, documentation=u'Description'))
CT_ColorTransformHeader._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorTransformHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'title')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_ColorTransformHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'desc')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_ColorTransformHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'catLst')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ColorTransformHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ColorTransformHeader._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorTransformHeader._GroupModel, min_occurs=1, max_occurs=1)



CT_BackgroundFillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_BackgroundFillStyleList))

CT_BackgroundFillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_BackgroundFillStyleList, documentation=u'Group Fill'))

CT_BackgroundFillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_BackgroundFillStyleList, documentation=u'Pattern Fill'))

CT_BackgroundFillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_BackgroundFillStyleList))

CT_BackgroundFillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_BackgroundFillStyleList))

CT_BackgroundFillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_BackgroundFillStyleList))
CT_BackgroundFillStyleList._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_BackgroundFillStyleList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._GroupModel_, min_occurs=3L, max_occurs=None)
    )
CT_BackgroundFillStyleList._ContentModel = pyxb.binding.content.ParticleModel(CT_BackgroundFillStyleList._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorChangeEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrTo'), CT_Color, scope=CT_ColorChangeEffect, documentation=u'Change Color To'))

CT_ColorChangeEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrFrom'), CT_Color, scope=CT_ColorChangeEffect, documentation=u'Change Color From'))
CT_ColorChangeEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorChangeEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrFrom')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorChangeEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrTo')), min_occurs=1L, max_occurs=1L)
    )
CT_ColorChangeEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorChangeEffect._GroupModel, min_occurs=1, max_occurs=1)


CT_OfficeArtExtension._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), min_occurs=1, max_occurs=1)
    )
CT_OfficeArtExtension._ContentModel = pyxb.binding.content.ParticleModel(CT_OfficeArtExtension._GroupModel, min_occurs=1, max_occurs=1)



CT_GroupLocking._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GroupLocking))
CT_GroupLocking._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GroupLocking._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GroupLocking._ContentModel = pyxb.binding.content.ParticleModel(CT_GroupLocking._GroupModel, min_occurs=1, max_occurs=1)



CT_DuotoneEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_DuotoneEffect, documentation=u'System Color'))

CT_DuotoneEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_DuotoneEffect, documentation=u'Preset Color'))

CT_DuotoneEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_DuotoneEffect, documentation=u'Scheme Color'))

CT_DuotoneEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_DuotoneEffect, documentation=u'RGB Color Model - Hex Variant'))

CT_DuotoneEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_DuotoneEffect, documentation=u'RGB Color Model - Percentage Variant'))

CT_DuotoneEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_DuotoneEffect, documentation=u'Hue, Saturation, Luminance Color Model'))
CT_DuotoneEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_DuotoneEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DuotoneEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DuotoneEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DuotoneEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DuotoneEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DuotoneEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_DuotoneEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DuotoneEffect._GroupModel_, min_occurs=2L, max_occurs=2L)
    )
CT_DuotoneEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_DuotoneEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlConnectorNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvCxnSpPr'), CT_NonVisualConnectorProperties, scope=CT_GvmlConnectorNonVisual, documentation=u'Non-Visual Connector Shape Drawing Properties'))

CT_GvmlConnectorNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), CT_NonVisualDrawingProps, scope=CT_GvmlConnectorNonVisual, documentation=u'Non-Visual Drawing Properties'))
CT_GvmlConnectorNonVisual._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlConnectorNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlConnectorNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvCxnSpPr')), min_occurs=1L, max_occurs=1L)
    )
CT_GvmlConnectorNonVisual._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlConnectorNonVisual._GroupModel, min_occurs=1, max_occurs=1)



CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), CT_Rules, scope=CT_LayoutNode, documentation=u'Rule List'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_LayoutNode))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'varLst'), CT_LayoutVariablePropertySet, scope=CT_LayoutNode, documentation=u'Variable List'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'alg'), CT_Algorithm, scope=CT_LayoutNode, documentation=u'Algorithm'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'choose'), CT_Choose, scope=CT_LayoutNode, documentation=u'Choose Element'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'shape'), CT_Shape, scope=CT_LayoutNode, documentation=u'Shape'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), CT_LayoutNode, scope=CT_LayoutNode, documentation=u'Layout Node'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), CT_PresentationOf, scope=CT_LayoutNode, documentation=u'Presentation Of'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), CT_Constraints, scope=CT_LayoutNode, documentation=u'Constraint List'))

CT_LayoutNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), CT_ForEach, scope=CT_LayoutNode, documentation=u'For Each'))
CT_LayoutNode._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'alg')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'shape')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'presOf')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'constrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'varLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'forEach')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'choose')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_LayoutNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_LayoutNode._ContentModel = pyxb.binding.content.ParticleModel(CT_LayoutNode._GroupModel, min_occurs=0L, max_occurs=None)



CT_CustomColorList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'custClr'), CT_CustomColor, scope=CT_CustomColorList, documentation=u'Custom color'))
CT_CustomColorList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomColorList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'custClr')), min_occurs=0L, max_occurs=None)
    )
CT_CustomColorList._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomColorList._GroupModel, min_occurs=1, max_occurs=1)



CT_OuterShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_OuterShadowEffect, documentation=u'RGB Color Model - Hex Variant'))

CT_OuterShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_OuterShadowEffect, documentation=u'Scheme Color'))

CT_OuterShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_OuterShadowEffect, documentation=u'Preset Color'))

CT_OuterShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_OuterShadowEffect, documentation=u'RGB Color Model - Percentage Variant'))

CT_OuterShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_OuterShadowEffect, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_OuterShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_OuterShadowEffect, documentation=u'System Color'))
CT_OuterShadowEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_OuterShadowEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_OuterShadowEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_OuterShadowEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_NonVisualGroupDrawingShapeProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_NonVisualGroupDrawingShapeProps))

CT_NonVisualGroupDrawingShapeProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSpLocks'), CT_GroupLocking, scope=CT_NonVisualGroupDrawingShapeProps, documentation=u'Group Shape Locks'))
CT_NonVisualGroupDrawingShapeProps._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NonVisualGroupDrawingShapeProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpSpLocks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualGroupDrawingShapeProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NonVisualGroupDrawingShapeProps._ContentModel = pyxb.binding.content.ParticleModel(CT_NonVisualGroupDrawingShapeProps._GroupModel, min_occurs=1, max_occurs=1)



CT_AlphaModulateEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cont'), CT_EffectContainer, scope=CT_AlphaModulateEffect))
CT_AlphaModulateEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AlphaModulateEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cont')), min_occurs=1L, max_occurs=1L)
    )
CT_AlphaModulateEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_AlphaModulateEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_GradientFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tileRect'), CT_RelativeRect, scope=CT_GradientFillProperties, documentation=u'Tile Rectangle'))

CT_GradientFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gsLst'), CT_GradientStopList, scope=CT_GradientFillProperties, documentation=u'Gradient Stop List'))

CT_GradientFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lin'), CT_LinearShadeProperties, scope=CT_GradientFillProperties, documentation=u'Linear Gradient Fill'))

CT_GradientFillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'path'), CT_PathShadeProperties, scope=CT_GradientFillProperties, documentation=u'Path Gradient'))
CT_GradientFillProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GradientFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lin')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'path')), min_occurs=1L, max_occurs=1L)
    )
CT_GradientFillProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GradientFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gsLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientFillProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientFillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tileRect')), min_occurs=0L, max_occurs=1L)
    )
CT_GradientFillProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_GradientFillProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Hyperlink))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'snd'), CT_EmbeddedWAVAudioFile, scope=CT_Hyperlink, documentation=u'Hyperlink Sound'))
CT_Hyperlink._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'snd')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Hyperlink._ContentModel = pyxb.binding.content.ParticleModel(CT_Hyperlink._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomGeometry2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gdLst'), CT_GeomGuideList, scope=CT_CustomGeometry2D, documentation=u'List of Shape Guides'))

CT_CustomGeometry2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst'), CT_GeomGuideList, scope=CT_CustomGeometry2D, documentation=u'Adjust Value List'))

CT_CustomGeometry2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ahLst'), CT_AdjustHandleList, scope=CT_CustomGeometry2D, documentation=u'List of Shape Adjust Handles'))

CT_CustomGeometry2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pathLst'), CT_Path2DList, scope=CT_CustomGeometry2D, documentation=u'List of Shape Paths'))

CT_CustomGeometry2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnLst'), CT_ConnectionSiteList, scope=CT_CustomGeometry2D, documentation=u'List of Shape Connection Sites'))

CT_CustomGeometry2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'rect'), CT_GeomRect, scope=CT_CustomGeometry2D, documentation=u'Shape Text Rectangle'))
CT_CustomGeometry2D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomGeometry2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomGeometry2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gdLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomGeometry2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ahLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomGeometry2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomGeometry2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'rect')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomGeometry2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pathLst')), min_occurs=1L, max_occurs=1L)
    )
CT_CustomGeometry2D._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomGeometry2D._GroupModel, min_occurs=1, max_occurs=1)



CT_StyleDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_StyleDefinition))

CT_StyleDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'title'), CT_SDName, scope=CT_StyleDefinition, documentation=u'Title'))

CT_StyleDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'styleLbl'), CT_StyleLabel, scope=CT_StyleDefinition, documentation=u'Style Label'))

CT_StyleDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), CT_SDCategories, scope=CT_StyleDefinition, documentation=u'Category List'))

CT_StyleDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'desc'), CT_SDDescription, scope=CT_StyleDefinition, documentation=u'Style Label Description'))

CT_StyleDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'scene3d'), CT_Scene3D, scope=CT_StyleDefinition, documentation=u'3-D Scene'))
CT_StyleDefinition._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_StyleDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'title')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_StyleDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'desc')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_StyleDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'catLst')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_StyleDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'scene3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'styleLbl')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_StyleDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_StyleDefinition._ContentModel = pyxb.binding.content.ParticleModel(CT_StyleDefinition._GroupModel, min_occurs=1, max_occurs=1)



CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'title'), CT_Name, scope=CT_DiagramDefinition, documentation=u'Title'))

CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'clrData'), CT_SampleData, scope=CT_DiagramDefinition, documentation=u'Color Transform Sample Data'))

CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), CT_LayoutNode, scope=CT_DiagramDefinition, documentation=u'Layout Node'))

CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'desc'), CT_Description, scope=CT_DiagramDefinition, documentation=u'Description'))

CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_DiagramDefinition))

CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), CT_Categories, scope=CT_DiagramDefinition, documentation=u'Category List'))

CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'sampData'), CT_SampleData, scope=CT_DiagramDefinition, documentation=u'Sample Data'))

CT_DiagramDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'styleData'), CT_SampleData, scope=CT_DiagramDefinition, documentation=u'Style Data'))
CT_DiagramDefinition._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'title')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'desc')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'catLst')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'sampData')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'styleData')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'clrData')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_DiagramDefinition._ContentModel = pyxb.binding.content.ParticleModel(CT_DiagramDefinition._GroupModel, min_occurs=1, max_occurs=1)



CT_TextField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u't'), pyxb.binding.datatypes.string, scope=CT_TextField))

CT_TextField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr'), CT_TextCharacterProperties, scope=CT_TextField, documentation=u'Text Character Properties'))

CT_TextField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pPr'), CT_TextParagraphProperties, scope=CT_TextField, documentation=u'Text Paragraph Properties'))
CT_TextField._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u't')), min_occurs=0L, max_occurs=1L)
    )
CT_TextField._ContentModel = pyxb.binding.content.ParticleModel(CT_TextField._GroupModel, min_occurs=1, max_occurs=1)



CT_CTCategories._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'cat'), CT_CTCategory, scope=CT_CTCategories, documentation=u'Color Transform Category'))
CT_CTCategories._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CTCategories._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'cat')), min_occurs=0L, max_occurs=None)
    )
CT_CTCategories._ContentModel = pyxb.binding.content.ParticleModel(CT_CTCategories._GroupModel, min_occurs=0L, max_occurs=None)



CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'animOne'), CT_AnimOne, scope=CT_LayoutVariablePropertySet, documentation=u'One by One Animation String'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'chPref'), CT_ChildPref, scope=CT_LayoutVariablePropertySet, documentation=u'Preferred Number of Children'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'resizeHandles'), CT_ResizeHandles, scope=CT_LayoutVariablePropertySet, documentation=u'Shape Resize Style'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'bulletEnabled'), CT_BulletEnabled, scope=CT_LayoutVariablePropertySet, documentation=u'Show Insert Bullet'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'animLvl'), CT_AnimLvl, scope=CT_LayoutVariablePropertySet, documentation=u'Level Animation'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'dir'), CT_Direction, scope=CT_LayoutVariablePropertySet, documentation=u'Diagram Direction'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'orgChart'), CT_OrgChart, scope=CT_LayoutVariablePropertySet, documentation=u'Show Organization Chart User Interface'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'hierBranch'), CT_HierBranchStyle, scope=CT_LayoutVariablePropertySet, documentation=u'Organization Chart Branch Style'))

CT_LayoutVariablePropertySet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'chMax'), CT_ChildMax, scope=CT_LayoutVariablePropertySet, documentation=u'Maximum Children'))
CT_LayoutVariablePropertySet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'orgChart')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'chMax')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'chPref')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'bulletEnabled')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'dir')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'hierBranch')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'animOne')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'animLvl')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'resizeHandles')), min_occurs=0L, max_occurs=1L)
    )
CT_LayoutVariablePropertySet._ContentModel = pyxb.binding.content.ParticleModel(CT_LayoutVariablePropertySet._GroupModel, min_occurs=1, max_occurs=1)



CT_EffectStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectStyle'), CT_EffectStyleItem, scope=CT_EffectStyleList, documentation=u'Effect Style'))
CT_EffectStyleList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EffectStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectStyle')), min_occurs=3L, max_occurs=None)
    )
CT_EffectStyleList._ContentModel = pyxb.binding.content.ParticleModel(CT_EffectStyleList._GroupModel, min_occurs=1, max_occurs=1)



CT_Table._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tr'), CT_TableRow, scope=CT_Table, documentation=u'Table Row'))

CT_Table._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tblPr'), CT_TableProperties, scope=CT_Table, documentation=u'Table Properties'))

CT_Table._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tblGrid'), CT_TableGrid, scope=CT_Table, documentation=u'Table Grid'))
CT_Table._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Table._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tblPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Table._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tblGrid')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Table._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tr')), min_occurs=0L, max_occurs=None)
    )
CT_Table._ContentModel = pyxb.binding.content.ParticleModel(CT_Table._GroupModel, min_occurs=1, max_occurs=1)



CT_StyleMatrix._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bgFillStyleLst'), CT_BackgroundFillStyleList, scope=CT_StyleMatrix, documentation=u'Background Fill Style List'))

CT_StyleMatrix._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillStyleLst'), CT_FillStyleList, scope=CT_StyleMatrix, documentation=u'Fill Style List'))

CT_StyleMatrix._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectStyleLst'), CT_EffectStyleList, scope=CT_StyleMatrix, documentation=u'Effect Style List'))

CT_StyleMatrix._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnStyleLst'), CT_LineStyleList, scope=CT_StyleMatrix, documentation=u'Line Style List'))
CT_StyleMatrix._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_StyleMatrix._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillStyleLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrix._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnStyleLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrix._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectStyleLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleMatrix._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bgFillStyleLst')), min_occurs=1L, max_occurs=1L)
    )
CT_StyleMatrix._ContentModel = pyxb.binding.content.ParticleModel(CT_StyleMatrix._GroupModel, min_occurs=1, max_occurs=1)



CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'band1H'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Band 1 Horizontal'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'firstCol'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'First Column'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'nwCell'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Northwest Cell'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lastRow'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Last Row'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'band2H'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Band 2 Horizontal'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableStyle))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'seCell'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Southeast Cell'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'neCell'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Northeast Cell'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'band1V'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Band 1 Vertical'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'swCell'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Southwest Cell'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'band2V'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Band 2 Vertical'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tblBg'), CT_TableBackgroundStyle, scope=CT_TableStyle, documentation=u'Table Background'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'firstRow'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'First Row'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lastCol'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Last Column'))

CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'wholeTbl'), CT_TablePartStyle, scope=CT_TableStyle, documentation=u'Whole Table'))
CT_TableStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tblBg')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'wholeTbl')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'band1H')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'band2H')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'band1V')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'band2V')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lastCol')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'firstCol')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lastRow')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'seCell')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'swCell')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'firstRow')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'neCell')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'nwCell')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_TableStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_TableStyleCellStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cell3D'), CT_Cell3D, scope=CT_TableStyleCellStyle))

CT_TableStyleCellStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tcBdr'), CT_TableCellBorderStyle, scope=CT_TableStyleCellStyle, documentation=u'Table Cell Borders'))

CT_TableStyleCellStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef'), CT_StyleMatrixReference, scope=CT_TableStyleCellStyle, documentation=u'Fill Reference'))

CT_TableStyleCellStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fill'), CT_FillProperties, scope=CT_TableStyleCellStyle, documentation=u'Fill'))
CT_TableStyleCellStyle._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableStyleCellStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleCellStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef')), min_occurs=1L, max_occurs=1L)
    )
CT_TableStyleCellStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableStyleCellStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tcBdr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleCellStyle._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableStyleCellStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cell3D')), min_occurs=0L, max_occurs=1L)
    )
CT_TableStyleCellStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_TableStyleCellStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cont'), CT_EffectContainer, scope=CT_EffectContainer, documentation=u'Effect Container'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effect'), CT_EffectReference, scope=CT_EffectContainer, documentation=u'Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOutset'), CT_AlphaOutsetEffect, scope=CT_EffectContainer, documentation=u'Alpha Inset/Outset Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_LuminanceEffect, scope=CT_EffectContainer, documentation=u'Luminance'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstShdw'), CT_PresetShadowEffect, scope=CT_EffectContainer, documentation=u'Preset Shadow'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaFloor'), CT_AlphaFloorEffect, scope=CT_EffectContainer, documentation=u'Alpha Floor Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'relOff'), CT_RelativeOffsetEffect, scope=CT_EffectContainer, documentation=u'Relative Offset Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'softEdge'), CT_SoftEdgesEffect, scope=CT_EffectContainer, documentation=u'Soft Edge Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_TintEffect, scope=CT_EffectContainer))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), CT_TransformEffect, scope=CT_EffectContainer, documentation=u'Transform Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'innerShdw'), CT_InnerShadowEffect, scope=CT_EffectContainer, documentation=u'Inner Shadow Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaRepl'), CT_AlphaReplaceEffect, scope=CT_EffectContainer, documentation=u'Alpha Replace Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blend'), CT_BlendEffect, scope=CT_EffectContainer, documentation=u'Blend Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blur'), CT_BlurEffect, scope=CT_EffectContainer))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'biLevel'), CT_BiLevelEffect, scope=CT_EffectContainer))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrChange'), CT_ColorChangeEffect, scope=CT_EffectContainer, documentation=u'Color Change Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_AlphaModulateEffect, scope=CT_EffectContainer, documentation=u'Alpha Modulate Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrRepl'), CT_ColorReplaceEffect, scope=CT_EffectContainer))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaBiLevel'), CT_AlphaBiLevelEffect, scope=CT_EffectContainer))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'duotone'), CT_DuotoneEffect, scope=CT_EffectContainer, documentation=u'Duotone Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaInv'), CT_AlphaInverseEffect, scope=CT_EffectContainer, documentation=u'Alpha Inverse Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fill'), CT_FillEffect, scope=CT_EffectContainer, documentation=u'Fill'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'reflection'), CT_ReflectionEffect, scope=CT_EffectContainer, documentation=u'Reflection Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay'), CT_FillOverlayEffect, scope=CT_EffectContainer, documentation=u'Fill Overlay Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaModFix'), CT_AlphaModulateFixedEffect, scope=CT_EffectContainer))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'glow'), CT_GlowEffect, scope=CT_EffectContainer, documentation=u'Glow Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaCeiling'), CT_AlphaCeilingEffect, scope=CT_EffectContainer, documentation=u'Alpha Ceiling Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grayscl'), CT_GrayscaleEffect, scope=CT_EffectContainer, documentation=u'Gray Scale Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'outerShdw'), CT_OuterShadowEffect, scope=CT_EffectContainer, documentation=u'Outer Shadow Effect'))

CT_EffectContainer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hsl'), CT_HSLEffect, scope=CT_EffectContainer, documentation=u'Hue Saturation Luminance Effect'))
CT_EffectContainer._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cont')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effect')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaBiLevel')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaCeiling')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaFloor')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaInv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaModFix')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOutset')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaRepl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'biLevel')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blend')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blur')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrChange')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrRepl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'duotone')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillOverlay')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'glow')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grayscl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hsl')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'innerShdw')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'outerShdw')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstShdw')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'reflection')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'relOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'softEdge')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectContainer._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm')), min_occurs=1L, max_occurs=1L)
    )
CT_EffectContainer._ContentModel = pyxb.binding.content.ParticleModel(CT_EffectContainer._GroupModel, min_occurs=0L, max_occurs=None)



CT_QuickTimeFile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_QuickTimeFile))
CT_QuickTimeFile._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_QuickTimeFile._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_QuickTimeFile._ContentModel = pyxb.binding.content.ParticleModel(CT_QuickTimeFile._GroupModel, min_occurs=1, max_occurs=1)



CT_TablePartStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tcStyle'), CT_TableStyleCellStyle, scope=CT_TablePartStyle, documentation=u'Table Cell Style'))

CT_TablePartStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tcTxStyle'), CT_TableStyleTextStyle, scope=CT_TablePartStyle, documentation=u'Table Cell Text Style'))
CT_TablePartStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TablePartStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tcTxStyle')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TablePartStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tcStyle')), min_occurs=0L, max_occurs=1L)
    )
CT_TablePartStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_TablePartStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorMRU._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_ColorMRU, documentation=u'RGB Color Model - Percentage Variant'))

CT_ColorMRU._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_ColorMRU, documentation=u'Preset Color'))

CT_ColorMRU._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_ColorMRU, documentation=u'RGB Color Model - Hex Variant'))

CT_ColorMRU._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_ColorMRU, documentation=u'Scheme Color'))

CT_ColorMRU._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_ColorMRU, documentation=u'System Color'))

CT_ColorMRU._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_ColorMRU, documentation=u'Hue, Saturation, Luminance Color Model'))
CT_ColorMRU._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ColorMRU._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorMRU._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorMRU._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorMRU._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorMRU._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorMRU._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_ColorMRU._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorMRU._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_ColorMRU._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorMRU._GroupModel, min_occurs=1, max_occurs=1)



CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'choose'), CT_Choose, scope=CT_Otherwise, documentation=u'Choose Element'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Otherwise, documentation=u'Extension List'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), CT_Constraints, scope=CT_Otherwise, documentation=u'Constraint List'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), CT_Rules, scope=CT_Otherwise, documentation=u'Rule List'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), CT_PresentationOf, scope=CT_Otherwise, documentation=u'Presentation Of'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), CT_ForEach, scope=CT_Otherwise, documentation=u'For Each'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'alg'), CT_Algorithm, scope=CT_Otherwise, documentation=u'Algorithm'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), CT_LayoutNode, scope=CT_Otherwise, documentation=u'Layout Node'))

CT_Otherwise._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'shape'), CT_Shape, scope=CT_Otherwise, documentation=u'Shape'))
CT_Otherwise._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'alg')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'shape')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'presOf')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'constrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'forEach')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'choose')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Otherwise._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Otherwise._ContentModel = pyxb.binding.content.ParticleModel(CT_Otherwise._GroupModel, min_occurs=0L, max_occurs=None)



CT_PathShadeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillToRect'), CT_RelativeRect, scope=CT_PathShadeProperties, documentation=u'Fill To Rectangle'))
CT_PathShadeProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PathShadeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillToRect')), min_occurs=0L, max_occurs=1L)
    )
CT_PathShadeProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_PathShadeProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_DataModel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_DataModel))

CT_DataModel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'ptLst'), CT_PtList, scope=CT_DataModel, documentation=u'Point List'))

CT_DataModel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'cxnLst'), CT_CxnList, scope=CT_DataModel, documentation=u'Connection List'))

CT_DataModel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'whole'), CT_WholeE2oFormatting, scope=CT_DataModel, documentation=u'Whole E2O Formatting'))

CT_DataModel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'bg'), CT_BackgroundFormatting, scope=CT_DataModel, documentation=u'Background Formatting'))
CT_DataModel._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DataModel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'ptLst')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DataModel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'cxnLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DataModel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'bg')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DataModel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'whole')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DataModel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_DataModel._ContentModel = pyxb.binding.content.ParticleModel(CT_DataModel._GroupModel, min_occurs=1, max_occurs=1)



CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), CT_PresentationOf, scope=CT_ForEach, documentation=u'Presentation Of'))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ForEach))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), CT_Constraints, scope=CT_ForEach, documentation=u'Constraint List'))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'choose'), CT_Choose, scope=CT_ForEach, documentation=u'Choose Element'))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), CT_Rules, scope=CT_ForEach, documentation=u'Rule List'))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'alg'), CT_Algorithm, scope=CT_ForEach, documentation=u'Algorithm'))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), CT_LayoutNode, scope=CT_ForEach, documentation=u'Layout Node'))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), CT_ForEach, scope=CT_ForEach, documentation=u'For Each'))

CT_ForEach._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'shape'), CT_Shape, scope=CT_ForEach, documentation=u'Shape'))
CT_ForEach._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'alg')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'shape')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'presOf')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'constrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'forEach')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'choose')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ForEach._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ForEach._ContentModel = pyxb.binding.content.ParticleModel(CT_ForEach._GroupModel, min_occurs=0L, max_occurs=None)



CT_FontReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_FontReference, documentation=u'RGB Color Model - Hex Variant'))

CT_FontReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_FontReference, documentation=u'Scheme Color'))

CT_FontReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_FontReference, documentation=u'Preset Color'))

CT_FontReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_FontReference, documentation=u'RGB Color Model - Percentage Variant'))

CT_FontReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_FontReference, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_FontReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_FontReference, documentation=u'System Color'))
CT_FontReference._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FontReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_FontReference._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FontReference._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_FontReference._ContentModel = pyxb.binding.content.ParticleModel(CT_FontReference._GroupModel, min_occurs=1, max_occurs=1)



CT_GroupTransform2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'chExt'), CT_PositiveSize2D, scope=CT_GroupTransform2D, documentation=u'Child Extents'))

CT_GroupTransform2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'off'), CT_Point2D, scope=CT_GroupTransform2D, documentation=u'Offset'))

CT_GroupTransform2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'chOff'), CT_Point2D, scope=CT_GroupTransform2D, documentation=u'Child Offset'))

CT_GroupTransform2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ext'), CT_PositiveSize2D, scope=CT_GroupTransform2D, documentation=u'Extents'))
CT_GroupTransform2D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GroupTransform2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'off')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupTransform2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ext')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupTransform2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'chOff')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupTransform2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'chExt')), min_occurs=0L, max_occurs=1L)
    )
CT_GroupTransform2D._ContentModel = pyxb.binding.content.ParticleModel(CT_GroupTransform2D._GroupModel, min_occurs=1, max_occurs=1)



CT_PictureLocking._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_PictureLocking))
CT_PictureLocking._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PictureLocking._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_PictureLocking._ContentModel = pyxb.binding.content.ParticleModel(CT_PictureLocking._GroupModel, min_occurs=1, max_occurs=1)



CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sat'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Saturation'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Saturation Modulation'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma'), CT_GammaTransform, scope=CT_SchemeColor, documentation=u'Gamma'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Saturation Offset'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lum'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Luminance'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Green Modification'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Luminance Offset'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Luminance Modulation'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'red'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Red'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Red Offset'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Red Modulation'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blue'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Blue'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'green'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Green'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Green Offset'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'shade'), CT_PositiveFixedPercentage, scope=CT_SchemeColor, documentation=u'Shade'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'comp'), CT_ComplementTransform, scope=CT_SchemeColor, documentation=u'Complement'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'inv'), CT_InverseTransform, scope=CT_SchemeColor, documentation=u'Inverse'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff'), CT_FixedPercentage, scope=CT_SchemeColor, documentation=u'Alpha Offset'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Blue Offset'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gray'), CT_GrayscaleTransform, scope=CT_SchemeColor, documentation=u'Gray'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha'), CT_PositiveFixedPercentage, scope=CT_SchemeColor, documentation=u'Alpha'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma'), CT_InverseGammaTransform, scope=CT_SchemeColor, documentation=u'Inverse Gamma'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tint'), CT_PositiveFixedPercentage, scope=CT_SchemeColor, documentation=u'Tint'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod'), CT_PositivePercentage, scope=CT_SchemeColor, documentation=u'Alpha Modulation'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hue'), CT_PositiveFixedAngle, scope=CT_SchemeColor, documentation=u'Hue'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod'), CT_Percentage, scope=CT_SchemeColor, documentation=u'Blue Modification'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff'), CT_Angle, scope=CT_SchemeColor, documentation=u'Hue Offset'))

CT_SchemeColor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod'), CT_PositivePercentage, scope=CT_SchemeColor, documentation=u'Hue Modulate'))
CT_SchemeColor._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tint')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'shade')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'comp')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'inv')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gray')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alpha')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'alphaMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sat')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'satMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lum')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lumMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'red')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'redMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'green')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'greenMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blue')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueOff')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blueMod')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gamma')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SchemeColor._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'invGamma')), min_occurs=1L, max_occurs=1L)
    )
CT_SchemeColor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SchemeColor._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_SchemeColor._ContentModel = pyxb.binding.content.ParticleModel(CT_SchemeColor._GroupModel, min_occurs=1, max_occurs=1)



CT_NonVisualGraphicFrameProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_NonVisualGraphicFrameProperties))

CT_NonVisualGraphicFrameProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicFrameLocks'), CT_GraphicalObjectFrameLocking, scope=CT_NonVisualGraphicFrameProperties, documentation=u'Graphic Frame Locks'))
CT_NonVisualGraphicFrameProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NonVisualGraphicFrameProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'graphicFrameLocks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualGraphicFrameProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NonVisualGraphicFrameProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_NonVisualGraphicFrameProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_Shape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Shape))

CT_Shape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'adjLst'), CT_AdjLst, scope=CT_Shape, documentation=u'Shape Adjust List'))
CT_Shape._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Shape._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'adjLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Shape._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Shape._ContentModel = pyxb.binding.content.ParticleModel(CT_Shape._GroupModel, min_occurs=1, max_occurs=1)



CT_ConnectorLocking._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ConnectorLocking))
CT_ConnectorLocking._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ConnectorLocking._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ConnectorLocking._ContentModel = pyxb.binding.content.ParticleModel(CT_ConnectorLocking._GroupModel, min_occurs=1, max_occurs=1)



CT_TextParagraph._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'endParaRPr'), CT_TextCharacterProperties, scope=CT_TextParagraph, documentation=u'End Paragraph Run Properties'))

CT_TextParagraph._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pPr'), CT_TextParagraphProperties, scope=CT_TextParagraph, documentation=u'Text Paragraph Properties'))

CT_TextParagraph._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fld'), CT_TextField, scope=CT_TextParagraph, documentation=u'Text Field'))

CT_TextParagraph._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'br'), CT_TextLineBreak, scope=CT_TextParagraph, documentation=u'Text Line Break'))

CT_TextParagraph._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'r'), CT_RegularTextRun, scope=CT_TextParagraph, documentation=u'Text Run'))
CT_TextParagraph._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextParagraph._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'r')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraph._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextParagraph._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fld')), min_occurs=1, max_occurs=1)
    )
CT_TextParagraph._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextParagraph._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextParagraph._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_TextParagraph._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'endParaRPr')), min_occurs=0L, max_occurs=1L)
    )
CT_TextParagraph._ContentModel = pyxb.binding.content.ParticleModel(CT_TextParagraph._GroupModel, min_occurs=1, max_occurs=1)



CT_Constraint._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Constraint))
CT_Constraint._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Constraint._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Constraint._ContentModel = pyxb.binding.content.ParticleModel(CT_Constraint._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'accent3'), CT_Color, scope=CT_ColorScheme, documentation=u'Accent 3'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'accent1'), CT_Color, scope=CT_ColorScheme, documentation=u'Accent 1'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hlink'), CT_Color, scope=CT_ColorScheme, documentation=u'Hyperlink'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'accent2'), CT_Color, scope=CT_ColorScheme, documentation=u'Accent 2'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'dk1'), CT_Color, scope=CT_ColorScheme, documentation=u'Dark 1'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'folHlink'), CT_Color, scope=CT_ColorScheme, documentation=u'Followed Hyperlink'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'accent6'), CT_Color, scope=CT_ColorScheme, documentation=u'Accent 6'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lt1'), CT_Color, scope=CT_ColorScheme, documentation=u'Light 1'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ColorScheme))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'accent4'), CT_Color, scope=CT_ColorScheme, documentation=u'Accent 4'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'dk2'), CT_Color, scope=CT_ColorScheme, documentation=u'Dark 2'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'accent5'), CT_Color, scope=CT_ColorScheme, documentation=u'Accent 5'))

CT_ColorScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lt2'), CT_Color, scope=CT_ColorScheme, documentation=u'Light 2'))
CT_ColorScheme._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'dk1')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lt1')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'dk2')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lt2')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'accent1')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'accent2')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'accent3')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'accent4')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'accent5')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'accent6')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hlink')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'folHlink')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ColorScheme._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorScheme._GroupModel, min_occurs=1, max_occurs=1)



CT_ElemPropSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'style'), CT_ShapeStyle, scope=CT_ElemPropSet, documentation=u'Shape Style'))

CT_ElemPropSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'presLayoutVars'), CT_LayoutVariablePropertySet, scope=CT_ElemPropSet, documentation=u'Presentation Layout Variables'))
CT_ElemPropSet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ElemPropSet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'presLayoutVars')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ElemPropSet._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'style')), min_occurs=0L, max_occurs=1L)
    )
CT_ElemPropSet._ContentModel = pyxb.binding.content.ParticleModel(CT_ElemPropSet._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlPictureNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPicPr'), CT_NonVisualPictureProperties, scope=CT_GvmlPictureNonVisual, documentation=u'Non-Visual Picture Drawing Properties'))

CT_GvmlPictureNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), CT_NonVisualDrawingProps, scope=CT_GvmlPictureNonVisual))
CT_GvmlPictureNonVisual._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlPictureNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlPictureNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPicPr')), min_occurs=1L, max_occurs=1L)
    )
CT_GvmlPictureNonVisual._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlPictureNonVisual._GroupModel, min_occurs=1, max_occurs=1)



CT_NonVisualDrawingShapeProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_NonVisualDrawingShapeProps))

CT_NonVisualDrawingShapeProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spLocks'), CT_ShapeLocking, scope=CT_NonVisualDrawingShapeProps, documentation=u'Shape Locks'))
CT_NonVisualDrawingShapeProps._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NonVisualDrawingShapeProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spLocks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualDrawingShapeProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NonVisualDrawingShapeProps._ContentModel = pyxb.binding.content.ParticleModel(CT_NonVisualDrawingShapeProps._GroupModel, min_occurs=1, max_occurs=1)



CT_GeomGuideList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gd'), CT_GeomGuide, scope=CT_GeomGuideList, documentation=u'Shape Guide'))
CT_GeomGuideList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GeomGuideList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gd')), min_occurs=0L, max_occurs=None)
    )
CT_GeomGuideList._ContentModel = pyxb.binding.content.ParticleModel(CT_GeomGuideList._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorTransformHeaderLst._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'colorsDefHdr'), CT_ColorTransformHeader, scope=CT_ColorTransformHeaderLst, documentation=u'Color Transform Definition Header'))
CT_ColorTransformHeaderLst._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorTransformHeaderLst._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'colorsDefHdr')), min_occurs=0L, max_occurs=None)
    )
CT_ColorTransformHeaderLst._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorTransformHeaderLst._GroupModel, min_occurs=1, max_occurs=1)



CT_CTStyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'linClrLst'), CT_Colors, scope=CT_CTStyleLabel, documentation=u'Line Color List'))

CT_CTStyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_CTStyleLabel))

CT_CTStyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'effectClrLst'), CT_Colors, scope=CT_CTStyleLabel, documentation=u'Effect Color List'))

CT_CTStyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'txFillClrLst'), CT_Colors, scope=CT_CTStyleLabel, documentation=u'Text Fill Color List'))

CT_CTStyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'txLinClrLst'), CT_Colors, scope=CT_CTStyleLabel, documentation=u'Text Line Color List'))

CT_CTStyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'fillClrLst'), CT_Colors, scope=CT_CTStyleLabel, documentation=u'Fill Color List'))

CT_CTStyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'txEffectClrLst'), CT_Colors, scope=CT_CTStyleLabel, documentation=u'Text Effect Color List'))
CT_CTStyleLabel._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CTStyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'fillClrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CTStyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'linClrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CTStyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'effectClrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CTStyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'txLinClrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CTStyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'txFillClrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CTStyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'txEffectClrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CTStyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_CTStyleLabel._ContentModel = pyxb.binding.content.ParticleModel(CT_CTStyleLabel._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorMapping._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ColorMapping))
CT_ColorMapping._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorMapping._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ColorMapping._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorMapping._GroupModel, min_occurs=1, max_occurs=1)



CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_GroupShapeProperties))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), CT_GroupTransform2D, scope=CT_GroupShapeProperties, documentation=u'2D Transform for Grouped Objects'))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), CT_Scene3D, scope=CT_GroupShapeProperties))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_GroupShapeProperties, documentation=u'Effect Container'))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_GroupShapeProperties))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_GroupShapeProperties, documentation=u'Group Fill'))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_GroupShapeProperties, documentation=u'Pattern Fill'))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GroupShapeProperties))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_GroupShapeProperties))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_GroupShapeProperties))

CT_GroupShapeProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_GroupShapeProperties, documentation=u'Effect Container'))
CT_GroupShapeProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_GroupShapeProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_GroupShapeProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GroupShapeProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_GroupShapeProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_Path2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'close'), CT_Path2DClose, scope=CT_Path2D, documentation=u'Close Shape Path'))

CT_Path2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cubicBezTo'), CT_Path2DCubicBezierTo, scope=CT_Path2D, documentation=u'Draw Cubic Bezier Curve To'))

CT_Path2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'moveTo'), CT_Path2DMoveTo, scope=CT_Path2D, documentation=u'Move Path To'))

CT_Path2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'quadBezTo'), CT_Path2DQuadBezierTo, scope=CT_Path2D, documentation=u'Draw Quadratic Bezier Curve To'))

CT_Path2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnTo'), CT_Path2DLineTo, scope=CT_Path2D, documentation=u'Draw Line To'))

CT_Path2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'arcTo'), CT_Path2DArcTo, scope=CT_Path2D, documentation=u'Draw Arc To'))
CT_Path2D._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Path2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'close')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Path2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'moveTo')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Path2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnTo')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Path2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'arcTo')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Path2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'quadBezTo')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Path2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cubicBezTo')), min_occurs=1L, max_occurs=1L)
    )
CT_Path2D._ContentModel = pyxb.binding.content.ParticleModel(CT_Path2D._GroupModel, min_occurs=0L, max_occurs=None)



CT_GvmlShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GvmlShape))

CT_GvmlShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'nvSpPr'), CT_GvmlShapeNonVisual, scope=CT_GvmlShape, documentation=u'Non-Visual Properties for a Shape'))

CT_GvmlShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), CT_ShapeProperties, scope=CT_GvmlShape, documentation=u'Visual Properties'))

CT_GvmlShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'txSp'), CT_GvmlTextShape, scope=CT_GvmlShape, documentation=u'Text Shape'))

CT_GvmlShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), CT_ShapeStyle, scope=CT_GvmlShape, documentation=u'Style'))
CT_GvmlShape._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'nvSpPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'txSp')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'style')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GvmlShape._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlShape._GroupModel, min_occurs=1, max_occurs=1)



CT_DefaultShapeDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_DefaultShapeDefinition))

CT_DefaultShapeDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), CT_ShapeProperties, scope=CT_DefaultShapeDefinition, documentation=u'Visual Properties'))

CT_DefaultShapeDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), CT_ShapeStyle, scope=CT_DefaultShapeDefinition))

CT_DefaultShapeDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bodyPr'), CT_TextBodyProperties, scope=CT_DefaultShapeDefinition))

CT_DefaultShapeDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lstStyle'), CT_TextListStyle, scope=CT_DefaultShapeDefinition))
CT_DefaultShapeDefinition._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DefaultShapeDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DefaultShapeDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bodyPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DefaultShapeDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lstStyle')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DefaultShapeDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'style')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DefaultShapeDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_DefaultShapeDefinition._ContentModel = pyxb.binding.content.ParticleModel(CT_DefaultShapeDefinition._GroupModel, min_occurs=1, max_occurs=1)



CT_FontCollection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_FontCollection))

CT_FontCollection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'latin'), CT_TextFont, scope=CT_FontCollection, documentation=u'Latin Font'))

CT_FontCollection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'font'), CT_SupplementalFont, scope=CT_FontCollection, documentation=u'Font'))

CT_FontCollection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cs'), CT_TextFont, scope=CT_FontCollection, documentation=u'Complex Script Font'))

CT_FontCollection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ea'), CT_TextFont, scope=CT_FontCollection, documentation=u'East Asian Font'))
CT_FontCollection._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FontCollection._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'latin')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontCollection._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ea')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontCollection._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cs')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontCollection._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'font')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_FontCollection._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_FontCollection._ContentModel = pyxb.binding.content.ParticleModel(CT_FontCollection._GroupModel, min_occurs=1, max_occurs=1)



CT_PresetGeometry2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst'), CT_GeomGuideList, scope=CT_PresetGeometry2D, documentation=u'List of Shape Adjust Values'))
CT_PresetGeometry2D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PresetGeometry2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst')), min_occurs=0L, max_occurs=1L)
    )
CT_PresetGeometry2D._ContentModel = pyxb.binding.content.ParticleModel(CT_PresetGeometry2D._GroupModel, min_occurs=1, max_occurs=1)



CT_FillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_FillProperties))

CT_FillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_FillProperties))

CT_FillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_FillProperties, documentation=u'Pattern Fill'))

CT_FillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_FillProperties, documentation=u'Group Fill'))

CT_FillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_FillProperties))

CT_FillProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_FillProperties))
CT_FillProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_FillProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FillProperties._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_FillProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_FillProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_PresentationOf._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_PresentationOf))
CT_PresentationOf._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PresentationOf._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_PresentationOf._ContentModel = pyxb.binding.content.ParticleModel(CT_PresentationOf._GroupModel, min_occurs=1, max_occurs=1)



CT_GradientStopList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gs'), CT_GradientStop, scope=CT_GradientStopList, documentation=u'Gradient stops'))
CT_GradientStopList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GradientStopList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gs')), min_occurs=2L, max_occurs=None)
    )
CT_GradientStopList._ContentModel = pyxb.binding.content.ParticleModel(CT_GradientStopList._GroupModel, min_occurs=1, max_occurs=1)



CT_TextUnderlineFillGroupWrapper._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_TextUnderlineFillGroupWrapper))

CT_TextUnderlineFillGroupWrapper._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_TextUnderlineFillGroupWrapper))

CT_TextUnderlineFillGroupWrapper._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_TextUnderlineFillGroupWrapper, documentation=u'Pattern Fill'))

CT_TextUnderlineFillGroupWrapper._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_TextUnderlineFillGroupWrapper, documentation=u'Group Fill'))

CT_TextUnderlineFillGroupWrapper._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_TextUnderlineFillGroupWrapper))

CT_TextUnderlineFillGroupWrapper._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_TextUnderlineFillGroupWrapper))
CT_TextUnderlineFillGroupWrapper._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextUnderlineFillGroupWrapper._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextUnderlineFillGroupWrapper._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextUnderlineFillGroupWrapper._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextUnderlineFillGroupWrapper._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextUnderlineFillGroupWrapper._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextUnderlineFillGroupWrapper._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_TextUnderlineFillGroupWrapper._ContentModel = pyxb.binding.content.ParticleModel(CT_TextUnderlineFillGroupWrapper._GroupModel, min_occurs=1L, max_occurs=1L)



CT_AudioCD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_AudioCD))

CT_AudioCD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'st'), CT_AudioCDTime, scope=CT_AudioCD, documentation=u'Audio Start Time'))

CT_AudioCD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'end'), CT_AudioCDTime, scope=CT_AudioCD, documentation=u'Audio End Time'))
CT_AudioCD._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AudioCD._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'st')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AudioCD._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'end')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AudioCD._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_AudioCD._ContentModel = pyxb.binding.content.ParticleModel(CT_AudioCD._GroupModel, min_occurs=1, max_occurs=1)



CT_EffectStyleItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), CT_Shape3D, scope=CT_EffectStyleItem, documentation=u'3D properties'))

CT_EffectStyleItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_EffectStyleItem, documentation=u'Effect Container'))

CT_EffectStyleItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_EffectStyleItem, documentation=u'Effect Container'))

CT_EffectStyleItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), CT_Scene3D, scope=CT_EffectStyleItem, documentation=u'3D Scene Properties'))
CT_EffectStyleItem._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_EffectStyleItem._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectStyleItem._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_EffectStyleItem._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EffectStyleItem._GroupModel_, min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectStyleItem._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectStyleItem._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d')), min_occurs=0L, max_occurs=1L)
    )
CT_EffectStyleItem._ContentModel = pyxb.binding.content.ParticleModel(CT_EffectStyleItem._GroupModel, min_occurs=1, max_occurs=1)



CT_ShapeStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fontRef'), CT_FontReference, scope=CT_ShapeStyle, documentation=u'Font Reference'))

CT_ShapeStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnRef'), CT_StyleMatrixReference, scope=CT_ShapeStyle))

CT_ShapeStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef'), CT_StyleMatrixReference, scope=CT_ShapeStyle))

CT_ShapeStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectRef'), CT_StyleMatrixReference, scope=CT_ShapeStyle))
CT_ShapeStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ShapeStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnRef')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectRef')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ShapeStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fontRef')), min_occurs=1L, max_occurs=1L)
    )
CT_ShapeStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_ShapeStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_Algorithm._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Algorithm))

CT_Algorithm._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'param'), CT_Parameter, scope=CT_Algorithm, documentation=u'Parameter'))
CT_Algorithm._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Algorithm._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'param')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Algorithm._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Algorithm._ContentModel = pyxb.binding.content.ParticleModel(CT_Algorithm._GroupModel, min_occurs=1, max_occurs=1)



CT_ConnectionSiteList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cxn'), CT_ConnectionSite, scope=CT_ConnectionSiteList, documentation=u'Shape Connection Site'))
CT_ConnectionSiteList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ConnectionSiteList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cxn')), min_occurs=0L, max_occurs=None)
    )
CT_ConnectionSiteList._ContentModel = pyxb.binding.content.ParticleModel(CT_ConnectionSiteList._GroupModel, min_occurs=1, max_occurs=1)



CT_GlowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_GlowEffect, documentation=u'RGB Color Model - Hex Variant'))

CT_GlowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_GlowEffect, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_GlowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_GlowEffect, documentation=u'RGB Color Model - Percentage Variant'))

CT_GlowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_GlowEffect, documentation=u'Scheme Color'))

CT_GlowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_GlowEffect, documentation=u'System Color'))

CT_GlowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_GlowEffect, documentation=u'Preset Color'))
CT_GlowEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GlowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GlowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GlowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GlowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GlowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GlowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_GlowEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GlowEffect._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_GlowEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_GlowEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_ClipboardStyleSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrMap'), CT_ColorMapping, scope=CT_ClipboardStyleSheet, documentation=u'Color Map'))

CT_ClipboardStyleSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'themeElements'), CT_BaseStyles, scope=CT_ClipboardStyleSheet))
CT_ClipboardStyleSheet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ClipboardStyleSheet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'themeElements')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ClipboardStyleSheet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrMap')), min_occurs=1L, max_occurs=1L)
    )
CT_ClipboardStyleSheet._ContentModel = pyxb.binding.content.ParticleModel(CT_ClipboardStyleSheet._GroupModel, min_occurs=1, max_occurs=1)



CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'uLnTx'), CT_TextUnderlineLineFollowText, scope=CT_TextCharacterProperties, documentation=u'Underline Follows Text'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'rtl'), CT_Boolean, scope=CT_TextCharacterProperties, documentation=u'Right to Left Run'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'uLn'), CT_LineProperties, scope=CT_TextCharacterProperties, documentation=u'Underline Stroke'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_TextCharacterProperties))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'uFillTx'), CT_TextUnderlineFillFollowText, scope=CT_TextCharacterProperties, documentation=u'Underline Fill Properties Follow Text'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'uFill'), CT_TextUnderlineFillGroupWrapper, scope=CT_TextCharacterProperties, documentation=u'Underline Fill'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), CT_LineProperties, scope=CT_TextCharacterProperties, documentation=u'Line'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'highlight'), CT_Color, scope=CT_TextCharacterProperties, documentation=u'Highlight Color'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'latin'), CT_TextFont, scope=CT_TextCharacterProperties, documentation=u'Latin Font'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkMouseOver'), CT_Hyperlink, scope=CT_TextCharacterProperties, documentation=u'Mouse-Over Hyperlink'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ea'), CT_TextFont, scope=CT_TextCharacterProperties, documentation=u'East Asian Font'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cs'), CT_TextFont, scope=CT_TextCharacterProperties, documentation=u'Complex Script Font'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_TextCharacterProperties, documentation=u'Effect Container'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_TextCharacterProperties))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_TextCharacterProperties))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sym'), CT_TextFont, scope=CT_TextCharacterProperties, documentation=u'Symbol Font'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_TextCharacterProperties))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_TextCharacterProperties, documentation=u'Pattern Fill'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_TextCharacterProperties, documentation=u'Group Fill'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TextCharacterProperties))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_TextCharacterProperties, documentation=u'Effect Container'))

CT_TextCharacterProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkClick'), CT_Hyperlink, scope=CT_TextCharacterProperties, documentation=u'Click Hyperlink'))
CT_TextCharacterProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_TextCharacterProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_TextCharacterProperties._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'uLnTx')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'uLn')), min_occurs=0L, max_occurs=1L)
    )
CT_TextCharacterProperties._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'uFillTx')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'uFill')), min_occurs=1, max_occurs=1)
    )
CT_TextCharacterProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ln')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'highlight')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._GroupModel_3, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._GroupModel_4, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'latin')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ea')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cs')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sym')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkClick')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hlinkMouseOver')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'rtl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TextCharacterProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_TextCharacterProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlTextShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GvmlTextShape))

CT_GvmlTextShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'txBody'), CT_TextBody, scope=CT_GvmlTextShape, documentation=u'Shape Text Body'))

CT_GvmlTextShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), CT_Transform2D, scope=CT_GvmlTextShape))

CT_GvmlTextShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'useSpRect'), CT_GvmlUseShapeRectangle, scope=CT_GvmlTextShape, documentation=u'Use Shape Text Rectangle'))
CT_GvmlTextShape._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GvmlTextShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'useSpRect')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlTextShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm')), min_occurs=1L, max_occurs=1L)
    )
CT_GvmlTextShape._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlTextShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'txBody')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlTextShape._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GvmlTextShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GvmlTextShape._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlTextShape._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlGroupShapeNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvGrpSpPr'), CT_NonVisualGroupDrawingShapeProps, scope=CT_GvmlGroupShapeNonVisual, documentation=u'Non-Visual Group Shape Drawing Properties'))

CT_GvmlGroupShapeNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), CT_NonVisualDrawingProps, scope=CT_GvmlGroupShapeNonVisual))
CT_GvmlGroupShapeNonVisual._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShapeNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlGroupShapeNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvGrpSpPr')), min_occurs=1L, max_occurs=1L)
    )
CT_GvmlGroupShapeNonVisual._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlGroupShapeNonVisual._GroupModel, min_occurs=1, max_occurs=1)



CT_StyleDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_StyleDefinitionHeader))

CT_StyleDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'title'), CT_SDName, scope=CT_StyleDefinitionHeader, documentation=u'Title'))

CT_StyleDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), CT_SDCategories, scope=CT_StyleDefinitionHeader, documentation=u'Category List'))

CT_StyleDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'desc'), CT_SDDescription, scope=CT_StyleDefinitionHeader, documentation=u'Style Label Description'))
CT_StyleDefinitionHeader._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_StyleDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'title')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_StyleDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'desc')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_StyleDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'catLst')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_StyleDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_StyleDefinitionHeader._ContentModel = pyxb.binding.content.ParticleModel(CT_StyleDefinitionHeader._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorSchemeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extraClrScheme'), CT_ColorSchemeAndMapping, scope=CT_ColorSchemeList, documentation=u'Extra Color Scheme'))
CT_ColorSchemeList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorSchemeList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extraClrScheme')), min_occurs=0L, max_occurs=None)
    )
CT_ColorSchemeList._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorSchemeList._GroupModel, min_occurs=1, max_occurs=1)



CT_DiagramDefinitionHeaderLst._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutDefHdr'), CT_DiagramDefinitionHeader, scope=CT_DiagramDefinitionHeaderLst, documentation=u'Layout Definition Header'))
CT_DiagramDefinitionHeaderLst._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DiagramDefinitionHeaderLst._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'layoutDefHdr')), min_occurs=0L, max_occurs=None)
    )
CT_DiagramDefinitionHeaderLst._ContentModel = pyxb.binding.content.ParticleModel(CT_DiagramDefinitionHeaderLst._GroupModel, min_occurs=1, max_occurs=1)



CT_TableCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableCell))

CT_TableCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'txBody'), CT_TextBody, scope=CT_TableCell, documentation=u'Text Body'))

CT_TableCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tcPr'), CT_TableCellProperties, scope=CT_TableCell, documentation=u'Table Cell Properties'))
CT_TableCell._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'txBody')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tcPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableCell._ContentModel = pyxb.binding.content.ParticleModel(CT_TableCell._GroupModel, min_occurs=1, max_occurs=1)



CT_Rules._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'rule'), CT_NumericRule, scope=CT_Rules, documentation=u'Rule'))
CT_Rules._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Rules._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'rule')), min_occurs=0L, max_occurs=None)
    )
CT_Rules._ContentModel = pyxb.binding.content.ParticleModel(CT_Rules._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorMappingOverride._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'masterClrMapping'), CT_EmptyElement, scope=CT_ColorMappingOverride, documentation=u'Master Color Mapping'))

CT_ColorMappingOverride._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'overrideClrMapping'), CT_ColorMapping, scope=CT_ColorMappingOverride, documentation=u'Override Color Mapping'))
CT_ColorMappingOverride._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ColorMappingOverride._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'masterClrMapping')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ColorMappingOverride._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'overrideClrMapping')), min_occurs=1, max_occurs=1)
    )
CT_ColorMappingOverride._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorMappingOverride._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_ColorMappingOverride._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorMappingOverride._GroupModel, min_occurs=1, max_occurs=1)



CT_TextProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), CT_Shape3D, scope=CT_TextProps, documentation=u'Apply 3D shape properties'))

CT_TextProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'flatTx'), CT_FlatText, scope=CT_TextProps, documentation=u'No text in 3D scene'))
CT_TextProps._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'flatTx')), min_occurs=1L, max_occurs=1L)
    )
CT_TextProps._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextProps._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_TextProps._ContentModel = pyxb.binding.content.ParticleModel(CT_TextProps._GroupModel, min_occurs=1, max_occurs=1)



CT_TextLineBreak._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr'), CT_TextCharacterProperties, scope=CT_TextLineBreak, documentation=u'Text Run Properties'))
CT_TextLineBreak._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextLineBreak._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr')), min_occurs=0L, max_occurs=1L)
    )
CT_TextLineBreak._ContentModel = pyxb.binding.content.ParticleModel(CT_TextLineBreak._GroupModel, min_occurs=1, max_occurs=1)



CT_BlendEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cont'), CT_EffectContainer, scope=CT_BlendEffect, documentation=u'Effect to blend'))
CT_BlendEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BlendEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cont')), min_occurs=1L, max_occurs=1L)
    )
CT_BlendEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_BlendEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_LineStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), CT_LineProperties, scope=CT_LineStyleList))
CT_LineStyleList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_LineStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ln')), min_occurs=3L, max_occurs=None)
    )
CT_LineStyleList._ContentModel = pyxb.binding.content.ParticleModel(CT_LineStyleList._GroupModel, min_occurs=1, max_occurs=1)



CT_VideoFile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_VideoFile))
CT_VideoFile._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_VideoFile._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_VideoFile._ContentModel = pyxb.binding.content.ParticleModel(CT_VideoFile._GroupModel, min_occurs=1, max_occurs=1)



CT_Camera._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'rot'), CT_SphereCoords, scope=CT_Camera, documentation=u'Rotation'))
CT_Camera._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Camera._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'rot')), min_occurs=0L, max_occurs=1L)
    )
CT_Camera._ContentModel = pyxb.binding.content.ParticleModel(CT_Camera._GroupModel, min_occurs=1, max_occurs=1)



CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'constrLst'), CT_Constraints, scope=CT_When, documentation=u'Constraint List'))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_When))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst'), CT_Rules, scope=CT_When, documentation=u'Rule List'))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'choose'), CT_Choose, scope=CT_When, documentation=u'Choose Element'))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'alg'), CT_Algorithm, scope=CT_When, documentation=u'Algorithm'))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode'), CT_LayoutNode, scope=CT_When, documentation=u'Layout Node'))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'forEach'), CT_ForEach, scope=CT_When, documentation=u'For Each'))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'presOf'), CT_PresentationOf, scope=CT_When, documentation=u'Presentation Of'))

CT_When._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'shape'), CT_Shape, scope=CT_When, documentation=u'Shape'))
CT_When._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'alg')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'shape')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'presOf')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'constrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'ruleLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'forEach')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'layoutNode')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'choose')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_When._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_When._ContentModel = pyxb.binding.content.ParticleModel(CT_When._GroupModel, min_occurs=0L, max_occurs=None)



CT_XYAdjustHandle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pos'), CT_AdjPoint2D, scope=CT_XYAdjustHandle, documentation=u'Position'))
CT_XYAdjustHandle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_XYAdjustHandle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pos')), min_occurs=1L, max_occurs=1L)
    )
CT_XYAdjustHandle._ContentModel = pyxb.binding.content.ParticleModel(CT_XYAdjustHandle._GroupModel, min_occurs=1, max_occurs=1)



CT_EffectProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_EffectProperties, documentation=u'Effect Container'))

CT_EffectProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_EffectProperties, documentation=u'Effect Container'))
CT_EffectProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_EffectProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_EffectProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_EffectProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EffectProperties._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_EffectProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_EffectProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_NonVisualConnectorProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_NonVisualConnectorProperties))

CT_NonVisualConnectorProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnSpLocks'), CT_ConnectorLocking, scope=CT_NonVisualConnectorProperties, documentation=u'Connection Shape Locks'))

CT_NonVisualConnectorProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'endCxn'), CT_Connection, scope=CT_NonVisualConnectorProperties, documentation=u'Connection End'))

CT_NonVisualConnectorProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'stCxn'), CT_Connection, scope=CT_NonVisualConnectorProperties, documentation=u'Connection Start'))
CT_NonVisualConnectorProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NonVisualConnectorProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cxnSpLocks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualConnectorProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'stCxn')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualConnectorProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'endCxn')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_NonVisualConnectorProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NonVisualConnectorProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_NonVisualConnectorProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_StretchInfoProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRect'), CT_RelativeRect, scope=CT_StretchInfoProperties, documentation=u'Fill Rectangle'))
CT_StretchInfoProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_StretchInfoProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRect')), min_occurs=0L, max_occurs=1L)
    )
CT_StretchInfoProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_StretchInfoProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_Path2DLineTo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), CT_AdjPoint2D, scope=CT_Path2DLineTo, documentation=u'Line end point'))
CT_Path2DLineTo._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Path2DLineTo._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pt')), min_occurs=1L, max_occurs=1L)
    )
CT_Path2DLineTo._ContentModel = pyxb.binding.content.ParticleModel(CT_Path2DLineTo._GroupModel, min_occurs=1, max_occurs=1)



CT_DiagramDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_DiagramDefinitionHeader))

CT_DiagramDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'title'), CT_Name, scope=CT_DiagramDefinitionHeader, documentation=u'Title'))

CT_DiagramDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), CT_Categories, scope=CT_DiagramDefinitionHeader, documentation=u'Category List'))

CT_DiagramDefinitionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'desc'), CT_Description, scope=CT_DiagramDefinitionHeader, documentation=u'Description'))
CT_DiagramDefinitionHeader._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DiagramDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'title')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'desc')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'catLst')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DiagramDefinitionHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_DiagramDefinitionHeader._ContentModel = pyxb.binding.content.ParticleModel(CT_DiagramDefinitionHeader._GroupModel, min_occurs=1, max_occurs=1)



CT_PresetTextShape._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst'), CT_GeomGuideList, scope=CT_PresetTextShape, documentation=u'Adjust Value List'))
CT_PresetTextShape._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PresetTextShape._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'avLst')), min_occurs=0L, max_occurs=1L)
    )
CT_PresetTextShape._ContentModel = pyxb.binding.content.ParticleModel(CT_PresetTextShape._GroupModel, min_occurs=1, max_occurs=1)



CT_FillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_FillStyleList))

CT_FillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_FillStyleList, documentation=u'Group Fill'))

CT_FillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_FillStyleList))

CT_FillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_FillStyleList, documentation=u'Pattern Fill'))

CT_FillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_FillStyleList))

CT_FillStyleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_FillStyleList))
CT_FillStyleList._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FillStyleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_FillStyleList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FillStyleList._GroupModel_, min_occurs=3L, max_occurs=None)
    )
CT_FillStyleList._ContentModel = pyxb.binding.content.ParticleModel(CT_FillStyleList._GroupModel, min_occurs=1, max_occurs=1)



CT_NumericRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_NumericRule))
CT_NumericRule._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NumericRule._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_NumericRule._ContentModel = pyxb.binding.content.ParticleModel(CT_NumericRule._GroupModel, min_occurs=1, max_occurs=1)



CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl2pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 2 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl7pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 7 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl8pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 8 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl9pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 9 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl1pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 1 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl4pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 4 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TextListStyle))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl3pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 3 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl5pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 5 Text Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'defPPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'Default Paragraph Style'))

CT_TextListStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl6pPr'), CT_TextParagraphProperties, scope=CT_TextListStyle, documentation=u'List Level 6 Text Style'))
CT_TextListStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'defPPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl1pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl2pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl3pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl4pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl5pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl6pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl7pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl8pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lvl9pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextListStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TextListStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_TextListStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_Cell3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Cell3D))

CT_Cell3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bevel'), CT_Bevel, scope=CT_Cell3D, documentation=u'Bevel'))

CT_Cell3D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lightRig'), CT_LightRig, scope=CT_Cell3D, documentation=u'Light Rig'))
CT_Cell3D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Cell3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bevel')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Cell3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lightRig')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Cell3D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Cell3D._ContentModel = pyxb.binding.content.ParticleModel(CT_Cell3D._GroupModel, min_occurs=1, max_occurs=1)



CT_Path2DQuadBezierTo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), CT_AdjPoint2D, scope=CT_Path2DQuadBezierTo, documentation=u'Shape Path Point'))
CT_Path2DQuadBezierTo._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Path2DQuadBezierTo._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pt')), min_occurs=2L, max_occurs=2L)
    )
CT_Path2DQuadBezierTo._ContentModel = pyxb.binding.content.ParticleModel(CT_Path2DQuadBezierTo._GroupModel, min_occurs=1, max_occurs=1)



CT_Pt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Pt))

CT_Pt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'prSet'), CT_ElemPropSet, scope=CT_Pt, documentation=u'Property Set'))

CT_Pt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u't'), CT_TextBody, scope=CT_Pt, documentation=u'Text Body'))

CT_Pt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'spPr'), CT_ShapeProperties, scope=CT_Pt, documentation=u'Shape Properties'))
CT_Pt._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Pt._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'prSet')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Pt._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'spPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Pt._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u't')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Pt._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Pt._ContentModel = pyxb.binding.content.ParticleModel(CT_Pt._GroupModel, min_occurs=1, max_occurs=1)



CT_SDCategories._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'cat'), CT_SDCategory, scope=CT_SDCategories, documentation=u'Category'))
CT_SDCategories._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SDCategories._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'cat')), min_occurs=0L, max_occurs=None)
    )
CT_SDCategories._ContentModel = pyxb.binding.content.ParticleModel(CT_SDCategories._GroupModel, min_occurs=0L, max_occurs=None)



CT_CxnList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'cxn'), CT_Cxn, scope=CT_CxnList, documentation=u'Connection'))
CT_CxnList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CxnList._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'cxn')), min_occurs=0L, max_occurs=None)
    )
CT_CxnList._ContentModel = pyxb.binding.content.ParticleModel(CT_CxnList._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorSchemeAndMapping._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrMap'), CT_ColorMapping, scope=CT_ColorSchemeAndMapping))

CT_ColorSchemeAndMapping._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme'), CT_ColorScheme, scope=CT_ColorSchemeAndMapping))
CT_ColorSchemeAndMapping._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorSchemeAndMapping._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ColorSchemeAndMapping._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrMap')), min_occurs=0L, max_occurs=1L)
    )
CT_ColorSchemeAndMapping._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorSchemeAndMapping._GroupModel, min_occurs=1, max_occurs=1)



CT_PresetShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_PresetShadowEffect, documentation=u'RGB Color Model - Hex Variant'))

CT_PresetShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_PresetShadowEffect, documentation=u'System Color'))

CT_PresetShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_PresetShadowEffect, documentation=u'Scheme Color'))

CT_PresetShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_PresetShadowEffect, documentation=u'RGB Color Model - Percentage Variant'))

CT_PresetShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_PresetShadowEffect, documentation=u'Preset Color'))

CT_PresetShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_PresetShadowEffect, documentation=u'Hue, Saturation, Luminance Color Model'))
CT_PresetShadowEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_PresetShadowEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_PresetShadowEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_PresetShadowEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_TextBlipBullet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blip'), CT_Blip, scope=CT_TextBlipBullet, documentation=u'Blip'))
CT_TextBlipBullet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextBlipBullet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blip')), min_occurs=1L, max_occurs=1L)
    )
CT_TextBlipBullet._ContentModel = pyxb.binding.content.ParticleModel(CT_TextBlipBullet._GroupModel, min_occurs=1, max_occurs=1)



CT_InnerShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_InnerShadowEffect, documentation=u'RGB Color Model - Hex Variant'))

CT_InnerShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_InnerShadowEffect, documentation=u'System Color'))

CT_InnerShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_InnerShadowEffect, documentation=u'Scheme Color'))

CT_InnerShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_InnerShadowEffect, documentation=u'Preset Color'))

CT_InnerShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_InnerShadowEffect, documentation=u'RGB Color Model - Percentage Variant'))

CT_InnerShadowEffect._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_InnerShadowEffect, documentation=u'Hue, Saturation, Luminance Color Model'))
CT_InnerShadowEffect._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_InnerShadowEffect._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_InnerShadowEffect._ContentModel = pyxb.binding.content.ParticleModel(CT_InnerShadowEffect._GroupModel, min_occurs=1, max_occurs=1)



CT_WholeE2oFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_WholeE2oFormatting, documentation=u'Effect Container'))

CT_WholeE2oFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ln'), CT_LineProperties, scope=CT_WholeE2oFormatting, documentation=u'Outline'))

CT_WholeE2oFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_WholeE2oFormatting, documentation=u'Effect Container'))
CT_WholeE2oFormatting._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_WholeE2oFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_WholeE2oFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_WholeE2oFormatting._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_WholeE2oFormatting._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ln')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_WholeE2oFormatting._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_WholeE2oFormatting._ContentModel = pyxb.binding.content.ParticleModel(CT_WholeE2oFormatting._GroupModel, min_occurs=1, max_occurs=1)



CT_PtList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'pt'), CT_Pt, scope=CT_PtList, documentation=u'Point'))
CT_PtList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PtList._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'pt')), min_occurs=0L, max_occurs=None)
    )
CT_PtList._ContentModel = pyxb.binding.content.ParticleModel(CT_PtList._GroupModel, min_occurs=1, max_occurs=1)



CT_OfficeStyleSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_OfficeStyleSheet))

CT_OfficeStyleSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'themeElements'), CT_BaseStyles, scope=CT_OfficeStyleSheet, documentation=u'Theme Elements'))

CT_OfficeStyleSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'objectDefaults'), CT_ObjectStyleDefaults, scope=CT_OfficeStyleSheet, documentation=u'Object Defaults'))

CT_OfficeStyleSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extraClrSchemeLst'), CT_ColorSchemeList, scope=CT_OfficeStyleSheet, documentation=u'Extra Color Scheme List'))

CT_OfficeStyleSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'custClrLst'), CT_CustomColorList, scope=CT_OfficeStyleSheet, documentation=u'Custom Color List'))
CT_OfficeStyleSheet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OfficeStyleSheet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'themeElements')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OfficeStyleSheet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'objectDefaults')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OfficeStyleSheet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extraClrSchemeLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OfficeStyleSheet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'custClrLst')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_OfficeStyleSheet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_OfficeStyleSheet._ContentModel = pyxb.binding.content.ParticleModel(CT_OfficeStyleSheet._GroupModel, min_occurs=1, max_occurs=1)



CT_TableCol._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableCol))
CT_TableCol._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableCol._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableCol._ContentModel = pyxb.binding.content.ParticleModel(CT_TableCol._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlShapeNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvSpPr'), CT_NonVisualDrawingShapeProps, scope=CT_GvmlShapeNonVisual, documentation=u'Non-Visual Shape Drawing Properties'))

CT_GvmlShapeNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), CT_NonVisualDrawingProps, scope=CT_GvmlShapeNonVisual))
CT_GvmlShapeNonVisual._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlShapeNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlShapeNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvSpPr')), min_occurs=1L, max_occurs=1L)
    )
CT_GvmlShapeNonVisual._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlShapeNonVisual._GroupModel, min_occurs=1, max_occurs=1)



CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_TableProperties, documentation=u'Pattern Fill'))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_TableProperties))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_TableProperties, documentation=u'Group Fill'))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_TableProperties))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableProperties, documentation=u'Extension List'))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst'), CT_EffectList, scope=CT_TableProperties, documentation=u'Effect Container'))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_TableProperties))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag'), CT_EffectContainer, scope=CT_TableProperties, documentation=u'Effect Container'))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_TableProperties))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tableStyleId'), _s.ST_Guid, scope=CT_TableProperties, documentation=u'Table Style ID'))

CT_TableProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tableStyle'), CT_TableStyle, scope=CT_TableProperties, documentation=u'Table Style'))
CT_TableProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_TableProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectLst')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectDag')), min_occurs=1L, max_occurs=1L)
    )
CT_TableProperties._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tableStyle')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tableStyleId')), min_occurs=1, max_occurs=1)
    )
CT_TableProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._GroupModel_3, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_TableProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_Path2DList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'path'), CT_Path2D, scope=CT_Path2DList, documentation=u'Shape Path'))
CT_Path2DList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Path2DList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'path')), min_occurs=0L, max_occurs=None)
    )
CT_Path2DList._ContentModel = pyxb.binding.content.ParticleModel(CT_Path2DList._GroupModel, min_occurs=1, max_occurs=1)



CT_Cxn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Cxn))
CT_Cxn._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Cxn._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Cxn._ContentModel = pyxb.binding.content.ParticleModel(CT_Cxn._GroupModel, min_occurs=1, max_occurs=1)



CT_Headers._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'header'), pyxb.binding.datatypes.string, scope=CT_Headers, documentation=u'Header Cell Reference'))
CT_Headers._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Headers._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'header')), min_occurs=1, max_occurs=1)
    )
CT_Headers._ContentModel = pyxb.binding.content.ParticleModel(CT_Headers._GroupModel, min_occurs=0L, max_occurs=None)



CT_TextTabStopList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tab'), CT_TextTabStop, scope=CT_TextTabStopList, documentation=u'Tab Stop'))
CT_TextTabStopList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextTabStopList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tab')), min_occurs=0L, max_occurs=32L)
    )
CT_TextTabStopList._ContentModel = pyxb.binding.content.ParticleModel(CT_TextTabStopList._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorTransform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ColorTransform))

CT_ColorTransform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'title'), CT_CTName, scope=CT_ColorTransform, documentation=u'Title'))

CT_ColorTransform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'styleLbl'), CT_CTStyleLabel, scope=CT_ColorTransform, documentation=u'Style Label'))

CT_ColorTransform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'catLst'), CT_CTCategories, scope=CT_ColorTransform, documentation=u'Color Transform Category List'))

CT_ColorTransform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'desc'), CT_CTDescription, scope=CT_ColorTransform, documentation=u'Description'))
CT_ColorTransform._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorTransform._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'title')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_ColorTransform._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'desc')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_ColorTransform._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'catLst')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ColorTransform._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'styleLbl')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_ColorTransform._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ColorTransform._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorTransform._GroupModel, min_occurs=1, max_occurs=1)



CT_TableRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableRow))

CT_TableRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tc'), CT_TableCell, scope=CT_TableRow, documentation=u'Table Cell'))
CT_TableRow._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tc')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_TableRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableRow._ContentModel = pyxb.binding.content.ParticleModel(CT_TableRow._GroupModel, min_occurs=1, max_occurs=1)



CT_FontScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_FontScheme))

CT_FontScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'majorFont'), CT_FontCollection, scope=CT_FontScheme, documentation=u'Major Font'))

CT_FontScheme._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'minorFont'), CT_FontCollection, scope=CT_FontScheme, documentation=u'Minor fonts'))
CT_FontScheme._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FontScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'majorFont')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'minorFont')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FontScheme._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_FontScheme._ContentModel = pyxb.binding.content.ParticleModel(CT_FontScheme._GroupModel, min_occurs=1, max_occurs=1)



CT_BaseStylesOverride._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fmtScheme'), CT_StyleMatrix, scope=CT_BaseStylesOverride))

CT_BaseStylesOverride._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme'), CT_ColorScheme, scope=CT_BaseStylesOverride, documentation=u'Color Scheme'))

CT_BaseStylesOverride._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fontScheme'), CT_FontScheme, scope=CT_BaseStylesOverride))
CT_BaseStylesOverride._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BaseStylesOverride._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'clrScheme')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BaseStylesOverride._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fontScheme')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_BaseStylesOverride._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fmtScheme')), min_occurs=0L, max_occurs=1L)
    )
CT_BaseStylesOverride._ContentModel = pyxb.binding.content.ParticleModel(CT_BaseStylesOverride._GroupModel, min_occurs=1, max_occurs=1)



CT_ShapeLocking._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ShapeLocking))
CT_ShapeLocking._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ShapeLocking._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ShapeLocking._ContentModel = pyxb.binding.content.ParticleModel(CT_ShapeLocking._GroupModel, min_occurs=1, max_occurs=1)



CT_Transform2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ext'), CT_PositiveSize2D, scope=CT_Transform2D, documentation=u'Extents'))

CT_Transform2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'off'), CT_Point2D, scope=CT_Transform2D, documentation=u'Offset'))
CT_Transform2D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Transform2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'off')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Transform2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ext')), min_occurs=0L, max_occurs=1L)
    )
CT_Transform2D._ContentModel = pyxb.binding.content.ParticleModel(CT_Transform2D._GroupModel, min_occurs=1, max_occurs=1)



CT_Path2DCubicBezierTo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pt'), CT_AdjPoint2D, scope=CT_Path2DCubicBezierTo, documentation=u'Control points and end point'))
CT_Path2DCubicBezierTo._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Path2DCubicBezierTo._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pt')), min_occurs=3L, max_occurs=3L)
    )
CT_Path2DCubicBezierTo._ContentModel = pyxb.binding.content.ParticleModel(CT_Path2DCubicBezierTo._GroupModel, min_occurs=1, max_occurs=1)



CT_AudioFile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_AudioFile))
CT_AudioFile._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AudioFile._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_AudioFile._ContentModel = pyxb.binding.content.ParticleModel(CT_AudioFile._GroupModel, min_occurs=1, max_occurs=1)



CT_RegularTextRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u't'), pyxb.binding.datatypes.string, scope=CT_RegularTextRun, documentation=u'Text String'))

CT_RegularTextRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr'), CT_TextCharacterProperties, scope=CT_RegularTextRun, documentation=u'Text Character Properties'))
CT_RegularTextRun._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RegularTextRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'rPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RegularTextRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u't')), min_occurs=1L, max_occurs=1L)
    )
CT_RegularTextRun._ContentModel = pyxb.binding.content.ParticleModel(CT_RegularTextRun._GroupModel, min_occurs=1, max_occurs=1)



CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstTxWarp'), CT_PresetTextShape, scope=CT_TextBodyProperties, documentation=u'Preset Text Shape'))

CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d'), CT_Shape3D, scope=CT_TextBodyProperties, documentation=u'Apply 3D shape properties'))

CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'flatTx'), CT_FlatText, scope=CT_TextBodyProperties, documentation=u'No text in 3D scene'))

CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d'), CT_Scene3D, scope=CT_TextBodyProperties, documentation=u'3D Scene Properties'))

CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TextBodyProperties))

CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'normAutofit'), CT_TextNormalAutofit, scope=CT_TextBodyProperties, documentation=u'Normal AutoFit'))

CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spAutoFit'), CT_TextShapeAutofit, scope=CT_TextBodyProperties, documentation=u'Shape AutoFit'))

CT_TextBodyProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noAutofit'), CT_TextNoAutofit, scope=CT_TextBodyProperties, documentation=u'No AutoFit'))
CT_TextBodyProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noAutofit')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'normAutofit')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spAutoFit')), min_occurs=1, max_occurs=1)
    )
CT_TextBodyProperties._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sp3d')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'flatTx')), min_occurs=1L, max_occurs=1L)
    )
CT_TextBodyProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstTxWarp')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scene3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._GroupModel_2, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TextBodyProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TextBodyProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_TextBodyProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'insideV'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Inside Vertical Border'))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tl2br'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Top Left to Bottom Right Border'))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'right'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Right Border'))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'tr2bl'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Top Right to Bottom Left Border'))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'top'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Top Border'))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'left'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Left Border'))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableCellBorderStyle))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bottom'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Bottom Border'))

CT_TableCellBorderStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'insideH'), CT_ThemeableLineStyle, scope=CT_TableCellBorderStyle, documentation=u'Inside Horizontal Border'))
CT_TableCellBorderStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'left')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'right')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'top')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bottom')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'insideH')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'insideV')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tl2br')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'tr2bl')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableCellBorderStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_TableCellBorderStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_ObjectStyleDefaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_ObjectStyleDefaults))

CT_ObjectStyleDefaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spDef'), CT_DefaultShapeDefinition, scope=CT_ObjectStyleDefaults, documentation=u'Shape Default'))

CT_ObjectStyleDefaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnDef'), CT_DefaultShapeDefinition, scope=CT_ObjectStyleDefaults, documentation=u'Line Default'))

CT_ObjectStyleDefaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'txDef'), CT_DefaultShapeDefinition, scope=CT_ObjectStyleDefaults, documentation=u'Text Default'))
CT_ObjectStyleDefaults._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ObjectStyleDefaults._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spDef')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ObjectStyleDefaults._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnDef')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ObjectStyleDefaults._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'txDef')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ObjectStyleDefaults._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ObjectStyleDefaults._ContentModel = pyxb.binding.content.ParticleModel(CT_ObjectStyleDefaults._GroupModel, min_occurs=1, max_occurs=1)



CT_AnimationElementChoice._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'dgm'), CT_AnimationDgmElement, scope=CT_AnimationElementChoice, documentation=u'Diagram to Animate'))

CT_AnimationElementChoice._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'chart'), CT_AnimationChartElement, scope=CT_AnimationElementChoice, documentation=u'Chart to Animate'))
CT_AnimationElementChoice._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_AnimationElementChoice._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'dgm')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_AnimationElementChoice._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'chart')), min_occurs=1, max_occurs=1)
    )
CT_AnimationElementChoice._ContentModel = pyxb.binding.content.ParticleModel(CT_AnimationElementChoice._GroupModel, min_occurs=1L, max_occurs=1L)



CT_GraphicalObjectFrameLocking._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GraphicalObjectFrameLocking))
CT_GraphicalObjectFrameLocking._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GraphicalObjectFrameLocking._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GraphicalObjectFrameLocking._ContentModel = pyxb.binding.content.ParticleModel(CT_GraphicalObjectFrameLocking._GroupModel, min_occurs=1, max_occurs=1)



CT_Scale2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sy'), CT_Ratio, scope=CT_Scale2D, documentation=u'Vertical Ratio'))

CT_Scale2D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sx'), CT_Ratio, scope=CT_Scale2D, documentation=u'Horizontal Ratio'))
CT_Scale2D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Scale2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sx')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Scale2D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sy')), min_occurs=1L, max_occurs=1L)
    )
CT_Scale2D._ContentModel = pyxb.binding.content.ParticleModel(CT_Scale2D._GroupModel, min_occurs=1, max_occurs=1)



CT_GradientStop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr'), CT_SRgbColor, scope=CT_GradientStop, documentation=u'RGB Color Model - Hex Variant'))

CT_GradientStop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr'), CT_PresetColor, scope=CT_GradientStop, documentation=u'Preset Color'))

CT_GradientStop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr'), CT_ScRgbColor, scope=CT_GradientStop, documentation=u'RGB Color Model - Percentage Variant'))

CT_GradientStop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr'), CT_HslColor, scope=CT_GradientStop, documentation=u'Hue, Saturation, Luminance Color Model'))

CT_GradientStop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr'), CT_SystemColor, scope=CT_GradientStop, documentation=u'System Color'))

CT_GradientStop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr'), CT_SchemeColor, scope=CT_GradientStop, documentation=u'Scheme Color'))
CT_GradientStop._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GradientStop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'scrgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientStop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'srgbClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientStop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'hslClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientStop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'sysClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientStop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'schemeClr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GradientStop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'prstClr')), min_occurs=1L, max_occurs=1L)
    )
CT_GradientStop._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GradientStop._GroupModel_, min_occurs=1L, max_occurs=1L)
    )
CT_GradientStop._ContentModel = pyxb.binding.content.ParticleModel(CT_GradientStop._GroupModel, min_occurs=1, max_occurs=1)



CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnB'), CT_LineProperties, scope=CT_TableCellProperties, documentation=u'Bottom Border Line Properties'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_TableCellProperties))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill'), CT_SolidColorFillProperties, scope=CT_TableCellProperties))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnTlToBr'), CT_LineProperties, scope=CT_TableCellProperties, documentation=u'Top-Left to Bottom-Right Border Line Properties'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_TableCellProperties))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill'), CT_GradientFillProperties, scope=CT_TableCellProperties))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnBlToTr'), CT_LineProperties, scope=CT_TableCellProperties, documentation=u'Bottom-Left to Top-Right Border Line Properties'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill'), CT_NoFillProperties, scope=CT_TableCellProperties))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'headers'), CT_Headers, scope=CT_TableCellProperties, documentation=u'Header Cells Associated With Table Cell'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cell3D'), CT_Cell3D, scope=CT_TableCellProperties, documentation=u'Cell 3-D'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnL'), CT_LineProperties, scope=CT_TableCellProperties, documentation=u'Left Border Line Properties'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnR'), CT_LineProperties, scope=CT_TableCellProperties, documentation=u'Right Border Line Properties'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill'), CT_PatternFillProperties, scope=CT_TableCellProperties, documentation=u'Pattern Fill'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'lnT'), CT_LineProperties, scope=CT_TableCellProperties, documentation=u'Top Border Line Properties'))

CT_TableCellProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill'), CT_GroupFillProperties, scope=CT_TableCellProperties, documentation=u'Group Fill'))
CT_TableCellProperties._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'noFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'solidFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'gradFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pattFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'grpFill')), min_occurs=1L, max_occurs=1L)
    )
CT_TableCellProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnL')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnR')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnT')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnB')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnTlToBr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'lnBlToTr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cell3D')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'headers')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TableCellProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableCellProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_TableCellProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_PolarAdjustHandle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'pos'), CT_AdjPoint2D, scope=CT_PolarAdjustHandle, documentation=u'Shape Position Coordinate'))
CT_PolarAdjustHandle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PolarAdjustHandle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'pos')), min_occurs=1L, max_occurs=1L)
    )
CT_PolarAdjustHandle._ContentModel = pyxb.binding.content.ParticleModel(CT_PolarAdjustHandle._GroupModel, min_occurs=1, max_occurs=1)



CT_TableBackgroundStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effect'), CT_EffectProperties, scope=CT_TableBackgroundStyle, documentation=u'Effect'))

CT_TableBackgroundStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fill'), CT_FillProperties, scope=CT_TableBackgroundStyle, documentation=u'Fill'))

CT_TableBackgroundStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'effectRef'), CT_StyleMatrixReference, scope=CT_TableBackgroundStyle, documentation=u'Effect Reference'))

CT_TableBackgroundStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef'), CT_StyleMatrixReference, scope=CT_TableBackgroundStyle, documentation=u'Fill Reference'))
CT_TableBackgroundStyle._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableBackgroundStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableBackgroundStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'fillRef')), min_occurs=1L, max_occurs=1L)
    )
CT_TableBackgroundStyle._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TableBackgroundStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effect')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableBackgroundStyle._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'effectRef')), min_occurs=1L, max_occurs=1L)
    )
CT_TableBackgroundStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableBackgroundStyle._GroupModel_, min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableBackgroundStyle._GroupModel_2, min_occurs=0L, max_occurs=1L)
    )
CT_TableBackgroundStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_TableBackgroundStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_AdjustHandleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ahPolar'), CT_PolarAdjustHandle, scope=CT_AdjustHandleList, documentation=u'Polar Adjust Handle'))

CT_AdjustHandleList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'ahXY'), CT_XYAdjustHandle, scope=CT_AdjustHandleList, documentation=u'XY Adjust Handle'))
CT_AdjustHandleList._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_AdjustHandleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ahXY')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AdjustHandleList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'ahPolar')), min_occurs=1L, max_occurs=1L)
    )
CT_AdjustHandleList._ContentModel = pyxb.binding.content.ParticleModel(CT_AdjustHandleList._GroupModel, min_occurs=0L, max_occurs=None)



CT_GvmlGraphicalObjectFrame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GvmlGraphicalObjectFrame))

CT_GvmlGraphicalObjectFrame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'nvGraphicFramePr'), CT_GvmlGraphicFrameNonVisual, scope=CT_GvmlGraphicalObjectFrame, documentation=u'Non-Visual Properties for a Graphic Frame'))

CT_GvmlGraphicalObjectFrame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'graphic'), CT_GraphicalObject, scope=CT_GvmlGraphicalObjectFrame, documentation=u'Graphic Object'))

CT_GvmlGraphicalObjectFrame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm'), CT_Transform2D, scope=CT_GvmlGraphicalObjectFrame))
CT_GvmlGraphicalObjectFrame._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlGraphicalObjectFrame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'nvGraphicFramePr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlGraphicalObjectFrame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'graphic')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlGraphicalObjectFrame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'xfrm')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlGraphicalObjectFrame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GvmlGraphicalObjectFrame._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlGraphicalObjectFrame._GroupModel, min_occurs=1, max_occurs=1)



CT_Categories._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'cat'), CT_Category, scope=CT_Categories, documentation=u'Category'))
CT_Categories._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Categories._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'cat')), min_occurs=0L, max_occurs=None)
    )
CT_Categories._ContentModel = pyxb.binding.content.ParticleModel(CT_Categories._GroupModel, min_occurs=1, max_occurs=1)



CT_AdjLst._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'adj'), CT_Adj, scope=CT_AdjLst, documentation=u'Shape Adjust'))
CT_AdjLst._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AdjLst._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'adj')), min_occurs=0L, max_occurs=None)
    )
CT_AdjLst._ContentModel = pyxb.binding.content.ParticleModel(CT_AdjLst._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlPicture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_GvmlPicture))

CT_GvmlPicture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'nvPicPr'), CT_GvmlPictureNonVisual, scope=CT_GvmlPicture, documentation=u'Non-Visual Properties for a Picture'))

CT_GvmlPicture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr'), CT_ShapeProperties, scope=CT_GvmlPicture, documentation=u'Shape Properties'))

CT_GvmlPicture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill'), CT_BlipFillProperties, scope=CT_GvmlPicture, documentation=u'Picture Fill'))

CT_GvmlPicture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'style'), CT_ShapeStyle, scope=CT_GvmlPicture))
CT_GvmlPicture._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlPicture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'nvPicPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlPicture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'blipFill')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlPicture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'spPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlPicture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'style')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlPicture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_GvmlPicture._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlPicture._GroupModel, min_occurs=1, max_occurs=1)



CT_GvmlGraphicFrameNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvGraphicFramePr'), CT_NonVisualGraphicFrameProperties, scope=CT_GvmlGraphicFrameNonVisual, documentation=u'Non-Visual Graphic Frame Drawing Properties'))

CT_GvmlGraphicFrameNonVisual._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr'), CT_NonVisualDrawingProps, scope=CT_GvmlGraphicFrameNonVisual))
CT_GvmlGraphicFrameNonVisual._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GvmlGraphicFrameNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_GvmlGraphicFrameNonVisual._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'cNvGraphicFramePr')), min_occurs=1L, max_occurs=1L)
    )
CT_GvmlGraphicFrameNonVisual._ContentModel = pyxb.binding.content.ParticleModel(CT_GvmlGraphicFrameNonVisual._GroupModel, min_occurs=1, max_occurs=1)



CT_AnimationGraphicalObjectBuildProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bldDgm'), CT_AnimationDgmBuildProperties, scope=CT_AnimationGraphicalObjectBuildProperties, documentation=u'Build Diagram'))

CT_AnimationGraphicalObjectBuildProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'bldChart'), CT_AnimationChartBuildProperties, scope=CT_AnimationGraphicalObjectBuildProperties, documentation=u'Build Chart'))
CT_AnimationGraphicalObjectBuildProperties._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_AnimationGraphicalObjectBuildProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bldDgm')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_AnimationGraphicalObjectBuildProperties._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'bldChart')), min_occurs=1, max_occurs=1)
    )
CT_AnimationGraphicalObjectBuildProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_AnimationGraphicalObjectBuildProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_StyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'extLst'), CT_OfficeArtExtensionList, scope=CT_StyleLabel))

CT_StyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'scene3d'), CT_Scene3D, scope=CT_StyleLabel, documentation=u'3-D Scene'))

CT_StyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'txPr'), CT_TextProps, scope=CT_StyleLabel, documentation=u'Text Properties'))

CT_StyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'sp3d'), CT_Shape3D, scope=CT_StyleLabel, documentation=u'3-D Shape Properties'))

CT_StyleLabel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'style'), CT_ShapeStyle, scope=CT_StyleLabel, documentation=u'Shape Style'))
CT_StyleLabel._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_StyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'scene3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'sp3d')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'txPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'style')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_StyleLabel._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_StyleLabel._ContentModel = pyxb.binding.content.ParticleModel(CT_StyleLabel._GroupModel, min_occurs=1, max_occurs=1)



CT_Backdrop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst'), CT_OfficeArtExtensionList, scope=CT_Backdrop))

CT_Backdrop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'anchor'), CT_Point3D, scope=CT_Backdrop, documentation=u'Anchor Point'))

CT_Backdrop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'up'), CT_Vector3D, scope=CT_Backdrop, documentation=u'Up Vector'))

CT_Backdrop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_a, u'norm'), CT_Vector3D, scope=CT_Backdrop, documentation=u'Normal'))
CT_Backdrop._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Backdrop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'anchor')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Backdrop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'norm')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Backdrop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'up')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Backdrop._UseForTag(pyxb.namespace.ExpandedName(_Namespace_a, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Backdrop._ContentModel = pyxb.binding.content.ParticleModel(CT_Backdrop._GroupModel, min_occurs=1, max_occurs=1)
# ./_nsgroup.py
# PyXB bindings for NamespaceGroupModule
# NGM:2cba945499b905409613b11ee183edb0056cc3bf
# Incorporated namespaces:
#  http://schemas.openxmlformats.org/wordprocessingml/2006/main w
#  http://schemas.openxmlformats.org/officeDocument/2006/math m

import pyxb
import pyxb.binding
import pyxb.utils.utility

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:dd24c2f4-85d5-11df-8277-0026b9799156')

# Import bindings for schemas in group
import pyxb.binding.datatypes
import _s
import _r
import pyxb.binding.xml_
import _sl

_Namespace_w = pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/wordprocessingml/2006/main', create_if_missing=True)
_Namespace_w.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_m = pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/math', create_if_missing=True)
_Namespace_m.configureCategories(['typeBinding', 'elementBinding'])

# Atomic SimpleTypeDefinition
class ST_DecimalNumber (pyxb.binding.datatypes.integer):

    """Decimal Number Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_DecimalNumber')
    _Documentation = u'Decimal Number Value'
ST_DecimalNumber._InitializeFacetMap()
_Namespace_w.addCategoryObject('typeBinding', u'ST_DecimalNumber', ST_DecimalNumber)

# Atomic SimpleTypeDefinition
class ST_DateTime (pyxb.binding.datatypes.dateTime):

    """Standard Date and Time Storage Format"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_DateTime')
    _Documentation = u'Standard Date and Time Storage Format'
ST_DateTime._InitializeFacetMap()
_Namespace_w.addCategoryObject('typeBinding', u'ST_DateTime', ST_DateTime)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_SignedTwipsMeasure (pyxb.binding.basis.STD_union):

    """Signed Measurement in Twentieths of a Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_SignedTwipsMeasure')
    _Documentation = u'Signed Measurement in Twentieths of a Point'

    _MemberTypes = ( pyxb.binding.datatypes.integer, _s.ST_UniversalMeasure, )
ST_SignedTwipsMeasure._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_SignedTwipsMeasure._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SignedTwipsMeasure)
ST_SignedTwipsMeasure._InitializeFacetMap(ST_SignedTwipsMeasure._CF_pattern,
   ST_SignedTwipsMeasure._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_SignedTwipsMeasure', ST_SignedTwipsMeasure)

# Atomic SimpleTypeDefinition
class ST_Char (pyxb.binding.datatypes.string):

    """Character"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'ST_Char')
    _Documentation = u'Character'
ST_Char._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
ST_Char._InitializeFacetMap(ST_Char._CF_maxLength)
_Namespace_m.addCategoryObject('typeBinding', u'ST_Char', ST_Char)

# Atomic SimpleTypeDefinition
class ST_UcharHexNumber (pyxb.binding.datatypes.hexBinary):

    """Two Digit Hexadecimal Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_UcharHexNumber')
    _Documentation = u'Two Digit Hexadecimal Value'
ST_UcharHexNumber._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
ST_UcharHexNumber._InitializeFacetMap(ST_UcharHexNumber._CF_length)
_Namespace_w.addCategoryObject('typeBinding', u'ST_UcharHexNumber', ST_UcharHexNumber)

# Atomic SimpleTypeDefinition
class ST_PointMeasure (_s.ST_UnsignedDecimalNumber):

    """Measurement in Points"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_PointMeasure')
    _Documentation = u'Measurement in Points'
ST_PointMeasure._InitializeFacetMap()
_Namespace_w.addCategoryObject('typeBinding', u'ST_PointMeasure', ST_PointMeasure)

# Atomic SimpleTypeDefinition
class ST_Border (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Border Styles"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_Border')
    _Documentation = u'Border Styles'
ST_Border._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Border, enum_prefix=None)
ST_Border.nil = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'nil')
ST_Border.none = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_Border.single = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'single')
ST_Border.thick = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'thick')
ST_Border.double = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'double')
ST_Border.dotted = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'dotted')
ST_Border.dashed = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'dashed')
ST_Border.dotDash = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'dotDash')
ST_Border.dotDotDash = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'dotDotDash')
ST_Border.triple = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'triple')
ST_Border.thinThickSmallGap = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'thinThickSmallGap')
ST_Border.thickThinSmallGap = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'thickThinSmallGap')
ST_Border.thinThickThinSmallGap = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'thinThickThinSmallGap')
ST_Border.thinThickMediumGap = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'thinThickMediumGap')
ST_Border.thickThinMediumGap = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'thickThinMediumGap')
ST_Border.thinThickThinMediumGap = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'thinThickThinMediumGap')
ST_Border.thinThickLargeGap = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'thinThickLargeGap')
ST_Border.thickThinLargeGap = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'thickThinLargeGap')
ST_Border.thinThickThinLargeGap = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'thinThickThinLargeGap')
ST_Border.wave = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'wave')
ST_Border.doubleWave = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'doubleWave')
ST_Border.dashSmallGap = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'dashSmallGap')
ST_Border.dashDotStroked = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'dashDotStroked')
ST_Border.threeDEmboss = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'threeDEmboss')
ST_Border.threeDEngrave = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'threeDEngrave')
ST_Border.outset = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'outset')
ST_Border.inset = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'inset')
ST_Border.apples = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'apples')
ST_Border.archedScallops = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'archedScallops')
ST_Border.babyPacifier = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'babyPacifier')
ST_Border.babyRattle = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'babyRattle')
ST_Border.balloons3Colors = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'balloons3Colors')
ST_Border.balloonsHotAir = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'balloonsHotAir')
ST_Border.basicBlackDashes = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'basicBlackDashes')
ST_Border.basicBlackDots = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'basicBlackDots')
ST_Border.basicBlackSquares = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'basicBlackSquares')
ST_Border.basicThinLines = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'basicThinLines')
ST_Border.basicWhiteDashes = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'basicWhiteDashes')
ST_Border.basicWhiteDots = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'basicWhiteDots')
ST_Border.basicWhiteSquares = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'basicWhiteSquares')
ST_Border.basicWideInline = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'basicWideInline')
ST_Border.basicWideMidline = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'basicWideMidline')
ST_Border.basicWideOutline = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'basicWideOutline')
ST_Border.bats = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'bats')
ST_Border.birds = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'birds')
ST_Border.birdsFlight = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'birdsFlight')
ST_Border.cabins = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'cabins')
ST_Border.cakeSlice = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'cakeSlice')
ST_Border.candyCorn = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'candyCorn')
ST_Border.celticKnotwork = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'celticKnotwork')
ST_Border.certificateBanner = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'certificateBanner')
ST_Border.chainLink = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'chainLink')
ST_Border.champagneBottle = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'champagneBottle')
ST_Border.checkedBarBlack = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'checkedBarBlack')
ST_Border.checkedBarColor = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'checkedBarColor')
ST_Border.checkered = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'checkered')
ST_Border.christmasTree = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'christmasTree')
ST_Border.circlesLines = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'circlesLines')
ST_Border.circlesRectangles = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'circlesRectangles')
ST_Border.classicalWave = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'classicalWave')
ST_Border.clocks = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'clocks')
ST_Border.compass = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'compass')
ST_Border.confetti = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'confetti')
ST_Border.confettiGrays = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'confettiGrays')
ST_Border.confettiOutline = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'confettiOutline')
ST_Border.confettiStreamers = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'confettiStreamers')
ST_Border.confettiWhite = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'confettiWhite')
ST_Border.cornerTriangles = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'cornerTriangles')
ST_Border.couponCutoutDashes = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'couponCutoutDashes')
ST_Border.couponCutoutDots = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'couponCutoutDots')
ST_Border.crazyMaze = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'crazyMaze')
ST_Border.creaturesButterfly = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'creaturesButterfly')
ST_Border.creaturesFish = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'creaturesFish')
ST_Border.creaturesInsects = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'creaturesInsects')
ST_Border.creaturesLadyBug = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'creaturesLadyBug')
ST_Border.crossStitch = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'crossStitch')
ST_Border.cup = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'cup')
ST_Border.decoArch = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'decoArch')
ST_Border.decoArchColor = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'decoArchColor')
ST_Border.decoBlocks = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'decoBlocks')
ST_Border.diamondsGray = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'diamondsGray')
ST_Border.doubleD = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'doubleD')
ST_Border.doubleDiamonds = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'doubleDiamonds')
ST_Border.earth1 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'earth1')
ST_Border.earth2 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'earth2')
ST_Border.earth3 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'earth3')
ST_Border.eclipsingSquares1 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'eclipsingSquares1')
ST_Border.eclipsingSquares2 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'eclipsingSquares2')
ST_Border.eggsBlack = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'eggsBlack')
ST_Border.fans = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'fans')
ST_Border.film = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'film')
ST_Border.firecrackers = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'firecrackers')
ST_Border.flowersBlockPrint = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'flowersBlockPrint')
ST_Border.flowersDaisies = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'flowersDaisies')
ST_Border.flowersModern1 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'flowersModern1')
ST_Border.flowersModern2 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'flowersModern2')
ST_Border.flowersPansy = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'flowersPansy')
ST_Border.flowersRedRose = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'flowersRedRose')
ST_Border.flowersRoses = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'flowersRoses')
ST_Border.flowersTeacup = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'flowersTeacup')
ST_Border.flowersTiny = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'flowersTiny')
ST_Border.gems = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'gems')
ST_Border.gingerbreadMan = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'gingerbreadMan')
ST_Border.gradient = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'gradient')
ST_Border.handmade1 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'handmade1')
ST_Border.handmade2 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'handmade2')
ST_Border.heartBalloon = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'heartBalloon')
ST_Border.heartGray = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'heartGray')
ST_Border.hearts = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'hearts')
ST_Border.heebieJeebies = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'heebieJeebies')
ST_Border.holly = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'holly')
ST_Border.houseFunky = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'houseFunky')
ST_Border.hypnotic = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'hypnotic')
ST_Border.iceCreamCones = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'iceCreamCones')
ST_Border.lightBulb = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'lightBulb')
ST_Border.lightning1 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'lightning1')
ST_Border.lightning2 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'lightning2')
ST_Border.mapPins = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'mapPins')
ST_Border.mapleLeaf = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'mapleLeaf')
ST_Border.mapleMuffins = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'mapleMuffins')
ST_Border.marquee = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'marquee')
ST_Border.marqueeToothed = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'marqueeToothed')
ST_Border.moons = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'moons')
ST_Border.mosaic = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'mosaic')
ST_Border.musicNotes = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'musicNotes')
ST_Border.northwest = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'northwest')
ST_Border.ovals = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'ovals')
ST_Border.packages = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'packages')
ST_Border.palmsBlack = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'palmsBlack')
ST_Border.palmsColor = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'palmsColor')
ST_Border.paperClips = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'paperClips')
ST_Border.papyrus = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'papyrus')
ST_Border.partyFavor = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'partyFavor')
ST_Border.partyGlass = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'partyGlass')
ST_Border.pencils = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'pencils')
ST_Border.people = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'people')
ST_Border.peopleWaving = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'peopleWaving')
ST_Border.peopleHats = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'peopleHats')
ST_Border.poinsettias = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'poinsettias')
ST_Border.postageStamp = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'postageStamp')
ST_Border.pumpkin1 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'pumpkin1')
ST_Border.pushPinNote2 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'pushPinNote2')
ST_Border.pushPinNote1 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'pushPinNote1')
ST_Border.pyramids = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'pyramids')
ST_Border.pyramidsAbove = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'pyramidsAbove')
ST_Border.quadrants = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'quadrants')
ST_Border.rings = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'rings')
ST_Border.safari = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'safari')
ST_Border.sawtooth = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'sawtooth')
ST_Border.sawtoothGray = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'sawtoothGray')
ST_Border.scaredCat = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'scaredCat')
ST_Border.seattle = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'seattle')
ST_Border.shadowedSquares = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'shadowedSquares')
ST_Border.sharksTeeth = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'sharksTeeth')
ST_Border.shorebirdTracks = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'shorebirdTracks')
ST_Border.skyrocket = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'skyrocket')
ST_Border.snowflakeFancy = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'snowflakeFancy')
ST_Border.snowflakes = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'snowflakes')
ST_Border.sombrero = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'sombrero')
ST_Border.southwest = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'southwest')
ST_Border.stars = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'stars')
ST_Border.starsTop = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'starsTop')
ST_Border.stars3d = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'stars3d')
ST_Border.starsBlack = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'starsBlack')
ST_Border.starsShadowed = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'starsShadowed')
ST_Border.sun = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'sun')
ST_Border.swirligig = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'swirligig')
ST_Border.tornPaper = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'tornPaper')
ST_Border.tornPaperBlack = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'tornPaperBlack')
ST_Border.trees = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'trees')
ST_Border.triangleParty = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'triangleParty')
ST_Border.triangles = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'triangles')
ST_Border.triangle1 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'triangle1')
ST_Border.triangle2 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'triangle2')
ST_Border.triangleCircle1 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'triangleCircle1')
ST_Border.triangleCircle2 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'triangleCircle2')
ST_Border.shapes1 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'shapes1')
ST_Border.shapes2 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'shapes2')
ST_Border.twistedLines1 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'twistedLines1')
ST_Border.twistedLines2 = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'twistedLines2')
ST_Border.vine = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'vine')
ST_Border.waveline = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'waveline')
ST_Border.weavingAngles = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'weavingAngles')
ST_Border.weavingBraid = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'weavingBraid')
ST_Border.weavingRibbon = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'weavingRibbon')
ST_Border.weavingStrips = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'weavingStrips')
ST_Border.whiteFlowers = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'whiteFlowers')
ST_Border.woodwork = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'woodwork')
ST_Border.xIllusions = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'xIllusions')
ST_Border.zanyTriangles = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'zanyTriangles')
ST_Border.zigZag = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'zigZag')
ST_Border.zigZagStitch = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'zigZagStitch')
ST_Border.custom = ST_Border._CF_enumeration.addEnumeration(unicode_value=u'custom')
ST_Border._InitializeFacetMap(ST_Border._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_Border', ST_Border)

# Atomic SimpleTypeDefinition
class ST_ThemeColor (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Theme Color"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_ThemeColor')
    _Documentation = u'Theme Color'
ST_ThemeColor._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ThemeColor, enum_prefix=None)
ST_ThemeColor.dark1 = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'dark1')
ST_ThemeColor.light1 = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'light1')
ST_ThemeColor.dark2 = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'dark2')
ST_ThemeColor.light2 = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'light2')
ST_ThemeColor.accent1 = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'accent1')
ST_ThemeColor.accent2 = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'accent2')
ST_ThemeColor.accent3 = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'accent3')
ST_ThemeColor.accent4 = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'accent4')
ST_ThemeColor.accent5 = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'accent5')
ST_ThemeColor.accent6 = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'accent6')
ST_ThemeColor.hyperlink = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'hyperlink')
ST_ThemeColor.followedHyperlink = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'followedHyperlink')
ST_ThemeColor.none = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_ThemeColor.background1 = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'background1')
ST_ThemeColor.text1 = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'text1')
ST_ThemeColor.background2 = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'background2')
ST_ThemeColor.text2 = ST_ThemeColor._CF_enumeration.addEnumeration(unicode_value=u'text2')
ST_ThemeColor._InitializeFacetMap(ST_ThemeColor._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_ThemeColor', ST_ThemeColor)

# Atomic SimpleTypeDefinition
class ST_HexColorAuto (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """&#8216;Automatic&#8217; Color Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_HexColorAuto')
    _Documentation = u'\u2018Automatic\u2019 Color Value'
ST_HexColorAuto._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_HexColorAuto, enum_prefix=None)
ST_HexColorAuto.auto = ST_HexColorAuto._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_HexColorAuto._InitializeFacetMap(ST_HexColorAuto._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_HexColorAuto', ST_HexColorAuto)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_HexColor (pyxb.binding.basis.STD_union):

    """Color Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_HexColor')
    _Documentation = u'Color Value'

    _MemberTypes = ( ST_HexColorAuto, _s.ST_HexColorRGB, )
ST_HexColor._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_HexColor._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_HexColor)
ST_HexColor.auto = u'auto'                        # originally ST_HexColorAuto.auto
ST_HexColor._InitializeFacetMap(ST_HexColor._CF_pattern,
   ST_HexColor._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_HexColor', ST_HexColor)

# Atomic SimpleTypeDefinition
class ST_EighthPointMeasure (_s.ST_UnsignedDecimalNumber):

    """Measurement in Eighths of a Point"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_EighthPointMeasure')
    _Documentation = u'Measurement in Eighths of a Point'
ST_EighthPointMeasure._InitializeFacetMap()
_Namespace_w.addCategoryObject('typeBinding', u'ST_EighthPointMeasure', ST_EighthPointMeasure)

# Atomic SimpleTypeDefinition
class ST_ProofErr (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Proofing Error Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_ProofErr')
    _Documentation = u'Proofing Error Type'
ST_ProofErr._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ProofErr, enum_prefix=None)
ST_ProofErr.spellStart = ST_ProofErr._CF_enumeration.addEnumeration(unicode_value=u'spellStart')
ST_ProofErr.spellEnd = ST_ProofErr._CF_enumeration.addEnumeration(unicode_value=u'spellEnd')
ST_ProofErr.gramStart = ST_ProofErr._CF_enumeration.addEnumeration(unicode_value=u'gramStart')
ST_ProofErr.gramEnd = ST_ProofErr._CF_enumeration.addEnumeration(unicode_value=u'gramEnd')
ST_ProofErr._InitializeFacetMap(ST_ProofErr._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_ProofErr', ST_ProofErr)

# Atomic SimpleTypeDefinition
class ST_DisplacedByCustomXml (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Location of Custom XML Markup Displacing an Annotation"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_DisplacedByCustomXml')
    _Documentation = u'Location of Custom XML Markup Displacing an Annotation'
ST_DisplacedByCustomXml._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DisplacedByCustomXml, enum_prefix=None)
ST_DisplacedByCustomXml.next = ST_DisplacedByCustomXml._CF_enumeration.addEnumeration(unicode_value=u'next')
ST_DisplacedByCustomXml.prev = ST_DisplacedByCustomXml._CF_enumeration.addEnumeration(unicode_value=u'prev')
ST_DisplacedByCustomXml._InitializeFacetMap(ST_DisplacedByCustomXml._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_DisplacedByCustomXml', ST_DisplacedByCustomXml)

# Atomic SimpleTypeDefinition
class ST_UnSignedInteger (pyxb.binding.datatypes.unsignedInt):

    """Unsigned integer."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'ST_UnSignedInteger')
    _Documentation = u'Unsigned integer.'
ST_UnSignedInteger._InitializeFacetMap()
_Namespace_m.addCategoryObject('typeBinding', u'ST_UnSignedInteger', ST_UnSignedInteger)

# Atomic SimpleTypeDefinition
class ST_PixelsMeasure (_s.ST_UnsignedDecimalNumber):

    """Measurement in Pixels"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_PixelsMeasure')
    _Documentation = u'Measurement in Pixels'
ST_PixelsMeasure._InitializeFacetMap()
_Namespace_w.addCategoryObject('typeBinding', u'ST_PixelsMeasure', ST_PixelsMeasure)

# Atomic SimpleTypeDefinition
class ST_EdGrp (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Range Permision Editing Group"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_EdGrp')
    _Documentation = u'Range Permision Editing Group'
ST_EdGrp._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_EdGrp, enum_prefix=None)
ST_EdGrp.none = ST_EdGrp._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_EdGrp.everyone = ST_EdGrp._CF_enumeration.addEnumeration(unicode_value=u'everyone')
ST_EdGrp.administrators = ST_EdGrp._CF_enumeration.addEnumeration(unicode_value=u'administrators')
ST_EdGrp.contributors = ST_EdGrp._CF_enumeration.addEnumeration(unicode_value=u'contributors')
ST_EdGrp.editors = ST_EdGrp._CF_enumeration.addEnumeration(unicode_value=u'editors')
ST_EdGrp.owners = ST_EdGrp._CF_enumeration.addEnumeration(unicode_value=u'owners')
ST_EdGrp.current = ST_EdGrp._CF_enumeration.addEnumeration(unicode_value=u'current')
ST_EdGrp._InitializeFacetMap(ST_EdGrp._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_EdGrp', ST_EdGrp)

# Atomic SimpleTypeDefinition
class ST_CombineBrackets (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Two Lines in One Enclosing Character Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_CombineBrackets')
    _Documentation = u'Two Lines in One Enclosing Character Type'
ST_CombineBrackets._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CombineBrackets, enum_prefix=None)
ST_CombineBrackets.none = ST_CombineBrackets._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_CombineBrackets.round = ST_CombineBrackets._CF_enumeration.addEnumeration(unicode_value=u'round')
ST_CombineBrackets.square = ST_CombineBrackets._CF_enumeration.addEnumeration(unicode_value=u'square')
ST_CombineBrackets.angle = ST_CombineBrackets._CF_enumeration.addEnumeration(unicode_value=u'angle')
ST_CombineBrackets.curly = ST_CombineBrackets._CF_enumeration.addEnumeration(unicode_value=u'curly')
ST_CombineBrackets._InitializeFacetMap(ST_CombineBrackets._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_CombineBrackets', ST_CombineBrackets)

# Atomic SimpleTypeDefinition
class ST_LongHexNumber (pyxb.binding.datatypes.hexBinary):

    """Eight Digit Hexadecimal Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_LongHexNumber')
    _Documentation = u'Eight Digit Hexadecimal Value'
ST_LongHexNumber._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(4L))
ST_LongHexNumber._InitializeFacetMap(ST_LongHexNumber._CF_length)
_Namespace_w.addCategoryObject('typeBinding', u'ST_LongHexNumber', ST_LongHexNumber)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_HpsMeasure (pyxb.binding.basis.STD_union):

    """Measurement in Half-Points"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_HpsMeasure')
    _Documentation = u'Measurement in Half-Points'

    _MemberTypes = ( _s.ST_UnsignedDecimalNumber, _s.ST_PositiveUniversalMeasure, )
ST_HpsMeasure._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_HpsMeasure._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_HpsMeasure)
ST_HpsMeasure._InitializeFacetMap(ST_HpsMeasure._CF_pattern,
   ST_HpsMeasure._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_HpsMeasure', ST_HpsMeasure)

# Atomic SimpleTypeDefinition
class ST_JcTable (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Table Alignment Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_JcTable')
    _Documentation = u'Table Alignment Type'
ST_JcTable._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_JcTable, enum_prefix=None)
ST_JcTable.center = ST_JcTable._CF_enumeration.addEnumeration(unicode_value=u'center')
ST_JcTable.end = ST_JcTable._CF_enumeration.addEnumeration(unicode_value=u'end')
ST_JcTable.left = ST_JcTable._CF_enumeration.addEnumeration(unicode_value=u'left')
ST_JcTable.right = ST_JcTable._CF_enumeration.addEnumeration(unicode_value=u'right')
ST_JcTable.start = ST_JcTable._CF_enumeration.addEnumeration(unicode_value=u'start')
ST_JcTable._InitializeFacetMap(ST_JcTable._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_JcTable', ST_JcTable)

# Atomic SimpleTypeDefinition
class ST_TblWidth (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Table Width Units"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_TblWidth')
    _Documentation = u'Table Width Units'
ST_TblWidth._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TblWidth, enum_prefix=None)
ST_TblWidth.nil = ST_TblWidth._CF_enumeration.addEnumeration(unicode_value=u'nil')
ST_TblWidth.pct = ST_TblWidth._CF_enumeration.addEnumeration(unicode_value=u'pct')
ST_TblWidth.dxa = ST_TblWidth._CF_enumeration.addEnumeration(unicode_value=u'dxa')
ST_TblWidth.auto = ST_TblWidth._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_TblWidth._InitializeFacetMap(ST_TblWidth._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_TblWidth', ST_TblWidth)

# Atomic SimpleTypeDefinition
class ST_UnqualifiedPercentage (pyxb.binding.datatypes.integer):

    """Percentage Value Without Percent Sign"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_UnqualifiedPercentage')
    _Documentation = u'Percentage Value Without Percent Sign'
ST_UnqualifiedPercentage._InitializeFacetMap()
_Namespace_w.addCategoryObject('typeBinding', u'ST_UnqualifiedPercentage', ST_UnqualifiedPercentage)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_DecimalNumberOrPercent (pyxb.binding.basis.STD_union):

    """Percentage Measurement"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_DecimalNumberOrPercent')
    _Documentation = u'Percentage Measurement'

    _MemberTypes = ( ST_UnqualifiedPercentage, _s.ST_Percentage, )
ST_DecimalNumberOrPercent._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_DecimalNumberOrPercent._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DecimalNumberOrPercent)
ST_DecimalNumberOrPercent._InitializeFacetMap(ST_DecimalNumberOrPercent._CF_pattern,
   ST_DecimalNumberOrPercent._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_DecimalNumberOrPercent', ST_DecimalNumberOrPercent)

# Atomic SimpleTypeDefinition
class ST_LineNumberRestart (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Line Numbering Restart Position"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_LineNumberRestart')
    _Documentation = u'Line Numbering Restart Position'
ST_LineNumberRestart._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LineNumberRestart, enum_prefix=None)
ST_LineNumberRestart.newPage = ST_LineNumberRestart._CF_enumeration.addEnumeration(unicode_value=u'newPage')
ST_LineNumberRestart.newSection = ST_LineNumberRestart._CF_enumeration.addEnumeration(unicode_value=u'newSection')
ST_LineNumberRestart.continuous = ST_LineNumberRestart._CF_enumeration.addEnumeration(unicode_value=u'continuous')
ST_LineNumberRestart._InitializeFacetMap(ST_LineNumberRestart._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_LineNumberRestart', ST_LineNumberRestart)

# Atomic SimpleTypeDefinition
class ST_Shd (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Shading Patterns"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_Shd')
    _Documentation = u'Shading Patterns'
ST_Shd._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Shd, enum_prefix=None)
ST_Shd.nil = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'nil')
ST_Shd.clear = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'clear')
ST_Shd.solid = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'solid')
ST_Shd.horzStripe = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'horzStripe')
ST_Shd.vertStripe = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'vertStripe')
ST_Shd.reverseDiagStripe = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'reverseDiagStripe')
ST_Shd.diagStripe = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'diagStripe')
ST_Shd.horzCross = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'horzCross')
ST_Shd.diagCross = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'diagCross')
ST_Shd.thinHorzStripe = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'thinHorzStripe')
ST_Shd.thinVertStripe = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'thinVertStripe')
ST_Shd.thinReverseDiagStripe = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'thinReverseDiagStripe')
ST_Shd.thinDiagStripe = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'thinDiagStripe')
ST_Shd.thinHorzCross = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'thinHorzCross')
ST_Shd.thinDiagCross = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'thinDiagCross')
ST_Shd.pct5 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct5')
ST_Shd.pct10 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct10')
ST_Shd.pct12 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct12')
ST_Shd.pct15 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct15')
ST_Shd.pct20 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct20')
ST_Shd.pct25 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct25')
ST_Shd.pct30 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct30')
ST_Shd.pct35 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct35')
ST_Shd.pct37 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct37')
ST_Shd.pct40 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct40')
ST_Shd.pct45 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct45')
ST_Shd.pct50 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct50')
ST_Shd.pct55 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct55')
ST_Shd.pct60 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct60')
ST_Shd.pct62 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct62')
ST_Shd.pct65 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct65')
ST_Shd.pct70 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct70')
ST_Shd.pct75 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct75')
ST_Shd.pct80 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct80')
ST_Shd.pct85 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct85')
ST_Shd.pct87 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct87')
ST_Shd.pct90 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct90')
ST_Shd.pct95 = ST_Shd._CF_enumeration.addEnumeration(unicode_value=u'pct95')
ST_Shd._InitializeFacetMap(ST_Shd._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_Shd', ST_Shd)

# Atomic SimpleTypeDefinition
class ST_Direction (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Bidirectional Direction Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_Direction')
    _Documentation = u'Bidirectional Direction Types'
ST_Direction._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Direction, enum_prefix=None)
ST_Direction.ltr = ST_Direction._CF_enumeration.addEnumeration(unicode_value=u'ltr')
ST_Direction.rtl = ST_Direction._CF_enumeration.addEnumeration(unicode_value=u'rtl')
ST_Direction._InitializeFacetMap(ST_Direction._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_Direction', ST_Direction)

# Atomic SimpleTypeDefinition
class ST_SpacingRule (pyxb.binding.datatypes.integer):

    """Spacing Rule"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'ST_SpacingRule')
    _Documentation = u'Spacing Rule'
ST_SpacingRule._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_SpacingRule, value=pyxb.binding.datatypes.integer(0L))
ST_SpacingRule._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_SpacingRule, value=pyxb.binding.datatypes.integer(4L))
ST_SpacingRule._InitializeFacetMap(ST_SpacingRule._CF_minInclusive,
   ST_SpacingRule._CF_maxInclusive)
_Namespace_m.addCategoryObject('typeBinding', u'ST_SpacingRule', ST_SpacingRule)

# Atomic SimpleTypeDefinition
class ST_Script (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Script"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'ST_Script')
    _Documentation = u'Script'
ST_Script._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Script, enum_prefix=None)
ST_Script.roman = ST_Script._CF_enumeration.addEnumeration(unicode_value=u'roman')
ST_Script.script = ST_Script._CF_enumeration.addEnumeration(unicode_value=u'script')
ST_Script.fraktur = ST_Script._CF_enumeration.addEnumeration(unicode_value=u'fraktur')
ST_Script.double_struck = ST_Script._CF_enumeration.addEnumeration(unicode_value=u'double-struck')
ST_Script.sans_serif = ST_Script._CF_enumeration.addEnumeration(unicode_value=u'sans-serif')
ST_Script.monospace = ST_Script._CF_enumeration.addEnumeration(unicode_value=u'monospace')
ST_Script._InitializeFacetMap(ST_Script._CF_enumeration)
_Namespace_m.addCategoryObject('typeBinding', u'ST_Script', ST_Script)

# Atomic SimpleTypeDefinition
class ST_RestartNumber (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Footnote/Endnote Numbering Restart Locations"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_RestartNumber')
    _Documentation = u'Footnote/Endnote Numbering Restart Locations'
ST_RestartNumber._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_RestartNumber, enum_prefix=None)
ST_RestartNumber.continuous = ST_RestartNumber._CF_enumeration.addEnumeration(unicode_value=u'continuous')
ST_RestartNumber.eachSect = ST_RestartNumber._CF_enumeration.addEnumeration(unicode_value=u'eachSect')
ST_RestartNumber.eachPage = ST_RestartNumber._CF_enumeration.addEnumeration(unicode_value=u'eachPage')
ST_RestartNumber._InitializeFacetMap(ST_RestartNumber._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_RestartNumber', ST_RestartNumber)

# Atomic SimpleTypeDefinition
class ST_Underline (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Underline Patterns"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_Underline')
    _Documentation = u'Underline Patterns'
ST_Underline._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Underline, enum_prefix=None)
ST_Underline.single = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'single')
ST_Underline.words = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'words')
ST_Underline.double = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'double')
ST_Underline.thick = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'thick')
ST_Underline.dotted = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'dotted')
ST_Underline.dottedHeavy = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'dottedHeavy')
ST_Underline.dash = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'dash')
ST_Underline.dashedHeavy = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'dashedHeavy')
ST_Underline.dashLong = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'dashLong')
ST_Underline.dashLongHeavy = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'dashLongHeavy')
ST_Underline.dotDash = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'dotDash')
ST_Underline.dashDotHeavy = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'dashDotHeavy')
ST_Underline.dotDotDash = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'dotDotDash')
ST_Underline.dashDotDotHeavy = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'dashDotDotHeavy')
ST_Underline.wave = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'wave')
ST_Underline.wavyHeavy = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'wavyHeavy')
ST_Underline.wavyDouble = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'wavyDouble')
ST_Underline.none = ST_Underline._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_Underline._InitializeFacetMap(ST_Underline._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_Underline', ST_Underline)

# Atomic SimpleTypeDefinition
class ST_TopBot (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Top-Bottom"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'ST_TopBot')
    _Documentation = u'Top-Bottom'
ST_TopBot._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TopBot, enum_prefix=None)
ST_TopBot.top = ST_TopBot._CF_enumeration.addEnumeration(unicode_value=u'top')
ST_TopBot.bot = ST_TopBot._CF_enumeration.addEnumeration(unicode_value=u'bot')
ST_TopBot._InitializeFacetMap(ST_TopBot._CF_enumeration)
_Namespace_m.addCategoryObject('typeBinding', u'ST_TopBot', ST_TopBot)

# Atomic SimpleTypeDefinition
class ST_Theme (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Theme Font"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_Theme')
    _Documentation = u'Theme Font'
ST_Theme._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Theme, enum_prefix=None)
ST_Theme.majorEastAsia = ST_Theme._CF_enumeration.addEnumeration(unicode_value=u'majorEastAsia')
ST_Theme.majorBidi = ST_Theme._CF_enumeration.addEnumeration(unicode_value=u'majorBidi')
ST_Theme.majorAscii = ST_Theme._CF_enumeration.addEnumeration(unicode_value=u'majorAscii')
ST_Theme.majorHAnsi = ST_Theme._CF_enumeration.addEnumeration(unicode_value=u'majorHAnsi')
ST_Theme.minorEastAsia = ST_Theme._CF_enumeration.addEnumeration(unicode_value=u'minorEastAsia')
ST_Theme.minorBidi = ST_Theme._CF_enumeration.addEnumeration(unicode_value=u'minorBidi')
ST_Theme.minorAscii = ST_Theme._CF_enumeration.addEnumeration(unicode_value=u'minorAscii')
ST_Theme.minorHAnsi = ST_Theme._CF_enumeration.addEnumeration(unicode_value=u'minorHAnsi')
ST_Theme._InitializeFacetMap(ST_Theme._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_Theme', ST_Theme)

# Atomic SimpleTypeDefinition
class ST_Hint (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Font Type Hint"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_Hint')
    _Documentation = u'Font Type Hint'
ST_Hint._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Hint, enum_prefix=None)
ST_Hint.default = ST_Hint._CF_enumeration.addEnumeration(unicode_value=u'default')
ST_Hint.eastAsia = ST_Hint._CF_enumeration.addEnumeration(unicode_value=u'eastAsia')
ST_Hint.cs = ST_Hint._CF_enumeration.addEnumeration(unicode_value=u'cs')
ST_Hint._InitializeFacetMap(ST_Hint._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_Hint', ST_Hint)

# Atomic SimpleTypeDefinition
class ST_ShortHexNumber (pyxb.binding.datatypes.hexBinary):

    """Four Digit Hexadecimal Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_ShortHexNumber')
    _Documentation = u'Four Digit Hexadecimal Value'
ST_ShortHexNumber._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(2L))
ST_ShortHexNumber._InitializeFacetMap(ST_ShortHexNumber._CF_length)
_Namespace_w.addCategoryObject('typeBinding', u'ST_ShortHexNumber', ST_ShortHexNumber)

# Atomic SimpleTypeDefinition
class ST_Cnf (pyxb.binding.datatypes.string):

    """Conditional Formatting Bitmask"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_Cnf')
    _Documentation = u'Conditional Formatting Bitmask'
ST_Cnf._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(12L))
ST_Cnf._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_Cnf._CF_pattern.addPattern(pattern=u'[01]*')
ST_Cnf._InitializeFacetMap(ST_Cnf._CF_length,
   ST_Cnf._CF_pattern)
_Namespace_w.addCategoryObject('typeBinding', u'ST_Cnf', ST_Cnf)

# Atomic SimpleTypeDefinition
class ST_InfoTextType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Help or Status Text Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_InfoTextType')
    _Documentation = u'Help or Status Text Type'
ST_InfoTextType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_InfoTextType, enum_prefix=None)
ST_InfoTextType.text = ST_InfoTextType._CF_enumeration.addEnumeration(unicode_value=u'text')
ST_InfoTextType.autoText = ST_InfoTextType._CF_enumeration.addEnumeration(unicode_value=u'autoText')
ST_InfoTextType._InitializeFacetMap(ST_InfoTextType._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_InfoTextType', ST_InfoTextType)

# Atomic SimpleTypeDefinition
class ST_FFHelpTextVal (pyxb.binding.datatypes.string):

    """Help Text Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_FFHelpTextVal')
    _Documentation = u'Help Text Value'
ST_FFHelpTextVal._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(256L))
ST_FFHelpTextVal._InitializeFacetMap(ST_FFHelpTextVal._CF_maxLength)
_Namespace_w.addCategoryObject('typeBinding', u'ST_FFHelpTextVal', ST_FFHelpTextVal)

# Atomic SimpleTypeDefinition
class ST_Jc (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Justification"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'ST_Jc')
    _Documentation = u'Justification'
ST_Jc._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Jc, enum_prefix=None)
ST_Jc.left = ST_Jc._CF_enumeration.addEnumeration(unicode_value=u'left')
ST_Jc.right = ST_Jc._CF_enumeration.addEnumeration(unicode_value=u'right')
ST_Jc.center = ST_Jc._CF_enumeration.addEnumeration(unicode_value=u'center')
ST_Jc.centerGroup = ST_Jc._CF_enumeration.addEnumeration(unicode_value=u'centerGroup')
ST_Jc._InitializeFacetMap(ST_Jc._CF_enumeration)
_Namespace_m.addCategoryObject('typeBinding', u'ST_Jc', ST_Jc)

# Atomic SimpleTypeDefinition
class ST_PTabAlignment (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Absolute Position Tab Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_PTabAlignment')
    _Documentation = u'Absolute Position Tab Alignment'
ST_PTabAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PTabAlignment, enum_prefix=None)
ST_PTabAlignment.left = ST_PTabAlignment._CF_enumeration.addEnumeration(unicode_value=u'left')
ST_PTabAlignment.center = ST_PTabAlignment._CF_enumeration.addEnumeration(unicode_value=u'center')
ST_PTabAlignment.right = ST_PTabAlignment._CF_enumeration.addEnumeration(unicode_value=u'right')
ST_PTabAlignment._InitializeFacetMap(ST_PTabAlignment._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_PTabAlignment', ST_PTabAlignment)

# Atomic SimpleTypeDefinition
class ST_PTabLeader (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Absolute Position Tab Leader Character"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_PTabLeader')
    _Documentation = u'Absolute Position Tab Leader Character'
ST_PTabLeader._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PTabLeader, enum_prefix=None)
ST_PTabLeader.none = ST_PTabLeader._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_PTabLeader.dot = ST_PTabLeader._CF_enumeration.addEnumeration(unicode_value=u'dot')
ST_PTabLeader.hyphen = ST_PTabLeader._CF_enumeration.addEnumeration(unicode_value=u'hyphen')
ST_PTabLeader.underscore = ST_PTabLeader._CF_enumeration.addEnumeration(unicode_value=u'underscore')
ST_PTabLeader.middleDot = ST_PTabLeader._CF_enumeration.addEnumeration(unicode_value=u'middleDot')
ST_PTabLeader._InitializeFacetMap(ST_PTabLeader._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_PTabLeader', ST_PTabLeader)

# Atomic SimpleTypeDefinition
class ST_PTabRelativeTo (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Absolute Position Tab Positioning Base"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_PTabRelativeTo')
    _Documentation = u'Absolute Position Tab Positioning Base'
ST_PTabRelativeTo._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PTabRelativeTo, enum_prefix=None)
ST_PTabRelativeTo.margin = ST_PTabRelativeTo._CF_enumeration.addEnumeration(unicode_value=u'margin')
ST_PTabRelativeTo.indent = ST_PTabRelativeTo._CF_enumeration.addEnumeration(unicode_value=u'indent')
ST_PTabRelativeTo._InitializeFacetMap(ST_PTabRelativeTo._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_PTabRelativeTo', ST_PTabRelativeTo)

# Atomic SimpleTypeDefinition
class ST_Shp (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Shape (Delimiters)"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'ST_Shp')
    _Documentation = u'Shape (Delimiters)'
ST_Shp._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Shp, enum_prefix=None)
ST_Shp.centered = ST_Shp._CF_enumeration.addEnumeration(unicode_value=u'centered')
ST_Shp.match = ST_Shp._CF_enumeration.addEnumeration(unicode_value=u'match')
ST_Shp._InitializeFacetMap(ST_Shp._CF_enumeration)
_Namespace_m.addCategoryObject('typeBinding', u'ST_Shp', ST_Shp)

# Atomic SimpleTypeDefinition
class ST_Em (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Emphasis Mark Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_Em')
    _Documentation = u'Emphasis Mark Type'
ST_Em._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Em, enum_prefix=None)
ST_Em.none = ST_Em._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_Em.dot = ST_Em._CF_enumeration.addEnumeration(unicode_value=u'dot')
ST_Em.comma = ST_Em._CF_enumeration.addEnumeration(unicode_value=u'comma')
ST_Em.circle = ST_Em._CF_enumeration.addEnumeration(unicode_value=u'circle')
ST_Em.underDot = ST_Em._CF_enumeration.addEnumeration(unicode_value=u'underDot')
ST_Em._InitializeFacetMap(ST_Em._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_Em', ST_Em)

# Atomic SimpleTypeDefinition
class ST_BrClear (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Line Break Text Wrapping Restart Location"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_BrClear')
    _Documentation = u'Line Break Text Wrapping Restart Location'
ST_BrClear._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BrClear, enum_prefix=None)
ST_BrClear.none = ST_BrClear._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_BrClear.left = ST_BrClear._CF_enumeration.addEnumeration(unicode_value=u'left')
ST_BrClear.right = ST_BrClear._CF_enumeration.addEnumeration(unicode_value=u'right')
ST_BrClear.all = ST_BrClear._CF_enumeration.addEnumeration(unicode_value=u'all')
ST_BrClear._InitializeFacetMap(ST_BrClear._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_BrClear', ST_BrClear)

# Atomic SimpleTypeDefinition
class ST_BrType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Break Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_BrType')
    _Documentation = u'Break Types'
ST_BrType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BrType, enum_prefix=None)
ST_BrType.page = ST_BrType._CF_enumeration.addEnumeration(unicode_value=u'page')
ST_BrType.column = ST_BrType._CF_enumeration.addEnumeration(unicode_value=u'column')
ST_BrType.textWrapping = ST_BrType._CF_enumeration.addEnumeration(unicode_value=u'textWrapping')
ST_BrType._InitializeFacetMap(ST_BrType._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_BrType', ST_BrType)

# Atomic SimpleTypeDefinition
class ST_VAnchor (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Vertical Anchor Location"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_VAnchor')
    _Documentation = u'Vertical Anchor Location'
ST_VAnchor._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_VAnchor, enum_prefix=None)
ST_VAnchor.text = ST_VAnchor._CF_enumeration.addEnumeration(unicode_value=u'text')
ST_VAnchor.margin = ST_VAnchor._CF_enumeration.addEnumeration(unicode_value=u'margin')
ST_VAnchor.page = ST_VAnchor._CF_enumeration.addEnumeration(unicode_value=u'page')
ST_VAnchor._InitializeFacetMap(ST_VAnchor._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_VAnchor', ST_VAnchor)

# Atomic SimpleTypeDefinition
class ST_HAnchor (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Horizontal Anchor Location"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_HAnchor')
    _Documentation = u'Horizontal Anchor Location'
ST_HAnchor._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_HAnchor, enum_prefix=None)
ST_HAnchor.text = ST_HAnchor._CF_enumeration.addEnumeration(unicode_value=u'text')
ST_HAnchor.margin = ST_HAnchor._CF_enumeration.addEnumeration(unicode_value=u'margin')
ST_HAnchor.page = ST_HAnchor._CF_enumeration.addEnumeration(unicode_value=u'page')
ST_HAnchor._InitializeFacetMap(ST_HAnchor._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_HAnchor', ST_HAnchor)

# Atomic SimpleTypeDefinition
class ST_HighlightColor (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Text Highlight Colors"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_HighlightColor')
    _Documentation = u'Text Highlight Colors'
ST_HighlightColor._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_HighlightColor, enum_prefix=None)
ST_HighlightColor.black = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'black')
ST_HighlightColor.blue = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'blue')
ST_HighlightColor.cyan = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'cyan')
ST_HighlightColor.green = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'green')
ST_HighlightColor.magenta = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'magenta')
ST_HighlightColor.red = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'red')
ST_HighlightColor.yellow = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'yellow')
ST_HighlightColor.white = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'white')
ST_HighlightColor.darkBlue = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'darkBlue')
ST_HighlightColor.darkCyan = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'darkCyan')
ST_HighlightColor.darkGreen = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'darkGreen')
ST_HighlightColor.darkMagenta = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'darkMagenta')
ST_HighlightColor.darkRed = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'darkRed')
ST_HighlightColor.darkYellow = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'darkYellow')
ST_HighlightColor.darkGray = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'darkGray')
ST_HighlightColor.lightGray = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'lightGray')
ST_HighlightColor.none = ST_HighlightColor._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_HighlightColor._InitializeFacetMap(ST_HighlightColor._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_HighlightColor', ST_HighlightColor)

# Atomic SimpleTypeDefinition
class ST_FFTextType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Text Box Form Field Type Values"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_FFTextType')
    _Documentation = u'Text Box Form Field Type Values'
ST_FFTextType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FFTextType, enum_prefix=None)
ST_FFTextType.regular = ST_FFTextType._CF_enumeration.addEnumeration(unicode_value=u'regular')
ST_FFTextType.number = ST_FFTextType._CF_enumeration.addEnumeration(unicode_value=u'number')
ST_FFTextType.date = ST_FFTextType._CF_enumeration.addEnumeration(unicode_value=u'date')
ST_FFTextType.currentTime = ST_FFTextType._CF_enumeration.addEnumeration(unicode_value=u'currentTime')
ST_FFTextType.currentDate = ST_FFTextType._CF_enumeration.addEnumeration(unicode_value=u'currentDate')
ST_FFTextType.calculated = ST_FFTextType._CF_enumeration.addEnumeration(unicode_value=u'calculated')
ST_FFTextType._InitializeFacetMap(ST_FFTextType._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_FFTextType', ST_FFTextType)

# Atomic SimpleTypeDefinition
class ST_DocProtect (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Document Protection Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_DocProtect')
    _Documentation = u'Document Protection Types'
ST_DocProtect._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DocProtect, enum_prefix=None)
ST_DocProtect.none = ST_DocProtect._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_DocProtect.readOnly = ST_DocProtect._CF_enumeration.addEnumeration(unicode_value=u'readOnly')
ST_DocProtect.comments = ST_DocProtect._CF_enumeration.addEnumeration(unicode_value=u'comments')
ST_DocProtect.trackedChanges = ST_DocProtect._CF_enumeration.addEnumeration(unicode_value=u'trackedChanges')
ST_DocProtect.forms = ST_DocProtect._CF_enumeration.addEnumeration(unicode_value=u'forms')
ST_DocProtect._InitializeFacetMap(ST_DocProtect._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_DocProtect', ST_DocProtect)

# Atomic SimpleTypeDefinition
class ST_Integer2 (pyxb.binding.datatypes.integer):

    """Integer value (-2 to 2)"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'ST_Integer2')
    _Documentation = u'Integer value (-2 to 2)'
ST_Integer2._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_Integer2, value=pyxb.binding.datatypes.integer(-2L))
ST_Integer2._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_Integer2, value=pyxb.binding.datatypes.integer(2L))
ST_Integer2._InitializeFacetMap(ST_Integer2._CF_minInclusive,
   ST_Integer2._CF_maxInclusive)
_Namespace_m.addCategoryObject('typeBinding', u'ST_Integer2', ST_Integer2)

# Atomic SimpleTypeDefinition
class ST_VerticalJc (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Vertical Alignment Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_VerticalJc')
    _Documentation = u'Vertical Alignment Type'
ST_VerticalJc._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_VerticalJc, enum_prefix=None)
ST_VerticalJc.top = ST_VerticalJc._CF_enumeration.addEnumeration(unicode_value=u'top')
ST_VerticalJc.center = ST_VerticalJc._CF_enumeration.addEnumeration(unicode_value=u'center')
ST_VerticalJc.both = ST_VerticalJc._CF_enumeration.addEnumeration(unicode_value=u'both')
ST_VerticalJc.bottom = ST_VerticalJc._CF_enumeration.addEnumeration(unicode_value=u'bottom')
ST_VerticalJc._InitializeFacetMap(ST_VerticalJc._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_VerticalJc', ST_VerticalJc)

# Atomic SimpleTypeDefinition
class ST_TextEffect (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Animated Text Effects"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_TextEffect')
    _Documentation = u'Animated Text Effects'
ST_TextEffect._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextEffect, enum_prefix=None)
ST_TextEffect.blinkBackground = ST_TextEffect._CF_enumeration.addEnumeration(unicode_value=u'blinkBackground')
ST_TextEffect.lights = ST_TextEffect._CF_enumeration.addEnumeration(unicode_value=u'lights')
ST_TextEffect.antsBlack = ST_TextEffect._CF_enumeration.addEnumeration(unicode_value=u'antsBlack')
ST_TextEffect.antsRed = ST_TextEffect._CF_enumeration.addEnumeration(unicode_value=u'antsRed')
ST_TextEffect.shimmer = ST_TextEffect._CF_enumeration.addEnumeration(unicode_value=u'shimmer')
ST_TextEffect.sparkle = ST_TextEffect._CF_enumeration.addEnumeration(unicode_value=u'sparkle')
ST_TextEffect.none = ST_TextEffect._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TextEffect._InitializeFacetMap(ST_TextEffect._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_TextEffect', ST_TextEffect)

# Atomic SimpleTypeDefinition
class ST_Jc_ (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Horizontal Alignment Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_Jc')
    _Documentation = u'Horizontal Alignment Type'
ST_Jc_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Jc_, enum_prefix=None)
ST_Jc_.start = ST_Jc_._CF_enumeration.addEnumeration(unicode_value=u'start')
ST_Jc_.center = ST_Jc_._CF_enumeration.addEnumeration(unicode_value=u'center')
ST_Jc_.end = ST_Jc_._CF_enumeration.addEnumeration(unicode_value=u'end')
ST_Jc_.both = ST_Jc_._CF_enumeration.addEnumeration(unicode_value=u'both')
ST_Jc_.mediumKashida = ST_Jc_._CF_enumeration.addEnumeration(unicode_value=u'mediumKashida')
ST_Jc_.distribute = ST_Jc_._CF_enumeration.addEnumeration(unicode_value=u'distribute')
ST_Jc_.numTab = ST_Jc_._CF_enumeration.addEnumeration(unicode_value=u'numTab')
ST_Jc_.highKashida = ST_Jc_._CF_enumeration.addEnumeration(unicode_value=u'highKashida')
ST_Jc_.lowKashida = ST_Jc_._CF_enumeration.addEnumeration(unicode_value=u'lowKashida')
ST_Jc_.thaiDistribute = ST_Jc_._CF_enumeration.addEnumeration(unicode_value=u'thaiDistribute')
ST_Jc_.left = ST_Jc_._CF_enumeration.addEnumeration(unicode_value=u'left')
ST_Jc_.right = ST_Jc_._CF_enumeration.addEnumeration(unicode_value=u'right')
ST_Jc_._InitializeFacetMap(ST_Jc_._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_Jc', ST_Jc_)

# Atomic SimpleTypeDefinition
class ST_TextDirection (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Text Flow Direction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_TextDirection')
    _Documentation = u'Text Flow Direction'
ST_TextDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextDirection, enum_prefix=None)
ST_TextDirection.tb = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'tb')
ST_TextDirection.rl = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'rl')
ST_TextDirection.lr = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'lr')
ST_TextDirection.tbV = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'tbV')
ST_TextDirection.rlV = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'rlV')
ST_TextDirection.lrV = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'lrV')
ST_TextDirection.btLr = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'btLr')
ST_TextDirection.lrTb = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'lrTb')
ST_TextDirection.lrTbV = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'lrTbV')
ST_TextDirection.tbLrV = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'tbLrV')
ST_TextDirection.tbRl = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'tbRl')
ST_TextDirection.tbRlV = ST_TextDirection._CF_enumeration.addEnumeration(unicode_value=u'tbRlV')
ST_TextDirection._InitializeFacetMap(ST_TextDirection._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_TextDirection', ST_TextDirection)

# Union SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_SignedHpsMeasure (pyxb.binding.basis.STD_union):

    """Signed Measurement in Half-Points"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_SignedHpsMeasure')
    _Documentation = u'Signed Measurement in Half-Points'

    _MemberTypes = ( pyxb.binding.datatypes.integer, _s.ST_UniversalMeasure, )
ST_SignedHpsMeasure._CF_pattern = pyxb.binding.facets.CF_pattern()
ST_SignedHpsMeasure._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SignedHpsMeasure)
ST_SignedHpsMeasure._InitializeFacetMap(ST_SignedHpsMeasure._CF_pattern,
   ST_SignedHpsMeasure._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_SignedHpsMeasure', ST_SignedHpsMeasure)

# Atomic SimpleTypeDefinition
class ST_WmlColorSchemeIndex (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Theme Color Reference"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_WmlColorSchemeIndex')
    _Documentation = u'Theme Color Reference'
ST_WmlColorSchemeIndex._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_WmlColorSchemeIndex, enum_prefix=None)
ST_WmlColorSchemeIndex.dark1 = ST_WmlColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'dark1')
ST_WmlColorSchemeIndex.light1 = ST_WmlColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'light1')
ST_WmlColorSchemeIndex.dark2 = ST_WmlColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'dark2')
ST_WmlColorSchemeIndex.light2 = ST_WmlColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'light2')
ST_WmlColorSchemeIndex.accent1 = ST_WmlColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent1')
ST_WmlColorSchemeIndex.accent2 = ST_WmlColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent2')
ST_WmlColorSchemeIndex.accent3 = ST_WmlColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent3')
ST_WmlColorSchemeIndex.accent4 = ST_WmlColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent4')
ST_WmlColorSchemeIndex.accent5 = ST_WmlColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent5')
ST_WmlColorSchemeIndex.accent6 = ST_WmlColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'accent6')
ST_WmlColorSchemeIndex.hyperlink = ST_WmlColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'hyperlink')
ST_WmlColorSchemeIndex.followedHyperlink = ST_WmlColorSchemeIndex._CF_enumeration.addEnumeration(unicode_value=u'followedHyperlink')
ST_WmlColorSchemeIndex._InitializeFacetMap(ST_WmlColorSchemeIndex._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_WmlColorSchemeIndex', ST_WmlColorSchemeIndex)

# Atomic SimpleTypeDefinition
class ST_TblLayoutType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Table Layout Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_TblLayoutType')
    _Documentation = u'Table Layout Type'
ST_TblLayoutType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TblLayoutType, enum_prefix=None)
ST_TblLayoutType.fixed = ST_TblLayoutType._CF_enumeration.addEnumeration(unicode_value=u'fixed')
ST_TblLayoutType.autofit = ST_TblLayoutType._CF_enumeration.addEnumeration(unicode_value=u'autofit')
ST_TblLayoutType._InitializeFacetMap(ST_TblLayoutType._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_TblLayoutType', ST_TblLayoutType)

# Atomic SimpleTypeDefinition
class ST_StyleSort (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Style Sort Settings"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_StyleSort')
    _Documentation = u'Style Sort Settings'
ST_StyleSort._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_StyleSort, enum_prefix=None)
ST_StyleSort.name = ST_StyleSort._CF_enumeration.addEnumeration(unicode_value=u'name')
ST_StyleSort.priority = ST_StyleSort._CF_enumeration.addEnumeration(unicode_value=u'priority')
ST_StyleSort.default = ST_StyleSort._CF_enumeration.addEnumeration(unicode_value=u'default')
ST_StyleSort.font = ST_StyleSort._CF_enumeration.addEnumeration(unicode_value=u'font')
ST_StyleSort.basedOn = ST_StyleSort._CF_enumeration.addEnumeration(unicode_value=u'basedOn')
ST_StyleSort.type = ST_StyleSort._CF_enumeration.addEnumeration(unicode_value=u'type')
ST_StyleSort.n0000 = ST_StyleSort._CF_enumeration.addEnumeration(unicode_value=u'0000')
ST_StyleSort.n0001 = ST_StyleSort._CF_enumeration.addEnumeration(unicode_value=u'0001')
ST_StyleSort.n0002 = ST_StyleSort._CF_enumeration.addEnumeration(unicode_value=u'0002')
ST_StyleSort.n0003 = ST_StyleSort._CF_enumeration.addEnumeration(unicode_value=u'0003')
ST_StyleSort.n0004 = ST_StyleSort._CF_enumeration.addEnumeration(unicode_value=u'0004')
ST_StyleSort.n0005 = ST_StyleSort._CF_enumeration.addEnumeration(unicode_value=u'0005')
ST_StyleSort._InitializeFacetMap(ST_StyleSort._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_StyleSort', ST_StyleSort)

# Atomic SimpleTypeDefinition
class ST_View (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Document View Values"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_View')
    _Documentation = u'Document View Values'
ST_View._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_View, enum_prefix=None)
ST_View.none = ST_View._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_View.print_ = ST_View._CF_enumeration.addEnumeration(unicode_value=u'print')
ST_View.outline = ST_View._CF_enumeration.addEnumeration(unicode_value=u'outline')
ST_View.masterPages = ST_View._CF_enumeration.addEnumeration(unicode_value=u'masterPages')
ST_View.normal = ST_View._CF_enumeration.addEnumeration(unicode_value=u'normal')
ST_View.web = ST_View._CF_enumeration.addEnumeration(unicode_value=u'web')
ST_View._InitializeFacetMap(ST_View._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_View', ST_View)

# Atomic SimpleTypeDefinition
class ST_MailMergeOdsoFMDFieldType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Merge Field Mapping Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_MailMergeOdsoFMDFieldType')
    _Documentation = u'Merge Field Mapping Types'
ST_MailMergeOdsoFMDFieldType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_MailMergeOdsoFMDFieldType, enum_prefix=None)
ST_MailMergeOdsoFMDFieldType.null = ST_MailMergeOdsoFMDFieldType._CF_enumeration.addEnumeration(unicode_value=u'null')
ST_MailMergeOdsoFMDFieldType.dbColumn = ST_MailMergeOdsoFMDFieldType._CF_enumeration.addEnumeration(unicode_value=u'dbColumn')
ST_MailMergeOdsoFMDFieldType._InitializeFacetMap(ST_MailMergeOdsoFMDFieldType._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_MailMergeOdsoFMDFieldType', ST_MailMergeOdsoFMDFieldType)

# Atomic SimpleTypeDefinition
class ST_PageOrientation (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Page Orientation"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_PageOrientation')
    _Documentation = u'Page Orientation'
ST_PageOrientation._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PageOrientation, enum_prefix=None)
ST_PageOrientation.portrait = ST_PageOrientation._CF_enumeration.addEnumeration(unicode_value=u'portrait')
ST_PageOrientation.landscape = ST_PageOrientation._CF_enumeration.addEnumeration(unicode_value=u'landscape')
ST_PageOrientation._InitializeFacetMap(ST_PageOrientation._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_PageOrientation', ST_PageOrientation)

# Atomic SimpleTypeDefinition
class ST_Pitch (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Font Pitch Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_Pitch')
    _Documentation = u'Font Pitch Value'
ST_Pitch._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Pitch, enum_prefix=None)
ST_Pitch.fixed = ST_Pitch._CF_enumeration.addEnumeration(unicode_value=u'fixed')
ST_Pitch.variable = ST_Pitch._CF_enumeration.addEnumeration(unicode_value=u'variable')
ST_Pitch.default = ST_Pitch._CF_enumeration.addEnumeration(unicode_value=u'default')
ST_Pitch._InitializeFacetMap(ST_Pitch._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_Pitch', ST_Pitch)

# Atomic SimpleTypeDefinition
class ST_TblStyleOverrideType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Conditional Table Style Formatting Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_TblStyleOverrideType')
    _Documentation = u'Conditional Table Style Formatting Types'
ST_TblStyleOverrideType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TblStyleOverrideType, enum_prefix=None)
ST_TblStyleOverrideType.wholeTable = ST_TblStyleOverrideType._CF_enumeration.addEnumeration(unicode_value=u'wholeTable')
ST_TblStyleOverrideType.firstRow = ST_TblStyleOverrideType._CF_enumeration.addEnumeration(unicode_value=u'firstRow')
ST_TblStyleOverrideType.lastRow = ST_TblStyleOverrideType._CF_enumeration.addEnumeration(unicode_value=u'lastRow')
ST_TblStyleOverrideType.firstCol = ST_TblStyleOverrideType._CF_enumeration.addEnumeration(unicode_value=u'firstCol')
ST_TblStyleOverrideType.lastCol = ST_TblStyleOverrideType._CF_enumeration.addEnumeration(unicode_value=u'lastCol')
ST_TblStyleOverrideType.band1Vert = ST_TblStyleOverrideType._CF_enumeration.addEnumeration(unicode_value=u'band1Vert')
ST_TblStyleOverrideType.band2Vert = ST_TblStyleOverrideType._CF_enumeration.addEnumeration(unicode_value=u'band2Vert')
ST_TblStyleOverrideType.band1Horz = ST_TblStyleOverrideType._CF_enumeration.addEnumeration(unicode_value=u'band1Horz')
ST_TblStyleOverrideType.band2Horz = ST_TblStyleOverrideType._CF_enumeration.addEnumeration(unicode_value=u'band2Horz')
ST_TblStyleOverrideType.neCell = ST_TblStyleOverrideType._CF_enumeration.addEnumeration(unicode_value=u'neCell')
ST_TblStyleOverrideType.nwCell = ST_TblStyleOverrideType._CF_enumeration.addEnumeration(unicode_value=u'nwCell')
ST_TblStyleOverrideType.seCell = ST_TblStyleOverrideType._CF_enumeration.addEnumeration(unicode_value=u'seCell')
ST_TblStyleOverrideType.swCell = ST_TblStyleOverrideType._CF_enumeration.addEnumeration(unicode_value=u'swCell')
ST_TblStyleOverrideType._InitializeFacetMap(ST_TblStyleOverrideType._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_TblStyleOverrideType', ST_TblStyleOverrideType)

# Atomic SimpleTypeDefinition
class ST_TabTlc (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Custom Tab Stop Leader Character"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_TabTlc')
    _Documentation = u'Custom Tab Stop Leader Character'
ST_TabTlc._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TabTlc, enum_prefix=None)
ST_TabTlc.none = ST_TabTlc._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TabTlc.dot = ST_TabTlc._CF_enumeration.addEnumeration(unicode_value=u'dot')
ST_TabTlc.hyphen = ST_TabTlc._CF_enumeration.addEnumeration(unicode_value=u'hyphen')
ST_TabTlc.underscore = ST_TabTlc._CF_enumeration.addEnumeration(unicode_value=u'underscore')
ST_TabTlc.heavy = ST_TabTlc._CF_enumeration.addEnumeration(unicode_value=u'heavy')
ST_TabTlc.middleDot = ST_TabTlc._CF_enumeration.addEnumeration(unicode_value=u'middleDot')
ST_TabTlc._InitializeFacetMap(ST_TabTlc._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_TabTlc', ST_TabTlc)

# Atomic SimpleTypeDefinition
class ST_TabJc (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Custom Tab Stop Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_TabJc')
    _Documentation = u'Custom Tab Stop Type'
ST_TabJc._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TabJc, enum_prefix=None)
ST_TabJc.clear = ST_TabJc._CF_enumeration.addEnumeration(unicode_value=u'clear')
ST_TabJc.start = ST_TabJc._CF_enumeration.addEnumeration(unicode_value=u'start')
ST_TabJc.center = ST_TabJc._CF_enumeration.addEnumeration(unicode_value=u'center')
ST_TabJc.end = ST_TabJc._CF_enumeration.addEnumeration(unicode_value=u'end')
ST_TabJc.decimal = ST_TabJc._CF_enumeration.addEnumeration(unicode_value=u'decimal')
ST_TabJc.bar = ST_TabJc._CF_enumeration.addEnumeration(unicode_value=u'bar')
ST_TabJc.num = ST_TabJc._CF_enumeration.addEnumeration(unicode_value=u'num')
ST_TabJc.left = ST_TabJc._CF_enumeration.addEnumeration(unicode_value=u'left')
ST_TabJc.right = ST_TabJc._CF_enumeration.addEnumeration(unicode_value=u'right')
ST_TabJc._InitializeFacetMap(ST_TabJc._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_TabJc', ST_TabJc)

# Atomic SimpleTypeDefinition
class ST_FType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Fraction Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'ST_FType')
    _Documentation = u'Fraction Type'
ST_FType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FType, enum_prefix=None)
ST_FType.bar = ST_FType._CF_enumeration.addEnumeration(unicode_value=u'bar')
ST_FType.skw = ST_FType._CF_enumeration.addEnumeration(unicode_value=u'skw')
ST_FType.lin = ST_FType._CF_enumeration.addEnumeration(unicode_value=u'lin')
ST_FType.noBar = ST_FType._CF_enumeration.addEnumeration(unicode_value=u'noBar')
ST_FType._InitializeFacetMap(ST_FType._CF_enumeration)
_Namespace_m.addCategoryObject('typeBinding', u'ST_FType', ST_FType)

# Atomic SimpleTypeDefinition
class ST_FontFamily (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Font Family Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_FontFamily')
    _Documentation = u'Font Family Value'
ST_FontFamily._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FontFamily, enum_prefix=None)
ST_FontFamily.decorative = ST_FontFamily._CF_enumeration.addEnumeration(unicode_value=u'decorative')
ST_FontFamily.modern = ST_FontFamily._CF_enumeration.addEnumeration(unicode_value=u'modern')
ST_FontFamily.roman = ST_FontFamily._CF_enumeration.addEnumeration(unicode_value=u'roman')
ST_FontFamily.script = ST_FontFamily._CF_enumeration.addEnumeration(unicode_value=u'script')
ST_FontFamily.swiss = ST_FontFamily._CF_enumeration.addEnumeration(unicode_value=u'swiss')
ST_FontFamily.auto = ST_FontFamily._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_FontFamily._InitializeFacetMap(ST_FontFamily._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_FontFamily', ST_FontFamily)

# Atomic SimpleTypeDefinition
class ST_PageBorderDisplay (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Page Border Display Options"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_PageBorderDisplay')
    _Documentation = u'Page Border Display Options'
ST_PageBorderDisplay._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PageBorderDisplay, enum_prefix=None)
ST_PageBorderDisplay.allPages = ST_PageBorderDisplay._CF_enumeration.addEnumeration(unicode_value=u'allPages')
ST_PageBorderDisplay.firstPage = ST_PageBorderDisplay._CF_enumeration.addEnumeration(unicode_value=u'firstPage')
ST_PageBorderDisplay.notFirstPage = ST_PageBorderDisplay._CF_enumeration.addEnumeration(unicode_value=u'notFirstPage')
ST_PageBorderDisplay._InitializeFacetMap(ST_PageBorderDisplay._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_PageBorderDisplay', ST_PageBorderDisplay)

# Atomic SimpleTypeDefinition
class ST_PageBorderZOrder (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Page Border Z-Order"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_PageBorderZOrder')
    _Documentation = u'Page Border Z-Order'
ST_PageBorderZOrder._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PageBorderZOrder, enum_prefix=None)
ST_PageBorderZOrder.front = ST_PageBorderZOrder._CF_enumeration.addEnumeration(unicode_value=u'front')
ST_PageBorderZOrder.back = ST_PageBorderZOrder._CF_enumeration.addEnumeration(unicode_value=u'back')
ST_PageBorderZOrder._InitializeFacetMap(ST_PageBorderZOrder._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_PageBorderZOrder', ST_PageBorderZOrder)

# Atomic SimpleTypeDefinition
class ST_PageBorderOffset (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Page Border Positioning Base"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_PageBorderOffset')
    _Documentation = u'Page Border Positioning Base'
ST_PageBorderOffset._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PageBorderOffset, enum_prefix=None)
ST_PageBorderOffset.page = ST_PageBorderOffset._CF_enumeration.addEnumeration(unicode_value=u'page')
ST_PageBorderOffset.text = ST_PageBorderOffset._CF_enumeration.addEnumeration(unicode_value=u'text')
ST_PageBorderOffset._InitializeFacetMap(ST_PageBorderOffset._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_PageBorderOffset', ST_PageBorderOffset)

# Atomic SimpleTypeDefinition
class ST_Merge (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Merged Cell Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_Merge')
    _Documentation = u'Merged Cell Type'
ST_Merge._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Merge, enum_prefix=None)
ST_Merge.continue_ = ST_Merge._CF_enumeration.addEnumeration(unicode_value=u'continue')
ST_Merge.restart = ST_Merge._CF_enumeration.addEnumeration(unicode_value=u'restart')
ST_Merge._InitializeFacetMap(ST_Merge._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_Merge', ST_Merge)

# Atomic SimpleTypeDefinition
class ST_LineSpacingRule (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Line Spacing Rule"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_LineSpacingRule')
    _Documentation = u'Line Spacing Rule'
ST_LineSpacingRule._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LineSpacingRule, enum_prefix=None)
ST_LineSpacingRule.auto = ST_LineSpacingRule._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_LineSpacingRule.exact = ST_LineSpacingRule._CF_enumeration.addEnumeration(unicode_value=u'exact')
ST_LineSpacingRule.atLeast = ST_LineSpacingRule._CF_enumeration.addEnumeration(unicode_value=u'atLeast')
ST_LineSpacingRule._InitializeFacetMap(ST_LineSpacingRule._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_LineSpacingRule', ST_LineSpacingRule)

# Atomic SimpleTypeDefinition
class ST_TextboxTightWrap (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Lines To Tight Wrap Within Text Box"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_TextboxTightWrap')
    _Documentation = u'Lines To Tight Wrap Within Text Box'
ST_TextboxTightWrap._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextboxTightWrap, enum_prefix=None)
ST_TextboxTightWrap.none = ST_TextboxTightWrap._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TextboxTightWrap.allLines = ST_TextboxTightWrap._CF_enumeration.addEnumeration(unicode_value=u'allLines')
ST_TextboxTightWrap.firstAndLastLine = ST_TextboxTightWrap._CF_enumeration.addEnumeration(unicode_value=u'firstAndLastLine')
ST_TextboxTightWrap.firstLineOnly = ST_TextboxTightWrap._CF_enumeration.addEnumeration(unicode_value=u'firstLineOnly')
ST_TextboxTightWrap.lastLineOnly = ST_TextboxTightWrap._CF_enumeration.addEnumeration(unicode_value=u'lastLineOnly')
ST_TextboxTightWrap._InitializeFacetMap(ST_TextboxTightWrap._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_TextboxTightWrap', ST_TextboxTightWrap)

# Atomic SimpleTypeDefinition
class ST_ObjectDrawAspect (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Embedded Object Representations"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_ObjectDrawAspect')
    _Documentation = u'Embedded Object Representations'
ST_ObjectDrawAspect._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ObjectDrawAspect, enum_prefix=None)
ST_ObjectDrawAspect.content = ST_ObjectDrawAspect._CF_enumeration.addEnumeration(unicode_value=u'content')
ST_ObjectDrawAspect.icon = ST_ObjectDrawAspect._CF_enumeration.addEnumeration(unicode_value=u'icon')
ST_ObjectDrawAspect._InitializeFacetMap(ST_ObjectDrawAspect._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_ObjectDrawAspect', ST_ObjectDrawAspect)

# Atomic SimpleTypeDefinition
class ST_MailMergeDocType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Source Document Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_MailMergeDocType')
    _Documentation = u'Source Document Types'
ST_MailMergeDocType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_MailMergeDocType, enum_prefix=None)
ST_MailMergeDocType.catalog = ST_MailMergeDocType._CF_enumeration.addEnumeration(unicode_value=u'catalog')
ST_MailMergeDocType.envelopes = ST_MailMergeDocType._CF_enumeration.addEnumeration(unicode_value=u'envelopes')
ST_MailMergeDocType.mailingLabels = ST_MailMergeDocType._CF_enumeration.addEnumeration(unicode_value=u'mailingLabels')
ST_MailMergeDocType.formLetters = ST_MailMergeDocType._CF_enumeration.addEnumeration(unicode_value=u'formLetters')
ST_MailMergeDocType.email = ST_MailMergeDocType._CF_enumeration.addEnumeration(unicode_value=u'email')
ST_MailMergeDocType.fax = ST_MailMergeDocType._CF_enumeration.addEnumeration(unicode_value=u'fax')
ST_MailMergeDocType._InitializeFacetMap(ST_MailMergeDocType._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_MailMergeDocType', ST_MailMergeDocType)

# Atomic SimpleTypeDefinition
class ST_FldCharType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Complex Field Character Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_FldCharType')
    _Documentation = u'Complex Field Character Type'
ST_FldCharType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FldCharType, enum_prefix=None)
ST_FldCharType.begin = ST_FldCharType._CF_enumeration.addEnumeration(unicode_value=u'begin')
ST_FldCharType.separate = ST_FldCharType._CF_enumeration.addEnumeration(unicode_value=u'separate')
ST_FldCharType.end = ST_FldCharType._CF_enumeration.addEnumeration(unicode_value=u'end')
ST_FldCharType._InitializeFacetMap(ST_FldCharType._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_FldCharType', ST_FldCharType)

# Atomic SimpleTypeDefinition
class ST_LevelSuffix (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Content Between Numbering Symbol and Paragraph Text"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_LevelSuffix')
    _Documentation = u'Content Between Numbering Symbol and Paragraph Text'
ST_LevelSuffix._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LevelSuffix, enum_prefix=None)
ST_LevelSuffix.tab = ST_LevelSuffix._CF_enumeration.addEnumeration(unicode_value=u'tab')
ST_LevelSuffix.space = ST_LevelSuffix._CF_enumeration.addEnumeration(unicode_value=u'space')
ST_LevelSuffix.nothing = ST_LevelSuffix._CF_enumeration.addEnumeration(unicode_value=u'nothing')
ST_LevelSuffix._InitializeFacetMap(ST_LevelSuffix._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_LevelSuffix', ST_LevelSuffix)

# Atomic SimpleTypeDefinition
class ST_DocGrid (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Document Grid Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_DocGrid')
    _Documentation = u'Document Grid Types'
ST_DocGrid._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DocGrid, enum_prefix=None)
ST_DocGrid.default = ST_DocGrid._CF_enumeration.addEnumeration(unicode_value=u'default')
ST_DocGrid.lines = ST_DocGrid._CF_enumeration.addEnumeration(unicode_value=u'lines')
ST_DocGrid.linesAndChars = ST_DocGrid._CF_enumeration.addEnumeration(unicode_value=u'linesAndChars')
ST_DocGrid.snapToChars = ST_DocGrid._CF_enumeration.addEnumeration(unicode_value=u'snapToChars')
ST_DocGrid._InitializeFacetMap(ST_DocGrid._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_DocGrid', ST_DocGrid)

# Atomic SimpleTypeDefinition
class ST_MacroName (pyxb.binding.datatypes.string):

    """Script Subroutine Name Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_MacroName')
    _Documentation = u'Script Subroutine Name Value'
ST_MacroName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(33L))
ST_MacroName._InitializeFacetMap(ST_MacroName._CF_maxLength)
_Namespace_w.addCategoryObject('typeBinding', u'ST_MacroName', ST_MacroName)

# Atomic SimpleTypeDefinition
class ST_Integer255 (pyxb.binding.datatypes.integer):

    """Integer value (1 to 255)"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'ST_Integer255')
    _Documentation = u'Integer value (1 to 255)'
ST_Integer255._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_Integer255, value=pyxb.binding.datatypes.integer(1L))
ST_Integer255._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_Integer255, value=pyxb.binding.datatypes.integer(255L))
ST_Integer255._InitializeFacetMap(ST_Integer255._CF_minInclusive,
   ST_Integer255._CF_maxInclusive)
_Namespace_m.addCategoryObject('typeBinding', u'ST_Integer255', ST_Integer255)

# Atomic SimpleTypeDefinition
class ST_TextScale (pyxb.binding.datatypes.integer):

    """Text Expansion/Compression Percentage"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_TextScale')
    _Documentation = u'Text Expansion/Compression Percentage'
ST_TextScale._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ST_TextScale, value=pyxb.binding.datatypes.integer(0L))
ST_TextScale._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ST_TextScale, value=pyxb.binding.datatypes.integer(600L))
ST_TextScale._InitializeFacetMap(ST_TextScale._CF_minInclusive,
   ST_TextScale._CF_maxInclusive)
_Namespace_w.addCategoryObject('typeBinding', u'ST_TextScale', ST_TextScale)

# Atomic SimpleTypeDefinition
class ST_TblOverlap (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Table Overlap Setting"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_TblOverlap')
    _Documentation = u'Table Overlap Setting'
ST_TblOverlap._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TblOverlap, enum_prefix=None)
ST_TblOverlap.never = ST_TblOverlap._CF_enumeration.addEnumeration(unicode_value=u'never')
ST_TblOverlap.overlap = ST_TblOverlap._CF_enumeration.addEnumeration(unicode_value=u'overlap')
ST_TblOverlap._InitializeFacetMap(ST_TblOverlap._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_TblOverlap', ST_TblOverlap)

# Atomic SimpleTypeDefinition
class ST_MailMergeSourceType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Mail Merge ODSO Data Source Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_MailMergeSourceType')
    _Documentation = u'Mail Merge ODSO Data Source Types'
ST_MailMergeSourceType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_MailMergeSourceType, enum_prefix=None)
ST_MailMergeSourceType.database = ST_MailMergeSourceType._CF_enumeration.addEnumeration(unicode_value=u'database')
ST_MailMergeSourceType.addressBook = ST_MailMergeSourceType._CF_enumeration.addEnumeration(unicode_value=u'addressBook')
ST_MailMergeSourceType.document1 = ST_MailMergeSourceType._CF_enumeration.addEnumeration(unicode_value=u'document1')
ST_MailMergeSourceType.document2 = ST_MailMergeSourceType._CF_enumeration.addEnumeration(unicode_value=u'document2')
ST_MailMergeSourceType.text = ST_MailMergeSourceType._CF_enumeration.addEnumeration(unicode_value=u'text')
ST_MailMergeSourceType.email = ST_MailMergeSourceType._CF_enumeration.addEnumeration(unicode_value=u'email')
ST_MailMergeSourceType.native = ST_MailMergeSourceType._CF_enumeration.addEnumeration(unicode_value=u'native')
ST_MailMergeSourceType.legacy = ST_MailMergeSourceType._CF_enumeration.addEnumeration(unicode_value=u'legacy')
ST_MailMergeSourceType.master = ST_MailMergeSourceType._CF_enumeration.addEnumeration(unicode_value=u'master')
ST_MailMergeSourceType._InitializeFacetMap(ST_MailMergeSourceType._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_MailMergeSourceType', ST_MailMergeSourceType)

# Atomic SimpleTypeDefinition
class ST_ChapterSep (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Chapter Separator Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_ChapterSep')
    _Documentation = u'Chapter Separator Types'
ST_ChapterSep._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ChapterSep, enum_prefix=None)
ST_ChapterSep.hyphen = ST_ChapterSep._CF_enumeration.addEnumeration(unicode_value=u'hyphen')
ST_ChapterSep.period = ST_ChapterSep._CF_enumeration.addEnumeration(unicode_value=u'period')
ST_ChapterSep.colon = ST_ChapterSep._CF_enumeration.addEnumeration(unicode_value=u'colon')
ST_ChapterSep.emDash = ST_ChapterSep._CF_enumeration.addEnumeration(unicode_value=u'emDash')
ST_ChapterSep.enDash = ST_ChapterSep._CF_enumeration.addEnumeration(unicode_value=u'enDash')
ST_ChapterSep._InitializeFacetMap(ST_ChapterSep._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_ChapterSep', ST_ChapterSep)

# Atomic SimpleTypeDefinition
class ST_NumberFormat (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Numbering Format"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_NumberFormat')
    _Documentation = u'Numbering Format'
ST_NumberFormat._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_NumberFormat, enum_prefix=None)
ST_NumberFormat.decimal = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'decimal')
ST_NumberFormat.upperRoman = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'upperRoman')
ST_NumberFormat.lowerRoman = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'lowerRoman')
ST_NumberFormat.upperLetter = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'upperLetter')
ST_NumberFormat.lowerLetter = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'lowerLetter')
ST_NumberFormat.ordinal = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'ordinal')
ST_NumberFormat.cardinalText = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'cardinalText')
ST_NumberFormat.ordinalText = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'ordinalText')
ST_NumberFormat.hex = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'hex')
ST_NumberFormat.chicago = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'chicago')
ST_NumberFormat.ideographDigital = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'ideographDigital')
ST_NumberFormat.japaneseCounting = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'japaneseCounting')
ST_NumberFormat.aiueo = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'aiueo')
ST_NumberFormat.iroha = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'iroha')
ST_NumberFormat.decimalFullWidth = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'decimalFullWidth')
ST_NumberFormat.decimalHalfWidth = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'decimalHalfWidth')
ST_NumberFormat.japaneseLegal = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'japaneseLegal')
ST_NumberFormat.japaneseDigitalTenThousand = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'japaneseDigitalTenThousand')
ST_NumberFormat.decimalEnclosedCircle = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'decimalEnclosedCircle')
ST_NumberFormat.decimalFullWidth2 = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'decimalFullWidth2')
ST_NumberFormat.aiueoFullWidth = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'aiueoFullWidth')
ST_NumberFormat.irohaFullWidth = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'irohaFullWidth')
ST_NumberFormat.decimalZero = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'decimalZero')
ST_NumberFormat.bullet = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'bullet')
ST_NumberFormat.ganada = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'ganada')
ST_NumberFormat.chosung = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'chosung')
ST_NumberFormat.decimalEnclosedFullstop = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'decimalEnclosedFullstop')
ST_NumberFormat.decimalEnclosedParen = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'decimalEnclosedParen')
ST_NumberFormat.decimalEnclosedCircleChinese = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'decimalEnclosedCircleChinese')
ST_NumberFormat.ideographEnclosedCircle = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'ideographEnclosedCircle')
ST_NumberFormat.ideographTraditional = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'ideographTraditional')
ST_NumberFormat.ideographZodiac = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'ideographZodiac')
ST_NumberFormat.ideographZodiacTraditional = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'ideographZodiacTraditional')
ST_NumberFormat.taiwaneseCounting = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'taiwaneseCounting')
ST_NumberFormat.ideographLegalTraditional = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'ideographLegalTraditional')
ST_NumberFormat.taiwaneseCountingThousand = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'taiwaneseCountingThousand')
ST_NumberFormat.taiwaneseDigital = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'taiwaneseDigital')
ST_NumberFormat.chineseCounting = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'chineseCounting')
ST_NumberFormat.chineseLegalSimplified = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'chineseLegalSimplified')
ST_NumberFormat.chineseCountingThousand = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'chineseCountingThousand')
ST_NumberFormat.koreanDigital = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'koreanDigital')
ST_NumberFormat.koreanCounting = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'koreanCounting')
ST_NumberFormat.koreanLegal = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'koreanLegal')
ST_NumberFormat.koreanDigital2 = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'koreanDigital2')
ST_NumberFormat.vietnameseCounting = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'vietnameseCounting')
ST_NumberFormat.russianLower = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'russianLower')
ST_NumberFormat.russianUpper = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'russianUpper')
ST_NumberFormat.none = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_NumberFormat.numberInDash = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'numberInDash')
ST_NumberFormat.hebrew1 = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'hebrew1')
ST_NumberFormat.hebrew2 = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'hebrew2')
ST_NumberFormat.arabicAlpha = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'arabicAlpha')
ST_NumberFormat.arabicAbjad = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'arabicAbjad')
ST_NumberFormat.hindiVowels = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'hindiVowels')
ST_NumberFormat.hindiConsonants = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'hindiConsonants')
ST_NumberFormat.hindiNumbers = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'hindiNumbers')
ST_NumberFormat.hindiCounting = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'hindiCounting')
ST_NumberFormat.thaiLetters = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'thaiLetters')
ST_NumberFormat.thaiNumbers = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'thaiNumbers')
ST_NumberFormat.thaiCounting = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'thaiCounting')
ST_NumberFormat.bahtText = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'bahtText')
ST_NumberFormat.dollarText = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'dollarText')
ST_NumberFormat.custom = ST_NumberFormat._CF_enumeration.addEnumeration(unicode_value=u'custom')
ST_NumberFormat._InitializeFacetMap(ST_NumberFormat._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_NumberFormat', ST_NumberFormat)

# Atomic SimpleTypeDefinition
class ST_HdrFtr (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Header or Footer Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_HdrFtr')
    _Documentation = u'Header or Footer Type'
ST_HdrFtr._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_HdrFtr, enum_prefix=None)
ST_HdrFtr.even = ST_HdrFtr._CF_enumeration.addEnumeration(unicode_value=u'even')
ST_HdrFtr.default = ST_HdrFtr._CF_enumeration.addEnumeration(unicode_value=u'default')
ST_HdrFtr.first = ST_HdrFtr._CF_enumeration.addEnumeration(unicode_value=u'first')
ST_HdrFtr._InitializeFacetMap(ST_HdrFtr._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_HdrFtr', ST_HdrFtr)

# Atomic SimpleTypeDefinition
class ST_RubyAlign (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Phonetic Guide Text Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_RubyAlign')
    _Documentation = u'Phonetic Guide Text Alignment'
ST_RubyAlign._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_RubyAlign, enum_prefix=None)
ST_RubyAlign.center = ST_RubyAlign._CF_enumeration.addEnumeration(unicode_value=u'center')
ST_RubyAlign.distributeLetter = ST_RubyAlign._CF_enumeration.addEnumeration(unicode_value=u'distributeLetter')
ST_RubyAlign.distributeSpace = ST_RubyAlign._CF_enumeration.addEnumeration(unicode_value=u'distributeSpace')
ST_RubyAlign.left = ST_RubyAlign._CF_enumeration.addEnumeration(unicode_value=u'left')
ST_RubyAlign.right = ST_RubyAlign._CF_enumeration.addEnumeration(unicode_value=u'right')
ST_RubyAlign.rightVertical = ST_RubyAlign._CF_enumeration.addEnumeration(unicode_value=u'rightVertical')
ST_RubyAlign._InitializeFacetMap(ST_RubyAlign._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_RubyAlign', ST_RubyAlign)

# Atomic SimpleTypeDefinition
class ST_SectionMark (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Section Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_SectionMark')
    _Documentation = u'Section Type'
ST_SectionMark._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SectionMark, enum_prefix=None)
ST_SectionMark.nextPage = ST_SectionMark._CF_enumeration.addEnumeration(unicode_value=u'nextPage')
ST_SectionMark.nextColumn = ST_SectionMark._CF_enumeration.addEnumeration(unicode_value=u'nextColumn')
ST_SectionMark.continuous = ST_SectionMark._CF_enumeration.addEnumeration(unicode_value=u'continuous')
ST_SectionMark.evenPage = ST_SectionMark._CF_enumeration.addEnumeration(unicode_value=u'evenPage')
ST_SectionMark.oddPage = ST_SectionMark._CF_enumeration.addEnumeration(unicode_value=u'oddPage')
ST_SectionMark._InitializeFacetMap(ST_SectionMark._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_SectionMark', ST_SectionMark)

# Atomic SimpleTypeDefinition
class ST_FrameScrollbar (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Frame Scrollbar Visibility"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_FrameScrollbar')
    _Documentation = u'Frame Scrollbar Visibility'
ST_FrameScrollbar._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FrameScrollbar, enum_prefix=None)
ST_FrameScrollbar.on = ST_FrameScrollbar._CF_enumeration.addEnumeration(unicode_value=u'on')
ST_FrameScrollbar.off = ST_FrameScrollbar._CF_enumeration.addEnumeration(unicode_value=u'off')
ST_FrameScrollbar.auto = ST_FrameScrollbar._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_FrameScrollbar._InitializeFacetMap(ST_FrameScrollbar._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_FrameScrollbar', ST_FrameScrollbar)

# Atomic SimpleTypeDefinition
class ST_EdnPos (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Endnote Positioning Location"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_EdnPos')
    _Documentation = u'Endnote Positioning Location'
ST_EdnPos._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_EdnPos, enum_prefix=None)
ST_EdnPos.sectEnd = ST_EdnPos._CF_enumeration.addEnumeration(unicode_value=u'sectEnd')
ST_EdnPos.docEnd = ST_EdnPos._CF_enumeration.addEnumeration(unicode_value=u'docEnd')
ST_EdnPos._InitializeFacetMap(ST_EdnPos._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_EdnPos', ST_EdnPos)

# Atomic SimpleTypeDefinition
class ST_LimLoc (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Limit Location"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'ST_LimLoc')
    _Documentation = u'Limit Location'
ST_LimLoc._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_LimLoc, enum_prefix=None)
ST_LimLoc.undOvr = ST_LimLoc._CF_enumeration.addEnumeration(unicode_value=u'undOvr')
ST_LimLoc.subSup = ST_LimLoc._CF_enumeration.addEnumeration(unicode_value=u'subSup')
ST_LimLoc._InitializeFacetMap(ST_LimLoc._CF_enumeration)
_Namespace_m.addCategoryObject('typeBinding', u'ST_LimLoc', ST_LimLoc)

# Atomic SimpleTypeDefinition
class ST_AnnotationVMerge (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Table Cell Vertical Merge Revision Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_AnnotationVMerge')
    _Documentation = u'Table Cell Vertical Merge Revision Type'
ST_AnnotationVMerge._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_AnnotationVMerge, enum_prefix=None)
ST_AnnotationVMerge.cont = ST_AnnotationVMerge._CF_enumeration.addEnumeration(unicode_value=u'cont')
ST_AnnotationVMerge.rest = ST_AnnotationVMerge._CF_enumeration.addEnumeration(unicode_value=u'rest')
ST_AnnotationVMerge._InitializeFacetMap(ST_AnnotationVMerge._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_AnnotationVMerge', ST_AnnotationVMerge)

# Atomic SimpleTypeDefinition
class ST_FtnEdn (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Footnote or Endnote Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_FtnEdn')
    _Documentation = u'Footnote or Endnote Type'
ST_FtnEdn._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FtnEdn, enum_prefix=None)
ST_FtnEdn.normal = ST_FtnEdn._CF_enumeration.addEnumeration(unicode_value=u'normal')
ST_FtnEdn.separator = ST_FtnEdn._CF_enumeration.addEnumeration(unicode_value=u'separator')
ST_FtnEdn.continuationSeparator = ST_FtnEdn._CF_enumeration.addEnumeration(unicode_value=u'continuationSeparator')
ST_FtnEdn.continuationNotice = ST_FtnEdn._CF_enumeration.addEnumeration(unicode_value=u'continuationNotice')
ST_FtnEdn._InitializeFacetMap(ST_FtnEdn._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_FtnEdn', ST_FtnEdn)

# Atomic SimpleTypeDefinition
class ST_ObjectUpdateMode (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Embedded Object Update Modes"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_ObjectUpdateMode')
    _Documentation = u'Embedded Object Update Modes'
ST_ObjectUpdateMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ObjectUpdateMode, enum_prefix=None)
ST_ObjectUpdateMode.always = ST_ObjectUpdateMode._CF_enumeration.addEnumeration(unicode_value=u'always')
ST_ObjectUpdateMode.onCall = ST_ObjectUpdateMode._CF_enumeration.addEnumeration(unicode_value=u'onCall')
ST_ObjectUpdateMode._InitializeFacetMap(ST_ObjectUpdateMode._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_ObjectUpdateMode', ST_ObjectUpdateMode)

# Atomic SimpleTypeDefinition
class ST_DocPartBehavior (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Insertion Behavior Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_DocPartBehavior')
    _Documentation = u'Insertion Behavior Types'
ST_DocPartBehavior._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DocPartBehavior, enum_prefix=None)
ST_DocPartBehavior.content = ST_DocPartBehavior._CF_enumeration.addEnumeration(unicode_value=u'content')
ST_DocPartBehavior.p = ST_DocPartBehavior._CF_enumeration.addEnumeration(unicode_value=u'p')
ST_DocPartBehavior.pg = ST_DocPartBehavior._CF_enumeration.addEnumeration(unicode_value=u'pg')
ST_DocPartBehavior._InitializeFacetMap(ST_DocPartBehavior._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_DocPartBehavior', ST_DocPartBehavior)

# Atomic SimpleTypeDefinition
class ST_BreakBinSub (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Break on Binary Subtraction"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'ST_BreakBinSub')
    _Documentation = u'Break on Binary Subtraction'
ST_BreakBinSub._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BreakBinSub, enum_prefix=None)
ST_BreakBinSub.emptyString = ST_BreakBinSub._CF_enumeration.addEnumeration(unicode_value=u'--')
ST_BreakBinSub.emptyString_ = ST_BreakBinSub._CF_enumeration.addEnumeration(unicode_value=u'-+')
ST_BreakBinSub.emptyString_2 = ST_BreakBinSub._CF_enumeration.addEnumeration(unicode_value=u'+-')
ST_BreakBinSub._InitializeFacetMap(ST_BreakBinSub._CF_enumeration)
_Namespace_m.addCategoryObject('typeBinding', u'ST_BreakBinSub', ST_BreakBinSub)

# Atomic SimpleTypeDefinition
class ST_FrameLayout (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Frameset Layout Order"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_FrameLayout')
    _Documentation = u'Frameset Layout Order'
ST_FrameLayout._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FrameLayout, enum_prefix=None)
ST_FrameLayout.rows = ST_FrameLayout._CF_enumeration.addEnumeration(unicode_value=u'rows')
ST_FrameLayout.cols = ST_FrameLayout._CF_enumeration.addEnumeration(unicode_value=u'cols')
ST_FrameLayout.none = ST_FrameLayout._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_FrameLayout._InitializeFacetMap(ST_FrameLayout._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_FrameLayout', ST_FrameLayout)

# Atomic SimpleTypeDefinition
class ST_MailMergeDest (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Merged Document Destination Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_MailMergeDest')
    _Documentation = u'Merged Document Destination Types'
ST_MailMergeDest._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_MailMergeDest, enum_prefix=None)
ST_MailMergeDest.newDocument = ST_MailMergeDest._CF_enumeration.addEnumeration(unicode_value=u'newDocument')
ST_MailMergeDest.printer = ST_MailMergeDest._CF_enumeration.addEnumeration(unicode_value=u'printer')
ST_MailMergeDest.email = ST_MailMergeDest._CF_enumeration.addEnumeration(unicode_value=u'email')
ST_MailMergeDest.fax = ST_MailMergeDest._CF_enumeration.addEnumeration(unicode_value=u'fax')
ST_MailMergeDest._InitializeFacetMap(ST_MailMergeDest._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_MailMergeDest', ST_MailMergeDest)

# Atomic SimpleTypeDefinition
class ST_HeightRule (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Height Rule"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_HeightRule')
    _Documentation = u'Height Rule'
ST_HeightRule._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_HeightRule, enum_prefix=None)
ST_HeightRule.auto = ST_HeightRule._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_HeightRule.exact = ST_HeightRule._CF_enumeration.addEnumeration(unicode_value=u'exact')
ST_HeightRule.atLeast = ST_HeightRule._CF_enumeration.addEnumeration(unicode_value=u'atLeast')
ST_HeightRule._InitializeFacetMap(ST_HeightRule._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_HeightRule', ST_HeightRule)

# Atomic SimpleTypeDefinition
class ST_DocPartGallery (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Entry Gallery Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_DocPartGallery')
    _Documentation = u'Entry Gallery Types'
ST_DocPartGallery._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DocPartGallery, enum_prefix=None)
ST_DocPartGallery.placeholder = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'placeholder')
ST_DocPartGallery.any = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'any')
ST_DocPartGallery.default = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'default')
ST_DocPartGallery.docParts = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'docParts')
ST_DocPartGallery.coverPg = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'coverPg')
ST_DocPartGallery.eq = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'eq')
ST_DocPartGallery.ftrs = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'ftrs')
ST_DocPartGallery.hdrs = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'hdrs')
ST_DocPartGallery.pgNum = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'pgNum')
ST_DocPartGallery.tbls = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'tbls')
ST_DocPartGallery.watermarks = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'watermarks')
ST_DocPartGallery.autoTxt = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'autoTxt')
ST_DocPartGallery.txtBox = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'txtBox')
ST_DocPartGallery.pgNumT = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'pgNumT')
ST_DocPartGallery.pgNumB = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'pgNumB')
ST_DocPartGallery.pgNumMargins = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'pgNumMargins')
ST_DocPartGallery.tblOfContents = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'tblOfContents')
ST_DocPartGallery.bib = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'bib')
ST_DocPartGallery.custQuickParts = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custQuickParts')
ST_DocPartGallery.custCoverPg = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custCoverPg')
ST_DocPartGallery.custEq = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custEq')
ST_DocPartGallery.custFtrs = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custFtrs')
ST_DocPartGallery.custHdrs = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custHdrs')
ST_DocPartGallery.custPgNum = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custPgNum')
ST_DocPartGallery.custTbls = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custTbls')
ST_DocPartGallery.custWatermarks = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custWatermarks')
ST_DocPartGallery.custAutoTxt = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custAutoTxt')
ST_DocPartGallery.custTxtBox = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custTxtBox')
ST_DocPartGallery.custPgNumT = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custPgNumT')
ST_DocPartGallery.custPgNumB = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custPgNumB')
ST_DocPartGallery.custPgNumMargins = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custPgNumMargins')
ST_DocPartGallery.custTblOfContents = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custTblOfContents')
ST_DocPartGallery.custBib = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custBib')
ST_DocPartGallery.custom1 = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custom1')
ST_DocPartGallery.custom2 = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custom2')
ST_DocPartGallery.custom3 = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custom3')
ST_DocPartGallery.custom4 = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custom4')
ST_DocPartGallery.custom5 = ST_DocPartGallery._CF_enumeration.addEnumeration(unicode_value=u'custom5')
ST_DocPartGallery._InitializeFacetMap(ST_DocPartGallery._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_DocPartGallery', ST_DocPartGallery)

# Atomic SimpleTypeDefinition
class ST_DocPartType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Entry Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_DocPartType')
    _Documentation = u'Entry Types'
ST_DocPartType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DocPartType, enum_prefix=None)
ST_DocPartType.none = ST_DocPartType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_DocPartType.normal = ST_DocPartType._CF_enumeration.addEnumeration(unicode_value=u'normal')
ST_DocPartType.autoExp = ST_DocPartType._CF_enumeration.addEnumeration(unicode_value=u'autoExp')
ST_DocPartType.toolbar = ST_DocPartType._CF_enumeration.addEnumeration(unicode_value=u'toolbar')
ST_DocPartType.speller = ST_DocPartType._CF_enumeration.addEnumeration(unicode_value=u'speller')
ST_DocPartType.formFld = ST_DocPartType._CF_enumeration.addEnumeration(unicode_value=u'formFld')
ST_DocPartType.bbPlcHdr = ST_DocPartType._CF_enumeration.addEnumeration(unicode_value=u'bbPlcHdr')
ST_DocPartType._InitializeFacetMap(ST_DocPartType._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_DocPartType', ST_DocPartType)

# Atomic SimpleTypeDefinition
class ST_DropCap (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Text Frame Drop Cap Location"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_DropCap')
    _Documentation = u'Text Frame Drop Cap Location'
ST_DropCap._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DropCap, enum_prefix=None)
ST_DropCap.none = ST_DropCap._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_DropCap.drop = ST_DropCap._CF_enumeration.addEnumeration(unicode_value=u'drop')
ST_DropCap.margin = ST_DropCap._CF_enumeration.addEnumeration(unicode_value=u'margin')
ST_DropCap._InitializeFacetMap(ST_DropCap._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_DropCap', ST_DropCap)

# Atomic SimpleTypeDefinition
class ST_Wrap (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Text Wrapping around Text Frame Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_Wrap')
    _Documentation = u'Text Wrapping around Text Frame Type'
ST_Wrap._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Wrap, enum_prefix=None)
ST_Wrap.auto = ST_Wrap._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_Wrap.notBeside = ST_Wrap._CF_enumeration.addEnumeration(unicode_value=u'notBeside')
ST_Wrap.around = ST_Wrap._CF_enumeration.addEnumeration(unicode_value=u'around')
ST_Wrap.tight = ST_Wrap._CF_enumeration.addEnumeration(unicode_value=u'tight')
ST_Wrap.through = ST_Wrap._CF_enumeration.addEnumeration(unicode_value=u'through')
ST_Wrap.none = ST_Wrap._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_Wrap._InitializeFacetMap(ST_Wrap._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_Wrap', ST_Wrap)

# Atomic SimpleTypeDefinition
class ST_StyleType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Style Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_StyleType')
    _Documentation = u'Style Types'
ST_StyleType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_StyleType, enum_prefix=None)
ST_StyleType.paragraph = ST_StyleType._CF_enumeration.addEnumeration(unicode_value=u'paragraph')
ST_StyleType.character = ST_StyleType._CF_enumeration.addEnumeration(unicode_value=u'character')
ST_StyleType.table = ST_StyleType._CF_enumeration.addEnumeration(unicode_value=u'table')
ST_StyleType.numbering = ST_StyleType._CF_enumeration.addEnumeration(unicode_value=u'numbering')
ST_StyleType._InitializeFacetMap(ST_StyleType._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_StyleType', ST_StyleType)

# Atomic SimpleTypeDefinition
class ST_MailMergeDataType (pyxb.binding.datatypes.string):

    """Mail Merge Data Source Type Values"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_MailMergeDataType')
    _Documentation = u'Mail Merge Data Source Type Values'
ST_MailMergeDataType._InitializeFacetMap()
_Namespace_w.addCategoryObject('typeBinding', u'ST_MailMergeDataType', ST_MailMergeDataType)

# Atomic SimpleTypeDefinition
class ST_FtnPos (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Footnote Positioning Location"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_FtnPos')
    _Documentation = u'Footnote Positioning Location'
ST_FtnPos._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FtnPos, enum_prefix=None)
ST_FtnPos.pageBottom = ST_FtnPos._CF_enumeration.addEnumeration(unicode_value=u'pageBottom')
ST_FtnPos.beneathText = ST_FtnPos._CF_enumeration.addEnumeration(unicode_value=u'beneathText')
ST_FtnPos.sectEnd = ST_FtnPos._CF_enumeration.addEnumeration(unicode_value=u'sectEnd')
ST_FtnPos.docEnd = ST_FtnPos._CF_enumeration.addEnumeration(unicode_value=u'docEnd')
ST_FtnPos._InitializeFacetMap(ST_FtnPos._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_FtnPos', ST_FtnPos)

# Atomic SimpleTypeDefinition
class ST_Zoom (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Magnification Preset Values"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_Zoom')
    _Documentation = u'Magnification Preset Values'
ST_Zoom._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Zoom, enum_prefix=None)
ST_Zoom.none = ST_Zoom._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_Zoom.fullPage = ST_Zoom._CF_enumeration.addEnumeration(unicode_value=u'fullPage')
ST_Zoom.bestFit = ST_Zoom._CF_enumeration.addEnumeration(unicode_value=u'bestFit')
ST_Zoom.textFit = ST_Zoom._CF_enumeration.addEnumeration(unicode_value=u'textFit')
ST_Zoom._InitializeFacetMap(ST_Zoom._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_Zoom', ST_Zoom)

# Atomic SimpleTypeDefinition
class ST_TextAlignment (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Vertical Text Alignment Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_TextAlignment')
    _Documentation = u'Vertical Text Alignment Types'
ST_TextAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextAlignment, enum_prefix=None)
ST_TextAlignment.top = ST_TextAlignment._CF_enumeration.addEnumeration(unicode_value=u'top')
ST_TextAlignment.center = ST_TextAlignment._CF_enumeration.addEnumeration(unicode_value=u'center')
ST_TextAlignment.baseline = ST_TextAlignment._CF_enumeration.addEnumeration(unicode_value=u'baseline')
ST_TextAlignment.bottom = ST_TextAlignment._CF_enumeration.addEnumeration(unicode_value=u'bottom')
ST_TextAlignment.auto = ST_TextAlignment._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_TextAlignment._InitializeFacetMap(ST_TextAlignment._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_TextAlignment', ST_TextAlignment)

# Atomic SimpleTypeDefinition
class ST_FFStatusTextVal (pyxb.binding.datatypes.string):

    """Status Text Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_FFStatusTextVal')
    _Documentation = u'Status Text Value'
ST_FFStatusTextVal._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(140L))
ST_FFStatusTextVal._InitializeFacetMap(ST_FFStatusTextVal._CF_maxLength)
_Namespace_w.addCategoryObject('typeBinding', u'ST_FFStatusTextVal', ST_FFStatusTextVal)

# Atomic SimpleTypeDefinition
class ST_Proof (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Proofing State Values"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_Proof')
    _Documentation = u'Proofing State Values'
ST_Proof._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Proof, enum_prefix=None)
ST_Proof.clean = ST_Proof._CF_enumeration.addEnumeration(unicode_value=u'clean')
ST_Proof.dirty = ST_Proof._CF_enumeration.addEnumeration(unicode_value=u'dirty')
ST_Proof._InitializeFacetMap(ST_Proof._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_Proof', ST_Proof)

# Atomic SimpleTypeDefinition
class ST_SdtDateMappingType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Date Storage Format Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_SdtDateMappingType')
    _Documentation = u'Date Storage Format Types'
ST_SdtDateMappingType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SdtDateMappingType, enum_prefix=None)
ST_SdtDateMappingType.text = ST_SdtDateMappingType._CF_enumeration.addEnumeration(unicode_value=u'text')
ST_SdtDateMappingType.date = ST_SdtDateMappingType._CF_enumeration.addEnumeration(unicode_value=u'date')
ST_SdtDateMappingType.dateTime = ST_SdtDateMappingType._CF_enumeration.addEnumeration(unicode_value=u'dateTime')
ST_SdtDateMappingType._InitializeFacetMap(ST_SdtDateMappingType._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_SdtDateMappingType', ST_SdtDateMappingType)

# Atomic SimpleTypeDefinition
class ST_CharacterSpacing (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Character-Level Whitespace Compression Settings"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_CharacterSpacing')
    _Documentation = u'Character-Level Whitespace Compression Settings'
ST_CharacterSpacing._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CharacterSpacing, enum_prefix=None)
ST_CharacterSpacing.doNotCompress = ST_CharacterSpacing._CF_enumeration.addEnumeration(unicode_value=u'doNotCompress')
ST_CharacterSpacing.compressPunctuation = ST_CharacterSpacing._CF_enumeration.addEnumeration(unicode_value=u'compressPunctuation')
ST_CharacterSpacing.compressPunctuationAndJapaneseKana = ST_CharacterSpacing._CF_enumeration.addEnumeration(unicode_value=u'compressPunctuationAndJapaneseKana')
ST_CharacterSpacing._InitializeFacetMap(ST_CharacterSpacing._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_CharacterSpacing', ST_CharacterSpacing)

# Atomic SimpleTypeDefinition
class ST_MultiLevelType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Numbering Definition Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_MultiLevelType')
    _Documentation = u'Numbering Definition Type'
ST_MultiLevelType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_MultiLevelType, enum_prefix=None)
ST_MultiLevelType.singleLevel = ST_MultiLevelType._CF_enumeration.addEnumeration(unicode_value=u'singleLevel')
ST_MultiLevelType.multilevel = ST_MultiLevelType._CF_enumeration.addEnumeration(unicode_value=u'multilevel')
ST_MultiLevelType.hybridMultilevel = ST_MultiLevelType._CF_enumeration.addEnumeration(unicode_value=u'hybridMultilevel')
ST_MultiLevelType._InitializeFacetMap(ST_MultiLevelType._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_MultiLevelType', ST_MultiLevelType)

# Atomic SimpleTypeDefinition
class ST_TargetScreenSz (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Target Screen Sizes for Generated Web Pages"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_TargetScreenSz')
    _Documentation = u'Target Screen Sizes for Generated Web Pages'
ST_TargetScreenSz._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TargetScreenSz, enum_prefix=None)
ST_TargetScreenSz.n544x376 = ST_TargetScreenSz._CF_enumeration.addEnumeration(unicode_value=u'544x376')
ST_TargetScreenSz.n640x480 = ST_TargetScreenSz._CF_enumeration.addEnumeration(unicode_value=u'640x480')
ST_TargetScreenSz.n720x512 = ST_TargetScreenSz._CF_enumeration.addEnumeration(unicode_value=u'720x512')
ST_TargetScreenSz.n800x600 = ST_TargetScreenSz._CF_enumeration.addEnumeration(unicode_value=u'800x600')
ST_TargetScreenSz.n1024x768 = ST_TargetScreenSz._CF_enumeration.addEnumeration(unicode_value=u'1024x768')
ST_TargetScreenSz.n1152x882 = ST_TargetScreenSz._CF_enumeration.addEnumeration(unicode_value=u'1152x882')
ST_TargetScreenSz.n1152x900 = ST_TargetScreenSz._CF_enumeration.addEnumeration(unicode_value=u'1152x900')
ST_TargetScreenSz.n1280x1024 = ST_TargetScreenSz._CF_enumeration.addEnumeration(unicode_value=u'1280x1024')
ST_TargetScreenSz.n1600x1200 = ST_TargetScreenSz._CF_enumeration.addEnumeration(unicode_value=u'1600x1200')
ST_TargetScreenSz.n1800x1440 = ST_TargetScreenSz._CF_enumeration.addEnumeration(unicode_value=u'1800x1440')
ST_TargetScreenSz.n1920x1200 = ST_TargetScreenSz._CF_enumeration.addEnumeration(unicode_value=u'1920x1200')
ST_TargetScreenSz._InitializeFacetMap(ST_TargetScreenSz._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_TargetScreenSz', ST_TargetScreenSz)

# Atomic SimpleTypeDefinition
class ST_FFName (pyxb.binding.datatypes.string):

    """Form Field Name Value"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_FFName')
    _Documentation = u'Form Field Name Value'
ST_FFName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(65L))
ST_FFName._InitializeFacetMap(ST_FFName._CF_maxLength)
_Namespace_w.addCategoryObject('typeBinding', u'ST_FFName', ST_FFName)

# Atomic SimpleTypeDefinition
class ST_CaptionPos (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Automatic Caption Positioning Values"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_CaptionPos')
    _Documentation = u'Automatic Caption Positioning Values'
ST_CaptionPos._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CaptionPos, enum_prefix=None)
ST_CaptionPos.above = ST_CaptionPos._CF_enumeration.addEnumeration(unicode_value=u'above')
ST_CaptionPos.below = ST_CaptionPos._CF_enumeration.addEnumeration(unicode_value=u'below')
ST_CaptionPos.left = ST_CaptionPos._CF_enumeration.addEnumeration(unicode_value=u'left')
ST_CaptionPos.right = ST_CaptionPos._CF_enumeration.addEnumeration(unicode_value=u'right')
ST_CaptionPos._InitializeFacetMap(ST_CaptionPos._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_CaptionPos', ST_CaptionPos)

# Atomic SimpleTypeDefinition
class ST_Style (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Style"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'ST_Style')
    _Documentation = u'Style'
ST_Style._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Style, enum_prefix=None)
ST_Style.p = ST_Style._CF_enumeration.addEnumeration(unicode_value=u'p')
ST_Style.b = ST_Style._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_Style.i = ST_Style._CF_enumeration.addEnumeration(unicode_value=u'i')
ST_Style.bi = ST_Style._CF_enumeration.addEnumeration(unicode_value=u'bi')
ST_Style._InitializeFacetMap(ST_Style._CF_enumeration)
_Namespace_m.addCategoryObject('typeBinding', u'ST_Style', ST_Style)

# Atomic SimpleTypeDefinition
class ST_Lock (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Locking Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_Lock')
    _Documentation = u'Locking Types'
ST_Lock._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Lock, enum_prefix=None)
ST_Lock.sdtLocked = ST_Lock._CF_enumeration.addEnumeration(unicode_value=u'sdtLocked')
ST_Lock.contentLocked = ST_Lock._CF_enumeration.addEnumeration(unicode_value=u'contentLocked')
ST_Lock.unlocked = ST_Lock._CF_enumeration.addEnumeration(unicode_value=u'unlocked')
ST_Lock.sdtContentLocked = ST_Lock._CF_enumeration.addEnumeration(unicode_value=u'sdtContentLocked')
ST_Lock._InitializeFacetMap(ST_Lock._CF_enumeration)
_Namespace_w.addCategoryObject('typeBinding', u'ST_Lock', ST_Lock)

# Atomic SimpleTypeDefinition
class ST_DocType (pyxb.binding.datatypes.string):

    """Document Classification Values"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'ST_DocType')
    _Documentation = u'Document Classification Values'
ST_DocType._InitializeFacetMap()
_Namespace_w.addCategoryObject('typeBinding', u'ST_DocType', ST_DocType)

# Atomic SimpleTypeDefinition
class ST_BreakBin (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Break Binary Operators"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'ST_BreakBin')
    _Documentation = u'Break Binary Operators'
ST_BreakBin._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BreakBin, enum_prefix=None)
ST_BreakBin.before = ST_BreakBin._CF_enumeration.addEnumeration(unicode_value=u'before')
ST_BreakBin.after = ST_BreakBin._CF_enumeration.addEnumeration(unicode_value=u'after')
ST_BreakBin.repeat = ST_BreakBin._CF_enumeration.addEnumeration(unicode_value=u'repeat')
ST_BreakBin._InitializeFacetMap(ST_BreakBin._CF_enumeration)
_Namespace_m.addCategoryObject('typeBinding', u'ST_BreakBin', ST_BreakBin)

# Complex type CT_Markup with content type EMPTY
class CT_Markup (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Markup')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Markup_httpschemas_openxmlformats_orgwordprocessingml2006mainid', ST_DecimalNumber, required=True)
    
    id = property(__id.value, __id.set, None, u'Annotation Identifier')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Markup', CT_Markup)


# Complex type CT_TrackChange with content type EMPTY
class CT_TrackChange (CT_Markup):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TrackChange')
    # Base type is CT_Markup
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}date uses Python identifier date
    __date = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'date'), 'date', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrackChange_httpschemas_openxmlformats_orgwordprocessingml2006maindate', ST_DateTime)
    
    date = property(__date.value, __date.set, None, u'Annotation Date')

    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}author uses Python identifier author
    __author = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'author'), 'author', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainauthor', _s.ST_String, required=True)
    
    author = property(__author.value, __author.set, None, u'Annotation Author')


    _ElementMap = CT_Markup._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_Markup._AttributeMap.copy()
    _AttributeMap.update({
        __date.name() : __date,
        __author.name() : __author
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_TrackChange', CT_TrackChange)


# Complex type CT_FFCheckBox with content type ELEMENT_ONLY
class CT_FFCheckBox (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FFCheckBox')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}checked uses Python identifier checked
    __checked = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'checked'), 'checked', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFCheckBox_httpschemas_openxmlformats_orgwordprocessingml2006mainchecked', False)

    
    checked = property(__checked.value, __checked.set, None, u'Checkbox Form Field State')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}size uses Python identifier size
    __size = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'size'), 'size', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFCheckBox_httpschemas_openxmlformats_orgwordprocessingml2006mainsize', False)

    
    size = property(__size.value, __size.set, None, u'Checkbox Form Field Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sizeAuto uses Python identifier sizeAuto
    __sizeAuto = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sizeAuto'), 'sizeAuto', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFCheckBox_httpschemas_openxmlformats_orgwordprocessingml2006mainsizeAuto', False)

    
    sizeAuto = property(__sizeAuto.value, __sizeAuto.set, None, u'Automatically Size Form Field')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}default uses Python identifier default
    __default = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'default'), 'default', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFCheckBox_httpschemas_openxmlformats_orgwordprocessingml2006maindefault', False)

    
    default = property(__default.value, __default.set, None, u'Default Checkbox Form Field State')


    _ElementMap = {
        __checked.name() : __checked,
        __size.name() : __size,
        __sizeAuto.name() : __sizeAuto,
        __default.name() : __default
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FFCheckBox', CT_FFCheckBox)


# Complex type CT_PageMar with content type EMPTY
class CT_PageMar (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_PageMar')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}top uses Python identifier top
    __top = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'top'), 'top', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageMar_httpschemas_openxmlformats_orgwordprocessingml2006maintop', ST_SignedTwipsMeasure, required=True)
    
    top = property(__top.value, __top.set, None, u'Top Margin Spacing')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}footer uses Python identifier footer
    __footer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'footer'), 'footer', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageMar_httpschemas_openxmlformats_orgwordprocessingml2006mainfooter', _s.ST_TwipsMeasure, required=True)
    
    footer = property(__footer.value, __footer.set, None, u'Spacing to Bottom of Footer')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}gutter uses Python identifier gutter
    __gutter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'gutter'), 'gutter', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageMar_httpschemas_openxmlformats_orgwordprocessingml2006maingutter', _s.ST_TwipsMeasure, required=True)
    
    gutter = property(__gutter.value, __gutter.set, None, u'Page Gutter Spacing')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}right uses Python identifier right
    __right = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), 'right', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageMar_httpschemas_openxmlformats_orgwordprocessingml2006mainright', _s.ST_TwipsMeasure, required=True)
    
    right = property(__right.value, __right.set, None, u'Right Margin Spacing')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}header uses Python identifier header
    __header = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'header'), 'header', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageMar_httpschemas_openxmlformats_orgwordprocessingml2006mainheader', _s.ST_TwipsMeasure, required=True)
    
    header = property(__header.value, __header.set, None, u'Spacing to Top of Header')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}left uses Python identifier left
    __left = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), 'left', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageMar_httpschemas_openxmlformats_orgwordprocessingml2006mainleft', _s.ST_TwipsMeasure, required=True)
    
    left = property(__left.value, __left.set, None, u'Left Margin Spacing')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bottom uses Python identifier bottom
    __bottom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom'), 'bottom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageMar_httpschemas_openxmlformats_orgwordprocessingml2006mainbottom', ST_SignedTwipsMeasure, required=True)
    
    bottom = property(__bottom.value, __bottom.set, None, u'Page Bottom Spacing')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __top.name() : __top,
        __footer.name() : __footer,
        __gutter.name() : __gutter,
        __right.name() : __right,
        __header.name() : __header,
        __left.name() : __left,
        __bottom.name() : __bottom
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_PageMar', CT_PageMar)


# Complex type CT_AltChunk with content type ELEMENT_ONLY
class CT_AltChunk (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_AltChunk')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}altChunkPr uses Python identifier altChunkPr
    __altChunkPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunkPr'), 'altChunkPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_AltChunk_httpschemas_openxmlformats_orgwordprocessingml2006mainaltChunkPr', False)

    
    altChunkPr = property(__altChunkPr.value, __altChunkPr.set, None, u'External Content Import Properties')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_AltChunk_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        __altChunkPr.name() : __altChunkPr
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_AltChunk', CT_AltChunk)


# Complex type CT_OnOff with content type EMPTY
class CT_OnOff (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_OnOff')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_OnOff_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_OnOff)
    
    val = property(__val.value, __val.set, None, u'On/Off Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_OnOff', CT_OnOff)


# Complex type CT_Char with content type EMPTY
class CT_Char (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_Char')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Char_httpschemas_openxmlformats_orgofficeDocument2006mathval', ST_Char, required=True)
    
    val = property(__val.value, __val.set, None, u'value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_Char', CT_Char)


# Complex type CT_SdtRun with content type ELEMENT_ONLY
class CT_SdtRun (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtRun')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdtContent uses Python identifier sdtContent
    __sdtContent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtContent'), 'sdtContent', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsdtContent', False)

    
    sdtContent = property(__sdtContent.value, __sdtContent.set, None, u'Inline-Level Structured Document Tag Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdtPr uses Python identifier sdtPr
    __sdtPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtPr'), 'sdtPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsdtPr', False)

    
    sdtPr = property(__sdtPr.value, __sdtPr.set, None, u'Structured Document Tag Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdtEndPr uses Python identifier sdtEndPr
    __sdtEndPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtEndPr'), 'sdtEndPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsdtEndPr', False)

    
    sdtEndPr = property(__sdtEndPr.value, __sdtEndPr.set, None, u'Structured Document Tag End Character Properties')


    _ElementMap = {
        __sdtContent.name() : __sdtContent,
        __sdtPr.name() : __sdtPr,
        __sdtEndPr.name() : __sdtEndPr
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtRun', CT_SdtRun)


# Complex type CT_RunTrackChange with content type ELEMENT_ONLY
class CT_RunTrackChange (CT_TrackChange):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_RunTrackChange')
    # Base type is CT_TrackChange
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}eqArr uses Python identifier eqArr
    __eqArr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'eqArr'), 'eqArr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006matheqArr', True)

    
    eqArr = property(__eqArr.value, __eqArr.set, None, u'Array Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}func uses Python identifier func
    __func = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'func'), 'func', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathfunc', True)

    
    func = property(__func.value, __func.set, None, u'Function Apply Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}f uses Python identifier f
    __f = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'f'), 'f', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathf', True)

    
    f = property(__f.value, __f.set, None, u'Fraction Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}groupChr uses Python identifier groupChr
    __groupChr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'groupChr'), 'groupChr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathgroupChr', True)

    
    groupChr = property(__groupChr.value, __groupChr.set, None, u'Group-Character Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}limLow uses Python identifier limLow
    __limLow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'limLow'), 'limLow', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathlimLow', True)

    
    limLow = property(__limLow.value, __limLow.set, None, u'Lower-Limit Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dir uses Python identifier dir
    __dir = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), 'dir', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006maindir', True)

    
    dir = property(__dir.value, __dir.set, None, u'Bidirectional Embedding Level')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}limUpp uses Python identifier limUpp
    __limUpp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'limUpp'), 'limUpp', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathlimUpp', True)

    
    limUpp = property(__limUpp.value, __limUpp.set, None, u'Upper-Limit Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}m uses Python identifier m
    __m = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'm'), 'm', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathm', True)

    
    m = property(__m.value, __m.set, None, u'Matrix Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'r'), 'r', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathr', True)

    
    r = property(__r.value, __r.set, None, u'Run')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}nary uses Python identifier nary
    __nary = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'nary'), 'nary', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathnary', True)

    
    nary = property(__nary.value, __nary.set, None, u'n-ary Operator Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sPre uses Python identifier sPre
    __sPre = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sPre'), 'sPre', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathsPre', True)

    
    sPre = property(__sPre.value, __sPre.set, None, u'Pre-Sub-Superscript Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}phant uses Python identifier phant
    __phant = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'phant'), 'phant', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathphant', True)

    
    phant = property(__phant.value, __phant.set, None, u'Phantom Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}rad uses Python identifier rad
    __rad = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'rad'), 'rad', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathrad', True)

    
    rad = property(__rad.value, __rad.set, None, u'Radical Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), 'bdo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'Bidirectional Override')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sSubSup uses Python identifier sSubSup
    __sSubSup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sSubSup'), 'sSubSup', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathsSubSup', True)

    
    sSubSup = property(__sSubSup.value, __sSubSup.set, None, u'Sub-Superscript Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sSub uses Python identifier sSub
    __sSub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sSub'), 'sSub', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathsSub', True)

    
    sSub = property(__sSub.value, __sSub.set, None, u'Subscript Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sSup uses Python identifier sSup
    __sSup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sSup'), 'sSup', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathsSup', True)

    
    sSup = property(__sSup.value, __sSup.set, None, u'Superscript Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}r uses Python identifier r_
    __r_ = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), 'r_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainr', True)

    
    r_ = property(__r_.value, __r_.set, None, u'Text Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Inline-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}acc uses Python identifier acc
    __acc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'acc'), 'acc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathacc', True)

    
    acc = property(__acc.value, __acc.set, None, u'Accent')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Inline-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}bar uses Python identifier bar
    __bar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'bar'), 'bar', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathbar', True)

    
    bar = property(__bar.value, __bar.set, None, u'Bar')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}box uses Python identifier box
    __box = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'box'), 'box', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathbox', True)

    
    box = property(__box.value, __box.set, None, u'Box Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}smartTag uses Python identifier smartTag
    __smartTag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), 'smartTag', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainsmartTag', True)

    
    smartTag = property(__smartTag.value, __smartTag.set, None, u'Inline-Level Smart Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}borderBox uses Python identifier borderBox
    __borderBox = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'borderBox'), 'borderBox', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathborderBox', True)

    
    borderBox = property(__borderBox.value, __borderBox.set, None, u'Border-Box Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}d uses Python identifier d
    __d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'd'), 'd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgofficeDocument2006mathd', True)

    
    d = property(__d.value, __d.set, None, u'Delimiter Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RunTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Attribute date inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute author inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange

    _ElementMap = CT_TrackChange._ElementMap.copy()
    _ElementMap.update({
        __eqArr.name() : __eqArr,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __func.name() : __func,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __f.name() : __f,
        __groupChr.name() : __groupChr,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __limLow.name() : __limLow,
        __dir.name() : __dir,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __limUpp.name() : __limUpp,
        __m.name() : __m,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __r.name() : __r,
        __nary.name() : __nary,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __sPre.name() : __sPre,
        __phant.name() : __phant,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __rad.name() : __rad,
        __bdo.name() : __bdo,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __sSubSup.name() : __sSubSup,
        __permEnd.name() : __permEnd,
        __sSub.name() : __sSub,
        __sSup.name() : __sSup,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __oMathPara.name() : __oMathPara,
        __r_.name() : __r_,
        __bookmarkStart.name() : __bookmarkStart,
        __moveTo.name() : __moveTo,
        __customXml.name() : __customXml,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __acc.name() : __acc,
        __sdt.name() : __sdt,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __bar.name() : __bar,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __box.name() : __box,
        __smartTag.name() : __smartTag,
        __moveToRangeStart.name() : __moveToRangeStart,
        __borderBox.name() : __borderBox,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __d.name() : __d,
        __commentRangeStart.name() : __commentRangeStart,
        __ins.name() : __ins
    })
    _AttributeMap = CT_TrackChange._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_RunTrackChange', CT_RunTrackChange)


# Complex type CT_CustomXmlRun with content type ELEMENT_ONLY
class CT_CustomXmlRun (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_CustomXmlRun')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlPr uses Python identifier customXmlPr
    __customXmlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlPr'), 'customXmlPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlPr', False)

    
    customXmlPr = property(__customXmlPr.value, __customXmlPr.set, None, u'Custom XML Element Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fldSimple uses Python identifier fldSimple
    __fldSimple = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), 'fldSimple', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainfldSimple', True)

    
    fldSimple = property(__fldSimple.value, __fldSimple.set, None, u'Simple Field')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Inline-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hyperlink uses Python identifier hyperlink
    __hyperlink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), 'hyperlink', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainhyperlink', True)

    
    hyperlink = property(__hyperlink.value, __hyperlink.set, None, u'Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}subDoc uses Python identifier subDoc
    __subDoc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), 'subDoc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsubDoc', True)

    
    subDoc = property(__subDoc.value, __subDoc.set, None, u'Anchor for Subdocument Location')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), 'r', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainr', True)

    
    r = property(__r.value, __r.set, None, u'Text Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}smartTag uses Python identifier smartTag
    __smartTag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), 'smartTag', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsmartTag', True)

    
    smartTag = property(__smartTag.value, __smartTag.set, None, u'Inline-Level Smart Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Inline-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dir uses Python identifier dir
    __dir = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), 'dir', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006maindir', True)

    
    dir = property(__dir.value, __dir.set, None, u'Bidirectional Embedding Level')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), 'bdo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'Bidirectional Override')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}uri uses Python identifier uri
    __uri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'uri'), 'uri', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainuri', _s.ST_String)
    
    uri = property(__uri.value, __uri.set, None, u'Custom XML Markup Namespace')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}element uses Python identifier element
    __element = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'element'), 'element', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRun_httpschemas_openxmlformats_orgwordprocessingml2006mainelement', _s.ST_String, required=True)
    
    element = property(__element.value, __element.set, None, u'Element name')


    _ElementMap = {
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __customXmlPr.name() : __customXmlPr,
        __fldSimple.name() : __fldSimple,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __ins.name() : __ins,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __customXml.name() : __customXml,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __oMathPara.name() : __oMathPara,
        __bookmarkStart.name() : __bookmarkStart,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __hyperlink.name() : __hyperlink,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __subDoc.name() : __subDoc,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __commentRangeStart.name() : __commentRangeStart,
        __commentRangeEnd.name() : __commentRangeEnd,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __r.name() : __r,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __smartTag.name() : __smartTag,
        __sdt.name() : __sdt,
        __dir.name() : __dir,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __bdo.name() : __bdo
    }
    _AttributeMap = {
        __uri.name() : __uri,
        __element.name() : __element
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_CustomXmlRun', CT_CustomXmlRun)


# Complex type CT_Func with content type ELEMENT_ONLY
class CT_Func (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_Func')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Func_httpschemas_openxmlformats_orgofficeDocument2006mathe', False)

    
    e = property(__e.value, __e.set, None, u'Element (Argument)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}funcPr uses Python identifier funcPr
    __funcPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'funcPr'), 'funcPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Func_httpschemas_openxmlformats_orgofficeDocument2006mathfuncPr', False)

    
    funcPr = property(__funcPr.value, __funcPr.set, None, u'Function Properties')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}fName uses Python identifier fName
    __fName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'fName'), 'fName', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Func_httpschemas_openxmlformats_orgofficeDocument2006mathfName', False)

    
    fName = property(__fName.value, __fName.set, None, u'Function Name')


    _ElementMap = {
        __e.name() : __e,
        __funcPr.name() : __funcPr,
        __fName.name() : __fName
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_Func', CT_Func)


# Complex type CT_Border with content type EMPTY
class CT_Border (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Border')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}frame uses Python identifier frame
    __frame = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'frame'), 'frame', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Border_httpschemas_openxmlformats_orgwordprocessingml2006mainframe', _s.ST_OnOff)
    
    frame = property(__frame.value, __frame.set, None, u'Create Frame Effect')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeColor uses Python identifier themeColor
    __themeColor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeColor'), 'themeColor', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Border_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeColor', ST_ThemeColor)
    
    themeColor = property(__themeColor.value, __themeColor.set, None, u'Border Theme Color')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeTint uses Python identifier themeTint
    __themeTint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeTint'), 'themeTint', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Border_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeTint', ST_UcharHexNumber)
    
    themeTint = property(__themeTint.value, __themeTint.set, None, u'Border Theme Color Tint')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shadow uses Python identifier shadow
    __shadow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shadow'), 'shadow', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Border_httpschemas_openxmlformats_orgwordprocessingml2006mainshadow', _s.ST_OnOff)
    
    shadow = property(__shadow.value, __shadow.set, None, u'Border Shadow')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Border_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_Border, required=True)
    
    val = property(__val.value, __val.set, None, u'Border Style')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}space uses Python identifier space
    __space = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'space'), 'space', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Border_httpschemas_openxmlformats_orgwordprocessingml2006mainspace', ST_PointMeasure)
    
    space = property(__space.value, __space.set, None, u'Border Spacing Measurement')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeShade uses Python identifier themeShade
    __themeShade = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeShade'), 'themeShade', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Border_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeShade', ST_UcharHexNumber)
    
    themeShade = property(__themeShade.value, __themeShade.set, None, u'Border Theme Color Shade')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sz uses Python identifier sz
    __sz = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sz'), 'sz', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Border_httpschemas_openxmlformats_orgwordprocessingml2006mainsz', ST_EighthPointMeasure)
    
    sz = property(__sz.value, __sz.set, None, u'Border Width')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'color'), 'color', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Border_httpschemas_openxmlformats_orgwordprocessingml2006maincolor', ST_HexColor)
    
    color = property(__color.value, __color.set, None, u'Border Color')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __frame.name() : __frame,
        __themeColor.name() : __themeColor,
        __themeTint.name() : __themeTint,
        __shadow.name() : __shadow,
        __val.name() : __val,
        __space.name() : __space,
        __themeShade.name() : __themeShade,
        __sz.name() : __sz,
        __color.name() : __color
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Border', CT_Border)


# Complex type CT_SmartTagRun with content type ELEMENT_ONLY
class CT_SmartTagRun (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SmartTagRun')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hyperlink uses Python identifier hyperlink
    __hyperlink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), 'hyperlink', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainhyperlink', True)

    
    hyperlink = property(__hyperlink.value, __hyperlink.set, None, u'Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}subDoc uses Python identifier subDoc
    __subDoc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), 'subDoc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsubDoc', True)

    
    subDoc = property(__subDoc.value, __subDoc.set, None, u'Anchor for Subdocument Location')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Inline-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}smartTag uses Python identifier smartTag
    __smartTag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), 'smartTag', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsmartTag', True)

    
    smartTag = property(__smartTag.value, __smartTag.set, None, u'Inline-Level Smart Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dir uses Python identifier dir
    __dir = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), 'dir', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006maindir', True)

    
    dir = property(__dir.value, __dir.set, None, u'Bidirectional Embedding Level')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Inline-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}smartTagPr uses Python identifier smartTagPr
    __smartTagPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTagPr'), 'smartTagPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsmartTagPr', False)

    
    smartTagPr = property(__smartTagPr.value, __smartTagPr.set, None, u'Smart Tag Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), 'r', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainr', True)

    
    r = property(__r.value, __r.set, None, u'Text Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), 'bdo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'Bidirectional Override')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fldSimple uses Python identifier fldSimple
    __fldSimple = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), 'fldSimple', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainfldSimple', True)

    
    fldSimple = property(__fldSimple.value, __fldSimple.set, None, u'Simple Field')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}uri uses Python identifier uri
    __uri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'uri'), 'uri', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainuri', _s.ST_String)
    
    uri = property(__uri.value, __uri.set, None, u'Smart Tag Namespace')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}element uses Python identifier element
    __element = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'element'), 'element', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagRun_httpschemas_openxmlformats_orgwordprocessingml2006mainelement', _s.ST_String, required=True)
    
    element = property(__element.value, __element.set, None, u'Smart Tag Name')


    _ElementMap = {
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __oMathPara.name() : __oMathPara,
        __bookmarkStart.name() : __bookmarkStart,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __hyperlink.name() : __hyperlink,
        __subDoc.name() : __subDoc,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __commentRangeStart.name() : __commentRangeStart,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __sdt.name() : __sdt,
        __smartTag.name() : __smartTag,
        __dir.name() : __dir,
        __customXml.name() : __customXml,
        __smartTagPr.name() : __smartTagPr,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __r.name() : __r,
        __ins.name() : __ins,
        __bdo.name() : __bdo,
        __fldSimple.name() : __fldSimple,
        __del.name() : __del,
        __proofErr.name() : __proofErr
    }
    _AttributeMap = {
        __uri.name() : __uri,
        __element.name() : __element
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SmartTagRun', CT_SmartTagRun)


# Complex type CT_ProofErr with content type EMPTY
class CT_ProofErr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_ProofErr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ProofErr_httpschemas_openxmlformats_orgwordprocessingml2006maintype', ST_ProofErr, required=True)
    
    type = property(__type.value, __type.set, None, u'Proofing Error Anchor Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __type.name() : __type
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_ProofErr', CT_ProofErr)


# Complex type CT_MarkupRange with content type EMPTY
class CT_MarkupRange (CT_Markup):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_MarkupRange')
    # Base type is CT_Markup
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}displacedByCustomXml uses Python identifier displacedByCustomXml
    __displacedByCustomXml = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'displacedByCustomXml'), 'displacedByCustomXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MarkupRange_httpschemas_openxmlformats_orgwordprocessingml2006maindisplacedByCustomXml', ST_DisplacedByCustomXml)
    
    displacedByCustomXml = property(__displacedByCustomXml.value, __displacedByCustomXml.set, None, u'Annotation Marker Relocated For Custom XML Markup')


    _ElementMap = CT_Markup._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_Markup._AttributeMap.copy()
    _AttributeMap.update({
        __displacedByCustomXml.name() : __displacedByCustomXml
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_MarkupRange', CT_MarkupRange)


# Complex type CT_CtrlPr with content type ELEMENT_ONLY
class CT_CtrlPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_CtrlPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_CtrlPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Run Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_CtrlPr_httpschemas_openxmlformats_orgwordprocessingml2006mainins', False)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Math Control Character')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_CtrlPr_httpschemas_openxmlformats_orgwordprocessingml2006maindel', False)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Math Control Character')


    _ElementMap = {
        __rPr.name() : __rPr,
        __ins.name() : __ins,
        __del.name() : __del
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_CtrlPr', CT_CtrlPr)


# Complex type CT_OMathArg with content type ELEMENT_ONLY
class CT_OMathArg (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_OMathArg')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}limUpp uses Python identifier limUpp
    __limUpp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'limUpp'), 'limUpp', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathlimUpp', True)

    
    limUpp = property(__limUpp.value, __limUpp.set, None, u'Upper-Limit Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}m uses Python identifier m
    __m = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'm'), 'm', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathm', True)

    
    m = property(__m.value, __m.set, None, u'Matrix Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}argPr uses Python identifier argPr
    __argPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'argPr'), 'argPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathargPr', False)

    
    argPr = property(__argPr.value, __argPr.set, None, u'Argument Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}nary uses Python identifier nary
    __nary = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'nary'), 'nary', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathnary', True)

    
    nary = property(__nary.value, __nary.set, None, u'n-ary Operator Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}acc uses Python identifier acc
    __acc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'acc'), 'acc', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathacc', True)

    
    acc = property(__acc.value, __acc.set, None, u'Accent')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}rad uses Python identifier rad
    __rad = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'rad'), 'rad', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathrad', True)

    
    rad = property(__rad.value, __rad.set, None, u'Radical Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sPre uses Python identifier sPre
    __sPre = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sPre'), 'sPre', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathsPre', True)

    
    sPre = property(__sPre.value, __sPre.set, None, u'Pre-Sub-Superscript Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}phant uses Python identifier phant
    __phant = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'phant'), 'phant', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathphant', True)

    
    phant = property(__phant.value, __phant.set, None, u'Phantom Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sSubSup uses Python identifier sSubSup
    __sSubSup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sSubSup'), 'sSubSup', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathsSubSup', True)

    
    sSubSup = property(__sSubSup.value, __sSubSup.set, None, u'Sub-Superscript Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sSup uses Python identifier sSup
    __sSup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sSup'), 'sSup', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathsSup', True)

    
    sSup = property(__sSup.value, __sSup.set, None, u'Superscript Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'r'), 'r', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathr', True)

    
    r = property(__r.value, __r.set, None, u'Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}bar uses Python identifier bar
    __bar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'bar'), 'bar', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathbar', True)

    
    bar = property(__bar.value, __bar.set, None, u'Bar')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}box uses Python identifier box
    __box = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'box'), 'box', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathbox', True)

    
    box = property(__box.value, __box.set, None, u'Box Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}borderBox uses Python identifier borderBox
    __borderBox = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'borderBox'), 'borderBox', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathborderBox', True)

    
    borderBox = property(__borderBox.value, __borderBox.set, None, u'Border-Box Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}d uses Python identifier d
    __d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'd'), 'd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathd', True)

    
    d = property(__d.value, __d.set, None, u'Delimiter Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}eqArr uses Python identifier eqArr
    __eqArr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'eqArr'), 'eqArr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006matheqArr', True)

    
    eqArr = property(__eqArr.value, __eqArr.set, None, u'Array Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sSub uses Python identifier sSub
    __sSub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sSub'), 'sSub', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathsSub', True)

    
    sSub = property(__sSub.value, __sSub.set, None, u'Subscript Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}f uses Python identifier f
    __f = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'f'), 'f', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathf', True)

    
    f = property(__f.value, __f.set, None, u'Fraction Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}func uses Python identifier func
    __func = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'func'), 'func', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathfunc', True)

    
    func = property(__func.value, __func.set, None, u'Function Apply Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}groupChr uses Python identifier groupChr
    __groupChr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'groupChr'), 'groupChr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathgroupChr', True)

    
    groupChr = property(__groupChr.value, __groupChr.set, None, u'Group-Character Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}limLow uses Python identifier limLow
    __limLow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'limLow'), 'limLow', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgofficeDocument2006mathlimLow', True)

    
    limLow = property(__limLow.value, __limLow.set, None, u'Lower-Limit Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArg_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')


    _ElementMap = {
        __limUpp.name() : __limUpp,
        __m.name() : __m,
        __argPr.name() : __argPr,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __nary.name() : __nary,
        __acc.name() : __acc,
        __ctrlPr.name() : __ctrlPr,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __rad.name() : __rad,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __sPre.name() : __sPre,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __phant.name() : __phant,
        __sSubSup.name() : __sSubSup,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __sSup.name() : __sSup,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __r.name() : __r,
        __ins.name() : __ins,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __bar.name() : __bar,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __box.name() : __box,
        __commentRangeEnd.name() : __commentRangeEnd,
        __borderBox.name() : __borderBox,
        __oMathPara.name() : __oMathPara,
        __bookmarkStart.name() : __bookmarkStart,
        __d.name() : __d,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __eqArr.name() : __eqArr,
        __sSub.name() : __sSub,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __f.name() : __f,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __func.name() : __func,
        __moveToRangeStart.name() : __moveToRangeStart,
        __groupChr.name() : __groupChr,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __limLow.name() : __limLow,
        __commentRangeStart.name() : __commentRangeStart
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_OMathArg', CT_OMathArg)


# Complex type CT_SignedTwipsMeasure with content type EMPTY
class CT_SignedTwipsMeasure (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SignedTwipsMeasure')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SignedTwipsMeasure_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_SignedTwipsMeasure, required=True)
    
    val = property(__val.value, __val.set, None, u'Positive or Negative Value in Twentieths of a Point')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SignedTwipsMeasure', CT_SignedTwipsMeasure)


# Complex type CT_String with content type EMPTY
class CT_String (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_String')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_String_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_String, required=True)
    
    val = property(__val.value, __val.set, None, u'String Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_String', CT_String)


# Complex type CT_Perm with content type EMPTY
class CT_Perm (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Perm')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Perm_httpschemas_openxmlformats_orgwordprocessingml2006mainid', _s.ST_String, required=True)
    
    id = property(__id.value, __id.set, None, u'Annotation ID')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}displacedByCustomXml uses Python identifier displacedByCustomXml
    __displacedByCustomXml = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'displacedByCustomXml'), 'displacedByCustomXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Perm_httpschemas_openxmlformats_orgwordprocessingml2006maindisplacedByCustomXml', ST_DisplacedByCustomXml)
    
    displacedByCustomXml = property(__displacedByCustomXml.value, __displacedByCustomXml.set, None, u'Annotation Displaced By Custom XML Markup')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id,
        __displacedByCustomXml.name() : __displacedByCustomXml
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Perm', CT_Perm)


# Complex type CT_Hyperlink with content type ELEMENT_ONLY
class CT_Hyperlink (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Hyperlink')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dir uses Python identifier dir
    __dir = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), 'dir', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maindir', True)

    
    dir = property(__dir.value, __dir.set, None, u'Bidirectional Embedding Level')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), 'r', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainr', True)

    
    r = property(__r.value, __r.set, None, u'Text Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fldSimple uses Python identifier fldSimple
    __fldSimple = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), 'fldSimple', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainfldSimple', True)

    
    fldSimple = property(__fldSimple.value, __fldSimple.set, None, u'Simple Field')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Inline-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hyperlink uses Python identifier hyperlink
    __hyperlink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), 'hyperlink', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainhyperlink', True)

    
    hyperlink = property(__hyperlink.value, __hyperlink.set, None, u'Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}smartTag uses Python identifier smartTag
    __smartTag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), 'smartTag', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainsmartTag', True)

    
    smartTag = property(__smartTag.value, __smartTag.set, None, u'Inline-Level Smart Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}subDoc uses Python identifier subDoc
    __subDoc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), 'subDoc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainsubDoc', True)

    
    subDoc = property(__subDoc.value, __subDoc.set, None, u'Anchor for Subdocument Location')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), 'bdo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'Bidirectional Override')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Inline-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tgtFrame uses Python identifier tgtFrame
    __tgtFrame = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tgtFrame'), 'tgtFrame', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maintgtFrame', _s.ST_String)
    
    tgtFrame = property(__tgtFrame.value, __tgtFrame.set, None, u'Hyperlink Target Frame')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docLocation uses Python identifier docLocation
    __docLocation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docLocation'), 'docLocation', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maindocLocation', _s.ST_String)
    
    docLocation = property(__docLocation.value, __docLocation.set, None, u'Location in Target Document')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}history uses Python identifier history
    __history = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'history'), 'history', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainhistory', _s.ST_OnOff)
    
    history = property(__history.value, __history.set, None, u'Add To Viewed Hyperlinks')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}anchor uses Python identifier anchor
    __anchor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'anchor'), 'anchor', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006mainanchor', _s.ST_String)
    
    anchor = property(__anchor.value, __anchor.set, None, u'Hyperlink Anchor')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tooltip uses Python identifier tooltip
    __tooltip = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tooltip'), 'tooltip', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgwordprocessingml2006maintooltip', _s.ST_String)
    
    tooltip = property(__tooltip.value, __tooltip.set, None, u'Associated String')


    _ElementMap = {
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __dir.name() : __dir,
        __r.name() : __r,
        __ins.name() : __ins,
        __fldSimple.name() : __fldSimple,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __customXml.name() : __customXml,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __bookmarkStart.name() : __bookmarkStart,
        __oMath.name() : __oMath,
        __hyperlink.name() : __hyperlink,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __smartTag.name() : __smartTag,
        __subDoc.name() : __subDoc,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __bookmarkEnd.name() : __bookmarkEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __commentRangeStart.name() : __commentRangeStart,
        __bdo.name() : __bdo,
        __commentRangeEnd.name() : __commentRangeEnd,
        __sdt.name() : __sdt,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __oMathPara.name() : __oMathPara,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd
    }
    _AttributeMap = {
        __tgtFrame.name() : __tgtFrame,
        __docLocation.name() : __docLocation,
        __history.name() : __history,
        __id.name() : __id,
        __anchor.name() : __anchor,
        __tooltip.name() : __tooltip
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Hyperlink', CT_Hyperlink)


# Complex type CT_Empty with content type EMPTY
class CT_Empty (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Empty')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Empty', CT_Empty)


# Complex type CT_OMath with content type ELEMENT_ONLY
class CT_OMath (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_OMath')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}borderBox uses Python identifier borderBox
    __borderBox = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'borderBox'), 'borderBox', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathborderBox', True)

    
    borderBox = property(__borderBox.value, __borderBox.set, None, u'Border-Box Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}d uses Python identifier d
    __d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'd'), 'd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathd', True)

    
    d = property(__d.value, __d.set, None, u'Delimiter Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}f uses Python identifier f
    __f = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'f'), 'f', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathf', True)

    
    f = property(__f.value, __f.set, None, u'Fraction Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}func uses Python identifier func
    __func = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'func'), 'func', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathfunc', True)

    
    func = property(__func.value, __func.set, None, u'Function Apply Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}limLow uses Python identifier limLow
    __limLow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'limLow'), 'limLow', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathlimLow', True)

    
    limLow = property(__limLow.value, __limLow.set, None, u'Lower-Limit Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}limUpp uses Python identifier limUpp
    __limUpp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'limUpp'), 'limUpp', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathlimUpp', True)

    
    limUpp = property(__limUpp.value, __limUpp.set, None, u'Upper-Limit Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}m uses Python identifier m
    __m = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'm'), 'm', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathm', True)

    
    m = property(__m.value, __m.set, None, u'Matrix Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}nary uses Python identifier nary
    __nary = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'nary'), 'nary', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathnary', True)

    
    nary = property(__nary.value, __nary.set, None, u'n-ary Operator Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}rad uses Python identifier rad
    __rad = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'rad'), 'rad', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathrad', True)

    
    rad = property(__rad.value, __rad.set, None, u'Radical Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sPre uses Python identifier sPre
    __sPre = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sPre'), 'sPre', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathsPre', True)

    
    sPre = property(__sPre.value, __sPre.set, None, u'Pre-Sub-Superscript Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}phant uses Python identifier phant
    __phant = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'phant'), 'phant', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathphant', True)

    
    phant = property(__phant.value, __phant.set, None, u'Phantom Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sSub uses Python identifier sSub
    __sSub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sSub'), 'sSub', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathsSub', True)

    
    sSub = property(__sSub.value, __sSub.set, None, u'Subscript Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sSubSup uses Python identifier sSubSup
    __sSubSup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sSubSup'), 'sSubSup', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathsSubSup', True)

    
    sSubSup = property(__sSubSup.value, __sSubSup.set, None, u'Sub-Superscript Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sSup uses Python identifier sSup
    __sSup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sSup'), 'sSup', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathsSup', True)

    
    sSup = property(__sSup.value, __sSup.set, None, u'Superscript Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}groupChr uses Python identifier groupChr
    __groupChr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'groupChr'), 'groupChr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathgroupChr', True)

    
    groupChr = property(__groupChr.value, __groupChr.set, None, u'Group-Character Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'r'), 'r', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathr', True)

    
    r = property(__r.value, __r.set, None, u'Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}acc uses Python identifier acc
    __acc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'acc'), 'acc', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathacc', True)

    
    acc = property(__acc.value, __acc.set, None, u'Accent')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}eqArr uses Python identifier eqArr
    __eqArr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'eqArr'), 'eqArr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006matheqArr', True)

    
    eqArr = property(__eqArr.value, __eqArr.set, None, u'Array Object')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}bar uses Python identifier bar
    __bar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'bar'), 'bar', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathbar', True)

    
    bar = property(__bar.value, __bar.set, None, u'Bar')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}box uses Python identifier box
    __box = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'box'), 'box', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMath_httpschemas_openxmlformats_orgofficeDocument2006mathbox', True)

    
    box = property(__box.value, __box.set, None, u'Box Object')


    _ElementMap = {
        __borderBox.name() : __borderBox,
        __oMathPara.name() : __oMathPara,
        __permStart.name() : __permStart,
        __bookmarkStart.name() : __bookmarkStart,
        __oMath.name() : __oMath,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __bookmarkEnd.name() : __bookmarkEnd,
        __d.name() : __d,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __f.name() : __f,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __func.name() : __func,
        __moveToRangeStart.name() : __moveToRangeStart,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __limLow.name() : __limLow,
        __commentRangeStart.name() : __commentRangeStart,
        __limUpp.name() : __limUpp,
        __commentRangeEnd.name() : __commentRangeEnd,
        __m.name() : __m,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __nary.name() : __nary,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __rad.name() : __rad,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __sPre.name() : __sPre,
        __phant.name() : __phant,
        __sSub.name() : __sSub,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __sSubSup.name() : __sSubSup,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __sSup.name() : __sSup,
        __groupChr.name() : __groupChr,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __r.name() : __r,
        __ins.name() : __ins,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __acc.name() : __acc,
        __moveFrom.name() : __moveFrom,
        __eqArr.name() : __eqArr,
        __bar.name() : __bar,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __box.name() : __box
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_OMath', CT_OMath)


# Complex type CT_UnSignedInteger with content type EMPTY
class CT_UnSignedInteger (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_UnSignedInteger')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_UnSignedInteger_httpschemas_openxmlformats_orgofficeDocument2006mathval', ST_UnSignedInteger, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_UnSignedInteger', CT_UnSignedInteger)


# Complex type CT_Drawing with content type EMPTY
class CT_Drawing (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Drawing')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}instr uses Python identifier instr
    __instr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'instr'), 'instr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Drawing_httpschemas_openxmlformats_orgwordprocessingml2006maininstr', _s.ST_String, required=True)
    
    instr = property(__instr.value, __instr.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __instr.name() : __instr
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Drawing', CT_Drawing)


# Complex type CT_PixelsMeasure with content type EMPTY
class CT_PixelsMeasure (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_PixelsMeasure')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PixelsMeasure_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_PixelsMeasure, required=True)
    
    val = property(__val.value, __val.set, None, u'Measurement in Pixels')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_PixelsMeasure', CT_PixelsMeasure)


# Complex type CT_PermStart with content type EMPTY
class CT_PermStart (CT_Perm):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_PermStart')
    # Base type is CT_Perm
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ed uses Python identifier ed
    __ed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ed'), 'ed', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PermStart_httpschemas_openxmlformats_orgwordprocessingml2006mained', _s.ST_String)
    
    ed = property(__ed.value, __ed.set, None, u'Single User For Range Permission')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}edGrp uses Python identifier edGrp
    __edGrp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'edGrp'), 'edGrp', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PermStart_httpschemas_openxmlformats_orgwordprocessingml2006mainedGrp', ST_EdGrp)
    
    edGrp = property(__edGrp.value, __edGrp.set, None, u'Editor Group For Range Permission')

    
    # Attribute displacedByCustomXml inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Perm
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}colLast uses Python identifier colLast
    __colLast = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'colLast'), 'colLast', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PermStart_httpschemas_openxmlformats_orgwordprocessingml2006maincolLast', ST_DecimalNumber)
    
    colLast = property(__colLast.value, __colLast.set, None, u'Last Table Column Covered By Range Permission')

    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Perm
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}colFirst uses Python identifier colFirst
    __colFirst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'colFirst'), 'colFirst', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PermStart_httpschemas_openxmlformats_orgwordprocessingml2006maincolFirst', ST_DecimalNumber)
    
    colFirst = property(__colFirst.value, __colFirst.set, None, u'First Table Column Covered By Range Permission')


    _ElementMap = CT_Perm._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_Perm._AttributeMap.copy()
    _AttributeMap.update({
        __ed.name() : __ed,
        __edGrp.name() : __edGrp,
        __colLast.name() : __colLast,
        __colFirst.name() : __colFirst
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_PermStart', CT_PermStart)


# Complex type CT_FtnEdnRef with content type EMPTY
class CT_FtnEdnRef (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FtnEdnRef')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customMarkFollows uses Python identifier customMarkFollows
    __customMarkFollows = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customMarkFollows'), 'customMarkFollows', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdnRef_httpschemas_openxmlformats_orgwordprocessingml2006maincustomMarkFollows', _s.ST_OnOff)
    
    customMarkFollows = property(__customMarkFollows.value, __customMarkFollows.set, None, u'Suppress Footnote/Endnote Reference Mark')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdnRef_httpschemas_openxmlformats_orgwordprocessingml2006mainid', ST_DecimalNumber, required=True)
    
    id = property(__id.value, __id.set, None, u'Footnote/Endnote ID Reference')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __customMarkFollows.name() : __customMarkFollows,
        __id.name() : __id
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FtnEdnRef', CT_FtnEdnRef)


# Complex type CT_EastAsianLayout with content type EMPTY
class CT_EastAsianLayout (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_EastAsianLayout')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vertCompress uses Python identifier vertCompress
    __vertCompress = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vertCompress'), 'vertCompress', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_EastAsianLayout_httpschemas_openxmlformats_orgwordprocessingml2006mainvertCompress', _s.ST_OnOff)
    
    vertCompress = property(__vertCompress.value, __vertCompress.set, None, u'Compress Rotated Text to Line Height')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vert uses Python identifier vert
    __vert = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vert'), 'vert', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_EastAsianLayout_httpschemas_openxmlformats_orgwordprocessingml2006mainvert', _s.ST_OnOff)
    
    vert = property(__vert.value, __vert.set, None, u'Horizontal in Vertical (Rotate Text)')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}combine uses Python identifier combine
    __combine = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'combine'), 'combine', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_EastAsianLayout_httpschemas_openxmlformats_orgwordprocessingml2006maincombine', _s.ST_OnOff)
    
    combine = property(__combine.value, __combine.set, None, u'Two Lines in One')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}combineBrackets uses Python identifier combineBrackets
    __combineBrackets = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'combineBrackets'), 'combineBrackets', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_EastAsianLayout_httpschemas_openxmlformats_orgwordprocessingml2006maincombineBrackets', ST_CombineBrackets)
    
    combineBrackets = property(__combineBrackets.value, __combineBrackets.set, None, u'Display Brackets Around Two Lines in One')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_EastAsianLayout_httpschemas_openxmlformats_orgwordprocessingml2006mainid', ST_DecimalNumber)
    
    id = property(__id.value, __id.set, None, u'East Asian Typography Run ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __vertCompress.name() : __vertCompress,
        __vert.name() : __vert,
        __combine.name() : __combine,
        __combineBrackets.name() : __combineBrackets,
        __id.name() : __id
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_EastAsianLayout', CT_EastAsianLayout)


# Complex type CT_SdtPr with content type ELEMENT_ONLY
class CT_SdtPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}citation uses Python identifier citation
    __citation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'citation'), 'citation', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006maincitation', True)

    
    citation = property(__citation.value, __citation.set, None, u'Citation Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrPr', True)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Run Properties For Structured Document Tag Contents')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}group uses Python identifier group
    __group = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'group'), 'group', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006maingroup', True)

    
    group = property(__group.value, __group.set, None, u'Group Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tag uses Python identifier tag
    __tag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tag'), 'tag', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006maintag', True)

    
    tag = property(__tag.value, __tag.set, None, u'Programmatic Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}showingPlcHdr uses Python identifier showingPlcHdr
    __showingPlcHdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'showingPlcHdr'), 'showingPlcHdr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006mainshowingPlcHdr', True)

    
    showingPlcHdr = property(__showingPlcHdr.value, __showingPlcHdr.set, None, u'Current Contents Are Placeholder Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}label uses Python identifier label
    __label = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'label'), 'label', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006mainlabel', True)

    
    label = property(__label.value, __label.set, None, u'Structured Document Tag Label')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tabIndex uses Python identifier tabIndex
    __tabIndex = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tabIndex'), 'tabIndex', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006maintabIndex', True)

    
    tabIndex = property(__tabIndex.value, __tabIndex.set, None, u'Structured Document Tag Navigation Order Index')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lock uses Python identifier lock
    __lock = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lock'), 'lock', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006mainlock', True)

    
    lock = property(__lock.value, __lock.set, None, u'Locking Setting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}placeholder uses Python identifier placeholder
    __placeholder = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'placeholder'), 'placeholder', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006mainplaceholder', True)

    
    placeholder = property(__placeholder.value, __placeholder.set, None, u'Structured Document Tag Placeholder Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bibliography uses Python identifier bibliography
    __bibliography = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bibliography'), 'bibliography', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006mainbibliography', True)

    
    bibliography = property(__bibliography.value, __bibliography.set, None, u'Bibliography Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dataBinding uses Python identifier dataBinding
    __dataBinding = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dataBinding'), 'dataBinding', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006maindataBinding', True)

    
    dataBinding = property(__dataBinding.value, __dataBinding.set, None, u'XML Mapping')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}temporary uses Python identifier temporary
    __temporary = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'temporary'), 'temporary', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006maintemporary', True)

    
    temporary = property(__temporary.value, __temporary.set, None, u'Remove Structured Document Tag When Contents Are Edited')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}id uses Python identifier id
    __id = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006mainid', True)

    
    id = property(__id.value, __id.set, None, u'Unique ID')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}equation uses Python identifier equation
    __equation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'equation'), 'equation', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006mainequation', True)

    
    equation = property(__equation.value, __equation.set, None, u'Equation Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}alias uses Python identifier alias
    __alias = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'alias'), 'alias', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006mainalias', True)

    
    alias = property(__alias.value, __alias.set, None, u'Friendly Name')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}comboBox uses Python identifier comboBox
    __comboBox = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'comboBox'), 'comboBox', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006maincomboBox', True)

    
    comboBox = property(__comboBox.value, __comboBox.set, None, u'Combo Box Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}date uses Python identifier date
    __date = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'date'), 'date', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006maindate', True)

    
    date = property(__date.value, __date.set, None, u'Date Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docPartObj uses Python identifier docPartObj
    __docPartObj = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartObj'), 'docPartObj', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006maindocPartObj', True)

    
    docPartObj = property(__docPartObj.value, __docPartObj.set, None, u'Built-In Document Part Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}richText uses Python identifier richText
    __richText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'richText'), 'richText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrichText', True)

    
    richText = property(__richText.value, __richText.set, None, u'Rich Text Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docPartList uses Python identifier docPartList
    __docPartList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartList'), 'docPartList', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006maindocPartList', True)

    
    docPartList = property(__docPartList.value, __docPartList.set, None, u'Document Part Gallery Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dropDownList uses Python identifier dropDownList
    __dropDownList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dropDownList'), 'dropDownList', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006maindropDownList', True)

    
    dropDownList = property(__dropDownList.value, __dropDownList.set, None, u'Drop-Down List Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}picture uses Python identifier picture
    __picture = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'picture'), 'picture', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006mainpicture', True)

    
    picture = property(__picture.value, __picture.set, None, u'Picture Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}text uses Python identifier text
    __text = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'text'), 'text', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtPr_httpschemas_openxmlformats_orgwordprocessingml2006maintext', True)

    
    text = property(__text.value, __text.set, None, u'Plain Text Structured Document Tag')


    _ElementMap = {
        __citation.name() : __citation,
        __rPr.name() : __rPr,
        __group.name() : __group,
        __tag.name() : __tag,
        __showingPlcHdr.name() : __showingPlcHdr,
        __label.name() : __label,
        __tabIndex.name() : __tabIndex,
        __lock.name() : __lock,
        __placeholder.name() : __placeholder,
        __bibliography.name() : __bibliography,
        __dataBinding.name() : __dataBinding,
        __temporary.name() : __temporary,
        __id.name() : __id,
        __equation.name() : __equation,
        __alias.name() : __alias,
        __comboBox.name() : __comboBox,
        __date.name() : __date,
        __docPartObj.name() : __docPartObj,
        __richText.name() : __richText,
        __docPartList.name() : __docPartList,
        __dropDownList.name() : __dropDownList,
        __picture.name() : __picture,
        __text.name() : __text
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtPr', CT_SdtPr)


# Complex type CT_TblGridBase with content type ELEMENT_ONLY
class CT_TblGridBase (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblGridBase')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}gridCol uses Python identifier gridCol
    __gridCol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'gridCol'), 'gridCol', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblGridBase_httpschemas_openxmlformats_orgwordprocessingml2006maingridCol', True)

    
    gridCol = property(__gridCol.value, __gridCol.set, None, u'Grid Column Definition')


    _ElementMap = {
        __gridCol.name() : __gridCol
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblGridBase', CT_TblGridBase)


# Complex type CT_TblGrid with content type ELEMENT_ONLY
class CT_TblGrid (CT_TblGridBase):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblGrid')
    # Base type is CT_TblGridBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblGridChange uses Python identifier tblGridChange
    __tblGridChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblGridChange'), 'tblGridChange', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblGrid_httpschemas_openxmlformats_orgwordprocessingml2006maintblGridChange', False)

    
    tblGridChange = property(__tblGridChange.value, __tblGridChange.set, None, u'Revision Information for Table Grid Column Definitions')

    
    # Element gridCol ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}gridCol) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblGridBase

    _ElementMap = CT_TblGridBase._ElementMap.copy()
    _ElementMap.update({
        __tblGridChange.name() : __tblGridChange
    })
    _AttributeMap = CT_TblGridBase._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblGrid', CT_TblGrid)


# Complex type CT_P with content type ELEMENT_ONLY
class CT_P (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_P')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pPr uses Python identifier pPr
    __pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr'), 'pPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainpPr', False)

    
    pPr = property(__pPr.value, __pPr.set, None, u'Paragraph Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}smartTag uses Python identifier smartTag
    __smartTag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), 'smartTag', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainsmartTag', True)

    
    smartTag = property(__smartTag.value, __smartTag.set, None, u'Inline-Level Smart Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Inline-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), 'bdo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'Bidirectional Override')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dir uses Python identifier dir
    __dir = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), 'dir', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006maindir', True)

    
    dir = property(__dir.value, __dir.set, None, u'Bidirectional Embedding Level')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fldSimple uses Python identifier fldSimple
    __fldSimple = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), 'fldSimple', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainfldSimple', True)

    
    fldSimple = property(__fldSimple.value, __fldSimple.set, None, u'Simple Field')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Inline-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hyperlink uses Python identifier hyperlink
    __hyperlink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), 'hyperlink', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainhyperlink', True)

    
    hyperlink = property(__hyperlink.value, __hyperlink.set, None, u'Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}subDoc uses Python identifier subDoc
    __subDoc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), 'subDoc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainsubDoc', True)

    
    subDoc = property(__subDoc.value, __subDoc.set, None, u'Anchor for Subdocument Location')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), 'r', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainr', True)

    
    r = property(__r.value, __r.set, None, u'Text Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidR uses Python identifier rsidR
    __rsidR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidR'), 'rsidR', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidR', ST_LongHexNumber)
    
    rsidR = property(__rsidR.value, __rsidR.set, None, u'Revision Identifier for Paragraph')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidRDefault uses Python identifier rsidRDefault
    __rsidRDefault = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidRDefault'), 'rsidRDefault', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidRDefault', ST_LongHexNumber)
    
    rsidRDefault = property(__rsidRDefault.value, __rsidRDefault.set, None, u'Default Revision Identifier for Runs')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidP uses Python identifier rsidP
    __rsidP = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidP'), 'rsidP', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidP', ST_LongHexNumber)
    
    rsidP = property(__rsidP.value, __rsidP.set, None, u'Revision Identifier for Paragraph Properties')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidRPr uses Python identifier rsidRPr
    __rsidRPr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidRPr'), 'rsidRPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidRPr', ST_LongHexNumber)
    
    rsidRPr = property(__rsidRPr.value, __rsidRPr.set, None, u'Revision Identifier for Paragraph Glyph Formatting')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidDel uses Python identifier rsidDel
    __rsidDel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidDel'), 'rsidDel', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_P_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidDel', ST_LongHexNumber)
    
    rsidDel = property(__rsidDel.value, __rsidDel.set, None, u'Revision Identifier for Paragraph Deletion')


    _ElementMap = {
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __commentRangeStart.name() : __commentRangeStart,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __moveTo.name() : __moveTo,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __pPr.name() : __pPr,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __smartTag.name() : __smartTag,
        __sdt.name() : __sdt,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __bdo.name() : __bdo,
        __dir.name() : __dir,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __fldSimple.name() : __fldSimple,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __ins.name() : __ins,
        __permEnd.name() : __permEnd,
        __customXml.name() : __customXml,
        __oMathPara.name() : __oMathPara,
        __bookmarkStart.name() : __bookmarkStart,
        __commentRangeEnd.name() : __commentRangeEnd,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __hyperlink.name() : __hyperlink,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __subDoc.name() : __subDoc,
        __r.name() : __r,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart
    }
    _AttributeMap = {
        __rsidR.name() : __rsidR,
        __rsidRDefault.name() : __rsidRDefault,
        __rsidP.name() : __rsidP,
        __rsidRPr.name() : __rsidRPr,
        __rsidDel.name() : __rsidDel
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_P', CT_P)


# Complex type CT_DocPartCategory with content type ELEMENT_ONLY
class CT_DocPartCategory (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocPartCategory')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}gallery uses Python identifier gallery
    __gallery = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'gallery'), 'gallery', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartCategory_httpschemas_openxmlformats_orgwordprocessingml2006maingallery', False)

    
    gallery = property(__gallery.value, __gallery.set, None, u'Gallery Associated With Entry')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartCategory_httpschemas_openxmlformats_orgwordprocessingml2006mainname', False)

    
    name = property(__name.value, __name.set, None, u'Category Associated With Entry')


    _ElementMap = {
        __gallery.name() : __gallery,
        __name.name() : __name
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocPartCategory', CT_DocPartCategory)


# Complex type CT_CustomXmlCell with content type ELEMENT_ONLY
class CT_CustomXmlCell (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_CustomXmlCell')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlPr uses Python identifier customXmlPr
    __customXmlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlPr'), 'customXmlPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlPr', False)

    
    customXmlPr = property(__customXmlPr.value, __customXmlPr.set, None, u'Custom XML Element Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Cell-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tc uses Python identifier tc
    __tc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tc'), 'tc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006maintc', True)

    
    tc = property(__tc.value, __tc.set, None, u'Table Cell')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Cell-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}uri uses Python identifier uri
    __uri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'uri'), 'uri', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006mainuri', _s.ST_String)
    
    uri = property(__uri.value, __uri.set, None, u'Custom XML Element Namespace')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}element uses Python identifier element
    __element = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'element'), 'element', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlCell_httpschemas_openxmlformats_orgwordprocessingml2006mainelement', _s.ST_String, required=True)
    
    element = property(__element.value, __element.set, None, u'Custom XML Element Name')


    _ElementMap = {
        __oMathPara.name() : __oMathPara,
        __oMath.name() : __oMath,
        __moveTo.name() : __moveTo,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __bookmarkStart.name() : __bookmarkStart,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __commentRangeStart.name() : __commentRangeStart,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __customXmlPr.name() : __customXmlPr,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __customXml.name() : __customXml,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __ins.name() : __ins,
        __bookmarkEnd.name() : __bookmarkEnd,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __tc.name() : __tc,
        __sdt.name() : __sdt,
        __permEnd.name() : __permEnd
    }
    _AttributeMap = {
        __uri.name() : __uri,
        __element.name() : __element
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_CustomXmlCell', CT_CustomXmlCell)


# Complex type CT_HpsMeasure with content type EMPTY
class CT_HpsMeasure (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_HpsMeasure')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HpsMeasure_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_HpsMeasure, required=True)
    
    val = property(__val.value, __val.set, None, u'Half Point Measurement')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_HpsMeasure', CT_HpsMeasure)


# Complex type CT_OnOff_ with content type EMPTY
class CT_OnOff_ (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_OnOff')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OnOff_httpschemas_openxmlformats_orgofficeDocument2006mathval', _s.ST_OnOff)
    
    val = property(__val.value, __val.set, None, u'value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_OnOff', CT_OnOff_)


# Complex type CT_JcTable with content type EMPTY
class CT_JcTable (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_JcTable')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_JcTable_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_JcTable, required=True)
    
    val = property(__val.value, __val.set, None, u'Alignment Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_JcTable', CT_JcTable)


# Complex type CT_BookmarkRange with content type EMPTY
class CT_BookmarkRange (CT_MarkupRange):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_BookmarkRange')
    # Base type is CT_MarkupRange
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}colFirst uses Python identifier colFirst
    __colFirst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'colFirst'), 'colFirst', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BookmarkRange_httpschemas_openxmlformats_orgwordprocessingml2006maincolFirst', ST_DecimalNumber)
    
    colFirst = property(__colFirst.value, __colFirst.set, None, u'First Table Column Covered By Bookmark')

    
    # Attribute displacedByCustomXml inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_MarkupRange
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}colLast uses Python identifier colLast
    __colLast = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'colLast'), 'colLast', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BookmarkRange_httpschemas_openxmlformats_orgwordprocessingml2006maincolLast', ST_DecimalNumber)
    
    colLast = property(__colLast.value, __colLast.set, None, u'Last Table Column Covered By Bookmark')


    _ElementMap = CT_MarkupRange._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_MarkupRange._AttributeMap.copy()
    _AttributeMap.update({
        __colFirst.name() : __colFirst,
        __colLast.name() : __colLast
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_BookmarkRange', CT_BookmarkRange)


# Complex type CT_Bookmark with content type EMPTY
class CT_Bookmark (CT_BookmarkRange):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Bookmark')
    # Base type is CT_BookmarkRange
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute colFirst inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_BookmarkRange
    
    # Attribute displacedByCustomXml inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_MarkupRange
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Bookmark_httpschemas_openxmlformats_orgwordprocessingml2006mainname', _s.ST_String, required=True)
    
    name = property(__name.value, __name.set, None, u'Bookmark Name')

    
    # Attribute colLast inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_BookmarkRange

    _ElementMap = CT_BookmarkRange._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_BookmarkRange._AttributeMap.copy()
    _AttributeMap.update({
        __name.name() : __name
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_Bookmark', CT_Bookmark)


# Complex type CT_MoveBookmark with content type EMPTY
class CT_MoveBookmark (CT_Bookmark):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_MoveBookmark')
    # Base type is CT_Bookmark
    
    # Attribute displacedByCustomXml inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_MarkupRange
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}date uses Python identifier date
    __date = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'date'), 'date', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MoveBookmark_httpschemas_openxmlformats_orgwordprocessingml2006maindate', ST_DateTime, required=True)
    
    date = property(__date.value, __date.set, None, u'Annotation Date')

    
    # Attribute colFirst inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_BookmarkRange
    
    # Attribute colLast inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_BookmarkRange
    
    # Attribute name inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Bookmark
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}author uses Python identifier author
    __author = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'author'), 'author', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MoveBookmark_httpschemas_openxmlformats_orgwordprocessingml2006mainauthor', _s.ST_String, required=True)
    
    author = property(__author.value, __author.set, None, u'Annotation Author')


    _ElementMap = CT_Bookmark._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_Bookmark._AttributeMap.copy()
    _AttributeMap.update({
        __date.name() : __date,
        __author.name() : __author
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_MoveBookmark', CT_MoveBookmark)


# Complex type CT_TblWidth with content type EMPTY
class CT_TblWidth (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblWidth')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), 'w', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblWidth_httpschemas_openxmlformats_orgwordprocessingml2006mainw', ST_DecimalNumberOrPercent)
    
    w = property(__w.value, __w.set, None, u'Table Width Value')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblWidth_httpschemas_openxmlformats_orgwordprocessingml2006maintype', ST_TblWidth)
    
    type = property(__type.value, __type.set, None, u'Table Width Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __w.name() : __w,
        __type.name() : __type
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblWidth', CT_TblWidth)


# Complex type CT_LineNumber with content type EMPTY
class CT_LineNumber (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_LineNumber')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}countBy uses Python identifier countBy
    __countBy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'countBy'), 'countBy', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LineNumber_httpschemas_openxmlformats_orgwordprocessingml2006maincountBy', ST_DecimalNumber)
    
    countBy = property(__countBy.value, __countBy.set, None, u'Line Number Increments to Display')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}start uses Python identifier start
    __start = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'start'), 'start', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LineNumber_httpschemas_openxmlformats_orgwordprocessingml2006mainstart', ST_DecimalNumber)
    
    start = property(__start.value, __start.set, None, u'Line Numbering Starting Value')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}distance uses Python identifier distance
    __distance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'distance'), 'distance', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LineNumber_httpschemas_openxmlformats_orgwordprocessingml2006maindistance', _s.ST_TwipsMeasure)
    
    distance = property(__distance.value, __distance.set, None, u'Distance Between Text and Line Numbering')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}restart uses Python identifier restart
    __restart = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'restart'), 'restart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LineNumber_httpschemas_openxmlformats_orgwordprocessingml2006mainrestart', ST_LineNumberRestart)
    
    restart = property(__restart.value, __restart.set, None, u'Line Numbering Restart Setting')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __countBy.name() : __countBy,
        __start.name() : __start,
        __distance.name() : __distance,
        __restart.name() : __restart
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_LineNumber', CT_LineNumber)


# Complex type CT_Shd with content type EMPTY
class CT_Shd (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Shd')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeColor uses Python identifier themeColor
    __themeColor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeColor'), 'themeColor', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Shd_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeColor', ST_ThemeColor)
    
    themeColor = property(__themeColor.value, __themeColor.set, None, u'Shading Pattern Theme Color')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fill uses Python identifier fill
    __fill = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fill'), 'fill', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Shd_httpschemas_openxmlformats_orgwordprocessingml2006mainfill', ST_HexColor)
    
    fill = property(__fill.value, __fill.set, None, u'Shading Background Color')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeFillShade uses Python identifier themeFillShade
    __themeFillShade = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeFillShade'), 'themeFillShade', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Shd_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeFillShade', ST_UcharHexNumber)
    
    themeFillShade = property(__themeFillShade.value, __themeFillShade.set, None, u'Shading Background Theme Color Shade')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeTint uses Python identifier themeTint
    __themeTint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeTint'), 'themeTint', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Shd_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeTint', ST_UcharHexNumber)
    
    themeTint = property(__themeTint.value, __themeTint.set, None, u'Shading Pattern Theme Color Tint')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeShade uses Python identifier themeShade
    __themeShade = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeShade'), 'themeShade', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Shd_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeShade', ST_UcharHexNumber)
    
    themeShade = property(__themeShade.value, __themeShade.set, None, u'Shading Pattern Theme Color Shade')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Shd_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_Shd, required=True)
    
    val = property(__val.value, __val.set, None, u'Shading Pattern')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeFill uses Python identifier themeFill
    __themeFill = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeFill'), 'themeFill', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Shd_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeFill', ST_ThemeColor)
    
    themeFill = property(__themeFill.value, __themeFill.set, None, u'Shading Background Theme Color')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'color'), 'color', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Shd_httpschemas_openxmlformats_orgwordprocessingml2006maincolor', ST_HexColor)
    
    color = property(__color.value, __color.set, None, u'Shading Pattern Color')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeFillTint uses Python identifier themeFillTint
    __themeFillTint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeFillTint'), 'themeFillTint', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Shd_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeFillTint', ST_UcharHexNumber)
    
    themeFillTint = property(__themeFillTint.value, __themeFillTint.set, None, u'Shading Background Theme Color Tint')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __themeColor.name() : __themeColor,
        __fill.name() : __fill,
        __themeFillShade.name() : __themeFillShade,
        __themeTint.name() : __themeTint,
        __themeShade.name() : __themeShade,
        __val.name() : __val,
        __themeFill.name() : __themeFill,
        __color.name() : __color,
        __themeFillTint.name() : __themeFillTint
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Shd', CT_Shd)


# Complex type CT_DirContentRun with content type ELEMENT_ONLY
class CT_DirContentRun (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DirContentRun')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Inline-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dir uses Python identifier dir
    __dir = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), 'dir', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maindir', True)

    
    dir = property(__dir.value, __dir.set, None, u'Bidirectional Embedding Level')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), 'r', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainr', True)

    
    r = property(__r.value, __r.set, None, u'Text Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fldSimple uses Python identifier fldSimple
    __fldSimple = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), 'fldSimple', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainfldSimple', True)

    
    fldSimple = property(__fldSimple.value, __fldSimple.set, None, u'Simple Field')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}smartTag uses Python identifier smartTag
    __smartTag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), 'smartTag', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsmartTag', True)

    
    smartTag = property(__smartTag.value, __smartTag.set, None, u'Inline-Level Smart Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Inline-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hyperlink uses Python identifier hyperlink
    __hyperlink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), 'hyperlink', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainhyperlink', True)

    
    hyperlink = property(__hyperlink.value, __hyperlink.set, None, u'Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}subDoc uses Python identifier subDoc
    __subDoc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), 'subDoc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsubDoc', True)

    
    subDoc = property(__subDoc.value, __subDoc.set, None, u'Anchor for Subdocument Location')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), 'bdo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'Bidirectional Override')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DirContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_Direction)
    
    val = property(__val.value, __val.set, None, u'Direction of Embedding')


    _ElementMap = {
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __customXml.name() : __customXml,
        __dir.name() : __dir,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __oMath.name() : __oMath,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __ins.name() : __ins,
        __r.name() : __r,
        __fldSimple.name() : __fldSimple,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __smartTag.name() : __smartTag,
        __moveFrom.name() : __moveFrom,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __oMathPara.name() : __oMathPara,
        __bookmarkStart.name() : __bookmarkStart,
        __bookmarkEnd.name() : __bookmarkEnd,
        __sdt.name() : __sdt,
        __hyperlink.name() : __hyperlink,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __subDoc.name() : __subDoc,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __permStart.name() : __permStart,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __commentRangeStart.name() : __commentRangeStart,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __bdo.name() : __bdo
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DirContentRun', CT_DirContentRun)


# Complex type CT_SpacingRule with content type EMPTY
class CT_SpacingRule (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_SpacingRule')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SpacingRule_httpschemas_openxmlformats_orgofficeDocument2006mathval', ST_SpacingRule, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_SpacingRule', CT_SpacingRule)


# Complex type CT_DocRsids with content type ELEMENT_ONLY
class CT_DocRsids (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocRsids')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsid uses Python identifier rsid
    __rsid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsid'), 'rsid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocRsids_httpschemas_openxmlformats_orgwordprocessingml2006mainrsid', True)

    
    rsid = property(__rsid.value, __rsid.set, None, u'Single Session Revision Save ID')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidRoot uses Python identifier rsidRoot
    __rsidRoot = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidRoot'), 'rsidRoot', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocRsids_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidRoot', False)

    
    rsidRoot = property(__rsidRoot.value, __rsidRoot.set, None, u'Original Document Revision Save ID')


    _ElementMap = {
        __rsid.name() : __rsid,
        __rsidRoot.name() : __rsidRoot
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocRsids', CT_DocRsids)


# Complex type CT_RPr with content type ELEMENT_ONLY
class CT_RPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_RPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}i uses Python identifier i
    __i = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'i'), 'i', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006maini', False)

    
    i = property(__i.value, __i.set, None, u'Italics')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sz uses Python identifier sz
    __sz = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sz'), 'sz', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainsz', False)

    
    sz = property(__sz.value, __sz.set, None, u'Non-Complex Script Font Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}u uses Python identifier u
    __u = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'u'), 'u', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainu', False)

    
    u = property(__u.value, __u.set, None, u'Underline')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}caps uses Python identifier caps
    __caps = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'caps'), 'caps', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006maincaps', False)

    
    caps = property(__caps.value, __caps.set, None, u'Display All Characters As Capital Letters')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}iCs uses Python identifier iCs
    __iCs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'iCs'), 'iCs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainiCs', False)

    
    iCs = property(__iCs.value, __iCs.set, None, u'Complex Script Italics')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}smallCaps uses Python identifier smallCaps
    __smallCaps = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'smallCaps'), 'smallCaps', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainsmallCaps', False)

    
    smallCaps = property(__smallCaps.value, __smallCaps.set, None, u'Small Caps')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shd uses Python identifier shd
    __shd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), 'shd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainshd', False)

    
    shd = property(__shd.value, __shd.set, None, u'Run Shading')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}emboss uses Python identifier emboss
    __emboss = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'emboss'), 'emboss', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainemboss', False)

    
    emboss = property(__emboss.value, __emboss.set, None, u'Embossing')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bdr uses Python identifier bdr
    __bdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bdr'), 'bdr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainbdr', False)

    
    bdr = property(__bdr.value, __bdr.set, None, u'Text Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fitText uses Python identifier fitText
    __fitText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fitText'), 'fitText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainfitText', False)

    
    fitText = property(__fitText.value, __fitText.set, None, u'Manual Run Width')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}strike uses Python identifier strike
    __strike = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'strike'), 'strike', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainstrike', False)

    
    strike = property(__strike.value, __strike.set, None, u'Single Strikethrough')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}szCs uses Python identifier szCs
    __szCs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'szCs'), 'szCs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainszCs', False)

    
    szCs = property(__szCs.value, __szCs.set, None, u'Complex Script Font Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vertAlign uses Python identifier vertAlign
    __vertAlign = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vertAlign'), 'vertAlign', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainvertAlign', False)

    
    vertAlign = property(__vertAlign.value, __vertAlign.set, None, u'Subscript/Superscript Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rtl uses Python identifier rtl
    __rtl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rtl'), 'rtl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrtl', False)

    
    rtl = property(__rtl.value, __rtl.set, None, u'Right To Left Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}specVanish uses Python identifier specVanish
    __specVanish = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'specVanish'), 'specVanish', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainspecVanish', False)

    
    specVanish = property(__specVanish.value, __specVanish.set, None, u'Paragraph Mark Is Always Hidden')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cs uses Python identifier cs
    __cs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cs'), 'cs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006maincs', False)

    
    cs = property(__cs.value, __cs.set, None, u'Use Complex Script Formatting on Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rStyle uses Python identifier rStyle
    __rStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rStyle'), 'rStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrStyle', False)

    
    rStyle = property(__rStyle.value, __rStyle.set, None, u'Referenced Character Style')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}webHidden uses Python identifier webHidden
    __webHidden = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'webHidden'), 'webHidden', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainwebHidden', False)

    
    webHidden = property(__webHidden.value, __webHidden.set, None, u'Web Hidden Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}imprint uses Python identifier imprint
    __imprint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'imprint'), 'imprint', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainimprint', False)

    
    imprint = property(__imprint.value, __imprint.set, None, u'Imprinting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noProof uses Python identifier noProof
    __noProof = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noProof'), 'noProof', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainnoProof', False)

    
    noProof = property(__noProof.value, __noProof.set, None, u'Do Not Check Spelling or Grammar')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dstrike uses Python identifier dstrike
    __dstrike = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dstrike'), 'dstrike', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006maindstrike', False)

    
    dstrike = property(__dstrike.value, __dstrike.set, None, u'Double Strikethrough')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}snapToGrid uses Python identifier snapToGrid
    __snapToGrid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid'), 'snapToGrid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainsnapToGrid', False)

    
    snapToGrid = property(__snapToGrid.value, __snapToGrid.set, None, u'Use Document Grid Settings For Inter-Character Spacing')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vanish uses Python identifier vanish
    __vanish = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vanish'), 'vanish', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainvanish', False)

    
    vanish = property(__vanish.value, __vanish.set, None, u'Hidden Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainoMath', False)

    
    oMath = property(__oMath.value, __oMath.set, None, u'Office Open XML Math')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rFonts uses Python identifier rFonts
    __rFonts = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rFonts'), 'rFonts', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrFonts', False)

    
    rFonts = property(__rFonts.value, __rFonts.set, None, u'Run Fonts')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}highlight uses Python identifier highlight
    __highlight = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'highlight'), 'highlight', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainhighlight', False)

    
    highlight = property(__highlight.value, __highlight.set, None, u'Text Highlighting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}em uses Python identifier em
    __em = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'em'), 'em', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainem', False)

    
    em = property(__em.value, __em.set, None, u'Emphasis Mark')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rPrChange uses Python identifier rPrChange
    __rPrChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rPrChange'), 'rPrChange', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrPrChange', False)

    
    rPrChange = property(__rPrChange.value, __rPrChange.set, None, u'Revision Information for Run Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'color'), 'color', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006maincolor', False)

    
    color = property(__color.value, __color.set, None, u'Run Content Color')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}spacing uses Python identifier spacing
    __spacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing'), 'spacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainspacing', False)

    
    spacing = property(__spacing.value, __spacing.set, None, u'Character Spacing Adjustment')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}outline uses Python identifier outline
    __outline = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'outline'), 'outline', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainoutline', False)

    
    outline = property(__outline.value, __outline.set, None, u'Display Character Outline')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}w uses Python identifier w
    __w = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), 'w', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainw', False)

    
    w = property(__w.value, __w.set, None, u'Expanded/Compressed Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}eastAsianLayout uses Python identifier eastAsianLayout
    __eastAsianLayout = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'eastAsianLayout'), 'eastAsianLayout', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006maineastAsianLayout', False)

    
    eastAsianLayout = property(__eastAsianLayout.value, __eastAsianLayout.set, None, u'East Asian Typography Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}kern uses Python identifier kern
    __kern = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'kern'), 'kern', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainkern', False)

    
    kern = property(__kern.value, __kern.set, None, u'Font Kerning')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}position uses Python identifier position
    __position = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'position'), 'position', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainposition', False)

    
    position = property(__position.value, __position.set, None, u'Vertically Raised or Lowered Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lang uses Python identifier lang
    __lang = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lang'), 'lang', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainlang', False)

    
    lang = property(__lang.value, __lang.set, None, u'Languages for Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'b'), 'b', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainb', False)

    
    b = property(__b.value, __b.set, None, u'Bold')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bCs uses Python identifier bCs
    __bCs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bCs'), 'bCs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainbCs', False)

    
    bCs = property(__bCs.value, __bCs.set, None, u'Complex Script Bold')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shadow uses Python identifier shadow
    __shadow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shadow'), 'shadow', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006mainshadow', False)

    
    shadow = property(__shadow.value, __shadow.set, None, u'Shadow')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}effect uses Python identifier effect
    __effect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'effect'), 'effect', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPr_httpschemas_openxmlformats_orgwordprocessingml2006maineffect', False)

    
    effect = property(__effect.value, __effect.set, None, u'Animated Text Effect')


    _ElementMap = {
        __i.name() : __i,
        __sz.name() : __sz,
        __u.name() : __u,
        __caps.name() : __caps,
        __iCs.name() : __iCs,
        __smallCaps.name() : __smallCaps,
        __shd.name() : __shd,
        __emboss.name() : __emboss,
        __bdr.name() : __bdr,
        __fitText.name() : __fitText,
        __strike.name() : __strike,
        __szCs.name() : __szCs,
        __vertAlign.name() : __vertAlign,
        __rtl.name() : __rtl,
        __specVanish.name() : __specVanish,
        __cs.name() : __cs,
        __rStyle.name() : __rStyle,
        __webHidden.name() : __webHidden,
        __imprint.name() : __imprint,
        __noProof.name() : __noProof,
        __dstrike.name() : __dstrike,
        __snapToGrid.name() : __snapToGrid,
        __vanish.name() : __vanish,
        __oMath.name() : __oMath,
        __rFonts.name() : __rFonts,
        __highlight.name() : __highlight,
        __em.name() : __em,
        __rPrChange.name() : __rPrChange,
        __color.name() : __color,
        __spacing.name() : __spacing,
        __outline.name() : __outline,
        __w.name() : __w,
        __eastAsianLayout.name() : __eastAsianLayout,
        __kern.name() : __kern,
        __position.name() : __position,
        __lang.name() : __lang,
        __b.name() : __b,
        __bCs.name() : __bCs,
        __shadow.name() : __shadow,
        __effect.name() : __effect
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_RPr', CT_RPr)


# Complex type CT_OMathPara with content type ELEMENT_ONLY
class CT_OMathPara (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_OMathPara')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathPara_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, u'Office Math')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathParaPr uses Python identifier oMathParaPr
    __oMathParaPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathParaPr'), 'oMathParaPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathPara_httpschemas_openxmlformats_orgofficeDocument2006mathoMathParaPr', False)

    
    oMathParaPr = property(__oMathParaPr.value, __oMathParaPr.set, None, u'Office Math Paragraph Properties')


    _ElementMap = {
        __oMath.name() : __oMath,
        __oMathParaPr.name() : __oMathParaPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_OMathPara', CT_OMathPara)


# Complex type CT_VerticalAlignRun with content type EMPTY
class CT_VerticalAlignRun (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_VerticalAlignRun')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_VerticalAlignRun_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_VerticalAlignRun, required=True)
    
    val = property(__val.value, __val.set, None, u'Subscript/Superscript Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_VerticalAlignRun', CT_VerticalAlignRun)


# Complex type CT_Frame with content type ELEMENT_ONLY
class CT_Frame (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Frame')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'title'), 'title', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frame_httpschemas_openxmlformats_orgwordprocessingml2006maintitle', False)

    
    title = property(__title.value, __title.set, None, u'Frame or Frameset Title')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noResizeAllowed uses Python identifier noResizeAllowed
    __noResizeAllowed = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noResizeAllowed'), 'noResizeAllowed', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frame_httpschemas_openxmlformats_orgwordprocessingml2006mainnoResizeAllowed', False)

    
    noResizeAllowed = property(__noResizeAllowed.value, __noResizeAllowed.set, None, u'Frame Cannot Be Resized')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}longDesc uses Python identifier longDesc
    __longDesc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'longDesc'), 'longDesc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frame_httpschemas_openxmlformats_orgwordprocessingml2006mainlongDesc', False)

    
    longDesc = property(__longDesc.value, __longDesc.set, None, u'Frame Long Description')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}linkedToFile uses Python identifier linkedToFile
    __linkedToFile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'linkedToFile'), 'linkedToFile', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frame_httpschemas_openxmlformats_orgwordprocessingml2006mainlinkedToFile', False)

    
    linkedToFile = property(__linkedToFile.value, __linkedToFile.set, None, u'Maintain Link to Existing File')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sourceFileName uses Python identifier sourceFileName
    __sourceFileName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sourceFileName'), 'sourceFileName', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frame_httpschemas_openxmlformats_orgwordprocessingml2006mainsourceFileName', False)

    
    sourceFileName = property(__sourceFileName.value, __sourceFileName.set, None, u'Source File for Frame')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}scrollbar uses Python identifier scrollbar
    __scrollbar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'scrollbar'), 'scrollbar', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frame_httpschemas_openxmlformats_orgwordprocessingml2006mainscrollbar', False)

    
    scrollbar = property(__scrollbar.value, __scrollbar.set, None, u'Scrollbar Display Option')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}marW uses Python identifier marW
    __marW = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'marW'), 'marW', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frame_httpschemas_openxmlformats_orgwordprocessingml2006mainmarW', False)

    
    marW = property(__marW.value, __marW.set, None, u'Left and Right Margin for Frame')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sz uses Python identifier sz
    __sz = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sz'), 'sz', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frame_httpschemas_openxmlformats_orgwordprocessingml2006mainsz', False)

    
    sz = property(__sz.value, __sz.set, None, u'Frame Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}marH uses Python identifier marH
    __marH = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'marH'), 'marH', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frame_httpschemas_openxmlformats_orgwordprocessingml2006mainmarH', False)

    
    marH = property(__marH.value, __marH.set, None, u'Top and Bottom Margin for Frame')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frame_httpschemas_openxmlformats_orgwordprocessingml2006mainname', False)

    
    name = property(__name.value, __name.set, None, u'Frame Name')


    _ElementMap = {
        __title.name() : __title,
        __noResizeAllowed.name() : __noResizeAllowed,
        __longDesc.name() : __longDesc,
        __linkedToFile.name() : __linkedToFile,
        __sourceFileName.name() : __sourceFileName,
        __scrollbar.name() : __scrollbar,
        __marW.name() : __marW,
        __sz.name() : __sz,
        __marH.name() : __marH,
        __name.name() : __name
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Frame', CT_Frame)


# Complex type CT_SSubSup with content type ELEMENT_ONLY
class CT_SSubSup (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_SSubSup')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sup uses Python identifier sup
    __sup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sup'), 'sup', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SSubSup_httpschemas_openxmlformats_orgofficeDocument2006mathsup', False)

    
    sup = property(__sup.value, __sup.set, None, u'Superscript (Sub-Superscript function)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sSubSupPr uses Python identifier sSubSupPr
    __sSubSupPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sSubSupPr'), 'sSubSupPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SSubSup_httpschemas_openxmlformats_orgofficeDocument2006mathsSubSupPr', False)

    
    sSubSupPr = property(__sSubSupPr.value, __sSubSupPr.set, None, u'Sub-Superscript Properties')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sub uses Python identifier sub
    __sub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sub'), 'sub', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SSubSup_httpschemas_openxmlformats_orgofficeDocument2006mathsub', False)

    
    sub = property(__sub.value, __sub.set, None, u'Subscript (Sub-Superscript)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SSubSup_httpschemas_openxmlformats_orgofficeDocument2006mathe', False)

    
    e = property(__e.value, __e.set, None, u'Base')


    _ElementMap = {
        __sup.name() : __sup,
        __sSubSupPr.name() : __sSubSupPr,
        __sub.name() : __sub,
        __e.name() : __e
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_SSubSup', CT_SSubSup)


# Complex type CT_Nary with content type ELEMENT_ONLY
class CT_Nary (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_Nary')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Nary_httpschemas_openxmlformats_orgofficeDocument2006mathe', False)

    
    e = property(__e.value, __e.set, None, u'Base (Argument)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}naryPr uses Python identifier naryPr
    __naryPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'naryPr'), 'naryPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Nary_httpschemas_openxmlformats_orgofficeDocument2006mathnaryPr', False)

    
    naryPr = property(__naryPr.value, __naryPr.set, None, u'n-ary Properties')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sup uses Python identifier sup
    __sup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sup'), 'sup', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Nary_httpschemas_openxmlformats_orgofficeDocument2006mathsup', False)

    
    sup = property(__sup.value, __sup.set, None, u'Upper limit (n-ary)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sub uses Python identifier sub
    __sub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sub'), 'sub', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Nary_httpschemas_openxmlformats_orgofficeDocument2006mathsub', False)

    
    sub = property(__sub.value, __sub.set, None, u'Lower limit (n-ary) ')


    _ElementMap = {
        __e.name() : __e,
        __naryPr.name() : __naryPr,
        __sup.name() : __sup,
        __sub.name() : __sub
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_Nary', CT_Nary)


# Complex type CT_Script with content type EMPTY
class CT_Script (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_Script')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Script_httpschemas_openxmlformats_orgofficeDocument2006mathval', ST_Script)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_Script', CT_Script)


# Complex type CT_SdtEndPr with content type ELEMENT_ONLY
class CT_SdtEndPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtEndPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtEndPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrPr', True)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Structured Document Tag End Character Run Properties')


    _ElementMap = {
        __rPr.name() : __rPr
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtEndPr', CT_SdtEndPr)


# Complex type CT_GroupChrPr with content type ELEMENT_ONLY
class CT_GroupChrPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_GroupChrPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_GroupChrPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}chr uses Python identifier chr
    __chr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'chr'), 'chr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_GroupChrPr_httpschemas_openxmlformats_orgofficeDocument2006mathchr', False)

    
    chr = property(__chr.value, __chr.set, None, u'Group Character (Grouping Character)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}vertJc uses Python identifier vertJc
    __vertJc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'vertJc'), 'vertJc', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_GroupChrPr_httpschemas_openxmlformats_orgofficeDocument2006mathvertJc', False)

    
    vertJc = property(__vertJc.value, __vertJc.set, None, u'Vertical Justification')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'pos'), 'pos', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_GroupChrPr_httpschemas_openxmlformats_orgofficeDocument2006mathpos', False)

    
    pos = property(__pos.value, __pos.set, None, u'Position (Group Character)')


    _ElementMap = {
        __ctrlPr.name() : __ctrlPr,
        __chr.name() : __chr,
        __vertJc.name() : __vertJc,
        __pos.name() : __pos
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_GroupChrPr', CT_GroupChrPr)


# Complex type CT_BdoContentRun with content type ELEMENT_ONLY
class CT_BdoContentRun (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_BdoContentRun')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fldSimple uses Python identifier fldSimple
    __fldSimple = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), 'fldSimple', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainfldSimple', True)

    
    fldSimple = property(__fldSimple.value, __fldSimple.set, None, u'Simple Field')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Inline-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}smartTag uses Python identifier smartTag
    __smartTag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), 'smartTag', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsmartTag', True)

    
    smartTag = property(__smartTag.value, __smartTag.set, None, u'Inline-Level Smart Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), 'bdo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'Bidirectional Override')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hyperlink uses Python identifier hyperlink
    __hyperlink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), 'hyperlink', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainhyperlink', True)

    
    hyperlink = property(__hyperlink.value, __hyperlink.set, None, u'Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}subDoc uses Python identifier subDoc
    __subDoc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), 'subDoc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsubDoc', True)

    
    subDoc = property(__subDoc.value, __subDoc.set, None, u'Anchor for Subdocument Location')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), 'r', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainr', True)

    
    r = property(__r.value, __r.set, None, u'Text Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Inline-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dir uses Python identifier dir
    __dir = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), 'dir', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maindir', True)

    
    dir = property(__dir.value, __dir.set, None, u'Bidirectional Embedding Level')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BdoContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_Direction)
    
    val = property(__val.value, __val.set, None, u'Direction of Override')


    _ElementMap = {
        __fldSimple.name() : __fldSimple,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __customXml.name() : __customXml,
        __smartTag.name() : __smartTag,
        __permStart.name() : __permStart,
        __moveTo.name() : __moveTo,
        __bookmarkEnd.name() : __bookmarkEnd,
        __bdo.name() : __bdo,
        __oMathPara.name() : __oMathPara,
        __bookmarkStart.name() : __bookmarkStart,
        __hyperlink.name() : __hyperlink,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __subDoc.name() : __subDoc,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __permEnd.name() : __permEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __r.name() : __r,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __commentRangeStart.name() : __commentRangeStart,
        __sdt.name() : __sdt,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __oMath.name() : __oMath,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __moveFrom.name() : __moveFrom,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __dir.name() : __dir,
        __ins.name() : __ins
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_BdoContentRun', CT_BdoContentRun)


# Complex type CT_NumRestart with content type EMPTY
class CT_NumRestart (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_NumRestart')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_NumRestart_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_RestartNumber, required=True)
    
    val = property(__val.value, __val.set, None, u'Automatic Numbering Restart Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_NumRestart', CT_NumRestart)


# Complex type CT_Underline with content type EMPTY
class CT_Underline (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Underline')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Underline_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_Underline)
    
    val = property(__val.value, __val.set, None, u'Underline Style')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'color'), 'color', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Underline_httpschemas_openxmlformats_orgwordprocessingml2006maincolor', ST_HexColor)
    
    color = property(__color.value, __color.set, None, u'Underline Color')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeColor uses Python identifier themeColor
    __themeColor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeColor'), 'themeColor', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Underline_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeColor', ST_ThemeColor)
    
    themeColor = property(__themeColor.value, __themeColor.set, None, u'Underline Theme Color')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeTint uses Python identifier themeTint
    __themeTint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeTint'), 'themeTint', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Underline_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeTint', ST_UcharHexNumber)
    
    themeTint = property(__themeTint.value, __themeTint.set, None, u'Underline Theme Color Tint')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeShade uses Python identifier themeShade
    __themeShade = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeShade'), 'themeShade', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Underline_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeShade', ST_UcharHexNumber)
    
    themeShade = property(__themeShade.value, __themeShade.set, None, u'Underline Theme Color Shade')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __color.name() : __color,
        __themeColor.name() : __themeColor,
        __themeTint.name() : __themeTint,
        __themeShade.name() : __themeShade
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Underline', CT_Underline)


# Complex type CT_Captions with content type ELEMENT_ONLY
class CT_Captions (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Captions')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}autoCaptions uses Python identifier autoCaptions
    __autoCaptions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'autoCaptions'), 'autoCaptions', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Captions_httpschemas_openxmlformats_orgwordprocessingml2006mainautoCaptions', False)

    
    autoCaptions = property(__autoCaptions.value, __autoCaptions.set, None, u'Automatic Captioning Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}caption uses Python identifier caption
    __caption = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'caption'), 'caption', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Captions_httpschemas_openxmlformats_orgwordprocessingml2006maincaption', True)

    
    caption = property(__caption.value, __caption.set, None, u'Single Caption Type Definition')


    _ElementMap = {
        __autoCaptions.name() : __autoCaptions,
        __caption.name() : __caption
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Captions', CT_Captions)


# Complex type CT_BoxPr with content type ELEMENT_ONLY
class CT_BoxPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_BoxPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}aln uses Python identifier aln
    __aln = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'aln'), 'aln', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BoxPr_httpschemas_openxmlformats_orgofficeDocument2006mathaln', False)

    
    aln = property(__aln.value, __aln.set, None, u'Alignment')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BoxPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}brk uses Python identifier brk
    __brk = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'brk'), 'brk', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BoxPr_httpschemas_openxmlformats_orgofficeDocument2006mathbrk', False)

    
    brk = property(__brk.value, __brk.set, None, u'Break')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}opEmu uses Python identifier opEmu
    __opEmu = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'opEmu'), 'opEmu', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BoxPr_httpschemas_openxmlformats_orgofficeDocument2006mathopEmu', False)

    
    opEmu = property(__opEmu.value, __opEmu.set, None, u'Operator Emulator')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}noBreak uses Python identifier noBreak
    __noBreak = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'noBreak'), 'noBreak', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BoxPr_httpschemas_openxmlformats_orgofficeDocument2006mathnoBreak', False)

    
    noBreak = property(__noBreak.value, __noBreak.set, None, u'No Break')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}diff uses Python identifier diff
    __diff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'diff'), 'diff', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BoxPr_httpschemas_openxmlformats_orgofficeDocument2006mathdiff', False)

    
    diff = property(__diff.value, __diff.set, None, u'Differential')


    _ElementMap = {
        __aln.name() : __aln,
        __ctrlPr.name() : __ctrlPr,
        __brk.name() : __brk,
        __opEmu.name() : __opEmu,
        __noBreak.name() : __noBreak,
        __diff.name() : __diff
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_BoxPr', CT_BoxPr)


# Complex type CT_Ind with content type EMPTY
class CT_Ind (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Ind')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}endChars uses Python identifier endChars
    __endChars = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'endChars'), 'endChars', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Ind_httpschemas_openxmlformats_orgwordprocessingml2006mainendChars', ST_DecimalNumber)
    
    endChars = property(__endChars.value, __endChars.set, None, u'End Indentation in Character Units')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}firstLine uses Python identifier firstLine
    __firstLine = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'firstLine'), 'firstLine', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Ind_httpschemas_openxmlformats_orgwordprocessingml2006mainfirstLine', _s.ST_TwipsMeasure)
    
    firstLine = property(__firstLine.value, __firstLine.set, None, u'Additional First Line Indentation')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}firstLineChars uses Python identifier firstLineChars
    __firstLineChars = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'firstLineChars'), 'firstLineChars', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Ind_httpschemas_openxmlformats_orgwordprocessingml2006mainfirstLineChars', ST_DecimalNumber)
    
    firstLineChars = property(__firstLineChars.value, __firstLineChars.set, None, u'Additional First Line Indentation in Character Units')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hangingChars uses Python identifier hangingChars
    __hangingChars = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hangingChars'), 'hangingChars', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Ind_httpschemas_openxmlformats_orgwordprocessingml2006mainhangingChars', ST_DecimalNumber)
    
    hangingChars = property(__hangingChars.value, __hangingChars.set, None, u'Indentation Removed From First Line in Character Units')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}left uses Python identifier left
    __left = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), 'left', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Ind_httpschemas_openxmlformats_orgwordprocessingml2006mainleft', ST_SignedTwipsMeasure)
    
    left = property(__left.value, __left.set, None, u'Start Indentation')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}leftChars uses Python identifier leftChars
    __leftChars = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'leftChars'), 'leftChars', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Ind_httpschemas_openxmlformats_orgwordprocessingml2006mainleftChars', ST_DecimalNumber)
    
    leftChars = property(__leftChars.value, __leftChars.set, None, u'Start Indentation in Character Units')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}start uses Python identifier start
    __start = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'start'), 'start', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Ind_httpschemas_openxmlformats_orgwordprocessingml2006mainstart', ST_SignedTwipsMeasure)
    
    start = property(__start.value, __start.set, None, u'Start Indentation')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}right uses Python identifier right
    __right = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), 'right', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Ind_httpschemas_openxmlformats_orgwordprocessingml2006mainright', ST_SignedTwipsMeasure)
    
    right = property(__right.value, __right.set, None, u'End Indentation')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}startChars uses Python identifier startChars
    __startChars = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'startChars'), 'startChars', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Ind_httpschemas_openxmlformats_orgwordprocessingml2006mainstartChars', ST_DecimalNumber)
    
    startChars = property(__startChars.value, __startChars.set, None, u'Start Indentation in Character Units')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rightChars uses Python identifier rightChars
    __rightChars = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rightChars'), 'rightChars', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Ind_httpschemas_openxmlformats_orgwordprocessingml2006mainrightChars', ST_DecimalNumber)
    
    rightChars = property(__rightChars.value, __rightChars.set, None, u'End Indentation in Character Units')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}end uses Python identifier end
    __end = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'end'), 'end', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Ind_httpschemas_openxmlformats_orgwordprocessingml2006mainend', ST_SignedTwipsMeasure)
    
    end = property(__end.value, __end.set, None, u'End Indentation')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hanging uses Python identifier hanging
    __hanging = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hanging'), 'hanging', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Ind_httpschemas_openxmlformats_orgwordprocessingml2006mainhanging', _s.ST_TwipsMeasure)
    
    hanging = property(__hanging.value, __hanging.set, None, u'Indentation Removed from First Line')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __endChars.name() : __endChars,
        __firstLine.name() : __firstLine,
        __firstLineChars.name() : __firstLineChars,
        __hangingChars.name() : __hangingChars,
        __left.name() : __left,
        __leftChars.name() : __leftChars,
        __start.name() : __start,
        __right.name() : __right,
        __startChars.name() : __startChars,
        __rightChars.name() : __rightChars,
        __end.name() : __end,
        __hanging.name() : __hanging
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Ind', CT_Ind)


# Complex type CT_TopBot with content type EMPTY
class CT_TopBot (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_TopBot')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_TopBot_httpschemas_openxmlformats_orgofficeDocument2006mathval', ST_TopBot, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_TopBot', CT_TopBot)


# Complex type CT_SdtListItem with content type EMPTY
class CT_SdtListItem (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtListItem')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'value'), 'value_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtListItem_httpschemas_openxmlformats_orgwordprocessingml2006mainvalue', _s.ST_String)
    
    value_ = property(__value.value, __value.set, None, u'List Entry Value')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}displayText uses Python identifier displayText
    __displayText = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'displayText'), 'displayText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtListItem_httpschemas_openxmlformats_orgwordprocessingml2006maindisplayText', _s.ST_String)
    
    displayText = property(__displayText.value, __displayText.set, None, u'List Entry Display Text')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __value.name() : __value,
        __displayText.name() : __displayText
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtListItem', CT_SdtListItem)


# Complex type CT_Rel with content type EMPTY
class CT_Rel (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Rel')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Rel_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Rel', CT_Rel)


# Complex type CT_SdtDocPart with content type ELEMENT_ONLY
class CT_SdtDocPart (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtDocPart')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docPartUnique uses Python identifier docPartUnique
    __docPartUnique = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartUnique'), 'docPartUnique', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtDocPart_httpschemas_openxmlformats_orgwordprocessingml2006maindocPartUnique', False)

    
    docPartUnique = property(__docPartUnique.value, __docPartUnique.set, None, u'Built-In Document Part')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docPartGallery uses Python identifier docPartGallery
    __docPartGallery = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartGallery'), 'docPartGallery', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtDocPart_httpschemas_openxmlformats_orgwordprocessingml2006maindocPartGallery', False)

    
    docPartGallery = property(__docPartGallery.value, __docPartGallery.set, None, u'Document Part Gallery Filter')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docPartCategory uses Python identifier docPartCategory
    __docPartCategory = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartCategory'), 'docPartCategory', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtDocPart_httpschemas_openxmlformats_orgwordprocessingml2006maindocPartCategory', False)

    
    docPartCategory = property(__docPartCategory.value, __docPartCategory.set, None, u'Document Part Category Filter')


    _ElementMap = {
        __docPartUnique.name() : __docPartUnique,
        __docPartGallery.name() : __docPartGallery,
        __docPartCategory.name() : __docPartCategory
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtDocPart', CT_SdtDocPart)


# Complex type CT_Body with content type ELEMENT_ONLY
class CT_Body (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Body')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tbl uses Python identifier tbl
    __tbl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), 'tbl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006maintbl', True)

    
    tbl = property(__tbl.value, __tbl.set, None, u'Table')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), 'p', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainp', True)

    
    p = property(__p.value, __p.set, None, u'Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sectPr uses Python identifier sectPr
    __sectPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sectPr'), 'sectPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainsectPr', False)

    
    sectPr = property(__sectPr.value, __sectPr.set, None, u'Document Final Section Properties')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}altChunk uses Python identifier altChunk
    __altChunk = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk'), 'altChunk', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainaltChunk', True)

    
    altChunk = property(__altChunk.value, __altChunk.set, None, u'Anchor for Imported External Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Block-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Body_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Block-Level Structured Document Tag')


    _ElementMap = {
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __tbl.name() : __tbl,
        __ins.name() : __ins,
        __p.name() : __p,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __moveTo.name() : __moveTo,
        __sectPr.name() : __sectPr,
        __oMathPara.name() : __oMathPara,
        __bookmarkStart.name() : __bookmarkStart,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __commentRangeStart.name() : __commentRangeStart,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __permEnd.name() : __permEnd,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __altChunk.name() : __altChunk,
        __customXml.name() : __customXml,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __sdt.name() : __sdt
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Body', CT_Body)


# Complex type CT_Columns with content type ELEMENT_ONLY
class CT_Columns (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Columns')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}col uses Python identifier col
    __col = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'col'), 'col', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Columns_httpschemas_openxmlformats_orgwordprocessingml2006maincol', True)

    
    col = property(__col.value, __col.set, None, u'Single Column Definition')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}equalWidth uses Python identifier equalWidth
    __equalWidth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'equalWidth'), 'equalWidth', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Columns_httpschemas_openxmlformats_orgwordprocessingml2006mainequalWidth', _s.ST_OnOff)
    
    equalWidth = property(__equalWidth.value, __equalWidth.set, None, u'Equal Column Widths')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}num uses Python identifier num
    __num = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'num'), 'num', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Columns_httpschemas_openxmlformats_orgwordprocessingml2006mainnum', ST_DecimalNumber)
    
    num = property(__num.value, __num.set, None, u'Number of Equal Width Columns')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sep uses Python identifier sep
    __sep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sep'), 'sep', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Columns_httpschemas_openxmlformats_orgwordprocessingml2006mainsep', _s.ST_OnOff)
    
    sep = property(__sep.value, __sep.set, None, u'Draw Line Between Columns')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}space uses Python identifier space
    __space = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'space'), 'space', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Columns_httpschemas_openxmlformats_orgwordprocessingml2006mainspace', _s.ST_TwipsMeasure)
    
    space = property(__space.value, __space.set, None, u'Spacing Between Equal Width Columns')


    _ElementMap = {
        __col.name() : __col
    }
    _AttributeMap = {
        __equalWidth.name() : __equalWidth,
        __num.name() : __num,
        __sep.name() : __sep,
        __space.name() : __space
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Columns', CT_Columns)


# Complex type CT_ShapeDefaults with content type ELEMENT_ONLY
class CT_ShapeDefaults (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_ShapeDefaults')
    # Base type is pyxb.binding.datatypes.anyType
    _HasWildcardElement = True

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_ShapeDefaults', CT_ShapeDefaults)


# Complex type CT_Tbl with content type ELEMENT_ONLY
class CT_Tbl (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Tbl')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tr uses Python identifier tr
    __tr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tr'), 'tr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006maintr', True)

    
    tr = property(__tr.value, __tr.set, None, u'Table Row')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Row-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Row-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblPr uses Python identifier tblPr
    __tblPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPr'), 'tblPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006maintblPr', False)

    
    tblPr = property(__tblPr.value, __tblPr.set, None, u'Table Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblGrid uses Python identifier tblGrid
    __tblGrid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblGrid'), 'tblGrid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006maintblGrid', False)

    
    tblGrid = property(__tblGrid.value, __tblGrid.set, None, u'Table Grid')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tbl_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')


    _ElementMap = {
        __moveFrom.name() : __moveFrom,
        __tr.name() : __tr,
        __customXml.name() : __customXml,
        __commentRangeEnd.name() : __commentRangeEnd,
        __sdt.name() : __sdt,
        __oMathPara.name() : __oMathPara,
        __bookmarkStart.name() : __bookmarkStart,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __commentRangeStart.name() : __commentRangeStart,
        __proofErr.name() : __proofErr,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __permStart.name() : __permStart,
        __moveTo.name() : __moveTo,
        __tblPr.name() : __tblPr,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __tblGrid.name() : __tblGrid,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __ins.name() : __ins,
        __del.name() : __del,
        __permEnd.name() : __permEnd
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Tbl', CT_Tbl)


# Complex type CT_Fonts with content type EMPTY
class CT_Fonts (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Fonts')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hAnsi uses Python identifier hAnsi
    __hAnsi = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hAnsi'), 'hAnsi', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Fonts_httpschemas_openxmlformats_orgwordprocessingml2006mainhAnsi', _s.ST_String)
    
    hAnsi = property(__hAnsi.value, __hAnsi.set, None, u'High ANSI Font')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cs uses Python identifier cs
    __cs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cs'), 'cs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Fonts_httpschemas_openxmlformats_orgwordprocessingml2006maincs', _s.ST_String)
    
    cs = property(__cs.value, __cs.set, None, u'Complex Script Font')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cstheme uses Python identifier cstheme
    __cstheme = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cstheme'), 'cstheme', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Fonts_httpschemas_openxmlformats_orgwordprocessingml2006maincstheme', ST_Theme)
    
    cstheme = property(__cstheme.value, __cstheme.set, None, u'Complex Script Theme Font')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}eastAsia uses Python identifier eastAsia
    __eastAsia = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'eastAsia'), 'eastAsia', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Fonts_httpschemas_openxmlformats_orgwordprocessingml2006maineastAsia', _s.ST_String)
    
    eastAsia = property(__eastAsia.value, __eastAsia.set, None, u'East Asian Font')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}asciiTheme uses Python identifier asciiTheme
    __asciiTheme = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'asciiTheme'), 'asciiTheme', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Fonts_httpschemas_openxmlformats_orgwordprocessingml2006mainasciiTheme', ST_Theme)
    
    asciiTheme = property(__asciiTheme.value, __asciiTheme.set, None, u'ASCII Theme Font')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hint uses Python identifier hint
    __hint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hint'), 'hint', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Fonts_httpschemas_openxmlformats_orgwordprocessingml2006mainhint', ST_Hint)
    
    hint = property(__hint.value, __hint.set, None, u'Font Content Type')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hAnsiTheme uses Python identifier hAnsiTheme
    __hAnsiTheme = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hAnsiTheme'), 'hAnsiTheme', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Fonts_httpschemas_openxmlformats_orgwordprocessingml2006mainhAnsiTheme', ST_Theme)
    
    hAnsiTheme = property(__hAnsiTheme.value, __hAnsiTheme.set, None, u'High ANSI Theme Font')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ascii uses Python identifier ascii
    __ascii = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ascii'), 'ascii', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Fonts_httpschemas_openxmlformats_orgwordprocessingml2006mainascii', _s.ST_String)
    
    ascii = property(__ascii.value, __ascii.set, None, u'ASCII Font')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}eastAsiaTheme uses Python identifier eastAsiaTheme
    __eastAsiaTheme = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'eastAsiaTheme'), 'eastAsiaTheme', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Fonts_httpschemas_openxmlformats_orgwordprocessingml2006maineastAsiaTheme', ST_Theme)
    
    eastAsiaTheme = property(__eastAsiaTheme.value, __eastAsiaTheme.set, None, u'East Asian Theme Font')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __hAnsi.name() : __hAnsi,
        __cs.name() : __cs,
        __cstheme.name() : __cstheme,
        __eastAsia.name() : __eastAsia,
        __asciiTheme.name() : __asciiTheme,
        __hint.name() : __hint,
        __hAnsiTheme.name() : __hAnsiTheme,
        __ascii.name() : __ascii,
        __eastAsiaTheme.name() : __eastAsiaTheme
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Fonts', CT_Fonts)


# Complex type CT_Endnotes with content type ELEMENT_ONLY
class CT_Endnotes (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Endnotes')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}endnote uses Python identifier endnote
    __endnote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'endnote'), 'endnote', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Endnotes_httpschemas_openxmlformats_orgwordprocessingml2006mainendnote', True)

    
    endnote = property(__endnote.value, __endnote.set, None, u'Endnote Content')


    _ElementMap = {
        __endnote.name() : __endnote
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Endnotes', CT_Endnotes)


# Complex type CT_R with content type ELEMENT_ONLY
class CT_R (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_R')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ptab uses Python identifier ptab
    __ptab = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ptab'), 'ptab', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainptab', True)

    
    ptab = property(__ptab.value, __ptab.set, None, u'Absolute Position Tab Character')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lastRenderedPageBreak uses Python identifier lastRenderedPageBreak
    __lastRenderedPageBreak = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lastRenderedPageBreak'), 'lastRenderedPageBreak', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainlastRenderedPageBreak', True)

    
    lastRenderedPageBreak = property(__lastRenderedPageBreak.value, __lastRenderedPageBreak.set, None, u'Position of Last Calculated Page Break')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgofficeDocument2006mathrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Run Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}br uses Python identifier br
    __br = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'br'), 'br', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainbr', True)

    
    br = property(__br.value, __br.set, None, u'Break')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}t uses Python identifier t
    __t = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u't'), 't', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgofficeDocument2006matht', True)

    
    t = property(__t.value, __t.set, None, u'Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}yearLong uses Python identifier yearLong
    __yearLong = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'yearLong'), 'yearLong', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainyearLong', True)

    
    yearLong = property(__yearLong.value, __yearLong.set, None, u'Date Block - Long Year Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dayLong uses Python identifier dayLong
    __dayLong = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dayLong'), 'dayLong', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maindayLong', True)

    
    dayLong = property(__dayLong.value, __dayLong.set, None, u'Date Block - Long Day Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}annotationRef uses Python identifier annotationRef
    __annotationRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'annotationRef'), 'annotationRef', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainannotationRef', True)

    
    annotationRef = property(__annotationRef.value, __annotationRef.set, None, u'Comment Information Block')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}footnoteRef uses Python identifier footnoteRef
    __footnoteRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'footnoteRef'), 'footnoteRef', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainfootnoteRef', True)

    
    footnoteRef = property(__footnoteRef.value, __footnoteRef.set, None, u'Footnote Reference Mark')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}endnoteRef uses Python identifier endnoteRef
    __endnoteRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'endnoteRef'), 'endnoteRef', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainendnoteRef', True)

    
    endnoteRef = property(__endnoteRef.value, __endnoteRef.set, None, u'Endnote Reference Mark')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}endnoteReference uses Python identifier endnoteReference
    __endnoteReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'endnoteReference'), 'endnoteReference', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainendnoteReference', True)

    
    endnoteReference = property(__endnoteReference.value, __endnoteReference.set, None, u'Endnote Reference')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}monthLong uses Python identifier monthLong
    __monthLong = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'monthLong'), 'monthLong', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainmonthLong', True)

    
    monthLong = property(__monthLong.value, __monthLong.set, None, u'Date Block - Long Month Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}separator uses Python identifier separator
    __separator = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'separator'), 'separator', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainseparator', True)

    
    separator = property(__separator.value, __separator.set, None, u'Footnote/Endnote Separator Mark')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rPr uses Python identifier rPr_
    __rPr_ = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), 'rPr_', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainrPr', False)

    
    rPr_ = property(__rPr_.value, __rPr_.set, None, u'Run Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sym uses Python identifier sym
    __sym = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sym'), 'sym', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainsym', True)

    
    sym = property(__sym.value, __sym.set, None, u'Symbol Character')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}delText uses Python identifier delText
    __delText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'delText'), 'delText', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maindelText', True)

    
    delText = property(__delText.value, __delText.set, None, u'Deleted Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cr uses Python identifier cr
    __cr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cr'), 'cr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maincr', True)

    
    cr = property(__cr.value, __cr.set, None, u'Carriage Return')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentReference uses Python identifier commentReference
    __commentReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentReference'), 'commentReference', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maincommentReference', True)

    
    commentReference = property(__commentReference.value, __commentReference.set, None, u'Comment Content Reference Mark')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}t uses Python identifier t_
    __t_ = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u't'), 't_', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maint', True)

    
    t_ = property(__t_.value, __t_.set, None, u'Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pgNum uses Python identifier pgNum
    __pgNum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pgNum'), 'pgNum', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainpgNum', True)

    
    pgNum = property(__pgNum.value, __pgNum.set, None, u'Page Number Block')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}contentPart uses Python identifier contentPart
    __contentPart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'contentPart'), 'contentPart', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maincontentPart', True)

    
    contentPart = property(__contentPart.value, __contentPart.set, None, u'Content Part')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fldChar uses Python identifier fldChar
    __fldChar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fldChar'), 'fldChar', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainfldChar', True)

    
    fldChar = property(__fldChar.value, __fldChar.set, None, u'Complex Field Character')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pict uses Python identifier pict
    __pict = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pict'), 'pict', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainpict', True)

    
    pict = property(__pict.value, __pict.set, None, u'VML Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tab uses Python identifier tab
    __tab = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tab'), 'tab', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maintab', True)

    
    tab = property(__tab.value, __tab.set, None, u'Tab Character')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}instrText uses Python identifier instrText
    __instrText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'instrText'), 'instrText', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maininstrText', True)

    
    instrText = property(__instrText.value, __instrText.set, None, u'Field Code')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}continuationSeparator uses Python identifier continuationSeparator
    __continuationSeparator = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'continuationSeparator'), 'continuationSeparator', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maincontinuationSeparator', True)

    
    continuationSeparator = property(__continuationSeparator.value, __continuationSeparator.set, None, u'Continuation Separator Mark')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ruby uses Python identifier ruby
    __ruby = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ruby'), 'ruby', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainruby', True)

    
    ruby = property(__ruby.value, __ruby.set, None, u'Phonetic Guide')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}drawing uses Python identifier drawing
    __drawing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'drawing'), 'drawing', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maindrawing', True)

    
    drawing = property(__drawing.value, __drawing.set, None, u'DrawingML Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}delInstrText uses Python identifier delInstrText
    __delInstrText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'delInstrText'), 'delInstrText', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maindelInstrText', True)

    
    delInstrText = property(__delInstrText.value, __delInstrText.set, None, u'Deleted Field Code')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}footnoteReference uses Python identifier footnoteReference
    __footnoteReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'footnoteReference'), 'footnoteReference', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainfootnoteReference', True)

    
    footnoteReference = property(__footnoteReference.value, __footnoteReference.set, None, u'Footnote Reference')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}yearShort uses Python identifier yearShort
    __yearShort = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'yearShort'), 'yearShort', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainyearShort', True)

    
    yearShort = property(__yearShort.value, __yearShort.set, None, u'Date Block - Short Year Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}softHyphen uses Python identifier softHyphen
    __softHyphen = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'softHyphen'), 'softHyphen', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainsoftHyphen', True)

    
    softHyphen = property(__softHyphen.value, __softHyphen.set, None, u'Optional Hyphen Character')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dayShort uses Python identifier dayShort
    __dayShort = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dayShort'), 'dayShort', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maindayShort', True)

    
    dayShort = property(__dayShort.value, __dayShort.set, None, u'Date Block - Short Day Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noBreakHyphen uses Python identifier noBreakHyphen
    __noBreakHyphen = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noBreakHyphen'), 'noBreakHyphen', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainnoBreakHyphen', True)

    
    noBreakHyphen = property(__noBreakHyphen.value, __noBreakHyphen.set, None, u'Non Breaking Hyphen Character')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}object uses Python identifier object
    __object = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'object'), 'object', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainobject', True)

    
    object = property(__object.value, __object.set, None, u'Embedded Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}monthShort uses Python identifier monthShort
    __monthShort = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'monthShort'), 'monthShort', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainmonthShort', True)

    
    monthShort = property(__monthShort.value, __monthShort.set, None, u'Date Block - Short Month Format')


    _ElementMap = {
        __ptab.name() : __ptab,
        __lastRenderedPageBreak.name() : __lastRenderedPageBreak,
        __rPr.name() : __rPr,
        __br.name() : __br,
        __t.name() : __t,
        __yearLong.name() : __yearLong,
        __dayLong.name() : __dayLong,
        __annotationRef.name() : __annotationRef,
        __footnoteRef.name() : __footnoteRef,
        __endnoteRef.name() : __endnoteRef,
        __endnoteReference.name() : __endnoteReference,
        __monthLong.name() : __monthLong,
        __separator.name() : __separator,
        __rPr_.name() : __rPr_,
        __sym.name() : __sym,
        __delText.name() : __delText,
        __cr.name() : __cr,
        __commentReference.name() : __commentReference,
        __t_.name() : __t_,
        __pgNum.name() : __pgNum,
        __contentPart.name() : __contentPart,
        __fldChar.name() : __fldChar,
        __pict.name() : __pict,
        __tab.name() : __tab,
        __instrText.name() : __instrText,
        __continuationSeparator.name() : __continuationSeparator,
        __ruby.name() : __ruby,
        __drawing.name() : __drawing,
        __delInstrText.name() : __delInstrText,
        __footnoteReference.name() : __footnoteReference,
        __yearShort.name() : __yearShort,
        __softHyphen.name() : __softHyphen,
        __dayShort.name() : __dayShort,
        __noBreakHyphen.name() : __noBreakHyphen,
        __object.name() : __object,
        __monthShort.name() : __monthShort
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_R', CT_R)


# Complex type CT_TblLook with content type EMPTY
class CT_TblLook (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblLook')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}firstColumn uses Python identifier firstColumn
    __firstColumn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'firstColumn'), 'firstColumn', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblLook_httpschemas_openxmlformats_orgwordprocessingml2006mainfirstColumn', _s.ST_OnOff)
    
    firstColumn = property(__firstColumn.value, __firstColumn.set, None, u'First Column')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noHBand uses Python identifier noHBand
    __noHBand = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noHBand'), 'noHBand', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblLook_httpschemas_openxmlformats_orgwordprocessingml2006mainnoHBand', _s.ST_OnOff)
    
    noHBand = property(__noHBand.value, __noHBand.set, None, u'No Horizontal Banding')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lastColumn uses Python identifier lastColumn
    __lastColumn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lastColumn'), 'lastColumn', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblLook_httpschemas_openxmlformats_orgwordprocessingml2006mainlastColumn', _s.ST_OnOff)
    
    lastColumn = property(__lastColumn.value, __lastColumn.set, None, u'Last Column')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblLook_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_ShortHexNumber)
    
    val = property(__val.value, __val.set, None, u'Bitmask of Table Conditional Formatting')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noVBand uses Python identifier noVBand
    __noVBand = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noVBand'), 'noVBand', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblLook_httpschemas_openxmlformats_orgwordprocessingml2006mainnoVBand', _s.ST_OnOff)
    
    noVBand = property(__noVBand.value, __noVBand.set, None, u'No Vertical Banding')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}firstRow uses Python identifier firstRow
    __firstRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'firstRow'), 'firstRow', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblLook_httpschemas_openxmlformats_orgwordprocessingml2006mainfirstRow', _s.ST_OnOff)
    
    firstRow = property(__firstRow.value, __firstRow.set, None, u'First Row')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lastRow uses Python identifier lastRow
    __lastRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lastRow'), 'lastRow', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblLook_httpschemas_openxmlformats_orgwordprocessingml2006mainlastRow', _s.ST_OnOff)
    
    lastRow = property(__lastRow.value, __lastRow.set, None, u'Last Row')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __firstColumn.name() : __firstColumn,
        __noHBand.name() : __noHBand,
        __lastColumn.name() : __lastColumn,
        __val.name() : __val,
        __noVBand.name() : __noVBand,
        __firstRow.name() : __firstRow,
        __lastRow.name() : __lastRow
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblLook', CT_TblLook)


# Complex type CT_DecimalNumber with content type EMPTY
class CT_DecimalNumber (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DecimalNumber')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DecimalNumber_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_DecimalNumber, required=True)
    
    val = property(__val.value, __val.set, None, u'Decimal Number Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DecimalNumber', CT_DecimalNumber)


# Complex type CT_SdtBlock with content type ELEMENT_ONLY
class CT_SdtBlock (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtBlock')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdtContent uses Python identifier sdtContent
    __sdtContent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtContent'), 'sdtContent', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainsdtContent', False)

    
    sdtContent = property(__sdtContent.value, __sdtContent.set, None, u'Block-Level Structured Document Tag Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdtPr uses Python identifier sdtPr
    __sdtPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtPr'), 'sdtPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainsdtPr', False)

    
    sdtPr = property(__sdtPr.value, __sdtPr.set, None, u'Structured Document Tag Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdtEndPr uses Python identifier sdtEndPr
    __sdtEndPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtEndPr'), 'sdtEndPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainsdtEndPr', False)

    
    sdtEndPr = property(__sdtEndPr.value, __sdtEndPr.set, None, u'Structured Document Tag End Character Properties')


    _ElementMap = {
        __sdtContent.name() : __sdtContent,
        __sdtPr.name() : __sdtPr,
        __sdtEndPr.name() : __sdtEndPr
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtBlock', CT_SdtBlock)


# Complex type CT_PPrBase with content type ELEMENT_ONLY
class CT_PPrBase (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_PPrBase')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}adjustRightInd uses Python identifier adjustRightInd
    __adjustRightInd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'adjustRightInd'), 'adjustRightInd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainadjustRightInd', False)

    
    adjustRightInd = property(__adjustRightInd.value, __adjustRightInd.set, None, u'Automatically Adjust Right Indent When Using Document Grid')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}snapToGrid uses Python identifier snapToGrid
    __snapToGrid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid'), 'snapToGrid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainsnapToGrid', False)

    
    snapToGrid = property(__snapToGrid.value, __snapToGrid.set, None, u'Use Document Grid Settings for Inter-Line Paragraph Spacing')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}suppressLineNumbers uses Python identifier suppressLineNumbers
    __suppressLineNumbers = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressLineNumbers'), 'suppressLineNumbers', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainsuppressLineNumbers', False)

    
    suppressLineNumbers = property(__suppressLineNumbers.value, __suppressLineNumbers.set, None, u'Suppress Line Numbers for Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}spacing uses Python identifier spacing
    __spacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing'), 'spacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainspacing', False)

    
    spacing = property(__spacing.value, __spacing.set, None, u'Spacing Between Lines and Above/Below Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}keepNext uses Python identifier keepNext
    __keepNext = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'keepNext'), 'keepNext', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainkeepNext', False)

    
    keepNext = property(__keepNext.value, __keepNext.set, None, u'Keep Paragraph With Next Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}contextualSpacing uses Python identifier contextualSpacing
    __contextualSpacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'contextualSpacing'), 'contextualSpacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maincontextualSpacing', False)

    
    contextualSpacing = property(__contextualSpacing.value, __contextualSpacing.set, None, u'Ignore Spacing Above and Below When Using Identical Styles')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pageBreakBefore uses Python identifier pageBreakBefore
    __pageBreakBefore = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pageBreakBefore'), 'pageBreakBefore', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainpageBreakBefore', False)

    
    pageBreakBefore = property(__pageBreakBefore.value, __pageBreakBefore.set, None, u'Start Paragraph on Next Page')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}mirrorIndents uses Python identifier mirrorIndents
    __mirrorIndents = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'mirrorIndents'), 'mirrorIndents', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainmirrorIndents', False)

    
    mirrorIndents = property(__mirrorIndents.value, __mirrorIndents.set, None, u'Use Left/Right Indents as Inside/Outside Indents')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}suppressOverlap uses Python identifier suppressOverlap
    __suppressOverlap = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressOverlap'), 'suppressOverlap', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainsuppressOverlap', False)

    
    suppressOverlap = property(__suppressOverlap.value, __suppressOverlap.set, None, u'Prevent Text Frames From Overlapping')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}framePr uses Python identifier framePr
    __framePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'framePr'), 'framePr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainframePr', False)

    
    framePr = property(__framePr.value, __framePr.set, None, u'Text Frame Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}widowControl uses Python identifier widowControl
    __widowControl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'widowControl'), 'widowControl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainwidowControl', False)

    
    widowControl = property(__widowControl.value, __widowControl.set, None, u'Allow First/Last Line to Display on a Separate Page')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pStyle uses Python identifier pStyle
    __pStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pStyle'), 'pStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainpStyle', False)

    
    pStyle = property(__pStyle.value, __pStyle.set, None, u'Referenced Paragraph Style')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}textDirection uses Python identifier textDirection
    __textDirection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection'), 'textDirection', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintextDirection', False)

    
    textDirection = property(__textDirection.value, __textDirection.set, None, u'Paragraph Text Flow Direction')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}textAlignment uses Python identifier textAlignment
    __textAlignment = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'textAlignment'), 'textAlignment', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintextAlignment', False)

    
    textAlignment = property(__textAlignment.value, __textAlignment.set, None, u'Vertical Character Alignment on Line')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}textboxTightWrap uses Python identifier textboxTightWrap
    __textboxTightWrap = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'textboxTightWrap'), 'textboxTightWrap', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintextboxTightWrap', False)

    
    textboxTightWrap = property(__textboxTightWrap.value, __textboxTightWrap.set, None, u'Allow Surrounding Paragraphs to Tight Wrap to Text Box Contents')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pBdr uses Python identifier pBdr
    __pBdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pBdr'), 'pBdr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainpBdr', False)

    
    pBdr = property(__pBdr.value, __pBdr.set, None, u'Paragraph Borders')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shd uses Python identifier shd
    __shd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), 'shd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainshd', False)

    
    shd = property(__shd.value, __shd.set, None, u'Paragraph Shading')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}divId uses Python identifier divId
    __divId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'divId'), 'divId', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maindivId', False)

    
    divId = property(__divId.value, __divId.set, None, u'Associated HTML div ID')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}keepLines uses Python identifier keepLines
    __keepLines = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'keepLines'), 'keepLines', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainkeepLines', False)

    
    keepLines = property(__keepLines.value, __keepLines.set, None, u'Keep All Lines On One Page')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}suppressAutoHyphens uses Python identifier suppressAutoHyphens
    __suppressAutoHyphens = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressAutoHyphens'), 'suppressAutoHyphens', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainsuppressAutoHyphens', False)

    
    suppressAutoHyphens = property(__suppressAutoHyphens.value, __suppressAutoHyphens.set, None, u'Suppress Hyphenation for Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}kinsoku uses Python identifier kinsoku
    __kinsoku = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'kinsoku'), 'kinsoku', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainkinsoku', False)

    
    kinsoku = property(__kinsoku.value, __kinsoku.set, None, u'Use East Asian Typography Rules for First and Last Character per Line')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}outlineLvl uses Python identifier outlineLvl
    __outlineLvl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'outlineLvl'), 'outlineLvl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainoutlineLvl', False)

    
    outlineLvl = property(__outlineLvl.value, __outlineLvl.set, None, u'Associated Outline Level')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bidi uses Python identifier bidi
    __bidi = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bidi'), 'bidi', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainbidi', False)

    
    bidi = property(__bidi.value, __bidi.set, None, u'Right to Left Paragraph Layout')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}wordWrap uses Python identifier wordWrap
    __wordWrap = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'wordWrap'), 'wordWrap', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainwordWrap', False)

    
    wordWrap = property(__wordWrap.value, __wordWrap.set, None, u'Allow Line Breaking At Character Level')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tabs uses Python identifier tabs
    __tabs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tabs'), 'tabs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintabs', False)

    
    tabs = property(__tabs.value, __tabs.set, None, u'Set of Custom Tab Stops')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}jc uses Python identifier jc
    __jc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'jc'), 'jc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainjc', False)

    
    jc = property(__jc.value, __jc.set, None, u'Paragraph Alignment')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}overflowPunct uses Python identifier overflowPunct
    __overflowPunct = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'overflowPunct'), 'overflowPunct', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainoverflowPunct', False)

    
    overflowPunct = property(__overflowPunct.value, __overflowPunct.set, None, u'Allow Punctuation to Extend Past Text Extents')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numPr uses Python identifier numPr
    __numPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numPr'), 'numPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainnumPr', False)

    
    numPr = property(__numPr.value, __numPr.set, None, u'Numbering Definition Instance Reference')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ind uses Python identifier ind
    __ind = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ind'), 'ind', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainind', False)

    
    ind = property(__ind.value, __ind.set, None, u'Paragraph Indentation')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}topLinePunct uses Python identifier topLinePunct
    __topLinePunct = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'topLinePunct'), 'topLinePunct', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintopLinePunct', False)

    
    topLinePunct = property(__topLinePunct.value, __topLinePunct.set, None, u'Compress Punctuation at Start of a Line')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}autoSpaceDE uses Python identifier autoSpaceDE
    __autoSpaceDE = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'autoSpaceDE'), 'autoSpaceDE', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainautoSpaceDE', False)

    
    autoSpaceDE = property(__autoSpaceDE.value, __autoSpaceDE.set, None, u'Automatically Adjust Spacing of Latin and East Asian Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}autoSpaceDN uses Python identifier autoSpaceDN
    __autoSpaceDN = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'autoSpaceDN'), 'autoSpaceDN', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainautoSpaceDN', False)

    
    autoSpaceDN = property(__autoSpaceDN.value, __autoSpaceDN.set, None, u'Automatically Adjust Spacing of East Asian Text and Numbers')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cnfStyle uses Python identifier cnfStyle
    __cnfStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cnfStyle'), 'cnfStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maincnfStyle', False)

    
    cnfStyle = property(__cnfStyle.value, __cnfStyle.set, None, u'Paragraph Conditional Formatting')


    _ElementMap = {
        __adjustRightInd.name() : __adjustRightInd,
        __snapToGrid.name() : __snapToGrid,
        __suppressLineNumbers.name() : __suppressLineNumbers,
        __spacing.name() : __spacing,
        __keepNext.name() : __keepNext,
        __contextualSpacing.name() : __contextualSpacing,
        __pageBreakBefore.name() : __pageBreakBefore,
        __mirrorIndents.name() : __mirrorIndents,
        __suppressOverlap.name() : __suppressOverlap,
        __framePr.name() : __framePr,
        __widowControl.name() : __widowControl,
        __pStyle.name() : __pStyle,
        __textDirection.name() : __textDirection,
        __textAlignment.name() : __textAlignment,
        __textboxTightWrap.name() : __textboxTightWrap,
        __pBdr.name() : __pBdr,
        __shd.name() : __shd,
        __divId.name() : __divId,
        __keepLines.name() : __keepLines,
        __suppressAutoHyphens.name() : __suppressAutoHyphens,
        __kinsoku.name() : __kinsoku,
        __outlineLvl.name() : __outlineLvl,
        __bidi.name() : __bidi,
        __wordWrap.name() : __wordWrap,
        __tabs.name() : __tabs,
        __jc.name() : __jc,
        __overflowPunct.name() : __overflowPunct,
        __numPr.name() : __numPr,
        __ind.name() : __ind,
        __topLinePunct.name() : __topLinePunct,
        __autoSpaceDE.name() : __autoSpaceDE,
        __autoSpaceDN.name() : __autoSpaceDN,
        __cnfStyle.name() : __cnfStyle
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_PPrBase', CT_PPrBase)


# Complex type CT_PPrGeneral with content type ELEMENT_ONLY
class CT_PPrGeneral (CT_PPrBase):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_PPrGeneral')
    # Base type is CT_PPrBase
    
    # Element bidi ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}bidi) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element adjustRightInd ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}adjustRightInd) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element snapToGrid ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}snapToGrid) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element suppressLineNumbers ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}suppressLineNumbers) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element spacing ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}spacing) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element keepNext ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}keepNext) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element contextualSpacing ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}contextualSpacing) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element pageBreakBefore ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}pageBreakBefore) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element mirrorIndents ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}mirrorIndents) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element suppressOverlap ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}suppressOverlap) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element framePr ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}framePr) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element widowControl ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}widowControl) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element pStyle ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}pStyle) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element textDirection ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}textDirection) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element textAlignment ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}textAlignment) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element textboxTightWrap ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}textboxTightWrap) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element pBdr ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}pBdr) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element shd ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}shd) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element divId ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}divId) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element keepLines ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}keepLines) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element suppressAutoHyphens ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}suppressAutoHyphens) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element kinsoku ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}kinsoku) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element outlineLvl ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}outlineLvl) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pPrChange uses Python identifier pPrChange
    __pPrChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pPrChange'), 'pPrChange', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrGeneral_httpschemas_openxmlformats_orgwordprocessingml2006mainpPrChange', False)

    
    pPrChange = property(__pPrChange.value, __pPrChange.set, None, None)

    
    # Element wordWrap ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}wordWrap) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element tabs ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tabs) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element jc ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}jc) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element overflowPunct ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}overflowPunct) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element numPr ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}numPr) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element ind ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}ind) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element topLinePunct ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}topLinePunct) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element autoSpaceDE ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}autoSpaceDE) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element autoSpaceDN ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}autoSpaceDN) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element cnfStyle ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}cnfStyle) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase

    _ElementMap = CT_PPrBase._ElementMap.copy()
    _ElementMap.update({
        __pPrChange.name() : __pPrChange
    })
    _AttributeMap = CT_PPrBase._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_PPrGeneral', CT_PPrGeneral)


# Complex type CT_DPr with content type ELEMENT_ONLY
class CT_DPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_DPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}grow uses Python identifier grow
    __grow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'grow'), 'grow', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_DPr_httpschemas_openxmlformats_orgofficeDocument2006mathgrow', False)

    
    grow = property(__grow.value, __grow.set, None, u'Delimiter Grow')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}shp uses Python identifier shp
    __shp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'shp'), 'shp', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_DPr_httpschemas_openxmlformats_orgofficeDocument2006mathshp', False)

    
    shp = property(__shp.value, __shp.set, None, u'Shape (Delimiters)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}endChr uses Python identifier endChr
    __endChr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'endChr'), 'endChr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_DPr_httpschemas_openxmlformats_orgofficeDocument2006mathendChr', False)

    
    endChr = property(__endChr.value, __endChr.set, None, u'Delimiter Ending Character')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_DPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}begChr uses Python identifier begChr
    __begChr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'begChr'), 'begChr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_DPr_httpschemas_openxmlformats_orgofficeDocument2006mathbegChr', False)

    
    begChr = property(__begChr.value, __begChr.set, None, u'Delimiter Beginning Character')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sepChr uses Python identifier sepChr
    __sepChr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sepChr'), 'sepChr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_DPr_httpschemas_openxmlformats_orgofficeDocument2006mathsepChr', False)

    
    sepChr = property(__sepChr.value, __sepChr.set, None, u'Delimiter Separator Character')


    _ElementMap = {
        __grow.name() : __grow,
        __shp.name() : __shp,
        __endChr.name() : __endChr,
        __ctrlPr.name() : __ctrlPr,
        __begChr.name() : __begChr,
        __sepChr.name() : __sepChr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_DPr', CT_DPr)


# Complex type CT_Cnf with content type EMPTY
class CT_Cnf (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Cnf')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}evenHBand uses Python identifier evenHBand
    __evenHBand = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'evenHBand'), 'evenHBand', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Cnf_httpschemas_openxmlformats_orgwordprocessingml2006mainevenHBand', _s.ST_OnOff)
    
    evenHBand = property(__evenHBand.value, __evenHBand.set, None, u'Even Numbered Horizontal Band')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}oddHBand uses Python identifier oddHBand
    __oddHBand = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'oddHBand'), 'oddHBand', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Cnf_httpschemas_openxmlformats_orgwordprocessingml2006mainoddHBand', _s.ST_OnOff)
    
    oddHBand = property(__oddHBand.value, __oddHBand.set, None, u'Odd Numbered Horizontal Band')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}firstColumn uses Python identifier firstColumn
    __firstColumn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'firstColumn'), 'firstColumn', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Cnf_httpschemas_openxmlformats_orgwordprocessingml2006mainfirstColumn', _s.ST_OnOff)
    
    firstColumn = property(__firstColumn.value, __firstColumn.set, None, u'First Column')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}firstRowFirstColumn uses Python identifier firstRowFirstColumn
    __firstRowFirstColumn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'firstRowFirstColumn'), 'firstRowFirstColumn', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Cnf_httpschemas_openxmlformats_orgwordprocessingml2006mainfirstRowFirstColumn', _s.ST_OnOff)
    
    firstRowFirstColumn = property(__firstRowFirstColumn.value, __firstRowFirstColumn.set, None, u'First Row and First Column')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lastColumn uses Python identifier lastColumn
    __lastColumn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lastColumn'), 'lastColumn', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Cnf_httpschemas_openxmlformats_orgwordprocessingml2006mainlastColumn', _s.ST_OnOff)
    
    lastColumn = property(__lastColumn.value, __lastColumn.set, None, u'Last Column')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}firstRowLastColumn uses Python identifier firstRowLastColumn
    __firstRowLastColumn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'firstRowLastColumn'), 'firstRowLastColumn', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Cnf_httpschemas_openxmlformats_orgwordprocessingml2006mainfirstRowLastColumn', _s.ST_OnOff)
    
    firstRowLastColumn = property(__firstRowLastColumn.value, __firstRowLastColumn.set, None, u'First Row and Last Column')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}oddVBand uses Python identifier oddVBand
    __oddVBand = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'oddVBand'), 'oddVBand', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Cnf_httpschemas_openxmlformats_orgwordprocessingml2006mainoddVBand', _s.ST_OnOff)
    
    oddVBand = property(__oddVBand.value, __oddVBand.set, None, u'Odd Numbered Vertical Band')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Cnf_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_Cnf)
    
    val = property(__val.value, __val.set, None, u'Conditional Formatting Bit Mask')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lastRowFirstColumn uses Python identifier lastRowFirstColumn
    __lastRowFirstColumn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lastRowFirstColumn'), 'lastRowFirstColumn', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Cnf_httpschemas_openxmlformats_orgwordprocessingml2006mainlastRowFirstColumn', _s.ST_OnOff)
    
    lastRowFirstColumn = property(__lastRowFirstColumn.value, __lastRowFirstColumn.set, None, u'Last Row and First Column')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}evenVBand uses Python identifier evenVBand
    __evenVBand = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'evenVBand'), 'evenVBand', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Cnf_httpschemas_openxmlformats_orgwordprocessingml2006mainevenVBand', _s.ST_OnOff)
    
    evenVBand = property(__evenVBand.value, __evenVBand.set, None, u'Even Numbered Vertical Band')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}firstRow uses Python identifier firstRow
    __firstRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'firstRow'), 'firstRow', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Cnf_httpschemas_openxmlformats_orgwordprocessingml2006mainfirstRow', _s.ST_OnOff)
    
    firstRow = property(__firstRow.value, __firstRow.set, None, u'First Row')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lastRowLastColumn uses Python identifier lastRowLastColumn
    __lastRowLastColumn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lastRowLastColumn'), 'lastRowLastColumn', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Cnf_httpschemas_openxmlformats_orgwordprocessingml2006mainlastRowLastColumn', _s.ST_OnOff)
    
    lastRowLastColumn = property(__lastRowLastColumn.value, __lastRowLastColumn.set, None, u'Last Row and Last Column')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lastRow uses Python identifier lastRow
    __lastRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lastRow'), 'lastRow', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Cnf_httpschemas_openxmlformats_orgwordprocessingml2006mainlastRow', _s.ST_OnOff)
    
    lastRow = property(__lastRow.value, __lastRow.set, None, u'Last Row')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __evenHBand.name() : __evenHBand,
        __oddHBand.name() : __oddHBand,
        __firstColumn.name() : __firstColumn,
        __firstRowFirstColumn.name() : __firstRowFirstColumn,
        __lastColumn.name() : __lastColumn,
        __firstRowLastColumn.name() : __firstRowLastColumn,
        __oddVBand.name() : __oddVBand,
        __val.name() : __val,
        __lastRowFirstColumn.name() : __lastRowFirstColumn,
        __evenVBand.name() : __evenVBand,
        __firstRow.name() : __firstRow,
        __lastRowLastColumn.name() : __lastRowLastColumn,
        __lastRow.name() : __lastRow
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Cnf', CT_Cnf)


# Complex type CT_RPrDefault with content type ELEMENT_ONLY
class CT_RPrDefault (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_RPrDefault')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrDefault_httpschemas_openxmlformats_orgwordprocessingml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Run Properties')


    _ElementMap = {
        __rPr.name() : __rPr
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_RPrDefault', CT_RPrDefault)


# Complex type CT_SdtDropDownList with content type ELEMENT_ONLY
class CT_SdtDropDownList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtDropDownList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}listItem uses Python identifier listItem
    __listItem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'listItem'), 'listItem', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtDropDownList_httpschemas_openxmlformats_orgwordprocessingml2006mainlistItem', True)

    
    listItem = property(__listItem.value, __listItem.set, None, u'Drop-Down List Item')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lastValue uses Python identifier lastValue
    __lastValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lastValue'), 'lastValue', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtDropDownList_httpschemas_openxmlformats_orgwordprocessingml2006mainlastValue', _s.ST_String)
    
    lastValue = property(__lastValue.value, __lastValue.set, None, u'Drop-down List Last Saved Value')


    _ElementMap = {
        __listItem.name() : __listItem
    }
    _AttributeMap = {
        __lastValue.name() : __lastValue
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtDropDownList', CT_SdtDropDownList)


# Complex type CT_DocDefaults with content type ELEMENT_ONLY
class CT_DocDefaults (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocDefaults')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pPrDefault uses Python identifier pPrDefault
    __pPrDefault = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pPrDefault'), 'pPrDefault', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocDefaults_httpschemas_openxmlformats_orgwordprocessingml2006mainpPrDefault', False)

    
    pPrDefault = property(__pPrDefault.value, __pPrDefault.set, None, u'Default Paragraph Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rPrDefault uses Python identifier rPrDefault
    __rPrDefault = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rPrDefault'), 'rPrDefault', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocDefaults_httpschemas_openxmlformats_orgwordprocessingml2006mainrPrDefault', False)

    
    rPrDefault = property(__rPrDefault.value, __rPrDefault.set, None, u'Default Run Properties')


    _ElementMap = {
        __pPrDefault.name() : __pPrDefault,
        __rPrDefault.name() : __rPrDefault
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocDefaults', CT_DocDefaults)


# Complex type CT_FtnProps with content type ELEMENT_ONLY
class CT_FtnProps (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FtnProps')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numRestart uses Python identifier numRestart
    __numRestart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numRestart'), 'numRestart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnProps_httpschemas_openxmlformats_orgwordprocessingml2006mainnumRestart', False)

    
    numRestart = property(__numRestart.value, __numRestart.set, None, u'Footnote and Endnote Numbering Restart Location')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numStart uses Python identifier numStart
    __numStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numStart'), 'numStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnProps_httpschemas_openxmlformats_orgwordprocessingml2006mainnumStart', False)

    
    numStart = property(__numStart.value, __numStart.set, None, u'Footnote and Endnote Numbering Starting Value')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pos'), 'pos', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnProps_httpschemas_openxmlformats_orgwordprocessingml2006mainpos', False)

    
    pos = property(__pos.value, __pos.set, None, u'Footnote Placement')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numFmt uses Python identifier numFmt
    __numFmt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numFmt'), 'numFmt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnProps_httpschemas_openxmlformats_orgwordprocessingml2006mainnumFmt', False)

    
    numFmt = property(__numFmt.value, __numFmt.set, None, u'Footnote Numbering Format')


    _ElementMap = {
        __numRestart.name() : __numRestart,
        __numStart.name() : __numStart,
        __pos.name() : __pos,
        __numFmt.name() : __numFmt
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FtnProps', CT_FtnProps)


# Complex type CT_CustomXmlPr with content type ELEMENT_ONLY
class CT_CustomXmlPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_CustomXmlPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}attr uses Python identifier attr
    __attr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'attr'), 'attr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlPr_httpschemas_openxmlformats_orgwordprocessingml2006mainattr', True)

    
    attr = property(__attr.value, __attr.set, None, u'Custom XML Attribute')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}placeholder uses Python identifier placeholder
    __placeholder = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'placeholder'), 'placeholder', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlPr_httpschemas_openxmlformats_orgwordprocessingml2006mainplaceholder', False)

    
    placeholder = property(__placeholder.value, __placeholder.set, None, u'Custom XML Element Placeholder Text')


    _ElementMap = {
        __attr.name() : __attr,
        __placeholder.name() : __placeholder
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_CustomXmlPr', CT_CustomXmlPr)


# Complex type CT_Color with content type EMPTY
class CT_Color (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Color')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Color_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_HexColor, required=True)
    
    val = property(__val.value, __val.set, None, u'Run Content Color')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeTint uses Python identifier themeTint
    __themeTint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeTint'), 'themeTint', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Color_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeTint', ST_UcharHexNumber)
    
    themeTint = property(__themeTint.value, __themeTint.set, None, u'Run Content Theme Color Tint')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeShade uses Python identifier themeShade
    __themeShade = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeShade'), 'themeShade', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Color_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeShade', ST_UcharHexNumber)
    
    themeShade = property(__themeShade.value, __themeShade.set, None, u'Run Content Theme Color Shade')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeColor uses Python identifier themeColor
    __themeColor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeColor'), 'themeColor', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Color_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeColor', ST_ThemeColor)
    
    themeColor = property(__themeColor.value, __themeColor.set, None, u'Run Content Theme Color')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __themeTint.name() : __themeTint,
        __themeShade.name() : __themeShade,
        __themeColor.name() : __themeColor
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Color', CT_Color)


# Complex type CT_TwipsMeasure with content type EMPTY
class CT_TwipsMeasure (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_TwipsMeasure')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_TwipsMeasure_httpschemas_openxmlformats_orgofficeDocument2006mathval', _s.ST_TwipsMeasure, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_TwipsMeasure', CT_TwipsMeasure)


# Complex type CT_LimUpp with content type ELEMENT_ONLY
class CT_LimUpp (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_LimUpp')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}lim uses Python identifier lim
    __lim = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'lim'), 'lim', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_LimUpp_httpschemas_openxmlformats_orgofficeDocument2006mathlim', False)

    
    lim = property(__lim.value, __lim.set, None, u'Limit (Upper)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}limUppPr uses Python identifier limUppPr
    __limUppPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'limUppPr'), 'limUppPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_LimUpp_httpschemas_openxmlformats_orgofficeDocument2006mathlimUppPr', False)

    
    limUppPr = property(__limUppPr.value, __limUppPr.set, None, u'Upper-Limit Properties')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_LimUpp_httpschemas_openxmlformats_orgofficeDocument2006mathe', False)

    
    e = property(__e.value, __e.set, None, u'Base')


    _ElementMap = {
        __lim.name() : __lim,
        __limUppPr.name() : __limUppPr,
        __e.name() : __e
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_LimUpp', CT_LimUpp)


# Complex type CT_FFHelpText with content type EMPTY
class CT_FFHelpText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FFHelpText')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFHelpText_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_FFHelpTextVal)
    
    val = property(__val.value, __val.set, None, u'Help Text Value')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFHelpText_httpschemas_openxmlformats_orgwordprocessingml2006maintype', ST_InfoTextType)
    
    type = property(__type.value, __type.set, None, u'Help Text Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __type.name() : __type
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FFHelpText', CT_FFHelpText)


# Complex type CT_OMathJc with content type EMPTY
class CT_OMathJc (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_OMathJc')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathJc_httpschemas_openxmlformats_orgofficeDocument2006mathval', ST_Jc)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_OMathJc', CT_OMathJc)


# Complex type CT_Tc with content type ELEMENT_ONLY
class CT_Tc (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Tc')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Block-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Block-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), 'p', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainp', True)

    
    p = property(__p.value, __p.set, None, u'Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tbl uses Python identifier tbl
    __tbl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), 'tbl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006maintbl', True)

    
    tbl = property(__tbl.value, __tbl.set, None, u'Table')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcPr uses Python identifier tcPr
    __tcPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tcPr'), 'tcPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006maintcPr', False)

    
    tcPr = property(__tcPr.value, __tcPr.set, None, u'Table Cell Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}altChunk uses Python identifier altChunk
    __altChunk = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk'), 'altChunk', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainaltChunk', True)

    
    altChunk = property(__altChunk.value, __altChunk.set, None, u'Anchor for Imported External Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tc_httpschemas_openxmlformats_orgwordprocessingml2006mainid', _s.ST_String)
    
    id = property(__id.value, __id.set, None, u'Table Cell Identifier')


    _ElementMap = {
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __customXml.name() : __customXml,
        __sdt.name() : __sdt,
        __p.name() : __p,
        __moveFrom.name() : __moveFrom,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __tbl.name() : __tbl,
        __ins.name() : __ins,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __oMathPara.name() : __oMathPara,
        __bookmarkStart.name() : __bookmarkStart,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __permStart.name() : __permStart,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __commentRangeStart.name() : __commentRangeStart,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __tcPr.name() : __tcPr,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __altChunk.name() : __altChunk,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Tc', CT_Tc)


# Complex type CT_SdtRow with content type ELEMENT_ONLY
class CT_SdtRow (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtRow')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdtContent uses Python identifier sdtContent
    __sdtContent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtContent'), 'sdtContent', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtRow_httpschemas_openxmlformats_orgwordprocessingml2006mainsdtContent', False)

    
    sdtContent = property(__sdtContent.value, __sdtContent.set, None, u'Row-Level Structured Document Tag Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdtPr uses Python identifier sdtPr
    __sdtPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtPr'), 'sdtPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtRow_httpschemas_openxmlformats_orgwordprocessingml2006mainsdtPr', False)

    
    sdtPr = property(__sdtPr.value, __sdtPr.set, None, u'Structured Document Tag Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdtEndPr uses Python identifier sdtEndPr
    __sdtEndPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtEndPr'), 'sdtEndPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtRow_httpschemas_openxmlformats_orgwordprocessingml2006mainsdtEndPr', False)

    
    sdtEndPr = property(__sdtEndPr.value, __sdtEndPr.set, None, u'Structured Document Tag End Character Properties')


    _ElementMap = {
        __sdtContent.name() : __sdtContent,
        __sdtPr.name() : __sdtPr,
        __sdtEndPr.name() : __sdtEndPr
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtRow', CT_SdtRow)


# Complex type CT_SectPrBase with content type ELEMENT_ONLY
class CT_SectPrBase (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SectPrBase')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}printerSettings uses Python identifier printerSettings
    __printerSettings = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'printerSettings'), 'printerSettings', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainprinterSettings', False)

    
    printerSettings = property(__printerSettings.value, __printerSettings.set, None, u'Reference to Printer Settings Data')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pgNumType uses Python identifier pgNumType
    __pgNumType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pgNumType'), 'pgNumType', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainpgNumType', False)

    
    pgNumType = property(__pgNumType.value, __pgNumType.set, None, u'Page Numbering Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pgSz uses Python identifier pgSz
    __pgSz = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pgSz'), 'pgSz', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainpgSz', False)

    
    pgSz = property(__pgSz.value, __pgSz.set, None, u'Page Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cols uses Python identifier cols
    __cols = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cols'), 'cols', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maincols', False)

    
    cols = property(__cols.value, __cols.set, None, u'Column Definitions')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pgMar uses Python identifier pgMar
    __pgMar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pgMar'), 'pgMar', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainpgMar', False)

    
    pgMar = property(__pgMar.value, __pgMar.set, None, u'Page Margins')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}paperSrc uses Python identifier paperSrc
    __paperSrc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'paperSrc'), 'paperSrc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainpaperSrc', False)

    
    paperSrc = property(__paperSrc.value, __paperSrc.set, None, u'Paper Source Information')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintype', False)

    
    type = property(__type.value, __type.set, None, u'Section Type')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}formProt uses Python identifier formProt
    __formProt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'formProt'), 'formProt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainformProt', False)

    
    formProt = property(__formProt.value, __formProt.set, None, u'Only Allow Editing of Form Fields')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}titlePg uses Python identifier titlePg
    __titlePg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'titlePg'), 'titlePg', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintitlePg', False)

    
    titlePg = property(__titlePg.value, __titlePg.set, None, u'Different First Page Headers and Footers')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}footnotePr uses Python identifier footnotePr
    __footnotePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'footnotePr'), 'footnotePr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainfootnotePr', False)

    
    footnotePr = property(__footnotePr.value, __footnotePr.set, None, u'Section-Wide Footnote Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vAlign uses Python identifier vAlign
    __vAlign = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vAlign'), 'vAlign', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainvAlign', False)

    
    vAlign = property(__vAlign.value, __vAlign.set, None, u'Vertical Text Alignment on Page')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pgBorders uses Python identifier pgBorders
    __pgBorders = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pgBorders'), 'pgBorders', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainpgBorders', False)

    
    pgBorders = property(__pgBorders.value, __pgBorders.set, None, u'Page Borders')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}endnotePr uses Python identifier endnotePr
    __endnotePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'endnotePr'), 'endnotePr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainendnotePr', False)

    
    endnotePr = property(__endnotePr.value, __endnotePr.set, None, u'Section-Wide Endnote Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rtlGutter uses Python identifier rtlGutter
    __rtlGutter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rtlGutter'), 'rtlGutter', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainrtlGutter', False)

    
    rtlGutter = property(__rtlGutter.value, __rtlGutter.set, None, u'Gutter on Right Side of Page')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docGrid uses Python identifier docGrid
    __docGrid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docGrid'), 'docGrid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maindocGrid', False)

    
    docGrid = property(__docGrid.value, __docGrid.set, None, u'Document Grid')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bidi uses Python identifier bidi
    __bidi = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bidi'), 'bidi', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainbidi', False)

    
    bidi = property(__bidi.value, __bidi.set, None, u'Right to Left Section Layout')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lnNumType uses Python identifier lnNumType
    __lnNumType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lnNumType'), 'lnNumType', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainlnNumType', False)

    
    lnNumType = property(__lnNumType.value, __lnNumType.set, None, u'Line Numbering Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}textDirection uses Python identifier textDirection
    __textDirection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection'), 'textDirection', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintextDirection', False)

    
    textDirection = property(__textDirection.value, __textDirection.set, None, u'Text Flow Direction')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noEndnote uses Python identifier noEndnote
    __noEndnote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noEndnote'), 'noEndnote', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainnoEndnote', False)

    
    noEndnote = property(__noEndnote.value, __noEndnote.set, None, u'Suppress Endnotes In Document')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidDel uses Python identifier rsidDel
    __rsidDel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidDel'), 'rsidDel', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidDel', ST_LongHexNumber)
    
    rsidDel = property(__rsidDel.value, __rsidDel.set, None, u'Section Deletion Revision ID')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidR uses Python identifier rsidR
    __rsidR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidR'), 'rsidR', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidR', ST_LongHexNumber)
    
    rsidR = property(__rsidR.value, __rsidR.set, None, u'Section Addition Revision ID')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidRPr uses Python identifier rsidRPr
    __rsidRPr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidRPr'), 'rsidRPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidRPr', ST_LongHexNumber)
    
    rsidRPr = property(__rsidRPr.value, __rsidRPr.set, None, u'Physical Section Mark Character Revision ID')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidSect uses Python identifier rsidSect
    __rsidSect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidSect'), 'rsidSect', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidSect', ST_LongHexNumber)
    
    rsidSect = property(__rsidSect.value, __rsidSect.set, None, u'Section Properties Revision ID')


    _ElementMap = {
        __printerSettings.name() : __printerSettings,
        __pgNumType.name() : __pgNumType,
        __pgSz.name() : __pgSz,
        __cols.name() : __cols,
        __pgMar.name() : __pgMar,
        __paperSrc.name() : __paperSrc,
        __type.name() : __type,
        __formProt.name() : __formProt,
        __titlePg.name() : __titlePg,
        __footnotePr.name() : __footnotePr,
        __vAlign.name() : __vAlign,
        __pgBorders.name() : __pgBorders,
        __endnotePr.name() : __endnotePr,
        __rtlGutter.name() : __rtlGutter,
        __docGrid.name() : __docGrid,
        __bidi.name() : __bidi,
        __lnNumType.name() : __lnNumType,
        __textDirection.name() : __textDirection,
        __noEndnote.name() : __noEndnote
    }
    _AttributeMap = {
        __rsidDel.name() : __rsidDel,
        __rsidR.name() : __rsidR,
        __rsidRPr.name() : __rsidRPr,
        __rsidSect.name() : __rsidSect
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SectPrBase', CT_SectPrBase)


# Complex type CT_TblPrBase with content type ELEMENT_ONLY
class CT_TblPrBase (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblPrBase')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblDescription uses Python identifier tblDescription
    __tblDescription = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblDescription'), 'tblDescription', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblDescription', False)

    
    tblDescription = property(__tblDescription.value, __tblDescription.set, None, u'Table Description')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}jc uses Python identifier jc
    __jc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'jc'), 'jc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainjc', False)

    
    jc = property(__jc.value, __jc.set, None, u'Table Alignment')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblW uses Python identifier tblW
    __tblW = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblW'), 'tblW', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblW', False)

    
    tblW = property(__tblW.value, __tblW.set, None, u'Preferred Table Width')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblpPr uses Python identifier tblpPr
    __tblpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblpPr'), 'tblpPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblpPr', False)

    
    tblpPr = property(__tblpPr.value, __tblpPr.set, None, u'Floating Table Positioning')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblLayout uses Python identifier tblLayout
    __tblLayout = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLayout'), 'tblLayout', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblLayout', False)

    
    tblLayout = property(__tblLayout.value, __tblLayout.set, None, u'Table Layout')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblOverlap uses Python identifier tblOverlap
    __tblOverlap = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblOverlap'), 'tblOverlap', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblOverlap', False)

    
    tblOverlap = property(__tblOverlap.value, __tblOverlap.set, None, u'Floating Table Allows Other Tables to Overlap')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblInd uses Python identifier tblInd
    __tblInd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblInd'), 'tblInd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblInd', False)

    
    tblInd = property(__tblInd.value, __tblInd.set, None, u'Table Indent from Leading Margin')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblCellMar uses Python identifier tblCellMar
    __tblCellMar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellMar'), 'tblCellMar', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblCellMar', False)

    
    tblCellMar = property(__tblCellMar.value, __tblCellMar.set, None, u'Table Cell Margin Defaults')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shd uses Python identifier shd
    __shd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), 'shd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainshd', False)

    
    shd = property(__shd.value, __shd.set, None, u'Table Shading')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblCellSpacing uses Python identifier tblCellSpacing
    __tblCellSpacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellSpacing'), 'tblCellSpacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblCellSpacing', False)

    
    tblCellSpacing = property(__tblCellSpacing.value, __tblCellSpacing.set, None, u'Table Cell Spacing Default')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblLook uses Python identifier tblLook
    __tblLook = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLook'), 'tblLook', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblLook', False)

    
    tblLook = property(__tblLook.value, __tblLook.set, None, u'Table Style Conditional Formatting Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblStyleRowBandSize uses Python identifier tblStyleRowBandSize
    __tblStyleRowBandSize = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblStyleRowBandSize'), 'tblStyleRowBandSize', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblStyleRowBandSize', False)

    
    tblStyleRowBandSize = property(__tblStyleRowBandSize.value, __tblStyleRowBandSize.set, None, u'Number of Rows in Row Band')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblStyleColBandSize uses Python identifier tblStyleColBandSize
    __tblStyleColBandSize = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblStyleColBandSize'), 'tblStyleColBandSize', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblStyleColBandSize', False)

    
    tblStyleColBandSize = property(__tblStyleColBandSize.value, __tblStyleColBandSize.set, None, u'Number of Columns in Column Band')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblCaption uses Python identifier tblCaption
    __tblCaption = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCaption'), 'tblCaption', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblCaption', False)

    
    tblCaption = property(__tblCaption.value, __tblCaption.set, None, u'Table Caption')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bidiVisual uses Python identifier bidiVisual
    __bidiVisual = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bidiVisual'), 'bidiVisual', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainbidiVisual', False)

    
    bidiVisual = property(__bidiVisual.value, __bidiVisual.set, None, u'Visually Right to Left Table')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblBorders uses Python identifier tblBorders
    __tblBorders = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblBorders'), 'tblBorders', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblBorders', False)

    
    tblBorders = property(__tblBorders.value, __tblBorders.set, None, u'Table Borders')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblStyle uses Python identifier tblStyle
    __tblStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblStyle'), 'tblStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblStyle', False)

    
    tblStyle = property(__tblStyle.value, __tblStyle.set, None, u'Referenced Table Style')


    _ElementMap = {
        __tblDescription.name() : __tblDescription,
        __jc.name() : __jc,
        __tblW.name() : __tblW,
        __tblpPr.name() : __tblpPr,
        __tblLayout.name() : __tblLayout,
        __tblOverlap.name() : __tblOverlap,
        __tblInd.name() : __tblInd,
        __tblCellMar.name() : __tblCellMar,
        __shd.name() : __shd,
        __tblCellSpacing.name() : __tblCellSpacing,
        __tblLook.name() : __tblLook,
        __tblStyleRowBandSize.name() : __tblStyleRowBandSize,
        __tblStyleColBandSize.name() : __tblStyleColBandSize,
        __tblCaption.name() : __tblCaption,
        __bidiVisual.name() : __bidiVisual,
        __tblBorders.name() : __tblBorders,
        __tblStyle.name() : __tblStyle
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblPrBase', CT_TblPrBase)


# Complex type CT_PTab with content type EMPTY
class CT_PTab (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_PTab')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}relativeTo uses Python identifier relativeTo
    __relativeTo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'relativeTo'), 'relativeTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PTab_httpschemas_openxmlformats_orgwordprocessingml2006mainrelativeTo', ST_PTabRelativeTo, required=True)
    
    relativeTo = property(__relativeTo.value, __relativeTo.set, None, u'Positional Tab Base')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}alignment uses Python identifier alignment
    __alignment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'alignment'), 'alignment', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PTab_httpschemas_openxmlformats_orgwordprocessingml2006mainalignment', ST_PTabAlignment, required=True)
    
    alignment = property(__alignment.value, __alignment.set, None, u'Positional Tab Stop Alignment')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}leader uses Python identifier leader
    __leader = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'leader'), 'leader', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PTab_httpschemas_openxmlformats_orgwordprocessingml2006mainleader', ST_PTabLeader, required=True)
    
    leader = property(__leader.value, __leader.set, None, u'Tab Leader Character')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __relativeTo.name() : __relativeTo,
        __alignment.name() : __alignment,
        __leader.name() : __leader
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_PTab', CT_PTab)


# Complex type CT_Shp with content type EMPTY
class CT_Shp (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_Shp')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Shp_httpschemas_openxmlformats_orgofficeDocument2006mathval', ST_Shp, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_Shp', CT_Shp)


# Complex type CT_TwipsMeasure_ with content type EMPTY
class CT_TwipsMeasure_ (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TwipsMeasure')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TwipsMeasure_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_TwipsMeasure, required=True)
    
    val = property(__val.value, __val.set, None, u'Measurement in Twentieths of a Point')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TwipsMeasure', CT_TwipsMeasure_)


# Complex type CT_MPr with content type ELEMENT_ONLY
class CT_MPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_MPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}rSpRule uses Python identifier rSpRule
    __rSpRule = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'rSpRule'), 'rSpRule', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MPr_httpschemas_openxmlformats_orgofficeDocument2006mathrSpRule', False)

    
    rSpRule = property(__rSpRule.value, __rSpRule.set, None, u'Row Spacing Rule')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}cGpRule uses Python identifier cGpRule
    __cGpRule = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'cGpRule'), 'cGpRule', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MPr_httpschemas_openxmlformats_orgofficeDocument2006mathcGpRule', False)

    
    cGpRule = property(__cGpRule.value, __cGpRule.set, None, u'Matrix Column Gap Rule')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}mcs uses Python identifier mcs
    __mcs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'mcs'), 'mcs', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MPr_httpschemas_openxmlformats_orgofficeDocument2006mathmcs', False)

    
    mcs = property(__mcs.value, __mcs.set, None, u'Matrix Columns')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}rSp uses Python identifier rSp
    __rSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'rSp'), 'rSp', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MPr_httpschemas_openxmlformats_orgofficeDocument2006mathrSp', False)

    
    rSp = property(__rSp.value, __rSp.set, None, u'Row Spacing (Matrix)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}cSp uses Python identifier cSp
    __cSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'cSp'), 'cSp', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MPr_httpschemas_openxmlformats_orgofficeDocument2006mathcSp', False)

    
    cSp = property(__cSp.value, __cSp.set, None, u'Minimum Matrix Column Width')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}plcHide uses Python identifier plcHide
    __plcHide = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'plcHide'), 'plcHide', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MPr_httpschemas_openxmlformats_orgofficeDocument2006mathplcHide', False)

    
    plcHide = property(__plcHide.value, __plcHide.set, None, u'Hide Placeholders (Matrix)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}cGp uses Python identifier cGp
    __cGp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'cGp'), 'cGp', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MPr_httpschemas_openxmlformats_orgofficeDocument2006mathcGp', False)

    
    cGp = property(__cGp.value, __cGp.set, None, u'Matrix Column Gap')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}baseJc uses Python identifier baseJc
    __baseJc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'baseJc'), 'baseJc', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MPr_httpschemas_openxmlformats_orgofficeDocument2006mathbaseJc', False)

    
    baseJc = property(__baseJc.value, __baseJc.set, None, u'Matrix Base Justification')


    _ElementMap = {
        __ctrlPr.name() : __ctrlPr,
        __rSpRule.name() : __rSpRule,
        __cGpRule.name() : __cGpRule,
        __mcs.name() : __mcs,
        __rSp.name() : __rSp,
        __cSp.name() : __cSp,
        __plcHide.name() : __plcHide,
        __cGp.name() : __cGp,
        __baseJc.name() : __baseJc
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_MPr', CT_MPr)


# Complex type CT_Sym with content type EMPTY
class CT_Sym (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Sym')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}font uses Python identifier font
    __font = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'font'), 'font', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Sym_httpschemas_openxmlformats_orgwordprocessingml2006mainfont', _s.ST_String)
    
    font = property(__font.value, __font.set, None, u'Symbol Character Font')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}char uses Python identifier char
    __char = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'char'), 'char', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Sym_httpschemas_openxmlformats_orgwordprocessingml2006mainchar', ST_ShortHexNumber)
    
    char = property(__char.value, __char.set, None, u'Symbol Character Code')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __font.name() : __font,
        __char.name() : __char
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Sym', CT_Sym)


# Complex type CT_Rad with content type ELEMENT_ONLY
class CT_Rad (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_Rad')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Rad_httpschemas_openxmlformats_orgofficeDocument2006mathe', False)

    
    e = property(__e.value, __e.set, None, u'Base')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}radPr uses Python identifier radPr
    __radPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'radPr'), 'radPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Rad_httpschemas_openxmlformats_orgofficeDocument2006mathradPr', False)

    
    radPr = property(__radPr.value, __radPr.set, None, u'Radical Properties')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}deg uses Python identifier deg
    __deg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'deg'), 'deg', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Rad_httpschemas_openxmlformats_orgofficeDocument2006mathdeg', False)

    
    deg = property(__deg.value, __deg.set, None, u'Degree')


    _ElementMap = {
        __e.name() : __e,
        __radPr.name() : __radPr,
        __deg.name() : __deg
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_Rad', CT_Rad)


# Complex type CT_StylePaneFilter with content type EMPTY
class CT_StylePaneFilter (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_StylePaneFilter')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}allStyles uses Python identifier allStyles
    __allStyles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'allStyles'), 'allStyles', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006mainallStyles', _s.ST_OnOff)
    
    allStyles = property(__allStyles.value, __allStyles.set, None, u'Display All Styles')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_ShortHexNumber)
    
    val = property(__val.value, __val.set, None, u'Bitmask of Suggested Filtering Options')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numberingStyles uses Python identifier numberingStyles
    __numberingStyles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numberingStyles'), 'numberingStyles', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006mainnumberingStyles', _s.ST_OnOff)
    
    numberingStyles = property(__numberingStyles.value, __numberingStyles.set, None, u'Display Numbering Styles')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}directFormattingOnTables uses Python identifier directFormattingOnTables
    __directFormattingOnTables = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'directFormattingOnTables'), 'directFormattingOnTables', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006maindirectFormattingOnTables', _s.ST_OnOff)
    
    directFormattingOnTables = property(__directFormattingOnTables.value, __directFormattingOnTables.set, None, u'Display Direct Formatting on Tables')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}clearFormatting uses Python identifier clearFormatting
    __clearFormatting = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'clearFormatting'), 'clearFormatting', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006mainclearFormatting', _s.ST_OnOff)
    
    clearFormatting = property(__clearFormatting.value, __clearFormatting.set, None, u'Display Styles to Remove Formatting')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}stylesInUse uses Python identifier stylesInUse
    __stylesInUse = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'stylesInUse'), 'stylesInUse', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006mainstylesInUse', _s.ST_OnOff)
    
    stylesInUse = property(__stylesInUse.value, __stylesInUse.set, None, u'Display Styles in Use')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customStyles uses Python identifier customStyles
    __customStyles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customStyles'), 'customStyles', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006maincustomStyles', _s.ST_OnOff)
    
    customStyles = property(__customStyles.value, __customStyles.set, None, u'Display Only Custom Styles')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}directFormattingOnRuns uses Python identifier directFormattingOnRuns
    __directFormattingOnRuns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'directFormattingOnRuns'), 'directFormattingOnRuns', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006maindirectFormattingOnRuns', _s.ST_OnOff)
    
    directFormattingOnRuns = property(__directFormattingOnRuns.value, __directFormattingOnRuns.set, None, u'Display Run Level Direct Formatting')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}top3HeadingStyles uses Python identifier top3HeadingStyles
    __top3HeadingStyles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'top3HeadingStyles'), 'top3HeadingStyles', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006maintop3HeadingStyles', _s.ST_OnOff)
    
    top3HeadingStyles = property(__top3HeadingStyles.value, __top3HeadingStyles.set, None, u'Display Heading 1 through 3')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}latentStyles uses Python identifier latentStyles
    __latentStyles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'latentStyles'), 'latentStyles', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006mainlatentStyles', _s.ST_OnOff)
    
    latentStyles = property(__latentStyles.value, __latentStyles.set, None, u'Display Latent Styles')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tableStyles uses Python identifier tableStyles
    __tableStyles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tableStyles'), 'tableStyles', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006maintableStyles', _s.ST_OnOff)
    
    tableStyles = property(__tableStyles.value, __tableStyles.set, None, u'Display Table Styles')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}directFormattingOnParagraphs uses Python identifier directFormattingOnParagraphs
    __directFormattingOnParagraphs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'directFormattingOnParagraphs'), 'directFormattingOnParagraphs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006maindirectFormattingOnParagraphs', _s.ST_OnOff)
    
    directFormattingOnParagraphs = property(__directFormattingOnParagraphs.value, __directFormattingOnParagraphs.set, None, u'Display Paragraph Level Direct Formatting')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}alternateStyleNames uses Python identifier alternateStyleNames
    __alternateStyleNames = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'alternateStyleNames'), 'alternateStyleNames', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006mainalternateStyleNames', _s.ST_OnOff)
    
    alternateStyleNames = property(__alternateStyleNames.value, __alternateStyleNames.set, None, u'Use the Alternate Style Name')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}directFormattingOnNumbering uses Python identifier directFormattingOnNumbering
    __directFormattingOnNumbering = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'directFormattingOnNumbering'), 'directFormattingOnNumbering', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006maindirectFormattingOnNumbering', _s.ST_OnOff)
    
    directFormattingOnNumbering = property(__directFormattingOnNumbering.value, __directFormattingOnNumbering.set, None, u'Display Direct Formatting on Numbering Data')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}headingStyles uses Python identifier headingStyles
    __headingStyles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'headingStyles'), 'headingStyles', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006mainheadingStyles', _s.ST_OnOff)
    
    headingStyles = property(__headingStyles.value, __headingStyles.set, None, u'Display Heading Styles')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}visibleStyles uses Python identifier visibleStyles
    __visibleStyles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'visibleStyles'), 'visibleStyles', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StylePaneFilter_httpschemas_openxmlformats_orgwordprocessingml2006mainvisibleStyles', _s.ST_OnOff)
    
    visibleStyles = property(__visibleStyles.value, __visibleStyles.set, None, u'Only Show Visible Styles')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __allStyles.name() : __allStyles,
        __val.name() : __val,
        __numberingStyles.name() : __numberingStyles,
        __directFormattingOnTables.name() : __directFormattingOnTables,
        __clearFormatting.name() : __clearFormatting,
        __stylesInUse.name() : __stylesInUse,
        __customStyles.name() : __customStyles,
        __directFormattingOnRuns.name() : __directFormattingOnRuns,
        __top3HeadingStyles.name() : __top3HeadingStyles,
        __latentStyles.name() : __latentStyles,
        __tableStyles.name() : __tableStyles,
        __directFormattingOnParagraphs.name() : __directFormattingOnParagraphs,
        __alternateStyleNames.name() : __alternateStyleNames,
        __directFormattingOnNumbering.name() : __directFormattingOnNumbering,
        __headingStyles.name() : __headingStyles,
        __visibleStyles.name() : __visibleStyles
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_StylePaneFilter', CT_StylePaneFilter)


# Complex type CT_SectPr with content type ELEMENT_ONLY
class CT_SectPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SectPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}titlePg uses Python identifier titlePg
    __titlePg = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'titlePg'), 'titlePg', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006maintitlePg', False)

    
    titlePg = property(__titlePg.value, __titlePg.set, None, u'Different First Page Headers and Footers')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}textDirection uses Python identifier textDirection
    __textDirection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection'), 'textDirection', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006maintextDirection', False)

    
    textDirection = property(__textDirection.value, __textDirection.set, None, u'Text Flow Direction')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006maintype', False)

    
    type = property(__type.value, __type.set, None, u'Section Type')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bidi uses Python identifier bidi
    __bidi = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bidi'), 'bidi', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainbidi', False)

    
    bidi = property(__bidi.value, __bidi.set, None, u'Right to Left Section Layout')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rtlGutter uses Python identifier rtlGutter
    __rtlGutter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rtlGutter'), 'rtlGutter', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrtlGutter', False)

    
    rtlGutter = property(__rtlGutter.value, __rtlGutter.set, None, u'Gutter on Right Side of Page')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docGrid uses Python identifier docGrid
    __docGrid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docGrid'), 'docGrid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006maindocGrid', False)

    
    docGrid = property(__docGrid.value, __docGrid.set, None, u'Document Grid')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}headerReference uses Python identifier headerReference
    __headerReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'headerReference'), 'headerReference', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainheaderReference', True)

    
    headerReference = property(__headerReference.value, __headerReference.set, None, u'Header Reference')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}footerReference uses Python identifier footerReference
    __footerReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'footerReference'), 'footerReference', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainfooterReference', True)

    
    footerReference = property(__footerReference.value, __footerReference.set, None, u'Footer Reference')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}footnotePr uses Python identifier footnotePr
    __footnotePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'footnotePr'), 'footnotePr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainfootnotePr', False)

    
    footnotePr = property(__footnotePr.value, __footnotePr.set, None, u'Section-Wide Footnote Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sectPrChange uses Python identifier sectPrChange
    __sectPrChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sectPrChange'), 'sectPrChange', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainsectPrChange', False)

    
    sectPrChange = property(__sectPrChange.value, __sectPrChange.set, None, u'Revision Information for Section Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}endnotePr uses Python identifier endnotePr
    __endnotePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'endnotePr'), 'endnotePr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainendnotePr', False)

    
    endnotePr = property(__endnotePr.value, __endnotePr.set, None, u'Section-Wide Endnote Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pgSz uses Python identifier pgSz
    __pgSz = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pgSz'), 'pgSz', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainpgSz', False)

    
    pgSz = property(__pgSz.value, __pgSz.set, None, u'Page Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pgMar uses Python identifier pgMar
    __pgMar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pgMar'), 'pgMar', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainpgMar', False)

    
    pgMar = property(__pgMar.value, __pgMar.set, None, u'Page Margins')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noEndnote uses Python identifier noEndnote
    __noEndnote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noEndnote'), 'noEndnote', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainnoEndnote', False)

    
    noEndnote = property(__noEndnote.value, __noEndnote.set, None, u'Suppress Endnotes In Document')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}paperSrc uses Python identifier paperSrc
    __paperSrc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'paperSrc'), 'paperSrc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainpaperSrc', False)

    
    paperSrc = property(__paperSrc.value, __paperSrc.set, None, u'Paper Source Information')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pgBorders uses Python identifier pgBorders
    __pgBorders = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pgBorders'), 'pgBorders', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainpgBorders', False)

    
    pgBorders = property(__pgBorders.value, __pgBorders.set, None, u'Page Borders')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lnNumType uses Python identifier lnNumType
    __lnNumType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lnNumType'), 'lnNumType', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainlnNumType', False)

    
    lnNumType = property(__lnNumType.value, __lnNumType.set, None, u'Line Numbering Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}printerSettings uses Python identifier printerSettings
    __printerSettings = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'printerSettings'), 'printerSettings', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainprinterSettings', False)

    
    printerSettings = property(__printerSettings.value, __printerSettings.set, None, u'Reference to Printer Settings Data')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pgNumType uses Python identifier pgNumType
    __pgNumType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pgNumType'), 'pgNumType', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainpgNumType', False)

    
    pgNumType = property(__pgNumType.value, __pgNumType.set, None, u'Page Numbering Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cols uses Python identifier cols
    __cols = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cols'), 'cols', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006maincols', False)

    
    cols = property(__cols.value, __cols.set, None, u'Column Definitions')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}formProt uses Python identifier formProt
    __formProt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'formProt'), 'formProt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainformProt', False)

    
    formProt = property(__formProt.value, __formProt.set, None, u'Only Allow Editing of Form Fields')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vAlign uses Python identifier vAlign
    __vAlign = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vAlign'), 'vAlign', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainvAlign', False)

    
    vAlign = property(__vAlign.value, __vAlign.set, None, u'Vertical Text Alignment on Page')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidDel uses Python identifier rsidDel
    __rsidDel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidDel'), 'rsidDel', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidDel', ST_LongHexNumber)
    
    rsidDel = property(__rsidDel.value, __rsidDel.set, None, u'Section Deletion Revision ID')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidR uses Python identifier rsidR
    __rsidR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidR'), 'rsidR', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidR', ST_LongHexNumber)
    
    rsidR = property(__rsidR.value, __rsidR.set, None, u'Section Addition Revision ID')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidRPr uses Python identifier rsidRPr
    __rsidRPr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidRPr'), 'rsidRPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidRPr', ST_LongHexNumber)
    
    rsidRPr = property(__rsidRPr.value, __rsidRPr.set, None, u'Physical Section Mark Character Revision ID')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidSect uses Python identifier rsidSect
    __rsidSect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidSect'), 'rsidSect', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidSect', ST_LongHexNumber)
    
    rsidSect = property(__rsidSect.value, __rsidSect.set, None, u'Section Properties Revision ID')


    _ElementMap = {
        __titlePg.name() : __titlePg,
        __textDirection.name() : __textDirection,
        __type.name() : __type,
        __bidi.name() : __bidi,
        __rtlGutter.name() : __rtlGutter,
        __docGrid.name() : __docGrid,
        __headerReference.name() : __headerReference,
        __footerReference.name() : __footerReference,
        __footnotePr.name() : __footnotePr,
        __sectPrChange.name() : __sectPrChange,
        __endnotePr.name() : __endnotePr,
        __pgSz.name() : __pgSz,
        __pgMar.name() : __pgMar,
        __noEndnote.name() : __noEndnote,
        __paperSrc.name() : __paperSrc,
        __pgBorders.name() : __pgBorders,
        __lnNumType.name() : __lnNumType,
        __printerSettings.name() : __printerSettings,
        __pgNumType.name() : __pgNumType,
        __cols.name() : __cols,
        __formProt.name() : __formProt,
        __vAlign.name() : __vAlign
    }
    _AttributeMap = {
        __rsidDel.name() : __rsidDel,
        __rsidR.name() : __rsidR,
        __rsidRPr.name() : __rsidRPr,
        __rsidSect.name() : __rsidSect
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SectPr', CT_SectPr)


# Complex type CT_UnsignedDecimalNumber with content type EMPTY
class CT_UnsignedDecimalNumber (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_UnsignedDecimalNumber')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_UnsignedDecimalNumber_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_UnsignedDecimalNumber, required=True)
    
    val = property(__val.value, __val.set, None, u'Positive Decimal Number Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_UnsignedDecimalNumber', CT_UnsignedDecimalNumber)


# Complex type CT_R_ with content type ELEMENT_ONLY
class CT_R_ (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_R')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ptab uses Python identifier ptab
    __ptab = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ptab'), 'ptab', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainptab', True)

    
    ptab = property(__ptab.value, __ptab.set, None, u'Absolute Position Tab Character')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lastRenderedPageBreak uses Python identifier lastRenderedPageBreak
    __lastRenderedPageBreak = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lastRenderedPageBreak'), 'lastRenderedPageBreak', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainlastRenderedPageBreak', True)

    
    lastRenderedPageBreak = property(__lastRenderedPageBreak.value, __lastRenderedPageBreak.set, None, u'Position of Last Calculated Page Break')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}delInstrText uses Python identifier delInstrText
    __delInstrText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'delInstrText'), 'delInstrText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maindelInstrText', True)

    
    delInstrText = property(__delInstrText.value, __delInstrText.set, None, u'Deleted Field Code')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}monthLong uses Python identifier monthLong
    __monthLong = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'monthLong'), 'monthLong', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainmonthLong', True)

    
    monthLong = property(__monthLong.value, __monthLong.set, None, u'Date Block - Long Month Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dayShort uses Python identifier dayShort
    __dayShort = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dayShort'), 'dayShort', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maindayShort', True)

    
    dayShort = property(__dayShort.value, __dayShort.set, None, u'Date Block - Short Day Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}t uses Python identifier t
    __t = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u't'), 't', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maint', True)

    
    t = property(__t.value, __t.set, None, u'Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}yearLong uses Python identifier yearLong
    __yearLong = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'yearLong'), 'yearLong', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainyearLong', True)

    
    yearLong = property(__yearLong.value, __yearLong.set, None, u'Date Block - Long Year Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}annotationRef uses Python identifier annotationRef
    __annotationRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'annotationRef'), 'annotationRef', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainannotationRef', True)

    
    annotationRef = property(__annotationRef.value, __annotationRef.set, None, u'Comment Information Block')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}monthShort uses Python identifier monthShort
    __monthShort = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'monthShort'), 'monthShort', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainmonthShort', True)

    
    monthShort = property(__monthShort.value, __monthShort.set, None, u'Date Block - Short Month Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}endnoteRef uses Python identifier endnoteRef
    __endnoteRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'endnoteRef'), 'endnoteRef', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainendnoteRef', True)

    
    endnoteRef = property(__endnoteRef.value, __endnoteRef.set, None, u'Endnote Reference Mark')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}separator uses Python identifier separator
    __separator = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'separator'), 'separator', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainseparator', True)

    
    separator = property(__separator.value, __separator.set, None, u'Footnote/Endnote Separator Mark')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}contentPart uses Python identifier contentPart
    __contentPart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'contentPart'), 'contentPart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maincontentPart', True)

    
    contentPart = property(__contentPart.value, __contentPart.set, None, u'Content Part')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}continuationSeparator uses Python identifier continuationSeparator
    __continuationSeparator = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'continuationSeparator'), 'continuationSeparator', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maincontinuationSeparator', True)

    
    continuationSeparator = property(__continuationSeparator.value, __continuationSeparator.set, None, u'Continuation Separator Mark')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sym uses Python identifier sym
    __sym = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sym'), 'sym', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainsym', True)

    
    sym = property(__sym.value, __sym.set, None, u'Symbol Character')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Run Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pgNum uses Python identifier pgNum
    __pgNum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pgNum'), 'pgNum', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainpgNum', True)

    
    pgNum = property(__pgNum.value, __pgNum.set, None, u'Page Number Block')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cr uses Python identifier cr
    __cr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cr'), 'cr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maincr', True)

    
    cr = property(__cr.value, __cr.set, None, u'Carriage Return')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noBreakHyphen uses Python identifier noBreakHyphen
    __noBreakHyphen = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noBreakHyphen'), 'noBreakHyphen', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainnoBreakHyphen', True)

    
    noBreakHyphen = property(__noBreakHyphen.value, __noBreakHyphen.set, None, u'Non Breaking Hyphen Character')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}object uses Python identifier object
    __object = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'object'), 'object', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainobject', True)

    
    object = property(__object.value, __object.set, None, u'Embedded Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tab uses Python identifier tab
    __tab = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tab'), 'tab', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maintab', True)

    
    tab = property(__tab.value, __tab.set, None, u'Tab Character')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}footnoteRef uses Python identifier footnoteRef
    __footnoteRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'footnoteRef'), 'footnoteRef', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainfootnoteRef', True)

    
    footnoteRef = property(__footnoteRef.value, __footnoteRef.set, None, u'Footnote Reference Mark')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}delText uses Python identifier delText
    __delText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'delText'), 'delText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maindelText', True)

    
    delText = property(__delText.value, __delText.set, None, u'Deleted Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fldChar uses Python identifier fldChar
    __fldChar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fldChar'), 'fldChar', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainfldChar', True)

    
    fldChar = property(__fldChar.value, __fldChar.set, None, u'Complex Field Character')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dayLong uses Python identifier dayLong
    __dayLong = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dayLong'), 'dayLong', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maindayLong', True)

    
    dayLong = property(__dayLong.value, __dayLong.set, None, u'Date Block - Long Day Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}yearShort uses Python identifier yearShort
    __yearShort = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'yearShort'), 'yearShort', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainyearShort', True)

    
    yearShort = property(__yearShort.value, __yearShort.set, None, u'Date Block - Short Year Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ruby uses Python identifier ruby
    __ruby = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ruby'), 'ruby', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainruby', True)

    
    ruby = property(__ruby.value, __ruby.set, None, u'Phonetic Guide')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pict uses Python identifier pict
    __pict = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pict'), 'pict', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainpict', True)

    
    pict = property(__pict.value, __pict.set, None, u'VML Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}footnoteReference uses Python identifier footnoteReference
    __footnoteReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'footnoteReference'), 'footnoteReference', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainfootnoteReference', True)

    
    footnoteReference = property(__footnoteReference.value, __footnoteReference.set, None, u'Footnote Reference')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}instrText uses Python identifier instrText
    __instrText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'instrText'), 'instrText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maininstrText', True)

    
    instrText = property(__instrText.value, __instrText.set, None, u'Field Code')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}softHyphen uses Python identifier softHyphen
    __softHyphen = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'softHyphen'), 'softHyphen', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainsoftHyphen', True)

    
    softHyphen = property(__softHyphen.value, __softHyphen.set, None, u'Optional Hyphen Character')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}br uses Python identifier br
    __br = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'br'), 'br', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainbr', True)

    
    br = property(__br.value, __br.set, None, u'Break')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentReference uses Python identifier commentReference
    __commentReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentReference'), 'commentReference', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maincommentReference', True)

    
    commentReference = property(__commentReference.value, __commentReference.set, None, u'Comment Content Reference Mark')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}drawing uses Python identifier drawing
    __drawing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'drawing'), 'drawing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006maindrawing', True)

    
    drawing = property(__drawing.value, __drawing.set, None, u'DrawingML Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}endnoteReference uses Python identifier endnoteReference
    __endnoteReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'endnoteReference'), 'endnoteReference', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainendnoteReference', True)

    
    endnoteReference = property(__endnoteReference.value, __endnoteReference.set, None, u'Endnote Reference')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidDel uses Python identifier rsidDel
    __rsidDel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidDel'), 'rsidDel', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidDel', ST_LongHexNumber)
    
    rsidDel = property(__rsidDel.value, __rsidDel.set, None, u'Revision Identifier for Run Deletion')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidR uses Python identifier rsidR
    __rsidR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidR'), 'rsidR', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidR', ST_LongHexNumber)
    
    rsidR = property(__rsidR.value, __rsidR.set, None, u'Revision Identifier for Run')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidRPr uses Python identifier rsidRPr
    __rsidRPr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidRPr'), 'rsidRPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_R_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidRPr', ST_LongHexNumber)
    
    rsidRPr = property(__rsidRPr.value, __rsidRPr.set, None, u'Revision Identifier for Run Properties')


    _ElementMap = {
        __ptab.name() : __ptab,
        __lastRenderedPageBreak.name() : __lastRenderedPageBreak,
        __delInstrText.name() : __delInstrText,
        __monthLong.name() : __monthLong,
        __dayShort.name() : __dayShort,
        __t.name() : __t,
        __yearLong.name() : __yearLong,
        __annotationRef.name() : __annotationRef,
        __monthShort.name() : __monthShort,
        __endnoteRef.name() : __endnoteRef,
        __separator.name() : __separator,
        __contentPart.name() : __contentPart,
        __continuationSeparator.name() : __continuationSeparator,
        __sym.name() : __sym,
        __rPr.name() : __rPr,
        __pgNum.name() : __pgNum,
        __cr.name() : __cr,
        __noBreakHyphen.name() : __noBreakHyphen,
        __object.name() : __object,
        __tab.name() : __tab,
        __footnoteRef.name() : __footnoteRef,
        __delText.name() : __delText,
        __fldChar.name() : __fldChar,
        __dayLong.name() : __dayLong,
        __yearShort.name() : __yearShort,
        __ruby.name() : __ruby,
        __pict.name() : __pict,
        __footnoteReference.name() : __footnoteReference,
        __instrText.name() : __instrText,
        __softHyphen.name() : __softHyphen,
        __br.name() : __br,
        __commentReference.name() : __commentReference,
        __drawing.name() : __drawing,
        __endnoteReference.name() : __endnoteReference
    }
    _AttributeMap = {
        __rsidDel.name() : __rsidDel,
        __rsidR.name() : __rsidR,
        __rsidRPr.name() : __rsidRPr
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_R', CT_R_)


# Complex type CT_Em with content type EMPTY
class CT_Em (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Em')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Em_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_Em, required=True)
    
    val = property(__val.value, __val.set, None, u'Emphasis Mark Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Em', CT_Em)


# Complex type CT_Picture with content type ELEMENT_ONLY
class CT_Picture (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Picture')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}control uses Python identifier control
    __control = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'control'), 'control', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Picture_httpschemas_openxmlformats_orgwordprocessingml2006maincontrol', False)

    
    control = property(__control.value, __control.set, None, u'Floating Embedded Control')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}movie uses Python identifier movie
    __movie = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'movie'), 'movie', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Picture_httpschemas_openxmlformats_orgwordprocessingml2006mainmovie', False)

    
    movie = property(__movie.value, __movie.set, None, u'Embedded Video')

    _HasWildcardElement = True

    _ElementMap = {
        __control.name() : __control,
        __movie.name() : __movie
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Picture', CT_Picture)


# Complex type CT_PageBorder with content type EMPTY
class CT_PageBorder (CT_Border):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_PageBorder')
    # Base type is CT_Border
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageBorder_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute frame inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute themeColor inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute themeTint inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute shadow inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute val inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute space inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute themeShade inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute sz inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute color inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border

    _ElementMap = CT_Border._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_Border._AttributeMap.copy()
    _AttributeMap.update({
        __id.name() : __id
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_PageBorder', CT_PageBorder)


# Complex type CT_BottomPageBorder with content type EMPTY
class CT_BottomPageBorder (CT_PageBorder):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_BottomPageBorder')
    # Base type is CT_PageBorder
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PageBorder
    
    # Attribute val inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute themeColor inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute frame inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute themeTint inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute shadow inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}bottomRight uses Python identifier bottomRight
    __bottomRight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'bottomRight'), 'bottomRight', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BottomPageBorder_httpschemas_openxmlformats_orgofficeDocument2006relationshipsbottomRight', _r.ST_RelationshipId)
    
    bottomRight = property(__bottomRight.value, __bottomRight.set, None, None)

    
    # Attribute space inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute sz inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute themeShade inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}bottomLeft uses Python identifier bottomLeft
    __bottomLeft = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'bottomLeft'), 'bottomLeft', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_BottomPageBorder_httpschemas_openxmlformats_orgofficeDocument2006relationshipsbottomLeft', _r.ST_RelationshipId)
    
    bottomLeft = property(__bottomLeft.value, __bottomLeft.set, None, None)

    
    # Attribute color inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border

    _ElementMap = CT_PageBorder._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_PageBorder._AttributeMap.copy()
    _AttributeMap.update({
        __bottomRight.name() : __bottomRight,
        __bottomLeft.name() : __bottomLeft
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_BottomPageBorder', CT_BottomPageBorder)


# Complex type CT_Text with content type SIMPLE
class CT_Text (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = _s.ST_String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Text')
    # Base type is _s.ST_String
    
    # Attribute {http://www.w3.org/XML/1998/namespace}space uses Python identifier space
    __space = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'space'), 'space', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Text_httpwww_w3_orgXML1998namespacespace', pyxb.binding.xml_.STD_ANON_space)
    
    space = property(__space.value, __space.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __space.name() : __space
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Text', CT_Text)


# Complex type CT_FontsList with content type ELEMENT_ONLY
class CT_FontsList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FontsList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}font uses Python identifier font
    __font = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'font'), 'font', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FontsList_httpschemas_openxmlformats_orgwordprocessingml2006mainfont', True)

    
    font = property(__font.value, __font.set, None, u'Properties for a Single Font')


    _ElementMap = {
        __font.name() : __font
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FontsList', CT_FontsList)


# Complex type CT_CustomXmlRow with content type ELEMENT_ONLY
class CT_CustomXmlRow (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_CustomXmlRow')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Row-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tr uses Python identifier tr
    __tr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tr'), 'tr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006maintr', True)

    
    tr = property(__tr.value, __tr.set, None, u'Table Row')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlPr uses Python identifier customXmlPr
    __customXmlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlPr'), 'customXmlPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlPr', False)

    
    customXmlPr = property(__customXmlPr.value, __customXmlPr.set, None, u'Custom XML Element Properties')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Row-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}uri uses Python identifier uri
    __uri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'uri'), 'uri', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006mainuri', _s.ST_String)
    
    uri = property(__uri.value, __uri.set, None, u'Custom XML Element Namespace')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}element uses Python identifier element
    __element = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'element'), 'element', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlRow_httpschemas_openxmlformats_orgwordprocessingml2006mainelement', _s.ST_String, required=True)
    
    element = property(__element.value, __element.set, None, u'Custom XML Element Name')


    _ElementMap = {
        __sdt.name() : __sdt,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __tr.name() : __tr,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __ins.name() : __ins,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __moveTo.name() : __moveTo,
        __customXmlPr.name() : __customXmlPr,
        __oMathPara.name() : __oMathPara,
        __bookmarkStart.name() : __bookmarkStart,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __del.name() : __del,
        __moveToRangeStart.name() : __moveToRangeStart,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __commentRangeStart.name() : __commentRangeStart,
        __proofErr.name() : __proofErr,
        __customXml.name() : __customXml,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __permEnd.name() : __permEnd,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd
    }
    _AttributeMap = {
        __uri.name() : __uri,
        __element.name() : __element
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_CustomXmlRow', CT_CustomXmlRow)


# Complex type CT_Panose with content type EMPTY
class CT_Panose (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Panose')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Panose_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_Panose, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Panose', CT_Panose)


# Complex type CT_Br with content type EMPTY
class CT_Br (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Br')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}clear uses Python identifier clear
    __clear = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'clear'), 'clear', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Br_httpschemas_openxmlformats_orgwordprocessingml2006mainclear', ST_BrClear)
    
    clear = property(__clear.value, __clear.set, None, u'Restart Location For Text Wrapping Break')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Br_httpschemas_openxmlformats_orgwordprocessingml2006maintype', ST_BrType)
    
    type = property(__type.value, __type.set, None, u'Break Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __clear.name() : __clear,
        __type.name() : __type
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Br', CT_Br)


# Complex type CT_Acc with content type ELEMENT_ONLY
class CT_Acc (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_Acc')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Acc_httpschemas_openxmlformats_orgofficeDocument2006mathe', False)

    
    e = property(__e.value, __e.set, None, u'Base')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}accPr uses Python identifier accPr
    __accPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'accPr'), 'accPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Acc_httpschemas_openxmlformats_orgofficeDocument2006mathaccPr', False)

    
    accPr = property(__accPr.value, __accPr.set, None, u'Accent Properties')


    _ElementMap = {
        __e.name() : __e,
        __accPr.name() : __accPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_Acc', CT_Acc)


# Complex type CT_Language with content type EMPTY
class CT_Language (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Language')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Language_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_Lang)
    
    val = property(__val.value, __val.set, None, u'Latin Language')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}eastAsia uses Python identifier eastAsia
    __eastAsia = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'eastAsia'), 'eastAsia', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Language_httpschemas_openxmlformats_orgwordprocessingml2006maineastAsia', _s.ST_Lang)
    
    eastAsia = property(__eastAsia.value, __eastAsia.set, None, u'East Asian Language')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bidi uses Python identifier bidi
    __bidi = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bidi'), 'bidi', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Language_httpschemas_openxmlformats_orgwordprocessingml2006mainbidi', _s.ST_Lang)
    
    bidi = property(__bidi.value, __bidi.set, None, u'Complex Script Language')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __eastAsia.name() : __eastAsia,
        __bidi.name() : __bidi
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Language', CT_Language)


# Complex type CT_Kinsoku with content type EMPTY
class CT_Kinsoku (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Kinsoku')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Kinsoku_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_String, required=True)
    
    val = property(__val.value, __val.set, None, u'Characters For Custom Line Breaking Rule')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lang'), 'lang', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Kinsoku_httpschemas_openxmlformats_orgwordprocessingml2006mainlang', _s.ST_Lang, required=True)
    
    lang = property(__lang.value, __lang.set, None, u'Language For Which Custom Line Breaking Rule Applies')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __lang.name() : __lang
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Kinsoku', CT_Kinsoku)


# Complex type CT_FitText with content type EMPTY
class CT_FitText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FitText')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FitText_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_TwipsMeasure, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FitText_httpschemas_openxmlformats_orgwordprocessingml2006mainid', ST_DecimalNumber)
    
    id = property(__id.value, __id.set, None, u'Fit Text Run ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __id.name() : __id
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FitText', CT_FitText)


# Complex type CT_Lang with content type EMPTY
class CT_Lang (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Lang')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lang_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_Lang, required=True)
    
    val = property(__val.value, __val.set, None, u'Language Code')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Lang', CT_Lang)


# Complex type CT_Box with content type ELEMENT_ONLY
class CT_Box (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_Box')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Box_httpschemas_openxmlformats_orgofficeDocument2006mathe', False)

    
    e = property(__e.value, __e.set, None, u'Base')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}boxPr uses Python identifier boxPr
    __boxPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'boxPr'), 'boxPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Box_httpschemas_openxmlformats_orgofficeDocument2006mathboxPr', False)

    
    boxPr = property(__boxPr.value, __boxPr.set, None, u'Box Properties')


    _ElementMap = {
        __e.name() : __e,
        __boxPr.name() : __boxPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_Box', CT_Box)


# Complex type CT_TblPPr with content type EMPTY
class CT_TblPPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblPPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rightFromText uses Python identifier rightFromText
    __rightFromText = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rightFromText'), 'rightFromText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrightFromText', _s.ST_TwipsMeasure)
    
    rightFromText = property(__rightFromText.value, __rightFromText.set, None, u'(Distance From Right of Table to Text')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblpY uses Python identifier tblpY
    __tblpY = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblpY'), 'tblpY', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPPr_httpschemas_openxmlformats_orgwordprocessingml2006maintblpY', ST_SignedTwipsMeasure)
    
    tblpY = property(__tblpY.value, __tblpY.set, None, u'Absolute Vertical Distance From Anchor')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}topFromText uses Python identifier topFromText
    __topFromText = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'topFromText'), 'topFromText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPPr_httpschemas_openxmlformats_orgwordprocessingml2006maintopFromText', _s.ST_TwipsMeasure)
    
    topFromText = property(__topFromText.value, __topFromText.set, None, u'Distance From Top of Table to Text')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblpYSpec uses Python identifier tblpYSpec
    __tblpYSpec = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblpYSpec'), 'tblpYSpec', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPPr_httpschemas_openxmlformats_orgwordprocessingml2006maintblpYSpec', _s.ST_YAlign)
    
    tblpYSpec = property(__tblpYSpec.value, __tblpYSpec.set, None, u'Relative Vertical Alignment from Anchor')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bottomFromText uses Python identifier bottomFromText
    __bottomFromText = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bottomFromText'), 'bottomFromText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPPr_httpschemas_openxmlformats_orgwordprocessingml2006mainbottomFromText', _s.ST_TwipsMeasure)
    
    bottomFromText = property(__bottomFromText.value, __bottomFromText.set, None, u'Distance From Bottom of Table to Text')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblpX uses Python identifier tblpX
    __tblpX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblpX'), 'tblpX', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPPr_httpschemas_openxmlformats_orgwordprocessingml2006maintblpX', ST_SignedTwipsMeasure)
    
    tblpX = property(__tblpX.value, __tblpX.set, None, u'Absolute Horizontal Distance From Anchor')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vertAnchor uses Python identifier vertAnchor
    __vertAnchor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vertAnchor'), 'vertAnchor', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPPr_httpschemas_openxmlformats_orgwordprocessingml2006mainvertAnchor', ST_VAnchor)
    
    vertAnchor = property(__vertAnchor.value, __vertAnchor.set, None, u'Table Vertical Anchor')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}horzAnchor uses Python identifier horzAnchor
    __horzAnchor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'horzAnchor'), 'horzAnchor', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPPr_httpschemas_openxmlformats_orgwordprocessingml2006mainhorzAnchor', ST_HAnchor)
    
    horzAnchor = property(__horzAnchor.value, __horzAnchor.set, None, u'Table Horizontal Anchor')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}leftFromText uses Python identifier leftFromText
    __leftFromText = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'leftFromText'), 'leftFromText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPPr_httpschemas_openxmlformats_orgwordprocessingml2006mainleftFromText', _s.ST_TwipsMeasure)
    
    leftFromText = property(__leftFromText.value, __leftFromText.set, None, u'Distance From Left of Table to Text')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblpXSpec uses Python identifier tblpXSpec
    __tblpXSpec = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblpXSpec'), 'tblpXSpec', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPPr_httpschemas_openxmlformats_orgwordprocessingml2006maintblpXSpec', _s.ST_XAlign)
    
    tblpXSpec = property(__tblpXSpec.value, __tblpXSpec.set, None, u'Relative Horizontal Alignment From Anchor')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __rightFromText.name() : __rightFromText,
        __tblpY.name() : __tblpY,
        __topFromText.name() : __topFromText,
        __tblpYSpec.name() : __tblpYSpec,
        __bottomFromText.name() : __bottomFromText,
        __tblpX.name() : __tblpX,
        __vertAnchor.name() : __vertAnchor,
        __horzAnchor.name() : __horzAnchor,
        __leftFromText.name() : __leftFromText,
        __tblpXSpec.name() : __tblpXSpec
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblPPr', CT_TblPPr)


# Complex type CT_BorderBox with content type ELEMENT_ONLY
class CT_BorderBox (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_BorderBox')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BorderBox_httpschemas_openxmlformats_orgofficeDocument2006mathe', False)

    
    e = property(__e.value, __e.set, None, u'Base')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}borderBoxPr uses Python identifier borderBoxPr
    __borderBoxPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'borderBoxPr'), 'borderBoxPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BorderBox_httpschemas_openxmlformats_orgofficeDocument2006mathborderBoxPr', False)

    
    borderBoxPr = property(__borderBoxPr.value, __borderBoxPr.set, None, u'Border-Box Properties')


    _ElementMap = {
        __e.name() : __e,
        __borderBoxPr.name() : __borderBoxPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_BorderBox', CT_BorderBox)


# Complex type CT_Highlight with content type EMPTY
class CT_Highlight (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Highlight')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Highlight_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_HighlightColor, required=True)
    
    val = property(__val.value, __val.set, None, u'Highlighting Color')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Highlight', CT_Highlight)


# Complex type CT_FPr with content type ELEMENT_ONLY
class CT_FPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_FPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_FPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}type uses Python identifier type
    __type = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'type'), 'type', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_FPr_httpschemas_openxmlformats_orgofficeDocument2006mathtype', False)

    
    type = property(__type.value, __type.set, None, u'Fraction type')


    _ElementMap = {
        __ctrlPr.name() : __ctrlPr,
        __type.name() : __type
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_FPr', CT_FPr)


# Complex type CT_TcBorders with content type ELEMENT_ONLY
class CT_TcBorders (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TcBorders')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}start uses Python identifier start
    __start = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'start'), 'start', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcBorders_httpschemas_openxmlformats_orgwordprocessingml2006mainstart', False)

    
    start = property(__start.value, __start.set, None, u'Table Cell Leading Edge Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}end uses Python identifier end
    __end = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'end'), 'end', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcBorders_httpschemas_openxmlformats_orgwordprocessingml2006mainend', False)

    
    end = property(__end.value, __end.set, None, u'Table Cell Trailing Edge Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}right uses Python identifier right
    __right = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), 'right', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcBorders_httpschemas_openxmlformats_orgwordprocessingml2006mainright', False)

    
    right = property(__right.value, __right.set, None, u'Table Cell Trailing Edge Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}top uses Python identifier top
    __top = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'top'), 'top', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcBorders_httpschemas_openxmlformats_orgwordprocessingml2006maintop', False)

    
    top = property(__top.value, __top.set, None, u'Table Cell Top Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}insideH uses Python identifier insideH
    __insideH = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'insideH'), 'insideH', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcBorders_httpschemas_openxmlformats_orgwordprocessingml2006maininsideH', False)

    
    insideH = property(__insideH.value, __insideH.set, None, u'Table Cell Inside Horizontal Edges Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tr2bl uses Python identifier tr2bl
    __tr2bl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tr2bl'), 'tr2bl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcBorders_httpschemas_openxmlformats_orgwordprocessingml2006maintr2bl', False)

    
    tr2bl = property(__tr2bl.value, __tr2bl.set, None, u'Table Cell Top Right to Bottom Left Diagonal Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}insideV uses Python identifier insideV
    __insideV = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'insideV'), 'insideV', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcBorders_httpschemas_openxmlformats_orgwordprocessingml2006maininsideV', False)

    
    insideV = property(__insideV.value, __insideV.set, None, u'Table Cell Inside Vertical Edges Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}left uses Python identifier left
    __left = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), 'left', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcBorders_httpschemas_openxmlformats_orgwordprocessingml2006mainleft', False)

    
    left = property(__left.value, __left.set, None, u'Table Cell Leading Edge Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tl2br uses Python identifier tl2br
    __tl2br = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tl2br'), 'tl2br', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcBorders_httpschemas_openxmlformats_orgwordprocessingml2006maintl2br', False)

    
    tl2br = property(__tl2br.value, __tl2br.set, None, u'Table Cell Top Left to Bottom Right Diagonal Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bottom uses Python identifier bottom
    __bottom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom'), 'bottom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcBorders_httpschemas_openxmlformats_orgwordprocessingml2006mainbottom', False)

    
    bottom = property(__bottom.value, __bottom.set, None, u'Table Cell Bottom Border')


    _ElementMap = {
        __start.name() : __start,
        __end.name() : __end,
        __right.name() : __right,
        __top.name() : __top,
        __insideH.name() : __insideH,
        __tr2bl.name() : __tr2bl,
        __insideV.name() : __insideV,
        __left.name() : __left,
        __tl2br.name() : __tl2br,
        __bottom.name() : __bottom
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TcBorders', CT_TcBorders)


# Complex type CT_FFTextType with content type EMPTY
class CT_FFTextType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FFTextType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFTextType_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_FFTextType, required=True)
    
    val = property(__val.value, __val.set, None, u'Text Box Form Field Type Values')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FFTextType', CT_FFTextType)


# Complex type CT_YAlign with content type EMPTY
class CT_YAlign (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_YAlign')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_YAlign_httpschemas_openxmlformats_orgofficeDocument2006mathval', _s.ST_YAlign, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_YAlign', CT_YAlign)


# Complex type CT_DocProtect with content type EMPTY
class CT_DocProtect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocProtect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'algorithmName'), 'algorithmName', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006mainalgorithmName', _s.ST_String)
    
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, u'Cryptographic Algorithm Name')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}edit uses Python identifier edit
    __edit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'edit'), 'edit', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006mainedit', ST_DocProtect)
    
    edit = property(__edit.value, __edit.set, None, u'Document Editing Restrictions')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}algIdExtSource uses Python identifier algIdExtSource
    __algIdExtSource = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'algIdExtSource'), 'algIdExtSource', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006mainalgIdExtSource', _s.ST_String)
    
    algIdExtSource = property(__algIdExtSource.value, __algIdExtSource.set, None, u'Algorithm Extensibility Source')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptProvider uses Python identifier cryptProvider
    __cryptProvider = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptProvider'), 'cryptProvider', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006maincryptProvider', _s.ST_String)
    
    cryptProvider = property(__cryptProvider.value, __cryptProvider.set, None, u'Cryptographic Provider')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptProviderTypeExtSource uses Python identifier cryptProviderTypeExtSource
    __cryptProviderTypeExtSource = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptProviderTypeExtSource'), 'cryptProviderTypeExtSource', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006maincryptProviderTypeExtSource', _s.ST_String)
    
    cryptProviderTypeExtSource = property(__cryptProviderTypeExtSource.value, __cryptProviderTypeExtSource.set, None, u'Provider Type Extensibility Source')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}salt uses Python identifier salt
    __salt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'salt'), 'salt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006mainsalt', pyxb.binding.datatypes.base64Binary)
    
    salt = property(__salt.value, __salt.set, None, u'Salt for Password Verifier')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}algIdExt uses Python identifier algIdExt
    __algIdExt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'algIdExt'), 'algIdExt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006mainalgIdExt', ST_LongHexNumber)
    
    algIdExt = property(__algIdExt.value, __algIdExt.set, None, u'Cryptographic Algorithm Extensibility')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptSpinCount uses Python identifier cryptSpinCount
    __cryptSpinCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptSpinCount'), 'cryptSpinCount', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006maincryptSpinCount', ST_DecimalNumber)
    
    cryptSpinCount = property(__cryptSpinCount.value, __cryptSpinCount.set, None, u'Iterations to Run Hashing Algorithm')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptAlgorithmClass uses Python identifier cryptAlgorithmClass
    __cryptAlgorithmClass = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptAlgorithmClass'), 'cryptAlgorithmClass', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006maincryptAlgorithmClass', _s.ST_AlgClass)
    
    cryptAlgorithmClass = property(__cryptAlgorithmClass.value, __cryptAlgorithmClass.set, None, u'Cryptographic Algorithm Class')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptProviderType uses Python identifier cryptProviderType
    __cryptProviderType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptProviderType'), 'cryptProviderType', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006maincryptProviderType', _s.ST_CryptProv)
    
    cryptProviderType = property(__cryptProviderType.value, __cryptProviderType.set, None, u'Cryptographic Provider Type')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptAlgorithmType uses Python identifier cryptAlgorithmType
    __cryptAlgorithmType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptAlgorithmType'), 'cryptAlgorithmType', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006maincryptAlgorithmType', _s.ST_AlgType)
    
    cryptAlgorithmType = property(__cryptAlgorithmType.value, __cryptAlgorithmType.set, None, u'Cryptographic Algorithm Type')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}enforcement uses Python identifier enforcement
    __enforcement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'enforcement'), 'enforcement', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006mainenforcement', _s.ST_OnOff)
    
    enforcement = property(__enforcement.value, __enforcement.set, None, u'Enforce Document Protection Settings')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hash uses Python identifier hash
    __hash = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hash'), 'hash', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006mainhash', pyxb.binding.datatypes.base64Binary)
    
    hash = property(__hash.value, __hash.set, None, u'Password Hash')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}spinCount uses Python identifier spinCount
    __spinCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'spinCount'), 'spinCount', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006mainspinCount', ST_DecimalNumber)
    
    spinCount = property(__spinCount.value, __spinCount.set, None, u'Iterations to Run Hashing Algorithm')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}formatting uses Python identifier formatting
    __formatting = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'formatting'), 'formatting', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006mainformatting', _s.ST_OnOff)
    
    formatting = property(__formatting.value, __formatting.set, None, u'Only Allow Formatting With Unlocked Styles')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptProviderTypeExt uses Python identifier cryptProviderTypeExt
    __cryptProviderTypeExt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptProviderTypeExt'), 'cryptProviderTypeExt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006maincryptProviderTypeExt', ST_LongHexNumber)
    
    cryptProviderTypeExt = property(__cryptProviderTypeExt.value, __cryptProviderTypeExt.set, None, u'Cryptographic Provider Type Extensibility')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}saltValue uses Python identifier saltValue
    __saltValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'saltValue'), 'saltValue', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006mainsaltValue', pyxb.binding.datatypes.base64Binary)
    
    saltValue = property(__saltValue.value, __saltValue.set, None, u'Salt Value for Password Verifier')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptAlgorithmSid uses Python identifier cryptAlgorithmSid
    __cryptAlgorithmSid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptAlgorithmSid'), 'cryptAlgorithmSid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006maincryptAlgorithmSid', ST_DecimalNumber)
    
    cryptAlgorithmSid = property(__cryptAlgorithmSid.value, __cryptAlgorithmSid.set, None, u'Cryptographic Hashing Algorithm')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hashValue uses Python identifier hashValue
    __hashValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hashValue'), 'hashValue', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocProtect_httpschemas_openxmlformats_orgwordprocessingml2006mainhashValue', pyxb.binding.datatypes.base64Binary)
    
    hashValue = property(__hashValue.value, __hashValue.set, None, u'Password Hash Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __algorithmName.name() : __algorithmName,
        __edit.name() : __edit,
        __algIdExtSource.name() : __algIdExtSource,
        __cryptProvider.name() : __cryptProvider,
        __cryptProviderTypeExtSource.name() : __cryptProviderTypeExtSource,
        __salt.name() : __salt,
        __algIdExt.name() : __algIdExt,
        __cryptSpinCount.name() : __cryptSpinCount,
        __cryptAlgorithmClass.name() : __cryptAlgorithmClass,
        __cryptProviderType.name() : __cryptProviderType,
        __cryptAlgorithmType.name() : __cryptAlgorithmType,
        __enforcement.name() : __enforcement,
        __hash.name() : __hash,
        __spinCount.name() : __spinCount,
        __formatting.name() : __formatting,
        __cryptProviderTypeExt.name() : __cryptProviderTypeExt,
        __saltValue.name() : __saltValue,
        __cryptAlgorithmSid.name() : __cryptAlgorithmSid,
        __hashValue.name() : __hashValue
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocProtect', CT_DocProtect)


# Complex type CT_MC with content type ELEMENT_ONLY
class CT_MC (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_MC')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}mcPr uses Python identifier mcPr
    __mcPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'mcPr'), 'mcPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MC_httpschemas_openxmlformats_orgofficeDocument2006mathmcPr', False)

    
    mcPr = property(__mcPr.value, __mcPr.set, None, u'Matrix Column Properties')


    _ElementMap = {
        __mcPr.name() : __mcPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_MC', CT_MC)


# Complex type CT_Integer2 with content type EMPTY
class CT_Integer2 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_Integer2')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Integer2_httpschemas_openxmlformats_orgofficeDocument2006mathval', ST_Integer2, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_Integer2', CT_Integer2)


# Complex type CT_DocumentBase with content type ELEMENT_ONLY
class CT_DocumentBase (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocumentBase')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}background uses Python identifier background
    __background = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'background'), 'background', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocumentBase_httpschemas_openxmlformats_orgwordprocessingml2006mainbackground', False)

    
    background = property(__background.value, __background.set, None, u'Document Background')


    _ElementMap = {
        __background.name() : __background
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocumentBase', CT_DocumentBase)


# Complex type CT_Document with content type ELEMENT_ONLY
class CT_Document (CT_DocumentBase):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Document')
    # Base type is CT_DocumentBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}body uses Python identifier body
    __body = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'body'), 'body', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Document_httpschemas_openxmlformats_orgwordprocessingml2006mainbody', False)

    
    body = property(__body.value, __body.set, None, u'Document Body')

    
    # Element background ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}background) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_DocumentBase
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}conformance uses Python identifier conformance
    __conformance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'conformance'), 'conformance', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Document_httpschemas_openxmlformats_orgwordprocessingml2006mainconformance', _s.ST_ConformanceClass)
    
    conformance = property(__conformance.value, __conformance.set, None, u'Document Conformance Class')


    _ElementMap = CT_DocumentBase._ElementMap.copy()
    _ElementMap.update({
        __body.name() : __body
    })
    _AttributeMap = CT_DocumentBase._AttributeMap.copy()
    _AttributeMap.update({
        __conformance.name() : __conformance
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_Document', CT_Document)


# Complex type CT_VerticalJc with content type EMPTY
class CT_VerticalJc (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_VerticalJc')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_VerticalJc_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_VerticalJc, required=True)
    
    val = property(__val.value, __val.set, None, u'Vertical Alignment Setting')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_VerticalJc', CT_VerticalJc)


# Complex type CT_SdtText with content type EMPTY
class CT_SdtText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtText')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}multiLine uses Python identifier multiLine
    __multiLine = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'multiLine'), 'multiLine', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtText_httpschemas_openxmlformats_orgwordprocessingml2006mainmultiLine', _s.ST_OnOff)
    
    multiLine = property(__multiLine.value, __multiLine.set, None, u'Allow Soft Line Breaks')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __multiLine.name() : __multiLine
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtText', CT_SdtText)


# Complex type CT_CustomXmlBlock with content type ELEMENT_ONLY
class CT_CustomXmlBlock (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_CustomXmlBlock')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlPr uses Python identifier customXmlPr
    __customXmlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlPr'), 'customXmlPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlPr', False)

    
    customXmlPr = property(__customXmlPr.value, __customXmlPr.set, None, u'Custom XML Element Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Block-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Block-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), 'p', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainp', True)

    
    p = property(__p.value, __p.set, None, u'Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tbl uses Python identifier tbl
    __tbl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), 'tbl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006maintbl', True)

    
    tbl = property(__tbl.value, __tbl.set, None, u'Table')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}uri uses Python identifier uri
    __uri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'uri'), 'uri', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainuri', _s.ST_String)
    
    uri = property(__uri.value, __uri.set, None, u'Custom XML Element Namespace')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}element uses Python identifier element
    __element = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'element'), 'element', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CustomXmlBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainelement', _s.ST_String, required=True)
    
    element = property(__element.value, __element.set, None, u'Custom XML Element Name')


    _ElementMap = {
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __customXmlPr.name() : __customXmlPr,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __commentRangeStart.name() : __commentRangeStart,
        __customXml.name() : __customXml,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __sdt.name() : __sdt,
        __p.name() : __p,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __permStart.name() : __permStart,
        __ins.name() : __ins,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveFrom.name() : __moveFrom,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __oMathPara.name() : __oMathPara,
        __bookmarkStart.name() : __bookmarkStart,
        __tbl.name() : __tbl,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart
    }
    _AttributeMap = {
        __uri.name() : __uri,
        __element.name() : __element
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_CustomXmlBlock', CT_CustomXmlBlock)


# Complex type CT_Background with content type ELEMENT_ONLY
class CT_Background (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Background')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}drawing uses Python identifier drawing
    __drawing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'drawing'), 'drawing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Background_httpschemas_openxmlformats_orgwordprocessingml2006maindrawing', False)

    
    drawing = property(__drawing.value, __drawing.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'color'), 'color', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Background_httpschemas_openxmlformats_orgwordprocessingml2006maincolor', ST_HexColor)
    
    color = property(__color.value, __color.set, None, u'Background Color')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeTint uses Python identifier themeTint
    __themeTint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeTint'), 'themeTint', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Background_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeTint', ST_UcharHexNumber)
    
    themeTint = property(__themeTint.value, __themeTint.set, None, u'Background Theme Color Tint')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeShade uses Python identifier themeShade
    __themeShade = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeShade'), 'themeShade', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Background_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeShade', ST_UcharHexNumber)
    
    themeShade = property(__themeShade.value, __themeShade.set, None, u'Background Theme Color Shade')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeColor uses Python identifier themeColor
    __themeColor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeColor'), 'themeColor', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Background_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeColor', ST_ThemeColor)
    
    themeColor = property(__themeColor.value, __themeColor.set, None, u'Background Theme Color')

    _HasWildcardElement = True

    _ElementMap = {
        __drawing.name() : __drawing
    }
    _AttributeMap = {
        __color.name() : __color,
        __themeTint.name() : __themeTint,
        __themeShade.name() : __themeShade,
        __themeColor.name() : __themeColor
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Background', CT_Background)


# Complex type CT_EdnProps with content type ELEMENT_ONLY
class CT_EdnProps (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_EdnProps')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numRestart uses Python identifier numRestart
    __numRestart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numRestart'), 'numRestart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_EdnProps_httpschemas_openxmlformats_orgwordprocessingml2006mainnumRestart', False)

    
    numRestart = property(__numRestart.value, __numRestart.set, None, u'Footnote and Endnote Numbering Restart Location')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numStart uses Python identifier numStart
    __numStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numStart'), 'numStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_EdnProps_httpschemas_openxmlformats_orgwordprocessingml2006mainnumStart', False)

    
    numStart = property(__numStart.value, __numStart.set, None, u'Footnote and Endnote Numbering Starting Value')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numFmt uses Python identifier numFmt
    __numFmt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numFmt'), 'numFmt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_EdnProps_httpschemas_openxmlformats_orgwordprocessingml2006mainnumFmt', False)

    
    numFmt = property(__numFmt.value, __numFmt.set, None, u'Endnote Numbering Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pos'), 'pos', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_EdnProps_httpschemas_openxmlformats_orgwordprocessingml2006mainpos', False)

    
    pos = property(__pos.value, __pos.set, None, u'Endnote Placement')


    _ElementMap = {
        __numRestart.name() : __numRestart,
        __numStart.name() : __numStart,
        __numFmt.name() : __numFmt,
        __pos.name() : __pos
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_EdnProps', CT_EdnProps)


# Complex type CT_TextEffect with content type EMPTY
class CT_TextEffect (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TextEffect')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TextEffect_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_TextEffect, required=True)
    
    val = property(__val.value, __val.set, None, u'Animated Text Effect Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TextEffect', CT_TextEffect)


# Complex type CT_RPrChange with content type ELEMENT_ONLY
class CT_RPrChange (CT_TrackChange):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_RPrChange')
    # Base type is CT_TrackChange
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrChange_httpschemas_openxmlformats_orgwordprocessingml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Previous Run Properties')

    
    # Attribute date inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute author inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange

    _ElementMap = CT_TrackChange._ElementMap.copy()
    _ElementMap.update({
        __rPr.name() : __rPr
    })
    _AttributeMap = CT_TrackChange._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_RPrChange', CT_RPrChange)


# Complex type CT_Jc with content type EMPTY
class CT_Jc (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Jc')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Jc_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_Jc_, required=True)
    
    val = property(__val.value, __val.set, None, u'Alignment Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Jc', CT_Jc)


# Complex type CT_Phant with content type ELEMENT_ONLY
class CT_Phant (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_Phant')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Phant_httpschemas_openxmlformats_orgofficeDocument2006mathe', False)

    
    e = property(__e.value, __e.set, None, u'Base')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}phantPr uses Python identifier phantPr
    __phantPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'phantPr'), 'phantPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Phant_httpschemas_openxmlformats_orgofficeDocument2006mathphantPr', False)

    
    phantPr = property(__phantPr.value, __phantPr.set, None, u'Phantom Properties')


    _ElementMap = {
        __e.name() : __e,
        __phantPr.name() : __phantPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_Phant', CT_Phant)


# Complex type CT_M with content type ELEMENT_ONLY
class CT_M (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_M')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}mr uses Python identifier mr
    __mr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'mr'), 'mr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_M_httpschemas_openxmlformats_orgofficeDocument2006mathmr', True)

    
    mr = property(__mr.value, __mr.set, None, u'Matrix Row')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}mPr uses Python identifier mPr
    __mPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'mPr'), 'mPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_M_httpschemas_openxmlformats_orgofficeDocument2006mathmPr', False)

    
    mPr = property(__mPr.value, __mPr.set, None, u'Matrix Properties')


    _ElementMap = {
        __mr.name() : __mr,
        __mPr.name() : __mPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_M', CT_M)


# Complex type CT_GroupChr with content type ELEMENT_ONLY
class CT_GroupChr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_GroupChr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_GroupChr_httpschemas_openxmlformats_orgofficeDocument2006mathe', False)

    
    e = property(__e.value, __e.set, None, u'Base')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}groupChrPr uses Python identifier groupChrPr
    __groupChrPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'groupChrPr'), 'groupChrPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_GroupChr_httpschemas_openxmlformats_orgofficeDocument2006mathgroupChrPr', False)

    
    groupChrPr = property(__groupChrPr.value, __groupChrPr.set, None, u'Group-Character Properties')


    _ElementMap = {
        __e.name() : __e,
        __groupChrPr.name() : __groupChrPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_GroupChr', CT_GroupChr)


# Complex type CT_SectPrChange with content type ELEMENT_ONLY
class CT_SectPrChange (CT_TrackChange):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SectPrChange')
    # Base type is CT_TrackChange
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sectPr uses Python identifier sectPr
    __sectPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sectPr'), 'sectPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectPrChange_httpschemas_openxmlformats_orgwordprocessingml2006mainsectPr', False)

    
    sectPr = property(__sectPr.value, __sectPr.set, None, u'Previous Section Properties')

    
    # Attribute date inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute author inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange

    _ElementMap = CT_TrackChange._ElementMap.copy()
    _ElementMap.update({
        __sectPr.name() : __sectPr
    })
    _AttributeMap = CT_TrackChange._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_SectPrChange', CT_SectPrChange)


# Complex type CT_TblCellMar with content type ELEMENT_ONLY
class CT_TblCellMar (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblCellMar')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}left uses Python identifier left
    __left = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), 'left', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblCellMar_httpschemas_openxmlformats_orgwordprocessingml2006mainleft', False)

    
    left = property(__left.value, __left.set, None, u'Table Cell Leading Margin Default')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bottom uses Python identifier bottom
    __bottom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom'), 'bottom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblCellMar_httpschemas_openxmlformats_orgwordprocessingml2006mainbottom', False)

    
    bottom = property(__bottom.value, __bottom.set, None, u'Table Cell Bottom Margin Default')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}start uses Python identifier start
    __start = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'start'), 'start', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblCellMar_httpschemas_openxmlformats_orgwordprocessingml2006mainstart', False)

    
    start = property(__start.value, __start.set, None, u'Table Cell Leading Margin Default')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}end uses Python identifier end
    __end = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'end'), 'end', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblCellMar_httpschemas_openxmlformats_orgwordprocessingml2006mainend', False)

    
    end = property(__end.value, __end.set, None, u'Table Cell Trailing Margin Default')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}right uses Python identifier right
    __right = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), 'right', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblCellMar_httpschemas_openxmlformats_orgwordprocessingml2006mainright', False)

    
    right = property(__right.value, __right.set, None, u'Table Cell Trailing Margin Default')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}top uses Python identifier top
    __top = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'top'), 'top', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblCellMar_httpschemas_openxmlformats_orgwordprocessingml2006maintop', False)

    
    top = property(__top.value, __top.set, None, u'Table Cell Top Margin Default')


    _ElementMap = {
        __left.name() : __left,
        __bottom.name() : __bottom,
        __start.name() : __start,
        __end.name() : __end,
        __right.name() : __right,
        __top.name() : __top
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblCellMar', CT_TblCellMar)


# Complex type CT_TcPrChange with content type ELEMENT_ONLY
class CT_TcPrChange (CT_TrackChange):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TcPrChange')
    # Base type is CT_TrackChange
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcPr uses Python identifier tcPr
    __tcPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tcPr'), 'tcPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrChange_httpschemas_openxmlformats_orgwordprocessingml2006maintcPr', False)

    
    tcPr = property(__tcPr.value, __tcPr.set, None, u'Previous Table Cell Properties')

    
    # Attribute date inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute author inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange

    _ElementMap = CT_TrackChange._ElementMap.copy()
    _ElementMap.update({
        __tcPr.name() : __tcPr
    })
    _AttributeMap = CT_TrackChange._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_TcPrChange', CT_TcPrChange)


# Complex type CT_TextDirection with content type EMPTY
class CT_TextDirection (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TextDirection')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TextDirection_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_TextDirection, required=True)
    
    val = property(__val.value, __val.set, None, u'Direction of Text Flow')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TextDirection', CT_TextDirection)


# Complex type CT_SignedHpsMeasure with content type EMPTY
class CT_SignedHpsMeasure (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SignedHpsMeasure')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SignedHpsMeasure_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_SignedHpsMeasure, required=True)
    
    val = property(__val.value, __val.set, None, u'Signed Half-Point Measurement')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SignedHpsMeasure', CT_SignedHpsMeasure)


# Complex type CT_ColorSchemeMapping with content type EMPTY
class CT_ColorSchemeMapping (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_ColorSchemeMapping')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}accent2 uses Python identifier accent2
    __accent2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'accent2'), 'accent2', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ColorSchemeMapping_httpschemas_openxmlformats_orgwordprocessingml2006mainaccent2', ST_WmlColorSchemeIndex)
    
    accent2 = property(__accent2.value, __accent2.set, None, u'Accent 2 Theme Color Mapping')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}accent4 uses Python identifier accent4
    __accent4 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'accent4'), 'accent4', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ColorSchemeMapping_httpschemas_openxmlformats_orgwordprocessingml2006mainaccent4', ST_WmlColorSchemeIndex)
    
    accent4 = property(__accent4.value, __accent4.set, None, u'Accent4 Theme Color Mapping')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bg2 uses Python identifier bg2
    __bg2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bg2'), 'bg2', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ColorSchemeMapping_httpschemas_openxmlformats_orgwordprocessingml2006mainbg2', ST_WmlColorSchemeIndex)
    
    bg2 = property(__bg2.value, __bg2.set, None, u'Background 2 Theme Color Mapping')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}accent1 uses Python identifier accent1
    __accent1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'accent1'), 'accent1', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ColorSchemeMapping_httpschemas_openxmlformats_orgwordprocessingml2006mainaccent1', ST_WmlColorSchemeIndex)
    
    accent1 = property(__accent1.value, __accent1.set, None, u'Accent 1 Theme Color Mapping')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}accent5 uses Python identifier accent5
    __accent5 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'accent5'), 'accent5', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ColorSchemeMapping_httpschemas_openxmlformats_orgwordprocessingml2006mainaccent5', ST_WmlColorSchemeIndex)
    
    accent5 = property(__accent5.value, __accent5.set, None, u'Accent5 Theme Color Mapping')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}t2 uses Python identifier t2
    __t2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u't2'), 't2', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ColorSchemeMapping_httpschemas_openxmlformats_orgwordprocessingml2006maint2', ST_WmlColorSchemeIndex)
    
    t2 = property(__t2.value, __t2.set, None, u'Text 2 Theme Color Mapping')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}accent6 uses Python identifier accent6
    __accent6 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'accent6'), 'accent6', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ColorSchemeMapping_httpschemas_openxmlformats_orgwordprocessingml2006mainaccent6', ST_WmlColorSchemeIndex)
    
    accent6 = property(__accent6.value, __accent6.set, None, u'Accent6 Theme Color Mapping')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bg1 uses Python identifier bg1
    __bg1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bg1'), 'bg1', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ColorSchemeMapping_httpschemas_openxmlformats_orgwordprocessingml2006mainbg1', ST_WmlColorSchemeIndex)
    
    bg1 = property(__bg1.value, __bg1.set, None, u'Background 1 Theme Color Mapping')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hyperlink uses Python identifier hyperlink
    __hyperlink = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), 'hyperlink', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ColorSchemeMapping_httpschemas_openxmlformats_orgwordprocessingml2006mainhyperlink', ST_WmlColorSchemeIndex)
    
    hyperlink = property(__hyperlink.value, __hyperlink.set, None, u'Hyperlink Theme Color Mapping')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}followedHyperlink uses Python identifier followedHyperlink
    __followedHyperlink = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'followedHyperlink'), 'followedHyperlink', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ColorSchemeMapping_httpschemas_openxmlformats_orgwordprocessingml2006mainfollowedHyperlink', ST_WmlColorSchemeIndex)
    
    followedHyperlink = property(__followedHyperlink.value, __followedHyperlink.set, None, u'Followed Hyperlink Theme Color Mapping')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}accent3 uses Python identifier accent3
    __accent3 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'accent3'), 'accent3', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ColorSchemeMapping_httpschemas_openxmlformats_orgwordprocessingml2006mainaccent3', ST_WmlColorSchemeIndex)
    
    accent3 = property(__accent3.value, __accent3.set, None, u'Accent3 Theme Color Mapping')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}t1 uses Python identifier t1
    __t1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u't1'), 't1', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ColorSchemeMapping_httpschemas_openxmlformats_orgwordprocessingml2006maint1', ST_WmlColorSchemeIndex)
    
    t1 = property(__t1.value, __t1.set, None, u'Text 1 Theme Color Mapping')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __accent2.name() : __accent2,
        __accent4.name() : __accent4,
        __bg2.name() : __bg2,
        __accent1.name() : __accent1,
        __accent5.name() : __accent5,
        __t2.name() : __t2,
        __accent6.name() : __accent6,
        __bg1.name() : __bg1,
        __hyperlink.name() : __hyperlink,
        __followedHyperlink.name() : __followedHyperlink,
        __accent3.name() : __accent3,
        __t1.name() : __t1
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_ColorSchemeMapping', CT_ColorSchemeMapping)


# Complex type CT_SmartTagPr with content type ELEMENT_ONLY
class CT_SmartTagPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SmartTagPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}attr uses Python identifier attr
    __attr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'attr'), 'attr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagPr_httpschemas_openxmlformats_orgwordprocessingml2006mainattr', True)

    
    attr = property(__attr.value, __attr.set, None, u'Smart Tag Property')


    _ElementMap = {
        __attr.name() : __attr
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SmartTagPr', CT_SmartTagPr)


# Complex type CT_Column with content type EMPTY
class CT_Column (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Column')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), 'w', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Column_httpschemas_openxmlformats_orgwordprocessingml2006mainw', _s.ST_TwipsMeasure)
    
    w = property(__w.value, __w.set, None, u'Column Width')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}space uses Python identifier space
    __space = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'space'), 'space', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Column_httpschemas_openxmlformats_orgwordprocessingml2006mainspace', _s.ST_TwipsMeasure)
    
    space = property(__space.value, __space.set, None, u'Space Before Following Column')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __w.name() : __w,
        __space.name() : __space
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Column', CT_Column)


# Complex type CT_Object with content type ELEMENT_ONLY
class CT_Object (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Object')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}control uses Python identifier control
    __control = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'control'), 'control', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Object_httpschemas_openxmlformats_orgwordprocessingml2006maincontrol', False)

    
    control = property(__control.value, __control.set, None, u'Embedded Control')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}drawing uses Python identifier drawing
    __drawing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'drawing'), 'drawing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Object_httpschemas_openxmlformats_orgwordprocessingml2006maindrawing', False)

    
    drawing = property(__drawing.value, __drawing.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}objectLink uses Python identifier objectLink
    __objectLink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'objectLink'), 'objectLink', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Object_httpschemas_openxmlformats_orgwordprocessingml2006mainobjectLink', False)

    
    objectLink = property(__objectLink.value, __objectLink.set, None, u'Linked Object Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}objectEmbed uses Python identifier objectEmbed
    __objectEmbed = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'objectEmbed'), 'objectEmbed', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Object_httpschemas_openxmlformats_orgwordprocessingml2006mainobjectEmbed', False)

    
    objectEmbed = property(__objectEmbed.value, __objectEmbed.set, None, u'Embedded Object Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}movie uses Python identifier movie
    __movie = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'movie'), 'movie', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Object_httpschemas_openxmlformats_orgwordprocessingml2006mainmovie', False)

    
    movie = property(__movie.value, __movie.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dxaOrig uses Python identifier dxaOrig
    __dxaOrig = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dxaOrig'), 'dxaOrig', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Object_httpschemas_openxmlformats_orgwordprocessingml2006maindxaOrig', _s.ST_TwipsMeasure)
    
    dxaOrig = property(__dxaOrig.value, __dxaOrig.set, None, u'Original Image Width')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dyaOrig uses Python identifier dyaOrig
    __dyaOrig = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dyaOrig'), 'dyaOrig', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Object_httpschemas_openxmlformats_orgwordprocessingml2006maindyaOrig', _s.ST_TwipsMeasure)
    
    dyaOrig = property(__dyaOrig.value, __dyaOrig.set, None, u'Original Image Height')

    _HasWildcardElement = True

    _ElementMap = {
        __control.name() : __control,
        __drawing.name() : __drawing,
        __objectLink.name() : __objectLink,
        __objectEmbed.name() : __objectEmbed,
        __movie.name() : __movie
    }
    _AttributeMap = {
        __dxaOrig.name() : __dxaOrig,
        __dyaOrig.name() : __dyaOrig
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Object', CT_Object)


# Complex type CT_Footnotes with content type ELEMENT_ONLY
class CT_Footnotes (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Footnotes')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'footnote'), 'footnote', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Footnotes_httpschemas_openxmlformats_orgwordprocessingml2006mainfootnote', True)

    
    footnote = property(__footnote.value, __footnote.set, None, u'Footnote Content')


    _ElementMap = {
        __footnote.name() : __footnote
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Footnotes', CT_Footnotes)


# Complex type CT_SimpleField with content type ELEMENT_ONLY
class CT_SimpleField (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SimpleField')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), 'r', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainr', True)

    
    r = property(__r.value, __r.set, None, u'Text Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}smartTag uses Python identifier smartTag
    __smartTag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), 'smartTag', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainsmartTag', True)

    
    smartTag = property(__smartTag.value, __smartTag.set, None, u'Inline-Level Smart Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Inline-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fldSimple uses Python identifier fldSimple
    __fldSimple = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), 'fldSimple', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainfldSimple', True)

    
    fldSimple = property(__fldSimple.value, __fldSimple.set, None, u'Simple Field')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fldData uses Python identifier fldData
    __fldData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fldData'), 'fldData', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainfldData', False)

    
    fldData = property(__fldData.value, __fldData.set, None, u'Custom Field Data')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hyperlink uses Python identifier hyperlink
    __hyperlink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), 'hyperlink', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainhyperlink', True)

    
    hyperlink = property(__hyperlink.value, __hyperlink.set, None, u'Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dir uses Python identifier dir
    __dir = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), 'dir', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006maindir', True)

    
    dir = property(__dir.value, __dir.set, None, u'Bidirectional Embedding Level')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}subDoc uses Python identifier subDoc
    __subDoc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), 'subDoc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainsubDoc', True)

    
    subDoc = property(__subDoc.value, __subDoc.set, None, u'Anchor for Subdocument Location')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), 'bdo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'Bidirectional Override')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Inline-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fldLock uses Python identifier fldLock
    __fldLock = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fldLock'), 'fldLock', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006mainfldLock', _s.ST_OnOff)
    
    fldLock = property(__fldLock.value, __fldLock.set, None, u'Field Should Not Be Recalculated')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dirty uses Python identifier dirty
    __dirty = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dirty'), 'dirty', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006maindirty', _s.ST_OnOff)
    
    dirty = property(__dirty.value, __dirty.set, None, u'Field Result Invalidated')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}instr uses Python identifier instr
    __instr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'instr'), 'instr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SimpleField_httpschemas_openxmlformats_orgwordprocessingml2006maininstr', _s.ST_String, required=True)
    
    instr = property(__instr.value, __instr.set, None, u'Field Codes')


    _ElementMap = {
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __r.name() : __r,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __smartTag.name() : __smartTag,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __oMathPara.name() : __oMathPara,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __ins.name() : __ins,
        __sdt.name() : __sdt,
        __fldSimple.name() : __fldSimple,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveFrom.name() : __moveFrom,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __permStart.name() : __permStart,
        __bookmarkStart.name() : __bookmarkStart,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __fldData.name() : __fldData,
        __hyperlink.name() : __hyperlink,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __dir.name() : __dir,
        __subDoc.name() : __subDoc,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __bdo.name() : __bdo,
        __commentRangeStart.name() : __commentRangeStart,
        __customXml.name() : __customXml,
        __commentRangeEnd.name() : __commentRangeEnd
    }
    _AttributeMap = {
        __fldLock.name() : __fldLock,
        __dirty.name() : __dirty,
        __instr.name() : __instr
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SimpleField', CT_SimpleField)


# Complex type CT_RPrOriginal with content type ELEMENT_ONLY
class CT_RPrOriginal (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_RPrOriginal')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}u uses Python identifier u
    __u = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'u'), 'u', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainu', True)

    
    u = property(__u.value, __u.set, None, u'Underline')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vertAlign uses Python identifier vertAlign
    __vertAlign = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vertAlign'), 'vertAlign', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainvertAlign', True)

    
    vertAlign = property(__vertAlign.value, __vertAlign.set, None, u'Subscript/Superscript Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}caps uses Python identifier caps
    __caps = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'caps'), 'caps', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006maincaps', True)

    
    caps = property(__caps.value, __caps.set, None, u'Display All Characters As Capital Letters')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bdr uses Python identifier bdr
    __bdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bdr'), 'bdr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainbdr', True)

    
    bdr = property(__bdr.value, __bdr.set, None, u'Text Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'b'), 'b', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainb', True)

    
    b = property(__b.value, __b.set, None, u'Bold')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}strike uses Python identifier strike
    __strike = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'strike'), 'strike', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainstrike', True)

    
    strike = property(__strike.value, __strike.set, None, u'Single Strikethrough')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fitText uses Python identifier fitText
    __fitText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fitText'), 'fitText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainfitText', True)

    
    fitText = property(__fitText.value, __fitText.set, None, u'Manual Run Width')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}smallCaps uses Python identifier smallCaps
    __smallCaps = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'smallCaps'), 'smallCaps', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainsmallCaps', True)

    
    smallCaps = property(__smallCaps.value, __smallCaps.set, None, u'Small Caps')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}eastAsianLayout uses Python identifier eastAsianLayout
    __eastAsianLayout = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'eastAsianLayout'), 'eastAsianLayout', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006maineastAsianLayout', True)

    
    eastAsianLayout = property(__eastAsianLayout.value, __eastAsianLayout.set, None, u'East Asian Typography Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}outline uses Python identifier outline
    __outline = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'outline'), 'outline', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainoutline', True)

    
    outline = property(__outline.value, __outline.set, None, u'Display Character Outline')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rtl uses Python identifier rtl
    __rtl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rtl'), 'rtl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainrtl', True)

    
    rtl = property(__rtl.value, __rtl.set, None, u'Right To Left Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shadow uses Python identifier shadow
    __shadow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shadow'), 'shadow', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainshadow', True)

    
    shadow = property(__shadow.value, __shadow.set, None, u'Shadow')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cs uses Python identifier cs
    __cs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cs'), 'cs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006maincs', True)

    
    cs = property(__cs.value, __cs.set, None, u'Use Complex Script Formatting on Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}imprint uses Python identifier imprint
    __imprint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'imprint'), 'imprint', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainimprint', True)

    
    imprint = property(__imprint.value, __imprint.set, None, u'Imprinting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}emboss uses Python identifier emboss
    __emboss = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'emboss'), 'emboss', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainemboss', True)

    
    emboss = property(__emboss.value, __emboss.set, None, u'Embossing')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noProof uses Python identifier noProof
    __noProof = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noProof'), 'noProof', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainnoProof', True)

    
    noProof = property(__noProof.value, __noProof.set, None, u'Do Not Check Spelling or Grammar')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}snapToGrid uses Python identifier snapToGrid
    __snapToGrid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid'), 'snapToGrid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainsnapToGrid', True)

    
    snapToGrid = property(__snapToGrid.value, __snapToGrid.set, None, u'Use Document Grid Settings For Inter-Character Spacing')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vanish uses Python identifier vanish
    __vanish = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vanish'), 'vanish', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainvanish', True)

    
    vanish = property(__vanish.value, __vanish.set, None, u'Hidden Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}webHidden uses Python identifier webHidden
    __webHidden = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'webHidden'), 'webHidden', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainwebHidden', True)

    
    webHidden = property(__webHidden.value, __webHidden.set, None, u'Web Hidden Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}szCs uses Python identifier szCs
    __szCs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'szCs'), 'szCs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainszCs', True)

    
    szCs = property(__szCs.value, __szCs.set, None, u'Complex Script Font Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'color'), 'color', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006maincolor', True)

    
    color = property(__color.value, __color.set, None, u'Run Content Color')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}highlight uses Python identifier highlight
    __highlight = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'highlight'), 'highlight', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainhighlight', True)

    
    highlight = property(__highlight.value, __highlight.set, None, u'Text Highlighting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rStyle uses Python identifier rStyle
    __rStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rStyle'), 'rStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainrStyle', True)

    
    rStyle = property(__rStyle.value, __rStyle.set, None, u'Referenced Character Style')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shd uses Python identifier shd
    __shd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), 'shd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainshd', True)

    
    shd = property(__shd.value, __shd.set, None, u'Run Shading')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}spacing uses Python identifier spacing
    __spacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing'), 'spacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainspacing', True)

    
    spacing = property(__spacing.value, __spacing.set, None, u'Character Spacing Adjustment')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dstrike uses Python identifier dstrike
    __dstrike = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dstrike'), 'dstrike', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006maindstrike', True)

    
    dstrike = property(__dstrike.value, __dstrike.set, None, u'Double Strikethrough')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, u'Office Open XML Math')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}w uses Python identifier w
    __w = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), 'w', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainw', True)

    
    w = property(__w.value, __w.set, None, u'Expanded/Compressed Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}iCs uses Python identifier iCs
    __iCs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'iCs'), 'iCs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainiCs', True)

    
    iCs = property(__iCs.value, __iCs.set, None, u'Complex Script Italics')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}em uses Python identifier em
    __em = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'em'), 'em', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainem', True)

    
    em = property(__em.value, __em.set, None, u'Emphasis Mark')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}kern uses Python identifier kern
    __kern = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'kern'), 'kern', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainkern', True)

    
    kern = property(__kern.value, __kern.set, None, u'Font Kerning')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}specVanish uses Python identifier specVanish
    __specVanish = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'specVanish'), 'specVanish', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainspecVanish', True)

    
    specVanish = property(__specVanish.value, __specVanish.set, None, u'Paragraph Mark Is Always Hidden')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rFonts uses Python identifier rFonts
    __rFonts = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rFonts'), 'rFonts', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainrFonts', True)

    
    rFonts = property(__rFonts.value, __rFonts.set, None, u'Run Fonts')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sz uses Python identifier sz
    __sz = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sz'), 'sz', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainsz', True)

    
    sz = property(__sz.value, __sz.set, None, u'Non-Complex Script Font Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bCs uses Python identifier bCs
    __bCs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bCs'), 'bCs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainbCs', True)

    
    bCs = property(__bCs.value, __bCs.set, None, u'Complex Script Bold')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}position uses Python identifier position
    __position = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'position'), 'position', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainposition', True)

    
    position = property(__position.value, __position.set, None, u'Vertically Raised or Lowered Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}effect uses Python identifier effect
    __effect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'effect'), 'effect', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006maineffect', True)

    
    effect = property(__effect.value, __effect.set, None, u'Animated Text Effect')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}i uses Python identifier i
    __i = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'i'), 'i', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006maini', True)

    
    i = property(__i.value, __i.set, None, u'Italics')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lang uses Python identifier lang
    __lang = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lang'), 'lang', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainlang', True)

    
    lang = property(__lang.value, __lang.set, None, u'Languages for Run Content')


    _ElementMap = {
        __u.name() : __u,
        __vertAlign.name() : __vertAlign,
        __caps.name() : __caps,
        __bdr.name() : __bdr,
        __b.name() : __b,
        __strike.name() : __strike,
        __fitText.name() : __fitText,
        __smallCaps.name() : __smallCaps,
        __eastAsianLayout.name() : __eastAsianLayout,
        __outline.name() : __outline,
        __rtl.name() : __rtl,
        __shadow.name() : __shadow,
        __cs.name() : __cs,
        __imprint.name() : __imprint,
        __emboss.name() : __emboss,
        __noProof.name() : __noProof,
        __snapToGrid.name() : __snapToGrid,
        __vanish.name() : __vanish,
        __webHidden.name() : __webHidden,
        __szCs.name() : __szCs,
        __color.name() : __color,
        __highlight.name() : __highlight,
        __rStyle.name() : __rStyle,
        __shd.name() : __shd,
        __spacing.name() : __spacing,
        __dstrike.name() : __dstrike,
        __oMath.name() : __oMath,
        __w.name() : __w,
        __iCs.name() : __iCs,
        __em.name() : __em,
        __kern.name() : __kern,
        __specVanish.name() : __specVanish,
        __rFonts.name() : __rFonts,
        __sz.name() : __sz,
        __bCs.name() : __bCs,
        __position.name() : __position,
        __effect.name() : __effect,
        __i.name() : __i,
        __lang.name() : __lang
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_RPrOriginal', CT_RPrOriginal)


# Complex type CT_SaveThroughXslt with content type EMPTY
class CT_SaveThroughXslt (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SaveThroughXslt')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SaveThroughXslt_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}solutionID uses Python identifier solutionID
    __solutionID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'solutionID'), 'solutionID', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SaveThroughXslt_httpschemas_openxmlformats_orgwordprocessingml2006mainsolutionID', _s.ST_String)
    
    solutionID = property(__solutionID.value, __solutionID.set, None, u'Local Identifier for XSL Transform')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id,
        __solutionID.name() : __solutionID
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SaveThroughXslt', CT_SaveThroughXslt)


# Complex type CT_LatentStyles with content type ELEMENT_ONLY
class CT_LatentStyles (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_LatentStyles')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lsdException uses Python identifier lsdException
    __lsdException = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lsdException'), 'lsdException', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LatentStyles_httpschemas_openxmlformats_orgwordprocessingml2006mainlsdException', True)

    
    lsdException = property(__lsdException.value, __lsdException.set, None, u'Latent Style Exception')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}defUIPriority uses Python identifier defUIPriority
    __defUIPriority = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'defUIPriority'), 'defUIPriority', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LatentStyles_httpschemas_openxmlformats_orgwordprocessingml2006maindefUIPriority', ST_DecimalNumber)
    
    defUIPriority = property(__defUIPriority.value, __defUIPriority.set, None, u'Default User Interface Priority Setting')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}defLockedState uses Python identifier defLockedState
    __defLockedState = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'defLockedState'), 'defLockedState', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LatentStyles_httpschemas_openxmlformats_orgwordprocessingml2006maindefLockedState', _s.ST_OnOff)
    
    defLockedState = property(__defLockedState.value, __defLockedState.set, None, u'Default Style Locking Setting')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}defQFormat uses Python identifier defQFormat
    __defQFormat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'defQFormat'), 'defQFormat', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LatentStyles_httpschemas_openxmlformats_orgwordprocessingml2006maindefQFormat', _s.ST_OnOff)
    
    defQFormat = property(__defQFormat.value, __defQFormat.set, None, u'Default Primary Style Setting')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}defUnhideWhenUsed uses Python identifier defUnhideWhenUsed
    __defUnhideWhenUsed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'defUnhideWhenUsed'), 'defUnhideWhenUsed', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LatentStyles_httpschemas_openxmlformats_orgwordprocessingml2006maindefUnhideWhenUsed', _s.ST_OnOff)
    
    defUnhideWhenUsed = property(__defUnhideWhenUsed.value, __defUnhideWhenUsed.set, None, u'Default Hidden Until Used Setting')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}defSemiHidden uses Python identifier defSemiHidden
    __defSemiHidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'defSemiHidden'), 'defSemiHidden', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LatentStyles_httpschemas_openxmlformats_orgwordprocessingml2006maindefSemiHidden', _s.ST_OnOff)
    
    defSemiHidden = property(__defSemiHidden.value, __defSemiHidden.set, None, u'Default Semi-Hidden Setting')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'count'), 'count', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LatentStyles_httpschemas_openxmlformats_orgwordprocessingml2006maincount', ST_DecimalNumber)
    
    count = property(__count.value, __count.set, None, u'Latent Style Count')


    _ElementMap = {
        __lsdException.name() : __lsdException
    }
    _AttributeMap = {
        __defUIPriority.name() : __defUIPriority,
        __defLockedState.name() : __defLockedState,
        __defQFormat.name() : __defQFormat,
        __defUnhideWhenUsed.name() : __defUnhideWhenUsed,
        __defSemiHidden.name() : __defSemiHidden,
        __count.name() : __count
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_LatentStyles', CT_LatentStyles)


# Complex type CT_SSup with content type ELEMENT_ONLY
class CT_SSup (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_SSup')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sup uses Python identifier sup
    __sup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sup'), 'sup', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SSup_httpschemas_openxmlformats_orgofficeDocument2006mathsup', False)

    
    sup = property(__sup.value, __sup.set, None, u'Superscript (Superscript object)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sSupPr uses Python identifier sSupPr
    __sSupPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sSupPr'), 'sSupPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SSup_httpschemas_openxmlformats_orgofficeDocument2006mathsSupPr', False)

    
    sSupPr = property(__sSupPr.value, __sSupPr.set, None, u'Superscript Properties')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SSup_httpschemas_openxmlformats_orgofficeDocument2006mathe', False)

    
    e = property(__e.value, __e.set, None, u'Base')


    _ElementMap = {
        __sup.name() : __sup,
        __sSupPr.name() : __sSupPr,
        __e.name() : __e
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_SSup', CT_SSup)


# Complex type CT_TblLayoutType with content type EMPTY
class CT_TblLayoutType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblLayoutType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblLayoutType_httpschemas_openxmlformats_orgwordprocessingml2006maintype', ST_TblLayoutType)
    
    type = property(__type.value, __type.set, None, u'Table Layout Setting')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __type.name() : __type
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblLayoutType', CT_TblLayoutType)


# Complex type CT_StyleSort with content type EMPTY
class CT_StyleSort (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_StyleSort')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_StyleSort_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_StyleSort, required=True)
    
    val = property(__val.value, __val.set, None, u'Style Sorting')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_StyleSort', CT_StyleSort)


# Complex type CT_View with content type EMPTY
class CT_View (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_View')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_View_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_View, required=True)
    
    val = property(__val.value, __val.set, None, u'Document View Setting  Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_View', CT_View)


# Complex type CT_TrackChangeNumbering with content type EMPTY
class CT_TrackChangeNumbering (CT_TrackChange):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TrackChangeNumbering')
    # Base type is CT_TrackChange
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute date inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}original uses Python identifier original
    __original = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'original'), 'original', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrackChangeNumbering_httpschemas_openxmlformats_orgwordprocessingml2006mainoriginal', _s.ST_String)
    
    original = property(__original.value, __original.set, None, u'Previous Numbering Value')

    
    # Attribute author inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange

    _ElementMap = CT_TrackChange._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_TrackChange._AttributeMap.copy()
    _AttributeMap.update({
        __original.name() : __original
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_TrackChangeNumbering', CT_TrackChangeNumbering)


# Complex type CT_NumLvl with content type ELEMENT_ONLY
class CT_NumLvl (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_NumLvl')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lvl uses Python identifier lvl
    __lvl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lvl'), 'lvl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_NumLvl_httpschemas_openxmlformats_orgwordprocessingml2006mainlvl', False)

    
    lvl = property(__lvl.value, __lvl.set, None, u'Numbering Level Override Definition')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}startOverride uses Python identifier startOverride
    __startOverride = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'startOverride'), 'startOverride', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_NumLvl_httpschemas_openxmlformats_orgwordprocessingml2006mainstartOverride', False)

    
    startOverride = property(__startOverride.value, __startOverride.set, None, u'Numbering Level Starting Value Override')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ilvl uses Python identifier ilvl
    __ilvl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ilvl'), 'ilvl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_NumLvl_httpschemas_openxmlformats_orgwordprocessingml2006mainilvl', ST_DecimalNumber, required=True)
    
    ilvl = property(__ilvl.value, __ilvl.set, None, u'Numbering Level ID')


    _ElementMap = {
        __lvl.name() : __lvl,
        __startOverride.name() : __startOverride
    }
    _AttributeMap = {
        __ilvl.name() : __ilvl
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_NumLvl', CT_NumLvl)


# Complex type CT_FontSig with content type EMPTY
class CT_FontSig (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FontSig')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}usb0 uses Python identifier usb0
    __usb0 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'usb0'), 'usb0', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FontSig_httpschemas_openxmlformats_orgwordprocessingml2006mainusb0', ST_LongHexNumber, required=True)
    
    usb0 = property(__usb0.value, __usb0.set, None, u'First 32 Bits of Unicode Subset Bitfield')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}csb0 uses Python identifier csb0
    __csb0 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'csb0'), 'csb0', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FontSig_httpschemas_openxmlformats_orgwordprocessingml2006maincsb0', ST_LongHexNumber, required=True)
    
    csb0 = property(__csb0.value, __csb0.set, None, u'Lower 32 Bits of Code Page Bit Field')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}csb1 uses Python identifier csb1
    __csb1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'csb1'), 'csb1', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FontSig_httpschemas_openxmlformats_orgwordprocessingml2006maincsb1', ST_LongHexNumber, required=True)
    
    csb1 = property(__csb1.value, __csb1.set, None, u'Upper 32 Bits of Code Page Bit Field')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}usb1 uses Python identifier usb1
    __usb1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'usb1'), 'usb1', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FontSig_httpschemas_openxmlformats_orgwordprocessingml2006mainusb1', ST_LongHexNumber, required=True)
    
    usb1 = property(__usb1.value, __usb1.set, None, u'Second 32 Bits of Unicode Subset Bitfield')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}usb2 uses Python identifier usb2
    __usb2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'usb2'), 'usb2', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FontSig_httpschemas_openxmlformats_orgwordprocessingml2006mainusb2', ST_LongHexNumber, required=True)
    
    usb2 = property(__usb2.value, __usb2.set, None, u'Third 32 Bits of Unicode Subset Bitfield')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}usb3 uses Python identifier usb3
    __usb3 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'usb3'), 'usb3', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FontSig_httpschemas_openxmlformats_orgwordprocessingml2006mainusb3', ST_LongHexNumber, required=True)
    
    usb3 = property(__usb3.value, __usb3.set, None, u'Fourth 32 Bits of Unicode Subset Bitfield')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __usb0.name() : __usb0,
        __csb0.name() : __csb0,
        __csb1.name() : __csb1,
        __usb1.name() : __usb1,
        __usb2.name() : __usb2,
        __usb3.name() : __usb3
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FontSig', CT_FontSig)


# Complex type CT_String_ with content type EMPTY
class CT_String_ (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_String')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_String_httpschemas_openxmlformats_orgofficeDocument2006mathval', _s.ST_String)
    
    val = property(__val.value, __val.set, None, u'value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_String', CT_String_)


# Complex type CT_TcPrBase with content type ELEMENT_ONLY
class CT_TcPrBase (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TcPrBase')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vMerge uses Python identifier vMerge
    __vMerge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vMerge'), 'vMerge', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainvMerge', False)

    
    vMerge = property(__vMerge.value, __vMerge.set, None, u'Vertically Merged Cell')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcFitText uses Python identifier tcFitText
    __tcFitText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tcFitText'), 'tcFitText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintcFitText', False)

    
    tcFitText = property(__tcFitText.value, __tcFitText.set, None, u'Fit Text Within Cell')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcBorders uses Python identifier tcBorders
    __tcBorders = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tcBorders'), 'tcBorders', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintcBorders', False)

    
    tcBorders = property(__tcBorders.value, __tcBorders.set, None, u'Table Cell Borders')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cnfStyle uses Python identifier cnfStyle
    __cnfStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cnfStyle'), 'cnfStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maincnfStyle', False)

    
    cnfStyle = property(__cnfStyle.value, __cnfStyle.set, None, u'Table Cell Conditional Formatting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vAlign uses Python identifier vAlign
    __vAlign = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vAlign'), 'vAlign', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainvAlign', False)

    
    vAlign = property(__vAlign.value, __vAlign.set, None, u'Table Cell Vertical Alignment')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}textDirection uses Python identifier textDirection
    __textDirection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection'), 'textDirection', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintextDirection', False)

    
    textDirection = property(__textDirection.value, __textDirection.set, None, u'Table Cell Text Flow Direction')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcW uses Python identifier tcW
    __tcW = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tcW'), 'tcW', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintcW', False)

    
    tcW = property(__tcW.value, __tcW.set, None, u'Preferred Table Cell Width')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hideMark uses Python identifier hideMark
    __hideMark = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hideMark'), 'hideMark', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainhideMark', False)

    
    hideMark = property(__hideMark.value, __hideMark.set, None, u'Ignore End Of Cell Marker In Row Height Calculation')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noWrap uses Python identifier noWrap
    __noWrap = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noWrap'), 'noWrap', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainnoWrap', False)

    
    noWrap = property(__noWrap.value, __noWrap.set, None, u"Don't Wrap Cell Content")

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}gridSpan uses Python identifier gridSpan
    __gridSpan = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'gridSpan'), 'gridSpan', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maingridSpan', False)

    
    gridSpan = property(__gridSpan.value, __gridSpan.set, None, u'Grid Columns Spanned by Current Table Cell')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}headers uses Python identifier headers
    __headers = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'headers'), 'headers', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainheaders', False)

    
    headers = property(__headers.value, __headers.set, None, u'Header Cells Associated With Table Cell')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcMar uses Python identifier tcMar
    __tcMar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tcMar'), 'tcMar', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintcMar', False)

    
    tcMar = property(__tcMar.value, __tcMar.set, None, u'Single Table Cell Margins')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shd uses Python identifier shd
    __shd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), 'shd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainshd', False)

    
    shd = property(__shd.value, __shd.set, None, u'Table Cell Shading')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hMerge uses Python identifier hMerge
    __hMerge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hMerge'), 'hMerge', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainhMerge', False)

    
    hMerge = property(__hMerge.value, __hMerge.set, None, u'Horizontally Merged Cell')


    _ElementMap = {
        __vMerge.name() : __vMerge,
        __tcFitText.name() : __tcFitText,
        __tcBorders.name() : __tcBorders,
        __cnfStyle.name() : __cnfStyle,
        __vAlign.name() : __vAlign,
        __textDirection.name() : __textDirection,
        __tcW.name() : __tcW,
        __hideMark.name() : __hideMark,
        __noWrap.name() : __noWrap,
        __gridSpan.name() : __gridSpan,
        __headers.name() : __headers,
        __tcMar.name() : __tcMar,
        __shd.name() : __shd,
        __hMerge.name() : __hMerge
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TcPrBase', CT_TcPrBase)


# Complex type CT_TcPrInner with content type ELEMENT_ONLY
class CT_TcPrInner (CT_TcPrBase):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TcPrInner')
    # Base type is CT_TcPrBase
    
    # Element hMerge ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}hMerge) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element textDirection ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}textDirection) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element tcFitText ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcFitText) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element tcBorders ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcBorders) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element cnfStyle ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}cnfStyle) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element vAlign ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}vAlign) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cellMerge uses Python identifier cellMerge
    __cellMerge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cellMerge'), 'cellMerge', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrInner_httpschemas_openxmlformats_orgwordprocessingml2006maincellMerge', False)

    
    cellMerge = property(__cellMerge.value, __cellMerge.set, None, u'Vertically Merged/Split Table Cells')

    
    # Element vMerge ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}vMerge) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cellDel uses Python identifier cellDel
    __cellDel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cellDel'), 'cellDel', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrInner_httpschemas_openxmlformats_orgwordprocessingml2006maincellDel', False)

    
    cellDel = property(__cellDel.value, __cellDel.set, None, u'Table Cell Deletion')

    
    # Element tcW ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcW) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cellIns uses Python identifier cellIns
    __cellIns = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cellIns'), 'cellIns', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPrInner_httpschemas_openxmlformats_orgwordprocessingml2006maincellIns', False)

    
    cellIns = property(__cellIns.value, __cellIns.set, None, u'Table Cell Insertion')

    
    # Element hideMark ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}hideMark) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element noWrap ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}noWrap) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element gridSpan ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}gridSpan) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element headers ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}headers) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element tcMar ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcMar) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element shd ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}shd) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase

    _ElementMap = CT_TcPrBase._ElementMap.copy()
    _ElementMap.update({
        __cellMerge.name() : __cellMerge,
        __cellDel.name() : __cellDel,
        __cellIns.name() : __cellIns
    })
    _AttributeMap = CT_TcPrBase._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_TcPrInner', CT_TcPrInner)


# Complex type CT_TcPr with content type ELEMENT_ONLY
class CT_TcPr (CT_TcPrInner):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TcPr')
    # Base type is CT_TcPrInner
    
    # Element hMerge ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}hMerge) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element vMerge ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}vMerge) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcPrChange uses Python identifier tcPrChange
    __tcPrChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tcPrChange'), 'tcPrChange', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcPr_httpschemas_openxmlformats_orgwordprocessingml2006maintcPrChange', False)

    
    tcPrChange = property(__tcPrChange.value, __tcPrChange.set, None, u'Revision Information for Table Cell Properties')

    
    # Element tcFitText ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcFitText) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element tcBorders ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcBorders) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element cnfStyle ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}cnfStyle) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element vAlign ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}vAlign) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element cellMerge ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}cellMerge) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrInner
    
    # Element textDirection ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}textDirection) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element cellDel ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}cellDel) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrInner
    
    # Element tcW ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcW) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element cellIns ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}cellIns) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrInner
    
    # Element hideMark ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}hideMark) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element noWrap ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}noWrap) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element gridSpan ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}gridSpan) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element headers ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}headers) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element tcMar ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcMar) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase
    
    # Element shd ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}shd) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TcPrBase

    _ElementMap = CT_TcPrInner._ElementMap.copy()
    _ElementMap.update({
        __tcPrChange.name() : __tcPrChange
    })
    _AttributeMap = CT_TcPrInner._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_TcPr', CT_TcPr)


# Complex type CT_PaperSource with content type EMPTY
class CT_PaperSource (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_PaperSource')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}other uses Python identifier other
    __other = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'other'), 'other', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PaperSource_httpschemas_openxmlformats_orgwordprocessingml2006mainother', ST_DecimalNumber)
    
    other = property(__other.value, __other.set, None, u'Non-First Page Printer Tray Code')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}first uses Python identifier first
    __first = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'first'), 'first', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PaperSource_httpschemas_openxmlformats_orgwordprocessingml2006mainfirst', ST_DecimalNumber)
    
    first = property(__first.value, __first.set, None, u'First Page Printer Tray Code')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __other.name() : __other,
        __first.name() : __first
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_PaperSource', CT_PaperSource)


# Complex type CT_MailMergeOdsoFMDFieldType with content type EMPTY
class CT_MailMergeOdsoFMDFieldType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_MailMergeOdsoFMDFieldType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMergeOdsoFMDFieldType_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_MailMergeOdsoFMDFieldType, required=True)
    
    val = property(__val.value, __val.set, None, u'Merge Field Mapping Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_MailMergeOdsoFMDFieldType', CT_MailMergeOdsoFMDFieldType)


# Complex type CT_D with content type ELEMENT_ONLY
class CT_D (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_D')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_D_httpschemas_openxmlformats_orgofficeDocument2006mathe', True)

    
    e = property(__e.value, __e.set, None, u'Base')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}dPr uses Python identifier dPr
    __dPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'dPr'), 'dPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_D_httpschemas_openxmlformats_orgofficeDocument2006mathdPr', False)

    
    dPr = property(__dPr.value, __dPr.set, None, u'Delimiter Properties')


    _ElementMap = {
        __e.name() : __e,
        __dPr.name() : __dPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_D', CT_D)


# Complex type CT_PageSz with content type EMPTY
class CT_PageSz (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_PageSz')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}h uses Python identifier h
    __h = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'h'), 'h', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageSz_httpschemas_openxmlformats_orgwordprocessingml2006mainh', _s.ST_TwipsMeasure)
    
    h = property(__h.value, __h.set, None, u'Page Height')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), 'w', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageSz_httpschemas_openxmlformats_orgwordprocessingml2006mainw', _s.ST_TwipsMeasure)
    
    w = property(__w.value, __w.set, None, u'Page Width')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}code uses Python identifier code
    __code = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'code'), 'code', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageSz_httpschemas_openxmlformats_orgwordprocessingml2006maincode', ST_DecimalNumber)
    
    code = property(__code.value, __code.set, None, u'Printer Paper Code')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}orient uses Python identifier orient
    __orient = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'orient'), 'orient', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageSz_httpschemas_openxmlformats_orgwordprocessingml2006mainorient', ST_PageOrientation)
    
    orient = property(__orient.value, __orient.set, None, u'Page Orientation')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __h.name() : __h,
        __w.name() : __w,
        __code.name() : __code,
        __orient.name() : __orient
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_PageSz', CT_PageSz)


# Complex type CT_LongHexNumber with content type EMPTY
class CT_LongHexNumber (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_LongHexNumber')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LongHexNumber_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_LongHexNumber, required=True)
    
    val = property(__val.value, __val.set, None, u'Long Hexadecimal Number Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_LongHexNumber', CT_LongHexNumber)


# Complex type CT_WebSettings with content type ELEMENT_ONLY
class CT_WebSettings (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_WebSettings')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotRelyOnCSS uses Python identifier doNotRelyOnCSS
    __doNotRelyOnCSS = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotRelyOnCSS'), 'doNotRelyOnCSS', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WebSettings_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotRelyOnCSS', False)

    
    doNotRelyOnCSS = property(__doNotRelyOnCSS.value, __doNotRelyOnCSS.set, None, u'Do Not Rely on CSS for Font Face Formatting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}relyOnVML uses Python identifier relyOnVML
    __relyOnVML = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'relyOnVML'), 'relyOnVML', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WebSettings_httpschemas_openxmlformats_orgwordprocessingml2006mainrelyOnVML', False)

    
    relyOnVML = property(__relyOnVML.value, __relyOnVML.set, None, u'Utilize VML When Saving as Web Page')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}allowPNG uses Python identifier allowPNG
    __allowPNG = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'allowPNG'), 'allowPNG', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WebSettings_httpschemas_openxmlformats_orgwordprocessingml2006mainallowPNG', False)

    
    allowPNG = property(__allowPNG.value, __allowPNG.set, None, u'Allow PNG as Graphic Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}frameset uses Python identifier frameset
    __frameset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'frameset'), 'frameset', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WebSettings_httpschemas_openxmlformats_orgwordprocessingml2006mainframeset', False)

    
    frameset = property(__frameset.value, __frameset.set, None, u'Root Frameset Definition')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotUseLongFileNames uses Python identifier doNotUseLongFileNames
    __doNotUseLongFileNames = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotUseLongFileNames'), 'doNotUseLongFileNames', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WebSettings_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotUseLongFileNames', False)

    
    doNotUseLongFileNames = property(__doNotUseLongFileNames.value, __doNotUseLongFileNames.set, None, u'Do Not Use File Names Longer than 8.3 Characters')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}divs uses Python identifier divs
    __divs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'divs'), 'divs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WebSettings_httpschemas_openxmlformats_orgwordprocessingml2006maindivs', False)

    
    divs = property(__divs.value, __divs.set, None, u'Information about HTML div Elements')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotSaveAsSingleFile uses Python identifier doNotSaveAsSingleFile
    __doNotSaveAsSingleFile = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotSaveAsSingleFile'), 'doNotSaveAsSingleFile', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WebSettings_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotSaveAsSingleFile', False)

    
    doNotSaveAsSingleFile = property(__doNotSaveAsSingleFile.value, __doNotSaveAsSingleFile.set, None, u'Recommend Web Page Format over Single File Web Page Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}saveSmartTagsAsXml uses Python identifier saveSmartTagsAsXml
    __saveSmartTagsAsXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'saveSmartTagsAsXml'), 'saveSmartTagsAsXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WebSettings_httpschemas_openxmlformats_orgwordprocessingml2006mainsaveSmartTagsAsXml', False)

    
    saveSmartTagsAsXml = property(__saveSmartTagsAsXml.value, __saveSmartTagsAsXml.set, None, u'Save Smart Tag Data in XML Property Bag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}encoding uses Python identifier encoding
    __encoding = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'encoding'), 'encoding', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WebSettings_httpschemas_openxmlformats_orgwordprocessingml2006mainencoding', False)

    
    encoding = property(__encoding.value, __encoding.set, None, u'Output Encoding When Saving as Web Page')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}targetScreenSz uses Python identifier targetScreenSz
    __targetScreenSz = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'targetScreenSz'), 'targetScreenSz', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WebSettings_httpschemas_openxmlformats_orgwordprocessingml2006maintargetScreenSz', False)

    
    targetScreenSz = property(__targetScreenSz.value, __targetScreenSz.set, None, u'Target Screen Size for Web Page')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pixelsPerInch uses Python identifier pixelsPerInch
    __pixelsPerInch = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pixelsPerInch'), 'pixelsPerInch', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WebSettings_httpschemas_openxmlformats_orgwordprocessingml2006mainpixelsPerInch', False)

    
    pixelsPerInch = property(__pixelsPerInch.value, __pixelsPerInch.set, None, u'Pixels per Inch for Graphics/Images')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotOrganizeInFolder uses Python identifier doNotOrganizeInFolder
    __doNotOrganizeInFolder = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotOrganizeInFolder'), 'doNotOrganizeInFolder', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WebSettings_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotOrganizeInFolder', False)

    
    doNotOrganizeInFolder = property(__doNotOrganizeInFolder.value, __doNotOrganizeInFolder.set, None, u'Do Not Place Supporting Files in Subdirectory')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}optimizeForBrowser uses Python identifier optimizeForBrowser
    __optimizeForBrowser = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'optimizeForBrowser'), 'optimizeForBrowser', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WebSettings_httpschemas_openxmlformats_orgwordprocessingml2006mainoptimizeForBrowser', False)

    
    optimizeForBrowser = property(__optimizeForBrowser.value, __optimizeForBrowser.set, None, u'Disable Features Not Supported by Target Web Browser')


    _ElementMap = {
        __doNotRelyOnCSS.name() : __doNotRelyOnCSS,
        __relyOnVML.name() : __relyOnVML,
        __allowPNG.name() : __allowPNG,
        __frameset.name() : __frameset,
        __doNotUseLongFileNames.name() : __doNotUseLongFileNames,
        __divs.name() : __divs,
        __doNotSaveAsSingleFile.name() : __doNotSaveAsSingleFile,
        __saveSmartTagsAsXml.name() : __saveSmartTagsAsXml,
        __encoding.name() : __encoding,
        __targetScreenSz.name() : __targetScreenSz,
        __pixelsPerInch.name() : __pixelsPerInch,
        __doNotOrganizeInFolder.name() : __doNotOrganizeInFolder,
        __optimizeForBrowser.name() : __optimizeForBrowser
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_WebSettings', CT_WebSettings)


# Complex type CT_TrPrBase with content type ELEMENT_ONLY
class CT_TrPrBase (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TrPrBase')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblHeader uses Python identifier tblHeader
    __tblHeader = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblHeader'), 'tblHeader', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblHeader', True)

    
    tblHeader = property(__tblHeader.value, __tblHeader.set, None, u'Repeat Table Row on Every New Page')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}gridAfter uses Python identifier gridAfter
    __gridAfter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'gridAfter'), 'gridAfter', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maingridAfter', True)

    
    gridAfter = property(__gridAfter.value, __gridAfter.set, None, u'Grid Columns After Last Cell')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblCellSpacing uses Python identifier tblCellSpacing
    __tblCellSpacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellSpacing'), 'tblCellSpacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblCellSpacing', True)

    
    tblCellSpacing = property(__tblCellSpacing.value, __tblCellSpacing.set, None, u'Table Row Cell Spacing')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}trHeight uses Python identifier trHeight
    __trHeight = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'trHeight'), 'trHeight', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maintrHeight', True)

    
    trHeight = property(__trHeight.value, __trHeight.set, None, u'Table Row Height')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}wBefore uses Python identifier wBefore
    __wBefore = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'wBefore'), 'wBefore', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainwBefore', True)

    
    wBefore = property(__wBefore.value, __wBefore.set, None, u'Preferred Width Before Table Row')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}wAfter uses Python identifier wAfter
    __wAfter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'wAfter'), 'wAfter', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainwAfter', True)

    
    wAfter = property(__wAfter.value, __wAfter.set, None, u'Preferred Width After Table Row')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}jc uses Python identifier jc
    __jc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'jc'), 'jc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainjc', True)

    
    jc = property(__jc.value, __jc.set, None, u'Table Row Alignment')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hidden uses Python identifier hidden
    __hidden = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hidden'), 'hidden', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPrBase_httpschemas_openxmlformats_orgwordprocessingml2006mainhidden', True)

    
    hidden = property(__hidden.value, __hidden.set, None, u'Hidden Table Row Marker')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cantSplit uses Python identifier cantSplit
    __cantSplit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cantSplit'), 'cantSplit', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maincantSplit', True)

    
    cantSplit = property(__cantSplit.value, __cantSplit.set, None, u'Table Row Cannot Break Across Pages')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}gridBefore uses Python identifier gridBefore
    __gridBefore = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'gridBefore'), 'gridBefore', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maingridBefore', True)

    
    gridBefore = property(__gridBefore.value, __gridBefore.set, None, u'Grid Columns Before First Cell')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}divId uses Python identifier divId
    __divId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'divId'), 'divId', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maindivId', True)

    
    divId = property(__divId.value, __divId.set, None, u'Associated HTML div ID')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cnfStyle uses Python identifier cnfStyle
    __cnfStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cnfStyle'), 'cnfStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPrBase_httpschemas_openxmlformats_orgwordprocessingml2006maincnfStyle', True)

    
    cnfStyle = property(__cnfStyle.value, __cnfStyle.set, None, u'Table Row Conditional Formatting')


    _ElementMap = {
        __tblHeader.name() : __tblHeader,
        __gridAfter.name() : __gridAfter,
        __tblCellSpacing.name() : __tblCellSpacing,
        __trHeight.name() : __trHeight,
        __wBefore.name() : __wBefore,
        __wAfter.name() : __wAfter,
        __jc.name() : __jc,
        __hidden.name() : __hidden,
        __cantSplit.name() : __cantSplit,
        __gridBefore.name() : __gridBefore,
        __divId.name() : __divId,
        __cnfStyle.name() : __cnfStyle
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TrPrBase', CT_TrPrBase)


# Complex type CT_TrPr with content type ELEMENT_ONLY
class CT_TrPr (CT_TrPrBase):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TrPr')
    # Base type is CT_TrPrBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPr_httpschemas_openxmlformats_orgwordprocessingml2006mainins', False)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Table Row')

    
    # Element gridAfter ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}gridAfter) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrPrBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPr_httpschemas_openxmlformats_orgwordprocessingml2006maindel', False)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Table Row')

    
    # Element tblCellSpacing ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblCellSpacing) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrPrBase
    
    # Element trHeight ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}trHeight) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrPrBase
    
    # Element wBefore ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}wBefore) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrPrBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}trPrChange uses Python identifier trPrChange
    __trPrChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'trPrChange'), 'trPrChange', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPr_httpschemas_openxmlformats_orgwordprocessingml2006maintrPrChange', False)

    
    trPrChange = property(__trPrChange.value, __trPrChange.set, None, u'Revision Information for Table Row Properties')

    
    # Element wAfter ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}wAfter) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrPrBase
    
    # Element jc ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}jc) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrPrBase
    
    # Element tblHeader ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblHeader) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrPrBase
    
    # Element hidden ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}hidden) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrPrBase
    
    # Element cantSplit ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}cantSplit) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrPrBase
    
    # Element gridBefore ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}gridBefore) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrPrBase
    
    # Element divId ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}divId) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrPrBase
    
    # Element cnfStyle ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}cnfStyle) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrPrBase

    _ElementMap = CT_TrPrBase._ElementMap.copy()
    _ElementMap.update({
        __ins.name() : __ins,
        __del.name() : __del,
        __trPrChange.name() : __trPrChange
    })
    _AttributeMap = CT_TrPrBase._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_TrPr', CT_TrPr)


# Complex type CT_EqArr with content type ELEMENT_ONLY
class CT_EqArr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_EqArr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_EqArr_httpschemas_openxmlformats_orgofficeDocument2006mathe', True)

    
    e = property(__e.value, __e.set, None, u'Element')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}eqArrPr uses Python identifier eqArrPr
    __eqArrPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'eqArrPr'), 'eqArrPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_EqArr_httpschemas_openxmlformats_orgofficeDocument2006matheqArrPr', False)

    
    eqArrPr = property(__eqArrPr.value, __eqArrPr.set, None, u'Array Properties')


    _ElementMap = {
        __e.name() : __e,
        __eqArrPr.name() : __eqArrPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_EqArr', CT_EqArr)


# Complex type CT_Recipients with content type ELEMENT_ONLY
class CT_Recipients (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Recipients')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}recipientData uses Python identifier recipientData
    __recipientData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'recipientData'), 'recipientData', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Recipients_httpschemas_openxmlformats_orgwordprocessingml2006mainrecipientData', True)

    
    recipientData = property(__recipientData.value, __recipientData.set, None, u'Data About Single Data Source Record')


    _ElementMap = {
        __recipientData.name() : __recipientData
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Recipients', CT_Recipients)


# Complex type CT_F with content type ELEMENT_ONLY
class CT_F (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_F')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}den uses Python identifier den
    __den = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'den'), 'den', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_F_httpschemas_openxmlformats_orgofficeDocument2006mathden', False)

    
    den = property(__den.value, __den.set, None, u'Denominator')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}fPr uses Python identifier fPr
    __fPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'fPr'), 'fPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_F_httpschemas_openxmlformats_orgofficeDocument2006mathfPr', False)

    
    fPr = property(__fPr.value, __fPr.set, None, u'Fraction Properties')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}num uses Python identifier num
    __num = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'num'), 'num', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_F_httpschemas_openxmlformats_orgofficeDocument2006mathnum', False)

    
    num = property(__num.value, __num.set, None, u'Numerator')


    _ElementMap = {
        __den.name() : __den,
        __fPr.name() : __fPr,
        __num.name() : __num
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_F', CT_F)


# Complex type CT_Bar with content type ELEMENT_ONLY
class CT_Bar (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_Bar')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Bar_httpschemas_openxmlformats_orgofficeDocument2006mathe', False)

    
    e = property(__e.value, __e.set, None, u'Base')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}barPr uses Python identifier barPr
    __barPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'barPr'), 'barPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Bar_httpschemas_openxmlformats_orgofficeDocument2006mathbarPr', False)

    
    barPr = property(__barPr.value, __barPr.set, None, u'Bar Properties')


    _ElementMap = {
        __e.name() : __e,
        __barPr.name() : __barPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_Bar', CT_Bar)


# Complex type CT_WritingStyle with content type EMPTY
class CT_WritingStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_WritingStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}checkStyle uses Python identifier checkStyle
    __checkStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'checkStyle'), 'checkStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WritingStyle_httpschemas_openxmlformats_orgwordprocessingml2006maincheckStyle', _s.ST_OnOff, required=True)
    
    checkStyle = property(__checkStyle.value, __checkStyle.set, None, u'Check Stylistic Rules With Grammar')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}appName uses Python identifier appName
    __appName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'appName'), 'appName', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WritingStyle_httpschemas_openxmlformats_orgwordprocessingml2006mainappName', _s.ST_String, required=True)
    
    appName = property(__appName.value, __appName.set, None, u'Application Name')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}nlCheck uses Python identifier nlCheck
    __nlCheck = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'nlCheck'), 'nlCheck', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WritingStyle_httpschemas_openxmlformats_orgwordprocessingml2006mainnlCheck', _s.ST_OnOff)
    
    nlCheck = property(__nlCheck.value, __nlCheck.set, None, u'Natural Language Grammar Check')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vendorID uses Python identifier vendorID
    __vendorID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vendorID'), 'vendorID', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WritingStyle_httpschemas_openxmlformats_orgwordprocessingml2006mainvendorID', _s.ST_String, required=True)
    
    vendorID = property(__vendorID.value, __vendorID.set, None, u'Grammatical Engine ID')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lang uses Python identifier lang
    __lang = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lang'), 'lang', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WritingStyle_httpschemas_openxmlformats_orgwordprocessingml2006mainlang', _s.ST_Lang, required=True)
    
    lang = property(__lang.value, __lang.set, None, u'Writing Style Language')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dllVersion uses Python identifier dllVersion
    __dllVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dllVersion'), 'dllVersion', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WritingStyle_httpschemas_openxmlformats_orgwordprocessingml2006maindllVersion', _s.ST_String, required=True)
    
    dllVersion = property(__dllVersion.value, __dllVersion.set, None, u'Grammatical Check Engine Version')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __checkStyle.name() : __checkStyle,
        __appName.name() : __appName,
        __nlCheck.name() : __nlCheck,
        __vendorID.name() : __vendorID,
        __lang.name() : __lang,
        __dllVersion.name() : __dllVersion
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_WritingStyle', CT_WritingStyle)


# Complex type CT_Pitch with content type EMPTY
class CT_Pitch (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Pitch')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Pitch_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_Pitch, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Pitch', CT_Pitch)


# Complex type CT_TblStylePr with content type ELEMENT_ONLY
class CT_TblStylePr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblStylePr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcPr uses Python identifier tcPr
    __tcPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tcPr'), 'tcPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblStylePr_httpschemas_openxmlformats_orgwordprocessingml2006maintcPr', False)

    
    tcPr = property(__tcPr.value, __tcPr.set, None, u'Table Style Conditional Formatting Table Cell Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pPr uses Python identifier pPr
    __pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr'), 'pPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblStylePr_httpschemas_openxmlformats_orgwordprocessingml2006mainpPr', False)

    
    pPr = property(__pPr.value, __pPr.set, None, u'Table Style Conditional Formatting Paragraph Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblStylePr_httpschemas_openxmlformats_orgwordprocessingml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Table Style Conditional Formatting Run Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblPr uses Python identifier tblPr
    __tblPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPr'), 'tblPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblStylePr_httpschemas_openxmlformats_orgwordprocessingml2006maintblPr', False)

    
    tblPr = property(__tblPr.value, __tblPr.set, None, u'Table Style Conditional Formatting Table Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}trPr uses Python identifier trPr
    __trPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'trPr'), 'trPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblStylePr_httpschemas_openxmlformats_orgwordprocessingml2006maintrPr', False)

    
    trPr = property(__trPr.value, __trPr.set, None, u'Table Style Conditional Formatting Table Row Properties')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblStylePr_httpschemas_openxmlformats_orgwordprocessingml2006maintype', ST_TblStyleOverrideType, required=True)
    
    type = property(__type.value, __type.set, None, u'Table Style Conditional Formatting Type')


    _ElementMap = {
        __tcPr.name() : __tcPr,
        __pPr.name() : __pPr,
        __rPr.name() : __rPr,
        __tblPr.name() : __tblPr,
        __trPr.name() : __trPr
    }
    _AttributeMap = {
        __type.name() : __type
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblStylePr', CT_TblStylePr)


# Complex type CT_TabStop with content type EMPTY
class CT_TabStop (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TabStop')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TabStop_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_TabJc, required=True)
    
    val = property(__val.value, __val.set, None, u'Tab Stop Type')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}leader uses Python identifier leader
    __leader = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'leader'), 'leader', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TabStop_httpschemas_openxmlformats_orgwordprocessingml2006mainleader', ST_TabTlc)
    
    leader = property(__leader.value, __leader.set, None, u'Tab Leader Character')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pos uses Python identifier pos
    __pos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pos'), 'pos', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TabStop_httpschemas_openxmlformats_orgwordprocessingml2006mainpos', ST_SignedTwipsMeasure, required=True)
    
    pos = property(__pos.value, __pos.set, None, u'Tab Stop Position')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __leader.name() : __leader,
        __pos.name() : __pos
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TabStop', CT_TabStop)


# Complex type CT_FType with content type EMPTY
class CT_FType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_FType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_FType_httpschemas_openxmlformats_orgofficeDocument2006mathval', ST_FType, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_FType', CT_FType)


# Complex type CT_FontFamily with content type EMPTY
class CT_FontFamily (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FontFamily')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FontFamily_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_FontFamily, required=True)
    
    val = property(__val.value, __val.set, None, u'Font Family Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FontFamily', CT_FontFamily)


# Complex type CT_SdtCell with content type ELEMENT_ONLY
class CT_SdtCell (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtCell')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdtContent uses Python identifier sdtContent
    __sdtContent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtContent'), 'sdtContent', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtCell_httpschemas_openxmlformats_orgwordprocessingml2006mainsdtContent', False)

    
    sdtContent = property(__sdtContent.value, __sdtContent.set, None, u'Cell-Level Structured Document Tag Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdtPr uses Python identifier sdtPr
    __sdtPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtPr'), 'sdtPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtCell_httpschemas_openxmlformats_orgwordprocessingml2006mainsdtPr', False)

    
    sdtPr = property(__sdtPr.value, __sdtPr.set, None, u'Structured Document Tag Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdtEndPr uses Python identifier sdtEndPr
    __sdtEndPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtEndPr'), 'sdtEndPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtCell_httpschemas_openxmlformats_orgwordprocessingml2006mainsdtEndPr', False)

    
    sdtEndPr = property(__sdtEndPr.value, __sdtEndPr.set, None, u'Structured Document Tag End Character Properties')


    _ElementMap = {
        __sdtContent.name() : __sdtContent,
        __sdtPr.name() : __sdtPr,
        __sdtEndPr.name() : __sdtEndPr
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtCell', CT_SdtCell)


# Complex type CT_PageBorders with content type ELEMENT_ONLY
class CT_PageBorders (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_PageBorders')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}right uses Python identifier right
    __right = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), 'right', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageBorders_httpschemas_openxmlformats_orgwordprocessingml2006mainright', False)

    
    right = property(__right.value, __right.set, None, u'Right Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}top uses Python identifier top
    __top = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'top'), 'top', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageBorders_httpschemas_openxmlformats_orgwordprocessingml2006maintop', False)

    
    top = property(__top.value, __top.set, None, u'Top Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}left uses Python identifier left
    __left = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), 'left', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageBorders_httpschemas_openxmlformats_orgwordprocessingml2006mainleft', False)

    
    left = property(__left.value, __left.set, None, u'Left Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bottom uses Python identifier bottom
    __bottom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom'), 'bottom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageBorders_httpschemas_openxmlformats_orgwordprocessingml2006mainbottom', False)

    
    bottom = property(__bottom.value, __bottom.set, None, u'Bottom Border')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}display uses Python identifier display
    __display = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'display'), 'display', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageBorders_httpschemas_openxmlformats_orgwordprocessingml2006maindisplay', ST_PageBorderDisplay)
    
    display = property(__display.value, __display.set, None, u'Pages to Display Page Borders')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}offsetFrom uses Python identifier offsetFrom
    __offsetFrom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'offsetFrom'), 'offsetFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageBorders_httpschemas_openxmlformats_orgwordprocessingml2006mainoffsetFrom', ST_PageBorderOffset)
    
    offsetFrom = property(__offsetFrom.value, __offsetFrom.set, None, u'Page Border Positioning')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}zOrder uses Python identifier zOrder
    __zOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'zOrder'), 'zOrder', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageBorders_httpschemas_openxmlformats_orgwordprocessingml2006mainzOrder', ST_PageBorderZOrder)
    
    zOrder = property(__zOrder.value, __zOrder.set, None, u'Z-Ordering of Page Border')


    _ElementMap = {
        __right.name() : __right,
        __top.name() : __top,
        __left.name() : __left,
        __bottom.name() : __bottom
    }
    _AttributeMap = {
        __display.name() : __display,
        __offsetFrom.name() : __offsetFrom,
        __zOrder.name() : __zOrder
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_PageBorders', CT_PageBorders)


# Complex type CT_Div with content type ELEMENT_ONLY
class CT_Div (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Div')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}divBdr uses Python identifier divBdr
    __divBdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'divBdr'), 'divBdr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Div_httpschemas_openxmlformats_orgwordprocessingml2006maindivBdr', False)

    
    divBdr = property(__divBdr.value, __divBdr.set, None, u'Set of Borders for HTML div')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}marBottom uses Python identifier marBottom
    __marBottom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'marBottom'), 'marBottom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Div_httpschemas_openxmlformats_orgwordprocessingml2006mainmarBottom', False)

    
    marBottom = property(__marBottom.value, __marBottom.set, None, u'Bottom Margin for HTML div')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bodyDiv uses Python identifier bodyDiv
    __bodyDiv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bodyDiv'), 'bodyDiv', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Div_httpschemas_openxmlformats_orgwordprocessingml2006mainbodyDiv', False)

    
    bodyDiv = property(__bodyDiv.value, __bodyDiv.set, None, u'Data for HTML body Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}blockQuote uses Python identifier blockQuote
    __blockQuote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'blockQuote'), 'blockQuote', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Div_httpschemas_openxmlformats_orgwordprocessingml2006mainblockQuote', False)

    
    blockQuote = property(__blockQuote.value, __blockQuote.set, None, u'Data for HTML blockquote Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}marLeft uses Python identifier marLeft
    __marLeft = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'marLeft'), 'marLeft', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Div_httpschemas_openxmlformats_orgwordprocessingml2006mainmarLeft', False)

    
    marLeft = property(__marLeft.value, __marLeft.set, None, u'Left Margin for HTML div')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}divsChild uses Python identifier divsChild
    __divsChild = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'divsChild'), 'divsChild', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Div_httpschemas_openxmlformats_orgwordprocessingml2006maindivsChild', True)

    
    divsChild = property(__divsChild.value, __divsChild.set, None, u'Child div Elements Contained within Current div')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}marRight uses Python identifier marRight
    __marRight = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'marRight'), 'marRight', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Div_httpschemas_openxmlformats_orgwordprocessingml2006mainmarRight', False)

    
    marRight = property(__marRight.value, __marRight.set, None, u'Right Margin for HTML div')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}marTop uses Python identifier marTop
    __marTop = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'marTop'), 'marTop', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Div_httpschemas_openxmlformats_orgwordprocessingml2006mainmarTop', False)

    
    marTop = property(__marTop.value, __marTop.set, None, u'Top Margin for HTML div')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Div_httpschemas_openxmlformats_orgwordprocessingml2006mainid', ST_DecimalNumber, required=True)
    
    id = property(__id.value, __id.set, None, u'div Data ID')


    _ElementMap = {
        __divBdr.name() : __divBdr,
        __marBottom.name() : __marBottom,
        __bodyDiv.name() : __bodyDiv,
        __blockQuote.name() : __blockQuote,
        __marLeft.name() : __marLeft,
        __divsChild.name() : __divsChild,
        __marRight.name() : __marRight,
        __marTop.name() : __marTop
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Div', CT_Div)


# Complex type CT_VMerge with content type EMPTY
class CT_VMerge (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_VMerge')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_VMerge_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_Merge)
    
    val = property(__val.value, __val.set, None, u'Vertical Merge Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_VMerge', CT_VMerge)


# Complex type CT_Frameset with content type ELEMENT_ONLY
class CT_Frameset (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Frameset')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}frameLayout uses Python identifier frameLayout
    __frameLayout = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'frameLayout'), 'frameLayout', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frameset_httpschemas_openxmlformats_orgwordprocessingml2006mainframeLayout', False)

    
    frameLayout = property(__frameLayout.value, __frameLayout.set, None, u'Frameset Layout')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sz uses Python identifier sz
    __sz = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sz'), 'sz', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frameset_httpschemas_openxmlformats_orgwordprocessingml2006mainsz', False)

    
    sz = property(__sz.value, __sz.set, None, u'Nested Frameset Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}frame uses Python identifier frame
    __frame = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'frame'), 'frame', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frameset_httpschemas_openxmlformats_orgwordprocessingml2006mainframe', True)

    
    frame = property(__frame.value, __frame.set, None, u'Single Frame Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}framesetSplitbar uses Python identifier framesetSplitbar
    __framesetSplitbar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'framesetSplitbar'), 'framesetSplitbar', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frameset_httpschemas_openxmlformats_orgwordprocessingml2006mainframesetSplitbar', False)

    
    framesetSplitbar = property(__framesetSplitbar.value, __framesetSplitbar.set, None, u'Frameset Splitter Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}frameset uses Python identifier frameset
    __frameset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'frameset'), 'frameset', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frameset_httpschemas_openxmlformats_orgwordprocessingml2006mainframeset', True)

    
    frameset = property(__frameset.value, __frameset.set, None, u'Nested Frameset Definition')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}title uses Python identifier title
    __title = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'title'), 'title', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Frameset_httpschemas_openxmlformats_orgwordprocessingml2006maintitle', False)

    
    title = property(__title.value, __title.set, None, None)


    _ElementMap = {
        __frameLayout.name() : __frameLayout,
        __sz.name() : __sz,
        __frame.name() : __frame,
        __framesetSplitbar.name() : __framesetSplitbar,
        __frameset.name() : __frameset,
        __title.name() : __title
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Frameset', CT_Frameset)


# Complex type CT_SSub with content type ELEMENT_ONLY
class CT_SSub (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_SSub')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sub uses Python identifier sub
    __sub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sub'), 'sub', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SSub_httpschemas_openxmlformats_orgofficeDocument2006mathsub', False)

    
    sub = property(__sub.value, __sub.set, None, u'Subscript (Subscript function)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sSubPr uses Python identifier sSubPr
    __sSubPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sSubPr'), 'sSubPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SSub_httpschemas_openxmlformats_orgofficeDocument2006mathsSubPr', False)

    
    sSubPr = property(__sSubPr.value, __sSubPr.set, None, u'Subscript Properties')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SSub_httpschemas_openxmlformats_orgofficeDocument2006mathe', False)

    
    e = property(__e.value, __e.set, None, u'Base')


    _ElementMap = {
        __sub.name() : __sub,
        __sSubPr.name() : __sSubPr,
        __e.name() : __e
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_SSub', CT_SSub)


# Complex type CT_TblPrExChange with content type ELEMENT_ONLY
class CT_TblPrExChange (CT_TrackChange):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblPrExChange')
    # Base type is CT_TrackChange
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblPrEx uses Python identifier tblPrEx
    __tblPrEx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPrEx'), 'tblPrEx', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrExChange_httpschemas_openxmlformats_orgwordprocessingml2006maintblPrEx', False)

    
    tblPrEx = property(__tblPrEx.value, __tblPrEx.set, None, u'Previous Table-Level Property Exceptions')

    
    # Attribute date inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute author inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange

    _ElementMap = CT_TrackChange._ElementMap.copy()
    _ElementMap.update({
        __tblPrEx.name() : __tblPrEx
    })
    _AttributeMap = CT_TrackChange._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblPrExChange', CT_TblPrExChange)


# Complex type CT_BorderBoxPr with content type ELEMENT_ONLY
class CT_BorderBoxPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_BorderBoxPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}strikeH uses Python identifier strikeH
    __strikeH = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'strikeH'), 'strikeH', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BorderBoxPr_httpschemas_openxmlformats_orgofficeDocument2006mathstrikeH', False)

    
    strikeH = property(__strikeH.value, __strikeH.set, None, u'Border Box Strikethrough Horizontal')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}strikeV uses Python identifier strikeV
    __strikeV = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'strikeV'), 'strikeV', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BorderBoxPr_httpschemas_openxmlformats_orgofficeDocument2006mathstrikeV', False)

    
    strikeV = property(__strikeV.value, __strikeV.set, None, u'Border Box Strikethrough Vertical')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}strikeBLTR uses Python identifier strikeBLTR
    __strikeBLTR = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'strikeBLTR'), 'strikeBLTR', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BorderBoxPr_httpschemas_openxmlformats_orgofficeDocument2006mathstrikeBLTR', False)

    
    strikeBLTR = property(__strikeBLTR.value, __strikeBLTR.set, None, u'Border Box Strikethrough Bottom-Left to Top-Right')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}hideTop uses Python identifier hideTop
    __hideTop = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'hideTop'), 'hideTop', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BorderBoxPr_httpschemas_openxmlformats_orgofficeDocument2006mathhideTop', False)

    
    hideTop = property(__hideTop.value, __hideTop.set, None, u'Hide Top Edge')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}strikeTLBR uses Python identifier strikeTLBR
    __strikeTLBR = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'strikeTLBR'), 'strikeTLBR', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BorderBoxPr_httpschemas_openxmlformats_orgofficeDocument2006mathstrikeTLBR', False)

    
    strikeTLBR = property(__strikeTLBR.value, __strikeTLBR.set, None, u'Border Box Strikethrough Top-Left to Bottom-Right')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}hideLeft uses Python identifier hideLeft
    __hideLeft = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'hideLeft'), 'hideLeft', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BorderBoxPr_httpschemas_openxmlformats_orgofficeDocument2006mathhideLeft', False)

    
    hideLeft = property(__hideLeft.value, __hideLeft.set, None, u'Hide Left Edge')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}hideBot uses Python identifier hideBot
    __hideBot = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'hideBot'), 'hideBot', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BorderBoxPr_httpschemas_openxmlformats_orgofficeDocument2006mathhideBot', False)

    
    hideBot = property(__hideBot.value, __hideBot.set, None, u'Hide Bottom Edge')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BorderBoxPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}hideRight uses Python identifier hideRight
    __hideRight = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'hideRight'), 'hideRight', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BorderBoxPr_httpschemas_openxmlformats_orgofficeDocument2006mathhideRight', False)

    
    hideRight = property(__hideRight.value, __hideRight.set, None, u'Hide Right Edge')


    _ElementMap = {
        __strikeH.name() : __strikeH,
        __strikeV.name() : __strikeV,
        __strikeBLTR.name() : __strikeBLTR,
        __hideTop.name() : __hideTop,
        __strikeTLBR.name() : __strikeTLBR,
        __hideLeft.name() : __hideLeft,
        __hideBot.name() : __hideBot,
        __ctrlPr.name() : __ctrlPr,
        __hideRight.name() : __hideRight
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_BorderBoxPr', CT_BorderBoxPr)


# Complex type CT_Spacing with content type EMPTY
class CT_Spacing (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Spacing')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}beforeLines uses Python identifier beforeLines
    __beforeLines = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'beforeLines'), 'beforeLines', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Spacing_httpschemas_openxmlformats_orgwordprocessingml2006mainbeforeLines', ST_DecimalNumber)
    
    beforeLines = property(__beforeLines.value, __beforeLines.set, None, u'Spacing Above Paragraph IN Line Units')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}after uses Python identifier after
    __after = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'after'), 'after', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Spacing_httpschemas_openxmlformats_orgwordprocessingml2006mainafter', _s.ST_TwipsMeasure)
    
    after = property(__after.value, __after.set, None, u'Spacing Below Paragraph')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lineRule uses Python identifier lineRule
    __lineRule = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lineRule'), 'lineRule', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Spacing_httpschemas_openxmlformats_orgwordprocessingml2006mainlineRule', ST_LineSpacingRule)
    
    lineRule = property(__lineRule.value, __lineRule.set, None, u'Spacing Between Lines')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}beforeAutospacing uses Python identifier beforeAutospacing
    __beforeAutospacing = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'beforeAutospacing'), 'beforeAutospacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Spacing_httpschemas_openxmlformats_orgwordprocessingml2006mainbeforeAutospacing', _s.ST_OnOff)
    
    beforeAutospacing = property(__beforeAutospacing.value, __beforeAutospacing.set, None, u'Automatically Determine Spacing Above Paragraph')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}afterLines uses Python identifier afterLines
    __afterLines = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'afterLines'), 'afterLines', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Spacing_httpschemas_openxmlformats_orgwordprocessingml2006mainafterLines', ST_DecimalNumber)
    
    afterLines = property(__afterLines.value, __afterLines.set, None, u'Spacing Below Paragraph in Line Units')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}afterAutospacing uses Python identifier afterAutospacing
    __afterAutospacing = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'afterAutospacing'), 'afterAutospacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Spacing_httpschemas_openxmlformats_orgwordprocessingml2006mainafterAutospacing', _s.ST_OnOff)
    
    afterAutospacing = property(__afterAutospacing.value, __afterAutospacing.set, None, u'Automatically Determine Spacing Below Paragraph')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}before uses Python identifier before
    __before = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'before'), 'before', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Spacing_httpschemas_openxmlformats_orgwordprocessingml2006mainbefore', _s.ST_TwipsMeasure)
    
    before = property(__before.value, __before.set, None, u'Spacing Above Paragraph')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}line uses Python identifier line
    __line = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'line'), 'line', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Spacing_httpschemas_openxmlformats_orgwordprocessingml2006mainline', ST_SignedTwipsMeasure)
    
    line = property(__line.value, __line.set, None, u'Spacing Between Lines in Paragraph')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __beforeLines.name() : __beforeLines,
        __after.name() : __after,
        __lineRule.name() : __lineRule,
        __beforeAutospacing.name() : __beforeAutospacing,
        __afterLines.name() : __afterLines,
        __afterAutospacing.name() : __afterAutospacing,
        __before.name() : __before,
        __line.name() : __line
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Spacing', CT_Spacing)


# Complex type CT_DocPart with content type ELEMENT_ONLY
class CT_DocPart (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocPart')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docPartBody uses Python identifier docPartBody
    __docPartBody = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartBody'), 'docPartBody', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPart_httpschemas_openxmlformats_orgwordprocessingml2006maindocPartBody', False)

    
    docPartBody = property(__docPartBody.value, __docPartBody.set, None, u'Contents of Glossary Document Entry')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docPartPr uses Python identifier docPartPr
    __docPartPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartPr'), 'docPartPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPart_httpschemas_openxmlformats_orgwordprocessingml2006maindocPartPr', False)

    
    docPartPr = property(__docPartPr.value, __docPartPr.set, None, u'Glossary Document Entry Properties')


    _ElementMap = {
        __docPartBody.name() : __docPartBody,
        __docPartPr.name() : __docPartPr
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocPart', CT_DocPart)


# Complex type CT_TextboxTightWrap with content type EMPTY
class CT_TextboxTightWrap (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TextboxTightWrap')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TextboxTightWrap_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_TextboxTightWrap, required=True)
    
    val = property(__val.value, __val.set, None, u'Lines to Tight Wrap to Paragraph Extents')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TextboxTightWrap', CT_TextboxTightWrap)


# Complex type CT_ObjectEmbed with content type EMPTY
class CT_ObjectEmbed (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_ObjectEmbed')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}progId uses Python identifier progId
    __progId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'progId'), 'progId', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ObjectEmbed_httpschemas_openxmlformats_orgwordprocessingml2006mainprogId', _s.ST_String)
    
    progId = property(__progId.value, __progId.set, None, u'Object Application')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fieldCodes uses Python identifier fieldCodes
    __fieldCodes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fieldCodes'), 'fieldCodes', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ObjectEmbed_httpschemas_openxmlformats_orgwordprocessingml2006mainfieldCodes', _s.ST_String)
    
    fieldCodes = property(__fieldCodes.value, __fieldCodes.set, None, u'Field Switches')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shapeId uses Python identifier shapeId
    __shapeId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shapeId'), 'shapeId', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ObjectEmbed_httpschemas_openxmlformats_orgwordprocessingml2006mainshapeId', _s.ST_String)
    
    shapeId = property(__shapeId.value, __shapeId.set, None, u'Object Shape')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}drawAspect uses Python identifier drawAspect
    __drawAspect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'drawAspect'), 'drawAspect', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ObjectEmbed_httpschemas_openxmlformats_orgwordprocessingml2006maindrawAspect', ST_ObjectDrawAspect)
    
    drawAspect = property(__drawAspect.value, __drawAspect.set, None, u'Object Representation')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ObjectEmbed_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __progId.name() : __progId,
        __fieldCodes.name() : __fieldCodes,
        __shapeId.name() : __shapeId,
        __drawAspect.name() : __drawAspect,
        __id.name() : __id
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_ObjectEmbed', CT_ObjectEmbed)


# Complex type CT_FtnEdnSepRef with content type EMPTY
class CT_FtnEdnSepRef (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FtnEdnSepRef')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdnSepRef_httpschemas_openxmlformats_orgwordprocessingml2006mainid', ST_DecimalNumber, required=True)
    
    id = property(__id.value, __id.set, None, u'Footnote/Endnote ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FtnEdnSepRef', CT_FtnEdnSepRef)


# Complex type CT_TrPrChange with content type ELEMENT_ONLY
class CT_TrPrChange (CT_TrackChange):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TrPrChange')
    # Base type is CT_TrackChange
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}trPr uses Python identifier trPr
    __trPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'trPr'), 'trPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrPrChange_httpschemas_openxmlformats_orgwordprocessingml2006maintrPr', False)

    
    trPr = property(__trPr.value, __trPr.set, None, u'Previous Table Row Properties')

    
    # Attribute date inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute author inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange

    _ElementMap = CT_TrackChange._ElementMap.copy()
    _ElementMap.update({
        __trPr.name() : __trPr
    })
    _AttributeMap = CT_TrackChange._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_TrPrChange', CT_TrPrChange)


# Complex type CT_SPre with content type ELEMENT_ONLY
class CT_SPre (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_SPre')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SPre_httpschemas_openxmlformats_orgofficeDocument2006mathe', False)

    
    e = property(__e.value, __e.set, None, u'Base')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sPrePr uses Python identifier sPrePr
    __sPrePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sPrePr'), 'sPrePr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SPre_httpschemas_openxmlformats_orgofficeDocument2006mathsPrePr', False)

    
    sPrePr = property(__sPrePr.value, __sPrePr.set, None, u'Pre-Sub-Superscript Properties')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sup uses Python identifier sup
    __sup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sup'), 'sup', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SPre_httpschemas_openxmlformats_orgofficeDocument2006mathsup', False)

    
    sup = property(__sup.value, __sup.set, None, u'Superscript(Pre-Sub-Superscript function)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sub uses Python identifier sub
    __sub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sub'), 'sub', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SPre_httpschemas_openxmlformats_orgofficeDocument2006mathsub', False)

    
    sub = property(__sub.value, __sub.set, None, u'Subscript (Pre-Sub-Superscript)')


    _ElementMap = {
        __e.name() : __e,
        __sPrePr.name() : __sPrePr,
        __sup.name() : __sup,
        __sub.name() : __sub
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_SPre', CT_SPre)


# Complex type CT_FontRel with content type EMPTY
class CT_FontRel (CT_Rel):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FontRel')
    # Base type is CT_Rel
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fontKey uses Python identifier fontKey
    __fontKey = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fontKey'), 'fontKey', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FontRel_httpschemas_openxmlformats_orgwordprocessingml2006mainfontKey', _s.ST_Guid)
    
    fontKey = property(__fontKey.value, __fontKey.set, None, u'Embedded Font Obfuscation Key')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}subsetted uses Python identifier subsetted
    __subsetted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'subsetted'), 'subsetted', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FontRel_httpschemas_openxmlformats_orgwordprocessingml2006mainsubsetted', _s.ST_OnOff)
    
    subsetted = property(__subsetted.value, __subsetted.set, None, u'Embedded Font Is Subsetted')

    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Rel

    _ElementMap = CT_Rel._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_Rel._AttributeMap.copy()
    _AttributeMap.update({
        __fontKey.name() : __fontKey,
        __subsetted.name() : __subsetted
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_FontRel', CT_FontRel)


# Complex type CT_Comments with content type ELEMENT_ONLY
class CT_Comments (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Comments')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}comment uses Python identifier comment
    __comment = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'comment'), 'comment', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comments_httpschemas_openxmlformats_orgwordprocessingml2006maincomment', True)

    
    comment = property(__comment.value, __comment.set, None, u'Comment Content')


    _ElementMap = {
        __comment.name() : __comment
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Comments', CT_Comments)


# Complex type CT_MailMergeDocType with content type EMPTY
class CT_MailMergeDocType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_MailMergeDocType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMergeDocType_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_MailMergeDocType, required=True)
    
    val = property(__val.value, __val.set, None, u'Mail Merge Source Document Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_MailMergeDocType', CT_MailMergeDocType)


# Complex type CT_FldChar with content type ELEMENT_ONLY
class CT_FldChar (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FldChar')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fldData uses Python identifier fldData
    __fldData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fldData'), 'fldData', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FldChar_httpschemas_openxmlformats_orgwordprocessingml2006mainfldData', False)

    
    fldData = property(__fldData.value, __fldData.set, None, u'Custom Field Data')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ffData uses Python identifier ffData
    __ffData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ffData'), 'ffData', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FldChar_httpschemas_openxmlformats_orgwordprocessingml2006mainffData', False)

    
    ffData = property(__ffData.value, __ffData.set, None, u'Form Field Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numberingChange uses Python identifier numberingChange
    __numberingChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numberingChange'), 'numberingChange', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FldChar_httpschemas_openxmlformats_orgwordprocessingml2006mainnumberingChange', False)

    
    numberingChange = property(__numberingChange.value, __numberingChange.set, None, u'Previous Numbering Field Properties')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fldCharType uses Python identifier fldCharType
    __fldCharType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fldCharType'), 'fldCharType', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FldChar_httpschemas_openxmlformats_orgwordprocessingml2006mainfldCharType', ST_FldCharType, required=True)
    
    fldCharType = property(__fldCharType.value, __fldCharType.set, None, u'Field Character Type')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fldLock uses Python identifier fldLock
    __fldLock = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fldLock'), 'fldLock', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FldChar_httpschemas_openxmlformats_orgwordprocessingml2006mainfldLock', _s.ST_OnOff)
    
    fldLock = property(__fldLock.value, __fldLock.set, None, u'Field Should Not Be Recalculated')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dirty uses Python identifier dirty
    __dirty = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dirty'), 'dirty', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FldChar_httpschemas_openxmlformats_orgwordprocessingml2006maindirty', _s.ST_OnOff)
    
    dirty = property(__dirty.value, __dirty.set, None, u'Field Result Invalidated')


    _ElementMap = {
        __fldData.name() : __fldData,
        __ffData.name() : __ffData,
        __numberingChange.name() : __numberingChange
    }
    _AttributeMap = {
        __fldCharType.name() : __fldCharType,
        __fldLock.name() : __fldLock,
        __dirty.name() : __dirty
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FldChar', CT_FldChar)


# Complex type CT_TrackChangesView with content type EMPTY
class CT_TrackChangesView (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TrackChangesView')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}comments uses Python identifier comments
    __comments = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'comments'), 'comments', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrackChangesView_httpschemas_openxmlformats_orgwordprocessingml2006maincomments', _s.ST_OnOff)
    
    comments = property(__comments.value, __comments.set, None, u'Display Comments')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}formatting uses Python identifier formatting
    __formatting = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'formatting'), 'formatting', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrackChangesView_httpschemas_openxmlformats_orgwordprocessingml2006mainformatting', _s.ST_OnOff)
    
    formatting = property(__formatting.value, __formatting.set, None, u'Display Formatting Revisions')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}markup uses Python identifier markup
    __markup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'markup'), 'markup', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrackChangesView_httpschemas_openxmlformats_orgwordprocessingml2006mainmarkup', _s.ST_OnOff)
    
    markup = property(__markup.value, __markup.set, None, u'Display Visual Indicator Of Markup Area')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}inkAnnotations uses Python identifier inkAnnotations
    __inkAnnotations = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'inkAnnotations'), 'inkAnnotations', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrackChangesView_httpschemas_openxmlformats_orgwordprocessingml2006maininkAnnotations', _s.ST_OnOff)
    
    inkAnnotations = property(__inkAnnotations.value, __inkAnnotations.set, None, u'Display Ink Annotations')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}insDel uses Python identifier insDel
    __insDel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'insDel'), 'insDel', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrackChangesView_httpschemas_openxmlformats_orgwordprocessingml2006maininsDel', _s.ST_OnOff)
    
    insDel = property(__insDel.value, __insDel.set, None, u'Display Content Revisions')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __comments.name() : __comments,
        __formatting.name() : __formatting,
        __markup.name() : __markup,
        __inkAnnotations.name() : __inkAnnotations,
        __insDel.name() : __insDel
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TrackChangesView', CT_TrackChangesView)


# Complex type CT_LevelSuffix with content type EMPTY
class CT_LevelSuffix (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_LevelSuffix')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LevelSuffix_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_LevelSuffix, required=True)
    
    val = property(__val.value, __val.set, None, u'Character Type Between Numbering and Text')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_LevelSuffix', CT_LevelSuffix)


# Complex type CT_XAlign with content type EMPTY
class CT_XAlign (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_XAlign')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_XAlign_httpschemas_openxmlformats_orgofficeDocument2006mathval', _s.ST_XAlign, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_XAlign', CT_XAlign)


# Complex type CT_DocGrid with content type EMPTY
class CT_DocGrid (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocGrid')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}linePitch uses Python identifier linePitch
    __linePitch = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'linePitch'), 'linePitch', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocGrid_httpschemas_openxmlformats_orgwordprocessingml2006mainlinePitch', ST_DecimalNumber)
    
    linePitch = property(__linePitch.value, __linePitch.set, None, u'Document Grid Line Pitch')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}charSpace uses Python identifier charSpace
    __charSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'charSpace'), 'charSpace', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocGrid_httpschemas_openxmlformats_orgwordprocessingml2006maincharSpace', ST_DecimalNumber)
    
    charSpace = property(__charSpace.value, __charSpace.set, None, u'Document Grid Character Pitch')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocGrid_httpschemas_openxmlformats_orgwordprocessingml2006maintype', ST_DocGrid)
    
    type = property(__type.value, __type.set, None, u'Document Grid Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __linePitch.name() : __linePitch,
        __charSpace.name() : __charSpace,
        __type.name() : __type
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocGrid', CT_DocGrid)


# Complex type CT_FFTextInput with content type ELEMENT_ONLY
class CT_FFTextInput (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FFTextInput')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}format uses Python identifier format
    __format = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'format'), 'format', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFTextInput_httpschemas_openxmlformats_orgwordprocessingml2006mainformat', False)

    
    format = property(__format.value, __format.set, None, u'Text Box Form Field Formatting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFTextInput_httpschemas_openxmlformats_orgwordprocessingml2006maintype', False)

    
    type = property(__type.value, __type.set, None, u'Text Box Form Field Type')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}default uses Python identifier default
    __default = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'default'), 'default', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFTextInput_httpschemas_openxmlformats_orgwordprocessingml2006maindefault', False)

    
    default = property(__default.value, __default.set, None, u'Default Text Box Form Field String')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}maxLength uses Python identifier maxLength
    __maxLength = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'maxLength'), 'maxLength', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFTextInput_httpschemas_openxmlformats_orgwordprocessingml2006mainmaxLength', False)

    
    maxLength = property(__maxLength.value, __maxLength.set, None, u'Text Box Form Field Maximum Length')


    _ElementMap = {
        __format.name() : __format,
        __type.name() : __type,
        __default.name() : __default,
        __maxLength.name() : __maxLength
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FFTextInput', CT_FFTextInput)


# Complex type CT_Font with content type ELEMENT_ONLY
class CT_Font (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Font')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}embedBoldItalic uses Python identifier embedBoldItalic
    __embedBoldItalic = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'embedBoldItalic'), 'embedBoldItalic', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Font_httpschemas_openxmlformats_orgwordprocessingml2006mainembedBoldItalic', False)

    
    embedBoldItalic = property(__embedBoldItalic.value, __embedBoldItalic.set, None, u'Bold Italic Font Style Embedding')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}notTrueType uses Python identifier notTrueType
    __notTrueType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'notTrueType'), 'notTrueType', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Font_httpschemas_openxmlformats_orgwordprocessingml2006mainnotTrueType', False)

    
    notTrueType = property(__notTrueType.value, __notTrueType.set, None, u'Raster or Vector Font')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pitch uses Python identifier pitch
    __pitch = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pitch'), 'pitch', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Font_httpschemas_openxmlformats_orgwordprocessingml2006mainpitch', False)

    
    pitch = property(__pitch.value, __pitch.set, None, u'Font Pitch')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}altName uses Python identifier altName
    __altName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'altName'), 'altName', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Font_httpschemas_openxmlformats_orgwordprocessingml2006mainaltName', False)

    
    altName = property(__altName.value, __altName.set, None, u'Alternate Names for Font')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}embedItalic uses Python identifier embedItalic
    __embedItalic = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'embedItalic'), 'embedItalic', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Font_httpschemas_openxmlformats_orgwordprocessingml2006mainembedItalic', False)

    
    embedItalic = property(__embedItalic.value, __embedItalic.set, None, u'Italic Font Style Embedding')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}panose1 uses Python identifier panose1
    __panose1 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'panose1'), 'panose1', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Font_httpschemas_openxmlformats_orgwordprocessingml2006mainpanose1', False)

    
    panose1 = property(__panose1.value, __panose1.set, None, u'Panose-1 Typeface Classification Number')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}embedRegular uses Python identifier embedRegular
    __embedRegular = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'embedRegular'), 'embedRegular', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Font_httpschemas_openxmlformats_orgwordprocessingml2006mainembedRegular', False)

    
    embedRegular = property(__embedRegular.value, __embedRegular.set, None, u'Regular Font Style Embedding')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}charset uses Python identifier charset
    __charset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'charset'), 'charset', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Font_httpschemas_openxmlformats_orgwordprocessingml2006maincharset', False)

    
    charset = property(__charset.value, __charset.set, None, u'Character Set Supported By Font')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sig uses Python identifier sig
    __sig = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sig'), 'sig', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Font_httpschemas_openxmlformats_orgwordprocessingml2006mainsig', False)

    
    sig = property(__sig.value, __sig.set, None, u'Supported Unicode Subranges and Code Pages')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}embedBold uses Python identifier embedBold
    __embedBold = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'embedBold'), 'embedBold', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Font_httpschemas_openxmlformats_orgwordprocessingml2006mainembedBold', False)

    
    embedBold = property(__embedBold.value, __embedBold.set, None, u'Bold Style Font Style Embedding')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}family uses Python identifier family
    __family = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'family'), 'family', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Font_httpschemas_openxmlformats_orgwordprocessingml2006mainfamily', False)

    
    family = property(__family.value, __family.set, None, u'Font Family')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Font_httpschemas_openxmlformats_orgwordprocessingml2006mainname', _s.ST_String, required=True)
    
    name = property(__name.value, __name.set, None, u'Primary Font Name')


    _ElementMap = {
        __embedBoldItalic.name() : __embedBoldItalic,
        __notTrueType.name() : __notTrueType,
        __pitch.name() : __pitch,
        __altName.name() : __altName,
        __embedItalic.name() : __embedItalic,
        __panose1.name() : __panose1,
        __embedRegular.name() : __embedRegular,
        __charset.name() : __charset,
        __sig.name() : __sig,
        __embedBold.name() : __embedBold,
        __family.name() : __family
    }
    _AttributeMap = {
        __name.name() : __name
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Font', CT_Font)


# Complex type CT_TcMar with content type ELEMENT_ONLY
class CT_TcMar (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TcMar')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}right uses Python identifier right
    __right = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), 'right', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcMar_httpschemas_openxmlformats_orgwordprocessingml2006mainright', False)

    
    right = property(__right.value, __right.set, None, u'Table Cell Trailing Margin Exception')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}top uses Python identifier top
    __top = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'top'), 'top', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcMar_httpschemas_openxmlformats_orgwordprocessingml2006maintop', False)

    
    top = property(__top.value, __top.set, None, u'Table Cell Top Margin Exception')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}end uses Python identifier end
    __end = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'end'), 'end', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcMar_httpschemas_openxmlformats_orgwordprocessingml2006mainend', False)

    
    end = property(__end.value, __end.set, None, u'Table Cell Trailing Margin Exception')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}start uses Python identifier start
    __start = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'start'), 'start', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcMar_httpschemas_openxmlformats_orgwordprocessingml2006mainstart', False)

    
    start = property(__start.value, __start.set, None, u'Table Cell Leading Margin Exception')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}left uses Python identifier left
    __left = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), 'left', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcMar_httpschemas_openxmlformats_orgwordprocessingml2006mainleft', False)

    
    left = property(__left.value, __left.set, None, u'Table Cell Leading Margin Exception')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bottom uses Python identifier bottom
    __bottom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom'), 'bottom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TcMar_httpschemas_openxmlformats_orgwordprocessingml2006mainbottom', False)

    
    bottom = property(__bottom.value, __bottom.set, None, u'Table Cell Bottom Margin Exception')


    _ElementMap = {
        __right.name() : __right,
        __top.name() : __top,
        __end.name() : __end,
        __start.name() : __start,
        __left.name() : __left,
        __bottom.name() : __bottom
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TcMar', CT_TcMar)


# Complex type CT_MacroName with content type EMPTY
class CT_MacroName (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_MacroName')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MacroName_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_MacroName, required=True)
    
    val = property(__val.value, __val.set, None, u'Name of Script Function')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_MacroName', CT_MacroName)


# Complex type CT_LimLow with content type ELEMENT_ONLY
class CT_LimLow (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_LimLow')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}lim uses Python identifier lim
    __lim = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'lim'), 'lim', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_LimLow_httpschemas_openxmlformats_orgofficeDocument2006mathlim', False)

    
    lim = property(__lim.value, __lim.set, None, u'Limit')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}limLowPr uses Python identifier limLowPr
    __limLowPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'limLowPr'), 'limLowPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_LimLow_httpschemas_openxmlformats_orgofficeDocument2006mathlimLowPr', False)

    
    limLowPr = property(__limLowPr.value, __limLowPr.set, None, u'Lower-Limit Properties')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_LimLow_httpschemas_openxmlformats_orgofficeDocument2006mathe', False)

    
    e = property(__e.value, __e.set, None, u'Base')


    _ElementMap = {
        __lim.name() : __lim,
        __limLowPr.name() : __limLowPr,
        __e.name() : __e
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_LimLow', CT_LimLow)


# Complex type CT_DivBdr with content type ELEMENT_ONLY
class CT_DivBdr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DivBdr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}right uses Python identifier right
    __right = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), 'right', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DivBdr_httpschemas_openxmlformats_orgwordprocessingml2006mainright', False)

    
    right = property(__right.value, __right.set, None, u'Right Border for HTML div')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}top uses Python identifier top
    __top = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'top'), 'top', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DivBdr_httpschemas_openxmlformats_orgwordprocessingml2006maintop', False)

    
    top = property(__top.value, __top.set, None, u'Top Border for HTML div')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}left uses Python identifier left
    __left = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), 'left', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DivBdr_httpschemas_openxmlformats_orgwordprocessingml2006mainleft', False)

    
    left = property(__left.value, __left.set, None, u'Left Border for HTML div')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bottom uses Python identifier bottom
    __bottom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom'), 'bottom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DivBdr_httpschemas_openxmlformats_orgwordprocessingml2006mainbottom', False)

    
    bottom = property(__bottom.value, __bottom.set, None, u'Bottom Border for HTML div')


    _ElementMap = {
        __right.name() : __right,
        __top.name() : __top,
        __left.name() : __left,
        __bottom.name() : __bottom
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DivBdr', CT_DivBdr)


# Complex type CT_ManualBreak with content type EMPTY
class CT_ManualBreak (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_ManualBreak')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}alnAt uses Python identifier alnAt
    __alnAt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'alnAt'), 'alnAt', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_ManualBreak_httpschemas_openxmlformats_orgofficeDocument2006mathalnAt', ST_Integer255)
    
    alnAt = property(__alnAt.value, __alnAt.set, None, u'Index of Operator to Align To')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __alnAt.name() : __alnAt
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_ManualBreak', CT_ManualBreak)


# Complex type CT_LimUppPr with content type ELEMENT_ONLY
class CT_LimUppPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_LimUppPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_LimUppPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)


    _ElementMap = {
        __ctrlPr.name() : __ctrlPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_LimUppPr', CT_LimUppPr)


# Complex type CT_TextScale with content type EMPTY
class CT_TextScale (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TextScale')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TextScale_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_TextScale)
    
    val = property(__val.value, __val.set, None, u'Text Expansion/Compression Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TextScale', CT_TextScale)


# Complex type CT_TblOverlap with content type EMPTY
class CT_TblOverlap (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblOverlap')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblOverlap_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_TblOverlap, required=True)
    
    val = property(__val.value, __val.set, None, u'Floating Table Overlap Setting')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblOverlap', CT_TblOverlap)


# Complex type CT_MailMergeSourceType with content type EMPTY
class CT_MailMergeSourceType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_MailMergeSourceType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMergeSourceType_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_MailMergeSourceType, required=True)
    
    val = property(__val.value, __val.set, None, u'Data Source Type Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_MailMergeSourceType', CT_MailMergeSourceType)


# Complex type CT_PageNumber with content type EMPTY
class CT_PageNumber (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_PageNumber')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}start uses Python identifier start
    __start = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'start'), 'start', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageNumber_httpschemas_openxmlformats_orgwordprocessingml2006mainstart', ST_DecimalNumber)
    
    start = property(__start.value, __start.set, None, u'Starting Page Number')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}chapSep uses Python identifier chapSep
    __chapSep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'chapSep'), 'chapSep', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageNumber_httpschemas_openxmlformats_orgwordprocessingml2006mainchapSep', ST_ChapterSep)
    
    chapSep = property(__chapSep.value, __chapSep.set, None, u'Chapter Separator Character')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}chapStyle uses Python identifier chapStyle
    __chapStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'chapStyle'), 'chapStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageNumber_httpschemas_openxmlformats_orgwordprocessingml2006mainchapStyle', ST_DecimalNumber)
    
    chapStyle = property(__chapStyle.value, __chapStyle.set, None, u'Chapter Heading Style')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fmt uses Python identifier fmt
    __fmt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fmt'), 'fmt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PageNumber_httpschemas_openxmlformats_orgwordprocessingml2006mainfmt', ST_NumberFormat)
    
    fmt = property(__fmt.value, __fmt.set, None, u'Page Number Format')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __start.name() : __start,
        __chapSep.name() : __chapSep,
        __chapStyle.name() : __chapStyle,
        __fmt.name() : __fmt
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_PageNumber', CT_PageNumber)


# Complex type CT_PPrDefault with content type ELEMENT_ONLY
class CT_PPrDefault (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_PPrDefault')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pPr uses Python identifier pPr
    __pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr'), 'pPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrDefault_httpschemas_openxmlformats_orgwordprocessingml2006mainpPr', False)

    
    pPr = property(__pPr.value, __pPr.set, None, u'Paragraph Properties')


    _ElementMap = {
        __pPr.name() : __pPr
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_PPrDefault', CT_PPrDefault)


# Complex type CT_HdrFtrRef with content type EMPTY
class CT_HdrFtrRef (CT_Rel):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_HdrFtrRef')
    # Base type is CT_Rel
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Rel
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtrRef_httpschemas_openxmlformats_orgwordprocessingml2006maintype', ST_HdrFtr, required=True)
    
    type = property(__type.value, __type.set, None, u'Header or Footer Type')


    _ElementMap = CT_Rel._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_Rel._AttributeMap.copy()
    _AttributeMap.update({
        __type.name() : __type
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_HdrFtrRef', CT_HdrFtrRef)


# Complex type CT_RubyAlign with content type EMPTY
class CT_RubyAlign (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_RubyAlign')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyAlign_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_RubyAlign, required=True)
    
    val = property(__val.value, __val.set, None, u'Phonetic Guide Text Alignment Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_RubyAlign', CT_RubyAlign)


# Complex type CT_SectType with content type EMPTY
class CT_SectType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SectType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SectType_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_SectionMark)
    
    val = property(__val.value, __val.set, None, u'Section Type Setting')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SectType', CT_SectType)


# Complex type CT_TxbxContent with content type ELEMENT_ONLY
class CT_TxbxContent (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TxbxContent')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Block-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tbl uses Python identifier tbl
    __tbl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), 'tbl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006maintbl', True)

    
    tbl = property(__tbl.value, __tbl.set, None, u'Table')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), 'p', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006mainp', True)

    
    p = property(__p.value, __p.set, None, u'Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Block-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}altChunk uses Python identifier altChunk
    __altChunk = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk'), 'altChunk', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TxbxContent_httpschemas_openxmlformats_orgwordprocessingml2006mainaltChunk', True)

    
    altChunk = property(__altChunk.value, __altChunk.set, None, u'Anchor for Imported External Content')


    _ElementMap = {
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __customXml.name() : __customXml,
        __tbl.name() : __tbl,
        __ins.name() : __ins,
        __del.name() : __del,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __p.name() : __p,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __oMathPara.name() : __oMathPara,
        __bookmarkStart.name() : __bookmarkStart,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __proofErr.name() : __proofErr,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __commentRangeStart.name() : __commentRangeStart,
        __sdt.name() : __sdt,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __altChunk.name() : __altChunk
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TxbxContent', CT_TxbxContent)


# Complex type CT_Settings with content type ELEMENT_ONLY
class CT_Settings (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Settings')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ignoreMixedContent uses Python identifier ignoreMixedContent
    __ignoreMixedContent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ignoreMixedContent'), 'ignoreMixedContent', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainignoreMixedContent', False)

    
    ignoreMixedContent = property(__ignoreMixedContent.value, __ignoreMixedContent.set, None, u'Ignore Mixed Content When Validating Custom XML Markup')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}smartTagType uses Python identifier smartTagType
    __smartTagType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTagType'), 'smartTagType', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainsmartTagType', True)

    
    smartTagType = property(__smartTagType.value, __smartTagType.set, None, u'Supplementary Smart Tag Information')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}printPostScriptOverText uses Python identifier printPostScriptOverText
    __printPostScriptOverText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'printPostScriptOverText'), 'printPostScriptOverText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainprintPostScriptOverText', False)

    
    printPostScriptOverText = property(__printPostScriptOverText.value, __printPostScriptOverText.set, None, u'Print PostScript Codes With Document Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}mailMerge uses Python identifier mailMerge
    __mailMerge = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'mailMerge'), 'mailMerge', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainmailMerge', False)

    
    mailMerge = property(__mailMerge.value, __mailMerge.set, None, u'Mail Merge Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}useXSLTWhenSaving uses Python identifier useXSLTWhenSaving
    __useXSLTWhenSaving = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'useXSLTWhenSaving'), 'useXSLTWhenSaving', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainuseXSLTWhenSaving', False)

    
    useXSLTWhenSaving = property(__useXSLTWhenSaving.value, __useXSLTWhenSaving.set, None, u'Save Document as XML File through Custom XSL Transform')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}decimalSymbol uses Python identifier decimalSymbol
    __decimalSymbol = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'decimalSymbol'), 'decimalSymbol', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindecimalSymbol', False)

    
    decimalSymbol = property(__decimalSymbol.value, __decimalSymbol.set, None, u'Radix Point for Field Code Evaluation')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}embedSystemFonts uses Python identifier embedSystemFonts
    __embedSystemFonts = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'embedSystemFonts'), 'embedSystemFonts', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainembedSystemFonts', False)

    
    embedSystemFonts = property(__embedSystemFonts.value, __embedSystemFonts.set, None, u'Embed Common System Fonts')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotTrackFormatting uses Python identifier doNotTrackFormatting
    __doNotTrackFormatting = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotTrackFormatting'), 'doNotTrackFormatting', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotTrackFormatting', False)

    
    doNotTrackFormatting = property(__doNotTrackFormatting.value, __doNotTrackFormatting.set, None, u'Do Not Track Formatting Revisions When Tracking Revisions')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}updateFields uses Python identifier updateFields
    __updateFields = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'updateFields'), 'updateFields', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainupdateFields', False)

    
    updateFields = property(__updateFields.value, __updateFields.set, None, u'Automatically Recalculate Fields on Open')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}drawingGridHorizontalSpacing uses Python identifier drawingGridHorizontalSpacing
    __drawingGridHorizontalSpacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'drawingGridHorizontalSpacing'), 'drawingGridHorizontalSpacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindrawingGridHorizontalSpacing', False)

    
    drawingGridHorizontalSpacing = property(__drawingGridHorizontalSpacing.value, __drawingGridHorizontalSpacing.set, None, u'Drawing Grid Horizontal Grid Unit Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}alignBordersAndEdges uses Python identifier alignBordersAndEdges
    __alignBordersAndEdges = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'alignBordersAndEdges'), 'alignBordersAndEdges', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainalignBordersAndEdges', False)

    
    alignBordersAndEdges = property(__alignBordersAndEdges.value, __alignBordersAndEdges.set, None, u'Align Paragraph and Table Borders with Page Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}compat uses Python identifier compat
    __compat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'compat'), 'compat', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maincompat', False)

    
    compat = property(__compat.value, __compat.set, None, u'Compatibility Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}styleLockQFSet uses Python identifier styleLockQFSet
    __styleLockQFSet = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'styleLockQFSet'), 'styleLockQFSet', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainstyleLockQFSet', False)

    
    styleLockQFSet = property(__styleLockQFSet.value, __styleLockQFSet.set, None, u'Prevent Replacement of Styles Part')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}stylePaneFormatFilter uses Python identifier stylePaneFormatFilter
    __stylePaneFormatFilter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'stylePaneFormatFilter'), 'stylePaneFormatFilter', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainstylePaneFormatFilter', False)

    
    stylePaneFormatFilter = property(__stylePaneFormatFilter.value, __stylePaneFormatFilter.set, None, u'Suggested Filtering for List of Document Styles')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}removePersonalInformation uses Python identifier removePersonalInformation
    __removePersonalInformation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'removePersonalInformation'), 'removePersonalInformation', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainremovePersonalInformation', False)

    
    removePersonalInformation = property(__removePersonalInformation.value, __removePersonalInformation.set, None, u'Remove Personal Information from Document Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hideSpellingErrors uses Python identifier hideSpellingErrors
    __hideSpellingErrors = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hideSpellingErrors'), 'hideSpellingErrors', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainhideSpellingErrors', False)

    
    hideSpellingErrors = property(__hideSpellingErrors.value, __hideSpellingErrors.set, None, u'Do Not Display Visual Indication of Spelling Errors')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}stylePaneSortMethod uses Python identifier stylePaneSortMethod
    __stylePaneSortMethod = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'stylePaneSortMethod'), 'stylePaneSortMethod', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainstylePaneSortMethod', False)

    
    stylePaneSortMethod = property(__stylePaneSortMethod.value, __stylePaneSortMethod.set, None, u'Suggested Sorting for List of Document Styles')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hyphenationZone uses Python identifier hyphenationZone
    __hyphenationZone = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hyphenationZone'), 'hyphenationZone', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainhyphenationZone', False)

    
    hyphenationZone = property(__hyphenationZone.value, __hyphenationZone.set, None, u'Hyphenation Zone')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotHyphenateCaps uses Python identifier doNotHyphenateCaps
    __doNotHyphenateCaps = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotHyphenateCaps'), 'doNotHyphenateCaps', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotHyphenateCaps', False)

    
    doNotHyphenateCaps = property(__doNotHyphenateCaps.value, __doNotHyphenateCaps.set, None, u'Do Not Hyphenate Words in ALL CAPITAL LETTERS')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}printTwoOnOne uses Python identifier printTwoOnOne
    __printTwoOnOne = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'printTwoOnOne'), 'printTwoOnOne', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainprintTwoOnOne', False)

    
    printTwoOnOne = property(__printTwoOnOne.value, __printTwoOnOne.set, None, u'Print Two Pages Per Sheet')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofState uses Python identifier proofState
    __proofState = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofState'), 'proofState', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainproofState', False)

    
    proofState = property(__proofState.value, __proofState.set, None, u'Spelling and Grammatical Checking State')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}savePreviewPicture uses Python identifier savePreviewPicture
    __savePreviewPicture = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'savePreviewPicture'), 'savePreviewPicture', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainsavePreviewPicture', False)

    
    savePreviewPicture = property(__savePreviewPicture.value, __savePreviewPicture.set, None, u'Generate Thumbnail For Document On Save')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotIncludeSubdocsInStats uses Python identifier doNotIncludeSubdocsInStats
    __doNotIncludeSubdocsInStats = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotIncludeSubdocsInStats'), 'doNotIncludeSubdocsInStats', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotIncludeSubdocsInStats', False)

    
    doNotIncludeSubdocsInStats = property(__doNotIncludeSubdocsInStats.value, __doNotIncludeSubdocsInStats.set, None, u'Do Not Include Content in Text Boxes, Footnotes, and Endnotes in Document Statistics')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}writeProtection uses Python identifier writeProtection
    __writeProtection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'writeProtection'), 'writeProtection', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainwriteProtection', False)

    
    writeProtection = property(__writeProtection.value, __writeProtection.set, None, u'Write Protection')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}defaultTableStyle uses Python identifier defaultTableStyle
    __defaultTableStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'defaultTableStyle'), 'defaultTableStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindefaultTableStyle', False)

    
    defaultTableStyle = property(__defaultTableStyle.value, __defaultTableStyle.set, None, u'Default Table Style for Newly Inserted Tables')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}saveFormsData uses Python identifier saveFormsData
    __saveFormsData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'saveFormsData'), 'saveFormsData', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainsaveFormsData', False)

    
    saveFormsData = property(__saveFormsData.value, __saveFormsData.set, None, u'Only Save Form Field Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}alwaysShowPlaceholderText uses Python identifier alwaysShowPlaceholderText
    __alwaysShowPlaceholderText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'alwaysShowPlaceholderText'), 'alwaysShowPlaceholderText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainalwaysShowPlaceholderText', False)

    
    alwaysShowPlaceholderText = property(__alwaysShowPlaceholderText.value, __alwaysShowPlaceholderText.set, None, u'Use Custom XML Element Names as Default Placeholder Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}captions uses Python identifier captions
    __captions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'captions'), 'captions', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maincaptions', False)

    
    captions = property(__captions.value, __captions.set, None, u'Caption Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookFoldPrintingSheets uses Python identifier bookFoldPrintingSheets
    __bookFoldPrintingSheets = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookFoldPrintingSheets'), 'bookFoldPrintingSheets', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainbookFoldPrintingSheets', False)

    
    bookFoldPrintingSheets = property(__bookFoldPrintingSheets.value, __bookFoldPrintingSheets.set, None, u'Number of Pages Per Booklet')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}defaultTabStop uses Python identifier defaultTabStop
    __defaultTabStop = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'defaultTabStop'), 'defaultTabStop', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindefaultTabStop', False)

    
    defaultTabStop = property(__defaultTabStop.value, __defaultTabStop.set, None, u'Distance Between Automatic Tab Stops')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}revisionView uses Python identifier revisionView
    __revisionView = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'revisionView'), 'revisionView', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainrevisionView', False)

    
    revisionView = property(__revisionView.value, __revisionView.set, None, u'Visibility of Annotation Types')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}saveThroughXslt uses Python identifier saveThroughXslt
    __saveThroughXslt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'saveThroughXslt'), 'saveThroughXslt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainsaveThroughXslt', False)

    
    saveThroughXslt = property(__saveThroughXslt.value, __saveThroughXslt.set, None, u'Custom XSL Transform To Use When Saving As XML File')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}embedTrueTypeFonts uses Python identifier embedTrueTypeFonts
    __embedTrueTypeFonts = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'embedTrueTypeFonts'), 'embedTrueTypeFonts', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainembedTrueTypeFonts', False)

    
    embedTrueTypeFonts = property(__embedTrueTypeFonts.value, __embedTrueTypeFonts.set, None, u'Embed TrueType Fonts')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}listSeparator uses Python identifier listSeparator
    __listSeparator = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'listSeparator'), 'listSeparator', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainlistSeparator', False)

    
    listSeparator = property(__listSeparator.value, __listSeparator.set, None, u'List Separator for Field Code Evaluation')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}displayVerticalDrawingGridEvery uses Python identifier displayVerticalDrawingGridEvery
    __displayVerticalDrawingGridEvery = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'displayVerticalDrawingGridEvery'), 'displayVerticalDrawingGridEvery', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindisplayVerticalDrawingGridEvery', False)

    
    displayVerticalDrawingGridEvery = property(__displayVerticalDrawingGridEvery.value, __displayVerticalDrawingGridEvery.set, None, u'Distance between Vertical Gridlines')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}documentProtection uses Python identifier documentProtection
    __documentProtection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'documentProtection'), 'documentProtection', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindocumentProtection', False)

    
    documentProtection = property(__documentProtection.value, __documentProtection.set, None, u'Document Editing Restrictions')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hdrShapeDefaults uses Python identifier hdrShapeDefaults
    __hdrShapeDefaults = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hdrShapeDefaults'), 'hdrShapeDefaults', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainhdrShapeDefaults', False)

    
    hdrShapeDefaults = property(__hdrShapeDefaults.value, __hdrShapeDefaults.set, None, u'Default Properties for VML Objects in Header and Footer')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotShadeFormData uses Python identifier doNotShadeFormData
    __doNotShadeFormData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotShadeFormData'), 'doNotShadeFormData', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotShadeFormData', False)

    
    doNotShadeFormData = property(__doNotShadeFormData.value, __doNotShadeFormData.set, None, u'Do Not Show Visual Indicator For Form Fields')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsids uses Python identifier rsids
    __rsids = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsids'), 'rsids', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainrsids', False)

    
    rsids = property(__rsids.value, __rsids.set, None, u'Listing of All Revision Save ID Values')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docVars uses Python identifier docVars
    __docVars = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docVars'), 'docVars', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindocVars', False)

    
    docVars = property(__docVars.value, __docVars.set, None, u'Document Variables')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hideGrammaticalErrors uses Python identifier hideGrammaticalErrors
    __hideGrammaticalErrors = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hideGrammaticalErrors'), 'hideGrammaticalErrors', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainhideGrammaticalErrors', False)

    
    hideGrammaticalErrors = property(__hideGrammaticalErrors.value, __hideGrammaticalErrors.set, None, u'Do Not Display Visual Indication of Grammatical Errors')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}showXMLTags uses Python identifier showXMLTags
    __showXMLTags = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'showXMLTags'), 'showXMLTags', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainshowXMLTags', False)

    
    showXMLTags = property(__showXMLTags.value, __showXMLTags.set, None, u'Show Visual Indicators for Custom XML Markup Start/End Locations')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}strictFirstAndLastChars uses Python identifier strictFirstAndLastChars
    __strictFirstAndLastChars = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'strictFirstAndLastChars'), 'strictFirstAndLastChars', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainstrictFirstAndLastChars', False)

    
    strictFirstAndLastChars = property(__strictFirstAndLastChars.value, __strictFirstAndLastChars.set, None, u'Use Strict Kinsoku Rules for Japanese Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bordersDoNotSurroundHeader uses Python identifier bordersDoNotSurroundHeader
    __bordersDoNotSurroundHeader = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bordersDoNotSurroundHeader'), 'bordersDoNotSurroundHeader', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainbordersDoNotSurroundHeader', False)

    
    bordersDoNotSurroundHeader = property(__bordersDoNotSurroundHeader.value, __bordersDoNotSurroundHeader.set, None, u'Page Border Excludes Header')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}view uses Python identifier view
    __view = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'view'), 'view', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainview', False)

    
    view = property(__view.value, __view.set, None, u'Document View Setting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}formsDesign uses Python identifier formsDesign
    __formsDesign = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'formsDesign'), 'formsDesign', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainformsDesign', False)

    
    formsDesign = property(__formsDesign.value, __formsDesign.set, None, u'Structured Document Tag Placeholder Text Should be Resaved')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}removeDateAndTime uses Python identifier removeDateAndTime
    __removeDateAndTime = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'removeDateAndTime'), 'removeDateAndTime', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainremoveDateAndTime', False)

    
    removeDateAndTime = property(__removeDateAndTime.value, __removeDateAndTime.set, None, u'Remove Date and Time from Annotations')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotValidateAgainstSchema uses Python identifier doNotValidateAgainstSchema
    __doNotValidateAgainstSchema = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotValidateAgainstSchema'), 'doNotValidateAgainstSchema', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotValidateAgainstSchema', False)

    
    doNotValidateAgainstSchema = property(__doNotValidateAgainstSchema.value, __doNotValidateAgainstSchema.set, None, u'Do Not Validate Custom XML Markup Against Schemas')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotAutoCompressPictures uses Python identifier doNotAutoCompressPictures
    __doNotAutoCompressPictures = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotAutoCompressPictures'), 'doNotAutoCompressPictures', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotAutoCompressPictures', False)

    
    doNotAutoCompressPictures = property(__doNotAutoCompressPictures.value, __doNotAutoCompressPictures.set, None, u'Do Not Automatically Compress Images')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}evenAndOddHeaders uses Python identifier evenAndOddHeaders
    __evenAndOddHeaders = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'evenAndOddHeaders'), 'evenAndOddHeaders', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainevenAndOddHeaders', False)

    
    evenAndOddHeaders = property(__evenAndOddHeaders.value, __evenAndOddHeaders.set, None, u'Different Even/Odd Page Headers and Footers')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookFoldRevPrinting uses Python identifier bookFoldRevPrinting
    __bookFoldRevPrinting = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookFoldRevPrinting'), 'bookFoldRevPrinting', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainbookFoldRevPrinting', False)

    
    bookFoldRevPrinting = property(__bookFoldRevPrinting.value, __bookFoldRevPrinting.set, None, u'Reverse Book Fold Printing')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotDemarcateInvalidXml uses Python identifier doNotDemarcateInvalidXml
    __doNotDemarcateInvalidXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotDemarcateInvalidXml'), 'doNotDemarcateInvalidXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotDemarcateInvalidXml', False)

    
    doNotDemarcateInvalidXml = property(__doNotDemarcateInvalidXml.value, __doNotDemarcateInvalidXml.set, None, u'Do Not Show Visual Indicator For Invalid Custom XML Markup')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shapeDefaults uses Python identifier shapeDefaults
    __shapeDefaults = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shapeDefaults'), 'shapeDefaults', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainshapeDefaults', False)

    
    shapeDefaults = property(__shapeDefaults.value, __shapeDefaults.set, None, u'Default Properties for VML Objects in Main Document')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}printFormsData uses Python identifier printFormsData
    __printFormsData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'printFormsData'), 'printFormsData', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainprintFormsData', False)

    
    printFormsData = property(__printFormsData.value, __printFormsData.set, None, u'Only Print Form Field Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}trackRevisions uses Python identifier trackRevisions
    __trackRevisions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'trackRevisions'), 'trackRevisions', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maintrackRevisions', False)

    
    trackRevisions = property(__trackRevisions.value, __trackRevisions.set, None, u'Track Revisions to Document')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noPunctuationKerning uses Python identifier noPunctuationKerning
    __noPunctuationKerning = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noPunctuationKerning'), 'noPunctuationKerning', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainnoPunctuationKerning', False)

    
    noPunctuationKerning = property(__noPunctuationKerning.value, __noPunctuationKerning.set, None, u'Never Kern Punctuation Characters')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotUseMarginsForDrawingGridOrigin uses Python identifier doNotUseMarginsForDrawingGridOrigin
    __doNotUseMarginsForDrawingGridOrigin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotUseMarginsForDrawingGridOrigin'), 'doNotUseMarginsForDrawingGridOrigin', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotUseMarginsForDrawingGridOrigin', False)

    
    doNotUseMarginsForDrawingGridOrigin = property(__doNotUseMarginsForDrawingGridOrigin.value, __doNotUseMarginsForDrawingGridOrigin.set, None, u'Do Not Use Margins for Drawing Grid Origin')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}autoFormatOverride uses Python identifier autoFormatOverride
    __autoFormatOverride = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'autoFormatOverride'), 'autoFormatOverride', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainautoFormatOverride', False)

    
    autoFormatOverride = property(__autoFormatOverride.value, __autoFormatOverride.set, None, u'Allow Automatic Formatting to Override Formatting Protection Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}footnotePr uses Python identifier footnotePr
    __footnotePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'footnotePr'), 'footnotePr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainfootnotePr', False)

    
    footnotePr = property(__footnotePr.value, __footnotePr.set, None, u'Document-Wide Footnote Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}showEnvelope uses Python identifier showEnvelope
    __showEnvelope = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'showEnvelope'), 'showEnvelope', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainshowEnvelope', False)

    
    showEnvelope = property(__showEnvelope.value, __showEnvelope.set, None, u'Show E-Mail Message Header')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bordersDoNotSurroundFooter uses Python identifier bordersDoNotSurroundFooter
    __bordersDoNotSurroundFooter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bordersDoNotSurroundFooter'), 'bordersDoNotSurroundFooter', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainbordersDoNotSurroundFooter', False)

    
    bordersDoNotSurroundFooter = property(__bordersDoNotSurroundFooter.value, __bordersDoNotSurroundFooter.set, None, u'Page Border Excludes Footer')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}drawingGridHorizontalOrigin uses Python identifier drawingGridHorizontalOrigin
    __drawingGridHorizontalOrigin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'drawingGridHorizontalOrigin'), 'drawingGridHorizontalOrigin', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindrawingGridHorizontalOrigin', False)

    
    drawingGridHorizontalOrigin = property(__drawingGridHorizontalOrigin.value, __drawingGridHorizontalOrigin.set, None, u'Drawing Grid Horizontal Origin Point')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}autoHyphenation uses Python identifier autoHyphenation
    __autoHyphenation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'autoHyphenation'), 'autoHyphenation', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainautoHyphenation', False)

    
    autoHyphenation = property(__autoHyphenation.value, __autoHyphenation.set, None, u'Automatically Hyphenate Document Contents When Displayed')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}alwaysMergeEmptyNamespace uses Python identifier alwaysMergeEmptyNamespace
    __alwaysMergeEmptyNamespace = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'alwaysMergeEmptyNamespace'), 'alwaysMergeEmptyNamespace', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainalwaysMergeEmptyNamespace', False)

    
    alwaysMergeEmptyNamespace = property(__alwaysMergeEmptyNamespace.value, __alwaysMergeEmptyNamespace.set, None, u'Do Not Mark Custom XML Elements With No Namespace As Invalid')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}attachedSchema uses Python identifier attachedSchema
    __attachedSchema = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'attachedSchema'), 'attachedSchema', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainattachedSchema', True)

    
    attachedSchema = property(__attachedSchema.value, __attachedSchema.set, None, u'Attached Custom XML Schema')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noLineBreaksAfter uses Python identifier noLineBreaksAfter
    __noLineBreaksAfter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noLineBreaksAfter'), 'noLineBreaksAfter', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainnoLineBreaksAfter', False)

    
    noLineBreaksAfter = property(__noLineBreaksAfter.value, __noLineBreaksAfter.set, None, u'Custom Set of Characters Which Cannot End a Line')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}themeFontLang uses Python identifier themeFontLang
    __themeFontLang = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'themeFontLang'), 'themeFontLang', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainthemeFontLang', False)

    
    themeFontLang = property(__themeFontLang.value, __themeFontLang.set, None, u'Theme Font Languages')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}printFractionalCharacterWidth uses Python identifier printFractionalCharacterWidth
    __printFractionalCharacterWidth = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'printFractionalCharacterWidth'), 'printFractionalCharacterWidth', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainprintFractionalCharacterWidth', False)

    
    printFractionalCharacterWidth = property(__printFractionalCharacterWidth.value, __printFractionalCharacterWidth.set, None, u'Print Fractional Character Widths')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}zoom uses Python identifier zoom
    __zoom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'zoom'), 'zoom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainzoom', False)

    
    zoom = property(__zoom.value, __zoom.set, None, u'Magnification Setting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}displayHorizontalDrawingGridEvery uses Python identifier displayHorizontalDrawingGridEvery
    __displayHorizontalDrawingGridEvery = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'displayHorizontalDrawingGridEvery'), 'displayHorizontalDrawingGridEvery', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindisplayHorizontalDrawingGridEvery', False)

    
    displayHorizontalDrawingGridEvery = property(__displayHorizontalDrawingGridEvery.value, __displayHorizontalDrawingGridEvery.set, None, u'Distance between Horizontal Gridlines')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}attachedTemplate uses Python identifier attachedTemplate
    __attachedTemplate = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'attachedTemplate'), 'attachedTemplate', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainattachedTemplate', False)

    
    attachedTemplate = property(__attachedTemplate.value, __attachedTemplate.set, None, u'Attached Document Template')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}saveInvalidXml uses Python identifier saveInvalidXml
    __saveInvalidXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'saveInvalidXml'), 'saveInvalidXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainsaveInvalidXml', False)

    
    saveInvalidXml = property(__saveInvalidXml.value, __saveInvalidXml.set, None, u'Allow Saving Document As XML File When Custom XML Markup Is Invalid')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}forceUpgrade uses Python identifier forceUpgrade
    __forceUpgrade = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'forceUpgrade'), 'forceUpgrade', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainforceUpgrade', False)

    
    forceUpgrade = property(__forceUpgrade.value, __forceUpgrade.set, None, u'Upgrade Document on Open')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}displayBackgroundShape uses Python identifier displayBackgroundShape
    __displayBackgroundShape = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'displayBackgroundShape'), 'displayBackgroundShape', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindisplayBackgroundShape', False)

    
    displayBackgroundShape = property(__displayBackgroundShape.value, __displayBackgroundShape.set, None, u'Display Background Objects When Displaying Document')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}linkStyles uses Python identifier linkStyles
    __linkStyles = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'linkStyles'), 'linkStyles', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainlinkStyles', False)

    
    linkStyles = property(__linkStyles.value, __linkStyles.set, None, u'Automatically Update Styles From Document Template')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}documentType uses Python identifier documentType
    __documentType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'documentType'), 'documentType', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindocumentType', False)

    
    documentType = property(__documentType.value, __documentType.set, None, u'Document Classification')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotDisplayPageBoundaries uses Python identifier doNotDisplayPageBoundaries
    __doNotDisplayPageBoundaries = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotDisplayPageBoundaries'), 'doNotDisplayPageBoundaries', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotDisplayPageBoundaries', False)

    
    doNotDisplayPageBoundaries = property(__doNotDisplayPageBoundaries.value, __doNotDisplayPageBoundaries.set, None, u'Do Not Display Visual Boundary For Header/Footer or Between Pages')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}saveXmlDataOnly uses Python identifier saveXmlDataOnly
    __saveXmlDataOnly = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'saveXmlDataOnly'), 'saveXmlDataOnly', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainsaveXmlDataOnly', False)

    
    saveXmlDataOnly = property(__saveXmlDataOnly.value, __saveXmlDataOnly.set, None, u'Only Save Custom XML Markup')

    
    # Element {http://schemas.openxmlformats.org/schemaLibrary/2006/main}schemaLibrary uses Python identifier schemaLibrary
    __schemaLibrary = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_sl.Namespace, u'schemaLibrary'), 'schemaLibrary', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgschemaLibrary2006mainschemaLibrary', False)

    
    schemaLibrary = property(__schemaLibrary.value, __schemaLibrary.set, None, u'Embedded Custom XML Schema Supplementary Data')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotEmbedSmartTags uses Python identifier doNotEmbedSmartTags
    __doNotEmbedSmartTags = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotEmbedSmartTags'), 'doNotEmbedSmartTags', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotEmbedSmartTags', False)

    
    doNotEmbedSmartTags = property(__doNotEmbedSmartTags.value, __doNotEmbedSmartTags.set, None, u'Remove Smart Tags When Saving')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}drawingGridVerticalSpacing uses Python identifier drawingGridVerticalSpacing
    __drawingGridVerticalSpacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'drawingGridVerticalSpacing'), 'drawingGridVerticalSpacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindrawingGridVerticalSpacing', False)

    
    drawingGridVerticalSpacing = property(__drawingGridVerticalSpacing.value, __drawingGridVerticalSpacing.set, None, u'Drawing Grid Vertical Grid Unit Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotTrackMoves uses Python identifier doNotTrackMoves
    __doNotTrackMoves = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotTrackMoves'), 'doNotTrackMoves', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotTrackMoves', False)

    
    doNotTrackMoves = property(__doNotTrackMoves.value, __doNotTrackMoves.set, None, u'Do Not Use Move Syntax When Tracking Revisions')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}mirrorMargins uses Python identifier mirrorMargins
    __mirrorMargins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'mirrorMargins'), 'mirrorMargins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainmirrorMargins', False)

    
    mirrorMargins = property(__mirrorMargins.value, __mirrorMargins.set, None, u'Mirror Page Margins')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}styleLockTheme uses Python identifier styleLockTheme
    __styleLockTheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'styleLockTheme'), 'styleLockTheme', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainstyleLockTheme', False)

    
    styleLockTheme = property(__styleLockTheme.value, __styleLockTheme.set, None, u'Prevent Modification of Themes Part')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}endnotePr uses Python identifier endnotePr
    __endnotePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'endnotePr'), 'endnotePr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainendnotePr', False)

    
    endnotePr = property(__endnotePr.value, __endnotePr.set, None, u'Document-Wide Endnote Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}characterSpacingControl uses Python identifier characterSpacingControl
    __characterSpacingControl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'characterSpacingControl'), 'characterSpacingControl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maincharacterSpacingControl', False)

    
    characterSpacingControl = property(__characterSpacingControl.value, __characterSpacingControl.set, None, u'Character-Level Whitespace Compression')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookFoldPrinting uses Python identifier bookFoldPrinting
    __bookFoldPrinting = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookFoldPrinting'), 'bookFoldPrinting', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainbookFoldPrinting', False)

    
    bookFoldPrinting = property(__bookFoldPrinting.value, __bookFoldPrinting.set, None, u'Book Fold Printing')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}gutterAtTop uses Python identifier gutterAtTop
    __gutterAtTop = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'gutterAtTop'), 'gutterAtTop', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maingutterAtTop', False)

    
    gutterAtTop = property(__gutterAtTop.value, __gutterAtTop.set, None, u'Position Gutter At Top of Page')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}consecutiveHyphenLimit uses Python identifier consecutiveHyphenLimit
    __consecutiveHyphenLimit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'consecutiveHyphenLimit'), 'consecutiveHyphenLimit', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainconsecutiveHyphenLimit', False)

    
    consecutiveHyphenLimit = property(__consecutiveHyphenLimit.value, __consecutiveHyphenLimit.set, None, u'Maximum Number of Consecutively Hyphenated Lines')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}readModeInkLockDown uses Python identifier readModeInkLockDown
    __readModeInkLockDown = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'readModeInkLockDown'), 'readModeInkLockDown', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainreadModeInkLockDown', False)

    
    readModeInkLockDown = property(__readModeInkLockDown.value, __readModeInkLockDown.set, None, u'Freeze Document Layout')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}saveSubsetFonts uses Python identifier saveSubsetFonts
    __saveSubsetFonts = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'saveSubsetFonts'), 'saveSubsetFonts', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainsaveSubsetFonts', False)

    
    saveSubsetFonts = property(__saveSubsetFonts.value, __saveSubsetFonts.set, None, u'Subset Fonts When Embedding')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}activeWritingStyle uses Python identifier activeWritingStyle
    __activeWritingStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'activeWritingStyle'), 'activeWritingStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainactiveWritingStyle', True)

    
    activeWritingStyle = property(__activeWritingStyle.value, __activeWritingStyle.set, None, u'Grammar Checking Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}summaryLength uses Python identifier summaryLength
    __summaryLength = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'summaryLength'), 'summaryLength', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainsummaryLength', False)

    
    summaryLength = property(__summaryLength.value, __summaryLength.set, None, u'Percentage of Document to Use When Generating Summary')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noLineBreaksBefore uses Python identifier noLineBreaksBefore
    __noLineBreaksBefore = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noLineBreaksBefore'), 'noLineBreaksBefore', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainnoLineBreaksBefore', False)

    
    noLineBreaksBefore = property(__noLineBreaksBefore.value, __noLineBreaksBefore.set, None, u'Custom Set Of Characters Which Cannot Begin A Line')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}clrSchemeMapping uses Python identifier clrSchemeMapping
    __clrSchemeMapping = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'clrSchemeMapping'), 'clrSchemeMapping', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainclrSchemeMapping', False)

    
    clrSchemeMapping = property(__clrSchemeMapping.value, __clrSchemeMapping.set, None, u'Theme Color Mappings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}drawingGridVerticalOrigin uses Python identifier drawingGridVerticalOrigin
    __drawingGridVerticalOrigin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'drawingGridVerticalOrigin'), 'drawingGridVerticalOrigin', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006maindrawingGridVerticalOrigin', False)

    
    drawingGridVerticalOrigin = property(__drawingGridVerticalOrigin.value, __drawingGridVerticalOrigin.set, None, u'Drawing Grid Vertical Origin Point')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}mathPr uses Python identifier mathPr
    __mathPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'mathPr'), 'mathPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgofficeDocument2006mathmathPr', False)

    
    mathPr = property(__mathPr.value, __mathPr.set, None, u'Math Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}clickAndTypeStyle uses Python identifier clickAndTypeStyle
    __clickAndTypeStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'clickAndTypeStyle'), 'clickAndTypeStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Settings_httpschemas_openxmlformats_orgwordprocessingml2006mainclickAndTypeStyle', False)

    
    clickAndTypeStyle = property(__clickAndTypeStyle.value, __clickAndTypeStyle.set, None, u'Paragraph Style Applied to Automatically Generated Paragraphs')


    _ElementMap = {
        __ignoreMixedContent.name() : __ignoreMixedContent,
        __smartTagType.name() : __smartTagType,
        __printPostScriptOverText.name() : __printPostScriptOverText,
        __mailMerge.name() : __mailMerge,
        __useXSLTWhenSaving.name() : __useXSLTWhenSaving,
        __decimalSymbol.name() : __decimalSymbol,
        __embedSystemFonts.name() : __embedSystemFonts,
        __doNotTrackFormatting.name() : __doNotTrackFormatting,
        __updateFields.name() : __updateFields,
        __drawingGridHorizontalSpacing.name() : __drawingGridHorizontalSpacing,
        __alignBordersAndEdges.name() : __alignBordersAndEdges,
        __compat.name() : __compat,
        __styleLockQFSet.name() : __styleLockQFSet,
        __stylePaneFormatFilter.name() : __stylePaneFormatFilter,
        __removePersonalInformation.name() : __removePersonalInformation,
        __hideSpellingErrors.name() : __hideSpellingErrors,
        __stylePaneSortMethod.name() : __stylePaneSortMethod,
        __hyphenationZone.name() : __hyphenationZone,
        __doNotHyphenateCaps.name() : __doNotHyphenateCaps,
        __printTwoOnOne.name() : __printTwoOnOne,
        __proofState.name() : __proofState,
        __savePreviewPicture.name() : __savePreviewPicture,
        __doNotIncludeSubdocsInStats.name() : __doNotIncludeSubdocsInStats,
        __writeProtection.name() : __writeProtection,
        __defaultTableStyle.name() : __defaultTableStyle,
        __saveFormsData.name() : __saveFormsData,
        __alwaysShowPlaceholderText.name() : __alwaysShowPlaceholderText,
        __captions.name() : __captions,
        __bookFoldPrintingSheets.name() : __bookFoldPrintingSheets,
        __defaultTabStop.name() : __defaultTabStop,
        __revisionView.name() : __revisionView,
        __saveThroughXslt.name() : __saveThroughXslt,
        __embedTrueTypeFonts.name() : __embedTrueTypeFonts,
        __listSeparator.name() : __listSeparator,
        __displayVerticalDrawingGridEvery.name() : __displayVerticalDrawingGridEvery,
        __documentProtection.name() : __documentProtection,
        __hdrShapeDefaults.name() : __hdrShapeDefaults,
        __doNotShadeFormData.name() : __doNotShadeFormData,
        __rsids.name() : __rsids,
        __docVars.name() : __docVars,
        __hideGrammaticalErrors.name() : __hideGrammaticalErrors,
        __showXMLTags.name() : __showXMLTags,
        __strictFirstAndLastChars.name() : __strictFirstAndLastChars,
        __bordersDoNotSurroundHeader.name() : __bordersDoNotSurroundHeader,
        __view.name() : __view,
        __formsDesign.name() : __formsDesign,
        __removeDateAndTime.name() : __removeDateAndTime,
        __doNotValidateAgainstSchema.name() : __doNotValidateAgainstSchema,
        __doNotAutoCompressPictures.name() : __doNotAutoCompressPictures,
        __evenAndOddHeaders.name() : __evenAndOddHeaders,
        __bookFoldRevPrinting.name() : __bookFoldRevPrinting,
        __doNotDemarcateInvalidXml.name() : __doNotDemarcateInvalidXml,
        __shapeDefaults.name() : __shapeDefaults,
        __printFormsData.name() : __printFormsData,
        __trackRevisions.name() : __trackRevisions,
        __noPunctuationKerning.name() : __noPunctuationKerning,
        __doNotUseMarginsForDrawingGridOrigin.name() : __doNotUseMarginsForDrawingGridOrigin,
        __autoFormatOverride.name() : __autoFormatOverride,
        __footnotePr.name() : __footnotePr,
        __showEnvelope.name() : __showEnvelope,
        __bordersDoNotSurroundFooter.name() : __bordersDoNotSurroundFooter,
        __drawingGridHorizontalOrigin.name() : __drawingGridHorizontalOrigin,
        __autoHyphenation.name() : __autoHyphenation,
        __alwaysMergeEmptyNamespace.name() : __alwaysMergeEmptyNamespace,
        __attachedSchema.name() : __attachedSchema,
        __noLineBreaksAfter.name() : __noLineBreaksAfter,
        __themeFontLang.name() : __themeFontLang,
        __printFractionalCharacterWidth.name() : __printFractionalCharacterWidth,
        __zoom.name() : __zoom,
        __displayHorizontalDrawingGridEvery.name() : __displayHorizontalDrawingGridEvery,
        __attachedTemplate.name() : __attachedTemplate,
        __saveInvalidXml.name() : __saveInvalidXml,
        __forceUpgrade.name() : __forceUpgrade,
        __displayBackgroundShape.name() : __displayBackgroundShape,
        __linkStyles.name() : __linkStyles,
        __documentType.name() : __documentType,
        __doNotDisplayPageBoundaries.name() : __doNotDisplayPageBoundaries,
        __saveXmlDataOnly.name() : __saveXmlDataOnly,
        __schemaLibrary.name() : __schemaLibrary,
        __doNotEmbedSmartTags.name() : __doNotEmbedSmartTags,
        __drawingGridVerticalSpacing.name() : __drawingGridVerticalSpacing,
        __doNotTrackMoves.name() : __doNotTrackMoves,
        __mirrorMargins.name() : __mirrorMargins,
        __styleLockTheme.name() : __styleLockTheme,
        __endnotePr.name() : __endnotePr,
        __characterSpacingControl.name() : __characterSpacingControl,
        __bookFoldPrinting.name() : __bookFoldPrinting,
        __gutterAtTop.name() : __gutterAtTop,
        __consecutiveHyphenLimit.name() : __consecutiveHyphenLimit,
        __readModeInkLockDown.name() : __readModeInkLockDown,
        __saveSubsetFonts.name() : __saveSubsetFonts,
        __activeWritingStyle.name() : __activeWritingStyle,
        __summaryLength.name() : __summaryLength,
        __noLineBreaksBefore.name() : __noLineBreaksBefore,
        __clrSchemeMapping.name() : __clrSchemeMapping,
        __drawingGridVerticalOrigin.name() : __drawingGridVerticalOrigin,
        __mathPr.name() : __mathPr,
        __clickAndTypeStyle.name() : __clickAndTypeStyle
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Settings', CT_Settings)


# Complex type CT_Tabs with content type ELEMENT_ONLY
class CT_Tabs (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Tabs')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tab uses Python identifier tab
    __tab = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tab'), 'tab', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Tabs_httpschemas_openxmlformats_orgwordprocessingml2006maintab', True)

    
    tab = property(__tab.value, __tab.set, None, u'Custom Tab Stop')


    _ElementMap = {
        __tab.name() : __tab
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Tabs', CT_Tabs)


# Complex type CT_LimLowPr with content type ELEMENT_ONLY
class CT_LimLowPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_LimLowPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_LimLowPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)


    _ElementMap = {
        __ctrlPr.name() : __ctrlPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_LimLowPr', CT_LimLowPr)


# Complex type CT_EdnDocProps with content type ELEMENT_ONLY
class CT_EdnDocProps (CT_EdnProps):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_EdnDocProps')
    # Base type is CT_EdnProps
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}endnote uses Python identifier endnote
    __endnote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'endnote'), 'endnote', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_EdnDocProps_httpschemas_openxmlformats_orgwordprocessingml2006mainendnote', True)

    
    endnote = property(__endnote.value, __endnote.set, None, u'Special Endnote List')

    
    # Element numRestart ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}numRestart) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_EdnProps
    
    # Element numFmt ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}numFmt) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_EdnProps
    
    # Element pos ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}pos) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_EdnProps
    
    # Element numStart ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}numStart) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_EdnProps

    _ElementMap = CT_EdnProps._ElementMap.copy()
    _ElementMap.update({
        __endnote.name() : __endnote
    })
    _AttributeMap = CT_EdnProps._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_EdnDocProps', CT_EdnDocProps)


# Complex type CT_DocPartBehaviors with content type ELEMENT_ONLY
class CT_DocPartBehaviors (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocPartBehaviors')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}behavior uses Python identifier behavior
    __behavior = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'behavior'), 'behavior', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartBehaviors_httpschemas_openxmlformats_orgwordprocessingml2006mainbehavior', True)

    
    behavior = property(__behavior.value, __behavior.set, None, u'Entry Insertion Behavior')


    _ElementMap = {
        __behavior.name() : __behavior
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocPartBehaviors', CT_DocPartBehaviors)


# Complex type CT_Text_ with content type SIMPLE
class CT_Text_ (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = _s.ST_String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_Text')
    # Base type is _s.ST_String
    
    # Attribute {http://www.w3.org/XML/1998/namespace}space uses Python identifier space
    __space = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.XML, 'space'), 'space', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Text_httpwww_w3_orgXML1998namespacespace', pyxb.binding.xml_.STD_ANON_space)
    
    space = property(__space.value, __space.set, None, None)


    _ElementMap = {
        
    }
    _AttributeMap = {
        __space.name() : __space
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_Text', CT_Text_)


# Complex type CT_NumFmt with content type EMPTY
class CT_NumFmt (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_NumFmt')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_NumFmt_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_NumberFormat, required=True)
    
    val = property(__val.value, __val.set, None, u'Numbering Format Type')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'format'), 'format', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_NumFmt_httpschemas_openxmlformats_orgwordprocessingml2006mainformat', _s.ST_String)
    
    format = property(__format.value, __format.set, None, u'Custom Defined Number Format')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __format.name() : __format
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_NumFmt', CT_NumFmt)


# Complex type CT_SmartTagType with content type EMPTY
class CT_SmartTagType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SmartTagType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}namespaceuri uses Python identifier namespaceuri
    __namespaceuri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'namespaceuri'), 'namespaceuri', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagType_httpschemas_openxmlformats_orgwordprocessingml2006mainnamespaceuri', _s.ST_String)
    
    namespaceuri = property(__namespaceuri.value, __namespaceuri.set, None, u'Smart Tag Namespace')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}url uses Python identifier url
    __url = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'url'), 'url', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagType_httpschemas_openxmlformats_orgwordprocessingml2006mainurl', _s.ST_String)
    
    url = property(__url.value, __url.set, None, u'Smart Tag Supplementary URL')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SmartTagType_httpschemas_openxmlformats_orgwordprocessingml2006mainname', _s.ST_String)
    
    name = property(__name.value, __name.set, None, u'Smart Tag Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __namespaceuri.name() : __namespaceuri,
        __url.name() : __url,
        __name.name() : __name
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SmartTagType', CT_SmartTagType)


# Complex type CT_Integer255 with content type EMPTY
class CT_Integer255 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_Integer255')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Integer255_httpschemas_openxmlformats_orgofficeDocument2006mathval', ST_Integer255, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_Integer255', CT_Integer255)


# Complex type CT_TblBorders with content type ELEMENT_ONLY
class CT_TblBorders (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblBorders')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}end uses Python identifier end
    __end = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'end'), 'end', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblBorders_httpschemas_openxmlformats_orgwordprocessingml2006mainend', False)

    
    end = property(__end.value, __end.set, None, u'Table Trailing Edge Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}top uses Python identifier top
    __top = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'top'), 'top', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblBorders_httpschemas_openxmlformats_orgwordprocessingml2006maintop', False)

    
    top = property(__top.value, __top.set, None, u'Table Top Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}insideH uses Python identifier insideH
    __insideH = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'insideH'), 'insideH', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblBorders_httpschemas_openxmlformats_orgwordprocessingml2006maininsideH', False)

    
    insideH = property(__insideH.value, __insideH.set, None, u'Table Inside Horizontal Edges Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}start uses Python identifier start
    __start = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'start'), 'start', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblBorders_httpschemas_openxmlformats_orgwordprocessingml2006mainstart', False)

    
    start = property(__start.value, __start.set, None, u'Table Leading Edge Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}right uses Python identifier right
    __right = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), 'right', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblBorders_httpschemas_openxmlformats_orgwordprocessingml2006mainright', False)

    
    right = property(__right.value, __right.set, None, u'Table Trailing Edge Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}insideV uses Python identifier insideV
    __insideV = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'insideV'), 'insideV', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblBorders_httpschemas_openxmlformats_orgwordprocessingml2006maininsideV', False)

    
    insideV = property(__insideV.value, __insideV.set, None, u'Table Inside Vertical Edges Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}left uses Python identifier left
    __left = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), 'left', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblBorders_httpschemas_openxmlformats_orgwordprocessingml2006mainleft', False)

    
    left = property(__left.value, __left.set, None, u'Table Leading Edge Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bottom uses Python identifier bottom
    __bottom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom'), 'bottom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblBorders_httpschemas_openxmlformats_orgwordprocessingml2006mainbottom', False)

    
    bottom = property(__bottom.value, __bottom.set, None, u'Table Bottom Border')


    _ElementMap = {
        __end.name() : __end,
        __top.name() : __top,
        __insideH.name() : __insideH,
        __start.name() : __start,
        __right.name() : __right,
        __insideV.name() : __insideV,
        __left.name() : __left,
        __bottom.name() : __bottom
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblBorders', CT_TblBorders)


# Complex type CT_PPrChange with content type ELEMENT_ONLY
class CT_PPrChange (CT_TrackChange):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_PPrChange')
    # Base type is CT_TrackChange
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pPr uses Python identifier pPr
    __pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr'), 'pPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPrChange_httpschemas_openxmlformats_orgwordprocessingml2006mainpPr', False)

    
    pPr = property(__pPr.value, __pPr.set, None, u'Previous Paragraph Properties')

    
    # Attribute date inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute author inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange

    _ElementMap = CT_TrackChange._ElementMap.copy()
    _ElementMap.update({
        __pPr.name() : __pPr
    })
    _AttributeMap = CT_TrackChange._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_PPrChange', CT_PPrChange)


# Complex type CT_Numbering with content type ELEMENT_ONLY
class CT_Numbering (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Numbering')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numIdMacAtCleanup uses Python identifier numIdMacAtCleanup
    __numIdMacAtCleanup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numIdMacAtCleanup'), 'numIdMacAtCleanup', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Numbering_httpschemas_openxmlformats_orgwordprocessingml2006mainnumIdMacAtCleanup', False)

    
    numIdMacAtCleanup = property(__numIdMacAtCleanup.value, __numIdMacAtCleanup.set, None, u'Last Reviewed Abstract Numbering Definition')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numPicBullet uses Python identifier numPicBullet
    __numPicBullet = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numPicBullet'), 'numPicBullet', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Numbering_httpschemas_openxmlformats_orgwordprocessingml2006mainnumPicBullet', True)

    
    numPicBullet = property(__numPicBullet.value, __numPicBullet.set, None, u'Picture Numbering Symbol Definition')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}abstractNum uses Python identifier abstractNum
    __abstractNum = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'abstractNum'), 'abstractNum', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Numbering_httpschemas_openxmlformats_orgwordprocessingml2006mainabstractNum', True)

    
    abstractNum = property(__abstractNum.value, __abstractNum.set, None, u'Abstract Numbering Definition')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}num uses Python identifier num
    __num = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'num'), 'num', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Numbering_httpschemas_openxmlformats_orgwordprocessingml2006mainnum', True)

    
    num = property(__num.value, __num.set, None, u'Numbering Definition Instance')


    _ElementMap = {
        __numIdMacAtCleanup.name() : __numIdMacAtCleanup,
        __numPicBullet.name() : __numPicBullet,
        __abstractNum.name() : __abstractNum,
        __num.name() : __num
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Numbering', CT_Numbering)


# Complex type CT_Divs with content type ELEMENT_ONLY
class CT_Divs (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Divs')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}div uses Python identifier div
    __div = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'div'), 'div', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Divs_httpschemas_openxmlformats_orgwordprocessingml2006maindiv', True)

    
    div = property(__div.value, __div.set, None, u'Information About Single HTML div Element')


    _ElementMap = {
        __div.name() : __div
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Divs', CT_Divs)


# Complex type CT_AbstractNum with content type ELEMENT_ONLY
class CT_AbstractNum (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_AbstractNum')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}styleLink uses Python identifier styleLink
    __styleLink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'styleLink'), 'styleLink', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_AbstractNum_httpschemas_openxmlformats_orgwordprocessingml2006mainstyleLink', False)

    
    styleLink = property(__styleLink.value, __styleLink.set, None, u'Numbering Style Definition')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numStyleLink uses Python identifier numStyleLink
    __numStyleLink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numStyleLink'), 'numStyleLink', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_AbstractNum_httpschemas_openxmlformats_orgwordprocessingml2006mainnumStyleLink', False)

    
    numStyleLink = property(__numStyleLink.value, __numStyleLink.set, None, u'Numbering Style Reference')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lvl uses Python identifier lvl
    __lvl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lvl'), 'lvl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_AbstractNum_httpschemas_openxmlformats_orgwordprocessingml2006mainlvl', True)

    
    lvl = property(__lvl.value, __lvl.set, None, u'Numbering Level Definition')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}nsid uses Python identifier nsid
    __nsid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'nsid'), 'nsid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_AbstractNum_httpschemas_openxmlformats_orgwordprocessingml2006mainnsid', False)

    
    nsid = property(__nsid.value, __nsid.set, None, u'Abstract Numbering Definition Identifier')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tmpl uses Python identifier tmpl
    __tmpl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tmpl'), 'tmpl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_AbstractNum_httpschemas_openxmlformats_orgwordprocessingml2006maintmpl', False)

    
    tmpl = property(__tmpl.value, __tmpl.set, None, u'Numbering Template Code')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}multiLevelType uses Python identifier multiLevelType
    __multiLevelType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'multiLevelType'), 'multiLevelType', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_AbstractNum_httpschemas_openxmlformats_orgwordprocessingml2006mainmultiLevelType', False)

    
    multiLevelType = property(__multiLevelType.value, __multiLevelType.set, None, u'Abstract Numbering Definition Type')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_AbstractNum_httpschemas_openxmlformats_orgwordprocessingml2006mainname', False)

    
    name = property(__name.value, __name.set, None, u'Abstract Numbering Definition Name')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}abstractNumId uses Python identifier abstractNumId
    __abstractNumId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'abstractNumId'), 'abstractNumId', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_AbstractNum_httpschemas_openxmlformats_orgwordprocessingml2006mainabstractNumId', ST_DecimalNumber, required=True)
    
    abstractNumId = property(__abstractNumId.value, __abstractNumId.set, None, u'Abstract Numbering Definition ID')


    _ElementMap = {
        __styleLink.name() : __styleLink,
        __numStyleLink.name() : __numStyleLink,
        __lvl.name() : __lvl,
        __nsid.name() : __nsid,
        __tmpl.name() : __tmpl,
        __multiLevelType.name() : __multiLevelType,
        __name.name() : __name
    }
    _AttributeMap = {
        __abstractNumId.name() : __abstractNumId
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_AbstractNum', CT_AbstractNum)


# Complex type CT_Guid with content type EMPTY
class CT_Guid (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Guid')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Guid_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_Guid)
    
    val = property(__val.value, __val.set, None, u'GUID Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Guid', CT_Guid)


# Complex type CT_SSupPr with content type ELEMENT_ONLY
class CT_SSupPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_SSupPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SSupPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)


    _ElementMap = {
        __ctrlPr.name() : __ctrlPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_SSupPr', CT_SSupPr)


# Complex type CT_SdtComboBox with content type ELEMENT_ONLY
class CT_SdtComboBox (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtComboBox')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}listItem uses Python identifier listItem
    __listItem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'listItem'), 'listItem', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtComboBox_httpschemas_openxmlformats_orgwordprocessingml2006mainlistItem', True)

    
    listItem = property(__listItem.value, __listItem.set, None, u'Combo Box List Item')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lastValue uses Python identifier lastValue
    __lastValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lastValue'), 'lastValue', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtComboBox_httpschemas_openxmlformats_orgwordprocessingml2006mainlastValue', _s.ST_String)
    
    lastValue = property(__lastValue.value, __lastValue.set, None, u'Combo Box Last Saved Value')


    _ElementMap = {
        __listItem.name() : __listItem
    }
    _AttributeMap = {
        __lastValue.name() : __lastValue
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtComboBox', CT_SdtComboBox)


# Complex type CT_FrameScrollbar with content type EMPTY
class CT_FrameScrollbar (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FrameScrollbar')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FrameScrollbar_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_FrameScrollbar, required=True)
    
    val = property(__val.value, __val.set, None, u'Scrollbar Display Option Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FrameScrollbar', CT_FrameScrollbar)


# Complex type CT_DecimalNumberOrPrecent with content type EMPTY
class CT_DecimalNumberOrPrecent (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DecimalNumberOrPrecent')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DecimalNumberOrPrecent_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_DecimalNumberOrPercent, required=True)
    
    val = property(__val.value, __val.set, None, u'Value in Percent')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DecimalNumberOrPrecent', CT_DecimalNumberOrPrecent)


# Complex type CT_EqArrPr with content type ELEMENT_ONLY
class CT_EqArrPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_EqArrPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}rSp uses Python identifier rSp
    __rSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'rSp'), 'rSp', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_EqArrPr_httpschemas_openxmlformats_orgofficeDocument2006mathrSp', False)

    
    rSp = property(__rSp.value, __rSp.set, None, u'Row Spacing (Array)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}rSpRule uses Python identifier rSpRule
    __rSpRule = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'rSpRule'), 'rSpRule', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_EqArrPr_httpschemas_openxmlformats_orgofficeDocument2006mathrSpRule', False)

    
    rSpRule = property(__rSpRule.value, __rSpRule.set, None, u'Row Spacing Rule')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}baseJc uses Python identifier baseJc
    __baseJc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'baseJc'), 'baseJc', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_EqArrPr_httpschemas_openxmlformats_orgofficeDocument2006mathbaseJc', False)

    
    baseJc = property(__baseJc.value, __baseJc.set, None, u'Equation Array Base Justification')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}maxDist uses Python identifier maxDist
    __maxDist = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'maxDist'), 'maxDist', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_EqArrPr_httpschemas_openxmlformats_orgofficeDocument2006mathmaxDist', False)

    
    maxDist = property(__maxDist.value, __maxDist.set, None, u'Maximum Distribution')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_EqArrPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}objDist uses Python identifier objDist
    __objDist = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'objDist'), 'objDist', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_EqArrPr_httpschemas_openxmlformats_orgofficeDocument2006mathobjDist', False)

    
    objDist = property(__objDist.value, __objDist.set, None, u'Object Distribution')


    _ElementMap = {
        __rSp.name() : __rSp,
        __rSpRule.name() : __rSpRule,
        __baseJc.name() : __baseJc,
        __maxDist.name() : __maxDist,
        __ctrlPr.name() : __ctrlPr,
        __objDist.name() : __objDist
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_EqArrPr', CT_EqArrPr)


# Complex type CT_Lvl with content type ELEMENT_ONLY
class CT_Lvl (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Lvl')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}isLgl uses Python identifier isLgl
    __isLgl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'isLgl'), 'isLgl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lvl_httpschemas_openxmlformats_orgwordprocessingml2006mainisLgl', False)

    
    isLgl = property(__isLgl.value, __isLgl.set, None, u'Display All Levels Using Arabic Numerals')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pPr uses Python identifier pPr
    __pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr'), 'pPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lvl_httpschemas_openxmlformats_orgwordprocessingml2006mainpPr', False)

    
    pPr = property(__pPr.value, __pPr.set, None, u'Numbering Level Associated Paragraph Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}start uses Python identifier start
    __start = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'start'), 'start', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lvl_httpschemas_openxmlformats_orgwordprocessingml2006mainstart', False)

    
    start = property(__start.value, __start.set, None, u'Starting Value')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lvl_httpschemas_openxmlformats_orgwordprocessingml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Numbering Symbol Run Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lvlText uses Python identifier lvlText
    __lvlText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lvlText'), 'lvlText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lvl_httpschemas_openxmlformats_orgwordprocessingml2006mainlvlText', False)

    
    lvlText = property(__lvlText.value, __lvlText.set, None, u'Numbering Level Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numFmt uses Python identifier numFmt
    __numFmt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numFmt'), 'numFmt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lvl_httpschemas_openxmlformats_orgwordprocessingml2006mainnumFmt', False)

    
    numFmt = property(__numFmt.value, __numFmt.set, None, u'Numbering Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}suff uses Python identifier suff
    __suff = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'suff'), 'suff', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lvl_httpschemas_openxmlformats_orgwordprocessingml2006mainsuff', False)

    
    suff = property(__suff.value, __suff.set, None, u'Content Between Numbering Symbol and Paragraph Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lvlPicBulletId uses Python identifier lvlPicBulletId
    __lvlPicBulletId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lvlPicBulletId'), 'lvlPicBulletId', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lvl_httpschemas_openxmlformats_orgwordprocessingml2006mainlvlPicBulletId', False)

    
    lvlPicBulletId = property(__lvlPicBulletId.value, __lvlPicBulletId.set, None, u'Picture Numbering Symbol Definition Reference')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lvlRestart uses Python identifier lvlRestart
    __lvlRestart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lvlRestart'), 'lvlRestart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lvl_httpschemas_openxmlformats_orgwordprocessingml2006mainlvlRestart', False)

    
    lvlRestart = property(__lvlRestart.value, __lvlRestart.set, None, u'Restart Numbering Level Symbol')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}legacy uses Python identifier legacy
    __legacy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'legacy'), 'legacy', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lvl_httpschemas_openxmlformats_orgwordprocessingml2006mainlegacy', False)

    
    legacy = property(__legacy.value, __legacy.set, None, u'Legacy Numbering Level Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pStyle uses Python identifier pStyle
    __pStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pStyle'), 'pStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lvl_httpschemas_openxmlformats_orgwordprocessingml2006mainpStyle', False)

    
    pStyle = property(__pStyle.value, __pStyle.set, None, u"Paragraph Style's Associated Numbering Level")

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lvlJc uses Python identifier lvlJc
    __lvlJc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lvlJc'), 'lvlJc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lvl_httpschemas_openxmlformats_orgwordprocessingml2006mainlvlJc', False)

    
    lvlJc = property(__lvlJc.value, __lvlJc.set, None, u'Justification')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ilvl uses Python identifier ilvl
    __ilvl = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ilvl'), 'ilvl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lvl_httpschemas_openxmlformats_orgwordprocessingml2006mainilvl', ST_DecimalNumber, required=True)
    
    ilvl = property(__ilvl.value, __ilvl.set, None, u'Numbering Level')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tentative uses Python identifier tentative
    __tentative = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tentative'), 'tentative', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lvl_httpschemas_openxmlformats_orgwordprocessingml2006maintentative', _s.ST_OnOff)
    
    tentative = property(__tentative.value, __tentative.set, None, u'Tentative Numbering')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tplc uses Python identifier tplc
    __tplc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tplc'), 'tplc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lvl_httpschemas_openxmlformats_orgwordprocessingml2006maintplc', ST_LongHexNumber)
    
    tplc = property(__tplc.value, __tplc.set, None, u'Template Code')


    _ElementMap = {
        __isLgl.name() : __isLgl,
        __pPr.name() : __pPr,
        __start.name() : __start,
        __rPr.name() : __rPr,
        __lvlText.name() : __lvlText,
        __numFmt.name() : __numFmt,
        __suff.name() : __suff,
        __lvlPicBulletId.name() : __lvlPicBulletId,
        __lvlRestart.name() : __lvlRestart,
        __legacy.name() : __legacy,
        __pStyle.name() : __pStyle,
        __lvlJc.name() : __lvlJc
    }
    _AttributeMap = {
        __ilvl.name() : __ilvl,
        __tentative.name() : __tentative,
        __tplc.name() : __tplc
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Lvl', CT_Lvl)


# Complex type CT_MathPr with content type ELEMENT_ONLY
class CT_MathPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_MathPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}defJc uses Python identifier defJc
    __defJc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'defJc'), 'defJc', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathdefJc', False)

    
    defJc = property(__defJc.value, __defJc.set, None, u'Default Justification')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}smallFrac uses Python identifier smallFrac
    __smallFrac = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'smallFrac'), 'smallFrac', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathsmallFrac', False)

    
    smallFrac = property(__smallFrac.value, __smallFrac.set, None, u'Small Fraction')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}wrapIndent uses Python identifier wrapIndent
    __wrapIndent = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'wrapIndent'), 'wrapIndent', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathwrapIndent', False)

    
    wrapIndent = property(__wrapIndent.value, __wrapIndent.set, None, u'Wrap Indent')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}preSp uses Python identifier preSp
    __preSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'preSp'), 'preSp', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathpreSp', False)

    
    preSp = property(__preSp.value, __preSp.set, None, u'Pre-Paragraph Spacing')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}wrapRight uses Python identifier wrapRight
    __wrapRight = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'wrapRight'), 'wrapRight', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathwrapRight', False)

    
    wrapRight = property(__wrapRight.value, __wrapRight.set, None, u'Wrap Right')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}postSp uses Python identifier postSp
    __postSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'postSp'), 'postSp', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathpostSp', False)

    
    postSp = property(__postSp.value, __postSp.set, None, u'Post-Paragraph Spacing')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}dispDef uses Python identifier dispDef
    __dispDef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'dispDef'), 'dispDef', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathdispDef', False)

    
    dispDef = property(__dispDef.value, __dispDef.set, None, u'Use Display Math Defaults')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}brkBinSub uses Python identifier brkBinSub
    __brkBinSub = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'brkBinSub'), 'brkBinSub', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathbrkBinSub', False)

    
    brkBinSub = property(__brkBinSub.value, __brkBinSub.set, None, u'Break on Binary Subtraction')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}lMargin uses Python identifier lMargin
    __lMargin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'lMargin'), 'lMargin', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathlMargin', False)

    
    lMargin = property(__lMargin.value, __lMargin.set, None, u'Left Margin')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}interSp uses Python identifier interSp
    __interSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'interSp'), 'interSp', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathinterSp', False)

    
    interSp = property(__interSp.value, __interSp.set, None, u'Inter-Equation Spacing')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}naryLim uses Python identifier naryLim
    __naryLim = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'naryLim'), 'naryLim', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathnaryLim', False)

    
    naryLim = property(__naryLim.value, __naryLim.set, None, u'n-ary Limit Location')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}intLim uses Python identifier intLim
    __intLim = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'intLim'), 'intLim', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathintLim', False)

    
    intLim = property(__intLim.value, __intLim.set, None, u'Integral Limit Locations')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}intraSp uses Python identifier intraSp
    __intraSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'intraSp'), 'intraSp', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathintraSp', False)

    
    intraSp = property(__intraSp.value, __intraSp.set, None, u'Intra-Equation Spacing')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}rMargin uses Python identifier rMargin
    __rMargin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'rMargin'), 'rMargin', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathrMargin', False)

    
    rMargin = property(__rMargin.value, __rMargin.set, None, u'Right Margin')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}brkBin uses Python identifier brkBin
    __brkBin = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'brkBin'), 'brkBin', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathbrkBin', False)

    
    brkBin = property(__brkBin.value, __brkBin.set, None, u'Break on Binary Operators')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}mathFont uses Python identifier mathFont
    __mathFont = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'mathFont'), 'mathFont', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MathPr_httpschemas_openxmlformats_orgofficeDocument2006mathmathFont', False)

    
    mathFont = property(__mathFont.value, __mathFont.set, None, u'Math Font')


    _ElementMap = {
        __defJc.name() : __defJc,
        __smallFrac.name() : __smallFrac,
        __wrapIndent.name() : __wrapIndent,
        __preSp.name() : __preSp,
        __wrapRight.name() : __wrapRight,
        __postSp.name() : __postSp,
        __dispDef.name() : __dispDef,
        __brkBinSub.name() : __brkBinSub,
        __lMargin.name() : __lMargin,
        __interSp.name() : __interSp,
        __naryLim.name() : __naryLim,
        __intLim.name() : __intLim,
        __intraSp.name() : __intraSp,
        __rMargin.name() : __rMargin,
        __brkBin.name() : __brkBin,
        __mathFont.name() : __mathFont
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_MathPr', CT_MathPr)


# Complex type CT_FFData with content type ELEMENT_ONLY
class CT_FFData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FFData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFData_httpschemas_openxmlformats_orgwordprocessingml2006mainname', True)

    
    name = property(__name.value, __name.set, None, u'Form Field Name')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ddList uses Python identifier ddList
    __ddList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ddList'), 'ddList', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFData_httpschemas_openxmlformats_orgwordprocessingml2006mainddList', True)

    
    ddList = property(__ddList.value, __ddList.set, None, u'Drop-Down List Form Field Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}exitMacro uses Python identifier exitMacro
    __exitMacro = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'exitMacro'), 'exitMacro', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFData_httpschemas_openxmlformats_orgwordprocessingml2006mainexitMacro', True)

    
    exitMacro = property(__exitMacro.value, __exitMacro.set, None, u'Script Function to Execute on Form Field Exit')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}textInput uses Python identifier textInput
    __textInput = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'textInput'), 'textInput', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFData_httpschemas_openxmlformats_orgwordprocessingml2006maintextInput', True)

    
    textInput = property(__textInput.value, __textInput.set, None, u'Text Box Form Field Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}label uses Python identifier label
    __label = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'label'), 'label', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFData_httpschemas_openxmlformats_orgwordprocessingml2006mainlabel', True)

    
    label = property(__label.value, __label.set, None, u'Form Field Label')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}helpText uses Python identifier helpText
    __helpText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'helpText'), 'helpText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFData_httpschemas_openxmlformats_orgwordprocessingml2006mainhelpText', True)

    
    helpText = property(__helpText.value, __helpText.set, None, u'Associated Help Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tabIndex uses Python identifier tabIndex
    __tabIndex = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tabIndex'), 'tabIndex', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFData_httpschemas_openxmlformats_orgwordprocessingml2006maintabIndex', True)

    
    tabIndex = property(__tabIndex.value, __tabIndex.set, None, u'Form Field Navigation Order Index')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}entryMacro uses Python identifier entryMacro
    __entryMacro = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'entryMacro'), 'entryMacro', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFData_httpschemas_openxmlformats_orgwordprocessingml2006mainentryMacro', True)

    
    entryMacro = property(__entryMacro.value, __entryMacro.set, None, u'Script Function to Execute on Form Field Entry')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}statusText uses Python identifier statusText
    __statusText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'statusText'), 'statusText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFData_httpschemas_openxmlformats_orgwordprocessingml2006mainstatusText', True)

    
    statusText = property(__statusText.value, __statusText.set, None, u'Associated Status Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}enabled uses Python identifier enabled
    __enabled = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'enabled'), 'enabled', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFData_httpschemas_openxmlformats_orgwordprocessingml2006mainenabled', True)

    
    enabled = property(__enabled.value, __enabled.set, None, u'Form Field Enabled')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}calcOnExit uses Python identifier calcOnExit
    __calcOnExit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'calcOnExit'), 'calcOnExit', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFData_httpschemas_openxmlformats_orgwordprocessingml2006maincalcOnExit', True)

    
    calcOnExit = property(__calcOnExit.value, __calcOnExit.set, None, u'Recalculate Fields When Current Field Is Modified')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}checkBox uses Python identifier checkBox
    __checkBox = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'checkBox'), 'checkBox', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFData_httpschemas_openxmlformats_orgwordprocessingml2006maincheckBox', True)

    
    checkBox = property(__checkBox.value, __checkBox.set, None, u'Checkbox Form Field Properties')


    _ElementMap = {
        __name.name() : __name,
        __ddList.name() : __ddList,
        __exitMacro.name() : __exitMacro,
        __textInput.name() : __textInput,
        __label.name() : __label,
        __helpText.name() : __helpText,
        __tabIndex.name() : __tabIndex,
        __entryMacro.name() : __entryMacro,
        __statusText.name() : __statusText,
        __enabled.name() : __enabled,
        __calcOnExit.name() : __calcOnExit,
        __checkBox.name() : __checkBox
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FFData', CT_FFData)


# Complex type CT_AutoCaptions with content type ELEMENT_ONLY
class CT_AutoCaptions (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_AutoCaptions')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}autoCaption uses Python identifier autoCaption
    __autoCaption = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'autoCaption'), 'autoCaption', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_AutoCaptions_httpschemas_openxmlformats_orgwordprocessingml2006mainautoCaption', True)

    
    autoCaption = property(__autoCaption.value, __autoCaption.set, None, u'Single Automatic Captioning Setting')


    _ElementMap = {
        __autoCaption.name() : __autoCaption
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_AutoCaptions', CT_AutoCaptions)


# Complex type CT_HdrFtr with content type ELEMENT_ONLY
class CT_HdrFtr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_HdrFtr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tbl uses Python identifier tbl
    __tbl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), 'tbl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006maintbl', True)

    
    tbl = property(__tbl.value, __tbl.set, None, u'Table')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}altChunk uses Python identifier altChunk
    __altChunk = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk'), 'altChunk', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006mainaltChunk', True)

    
    altChunk = property(__altChunk.value, __altChunk.set, None, u'Anchor for Imported External Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Block-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Block-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), 'p', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HdrFtr_httpschemas_openxmlformats_orgwordprocessingml2006mainp', True)

    
    p = property(__p.value, __p.set, None, u'Paragraph')


    _ElementMap = {
        __tbl.name() : __tbl,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __oMathPara.name() : __oMathPara,
        __bookmarkStart.name() : __bookmarkStart,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __commentRangeStart.name() : __commentRangeStart,
        __moveToRangeStart.name() : __moveToRangeStart,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __ins.name() : __ins,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __altChunk.name() : __altChunk,
        __customXml.name() : __customXml,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __sdt.name() : __sdt,
        __p.name() : __p
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_HdrFtr', CT_HdrFtr)


# Complex type CT_DocPartPr with content type ELEMENT_ONLY
class CT_DocPartPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocPartPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}behaviors uses Python identifier behaviors
    __behaviors = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'behaviors'), 'behaviors', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartPr_httpschemas_openxmlformats_orgwordprocessingml2006mainbehaviors', True)

    
    behaviors = property(__behaviors.value, __behaviors.set, None, u'Entry Insertion Behaviors')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartPr_httpschemas_openxmlformats_orgwordprocessingml2006mainname', True)

    
    name = property(__name.value, __name.set, None, u'Entry Name')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}guid uses Python identifier guid
    __guid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'guid'), 'guid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartPr_httpschemas_openxmlformats_orgwordprocessingml2006mainguid', True)

    
    guid = property(__guid.value, __guid.set, None, u'Entry ID')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}description uses Python identifier description
    __description = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'description'), 'description', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartPr_httpschemas_openxmlformats_orgwordprocessingml2006maindescription', True)

    
    description = property(__description.value, __description.set, None, u'Description for Entry')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'style'), 'style', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartPr_httpschemas_openxmlformats_orgwordprocessingml2006mainstyle', True)

    
    style = property(__style.value, __style.set, None, u'Associated Paragraph Style Name')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}category uses Python identifier category
    __category = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'category'), 'category', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartPr_httpschemas_openxmlformats_orgwordprocessingml2006maincategory', True)

    
    category = property(__category.value, __category.set, None, u'Entry Categorization')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}types uses Python identifier types
    __types = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'types'), 'types', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartPr_httpschemas_openxmlformats_orgwordprocessingml2006maintypes', True)

    
    types = property(__types.value, __types.set, None, u'Entry Types')


    _ElementMap = {
        __behaviors.name() : __behaviors,
        __name.name() : __name,
        __guid.name() : __guid,
        __description.name() : __description,
        __style.name() : __style,
        __category.name() : __category,
        __types.name() : __types
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocPartPr', CT_DocPartPr)


# Complex type CT_SSubSupPr with content type ELEMENT_ONLY
class CT_SSubSupPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_SSubSupPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SSubSupPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}alnScr uses Python identifier alnScr
    __alnScr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'alnScr'), 'alnScr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SSubSupPr_httpschemas_openxmlformats_orgofficeDocument2006mathalnScr', False)

    
    alnScr = property(__alnScr.value, __alnScr.set, None, u'Align Scripts')


    _ElementMap = {
        __ctrlPr.name() : __ctrlPr,
        __alnScr.name() : __alnScr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_SSubSupPr', CT_SSubSupPr)


# Complex type CT_EdnPos with content type EMPTY
class CT_EdnPos (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_EdnPos')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_EdnPos_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_EdnPos, required=True)
    
    val = property(__val.value, __val.set, None, u'Endnote Position Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_EdnPos', CT_EdnPos)


# Complex type CT_CalendarType with content type EMPTY
class CT_CalendarType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_CalendarType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CalendarType_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_CalendarType)
    
    val = property(__val.value, __val.set, None, u'Calendar Type Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_CalendarType', CT_CalendarType)


# Complex type CT_Control with content type EMPTY
class CT_Control (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Control')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Control_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Control_httpschemas_openxmlformats_orgwordprocessingml2006mainname', _s.ST_String)
    
    name = property(__name.value, __name.set, None, u'Unique Name for Embedded Control')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shapeid uses Python identifier shapeid
    __shapeid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shapeid'), 'shapeid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Control_httpschemas_openxmlformats_orgwordprocessingml2006mainshapeid', _s.ST_String)
    
    shapeid = property(__shapeid.value, __shapeid.set, None, u'Shape Reference')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id,
        __name.name() : __name,
        __shapeid.name() : __shapeid
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Control', CT_Control)


# Complex type CT_DocPartName with content type EMPTY
class CT_DocPartName (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocPartName')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartName_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_String, required=True)
    
    val = property(__val.value, __val.set, None, u'Name Value')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}decorated uses Python identifier decorated
    __decorated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'decorated'), 'decorated', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartName_httpschemas_openxmlformats_orgwordprocessingml2006maindecorated', _s.ST_OnOff)
    
    decorated = property(__decorated.value, __decorated.set, None, u'Built-In Entry')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __decorated.name() : __decorated
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocPartName', CT_DocPartName)


# Complex type CT_LimLoc with content type EMPTY
class CT_LimLoc (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_LimLoc')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_LimLoc_httpschemas_openxmlformats_orgofficeDocument2006mathval', ST_LimLoc, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_LimLoc', CT_LimLoc)


# Complex type CT_ParaRPr with content type ELEMENT_ONLY
class CT_ParaRPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_ParaRPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shd uses Python identifier shd
    __shd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), 'shd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainshd', False)

    
    shd = property(__shd.value, __shd.set, None, u'Run Shading')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fitText uses Python identifier fitText
    __fitText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fitText'), 'fitText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainfitText', False)

    
    fitText = property(__fitText.value, __fitText.set, None, u'Manual Run Width')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rFonts uses Python identifier rFonts
    __rFonts = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rFonts'), 'rFonts', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrFonts', False)

    
    rFonts = property(__rFonts.value, __rFonts.set, None, u'Run Fonts')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rtl uses Python identifier rtl
    __rtl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rtl'), 'rtl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrtl', False)

    
    rtl = property(__rtl.value, __rtl.set, None, u'Right To Left Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dstrike uses Python identifier dstrike
    __dstrike = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dstrike'), 'dstrike', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006maindstrike', False)

    
    dstrike = property(__dstrike.value, __dstrike.set, None, u'Double Strikethrough')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainoMath', False)

    
    oMath = property(__oMath.value, __oMath.set, None, u'Office Open XML Math')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}emboss uses Python identifier emboss
    __emboss = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'emboss'), 'emboss', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainemboss', False)

    
    emboss = property(__emboss.value, __emboss.set, None, u'Embossing')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}em uses Python identifier em
    __em = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'em'), 'em', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainem', False)

    
    em = property(__em.value, __em.set, None, u'Emphasis Mark')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}imprint uses Python identifier imprint
    __imprint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'imprint'), 'imprint', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainimprint', False)

    
    imprint = property(__imprint.value, __imprint.set, None, u'Imprinting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}iCs uses Python identifier iCs
    __iCs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'iCs'), 'iCs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainiCs', False)

    
    iCs = property(__iCs.value, __iCs.set, None, u'Complex Script Italics')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}position uses Python identifier position
    __position = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'position'), 'position', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainposition', False)

    
    position = property(__position.value, __position.set, None, u'Vertically Raised or Lowered Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noProof uses Python identifier noProof
    __noProof = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noProof'), 'noProof', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainnoProof', False)

    
    noProof = property(__noProof.value, __noProof.set, None, u'Do Not Check Spelling or Grammar')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}i uses Python identifier i
    __i = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'i'), 'i', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006maini', False)

    
    i = property(__i.value, __i.set, None, u'Italics')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}snapToGrid uses Python identifier snapToGrid
    __snapToGrid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid'), 'snapToGrid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainsnapToGrid', False)

    
    snapToGrid = property(__snapToGrid.value, __snapToGrid.set, None, u'Use Document Grid Settings For Inter-Character Spacing')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rPrChange uses Python identifier rPrChange
    __rPrChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rPrChange'), 'rPrChange', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrPrChange', False)

    
    rPrChange = property(__rPrChange.value, __rPrChange.set, None, u'Revision Information for Run Properties on the Paragraph Mark')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vanish uses Python identifier vanish
    __vanish = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vanish'), 'vanish', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainvanish', False)

    
    vanish = property(__vanish.value, __vanish.set, None, u'Hidden Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainins', False)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}webHidden uses Python identifier webHidden
    __webHidden = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'webHidden'), 'webHidden', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainwebHidden', False)

    
    webHidden = property(__webHidden.value, __webHidden.set, None, u'Web Hidden Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006maindel', False)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bCs uses Python identifier bCs
    __bCs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bCs'), 'bCs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainbCs', False)

    
    bCs = property(__bCs.value, __bCs.set, None, u'Complex Script Bold')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'color'), 'color', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006maincolor', False)

    
    color = property(__color.value, __color.set, None, u'Run Content Color')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', False)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}spacing uses Python identifier spacing
    __spacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing'), 'spacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainspacing', False)

    
    spacing = property(__spacing.value, __spacing.set, None, u'Character Spacing Adjustment')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', False)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}w uses Python identifier w
    __w = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), 'w', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainw', False)

    
    w = property(__w.value, __w.set, None, u'Expanded/Compressed Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}effect uses Python identifier effect
    __effect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'effect'), 'effect', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006maineffect', False)

    
    effect = property(__effect.value, __effect.set, None, u'Animated Text Effect')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rStyle uses Python identifier rStyle
    __rStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rStyle'), 'rStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrStyle', False)

    
    rStyle = property(__rStyle.value, __rStyle.set, None, u'Referenced Character Style')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lang uses Python identifier lang
    __lang = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lang'), 'lang', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainlang', False)

    
    lang = property(__lang.value, __lang.set, None, u'Languages for Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}eastAsianLayout uses Python identifier eastAsianLayout
    __eastAsianLayout = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'eastAsianLayout'), 'eastAsianLayout', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006maineastAsianLayout', False)

    
    eastAsianLayout = property(__eastAsianLayout.value, __eastAsianLayout.set, None, u'East Asian Typography Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'b'), 'b', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainb', False)

    
    b = property(__b.value, __b.set, None, u'Bold')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}smallCaps uses Python identifier smallCaps
    __smallCaps = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'smallCaps'), 'smallCaps', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainsmallCaps', False)

    
    smallCaps = property(__smallCaps.value, __smallCaps.set, None, u'Small Caps')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shadow uses Python identifier shadow
    __shadow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shadow'), 'shadow', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainshadow', False)

    
    shadow = property(__shadow.value, __shadow.set, None, u'Shadow')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}szCs uses Python identifier szCs
    __szCs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'szCs'), 'szCs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainszCs', False)

    
    szCs = property(__szCs.value, __szCs.set, None, u'Complex Script Font Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}outline uses Python identifier outline
    __outline = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'outline'), 'outline', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainoutline', False)

    
    outline = property(__outline.value, __outline.set, None, u'Display Character Outline')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}highlight uses Python identifier highlight
    __highlight = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'highlight'), 'highlight', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainhighlight', False)

    
    highlight = property(__highlight.value, __highlight.set, None, u'Text Highlighting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}u uses Python identifier u
    __u = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'u'), 'u', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainu', False)

    
    u = property(__u.value, __u.set, None, u'Underline')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sz uses Python identifier sz
    __sz = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sz'), 'sz', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainsz', False)

    
    sz = property(__sz.value, __sz.set, None, u'Non-Complex Script Font Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}caps uses Python identifier caps
    __caps = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'caps'), 'caps', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006maincaps', False)

    
    caps = property(__caps.value, __caps.set, None, u'Display All Characters As Capital Letters')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}specVanish uses Python identifier specVanish
    __specVanish = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'specVanish'), 'specVanish', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainspecVanish', False)

    
    specVanish = property(__specVanish.value, __specVanish.set, None, u'Paragraph Mark Is Always Hidden')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bdr uses Python identifier bdr
    __bdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bdr'), 'bdr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainbdr', False)

    
    bdr = property(__bdr.value, __bdr.set, None, u'Text Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cs uses Python identifier cs
    __cs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cs'), 'cs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006maincs', False)

    
    cs = property(__cs.value, __cs.set, None, u'Use Complex Script Formatting on Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}strike uses Python identifier strike
    __strike = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'strike'), 'strike', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainstrike', False)

    
    strike = property(__strike.value, __strike.set, None, u'Single Strikethrough')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}kern uses Python identifier kern
    __kern = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'kern'), 'kern', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainkern', False)

    
    kern = property(__kern.value, __kern.set, None, u'Font Kerning')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vertAlign uses Python identifier vertAlign
    __vertAlign = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vertAlign'), 'vertAlign', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPr_httpschemas_openxmlformats_orgwordprocessingml2006mainvertAlign', False)

    
    vertAlign = property(__vertAlign.value, __vertAlign.set, None, u'Subscript/Superscript Text')


    _ElementMap = {
        __shd.name() : __shd,
        __fitText.name() : __fitText,
        __rFonts.name() : __rFonts,
        __rtl.name() : __rtl,
        __dstrike.name() : __dstrike,
        __oMath.name() : __oMath,
        __emboss.name() : __emboss,
        __em.name() : __em,
        __imprint.name() : __imprint,
        __iCs.name() : __iCs,
        __position.name() : __position,
        __noProof.name() : __noProof,
        __i.name() : __i,
        __snapToGrid.name() : __snapToGrid,
        __rPrChange.name() : __rPrChange,
        __vanish.name() : __vanish,
        __ins.name() : __ins,
        __webHidden.name() : __webHidden,
        __del.name() : __del,
        __bCs.name() : __bCs,
        __color.name() : __color,
        __moveFrom.name() : __moveFrom,
        __spacing.name() : __spacing,
        __moveTo.name() : __moveTo,
        __w.name() : __w,
        __effect.name() : __effect,
        __rStyle.name() : __rStyle,
        __lang.name() : __lang,
        __eastAsianLayout.name() : __eastAsianLayout,
        __b.name() : __b,
        __smallCaps.name() : __smallCaps,
        __shadow.name() : __shadow,
        __szCs.name() : __szCs,
        __outline.name() : __outline,
        __highlight.name() : __highlight,
        __u.name() : __u,
        __sz.name() : __sz,
        __caps.name() : __caps,
        __specVanish.name() : __specVanish,
        __bdr.name() : __bdr,
        __cs.name() : __cs,
        __strike.name() : __strike,
        __kern.name() : __kern,
        __vertAlign.name() : __vertAlign
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_ParaRPr', CT_ParaRPr)


# Complex type CT_Row with content type ELEMENT_ONLY
class CT_Row (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Row')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tc uses Python identifier tc
    __tc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tc'), 'tc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006maintc', True)

    
    tc = property(__tc.value, __tc.set, None, u'Table Cell')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblPrEx uses Python identifier tblPrEx
    __tblPrEx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPrEx'), 'tblPrEx', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006maintblPrEx', False)

    
    tblPrEx = property(__tblPrEx.value, __tblPrEx.set, None, u'Table-Level Property Exceptions')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}trPr uses Python identifier trPr
    __trPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'trPr'), 'trPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006maintrPr', False)

    
    trPr = property(__trPr.value, __trPr.set, None, u'Table Row Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Cell-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Cell-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidR uses Python identifier rsidR
    __rsidR = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidR'), 'rsidR', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidR', ST_LongHexNumber)
    
    rsidR = property(__rsidR.value, __rsidR.set, None, u'Revision Identifier for Table Row')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidDel uses Python identifier rsidDel
    __rsidDel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidDel'), 'rsidDel', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidDel', ST_LongHexNumber)
    
    rsidDel = property(__rsidDel.value, __rsidDel.set, None, u'Revision Identifier for Table Row Deletion')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidRPr uses Python identifier rsidRPr
    __rsidRPr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidRPr'), 'rsidRPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidRPr', ST_LongHexNumber)
    
    rsidRPr = property(__rsidRPr.value, __rsidRPr.set, None, u'Revision Identifier for Table Row Glyph Formatting')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsidTr uses Python identifier rsidTr
    __rsidTr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidTr'), 'rsidTr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Row_httpschemas_openxmlformats_orgwordprocessingml2006mainrsidTr', ST_LongHexNumber)
    
    rsidTr = property(__rsidTr.value, __rsidTr.set, None, u'Revision Identifier for Table Row Properties')


    _ElementMap = {
        __oMathPara.name() : __oMathPara,
        __oMath.name() : __oMath,
        __tc.name() : __tc,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __bookmarkStart.name() : __bookmarkStart,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __commentRangeStart.name() : __commentRangeStart,
        __commentRangeEnd.name() : __commentRangeEnd,
        __tblPrEx.name() : __tblPrEx,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __trPr.name() : __trPr,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __customXml.name() : __customXml,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __sdt.name() : __sdt,
        __ins.name() : __ins,
        __bookmarkEnd.name() : __bookmarkEnd,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd
    }
    _AttributeMap = {
        __rsidR.name() : __rsidR,
        __rsidDel.name() : __rsidDel,
        __rsidRPr.name() : __rsidRPr,
        __rsidTr.name() : __rsidTr
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Row', CT_Row)


# Complex type CT_TblGridCol with content type EMPTY
class CT_TblGridCol (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblGridCol')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), 'w', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblGridCol_httpschemas_openxmlformats_orgwordprocessingml2006mainw', _s.ST_TwipsMeasure)
    
    w = property(__w.value, __w.set, None, u'Grid Column Width')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __w.name() : __w
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblGridCol', CT_TblGridCol)


# Complex type CT_SSubPr with content type ELEMENT_ONLY
class CT_SSubPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_SSubPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SSubPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)


    _ElementMap = {
        __ctrlPr.name() : __ctrlPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_SSubPr', CT_SSubPr)


# Complex type CT_CellMergeTrackChange with content type EMPTY
class CT_CellMergeTrackChange (CT_TrackChange):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_CellMergeTrackChange')
    # Base type is CT_TrackChange
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vMerge uses Python identifier vMerge
    __vMerge = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vMerge'), 'vMerge', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CellMergeTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainvMerge', ST_AnnotationVMerge)
    
    vMerge = property(__vMerge.value, __vMerge.set, None, u'Revised Vertical Merge Setting')

    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute author inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vMergeOrig uses Python identifier vMergeOrig
    __vMergeOrig = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vMergeOrig'), 'vMergeOrig', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CellMergeTrackChange_httpschemas_openxmlformats_orgwordprocessingml2006mainvMergeOrig', ST_AnnotationVMerge)
    
    vMergeOrig = property(__vMergeOrig.value, __vMergeOrig.set, None, u'Vertical Merge Setting Removed by Revision')

    
    # Attribute date inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange

    _ElementMap = CT_TrackChange._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_TrackChange._AttributeMap.copy()
    _AttributeMap.update({
        __vMerge.name() : __vMerge,
        __vMergeOrig.name() : __vMergeOrig
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_CellMergeTrackChange', CT_CellMergeTrackChange)


# Complex type CT_ParaRPrChange with content type ELEMENT_ONLY
class CT_ParaRPrChange (CT_TrackChange):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_ParaRPrChange')
    # Base type is CT_TrackChange
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrChange_httpschemas_openxmlformats_orgwordprocessingml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Previous Run Properties for the Paragraph Mark')

    
    # Attribute date inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute author inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange

    _ElementMap = CT_TrackChange._ElementMap.copy()
    _ElementMap.update({
        __rPr.name() : __rPr
    })
    _AttributeMap = CT_TrackChange._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_ParaRPrChange', CT_ParaRPrChange)


# Complex type CT_FtnEdn with content type ELEMENT_ONLY
class CT_FtnEdn (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FtnEdn')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}altChunk uses Python identifier altChunk
    __altChunk = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk'), 'altChunk', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainaltChunk', True)

    
    altChunk = property(__altChunk.value, __altChunk.set, None, u'Anchor for Imported External Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Block-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Block-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tbl uses Python identifier tbl
    __tbl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), 'tbl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006maintbl', True)

    
    tbl = property(__tbl.value, __tbl.set, None, u'Table')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), 'p', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainp', True)

    
    p = property(__p.value, __p.set, None, u'Paragraph')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'id'), 'id', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006mainid', ST_DecimalNumber, required=True)
    
    id = property(__id.value, __id.set, None, u'Footnote/Endnote ID')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnEdn_httpschemas_openxmlformats_orgwordprocessingml2006maintype', ST_FtnEdn)
    
    type = property(__type.value, __type.set, None, u'Footnote/Endnote Type')


    _ElementMap = {
        __commentRangeStart.name() : __commentRangeStart,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __altChunk.name() : __altChunk,
        __customXml.name() : __customXml,
        __sdt.name() : __sdt,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __ins.name() : __ins,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveToRangeStart.name() : __moveToRangeStart,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __tbl.name() : __tbl,
        __oMathPara.name() : __oMathPara,
        __bookmarkStart.name() : __bookmarkStart,
        __p.name() : __p,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __moveFromRangeEnd.name() : __moveFromRangeEnd
    }
    _AttributeMap = {
        __id.name() : __id,
        __type.name() : __type
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FtnEdn', CT_FtnEdn)


# Complex type CT_ObjectLink with content type EMPTY
class CT_ObjectLink (CT_ObjectEmbed):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_ObjectLink')
    # Base type is CT_ObjectEmbed
    
    # Attribute fieldCodes inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_ObjectEmbed
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}updateMode uses Python identifier updateMode
    __updateMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'updateMode'), 'updateMode', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ObjectLink_httpschemas_openxmlformats_orgwordprocessingml2006mainupdateMode', ST_ObjectUpdateMode, required=True)
    
    updateMode = property(__updateMode.value, __updateMode.set, None, u'Object Update Mode')

    
    # Attribute drawAspect inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_ObjectEmbed
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_ObjectEmbed
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lockedField uses Python identifier lockedField
    __lockedField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lockedField'), 'lockedField', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ObjectLink_httpschemas_openxmlformats_orgwordprocessingml2006mainlockedField', _s.ST_OnOff)
    
    lockedField = property(__lockedField.value, __lockedField.set, None, u'Object Refresh Flag')

    
    # Attribute progId inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_ObjectEmbed
    
    # Attribute shapeId inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_ObjectEmbed

    _ElementMap = CT_ObjectEmbed._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_ObjectEmbed._AttributeMap.copy()
    _AttributeMap.update({
        __updateMode.name() : __updateMode,
        __lockedField.name() : __lockedField
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_ObjectLink', CT_ObjectLink)


# Complex type CT_LevelText with content type EMPTY
class CT_LevelText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_LevelText')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LevelText_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_String)
    
    val = property(__val.value, __val.set, None, u'Level Text')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}null uses Python identifier null
    __null = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'null'), 'null', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LevelText_httpschemas_openxmlformats_orgwordprocessingml2006mainnull', _s.ST_OnOff)
    
    null = property(__null.value, __null.set, None, u'Level Text Is Null Character')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __null.name() : __null
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_LevelText', CT_LevelText)


# Complex type CT_RubyContent with content type ELEMENT_ONLY
class CT_RubyContent (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_RubyContent')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), 'r', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006mainr', True)

    
    r = property(__r.value, __r.set, None, u'Phonetic Guide Text Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyContent_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')


    _ElementMap = {
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __commentRangeStart.name() : __commentRangeStart,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __permStart.name() : __permStart,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __r.name() : __r,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveFrom.name() : __moveFrom,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __oMathPara.name() : __oMathPara,
        __ins.name() : __ins,
        __bookmarkStart.name() : __bookmarkStart,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_RubyContent', CT_RubyContent)


# Complex type CT_DocPartBehavior with content type EMPTY
class CT_DocPartBehavior (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocPartBehavior')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartBehavior_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_DocPartBehavior, required=True)
    
    val = property(__val.value, __val.set, None, u'Insertion Behavior Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocPartBehavior', CT_DocPartBehavior)


# Complex type CT_GlossaryDocument with content type ELEMENT_ONLY
class CT_GlossaryDocument (CT_DocumentBase):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_GlossaryDocument')
    # Base type is CT_DocumentBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docParts uses Python identifier docParts
    __docParts = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docParts'), 'docParts', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_GlossaryDocument_httpschemas_openxmlformats_orgwordprocessingml2006maindocParts', False)

    
    docParts = property(__docParts.value, __docParts.set, None, u'List of Glossary Document Entries')

    
    # Element background ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}background) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_DocumentBase

    _ElementMap = CT_DocumentBase._ElementMap.copy()
    _ElementMap.update({
        __docParts.name() : __docParts
    })
    _AttributeMap = CT_DocumentBase._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_GlossaryDocument', CT_GlossaryDocument)


# Complex type CT_TblGridChange with content type ELEMENT_ONLY
class CT_TblGridChange (CT_Markup):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblGridChange')
    # Base type is CT_Markup
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblGrid uses Python identifier tblGrid
    __tblGrid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblGrid'), 'tblGrid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblGridChange_httpschemas_openxmlformats_orgwordprocessingml2006maintblGrid', False)

    
    tblGrid = property(__tblGrid.value, __tblGrid.set, None, u'Previous Table Grid')

    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup

    _ElementMap = CT_Markup._ElementMap.copy()
    _ElementMap.update({
        __tblGrid.name() : __tblGrid
    })
    _AttributeMap = CT_Markup._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblGridChange', CT_TblGridChange)


# Complex type CT_Attr with content type EMPTY
class CT_Attr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Attr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Attr_httpschemas_openxmlformats_orgwordprocessingml2006mainname', _s.ST_String, required=True)
    
    name = property(__name.value, __name.set, None, u'Name')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}uri uses Python identifier uri
    __uri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'uri'), 'uri', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Attr_httpschemas_openxmlformats_orgwordprocessingml2006mainuri', _s.ST_String)
    
    uri = property(__uri.value, __uri.set, None, u'Namespace')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Attr_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_String, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __name.name() : __name,
        __uri.name() : __uri,
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Attr', CT_Attr)


# Complex type CT_NumPicBullet with content type ELEMENT_ONLY
class CT_NumPicBullet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_NumPicBullet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pict uses Python identifier pict
    __pict = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pict'), 'pict', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_NumPicBullet_httpschemas_openxmlformats_orgwordprocessingml2006mainpict', False)

    
    pict = property(__pict.value, __pict.set, None, u'Picture Numbering Symbol Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}drawing uses Python identifier drawing
    __drawing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'drawing'), 'drawing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_NumPicBullet_httpschemas_openxmlformats_orgwordprocessingml2006maindrawing', False)

    
    drawing = property(__drawing.value, __drawing.set, None, None)

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numPicBulletId uses Python identifier numPicBulletId
    __numPicBulletId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numPicBulletId'), 'numPicBulletId', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_NumPicBullet_httpschemas_openxmlformats_orgwordprocessingml2006mainnumPicBulletId', ST_DecimalNumber, required=True)
    
    numPicBulletId = property(__numPicBulletId.value, __numPicBulletId.set, None, u'Picture Numbering Symbol ID')


    _ElementMap = {
        __pict.name() : __pict,
        __drawing.name() : __drawing
    }
    _AttributeMap = {
        __numPicBulletId.name() : __numPicBulletId
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_NumPicBullet', CT_NumPicBullet)


# Complex type CT_BreakBinSub with content type EMPTY
class CT_BreakBinSub (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_BreakBinSub')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BreakBinSub_httpschemas_openxmlformats_orgofficeDocument2006mathval', ST_BreakBinSub)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_BreakBinSub', CT_BreakBinSub)


# Complex type CT_FrameLayout with content type EMPTY
class CT_FrameLayout (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FrameLayout')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FrameLayout_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_FrameLayout, required=True)
    
    val = property(__val.value, __val.set, None, u'Frameset Layout Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FrameLayout', CT_FrameLayout)


# Complex type CT_MailMergeDest with content type EMPTY
class CT_MailMergeDest (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_MailMergeDest')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMergeDest_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_MailMergeDest, required=True)
    
    val = property(__val.value, __val.set, None, u'Mail Merge Merged Document Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_MailMergeDest', CT_MailMergeDest)


# Complex type CT_Num with content type ELEMENT_ONLY
class CT_Num (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Num')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lvlOverride uses Python identifier lvlOverride
    __lvlOverride = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lvlOverride'), 'lvlOverride', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Num_httpschemas_openxmlformats_orgwordprocessingml2006mainlvlOverride', True)

    
    lvlOverride = property(__lvlOverride.value, __lvlOverride.set, None, u'Numbering Level Definition Override')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}abstractNumId uses Python identifier abstractNumId
    __abstractNumId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'abstractNumId'), 'abstractNumId', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Num_httpschemas_openxmlformats_orgwordprocessingml2006mainabstractNumId', False)

    
    abstractNumId = property(__abstractNumId.value, __abstractNumId.set, None, u'Abstract Numbering Definition Reference')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numId uses Python identifier numId
    __numId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numId'), 'numId', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Num_httpschemas_openxmlformats_orgwordprocessingml2006mainnumId', ST_DecimalNumber, required=True)
    
    numId = property(__numId.value, __numId.set, None, u'Numbering Definition Instance ID')


    _ElementMap = {
        __lvlOverride.name() : __lvlOverride,
        __abstractNumId.name() : __abstractNumId
    }
    _AttributeMap = {
        __numId.name() : __numId
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Num', CT_Num)


# Complex type CT_FFDDList with content type ELEMENT_ONLY
class CT_FFDDList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FFDDList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}listEntry uses Python identifier listEntry
    __listEntry = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'listEntry'), 'listEntry', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFDDList_httpschemas_openxmlformats_orgwordprocessingml2006mainlistEntry', True)

    
    listEntry = property(__listEntry.value, __listEntry.set, None, u'Drop-Down List Entry')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}result uses Python identifier result
    __result = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'result'), 'result', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFDDList_httpschemas_openxmlformats_orgwordprocessingml2006mainresult', False)

    
    result = property(__result.value, __result.set, None, u'Drop-Down List Selection')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}default uses Python identifier default
    __default = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'default'), 'default', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFDDList_httpschemas_openxmlformats_orgwordprocessingml2006maindefault', False)

    
    default = property(__default.value, __default.set, None, u'Default Drop-Down List Item Index')


    _ElementMap = {
        __listEntry.name() : __listEntry,
        __result.name() : __result,
        __default.name() : __default
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FFDDList', CT_FFDDList)


# Complex type CT_SdtContentRow with content type ELEMENT_ONLY
class CT_SdtContentRow (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtContentRow')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tr uses Python identifier tr
    __tr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tr'), 'tr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006maintr', True)

    
    tr = property(__tr.value, __tr.set, None, u'Table Row')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Row-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Row-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRow_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')


    _ElementMap = {
        __moveTo.name() : __moveTo,
        __oMathPara.name() : __oMathPara,
        __bookmarkStart.name() : __bookmarkStart,
        __permEnd.name() : __permEnd,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __moveToRangeStart.name() : __moveToRangeStart,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __commentRangeStart.name() : __commentRangeStart,
        __commentRangeEnd.name() : __commentRangeEnd,
        __tr.name() : __tr,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __customXml.name() : __customXml,
        __sdt.name() : __sdt,
        __ins.name() : __ins,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtContentRow', CT_SdtContentRow)


# Complex type CT_Styles with content type ELEMENT_ONLY
class CT_Styles (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Styles')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}style uses Python identifier style
    __style = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'style'), 'style', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Styles_httpschemas_openxmlformats_orgwordprocessingml2006mainstyle', True)

    
    style = property(__style.value, __style.set, None, u'Style Definition')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docDefaults uses Python identifier docDefaults
    __docDefaults = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docDefaults'), 'docDefaults', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Styles_httpschemas_openxmlformats_orgwordprocessingml2006maindocDefaults', False)

    
    docDefaults = property(__docDefaults.value, __docDefaults.set, None, u'Document Default Paragraph and Run Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}latentStyles uses Python identifier latentStyles
    __latentStyles = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'latentStyles'), 'latentStyles', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Styles_httpschemas_openxmlformats_orgwordprocessingml2006mainlatentStyles', False)

    
    latentStyles = property(__latentStyles.value, __latentStyles.set, None, u'Latent Style Information')


    _ElementMap = {
        __style.name() : __style,
        __docDefaults.name() : __docDefaults,
        __latentStyles.name() : __latentStyles
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Styles', CT_Styles)


# Complex type CT_LsdException with content type EMPTY
class CT_LsdException (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_LsdException')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}locked uses Python identifier locked
    __locked = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'locked'), 'locked', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LsdException_httpschemas_openxmlformats_orgwordprocessingml2006mainlocked', _s.ST_OnOff)
    
    locked = property(__locked.value, __locked.set, None, u'Latent Style Locking Setting')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}uiPriority uses Python identifier uiPriority
    __uiPriority = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'uiPriority'), 'uiPriority', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LsdException_httpschemas_openxmlformats_orgwordprocessingml2006mainuiPriority', ST_DecimalNumber)
    
    uiPriority = property(__uiPriority.value, __uiPriority.set, None, u'Override default sorting order')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}semiHidden uses Python identifier semiHidden
    __semiHidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'semiHidden'), 'semiHidden', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LsdException_httpschemas_openxmlformats_orgwordprocessingml2006mainsemiHidden', _s.ST_OnOff)
    
    semiHidden = property(__semiHidden.value, __semiHidden.set, None, u'Semi hidden text override')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LsdException_httpschemas_openxmlformats_orgwordprocessingml2006mainname', _s.ST_String, required=True)
    
    name = property(__name.value, __name.set, None, u'Primary Style Name')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}unhideWhenUsed uses Python identifier unhideWhenUsed
    __unhideWhenUsed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'unhideWhenUsed'), 'unhideWhenUsed', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LsdException_httpschemas_openxmlformats_orgwordprocessingml2006mainunhideWhenUsed', _s.ST_OnOff)
    
    unhideWhenUsed = property(__unhideWhenUsed.value, __unhideWhenUsed.set, None, u'Unhide when used')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}qFormat uses Python identifier qFormat
    __qFormat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'qFormat'), 'qFormat', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LsdException_httpschemas_openxmlformats_orgwordprocessingml2006mainqFormat', _s.ST_OnOff)
    
    qFormat = property(__qFormat.value, __qFormat.set, None, u'Latent Style Primary Style Setting')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __locked.name() : __locked,
        __uiPriority.name() : __uiPriority,
        __semiHidden.name() : __semiHidden,
        __name.name() : __name,
        __unhideWhenUsed.name() : __unhideWhenUsed,
        __qFormat.name() : __qFormat
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_LsdException', CT_LsdException)


# Complex type CT_LvlLegacy with content type EMPTY
class CT_LvlLegacy (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_LvlLegacy')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}legacy uses Python identifier legacy
    __legacy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'legacy'), 'legacy', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LvlLegacy_httpschemas_openxmlformats_orgwordprocessingml2006mainlegacy', _s.ST_OnOff)
    
    legacy = property(__legacy.value, __legacy.set, None, u'Use Legacy Numbering Properties')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}legacyIndent uses Python identifier legacyIndent
    __legacyIndent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'legacyIndent'), 'legacyIndent', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LvlLegacy_httpschemas_openxmlformats_orgwordprocessingml2006mainlegacyIndent', ST_SignedTwipsMeasure)
    
    legacyIndent = property(__legacyIndent.value, __legacyIndent.set, None, u'Legacy Indent')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}legacySpace uses Python identifier legacySpace
    __legacySpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'legacySpace'), 'legacySpace', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_LvlLegacy_httpschemas_openxmlformats_orgwordprocessingml2006mainlegacySpace', _s.ST_TwipsMeasure)
    
    legacySpace = property(__legacySpace.value, __legacySpace.set, None, u'Legacy Spacing')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __legacy.name() : __legacy,
        __legacyIndent.name() : __legacyIndent,
        __legacySpace.name() : __legacySpace
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_LvlLegacy', CT_LvlLegacy)


# Complex type CT_ParaRPrOriginal with content type ELEMENT_ONLY
class CT_ParaRPrOriginal (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_ParaRPrOriginal')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}emboss uses Python identifier emboss
    __emboss = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'emboss'), 'emboss', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainemboss', True)

    
    emboss = property(__emboss.value, __emboss.set, None, u'Embossing')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}imprint uses Python identifier imprint
    __imprint = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'imprint'), 'imprint', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainimprint', True)

    
    imprint = property(__imprint.value, __imprint.set, None, u'Imprinting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}szCs uses Python identifier szCs
    __szCs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'szCs'), 'szCs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainszCs', True)

    
    szCs = property(__szCs.value, __szCs.set, None, u'Complex Script Font Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noProof uses Python identifier noProof
    __noProof = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noProof'), 'noProof', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainnoProof', True)

    
    noProof = property(__noProof.value, __noProof.set, None, u'Do Not Check Spelling or Grammar')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rFonts uses Python identifier rFonts
    __rFonts = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rFonts'), 'rFonts', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainrFonts', True)

    
    rFonts = property(__rFonts.value, __rFonts.set, None, u'Run Fonts')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}snapToGrid uses Python identifier snapToGrid
    __snapToGrid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid'), 'snapToGrid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainsnapToGrid', True)

    
    snapToGrid = property(__snapToGrid.value, __snapToGrid.set, None, u'Use Document Grid Settings For Inter-Character Spacing')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dstrike uses Python identifier dstrike
    __dstrike = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dstrike'), 'dstrike', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006maindstrike', True)

    
    dstrike = property(__dstrike.value, __dstrike.set, None, u'Double Strikethrough')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}specVanish uses Python identifier specVanish
    __specVanish = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'specVanish'), 'specVanish', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainspecVanish', True)

    
    specVanish = property(__specVanish.value, __specVanish.set, None, u'Paragraph Mark Is Always Hidden')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainins', False)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}em uses Python identifier em
    __em = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'em'), 'em', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainem', True)

    
    em = property(__em.value, __em.set, None, u'Emphasis Mark')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, u'Office Open XML Math')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006maindel', False)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'b'), 'b', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainb', True)

    
    b = property(__b.value, __b.set, None, u'Bold')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'color'), 'color', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006maincolor', True)

    
    color = property(__color.value, __color.set, None, u'Run Content Color')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', False)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}spacing uses Python identifier spacing
    __spacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing'), 'spacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainspacing', True)

    
    spacing = property(__spacing.value, __spacing.set, None, u'Character Spacing Adjustment')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', False)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}w uses Python identifier w
    __w = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), 'w', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainw', True)

    
    w = property(__w.value, __w.set, None, u'Expanded/Compressed Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}effect uses Python identifier effect
    __effect = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'effect'), 'effect', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006maineffect', True)

    
    effect = property(__effect.value, __effect.set, None, u'Animated Text Effect')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rStyle uses Python identifier rStyle
    __rStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rStyle'), 'rStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainrStyle', True)

    
    rStyle = property(__rStyle.value, __rStyle.set, None, u'Referenced Character Style')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}smallCaps uses Python identifier smallCaps
    __smallCaps = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'smallCaps'), 'smallCaps', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainsmallCaps', True)

    
    smallCaps = property(__smallCaps.value, __smallCaps.set, None, u'Small Caps')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lang uses Python identifier lang
    __lang = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lang'), 'lang', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainlang', True)

    
    lang = property(__lang.value, __lang.set, None, u'Languages for Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}position uses Python identifier position
    __position = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'position'), 'position', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainposition', True)

    
    position = property(__position.value, __position.set, None, u'Vertically Raised or Lowered Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vertAlign uses Python identifier vertAlign
    __vertAlign = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vertAlign'), 'vertAlign', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainvertAlign', True)

    
    vertAlign = property(__vertAlign.value, __vertAlign.set, None, u'Subscript/Superscript Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sz uses Python identifier sz
    __sz = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sz'), 'sz', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainsz', True)

    
    sz = property(__sz.value, __sz.set, None, u'Non-Complex Script Font Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bCs uses Python identifier bCs
    __bCs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bCs'), 'bCs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainbCs', True)

    
    bCs = property(__bCs.value, __bCs.set, None, u'Complex Script Bold')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}webHidden uses Python identifier webHidden
    __webHidden = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'webHidden'), 'webHidden', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainwebHidden', True)

    
    webHidden = property(__webHidden.value, __webHidden.set, None, u'Web Hidden Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shadow uses Python identifier shadow
    __shadow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shadow'), 'shadow', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainshadow', True)

    
    shadow = property(__shadow.value, __shadow.set, None, u'Shadow')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}u uses Python identifier u
    __u = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'u'), 'u', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainu', True)

    
    u = property(__u.value, __u.set, None, u'Underline')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}eastAsianLayout uses Python identifier eastAsianLayout
    __eastAsianLayout = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'eastAsianLayout'), 'eastAsianLayout', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006maineastAsianLayout', True)

    
    eastAsianLayout = property(__eastAsianLayout.value, __eastAsianLayout.set, None, u'East Asian Typography Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}caps uses Python identifier caps
    __caps = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'caps'), 'caps', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006maincaps', True)

    
    caps = property(__caps.value, __caps.set, None, u'Display All Characters As Capital Letters')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}i uses Python identifier i
    __i = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'i'), 'i', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006maini', True)

    
    i = property(__i.value, __i.set, None, u'Italics')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cs uses Python identifier cs
    __cs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cs'), 'cs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006maincs', True)

    
    cs = property(__cs.value, __cs.set, None, u'Use Complex Script Formatting on Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bdr uses Python identifier bdr
    __bdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bdr'), 'bdr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainbdr', True)

    
    bdr = property(__bdr.value, __bdr.set, None, u'Text Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vanish uses Python identifier vanish
    __vanish = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vanish'), 'vanish', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainvanish', True)

    
    vanish = property(__vanish.value, __vanish.set, None, u'Hidden Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shd uses Python identifier shd
    __shd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), 'shd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainshd', True)

    
    shd = property(__shd.value, __shd.set, None, u'Run Shading')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fitText uses Python identifier fitText
    __fitText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fitText'), 'fitText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainfitText', True)

    
    fitText = property(__fitText.value, __fitText.set, None, u'Manual Run Width')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}outline uses Python identifier outline
    __outline = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'outline'), 'outline', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainoutline', True)

    
    outline = property(__outline.value, __outline.set, None, u'Display Character Outline')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}strike uses Python identifier strike
    __strike = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'strike'), 'strike', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainstrike', True)

    
    strike = property(__strike.value, __strike.set, None, u'Single Strikethrough')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}highlight uses Python identifier highlight
    __highlight = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'highlight'), 'highlight', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainhighlight', True)

    
    highlight = property(__highlight.value, __highlight.set, None, u'Text Highlighting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rtl uses Python identifier rtl
    __rtl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rtl'), 'rtl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainrtl', True)

    
    rtl = property(__rtl.value, __rtl.set, None, u'Right To Left Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}iCs uses Python identifier iCs
    __iCs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'iCs'), 'iCs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainiCs', True)

    
    iCs = property(__iCs.value, __iCs.set, None, u'Complex Script Italics')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}kern uses Python identifier kern
    __kern = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'kern'), 'kern', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ParaRPrOriginal_httpschemas_openxmlformats_orgwordprocessingml2006mainkern', True)

    
    kern = property(__kern.value, __kern.set, None, u'Font Kerning')


    _ElementMap = {
        __emboss.name() : __emboss,
        __imprint.name() : __imprint,
        __szCs.name() : __szCs,
        __noProof.name() : __noProof,
        __rFonts.name() : __rFonts,
        __snapToGrid.name() : __snapToGrid,
        __dstrike.name() : __dstrike,
        __specVanish.name() : __specVanish,
        __ins.name() : __ins,
        __em.name() : __em,
        __oMath.name() : __oMath,
        __del.name() : __del,
        __b.name() : __b,
        __color.name() : __color,
        __moveFrom.name() : __moveFrom,
        __spacing.name() : __spacing,
        __moveTo.name() : __moveTo,
        __w.name() : __w,
        __effect.name() : __effect,
        __rStyle.name() : __rStyle,
        __smallCaps.name() : __smallCaps,
        __lang.name() : __lang,
        __position.name() : __position,
        __vertAlign.name() : __vertAlign,
        __sz.name() : __sz,
        __bCs.name() : __bCs,
        __webHidden.name() : __webHidden,
        __shadow.name() : __shadow,
        __u.name() : __u,
        __eastAsianLayout.name() : __eastAsianLayout,
        __caps.name() : __caps,
        __i.name() : __i,
        __cs.name() : __cs,
        __bdr.name() : __bdr,
        __vanish.name() : __vanish,
        __shd.name() : __shd,
        __fitText.name() : __fitText,
        __outline.name() : __outline,
        __strike.name() : __strike,
        __highlight.name() : __highlight,
        __rtl.name() : __rtl,
        __iCs.name() : __iCs,
        __kern.name() : __kern
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_ParaRPrOriginal', CT_ParaRPrOriginal)


# Complex type CT_Ruby with content type ELEMENT_ONLY
class CT_Ruby (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Ruby')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rubyBase uses Python identifier rubyBase
    __rubyBase = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rubyBase'), 'rubyBase', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Ruby_httpschemas_openxmlformats_orgwordprocessingml2006mainrubyBase', False)

    
    rubyBase = property(__rubyBase.value, __rubyBase.set, None, u'Phonetic Guide Base Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rubyPr uses Python identifier rubyPr
    __rubyPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rubyPr'), 'rubyPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Ruby_httpschemas_openxmlformats_orgwordprocessingml2006mainrubyPr', False)

    
    rubyPr = property(__rubyPr.value, __rubyPr.set, None, u'Phonetic Guide Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rt uses Python identifier rt
    __rt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rt'), 'rt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Ruby_httpschemas_openxmlformats_orgwordprocessingml2006mainrt', False)

    
    rt = property(__rt.value, __rt.set, None, u'Phonetic Guide Text')


    _ElementMap = {
        __rubyBase.name() : __rubyBase,
        __rubyPr.name() : __rubyPr,
        __rt.name() : __rt
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Ruby', CT_Ruby)


# Complex type CT_Charset with content type EMPTY
class CT_Charset (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Charset')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Charset_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_UcharHexNumber, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}characterSet uses Python identifier characterSet
    __characterSet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'characterSet'), 'characterSet', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Charset_httpschemas_openxmlformats_orgwordprocessingml2006maincharacterSet', _s.ST_String)
    
    characterSet = property(__characterSet.value, __characterSet.set, None, u'IANA Name of Character Set')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __characterSet.name() : __characterSet
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Charset', CT_Charset)


# Complex type CT_SdtContentCell with content type ELEMENT_ONLY
class CT_SdtContentCell (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtContentCell')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tc uses Python identifier tc
    __tc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tc'), 'tc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006maintc', True)

    
    tc = property(__tc.value, __tc.set, None, u'Table Cell')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Cell-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Cell-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentCell_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')


    _ElementMap = {
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __tc.name() : __tc,
        __customXml.name() : __customXml,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __ins.name() : __ins,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __oMathPara.name() : __oMathPara,
        __sdt.name() : __sdt,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __bookmarkStart.name() : __bookmarkStart,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __commentRangeStart.name() : __commentRangeStart,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtContentCell', CT_SdtContentCell)


# Complex type CT_OMathParaPr with content type ELEMENT_ONLY
class CT_OMathParaPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_OMathParaPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}jc uses Python identifier jc
    __jc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'jc'), 'jc', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathParaPr_httpschemas_openxmlformats_orgofficeDocument2006mathjc', False)

    
    jc = property(__jc.value, __jc.set, None, u'Justification')


    _ElementMap = {
        __jc.name() : __jc
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_OMathParaPr', CT_OMathParaPr)


# Complex type CT_SdtContentBlock with content type ELEMENT_ONLY
class CT_SdtContentBlock (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtContentBlock')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Block-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), 'p', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainp', True)

    
    p = property(__p.value, __p.set, None, u'Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Block-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tbl uses Python identifier tbl
    __tbl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), 'tbl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006maintbl', True)

    
    tbl = property(__tbl.value, __tbl.set, None, u'Table')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentBlock_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')


    _ElementMap = {
        __oMathPara.name() : __oMathPara,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __sdt.name() : __sdt,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __moveFrom.name() : __moveFrom,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __ins.name() : __ins,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __permStart.name() : __permStart,
        __bookmarkStart.name() : __bookmarkStart,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __p.name() : __p,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __customXml.name() : __customXml,
        __commentRangeStart.name() : __commentRangeStart,
        __tbl.name() : __tbl,
        __commentRangeEnd.name() : __commentRangeEnd
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtContentBlock', CT_SdtContentBlock)


# Complex type CT_DocParts with content type ELEMENT_ONLY
class CT_DocParts (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocParts')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docPart uses Python identifier docPart
    __docPart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docPart'), 'docPart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocParts_httpschemas_openxmlformats_orgwordprocessingml2006maindocPart', True)

    
    docPart = property(__docPart.value, __docPart.set, None, u'Glossary Document Entry')


    _ElementMap = {
        __docPart.name() : __docPart
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocParts', CT_DocParts)


# Complex type CT_Height with content type EMPTY
class CT_Height (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Height')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Height_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_TwipsMeasure)
    
    val = property(__val.value, __val.set, None, u'Table Row Height')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hRule uses Python identifier hRule
    __hRule = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hRule'), 'hRule', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Height_httpschemas_openxmlformats_orgwordprocessingml2006mainhRule', ST_HeightRule)
    
    hRule = property(__hRule.value, __hRule.set, None, u'Table Row Height Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __hRule.name() : __hRule
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Height', CT_Height)


# Complex type CT_TopPageBorder with content type EMPTY
class CT_TopPageBorder (CT_PageBorder):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TopPageBorder')
    # Base type is CT_PageBorder
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PageBorder
    
    # Attribute val inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute themeColor inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute frame inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute themeTint inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute shadow inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute sz inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute space inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute themeShade inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}topRight uses Python identifier topRight
    __topRight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'topRight'), 'topRight', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TopPageBorder_httpschemas_openxmlformats_orgofficeDocument2006relationshipstopRight', _r.ST_RelationshipId)
    
    topRight = property(__topRight.value, __topRight.set, None, None)

    
    # Attribute color inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Border
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}topLeft uses Python identifier topLeft
    __topLeft = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_r.Namespace, u'topLeft'), 'topLeft', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TopPageBorder_httpschemas_openxmlformats_orgofficeDocument2006relationshipstopLeft', _r.ST_RelationshipId)
    
    topLeft = property(__topLeft.value, __topLeft.set, None, None)


    _ElementMap = CT_PageBorder._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_PageBorder._AttributeMap.copy()
    _AttributeMap.update({
        __topRight.name() : __topRight,
        __topLeft.name() : __topLeft
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_TopPageBorder', CT_TopPageBorder)


# Complex type CT_DocPartGallery with content type EMPTY
class CT_DocPartGallery (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocPartGallery')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartGallery_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_DocPartGallery, required=True)
    
    val = property(__val.value, __val.set, None, u'Gallery Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocPartGallery', CT_DocPartGallery)


# Complex type CT_SdtContentRun with content type ELEMENT_ONLY
class CT_SdtContentRun (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtContentRun')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dir uses Python identifier dir
    __dir = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), 'dir', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maindir', True)

    
    dir = property(__dir.value, __dir.set, None, u'Bidirectional Embedding Level')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hyperlink uses Python identifier hyperlink
    __hyperlink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), 'hyperlink', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainhyperlink', True)

    
    hyperlink = property(__hyperlink.value, __hyperlink.set, None, u'Hyperlink')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}subDoc uses Python identifier subDoc
    __subDoc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), 'subDoc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsubDoc', True)

    
    subDoc = property(__subDoc.value, __subDoc.set, None, u'Anchor for Subdocument Location')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Inline-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}smartTag uses Python identifier smartTag
    __smartTag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), 'smartTag', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsmartTag', True)

    
    smartTag = property(__smartTag.value, __smartTag.set, None, u'Inline-Level Smart Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bdo uses Python identifier bdo
    __bdo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), 'bdo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainbdo', True)

    
    bdo = property(__bdo.value, __bdo.set, None, u'Bidirectional Override')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), 'r', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainr', True)

    
    r = property(__r.value, __r.set, None, u'Text Run')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Inline-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fldSimple uses Python identifier fldSimple
    __fldSimple = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), 'fldSimple', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainfldSimple', True)

    
    fldSimple = property(__fldSimple.value, __fldSimple.set, None, u'Simple Field')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtContentRun_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')


    _ElementMap = {
        __dir.name() : __dir,
        __bookmarkEnd.name() : __bookmarkEnd,
        __hyperlink.name() : __hyperlink,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __oMath.name() : __oMath,
        __subDoc.name() : __subDoc,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __oMathPara.name() : __oMathPara,
        __moveToRangeStart.name() : __moveToRangeStart,
        __customXml.name() : __customXml,
        __commentRangeStart.name() : __commentRangeStart,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __smartTag.name() : __smartTag,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __bdo.name() : __bdo,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __r.name() : __r,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __ins.name() : __ins,
        __bookmarkStart.name() : __bookmarkStart,
        __sdt.name() : __sdt,
        __fldSimple.name() : __fldSimple,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtContentRun', CT_SdtContentRun)


# Complex type CT_Comment with content type ELEMENT_ONLY
class CT_Comment (CT_TrackChange):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Comment')
    # Base type is CT_TrackChange
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tbl uses Python identifier tbl
    __tbl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), 'tbl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006maintbl', True)

    
    tbl = property(__tbl.value, __tbl.set, None, u'Table')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMath uses Python identifier oMath
    __oMath = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), 'oMath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgofficeDocument2006mathoMath', True)

    
    oMath = property(__oMath.value, __oMath.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkEnd uses Python identifier bookmarkEnd
    __bookmarkEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), 'bookmarkEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkEnd', True)

    
    bookmarkEnd = property(__bookmarkEnd.value, __bookmarkEnd.set, None, u'Bookmark End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeStart uses Python identifier moveFromRangeStart
    __moveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), 'moveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeStart', True)

    
    moveFromRangeStart = property(__moveFromRangeStart.value, __moveFromRangeStart.set, None, u'Move Source Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bookmarkStart uses Python identifier bookmarkStart
    __bookmarkStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), 'bookmarkStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006mainbookmarkStart', True)

    
    bookmarkStart = property(__bookmarkStart.value, __bookmarkStart.set, None, u'Bookmark Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFromRangeEnd uses Python identifier moveFromRangeEnd
    __moveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), 'moveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFromRangeEnd', True)

    
    moveFromRangeEnd = property(__moveFromRangeEnd.value, __moveFromRangeEnd.set, None, u'Move Source Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeStart uses Python identifier moveToRangeStart
    __moveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), 'moveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeStart', True)

    
    moveToRangeStart = property(__moveToRangeStart.value, __moveToRangeStart.set, None, u'Move Destination Location Container - Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveToRangeEnd uses Python identifier moveToRangeEnd
    __moveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), 'moveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveToRangeEnd', True)

    
    moveToRangeEnd = property(__moveToRangeEnd.value, __moveToRangeEnd.set, None, u'Move Destination Location Container - End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeStart uses Python identifier commentRangeStart
    __commentRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), 'commentRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeStart', True)

    
    commentRangeStart = property(__commentRangeStart.value, __commentRangeStart.set, None, u'Comment Anchor Range Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}commentRangeEnd uses Python identifier commentRangeEnd
    __commentRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), 'commentRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006maincommentRangeEnd', True)

    
    commentRangeEnd = property(__commentRangeEnd.value, __commentRangeEnd.set, None, u'Comment Anchor Range End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeStart uses Python identifier customXmlInsRangeStart
    __customXmlInsRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), 'customXmlInsRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeStart', True)

    
    customXmlInsRangeStart = property(__customXmlInsRangeStart.value, __customXmlInsRangeStart.set, None, u'Custom XML Markup Insertion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlInsRangeEnd uses Python identifier customXmlInsRangeEnd
    __customXmlInsRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), 'customXmlInsRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlInsRangeEnd', True)

    
    customXmlInsRangeEnd = property(__customXmlInsRangeEnd.value, __customXmlInsRangeEnd.set, None, u'Custom XML Markup Insertion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeStart uses Python identifier customXmlDelRangeStart
    __customXmlDelRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), 'customXmlDelRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeStart', True)

    
    customXmlDelRangeStart = property(__customXmlDelRangeStart.value, __customXmlDelRangeStart.set, None, u'Custom XML Markup Deletion Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sdt uses Python identifier sdt
    __sdt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), 'sdt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006mainsdt', True)

    
    sdt = property(__sdt.value, __sdt.set, None, u'Block-Level Structured Document Tag')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}altChunk uses Python identifier altChunk
    __altChunk = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk'), 'altChunk', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006mainaltChunk', True)

    
    altChunk = property(__altChunk.value, __altChunk.set, None, u'Anchor for Imported External Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeStart uses Python identifier customXmlMoveFromRangeStart
    __customXmlMoveFromRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), 'customXmlMoveFromRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeStart', True)

    
    customXmlMoveFromRangeStart = property(__customXmlMoveFromRangeStart.value, __customXmlMoveFromRangeStart.set, None, u'Custom XML Markup Move Source Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006mainins', True)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeStart uses Python identifier customXmlMoveToRangeStart
    __customXmlMoveToRangeStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), 'customXmlMoveToRangeStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeStart', True)

    
    customXmlMoveToRangeStart = property(__customXmlMoveToRangeStart.value, __customXmlMoveToRangeStart.set, None, u'Custom XML Markup Move Destination Location Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveFromRangeEnd uses Python identifier customXmlMoveFromRangeEnd
    __customXmlMoveFromRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), 'customXmlMoveFromRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveFromRangeEnd', True)

    
    customXmlMoveFromRangeEnd = property(__customXmlMoveFromRangeEnd.value, __customXmlMoveFromRangeEnd.set, None, u'Custom XML Markup Move Source End')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}oMathPara uses Python identifier oMathPara
    __oMathPara = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), 'oMathPara', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgofficeDocument2006mathoMathPara', True)

    
    oMathPara = property(__oMathPara.value, __oMathPara.set, None, u'Office Math Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlMoveToRangeEnd uses Python identifier customXmlMoveToRangeEnd
    __customXmlMoveToRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), 'customXmlMoveToRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlMoveToRangeEnd', True)

    
    customXmlMoveToRangeEnd = property(__customXmlMoveToRangeEnd.value, __customXmlMoveToRangeEnd.set, None, u'Custom XML Markup Move Destination Location End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXml uses Python identifier customXml
    __customXml = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), 'customXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXml', True)

    
    customXml = property(__customXml.value, __customXml.set, None, u'Block-Level Custom XML Element')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customXmlDelRangeEnd uses Python identifier customXmlDelRangeEnd
    __customXmlDelRangeEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), 'customXmlDelRangeEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006maincustomXmlDelRangeEnd', True)

    
    customXmlDelRangeEnd = property(__customXmlDelRangeEnd.value, __customXmlDelRangeEnd.set, None, u'Custom XML Markup Deletion End')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), 'p', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006mainp', True)

    
    p = property(__p.value, __p.set, None, u'Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}del uses Python identifier del_
    __del = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), 'del_', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006maindel', True)

    
    del_ = property(__del.value, __del.set, None, u'Deleted Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}proofErr uses Python identifier proofErr
    __proofErr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), 'proofErr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006mainproofErr', True)

    
    proofErr = property(__proofErr.value, __proofErr.set, None, u'Proofing Error Anchor')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveFrom uses Python identifier moveFrom
    __moveFrom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), 'moveFrom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveFrom', True)

    
    moveFrom = property(__moveFrom.value, __moveFrom.set, None, u'Move Source Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permStart uses Python identifier permStart
    __permStart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), 'permStart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006mainpermStart', True)

    
    permStart = property(__permStart.value, __permStart.set, None, u'Range Permission Start')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}moveTo uses Python identifier moveTo
    __moveTo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), 'moveTo', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006mainmoveTo', True)

    
    moveTo = property(__moveTo.value, __moveTo.set, None, u'Move Destination Run Content')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}permEnd uses Python identifier permEnd
    __permEnd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), 'permEnd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006mainpermEnd', True)

    
    permEnd = property(__permEnd.value, __permEnd.set, None, u'Range Permission End')

    
    # Attribute date inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute author inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}initials uses Python identifier initials
    __initials = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'initials'), 'initials', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Comment_httpschemas_openxmlformats_orgwordprocessingml2006maininitials', _s.ST_String)
    
    initials = property(__initials.value, __initials.set, None, u'Initials of Comment Author')


    _ElementMap = CT_TrackChange._ElementMap.copy()
    _ElementMap.update({
        __tbl.name() : __tbl,
        __oMath.name() : __oMath,
        __bookmarkEnd.name() : __bookmarkEnd,
        __moveFromRangeStart.name() : __moveFromRangeStart,
        __bookmarkStart.name() : __bookmarkStart,
        __moveFromRangeEnd.name() : __moveFromRangeEnd,
        __moveToRangeStart.name() : __moveToRangeStart,
        __moveToRangeEnd.name() : __moveToRangeEnd,
        __commentRangeStart.name() : __commentRangeStart,
        __commentRangeEnd.name() : __commentRangeEnd,
        __customXmlInsRangeStart.name() : __customXmlInsRangeStart,
        __customXmlInsRangeEnd.name() : __customXmlInsRangeEnd,
        __customXmlDelRangeStart.name() : __customXmlDelRangeStart,
        __sdt.name() : __sdt,
        __altChunk.name() : __altChunk,
        __customXmlMoveFromRangeStart.name() : __customXmlMoveFromRangeStart,
        __ins.name() : __ins,
        __customXmlMoveToRangeStart.name() : __customXmlMoveToRangeStart,
        __customXmlMoveFromRangeEnd.name() : __customXmlMoveFromRangeEnd,
        __oMathPara.name() : __oMathPara,
        __customXmlMoveToRangeEnd.name() : __customXmlMoveToRangeEnd,
        __customXml.name() : __customXml,
        __customXmlDelRangeEnd.name() : __customXmlDelRangeEnd,
        __p.name() : __p,
        __del.name() : __del,
        __proofErr.name() : __proofErr,
        __moveFrom.name() : __moveFrom,
        __permStart.name() : __permStart,
        __moveTo.name() : __moveTo,
        __permEnd.name() : __permEnd
    })
    _AttributeMap = CT_TrackChange._AttributeMap.copy()
    _AttributeMap.update({
        __initials.name() : __initials
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_Comment', CT_Comment)


# Complex type CT_DocPartType with content type EMPTY
class CT_DocPartType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocPartType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartType_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_DocPartType, required=True)
    
    val = property(__val.value, __val.set, None, u'Type Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocPartType', CT_DocPartType)


# Complex type CT_TrackChangeRange with content type EMPTY
class CT_TrackChangeRange (CT_TrackChange):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TrackChangeRange')
    # Base type is CT_TrackChange
    
    # Attribute date inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute author inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}displacedByCustomXml uses Python identifier displacedByCustomXml
    __displacedByCustomXml = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'displacedByCustomXml'), 'displacedByCustomXml', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TrackChangeRange_httpschemas_openxmlformats_orgwordprocessingml2006maindisplacedByCustomXml', ST_DisplacedByCustomXml)
    
    displacedByCustomXml = property(__displacedByCustomXml.value, __displacedByCustomXml.set, None, u'Annotation Marker Displaced By Custom XML Markup')


    _ElementMap = CT_TrackChange._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_TrackChange._AttributeMap.copy()
    _AttributeMap.update({
        __displacedByCustomXml.name() : __displacedByCustomXml
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_TrackChangeRange', CT_TrackChangeRange)


# Complex type CT_FramePr with content type EMPTY
class CT_FramePr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FramePr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}wrap uses Python identifier wrap
    __wrap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'wrap'), 'wrap', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramePr_httpschemas_openxmlformats_orgwordprocessingml2006mainwrap', ST_Wrap)
    
    wrap = property(__wrap.value, __wrap.set, None, u'Text Wrapping Around Frame')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'y'), 'y', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramePr_httpschemas_openxmlformats_orgwordprocessingml2006mainy', ST_SignedTwipsMeasure)
    
    y = property(__y.value, __y.set, None, u'Absolute Vertical Position')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lines uses Python identifier lines
    __lines = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lines'), 'lines', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramePr_httpschemas_openxmlformats_orgwordprocessingml2006mainlines', ST_DecimalNumber)
    
    lines = property(__lines.value, __lines.set, None, u'Drop Cap Vertical Height in Lines')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vAnchor uses Python identifier vAnchor
    __vAnchor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vAnchor'), 'vAnchor', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramePr_httpschemas_openxmlformats_orgwordprocessingml2006mainvAnchor', ST_VAnchor)
    
    vAnchor = property(__vAnchor.value, __vAnchor.set, None, u'Frame Vertical Positioning Base')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}vSpace uses Python identifier vSpace
    __vSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'vSpace'), 'vSpace', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramePr_httpschemas_openxmlformats_orgwordprocessingml2006mainvSpace', _s.ST_TwipsMeasure)
    
    vSpace = property(__vSpace.value, __vSpace.set, None, u'Vertical Frame Padding')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hAnchor uses Python identifier hAnchor
    __hAnchor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hAnchor'), 'hAnchor', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramePr_httpschemas_openxmlformats_orgwordprocessingml2006mainhAnchor', ST_HAnchor)
    
    hAnchor = property(__hAnchor.value, __hAnchor.set, None, u'Frame Horizontal Positioning Base')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), 'w', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramePr_httpschemas_openxmlformats_orgwordprocessingml2006mainw', _s.ST_TwipsMeasure)
    
    w = property(__w.value, __w.set, None, u'Frame Width')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hRule uses Python identifier hRule
    __hRule = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hRule'), 'hRule', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramePr_httpschemas_openxmlformats_orgwordprocessingml2006mainhRule', ST_HeightRule)
    
    hRule = property(__hRule.value, __hRule.set, None, u'Frame Height Type')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}h uses Python identifier h
    __h = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'h'), 'h', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramePr_httpschemas_openxmlformats_orgwordprocessingml2006mainh', _s.ST_TwipsMeasure)
    
    h = property(__h.value, __h.set, None, u'Frame Height')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}yAlign uses Python identifier yAlign
    __yAlign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'yAlign'), 'yAlign', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramePr_httpschemas_openxmlformats_orgwordprocessingml2006mainyAlign', _s.ST_YAlign)
    
    yAlign = property(__yAlign.value, __yAlign.set, None, u'Relative Vertical Position')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}anchorLock uses Python identifier anchorLock
    __anchorLock = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'anchorLock'), 'anchorLock', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramePr_httpschemas_openxmlformats_orgwordprocessingml2006mainanchorLock', _s.ST_OnOff)
    
    anchorLock = property(__anchorLock.value, __anchorLock.set, None, u'Lock Frame Anchor to Paragraph')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'x'), 'x', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramePr_httpschemas_openxmlformats_orgwordprocessingml2006mainx', ST_SignedTwipsMeasure)
    
    x = property(__x.value, __x.set, None, u'Absolute Horizontal Position')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hSpace uses Python identifier hSpace
    __hSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hSpace'), 'hSpace', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramePr_httpschemas_openxmlformats_orgwordprocessingml2006mainhSpace', _s.ST_TwipsMeasure)
    
    hSpace = property(__hSpace.value, __hSpace.set, None, u'Horizontal Frame Padding')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dropCap uses Python identifier dropCap
    __dropCap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dropCap'), 'dropCap', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramePr_httpschemas_openxmlformats_orgwordprocessingml2006maindropCap', ST_DropCap)
    
    dropCap = property(__dropCap.value, __dropCap.set, None, u'Drop Cap Frame')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}xAlign uses Python identifier xAlign
    __xAlign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'xAlign'), 'xAlign', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramePr_httpschemas_openxmlformats_orgwordprocessingml2006mainxAlign', _s.ST_XAlign)
    
    xAlign = property(__xAlign.value, __xAlign.set, None, u'Relative Horizontal Position')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __wrap.name() : __wrap,
        __y.name() : __y,
        __lines.name() : __lines,
        __vAnchor.name() : __vAnchor,
        __vSpace.name() : __vSpace,
        __hAnchor.name() : __hAnchor,
        __w.name() : __w,
        __hRule.name() : __hRule,
        __h.name() : __h,
        __yAlign.name() : __yAlign,
        __anchorLock.name() : __anchorLock,
        __x.name() : __x,
        __hSpace.name() : __hSpace,
        __dropCap.name() : __dropCap,
        __xAlign.name() : __xAlign
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FramePr', CT_FramePr)


# Complex type CT_Style with content type ELEMENT_ONLY
class CT_Style (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Style')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}personalReply uses Python identifier personalReply
    __personalReply = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'personalReply'), 'personalReply', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainpersonalReply', False)

    
    personalReply = property(__personalReply.value, __personalReply.set, None, u'E-Mail Message Reply Style')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblPr uses Python identifier tblPr
    __tblPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPr'), 'tblPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006maintblPr', False)

    
    tblPr = property(__tblPr.value, __tblPr.set, None, u'Style Table Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pPr uses Python identifier pPr
    __pPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr'), 'pPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainpPr', False)

    
    pPr = property(__pPr.value, __pPr.set, None, u'Style Paragraph Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Run Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblStylePr uses Python identifier tblStylePr
    __tblStylePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblStylePr'), 'tblStylePr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006maintblStylePr', True)

    
    tblStylePr = property(__tblStylePr.value, __tblStylePr.set, None, u'Style Conditional Table Formatting Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}trPr uses Python identifier trPr
    __trPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'trPr'), 'trPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006maintrPr', False)

    
    trPr = property(__trPr.value, __trPr.set, None, u'Style Table Row Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tcPr uses Python identifier tcPr
    __tcPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tcPr'), 'tcPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006maintcPr', False)

    
    tcPr = property(__tcPr.value, __tcPr.set, None, u'Style Table Cell Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainname', False)

    
    name = property(__name.value, __name.set, None, u'Primary Style Name')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}aliases uses Python identifier aliases
    __aliases = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'aliases'), 'aliases', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainaliases', False)

    
    aliases = property(__aliases.value, __aliases.set, None, u'Alternate Style Names')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}next uses Python identifier next
    __next = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'next'), 'next', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainnext', False)

    
    next = property(__next.value, __next.set, None, u'Style For Next Paragraph')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}link uses Python identifier link
    __link = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'link'), 'link', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainlink', False)

    
    link = property(__link.value, __link.set, None, u'Linked Style Reference')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}basedOn uses Python identifier basedOn
    __basedOn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'basedOn'), 'basedOn', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainbasedOn', False)

    
    basedOn = property(__basedOn.value, __basedOn.set, None, u'Parent Style ID')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}autoRedefine uses Python identifier autoRedefine
    __autoRedefine = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'autoRedefine'), 'autoRedefine', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainautoRedefine', False)

    
    autoRedefine = property(__autoRedefine.value, __autoRedefine.set, None, u'Automatically Merge User Formatting Into Style Definition')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hidden uses Python identifier hidden
    __hidden = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hidden'), 'hidden', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainhidden', False)

    
    hidden = property(__hidden.value, __hidden.set, None, u'Hide Style From User Interface')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}uiPriority uses Python identifier uiPriority
    __uiPriority = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'uiPriority'), 'uiPriority', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainuiPriority', False)

    
    uiPriority = property(__uiPriority.value, __uiPriority.set, None, u'Optional User Interface Sorting Order')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}personalCompose uses Python identifier personalCompose
    __personalCompose = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'personalCompose'), 'personalCompose', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainpersonalCompose', False)

    
    personalCompose = property(__personalCompose.value, __personalCompose.set, None, u'E-Mail Message Composition Style')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}semiHidden uses Python identifier semiHidden
    __semiHidden = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'semiHidden'), 'semiHidden', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainsemiHidden', False)

    
    semiHidden = property(__semiHidden.value, __semiHidden.set, None, u'Hide Style From Main User Interface')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}unhideWhenUsed uses Python identifier unhideWhenUsed
    __unhideWhenUsed = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'unhideWhenUsed'), 'unhideWhenUsed', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainunhideWhenUsed', False)

    
    unhideWhenUsed = property(__unhideWhenUsed.value, __unhideWhenUsed.set, None, u'Remove Semi-Hidden Property When Style Is Used')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rsid uses Python identifier rsid
    __rsid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rsid'), 'rsid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainrsid', False)

    
    rsid = property(__rsid.value, __rsid.set, None, u'Revision Identifier for Style Definition')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}qFormat uses Python identifier qFormat
    __qFormat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'qFormat'), 'qFormat', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainqFormat', False)

    
    qFormat = property(__qFormat.value, __qFormat.set, None, u'Primary Style')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}locked uses Python identifier locked
    __locked = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'locked'), 'locked', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainlocked', False)

    
    locked = property(__locked.value, __locked.set, None, u'Style Cannot Be Applied')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}personal uses Python identifier personal
    __personal = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'personal'), 'personal', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainpersonal', False)

    
    personal = property(__personal.value, __personal.set, None, u'E-Mail Message Text Style')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}default uses Python identifier default
    __default = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'default'), 'default', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006maindefault', _s.ST_OnOff)
    
    default = property(__default.value, __default.set, None, u'Default Style')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}customStyle uses Python identifier customStyle
    __customStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'customStyle'), 'customStyle', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006maincustomStyle', _s.ST_OnOff)
    
    customStyle = property(__customStyle.value, __customStyle.set, None, u'User-Defined Style')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006maintype', ST_StyleType)
    
    type = property(__type.value, __type.set, None, u'Style Type')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}styleId uses Python identifier styleId
    __styleId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'styleId'), 'styleId', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Style_httpschemas_openxmlformats_orgwordprocessingml2006mainstyleId', _s.ST_String)
    
    styleId = property(__styleId.value, __styleId.set, None, u'Style ID')


    _ElementMap = {
        __personalReply.name() : __personalReply,
        __tblPr.name() : __tblPr,
        __pPr.name() : __pPr,
        __rPr.name() : __rPr,
        __tblStylePr.name() : __tblStylePr,
        __trPr.name() : __trPr,
        __tcPr.name() : __tcPr,
        __name.name() : __name,
        __aliases.name() : __aliases,
        __next.name() : __next,
        __link.name() : __link,
        __basedOn.name() : __basedOn,
        __autoRedefine.name() : __autoRedefine,
        __hidden.name() : __hidden,
        __uiPriority.name() : __uiPriority,
        __personalCompose.name() : __personalCompose,
        __semiHidden.name() : __semiHidden,
        __unhideWhenUsed.name() : __unhideWhenUsed,
        __rsid.name() : __rsid,
        __qFormat.name() : __qFormat,
        __locked.name() : __locked,
        __personal.name() : __personal
    }
    _AttributeMap = {
        __default.name() : __default,
        __customStyle.name() : __customStyle,
        __type.name() : __type,
        __styleId.name() : __styleId
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Style', CT_Style)


# Complex type CT_MailMergeDataType with content type EMPTY
class CT_MailMergeDataType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_MailMergeDataType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMergeDataType_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_MailMergeDataType, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_MailMergeDataType', CT_MailMergeDataType)


# Complex type CT_FtnPos with content type EMPTY
class CT_FtnPos (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FtnPos')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnPos_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_FtnPos, required=True)
    
    val = property(__val.value, __val.set, None, u'Footnote Position Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FtnPos', CT_FtnPos)


# Complex type CT_Zoom with content type EMPTY
class CT_Zoom (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Zoom')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Zoom_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_Zoom)
    
    val = property(__val.value, __val.set, None, u'Zoom Type')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}percent uses Python identifier percent
    __percent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'percent'), 'percent', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Zoom_httpschemas_openxmlformats_orgwordprocessingml2006mainpercent', ST_DecimalNumberOrPercent, required=True)
    
    percent = property(__percent.value, __percent.set, None, u'Zoom Percentage')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __percent.name() : __percent
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Zoom', CT_Zoom)


# Complex type CT_MCPr with content type ELEMENT_ONLY
class CT_MCPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_MCPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}mcJc uses Python identifier mcJc
    __mcJc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'mcJc'), 'mcJc', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MCPr_httpschemas_openxmlformats_orgofficeDocument2006mathmcJc', False)

    
    mcJc = property(__mcJc.value, __mcJc.set, None, u'Matrix Column Justification')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}count uses Python identifier count
    __count = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'count'), 'count', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MCPr_httpschemas_openxmlformats_orgofficeDocument2006mathcount', False)

    
    count = property(__count.value, __count.set, None, u'Matrix Column Count')


    _ElementMap = {
        __mcJc.name() : __mcJc,
        __count.name() : __count
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_MCPr', CT_MCPr)


# Complex type CT_TextAlignment with content type EMPTY
class CT_TextAlignment (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TextAlignment')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TextAlignment_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_TextAlignment, required=True)
    
    val = property(__val.value, __val.set, None, u'Vertical Character Alignment Position')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TextAlignment', CT_TextAlignment)


# Complex type CT_OMathArgPr with content type ELEMENT_ONLY
class CT_OMathArgPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_OMathArgPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}argSz uses Python identifier argSz
    __argSz = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'argSz'), 'argSz', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_OMathArgPr_httpschemas_openxmlformats_orgofficeDocument2006mathargSz', False)

    
    argSz = property(__argSz.value, __argSz.set, None, u'Argument Size')


    _ElementMap = {
        __argSz.name() : __argSz
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_OMathArgPr', CT_OMathArgPr)


# Complex type CT_HMerge with content type EMPTY
class CT_HMerge (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_HMerge')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_HMerge_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_Merge)
    
    val = property(__val.value, __val.set, None, u'Horizontal Merge Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_HMerge', CT_HMerge)


# Complex type CT_NumPr with content type ELEMENT_ONLY
class CT_NumPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_NumPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ins uses Python identifier ins
    __ins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), 'ins', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_NumPr_httpschemas_openxmlformats_orgwordprocessingml2006mainins', False)

    
    ins = property(__ins.value, __ins.set, None, u'Inserted Numbering Properties')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ilvl uses Python identifier ilvl
    __ilvl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ilvl'), 'ilvl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_NumPr_httpschemas_openxmlformats_orgwordprocessingml2006mainilvl', False)

    
    ilvl = property(__ilvl.value, __ilvl.set, None, u'Numbering Level Reference')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numId uses Python identifier numId
    __numId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numId'), 'numId', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_NumPr_httpschemas_openxmlformats_orgwordprocessingml2006mainnumId', False)

    
    numId = property(__numId.value, __numId.set, None, u'Numbering Definition Instance Reference')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numberingChange uses Python identifier numberingChange
    __numberingChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numberingChange'), 'numberingChange', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_NumPr_httpschemas_openxmlformats_orgwordprocessingml2006mainnumberingChange', False)

    
    numberingChange = property(__numberingChange.value, __numberingChange.set, None, u'Previous Paragraph Numbering Properties')


    _ElementMap = {
        __ins.name() : __ins,
        __ilvl.name() : __ilvl,
        __numId.name() : __numId,
        __numberingChange.name() : __numberingChange
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_NumPr', CT_NumPr)


# Complex type CT_FFStatusText with content type EMPTY
class CT_FFStatusText (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FFStatusText')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFStatusText_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_FFStatusTextVal)
    
    val = property(__val.value, __val.set, None, u'Status Text Value')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFStatusText_httpschemas_openxmlformats_orgwordprocessingml2006maintype', ST_InfoTextType)
    
    type = property(__type.value, __type.set, None, u'Status Text Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __type.name() : __type
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FFStatusText', CT_FFStatusText)


# Complex type CT_TblPrChange with content type ELEMENT_ONLY
class CT_TblPrChange (CT_TrackChange):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblPrChange')
    # Base type is CT_TrackChange
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblPr uses Python identifier tblPr
    __tblPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPr'), 'tblPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrChange_httpschemas_openxmlformats_orgwordprocessingml2006maintblPr', False)

    
    tblPr = property(__tblPr.value, __tblPr.set, None, u'Previous Table Properties')

    
    # Attribute date inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange
    
    # Attribute id inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_Markup
    
    # Attribute author inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TrackChange

    _ElementMap = CT_TrackChange._ElementMap.copy()
    _ElementMap.update({
        __tblPr.name() : __tblPr
    })
    _AttributeMap = CT_TrackChange._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblPrChange', CT_TblPrChange)


# Complex type CT_Proof with content type EMPTY
class CT_Proof (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Proof')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}spelling uses Python identifier spelling
    __spelling = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'spelling'), 'spelling', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Proof_httpschemas_openxmlformats_orgwordprocessingml2006mainspelling', ST_Proof)
    
    spelling = property(__spelling.value, __spelling.set, None, u'Spell Checking State')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}grammar uses Python identifier grammar
    __grammar = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'grammar'), 'grammar', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Proof_httpschemas_openxmlformats_orgwordprocessingml2006maingrammar', ST_Proof)
    
    grammar = property(__grammar.value, __grammar.set, None, u'Grammatical Checking State')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __spelling.name() : __spelling,
        __grammar.name() : __grammar
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Proof', CT_Proof)


# Complex type CT_Headers with content type ELEMENT_ONLY
class CT_Headers (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Headers')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}header uses Python identifier header
    __header = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'header'), 'header', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Headers_httpschemas_openxmlformats_orgwordprocessingml2006mainheader', True)

    
    header = property(__header.value, __header.set, None, u'Header Cell Reference')


    _ElementMap = {
        __header.name() : __header
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Headers', CT_Headers)


# Complex type CT_RubyPr with content type ELEMENT_ONLY
class CT_RubyPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_RubyPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hps uses Python identifier hps
    __hps = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hps'), 'hps', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyPr_httpschemas_openxmlformats_orgwordprocessingml2006mainhps', False)

    
    hps = property(__hps.value, __hps.set, None, u'Phonetic Guide Text Font Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hpsRaise uses Python identifier hpsRaise
    __hpsRaise = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hpsRaise'), 'hpsRaise', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyPr_httpschemas_openxmlformats_orgwordprocessingml2006mainhpsRaise', False)

    
    hpsRaise = property(__hpsRaise.value, __hpsRaise.set, None, u'Distance Between Phonetic Guide Text and Phonetic Guide Base Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hpsBaseText uses Python identifier hpsBaseText
    __hpsBaseText = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hpsBaseText'), 'hpsBaseText', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyPr_httpschemas_openxmlformats_orgwordprocessingml2006mainhpsBaseText', False)

    
    hpsBaseText = property(__hpsBaseText.value, __hpsBaseText.set, None, u'Phonetic Guide Base Text Font Size')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rubyAlign uses Python identifier rubyAlign
    __rubyAlign = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rubyAlign'), 'rubyAlign', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrubyAlign', False)

    
    rubyAlign = property(__rubyAlign.value, __rubyAlign.set, None, u'Phonetic Guide Text Alignment')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lid uses Python identifier lid
    __lid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lid'), 'lid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyPr_httpschemas_openxmlformats_orgwordprocessingml2006mainlid', False)

    
    lid = property(__lid.value, __lid.set, None, u'Language ID for Phonetic Guide')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dirty uses Python identifier dirty
    __dirty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dirty'), 'dirty', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RubyPr_httpschemas_openxmlformats_orgwordprocessingml2006maindirty', False)

    
    dirty = property(__dirty.value, __dirty.set, None, u'Invalidated Field Cache')


    _ElementMap = {
        __hps.name() : __hps,
        __hpsRaise.name() : __hpsRaise,
        __hpsBaseText.name() : __hpsBaseText,
        __rubyAlign.name() : __rubyAlign,
        __lid.name() : __lid,
        __dirty.name() : __dirty
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_RubyPr', CT_RubyPr)


# Complex type CT_PPr with content type ELEMENT_ONLY
class CT_PPr (CT_PPrBase):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_PPr')
    # Base type is CT_PPrBase
    
    # Element bidi ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}bidi) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element adjustRightInd ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}adjustRightInd) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element suppressLineNumbers ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}suppressLineNumbers) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element snapToGrid ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}snapToGrid) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sectPr uses Python identifier sectPr
    __sectPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sectPr'), 'sectPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPr_httpschemas_openxmlformats_orgwordprocessingml2006mainsectPr', False)

    
    sectPr = property(__sectPr.value, __sectPr.set, None, u'Section Properties')

    
    # Element spacing ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}spacing) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element keepNext ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}keepNext) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element contextualSpacing ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}contextualSpacing) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element pageBreakBefore ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}pageBreakBefore) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element mirrorIndents ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}mirrorIndents) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element suppressOverlap ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}suppressOverlap) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element framePr ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}framePr) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element widowControl ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}widowControl) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element pStyle ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}pStyle) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element textDirection ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}textDirection) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPr_httpschemas_openxmlformats_orgwordprocessingml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Run Properties for the Paragraph Mark')

    
    # Element textAlignment ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}textAlignment) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element textboxTightWrap ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}textboxTightWrap) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element pBdr ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}pBdr) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element shd ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}shd) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element divId ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}divId) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element keepLines ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}keepLines) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element suppressAutoHyphens ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}suppressAutoHyphens) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element kinsoku ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}kinsoku) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element outlineLvl ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}outlineLvl) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pPrChange uses Python identifier pPrChange
    __pPrChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pPrChange'), 'pPrChange', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PPr_httpschemas_openxmlformats_orgwordprocessingml2006mainpPrChange', False)

    
    pPrChange = property(__pPrChange.value, __pPrChange.set, None, u'Revision Information for Paragraph Properties')

    
    # Element wordWrap ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}wordWrap) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element tabs ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tabs) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element jc ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}jc) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element overflowPunct ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}overflowPunct) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element numPr ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}numPr) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element ind ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}ind) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element topLinePunct ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}topLinePunct) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element autoSpaceDE ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}autoSpaceDE) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element autoSpaceDN ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}autoSpaceDN) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase
    
    # Element cnfStyle ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}cnfStyle) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_PPrBase

    _ElementMap = CT_PPrBase._ElementMap.copy()
    _ElementMap.update({
        __sectPr.name() : __sectPr,
        __rPr.name() : __rPr,
        __pPrChange.name() : __pPrChange
    })
    _AttributeMap = CT_PPrBase._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_PPr', CT_PPr)


# Complex type CT_MR with content type ELEMENT_ONLY
class CT_MR (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_MR')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), 'e', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MR_httpschemas_openxmlformats_orgofficeDocument2006mathe', True)

    
    e = property(__e.value, __e.set, None, u'Element')


    _ElementMap = {
        __e.name() : __e
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_MR', CT_MR)


# Complex type CT_TblPrExBase with content type ELEMENT_ONLY
class CT_TblPrExBase (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblPrExBase')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblLook uses Python identifier tblLook
    __tblLook = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLook'), 'tblLook', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrExBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblLook', False)

    
    tblLook = property(__tblLook.value, __tblLook.set, None, u'Table Style Conditional Formatting Settings Exception')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblCellSpacing uses Python identifier tblCellSpacing
    __tblCellSpacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellSpacing'), 'tblCellSpacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrExBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblCellSpacing', False)

    
    tblCellSpacing = property(__tblCellSpacing.value, __tblCellSpacing.set, None, u'Table Cell Spacing Exception')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblInd uses Python identifier tblInd
    __tblInd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblInd'), 'tblInd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrExBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblInd', False)

    
    tblInd = property(__tblInd.value, __tblInd.set, None, u'Table Indent from Leading Margin Exception')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblCellMar uses Python identifier tblCellMar
    __tblCellMar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellMar'), 'tblCellMar', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrExBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblCellMar', False)

    
    tblCellMar = property(__tblCellMar.value, __tblCellMar.set, None, u'Table Cell Margin Exceptions')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shd uses Python identifier shd
    __shd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), 'shd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrExBase_httpschemas_openxmlformats_orgwordprocessingml2006mainshd', False)

    
    shd = property(__shd.value, __shd.set, None, u'Table Shading Exception')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblBorders uses Python identifier tblBorders
    __tblBorders = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblBorders'), 'tblBorders', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrExBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblBorders', False)

    
    tblBorders = property(__tblBorders.value, __tblBorders.set, None, u'Table Borders Exceptions')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblW uses Python identifier tblW
    __tblW = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblW'), 'tblW', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrExBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblW', False)

    
    tblW = property(__tblW.value, __tblW.set, None, u'Preferred Table Width Exception')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblLayout uses Python identifier tblLayout
    __tblLayout = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLayout'), 'tblLayout', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrExBase_httpschemas_openxmlformats_orgwordprocessingml2006maintblLayout', False)

    
    tblLayout = property(__tblLayout.value, __tblLayout.set, None, u'Table Layout Exception')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}jc uses Python identifier jc
    __jc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'jc'), 'jc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrExBase_httpschemas_openxmlformats_orgwordprocessingml2006mainjc', False)

    
    jc = property(__jc.value, __jc.set, None, u'Table Alignment Exception')


    _ElementMap = {
        __tblLook.name() : __tblLook,
        __tblCellSpacing.name() : __tblCellSpacing,
        __tblInd.name() : __tblInd,
        __tblCellMar.name() : __tblCellMar,
        __shd.name() : __shd,
        __tblBorders.name() : __tblBorders,
        __tblW.name() : __tblW,
        __tblLayout.name() : __tblLayout,
        __jc.name() : __jc
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblPrExBase', CT_TblPrExBase)


# Complex type CT_OdsoFieldMapData with content type ELEMENT_ONLY
class CT_OdsoFieldMapData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_OdsoFieldMapData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}mappedName uses Python identifier mappedName
    __mappedName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'mappedName'), 'mappedName', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_OdsoFieldMapData_httpschemas_openxmlformats_orgwordprocessingml2006mainmappedName', False)

    
    mappedName = property(__mappedName.value, __mappedName.set, None, u'Predefined Merge Field Name')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}column uses Python identifier column
    __column = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'column'), 'column', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_OdsoFieldMapData_httpschemas_openxmlformats_orgwordprocessingml2006maincolumn', False)

    
    column = property(__column.value, __column.set, None, u'Index of Column Being Mapped')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_OdsoFieldMapData_httpschemas_openxmlformats_orgwordprocessingml2006mainname', False)

    
    name = property(__name.value, __name.set, None, u'Data Source Name for Column')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lid uses Python identifier lid
    __lid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lid'), 'lid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_OdsoFieldMapData_httpschemas_openxmlformats_orgwordprocessingml2006mainlid', False)

    
    lid = property(__lid.value, __lid.set, None, u'Merge Field Name Language ID')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dynamicAddress uses Python identifier dynamicAddress
    __dynamicAddress = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dynamicAddress'), 'dynamicAddress', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_OdsoFieldMapData_httpschemas_openxmlformats_orgwordprocessingml2006maindynamicAddress', False)

    
    dynamicAddress = property(__dynamicAddress.value, __dynamicAddress.set, None, u'Use Country-Based Address Field Ordering')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_OdsoFieldMapData_httpschemas_openxmlformats_orgwordprocessingml2006maintype', False)

    
    type = property(__type.value, __type.set, None, u'Merge Field Mapping')


    _ElementMap = {
        __mappedName.name() : __mappedName,
        __column.name() : __column,
        __name.name() : __name,
        __lid.name() : __lid,
        __dynamicAddress.name() : __dynamicAddress,
        __type.name() : __type
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_OdsoFieldMapData', CT_OdsoFieldMapData)


# Complex type CT_SdtDateMappingType with content type EMPTY
class CT_SdtDateMappingType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtDateMappingType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtDateMappingType_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_SdtDateMappingType)
    
    val = property(__val.value, __val.set, None, u'Date Storage Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtDateMappingType', CT_SdtDateMappingType)


# Complex type CT_FramesetSplitbar with content type ELEMENT_ONLY
class CT_FramesetSplitbar (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FramesetSplitbar')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}flatBorders uses Python identifier flatBorders
    __flatBorders = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'flatBorders'), 'flatBorders', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramesetSplitbar_httpschemas_openxmlformats_orgwordprocessingml2006mainflatBorders', False)

    
    flatBorders = property(__flatBorders.value, __flatBorders.set, None, u'Frameset Splitter Border Style')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}w uses Python identifier w
    __w = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), 'w', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramesetSplitbar_httpschemas_openxmlformats_orgwordprocessingml2006mainw', False)

    
    w = property(__w.value, __w.set, None, u'Frameset Splitter Width')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noBorder uses Python identifier noBorder
    __noBorder = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noBorder'), 'noBorder', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramesetSplitbar_httpschemas_openxmlformats_orgwordprocessingml2006mainnoBorder', False)

    
    noBorder = property(__noBorder.value, __noBorder.set, None, u'Do Not Display Frameset Splitters')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'color'), 'color', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FramesetSplitbar_httpschemas_openxmlformats_orgwordprocessingml2006maincolor', False)

    
    color = property(__color.value, __color.set, None, u'Frameset Splitter Color')


    _ElementMap = {
        __flatBorders.name() : __flatBorders,
        __w.name() : __w,
        __noBorder.name() : __noBorder,
        __color.name() : __color
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FramesetSplitbar', CT_FramesetSplitbar)


# Complex type CT_MCS with content type ELEMENT_ONLY
class CT_MCS (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_MCS')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}mc uses Python identifier mc
    __mc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'mc'), 'mc', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_MCS_httpschemas_openxmlformats_orgofficeDocument2006mathmc', True)

    
    mc = property(__mc.value, __mc.set, None, u'Matrix Column')


    _ElementMap = {
        __mc.name() : __mc
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_MCS', CT_MCS)


# Complex type CT_RPR with content type ELEMENT_ONLY
class CT_RPR (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_RPR')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}nor uses Python identifier nor
    __nor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'nor'), 'nor', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_RPR_httpschemas_openxmlformats_orgofficeDocument2006mathnor', False)

    
    nor = property(__nor.value, __nor.set, None, u'Normal Text')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}lit uses Python identifier lit
    __lit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'lit'), 'lit', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_RPR_httpschemas_openxmlformats_orgofficeDocument2006mathlit', False)

    
    lit = property(__lit.value, __lit.set, None, u'Literal')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}scr uses Python identifier scr
    __scr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'scr'), 'scr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_RPR_httpschemas_openxmlformats_orgofficeDocument2006mathscr', False)

    
    scr = property(__scr.value, __scr.set, None, u'Script')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}aln uses Python identifier aln
    __aln = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'aln'), 'aln', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_RPR_httpschemas_openxmlformats_orgofficeDocument2006mathaln', False)

    
    aln = property(__aln.value, __aln.set, None, u'Align')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}sty uses Python identifier sty
    __sty = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'sty'), 'sty', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_RPR_httpschemas_openxmlformats_orgofficeDocument2006mathsty', False)

    
    sty = property(__sty.value, __sty.set, None, u'style')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}brk uses Python identifier brk
    __brk = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'brk'), 'brk', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_RPR_httpschemas_openxmlformats_orgofficeDocument2006mathbrk', False)

    
    brk = property(__brk.value, __brk.set, None, u'Break')


    _ElementMap = {
        __nor.name() : __nor,
        __lit.name() : __lit,
        __scr.name() : __scr,
        __aln.name() : __aln,
        __sty.name() : __sty,
        __brk.name() : __brk
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_RPR', CT_RPR)


# Complex type CT_ReadingModeInkLockDown with content type EMPTY
class CT_ReadingModeInkLockDown (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_ReadingModeInkLockDown')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}h uses Python identifier h
    __h = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'h'), 'h', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ReadingModeInkLockDown_httpschemas_openxmlformats_orgwordprocessingml2006mainh', ST_PixelsMeasure, required=True)
    
    h = property(__h.value, __h.set, None, u'Virtual Page Height')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}w uses Python identifier w
    __w = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), 'w', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ReadingModeInkLockDown_httpschemas_openxmlformats_orgwordprocessingml2006mainw', ST_PixelsMeasure, required=True)
    
    w = property(__w.value, __w.set, None, u'Virtual Page Width')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}actualPg uses Python identifier actualPg
    __actualPg = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'actualPg'), 'actualPg', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ReadingModeInkLockDown_httpschemas_openxmlformats_orgwordprocessingml2006mainactualPg', _s.ST_OnOff, required=True)
    
    actualPg = property(__actualPg.value, __actualPg.set, None, u'Use Actual Pages, Not Virtual Pages')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fontSz uses Python identifier fontSz
    __fontSz = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fontSz'), 'fontSz', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_ReadingModeInkLockDown_httpschemas_openxmlformats_orgwordprocessingml2006mainfontSz', ST_DecimalNumberOrPercent, required=True)
    
    fontSz = property(__fontSz.value, __fontSz.set, None, u'Font Size Scaling')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __h.name() : __h,
        __w.name() : __w,
        __actualPg.name() : __actualPg,
        __fontSz.name() : __fontSz
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_ReadingModeInkLockDown', CT_ReadingModeInkLockDown)


# Complex type CT_TblPrEx with content type ELEMENT_ONLY
class CT_TblPrEx (CT_TblPrExBase):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblPrEx')
    # Base type is CT_TblPrExBase
    
    # Element tblLook ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblLook) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrExBase
    
    # Element tblCellMar ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblCellMar) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrExBase
    
    # Element tblInd ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblInd) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrExBase
    
    # Element tblCellSpacing ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblCellSpacing) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrExBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblPrExChange uses Python identifier tblPrExChange
    __tblPrExChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPrExChange'), 'tblPrExChange', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPrEx_httpschemas_openxmlformats_orgwordprocessingml2006maintblPrExChange', False)

    
    tblPrExChange = property(__tblPrExChange.value, __tblPrExChange.set, None, u'Revision Information for Table-Level Property Exceptions')

    
    # Element shd ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}shd) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrExBase
    
    # Element tblBorders ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblBorders) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrExBase
    
    # Element tblW ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblW) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrExBase
    
    # Element tblLayout ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblLayout) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrExBase
    
    # Element jc ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}jc) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrExBase

    _ElementMap = CT_TblPrExBase._ElementMap.copy()
    _ElementMap.update({
        __tblPrExChange.name() : __tblPrExChange
    })
    _AttributeMap = CT_TblPrExBase._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblPrEx', CT_TblPrEx)


# Complex type CT_CharacterSpacing with content type EMPTY
class CT_CharacterSpacing (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_CharacterSpacing')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CharacterSpacing_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_CharacterSpacing, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_CharacterSpacing', CT_CharacterSpacing)


# Complex type CT_MultiLevelType with content type EMPTY
class CT_MultiLevelType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_MultiLevelType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MultiLevelType_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_MultiLevelType, required=True)
    
    val = property(__val.value, __val.set, None, u'Abstract Numbering Definition Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_MultiLevelType', CT_MultiLevelType)


# Complex type CT_TargetScreenSz with content type EMPTY
class CT_TargetScreenSz (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TargetScreenSz')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TargetScreenSz_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_TargetScreenSz, required=True)
    
    val = property(__val.value, __val.set, None, u'Target Screen Size Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_TargetScreenSz', CT_TargetScreenSz)


# Complex type CT_SdtDate with content type ELEMENT_ONLY
class CT_SdtDate (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_SdtDate')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}calendar uses Python identifier calendar
    __calendar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'calendar'), 'calendar', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtDate_httpschemas_openxmlformats_orgwordprocessingml2006maincalendar', False)

    
    calendar = property(__calendar.value, __calendar.set, None, u'Date Picker Calendar Type')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dateFormat uses Python identifier dateFormat
    __dateFormat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dateFormat'), 'dateFormat', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtDate_httpschemas_openxmlformats_orgwordprocessingml2006maindateFormat', False)

    
    dateFormat = property(__dateFormat.value, __dateFormat.set, None, u'Date Display Mask')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}storeMappedDataAs uses Python identifier storeMappedDataAs
    __storeMappedDataAs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'storeMappedDataAs'), 'storeMappedDataAs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtDate_httpschemas_openxmlformats_orgwordprocessingml2006mainstoreMappedDataAs', False)

    
    storeMappedDataAs = property(__storeMappedDataAs.value, __storeMappedDataAs.set, None, u'Custom XML Data Date Storage Format')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lid uses Python identifier lid
    __lid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lid'), 'lid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtDate_httpschemas_openxmlformats_orgwordprocessingml2006mainlid', False)

    
    lid = property(__lid.value, __lid.set, None, u'Date Picker Language ID')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fullDate uses Python identifier fullDate
    __fullDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fullDate'), 'fullDate', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_SdtDate_httpschemas_openxmlformats_orgwordprocessingml2006mainfullDate', ST_DateTime)
    
    fullDate = property(__fullDate.value, __fullDate.set, None, u'Last Known Date in XML Schema DateTime Format')


    _ElementMap = {
        __calendar.name() : __calendar,
        __dateFormat.name() : __dateFormat,
        __storeMappedDataAs.name() : __storeMappedDataAs,
        __lid.name() : __lid
    }
    _AttributeMap = {
        __fullDate.name() : __fullDate
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_SdtDate', CT_SdtDate)


# Complex type CT_PBdr with content type ELEMENT_ONLY
class CT_PBdr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_PBdr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}right uses Python identifier right
    __right = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), 'right', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PBdr_httpschemas_openxmlformats_orgwordprocessingml2006mainright', False)

    
    right = property(__right.value, __right.set, None, u'Right Paragraph Border')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}between uses Python identifier between
    __between = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'between'), 'between', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PBdr_httpschemas_openxmlformats_orgwordprocessingml2006mainbetween', False)

    
    between = property(__between.value, __between.set, None, u'Paragraph Border Between Identical Paragraphs')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bottom uses Python identifier bottom
    __bottom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom'), 'bottom', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PBdr_httpschemas_openxmlformats_orgwordprocessingml2006mainbottom', False)

    
    bottom = property(__bottom.value, __bottom.set, None, u'Paragraph Border Below Identical Paragraphs')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}bar uses Python identifier bar
    __bar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'bar'), 'bar', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PBdr_httpschemas_openxmlformats_orgwordprocessingml2006mainbar', False)

    
    bar = property(__bar.value, __bar.set, None, u'Paragraph Border Between Facing Pages')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}top uses Python identifier top
    __top = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'top'), 'top', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PBdr_httpschemas_openxmlformats_orgwordprocessingml2006maintop', False)

    
    top = property(__top.value, __top.set, None, u'Paragraph Border Above Identical Paragraphs')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}left uses Python identifier left
    __left = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), 'left', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_PBdr_httpschemas_openxmlformats_orgwordprocessingml2006mainleft', False)

    
    left = property(__left.value, __left.set, None, u'Left Paragraph Border')


    _ElementMap = {
        __right.name() : __right,
        __between.name() : __between,
        __bottom.name() : __bottom,
        __bar.name() : __bar,
        __top.name() : __top,
        __left.name() : __left
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_PBdr', CT_PBdr)


# Complex type CT_DocVars with content type ELEMENT_ONLY
class CT_DocVars (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocVars')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docVar uses Python identifier docVar
    __docVar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docVar'), 'docVar', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocVars_httpschemas_openxmlformats_orgwordprocessingml2006maindocVar', True)

    
    docVar = property(__docVar.value, __docVar.set, None, u'Single Document Variable')


    _ElementMap = {
        __docVar.name() : __docVar
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocVars', CT_DocVars)


# Complex type CT_FFName with content type EMPTY
class CT_FFName (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FFName')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FFName_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_FFName)
    
    val = property(__val.value, __val.set, None, u'Form Field Name Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_FFName', CT_FFName)


# Complex type CT_SPrePr with content type ELEMENT_ONLY
class CT_SPrePr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_SPrePr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_SPrePr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)


    _ElementMap = {
        __ctrlPr.name() : __ctrlPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_SPrePr', CT_SPrePr)


# Complex type CT_RadPr with content type ELEMENT_ONLY
class CT_RadPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_RadPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_RadPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}degHide uses Python identifier degHide
    __degHide = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'degHide'), 'degHide', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_RadPr_httpschemas_openxmlformats_orgofficeDocument2006mathdegHide', False)

    
    degHide = property(__degHide.value, __degHide.set, None, u'Hide Degree')


    _ElementMap = {
        __ctrlPr.name() : __ctrlPr,
        __degHide.name() : __degHide
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_RadPr', CT_RadPr)


# Complex type CT_Compat with content type ELEMENT_ONLY
class CT_Compat (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Compat')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}layoutTableRowsApart uses Python identifier layoutTableRowsApart
    __layoutTableRowsApart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'layoutTableRowsApart'), 'layoutTableRowsApart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainlayoutTableRowsApart', False)

    
    layoutTableRowsApart = property(__layoutTableRowsApart.value, __layoutTableRowsApart.set, None, u'Allow Table Rows to Wrap Inline Objects Independently')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cachedColBalance uses Python identifier cachedColBalance
    __cachedColBalance = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cachedColBalance'), 'cachedColBalance', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maincachedColBalance', False)

    
    cachedColBalance = property(__cachedColBalance.value, __cachedColBalance.set, None, u'Use Cached Paragraph Information for Column Balancing')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotSuppressParagraphBorders uses Python identifier doNotSuppressParagraphBorders
    __doNotSuppressParagraphBorders = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotSuppressParagraphBorders'), 'doNotSuppressParagraphBorders', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotSuppressParagraphBorders', False)

    
    doNotSuppressParagraphBorders = property(__doNotSuppressParagraphBorders.value, __doNotSuppressParagraphBorders.set, None, u'Do Not Suppress Paragraph Borders Next To Frames')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}autoSpaceLikeWord95 uses Python identifier autoSpaceLikeWord95
    __autoSpaceLikeWord95 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'autoSpaceLikeWord95'), 'autoSpaceLikeWord95', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainautoSpaceLikeWord95', False)

    
    autoSpaceLikeWord95 = property(__autoSpaceLikeWord95.value, __autoSpaceLikeWord95.set, None, u'Incorrectly Adjust Text Spacing for Specific Unicode Ranges')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotLeaveBackslashAlone uses Python identifier doNotLeaveBackslashAlone
    __doNotLeaveBackslashAlone = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotLeaveBackslashAlone'), 'doNotLeaveBackslashAlone', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotLeaveBackslashAlone', False)

    
    doNotLeaveBackslashAlone = property(__doNotLeaveBackslashAlone.value, __doNotLeaveBackslashAlone.set, None, u'Display Backslash As Yen Sign')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noTabHangInd uses Python identifier noTabHangInd
    __noTabHangInd = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noTabHangInd'), 'noTabHangInd', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainnoTabHangInd', False)

    
    noTabHangInd = property(__noTabHangInd.value, __noTabHangInd.set, None, u'Do Not Create Custom Tab Stop for Hanging Indent')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}growAutofit uses Python identifier growAutofit
    __growAutofit = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'growAutofit'), 'growAutofit', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maingrowAutofit', False)

    
    growAutofit = property(__growAutofit.value, __growAutofit.set, None, u'Allow Tables to AutoFit Into Page Margins')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotUseIndentAsNumberingTabStop uses Python identifier doNotUseIndentAsNumberingTabStop
    __doNotUseIndentAsNumberingTabStop = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotUseIndentAsNumberingTabStop'), 'doNotUseIndentAsNumberingTabStop', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotUseIndentAsNumberingTabStop', False)

    
    doNotUseIndentAsNumberingTabStop = property(__doNotUseIndentAsNumberingTabStop.value, __doNotUseIndentAsNumberingTabStop.set, None, u'Ignore Hanging Indent When Creating Tab Stop After Numbering')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}wpSpaceWidth uses Python identifier wpSpaceWidth
    __wpSpaceWidth = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'wpSpaceWidth'), 'wpSpaceWidth', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainwpSpaceWidth', False)

    
    wpSpaceWidth = property(__wpSpaceWidth.value, __wpSpaceWidth.set, None, u'Use Specific Space Width')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}useWord2002TableStyleRules uses Python identifier useWord2002TableStyleRules
    __useWord2002TableStyleRules = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'useWord2002TableStyleRules'), 'useWord2002TableStyleRules', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainuseWord2002TableStyleRules', False)

    
    useWord2002TableStyleRules = property(__useWord2002TableStyleRules.value, __useWord2002TableStyleRules.set, None, u'Incorrectly Display Top Border of Conditional Columns')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotExpandShiftReturn uses Python identifier doNotExpandShiftReturn
    __doNotExpandShiftReturn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotExpandShiftReturn'), 'doNotExpandShiftReturn', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotExpandShiftReturn', False)

    
    doNotExpandShiftReturn = property(__doNotExpandShiftReturn.value, __doNotExpandShiftReturn.set, None, u"Don't Justify Lines Ending in Soft Line Break")

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}spacingInWholePoints uses Python identifier spacingInWholePoints
    __spacingInWholePoints = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'spacingInWholePoints'), 'spacingInWholePoints', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainspacingInWholePoints', False)

    
    spacingInWholePoints = property(__spacingInWholePoints.value, __spacingInWholePoints.set, None, u'Only Expand/Condense Text By Whole Points')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}swapBordersFacingPages uses Python identifier swapBordersFacingPages
    __swapBordersFacingPages = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'swapBordersFacingPages'), 'swapBordersFacingPages', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainswapBordersFacingPages', False)

    
    swapBordersFacingPages = property(__swapBordersFacingPages.value, __swapBordersFacingPages.set, None, u'Swap Paragraph Borders on Odd Numbered Pages')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}allowSpaceOfSameStyleInTable uses Python identifier allowSpaceOfSameStyleInTable
    __allowSpaceOfSameStyleInTable = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'allowSpaceOfSameStyleInTable'), 'allowSpaceOfSameStyleInTable', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainallowSpaceOfSameStyleInTable', False)

    
    allowSpaceOfSameStyleInTable = property(__allowSpaceOfSameStyleInTable.value, __allowSpaceOfSameStyleInTable.set, None, u'Allow Contextual Spacing of Paragraphs in Tables')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}forgetLastTabAlignment uses Python identifier forgetLastTabAlignment
    __forgetLastTabAlignment = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'forgetLastTabAlignment'), 'forgetLastTabAlignment', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainforgetLastTabAlignment', False)

    
    forgetLastTabAlignment = property(__forgetLastTabAlignment.value, __forgetLastTabAlignment.set, None, u'Ignore Width of Last Tab Stop When Aligning Paragraph If It Is Not Left Aligned')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}suppressTopSpacing uses Python identifier suppressTopSpacing
    __suppressTopSpacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressTopSpacing'), 'suppressTopSpacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainsuppressTopSpacing', False)

    
    suppressTopSpacing = property(__suppressTopSpacing.value, __suppressTopSpacing.set, None, u'Ignore Minimum and Exact Line Height for First Line on Page')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}ulTrailSpace uses Python identifier ulTrailSpace
    __ulTrailSpace = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'ulTrailSpace'), 'ulTrailSpace', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainulTrailSpace', False)

    
    ulTrailSpace = property(__ulTrailSpace.value, __ulTrailSpace.set, None, u'Underline All Trailing Spaces')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotAutofitConstrainedTables uses Python identifier doNotAutofitConstrainedTables
    __doNotAutofitConstrainedTables = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotAutofitConstrainedTables'), 'doNotAutofitConstrainedTables', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotAutofitConstrainedTables', False)

    
    doNotAutofitConstrainedTables = property(__doNotAutofitConstrainedTables.value, __doNotAutofitConstrainedTables.set, None, u'Do Not AutoFit Tables To Fit Next To Wrapped Objects')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noLeading uses Python identifier noLeading
    __noLeading = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noLeading'), 'noLeading', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainnoLeading', False)

    
    noLeading = property(__noLeading.value, __noLeading.set, None, u'Do Not Add Leading Between Lines of Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}alignTablesRowByRow uses Python identifier alignTablesRowByRow
    __alignTablesRowByRow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'alignTablesRowByRow'), 'alignTablesRowByRow', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainalignTablesRowByRow', False)

    
    alignTablesRowByRow = property(__alignTablesRowByRow.value, __alignTablesRowByRow.set, None, u'Align Table Rows Independently')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}usePrinterMetrics uses Python identifier usePrinterMetrics
    __usePrinterMetrics = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'usePrinterMetrics'), 'usePrinterMetrics', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainusePrinterMetrics', False)

    
    usePrinterMetrics = property(__usePrinterMetrics.value, __usePrinterMetrics.set, None, u'Use Printer Metrics To Display Documents')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}useAltKinsokuLineBreakRules uses Python identifier useAltKinsokuLineBreakRules
    __useAltKinsokuLineBreakRules = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'useAltKinsokuLineBreakRules'), 'useAltKinsokuLineBreakRules', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainuseAltKinsokuLineBreakRules', False)

    
    useAltKinsokuLineBreakRules = property(__useAltKinsokuLineBreakRules.value, __useAltKinsokuLineBreakRules.set, None, u'Use Alternate Set of East Asian Line Breaking Rules')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}autofitToFirstFixedWidthCell uses Python identifier autofitToFirstFixedWidthCell
    __autofitToFirstFixedWidthCell = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'autofitToFirstFixedWidthCell'), 'autofitToFirstFixedWidthCell', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainautofitToFirstFixedWidthCell', False)

    
    autofitToFirstFixedWidthCell = property(__autofitToFirstFixedWidthCell.value, __autofitToFirstFixedWidthCell.set, None, u'Allow Table Columns To Exceed Preferred Widths of Constituent Cells')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}showBreaksInFrames uses Python identifier showBreaksInFrames
    __showBreaksInFrames = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'showBreaksInFrames'), 'showBreaksInFrames', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainshowBreaksInFrames', False)

    
    showBreaksInFrames = property(__showBreaksInFrames.value, __showBreaksInFrames.set, None, u'Display Page/Column Breaks Present in Frames')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noSpaceRaiseLower uses Python identifier noSpaceRaiseLower
    __noSpaceRaiseLower = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noSpaceRaiseLower'), 'noSpaceRaiseLower', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainnoSpaceRaiseLower', False)

    
    noSpaceRaiseLower = property(__noSpaceRaiseLower.value, __noSpaceRaiseLower.set, None, u'Do Not Increase Line Height for Raised/Lowered Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}footnoteLayoutLikeWW8 uses Python identifier footnoteLayoutLikeWW8
    __footnoteLayoutLikeWW8 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'footnoteLayoutLikeWW8'), 'footnoteLayoutLikeWW8', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainfootnoteLayoutLikeWW8', False)

    
    footnoteLayoutLikeWW8 = property(__footnoteLayoutLikeWW8.value, __footnoteLayoutLikeWW8.set, None, u'Ignore Page Break from Continuous Section Break')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}lineWrapLikeWord6 uses Python identifier lineWrapLikeWord6
    __lineWrapLikeWord6 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'lineWrapLikeWord6'), 'lineWrapLikeWord6', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainlineWrapLikeWord6', False)

    
    lineWrapLikeWord6 = property(__lineWrapLikeWord6.value, __lineWrapLikeWord6.set, None, u'Ignore Compression of Full-Width Punctuation Ending a Line')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotBreakWrappedTables uses Python identifier doNotBreakWrappedTables
    __doNotBreakWrappedTables = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotBreakWrappedTables'), 'doNotBreakWrappedTables', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotBreakWrappedTables', False)

    
    doNotBreakWrappedTables = property(__doNotBreakWrappedTables.value, __doNotBreakWrappedTables.set, None, u'Do Not Allow Floating Tables To Break Across Pages')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}applyBreakingRules uses Python identifier applyBreakingRules
    __applyBreakingRules = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'applyBreakingRules'), 'applyBreakingRules', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainapplyBreakingRules', False)

    
    applyBreakingRules = property(__applyBreakingRules.value, __applyBreakingRules.set, None, u'Use Legacy Ethiopic and Amharic Line Breaking Rules')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotBreakConstrainedForcedTable uses Python identifier doNotBreakConstrainedForcedTable
    __doNotBreakConstrainedForcedTable = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotBreakConstrainedForcedTable'), 'doNotBreakConstrainedForcedTable', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotBreakConstrainedForcedTable', False)

    
    doNotBreakConstrainedForcedTable = property(__doNotBreakConstrainedForcedTable.value, __doNotBreakConstrainedForcedTable.set, None, u"Don't Break Table Rows Around Floating Tables")

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotUseEastAsianBreakRules uses Python identifier doNotUseEastAsianBreakRules
    __doNotUseEastAsianBreakRules = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotUseEastAsianBreakRules'), 'doNotUseEastAsianBreakRules', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotUseEastAsianBreakRules', False)

    
    doNotUseEastAsianBreakRules = property(__doNotUseEastAsianBreakRules.value, __doNotUseEastAsianBreakRules.set, None, u'Do Not Compress Compressible Characters When Using Document Grid')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}splitPgBreakAndParaMark uses Python identifier splitPgBreakAndParaMark
    __splitPgBreakAndParaMark = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'splitPgBreakAndParaMark'), 'splitPgBreakAndParaMark', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainsplitPgBreakAndParaMark', False)

    
    splitPgBreakAndParaMark = property(__splitPgBreakAndParaMark.value, __splitPgBreakAndParaMark.set, None, u'Always Move Paragraph Mark to Page after a Page Break')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotUseHTMLParagraphAutoSpacing uses Python identifier doNotUseHTMLParagraphAutoSpacing
    __doNotUseHTMLParagraphAutoSpacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotUseHTMLParagraphAutoSpacing'), 'doNotUseHTMLParagraphAutoSpacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotUseHTMLParagraphAutoSpacing', False)

    
    doNotUseHTMLParagraphAutoSpacing = property(__doNotUseHTMLParagraphAutoSpacing.value, __doNotUseHTMLParagraphAutoSpacing.set, None, u'Use Fixed Paragraph Spacing for HTML Auto Setting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}underlineTabInNumList uses Python identifier underlineTabInNumList
    __underlineTabInNumList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'underlineTabInNumList'), 'underlineTabInNumList', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainunderlineTabInNumList', False)

    
    underlineTabInNumList = property(__underlineTabInNumList.value, __underlineTabInNumList.set, None, u'Underline Following Character Following Numbering')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotVertAlignCellWithSp uses Python identifier doNotVertAlignCellWithSp
    __doNotVertAlignCellWithSp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotVertAlignCellWithSp'), 'doNotVertAlignCellWithSp', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotVertAlignCellWithSp', False)

    
    doNotVertAlignCellWithSp = property(__doNotVertAlignCellWithSp.value, __doNotVertAlignCellWithSp.set, None, u"Don't Vertically Align Cells Containing Floating Objects")

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}spaceForUL uses Python identifier spaceForUL
    __spaceForUL = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'spaceForUL'), 'spaceForUL', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainspaceForUL', False)

    
    spaceForUL = property(__spaceForUL.value, __spaceForUL.set, None, u'Add Additional Space Below Baseline For Underlined East Asian Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}suppressTopSpacingWP uses Python identifier suppressTopSpacingWP
    __suppressTopSpacingWP = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressTopSpacingWP'), 'suppressTopSpacingWP', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainsuppressTopSpacingWP', False)

    
    suppressTopSpacingWP = property(__suppressTopSpacingWP.value, __suppressTopSpacingWP.set, None, u'Use Static Text Leading')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noExtraLineSpacing uses Python identifier noExtraLineSpacing
    __noExtraLineSpacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noExtraLineSpacing'), 'noExtraLineSpacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainnoExtraLineSpacing', False)

    
    noExtraLineSpacing = property(__noExtraLineSpacing.value, __noExtraLineSpacing.set, None, u'Do Not Center Content on Lines With Exact Line Height')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}useWord97LineBreakRules uses Python identifier useWord97LineBreakRules
    __useWord97LineBreakRules = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'useWord97LineBreakRules'), 'useWord97LineBreakRules', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainuseWord97LineBreakRules', False)

    
    useWord97LineBreakRules = property(__useWord97LineBreakRules.value, __useWord97LineBreakRules.set, None, u'Use Incorrect Inter-Character Spacing Rules')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}shapeLayoutLikeWW8 uses Python identifier shapeLayoutLikeWW8
    __shapeLayoutLikeWW8 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'shapeLayoutLikeWW8'), 'shapeLayoutLikeWW8', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainshapeLayoutLikeWW8', False)

    
    shapeLayoutLikeWW8 = property(__shapeLayoutLikeWW8.value, __shapeLayoutLikeWW8.set, None, u'Ignore Text Wrapping around Objects at Bottom of Page')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}subFontBySize uses Python identifier subFontBySize
    __subFontBySize = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'subFontBySize'), 'subFontBySize', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainsubFontBySize', False)

    
    subFontBySize = property(__subFontBySize.value, __subFontBySize.set, None, u'Require Exact Size During Font Substitution')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}wrapTrailSpaces uses Python identifier wrapTrailSpaces
    __wrapTrailSpaces = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'wrapTrailSpaces'), 'wrapTrailSpaces', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainwrapTrailSpaces', False)

    
    wrapTrailSpaces = property(__wrapTrailSpaces.value, __wrapTrailSpaces.set, None, u'Line Wrap Trailing Spaces')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}suppressSpacingAtTopOfPage uses Python identifier suppressSpacingAtTopOfPage
    __suppressSpacingAtTopOfPage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressSpacingAtTopOfPage'), 'suppressSpacingAtTopOfPage', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainsuppressSpacingAtTopOfPage', False)

    
    suppressSpacingAtTopOfPage = property(__suppressSpacingAtTopOfPage.value, __suppressSpacingAtTopOfPage.set, None, u'Ignore Minimum Line Height for First Line on Page')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}compatSetting uses Python identifier compatSetting
    __compatSetting = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'compatSetting'), 'compatSetting', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maincompatSetting', True)

    
    compatSetting = property(__compatSetting.value, __compatSetting.set, None, u'Custom Compatibility Setting')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}printBodyTextBeforeHeader uses Python identifier printBodyTextBeforeHeader
    __printBodyTextBeforeHeader = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'printBodyTextBeforeHeader'), 'printBodyTextBeforeHeader', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainprintBodyTextBeforeHeader', False)

    
    printBodyTextBeforeHeader = property(__printBodyTextBeforeHeader.value, __printBodyTextBeforeHeader.set, None, u'Print Body Text before Header/Footer Contents')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotSnapToGridInCell uses Python identifier doNotSnapToGridInCell
    __doNotSnapToGridInCell = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotSnapToGridInCell'), 'doNotSnapToGridInCell', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotSnapToGridInCell', False)

    
    doNotSnapToGridInCell = property(__doNotSnapToGridInCell.value, __doNotSnapToGridInCell.set, None, u'Do Not Snap to Document Grid in Table Cells with Objects')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotWrapTextWithPunct uses Python identifier doNotWrapTextWithPunct
    __doNotWrapTextWithPunct = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotWrapTextWithPunct'), 'doNotWrapTextWithPunct', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotWrapTextWithPunct', False)

    
    doNotWrapTextWithPunct = property(__doNotWrapTextWithPunct.value, __doNotWrapTextWithPunct.set, None, u'Do Not Allow Hanging Punctuation With Character Grid')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotVertAlignInTxbx uses Python identifier doNotVertAlignInTxbx
    __doNotVertAlignInTxbx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotVertAlignInTxbx'), 'doNotVertAlignInTxbx', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotVertAlignInTxbx', False)

    
    doNotVertAlignInTxbx = property(__doNotVertAlignInTxbx.value, __doNotVertAlignInTxbx.set, None, u'Ignore Vertical Alignment in Textboxes')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}useSingleBorderforContiguousCells uses Python identifier useSingleBorderforContiguousCells
    __useSingleBorderforContiguousCells = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'useSingleBorderforContiguousCells'), 'useSingleBorderforContiguousCells', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainuseSingleBorderforContiguousCells', False)

    
    useSingleBorderforContiguousCells = property(__useSingleBorderforContiguousCells.value, __useSingleBorderforContiguousCells.set, None, u'Use Simplified Rules For Table Border Conflicts')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}balanceSingleByteDoubleByteWidth uses Python identifier balanceSingleByteDoubleByteWidth
    __balanceSingleByteDoubleByteWidth = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'balanceSingleByteDoubleByteWidth'), 'balanceSingleByteDoubleByteWidth', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainbalanceSingleByteDoubleByteWidth', False)

    
    balanceSingleByteDoubleByteWidth = property(__balanceSingleByteDoubleByteWidth.value, __balanceSingleByteDoubleByteWidth.set, None, u'Balance Single Byte and Double Byte Characters')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}wpJustification uses Python identifier wpJustification
    __wpJustification = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'wpJustification'), 'wpJustification', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainwpJustification', False)

    
    wpJustification = property(__wpJustification.value, __wpJustification.set, None, u'Fit To Expanded Width When Performing Full Justification')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}layoutRawTableWidth uses Python identifier layoutRawTableWidth
    __layoutRawTableWidth = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'layoutRawTableWidth'), 'layoutRawTableWidth', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainlayoutRawTableWidth', False)

    
    layoutRawTableWidth = property(__layoutRawTableWidth.value, __layoutRawTableWidth.set, None, u'Ignore Space Before Table When Deciding If Table Should Wrap Floating Object')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}displayHangulFixedWidth uses Python identifier displayHangulFixedWidth
    __displayHangulFixedWidth = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'displayHangulFixedWidth'), 'displayHangulFixedWidth', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maindisplayHangulFixedWidth', False)

    
    displayHangulFixedWidth = property(__displayHangulFixedWidth.value, __displayHangulFixedWidth.set, None, u'Always Use Fixed Width for Hangul Characters')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}printColBlack uses Python identifier printColBlack
    __printColBlack = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'printColBlack'), 'printColBlack', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainprintColBlack', False)

    
    printColBlack = property(__printColBlack.value, __printColBlack.set, None, u'Print Colors as Black And White without Dithering')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}suppressSpBfAfterPgBrk uses Python identifier suppressSpBfAfterPgBrk
    __suppressSpBfAfterPgBrk = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressSpBfAfterPgBrk'), 'suppressSpBfAfterPgBrk', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainsuppressSpBfAfterPgBrk', False)

    
    suppressSpBfAfterPgBrk = property(__suppressSpBfAfterPgBrk.value, __suppressSpBfAfterPgBrk.set, None, u'Do Not Use Space Before On First Line After a Page Break')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}adjustLineHeightInTable uses Python identifier adjustLineHeightInTable
    __adjustLineHeightInTable = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'adjustLineHeightInTable'), 'adjustLineHeightInTable', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainadjustLineHeightInTable', False)

    
    adjustLineHeightInTable = property(__adjustLineHeightInTable.value, __adjustLineHeightInTable.set, None, u'Add Document Grid Line Pitch To Lines in Table Cells')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotSuppressIndentation uses Python identifier doNotSuppressIndentation
    __doNotSuppressIndentation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotSuppressIndentation'), 'doNotSuppressIndentation', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotSuppressIndentation', False)

    
    doNotSuppressIndentation = property(__doNotSuppressIndentation.value, __doNotSuppressIndentation.set, None, u'Do Not Ignore Floating Objects When Calculating Paragraph Indentation')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}useAnsiKerningPairs uses Python identifier useAnsiKerningPairs
    __useAnsiKerningPairs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'useAnsiKerningPairs'), 'useAnsiKerningPairs', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainuseAnsiKerningPairs', False)

    
    useAnsiKerningPairs = property(__useAnsiKerningPairs.value, __useAnsiKerningPairs.set, None, u'Use ANSI Kerning Pairs from Fonts')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}convMailMergeEsc uses Python identifier convMailMergeEsc
    __convMailMergeEsc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'convMailMergeEsc'), 'convMailMergeEsc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainconvMailMergeEsc', False)

    
    convMailMergeEsc = property(__convMailMergeEsc.value, __convMailMergeEsc.set, None, u'Treat Backslash Quotation Delimiter as Two Quotation Marks')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}suppressBottomSpacing uses Python identifier suppressBottomSpacing
    __suppressBottomSpacing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressBottomSpacing'), 'suppressBottomSpacing', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainsuppressBottomSpacing', False)

    
    suppressBottomSpacing = property(__suppressBottomSpacing.value, __suppressBottomSpacing.set, None, u'Ignore Exact Line Height for Last Line on Page')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}useNormalStyleForList uses Python identifier useNormalStyleForList
    __useNormalStyleForList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'useNormalStyleForList'), 'useNormalStyleForList', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainuseNormalStyleForList', False)

    
    useNormalStyleForList = property(__useNormalStyleForList.value, __useNormalStyleForList.set, None, u'Do Not Automatically Apply List Paragraph Style To Bulleted/Numbered Text')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}truncateFontHeightsLikeWP6 uses Python identifier truncateFontHeightsLikeWP6
    __truncateFontHeightsLikeWP6 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'truncateFontHeightsLikeWP6'), 'truncateFontHeightsLikeWP6', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006maintruncateFontHeightsLikeWP6', False)

    
    truncateFontHeightsLikeWP6 = property(__truncateFontHeightsLikeWP6.value, __truncateFontHeightsLikeWP6.set, None, u'Use Truncated Integer Division For Font Calculation')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}mwSmallCaps uses Python identifier mwSmallCaps
    __mwSmallCaps = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'mwSmallCaps'), 'mwSmallCaps', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainmwSmallCaps', False)

    
    mwSmallCaps = property(__mwSmallCaps.value, __mwSmallCaps.set, None, u'Use Specific Small Caps Algorithm')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}selectFldWithFirstOrLastChar uses Python identifier selectFldWithFirstOrLastChar
    __selectFldWithFirstOrLastChar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'selectFldWithFirstOrLastChar'), 'selectFldWithFirstOrLastChar', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainselectFldWithFirstOrLastChar', False)

    
    selectFldWithFirstOrLastChar = property(__selectFldWithFirstOrLastChar.value, __selectFldWithFirstOrLastChar.set, None, u'Select Field When First or Last Character Is Selected')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}useFELayout uses Python identifier useFELayout
    __useFELayout = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'useFELayout'), 'useFELayout', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainuseFELayout', False)

    
    useFELayout = property(__useFELayout.value, __useFELayout.set, None, u'Do Not Bypass East Asian/Complex Script Layout Code')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noColumnBalance uses Python identifier noColumnBalance
    __noColumnBalance = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noColumnBalance'), 'noColumnBalance', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Compat_httpschemas_openxmlformats_orgwordprocessingml2006mainnoColumnBalance', False)

    
    noColumnBalance = property(__noColumnBalance.value, __noColumnBalance.set, None, u'Do Not Balance Text Columns within a Section')


    _ElementMap = {
        __layoutTableRowsApart.name() : __layoutTableRowsApart,
        __cachedColBalance.name() : __cachedColBalance,
        __doNotSuppressParagraphBorders.name() : __doNotSuppressParagraphBorders,
        __autoSpaceLikeWord95.name() : __autoSpaceLikeWord95,
        __doNotLeaveBackslashAlone.name() : __doNotLeaveBackslashAlone,
        __noTabHangInd.name() : __noTabHangInd,
        __growAutofit.name() : __growAutofit,
        __doNotUseIndentAsNumberingTabStop.name() : __doNotUseIndentAsNumberingTabStop,
        __wpSpaceWidth.name() : __wpSpaceWidth,
        __useWord2002TableStyleRules.name() : __useWord2002TableStyleRules,
        __doNotExpandShiftReturn.name() : __doNotExpandShiftReturn,
        __spacingInWholePoints.name() : __spacingInWholePoints,
        __swapBordersFacingPages.name() : __swapBordersFacingPages,
        __allowSpaceOfSameStyleInTable.name() : __allowSpaceOfSameStyleInTable,
        __forgetLastTabAlignment.name() : __forgetLastTabAlignment,
        __suppressTopSpacing.name() : __suppressTopSpacing,
        __ulTrailSpace.name() : __ulTrailSpace,
        __doNotAutofitConstrainedTables.name() : __doNotAutofitConstrainedTables,
        __noLeading.name() : __noLeading,
        __alignTablesRowByRow.name() : __alignTablesRowByRow,
        __usePrinterMetrics.name() : __usePrinterMetrics,
        __useAltKinsokuLineBreakRules.name() : __useAltKinsokuLineBreakRules,
        __autofitToFirstFixedWidthCell.name() : __autofitToFirstFixedWidthCell,
        __showBreaksInFrames.name() : __showBreaksInFrames,
        __noSpaceRaiseLower.name() : __noSpaceRaiseLower,
        __footnoteLayoutLikeWW8.name() : __footnoteLayoutLikeWW8,
        __lineWrapLikeWord6.name() : __lineWrapLikeWord6,
        __doNotBreakWrappedTables.name() : __doNotBreakWrappedTables,
        __applyBreakingRules.name() : __applyBreakingRules,
        __doNotBreakConstrainedForcedTable.name() : __doNotBreakConstrainedForcedTable,
        __doNotUseEastAsianBreakRules.name() : __doNotUseEastAsianBreakRules,
        __splitPgBreakAndParaMark.name() : __splitPgBreakAndParaMark,
        __doNotUseHTMLParagraphAutoSpacing.name() : __doNotUseHTMLParagraphAutoSpacing,
        __underlineTabInNumList.name() : __underlineTabInNumList,
        __doNotVertAlignCellWithSp.name() : __doNotVertAlignCellWithSp,
        __spaceForUL.name() : __spaceForUL,
        __suppressTopSpacingWP.name() : __suppressTopSpacingWP,
        __noExtraLineSpacing.name() : __noExtraLineSpacing,
        __useWord97LineBreakRules.name() : __useWord97LineBreakRules,
        __shapeLayoutLikeWW8.name() : __shapeLayoutLikeWW8,
        __subFontBySize.name() : __subFontBySize,
        __wrapTrailSpaces.name() : __wrapTrailSpaces,
        __suppressSpacingAtTopOfPage.name() : __suppressSpacingAtTopOfPage,
        __compatSetting.name() : __compatSetting,
        __printBodyTextBeforeHeader.name() : __printBodyTextBeforeHeader,
        __doNotSnapToGridInCell.name() : __doNotSnapToGridInCell,
        __doNotWrapTextWithPunct.name() : __doNotWrapTextWithPunct,
        __doNotVertAlignInTxbx.name() : __doNotVertAlignInTxbx,
        __useSingleBorderforContiguousCells.name() : __useSingleBorderforContiguousCells,
        __balanceSingleByteDoubleByteWidth.name() : __balanceSingleByteDoubleByteWidth,
        __wpJustification.name() : __wpJustification,
        __layoutRawTableWidth.name() : __layoutRawTableWidth,
        __displayHangulFixedWidth.name() : __displayHangulFixedWidth,
        __printColBlack.name() : __printColBlack,
        __suppressSpBfAfterPgBrk.name() : __suppressSpBfAfterPgBrk,
        __adjustLineHeightInTable.name() : __adjustLineHeightInTable,
        __doNotSuppressIndentation.name() : __doNotSuppressIndentation,
        __useAnsiKerningPairs.name() : __useAnsiKerningPairs,
        __convMailMergeEsc.name() : __convMailMergeEsc,
        __suppressBottomSpacing.name() : __suppressBottomSpacing,
        __useNormalStyleForList.name() : __useNormalStyleForList,
        __truncateFontHeightsLikeWP6.name() : __truncateFontHeightsLikeWP6,
        __mwSmallCaps.name() : __mwSmallCaps,
        __selectFldWithFirstOrLastChar.name() : __selectFldWithFirstOrLastChar,
        __useFELayout.name() : __useFELayout,
        __noColumnBalance.name() : __noColumnBalance
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Compat', CT_Compat)


# Complex type CT_AltChunkPr with content type ELEMENT_ONLY
class CT_AltChunkPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_AltChunkPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}matchSrc uses Python identifier matchSrc
    __matchSrc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'matchSrc'), 'matchSrc', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_AltChunkPr_httpschemas_openxmlformats_orgwordprocessingml2006mainmatchSrc', False)

    
    matchSrc = property(__matchSrc.value, __matchSrc.set, None, u'Keep Source Formatting on Import')


    _ElementMap = {
        __matchSrc.name() : __matchSrc
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_AltChunkPr', CT_AltChunkPr)


# Complex type CT_AutoCaption with content type EMPTY
class CT_AutoCaption (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_AutoCaption')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}caption uses Python identifier caption
    __caption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'caption'), 'caption', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_AutoCaption_httpschemas_openxmlformats_orgwordprocessingml2006maincaption', _s.ST_String, required=True)
    
    caption = property(__caption.value, __caption.set, None, u'Caption Used for Automatic Captioning')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_AutoCaption_httpschemas_openxmlformats_orgwordprocessingml2006mainname', _s.ST_String, required=True)
    
    name = property(__name.value, __name.set, None, u'Identifier of Object to be Automatically Captioned')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __caption.name() : __caption,
        __name.name() : __name
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_AutoCaption', CT_AutoCaption)


# Complex type CT_PhantPr with content type ELEMENT_ONLY
class CT_PhantPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_PhantPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}zeroAsc uses Python identifier zeroAsc
    __zeroAsc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'zeroAsc'), 'zeroAsc', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_PhantPr_httpschemas_openxmlformats_orgofficeDocument2006mathzeroAsc', False)

    
    zeroAsc = property(__zeroAsc.value, __zeroAsc.set, None, u'Phantom Zero Ascent')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}zeroDesc uses Python identifier zeroDesc
    __zeroDesc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'zeroDesc'), 'zeroDesc', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_PhantPr_httpschemas_openxmlformats_orgofficeDocument2006mathzeroDesc', False)

    
    zeroDesc = property(__zeroDesc.value, __zeroDesc.set, None, u'Phantom Zero Descent')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}transp uses Python identifier transp
    __transp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'transp'), 'transp', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_PhantPr_httpschemas_openxmlformats_orgofficeDocument2006mathtransp', False)

    
    transp = property(__transp.value, __transp.set, None, u'Transparent (Phantom)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_PhantPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}show uses Python identifier show
    __show = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'show'), 'show', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_PhantPr_httpschemas_openxmlformats_orgofficeDocument2006mathshow', False)

    
    show = property(__show.value, __show.set, None, u'Phantom Show')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}zeroWid uses Python identifier zeroWid
    __zeroWid = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'zeroWid'), 'zeroWid', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_PhantPr_httpschemas_openxmlformats_orgofficeDocument2006mathzeroWid', False)

    
    zeroWid = property(__zeroWid.value, __zeroWid.set, None, u'Phantom Zero Width')


    _ElementMap = {
        __zeroAsc.name() : __zeroAsc,
        __zeroDesc.name() : __zeroDesc,
        __transp.name() : __transp,
        __ctrlPr.name() : __ctrlPr,
        __show.name() : __show,
        __zeroWid.name() : __zeroWid
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_PhantPr', CT_PhantPr)


# Complex type CT_OptimizeForBrowser with content type EMPTY
class CT_OptimizeForBrowser (CT_OnOff):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_OptimizeForBrowser')
    # Base type is CT_OnOff
    
    # Attribute val inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_OnOff
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}target uses Python identifier target
    __target = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'target'), 'target', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_OptimizeForBrowser_httpschemas_openxmlformats_orgwordprocessingml2006maintarget', _s.ST_String)
    
    target = property(__target.value, __target.set, None, u'Target Output Profile')


    _ElementMap = CT_OnOff._ElementMap.copy()
    _ElementMap.update({
        
    })
    _AttributeMap = CT_OnOff._AttributeMap.copy()
    _AttributeMap.update({
        __target.name() : __target
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_OptimizeForBrowser', CT_OptimizeForBrowser)


# Complex type CT_MailMerge with content type ELEMENT_ONLY
class CT_MailMerge (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_MailMerge')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}query uses Python identifier query
    __query = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'query'), 'query', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006mainquery', False)

    
    query = property(__query.value, __query.set, None, u'Query For Data Source Records To Merge')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}odso uses Python identifier odso
    __odso = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'odso'), 'odso', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006mainodso', False)

    
    odso = property(__odso.value, __odso.set, None, u'Office Data Source Object Settings')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}mailSubject uses Python identifier mailSubject
    __mailSubject = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'mailSubject'), 'mailSubject', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006mainmailSubject', False)

    
    mailSubject = property(__mailSubject.value, __mailSubject.set, None, u'Merged E-mail or Fax Subject Line')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dataSource uses Python identifier dataSource
    __dataSource = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dataSource'), 'dataSource', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006maindataSource', False)

    
    dataSource = property(__dataSource.value, __dataSource.set, None, u'Data Source File Path')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}mainDocumentType uses Python identifier mainDocumentType
    __mainDocumentType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'mainDocumentType'), 'mainDocumentType', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006mainmainDocumentType', False)

    
    mainDocumentType = property(__mainDocumentType.value, __mainDocumentType.set, None, u'Source Document Type')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}mailAsAttachment uses Python identifier mailAsAttachment
    __mailAsAttachment = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'mailAsAttachment'), 'mailAsAttachment', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006mainmailAsAttachment', False)

    
    mailAsAttachment = property(__mailAsAttachment.value, __mailAsAttachment.set, None, u'Merged Document To E-Mail Attachment')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}linkToQuery uses Python identifier linkToQuery
    __linkToQuery = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'linkToQuery'), 'linkToQuery', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006mainlinkToQuery', False)

    
    linkToQuery = property(__linkToQuery.value, __linkToQuery.set, None, u'Query Contains Link to External Query File')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}headerSource uses Python identifier headerSource
    __headerSource = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'headerSource'), 'headerSource', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006mainheaderSource', False)

    
    headerSource = property(__headerSource.value, __headerSource.set, None, u'Header Definition File Path')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}addressFieldName uses Python identifier addressFieldName
    __addressFieldName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'addressFieldName'), 'addressFieldName', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006mainaddressFieldName', False)

    
    addressFieldName = property(__addressFieldName.value, __addressFieldName.set, None, u'Column Containing E-mail Address')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}viewMergedData uses Python identifier viewMergedData
    __viewMergedData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'viewMergedData'), 'viewMergedData', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006mainviewMergedData', False)

    
    viewMergedData = property(__viewMergedData.value, __viewMergedData.set, None, u'View Merged Data Within Document')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}doNotSuppressBlankLines uses Python identifier doNotSuppressBlankLines
    __doNotSuppressBlankLines = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotSuppressBlankLines'), 'doNotSuppressBlankLines', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006maindoNotSuppressBlankLines', False)

    
    doNotSuppressBlankLines = property(__doNotSuppressBlankLines.value, __doNotSuppressBlankLines.set, None, u'Remove Blank Lines from Merged Documents')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}dataType uses Python identifier dataType
    __dataType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'dataType'), 'dataType', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006maindataType', False)

    
    dataType = property(__dataType.value, __dataType.set, None, u'Data Source Type')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}activeRecord uses Python identifier activeRecord
    __activeRecord = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'activeRecord'), 'activeRecord', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006mainactiveRecord', False)

    
    activeRecord = property(__activeRecord.value, __activeRecord.set, None, u'Record Currently Displayed In Merged Document')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}destination uses Python identifier destination
    __destination = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'destination'), 'destination', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006maindestination', False)

    
    destination = property(__destination.value, __destination.set, None, u'Merged Document Destination')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}connectString uses Python identifier connectString
    __connectString = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'connectString'), 'connectString', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006mainconnectString', False)

    
    connectString = property(__connectString.value, __connectString.set, None, u'Data Source Connection String')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}checkErrors uses Python identifier checkErrors
    __checkErrors = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'checkErrors'), 'checkErrors', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_MailMerge_httpschemas_openxmlformats_orgwordprocessingml2006maincheckErrors', False)

    
    checkErrors = property(__checkErrors.value, __checkErrors.set, None, u'Mail Merge Error Reporting Setting')


    _ElementMap = {
        __query.name() : __query,
        __odso.name() : __odso,
        __mailSubject.name() : __mailSubject,
        __dataSource.name() : __dataSource,
        __mainDocumentType.name() : __mainDocumentType,
        __mailAsAttachment.name() : __mailAsAttachment,
        __linkToQuery.name() : __linkToQuery,
        __headerSource.name() : __headerSource,
        __addressFieldName.name() : __addressFieldName,
        __viewMergedData.name() : __viewMergedData,
        __doNotSuppressBlankLines.name() : __doNotSuppressBlankLines,
        __dataType.name() : __dataType,
        __activeRecord.name() : __activeRecord,
        __destination.name() : __destination,
        __connectString.name() : __connectString,
        __checkErrors.name() : __checkErrors
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_MailMerge', CT_MailMerge)


# Complex type CT_Odso with content type ELEMENT_ONLY
class CT_Odso (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Odso')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}colDelim uses Python identifier colDelim
    __colDelim = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'colDelim'), 'colDelim', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Odso_httpschemas_openxmlformats_orgwordprocessingml2006maincolDelim', False)

    
    colDelim = property(__colDelim.value, __colDelim.set, None, u'Column Delimiter for Data Source')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Odso_httpschemas_openxmlformats_orgwordprocessingml2006maintype', False)

    
    type = property(__type.value, __type.set, None, u'ODSO Data Source Type')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fHdr uses Python identifier fHdr
    __fHdr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fHdr'), 'fHdr', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Odso_httpschemas_openxmlformats_orgwordprocessingml2006mainfHdr', False)

    
    fHdr = property(__fHdr.value, __fHdr.set, None, u'First Row of Data Source Contains Column Names')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}udl uses Python identifier udl
    __udl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'udl'), 'udl', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Odso_httpschemas_openxmlformats_orgwordprocessingml2006mainudl', False)

    
    udl = property(__udl.value, __udl.set, None, u'UDL Connection String')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}fieldMapData uses Python identifier fieldMapData
    __fieldMapData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'fieldMapData'), 'fieldMapData', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Odso_httpschemas_openxmlformats_orgwordprocessingml2006mainfieldMapData', True)

    
    fieldMapData = property(__fieldMapData.value, __fieldMapData.set, None, u'External Data Source to Merge Field Mapping')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}table uses Python identifier table
    __table = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'table'), 'table', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Odso_httpschemas_openxmlformats_orgwordprocessingml2006maintable', False)

    
    table = property(__table.value, __table.set, None, u'Data Source Table Name')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}recipientData uses Python identifier recipientData
    __recipientData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'recipientData'), 'recipientData', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Odso_httpschemas_openxmlformats_orgwordprocessingml2006mainrecipientData', True)

    
    recipientData = property(__recipientData.value, __recipientData.set, None, u'Reference to Inclusion/Exclusion Data for Data Source')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}src uses Python identifier src
    __src = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'src'), 'src', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Odso_httpschemas_openxmlformats_orgwordprocessingml2006mainsrc', False)

    
    src = property(__src.value, __src.set, None, u'ODSO Data Source File Path')


    _ElementMap = {
        __colDelim.name() : __colDelim,
        __type.name() : __type,
        __fHdr.name() : __fHdr,
        __udl.name() : __udl,
        __fieldMapData.name() : __fieldMapData,
        __table.name() : __table,
        __recipientData.name() : __recipientData,
        __src.name() : __src
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Odso', CT_Odso)


# Complex type CT_NaryPr with content type ELEMENT_ONLY
class CT_NaryPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_NaryPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}supHide uses Python identifier supHide
    __supHide = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'supHide'), 'supHide', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_NaryPr_httpschemas_openxmlformats_orgofficeDocument2006mathsupHide', False)

    
    supHide = property(__supHide.value, __supHide.set, None, u'Hide Superscript (n-ary)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_NaryPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}subHide uses Python identifier subHide
    __subHide = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'subHide'), 'subHide', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_NaryPr_httpschemas_openxmlformats_orgofficeDocument2006mathsubHide', False)

    
    subHide = property(__subHide.value, __subHide.set, None, u'Hide Subscript (n-ary)')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}limLoc uses Python identifier limLoc
    __limLoc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'limLoc'), 'limLoc', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_NaryPr_httpschemas_openxmlformats_orgofficeDocument2006mathlimLoc', False)

    
    limLoc = property(__limLoc.value, __limLoc.set, None, u'n-ary Limit Location')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}chr uses Python identifier chr
    __chr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'chr'), 'chr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_NaryPr_httpschemas_openxmlformats_orgofficeDocument2006mathchr', False)

    
    chr = property(__chr.value, __chr.set, None, u'n-ary Operator Character')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}grow uses Python identifier grow
    __grow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'grow'), 'grow', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_NaryPr_httpschemas_openxmlformats_orgofficeDocument2006mathgrow', False)

    
    grow = property(__grow.value, __grow.set, None, u'n-ary Grow')


    _ElementMap = {
        __supHide.name() : __supHide,
        __ctrlPr.name() : __ctrlPr,
        __subHide.name() : __subHide,
        __limLoc.name() : __limLoc,
        __chr.name() : __chr,
        __grow.name() : __grow
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_NaryPr', CT_NaryPr)


# Complex type CT_BarPr with content type ELEMENT_ONLY
class CT_BarPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_BarPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BarPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}pos uses Python identifier pos
    __pos = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'pos'), 'pos', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BarPr_httpschemas_openxmlformats_orgofficeDocument2006mathpos', False)

    
    pos = property(__pos.value, __pos.set, None, u'Position')


    _ElementMap = {
        __ctrlPr.name() : __ctrlPr,
        __pos.name() : __pos
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_BarPr', CT_BarPr)


# Complex type CT_WriteProtection with content type EMPTY
class CT_WriteProtection (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_WriteProtection')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hash uses Python identifier hash
    __hash = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hash'), 'hash', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006mainhash', pyxb.binding.datatypes.base64Binary)
    
    hash = property(__hash.value, __hash.set, None, u'Password Hash')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptAlgorithmSid uses Python identifier cryptAlgorithmSid
    __cryptAlgorithmSid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptAlgorithmSid'), 'cryptAlgorithmSid', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006maincryptAlgorithmSid', ST_DecimalNumber)
    
    cryptAlgorithmSid = property(__cryptAlgorithmSid.value, __cryptAlgorithmSid.set, None, u'Cryptographic Hashing Algorithm')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}spinCount uses Python identifier spinCount
    __spinCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'spinCount'), 'spinCount', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006mainspinCount', ST_DecimalNumber)
    
    spinCount = property(__spinCount.value, __spinCount.set, None, u'Iterations to Run Hashing Algorithm')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}saltValue uses Python identifier saltValue
    __saltValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'saltValue'), 'saltValue', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006mainsaltValue', pyxb.binding.datatypes.base64Binary)
    
    saltValue = property(__saltValue.value, __saltValue.set, None, u'Salt Value for Password Verifier')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptProvider uses Python identifier cryptProvider
    __cryptProvider = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptProvider'), 'cryptProvider', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006maincryptProvider', _s.ST_String)
    
    cryptProvider = property(__cryptProvider.value, __cryptProvider.set, None, u'Cryptographic Provider')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptProviderType uses Python identifier cryptProviderType
    __cryptProviderType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptProviderType'), 'cryptProviderType', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006maincryptProviderType', _s.ST_CryptProv)
    
    cryptProviderType = property(__cryptProviderType.value, __cryptProviderType.set, None, u'Cryptographic Provider Type')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}algIdExt uses Python identifier algIdExt
    __algIdExt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'algIdExt'), 'algIdExt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006mainalgIdExt', ST_LongHexNumber)
    
    algIdExt = property(__algIdExt.value, __algIdExt.set, None, u'Cryptographic Algorithm Extensibility')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}algIdExtSource uses Python identifier algIdExtSource
    __algIdExtSource = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'algIdExtSource'), 'algIdExtSource', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006mainalgIdExtSource', _s.ST_String)
    
    algIdExtSource = property(__algIdExtSource.value, __algIdExtSource.set, None, u'Algorithm Extensibility Source')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptAlgorithmType uses Python identifier cryptAlgorithmType
    __cryptAlgorithmType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptAlgorithmType'), 'cryptAlgorithmType', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006maincryptAlgorithmType', _s.ST_AlgType)
    
    cryptAlgorithmType = property(__cryptAlgorithmType.value, __cryptAlgorithmType.set, None, u'Cryptographic Algorithm Type')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'algorithmName'), 'algorithmName', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006mainalgorithmName', _s.ST_String)
    
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, u'Cryptographic Algorithm Name')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptProviderTypeExtSource uses Python identifier cryptProviderTypeExtSource
    __cryptProviderTypeExtSource = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptProviderTypeExtSource'), 'cryptProviderTypeExtSource', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006maincryptProviderTypeExtSource', _s.ST_String)
    
    cryptProviderTypeExtSource = property(__cryptProviderTypeExtSource.value, __cryptProviderTypeExtSource.set, None, u'Provider Type Extensibility Source')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptProviderTypeExt uses Python identifier cryptProviderTypeExt
    __cryptProviderTypeExt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptProviderTypeExt'), 'cryptProviderTypeExt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006maincryptProviderTypeExt', ST_LongHexNumber)
    
    cryptProviderTypeExt = property(__cryptProviderTypeExt.value, __cryptProviderTypeExt.set, None, u'Cryptographic Provider Type Extensibility')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}hashValue uses Python identifier hashValue
    __hashValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'hashValue'), 'hashValue', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006mainhashValue', pyxb.binding.datatypes.base64Binary)
    
    hashValue = property(__hashValue.value, __hashValue.set, None, u'Password Hash Value')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptAlgorithmClass uses Python identifier cryptAlgorithmClass
    __cryptAlgorithmClass = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptAlgorithmClass'), 'cryptAlgorithmClass', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006maincryptAlgorithmClass', _s.ST_AlgClass)
    
    cryptAlgorithmClass = property(__cryptAlgorithmClass.value, __cryptAlgorithmClass.set, None, u'Cryptographic Algorithm Class')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}cryptSpinCount uses Python identifier cryptSpinCount
    __cryptSpinCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'cryptSpinCount'), 'cryptSpinCount', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006maincryptSpinCount', ST_DecimalNumber)
    
    cryptSpinCount = property(__cryptSpinCount.value, __cryptSpinCount.set, None, u'Iterations to Run Hashing Algorithm')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}recommended uses Python identifier recommended
    __recommended = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'recommended'), 'recommended', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006mainrecommended', _s.ST_OnOff)
    
    recommended = property(__recommended.value, __recommended.set, None, u'Recommend Write Protection in User Interface')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}salt uses Python identifier salt
    __salt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'salt'), 'salt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_WriteProtection_httpschemas_openxmlformats_orgwordprocessingml2006mainsalt', pyxb.binding.datatypes.base64Binary)
    
    salt = property(__salt.value, __salt.set, None, u'Salt for Password Verifier')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __hash.name() : __hash,
        __cryptAlgorithmSid.name() : __cryptAlgorithmSid,
        __spinCount.name() : __spinCount,
        __saltValue.name() : __saltValue,
        __cryptProvider.name() : __cryptProvider,
        __cryptProviderType.name() : __cryptProviderType,
        __algIdExt.name() : __algIdExt,
        __algIdExtSource.name() : __algIdExtSource,
        __cryptAlgorithmType.name() : __cryptAlgorithmType,
        __algorithmName.name() : __algorithmName,
        __cryptProviderTypeExtSource.name() : __cryptProviderTypeExtSource,
        __cryptProviderTypeExt.name() : __cryptProviderTypeExt,
        __hashValue.name() : __hashValue,
        __cryptAlgorithmClass.name() : __cryptAlgorithmClass,
        __cryptSpinCount.name() : __cryptSpinCount,
        __recommended.name() : __recommended,
        __salt.name() : __salt
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_WriteProtection', CT_WriteProtection)


# Complex type CT_AccPr with content type ELEMENT_ONLY
class CT_AccPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_AccPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_AccPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, u'Control Properties')

    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}chr uses Python identifier chr
    __chr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'chr'), 'chr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_AccPr_httpschemas_openxmlformats_orgofficeDocument2006mathchr', False)

    
    chr = property(__chr.value, __chr.set, None, u'Character')


    _ElementMap = {
        __ctrlPr.name() : __ctrlPr,
        __chr.name() : __chr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_AccPr', CT_AccPr)


# Complex type CT_DocVar with content type EMPTY
class CT_DocVar (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocVar')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocVar_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_String, required=True)
    
    val = property(__val.value, __val.set, None, u'Document Variable Value')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocVar_httpschemas_openxmlformats_orgwordprocessingml2006mainname', _s.ST_String, required=True)
    
    name = property(__name.value, __name.set, None, u'Document Variable Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __name.name() : __name
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocVar', CT_DocVar)


# Complex type CT_RecipientData with content type ELEMENT_ONLY
class CT_RecipientData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_RecipientData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}uniqueTag uses Python identifier uniqueTag
    __uniqueTag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'uniqueTag'), 'uniqueTag', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RecipientData_httpschemas_openxmlformats_orgwordprocessingml2006mainuniqueTag', False)

    
    uniqueTag = property(__uniqueTag.value, __uniqueTag.set, None, u'Unique Value for Record')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}active uses Python identifier active
    __active = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'active'), 'active', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RecipientData_httpschemas_openxmlformats_orgwordprocessingml2006mainactive', False)

    
    active = property(__active.value, __active.set, None, u'Record Is Included in Mail Merge')

    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}column uses Python identifier column
    __column = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'column'), 'column', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_RecipientData_httpschemas_openxmlformats_orgwordprocessingml2006maincolumn', False)

    
    column = property(__column.value, __column.set, None, u'Index of Column Containing Unique Values for Record')


    _ElementMap = {
        __uniqueTag.name() : __uniqueTag,
        __active.name() : __active,
        __column.name() : __column
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_RecipientData', CT_RecipientData)


# Complex type CT_Placeholder with content type ELEMENT_ONLY
class CT_Placeholder (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Placeholder')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}docPart uses Python identifier docPart
    __docPart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'docPart'), 'docPart', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Placeholder_httpschemas_openxmlformats_orgwordprocessingml2006maindocPart', False)

    
    docPart = property(__docPart.value, __docPart.set, None, u'Document Part Reference')


    _ElementMap = {
        __docPart.name() : __docPart
    }
    _AttributeMap = {
        
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Placeholder', CT_Placeholder)


# Complex type CT_FtnDocProps with content type ELEMENT_ONLY
class CT_FtnDocProps (CT_FtnProps):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_FtnDocProps')
    # Base type is CT_FtnProps
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}footnote uses Python identifier footnote
    __footnote = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'footnote'), 'footnote', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_FtnDocProps_httpschemas_openxmlformats_orgwordprocessingml2006mainfootnote', True)

    
    footnote = property(__footnote.value, __footnote.set, None, u'Special Footnote List')

    
    # Element numRestart ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}numRestart) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_FtnProps
    
    # Element numStart ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}numStart) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_FtnProps
    
    # Element pos ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}pos) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_FtnProps
    
    # Element numFmt ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}numFmt) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_FtnProps

    _ElementMap = CT_FtnProps._ElementMap.copy()
    _ElementMap.update({
        __footnote.name() : __footnote
    })
    _AttributeMap = CT_FtnProps._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_FtnDocProps', CT_FtnDocProps)


# Complex type CT_Caption with content type EMPTY
class CT_Caption (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Caption')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}heading uses Python identifier heading
    __heading = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'heading'), 'heading', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Caption_httpschemas_openxmlformats_orgwordprocessingml2006mainheading', ST_DecimalNumber)
    
    heading = property(__heading.value, __heading.set, None, u'Style for Chapter Headings')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}noLabel uses Python identifier noLabel
    __noLabel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'noLabel'), 'noLabel', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Caption_httpschemas_openxmlformats_orgwordprocessingml2006mainnoLabel', _s.ST_OnOff)
    
    noLabel = property(__noLabel.value, __noLabel.set, None, u'Do Not Include Name In Caption')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}numFmt uses Python identifier numFmt
    __numFmt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'numFmt'), 'numFmt', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Caption_httpschemas_openxmlformats_orgwordprocessingml2006mainnumFmt', ST_NumberFormat)
    
    numFmt = property(__numFmt.value, __numFmt.set, None, u'Caption Numbering Format')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Caption_httpschemas_openxmlformats_orgwordprocessingml2006mainname', _s.ST_String, required=True)
    
    name = property(__name.value, __name.set, None, u'Caption Type Name')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}pos uses Python identifier pos
    __pos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'pos'), 'pos', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Caption_httpschemas_openxmlformats_orgwordprocessingml2006mainpos', ST_CaptionPos)
    
    pos = property(__pos.value, __pos.set, None, u'Automatic Caption Placement')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}sep uses Python identifier sep
    __sep = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'sep'), 'sep', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Caption_httpschemas_openxmlformats_orgwordprocessingml2006mainsep', ST_ChapterSep)
    
    sep = property(__sep.value, __sep.set, None, u'Chapter Number/Item Index Separator')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}chapNum uses Python identifier chapNum
    __chapNum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'chapNum'), 'chapNum', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Caption_httpschemas_openxmlformats_orgwordprocessingml2006mainchapNum', _s.ST_OnOff)
    
    chapNum = property(__chapNum.value, __chapNum.set, None, u'Include Chapter Number in Field for Caption')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __heading.name() : __heading,
        __noLabel.name() : __noLabel,
        __numFmt.name() : __numFmt,
        __name.name() : __name,
        __pos.name() : __pos,
        __sep.name() : __sep,
        __chapNum.name() : __chapNum
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Caption', CT_Caption)


# Complex type CT_DataBinding with content type EMPTY
class CT_DataBinding (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DataBinding')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}storeItemID uses Python identifier storeItemID
    __storeItemID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'storeItemID'), 'storeItemID', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DataBinding_httpschemas_openxmlformats_orgwordprocessingml2006mainstoreItemID', _s.ST_String, required=True)
    
    storeItemID = property(__storeItemID.value, __storeItemID.set, None, u'Custom XML Data Storage ID')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}xpath uses Python identifier xpath
    __xpath = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'xpath'), 'xpath', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DataBinding_httpschemas_openxmlformats_orgwordprocessingml2006mainxpath', _s.ST_String, required=True)
    
    xpath = property(__xpath.value, __xpath.set, None, u'XPath')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}prefixMappings uses Python identifier prefixMappings
    __prefixMappings = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'prefixMappings'), 'prefixMappings', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DataBinding_httpschemas_openxmlformats_orgwordprocessingml2006mainprefixMappings', _s.ST_String)
    
    prefixMappings = property(__prefixMappings.value, __prefixMappings.set, None, u'XML Namespace Prefix Mappings')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __storeItemID.name() : __storeItemID,
        __xpath.name() : __xpath,
        __prefixMappings.name() : __prefixMappings
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DataBinding', CT_DataBinding)


# Complex type CT_Style_ with content type EMPTY
class CT_Style_ (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_Style')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_Style_httpschemas_openxmlformats_orgofficeDocument2006mathval', ST_Style)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_Style', CT_Style_)


# Complex type CT_DocPartTypes with content type ELEMENT_ONLY
class CT_DocPartTypes (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocPartTypes')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}type uses Python identifier type
    __type = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), 'type', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartTypes_httpschemas_openxmlformats_orgwordprocessingml2006maintype', True)

    
    type = property(__type.value, __type.set, None, u'Entry Type')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}all uses Python identifier all
    __all = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'all'), 'all', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocPartTypes_httpschemas_openxmlformats_orgwordprocessingml2006mainall', _s.ST_OnOff)
    
    all = property(__all.value, __all.set, None, u'Entry Is Of All Types')


    _ElementMap = {
        __type.name() : __type
    }
    _AttributeMap = {
        __all.name() : __all
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocPartTypes', CT_DocPartTypes)


# Complex type CT_CompatSetting with content type EMPTY
class CT_CompatSetting (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_CompatSetting')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}uri uses Python identifier uri
    __uri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'uri'), 'uri', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CompatSetting_httpschemas_openxmlformats_orgwordprocessingml2006mainuri', _s.ST_String)
    
    uri = property(__uri.value, __uri.set, None, u'Namespace of Setting')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), 'name', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CompatSetting_httpschemas_openxmlformats_orgwordprocessingml2006mainname', _s.ST_String)
    
    name = property(__name.value, __name.set, None, u'Name of Setting')

    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_CompatSetting_httpschemas_openxmlformats_orgwordprocessingml2006mainval', _s.ST_String)
    
    val = property(__val.value, __val.set, None, u'Value of Setting')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __uri.name() : __uri,
        __name.name() : __name,
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_CompatSetting', CT_CompatSetting)


# Complex type CT_Lock with content type EMPTY
class CT_Lock (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_Lock')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_Lock_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_Lock)
    
    val = property(__val.value, __val.set, None, u'Locking Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_Lock', CT_Lock)


# Complex type CT_DocType with content type EMPTY
class CT_DocType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_DocType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/wordprocessingml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_w, u'val'), 'val', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_DocType_httpschemas_openxmlformats_orgwordprocessingml2006mainval', ST_DocType, required=True)
    
    val = property(__val.value, __val.set, None, u'Document Classification Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_w.addCategoryObject('typeBinding', u'CT_DocType', CT_DocType)


# Complex type CT_BreakBin with content type EMPTY
class CT_BreakBin (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_BreakBin')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/math}val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(_Namespace_m, u'val'), 'val', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_BreakBin_httpschemas_openxmlformats_orgofficeDocument2006mathval', ST_BreakBin)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_BreakBin', CT_BreakBin)


# Complex type CT_TblPr with content type ELEMENT_ONLY
class CT_TblPr (CT_TblPrBase):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_w, u'CT_TblPr')
    # Base type is CT_TblPrBase
    
    # Element tblDescription ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblDescription) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element tblW ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblW) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element tblpPr ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblpPr) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element tblCaption ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblCaption) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element jc ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}jc) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element tblOverlap ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblOverlap) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element tblInd ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblInd) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblPrChange uses Python identifier tblPrChange
    __tblPrChange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPrChange'), 'tblPrChange', '__httpschemas_openxmlformats_orgwordprocessingml2006main_CT_TblPr_httpschemas_openxmlformats_orgwordprocessingml2006maintblPrChange', False)

    
    tblPrChange = property(__tblPrChange.value, __tblPrChange.set, None, u'Revision Information for Table Properties')

    
    # Element tblLayout ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblLayout) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element tblCellMar ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblCellMar) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element shd ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}shd) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element tblCellSpacing ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblCellSpacing) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element tblLook ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblLook) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element tblStyleRowBandSize ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblStyleRowBandSize) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element tblBorders ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblBorders) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element bidiVisual ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}bidiVisual) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element tblStyleColBandSize ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblStyleColBandSize) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase
    
    # Element tblStyle ({http://schemas.openxmlformats.org/wordprocessingml/2006/main}tblStyle) inherited from {http://schemas.openxmlformats.org/wordprocessingml/2006/main}CT_TblPrBase

    _ElementMap = CT_TblPrBase._ElementMap.copy()
    _ElementMap.update({
        __tblPrChange.name() : __tblPrChange
    })
    _AttributeMap = CT_TblPrBase._AttributeMap.copy()
    _AttributeMap.update({
        
    })
_Namespace_w.addCategoryObject('typeBinding', u'CT_TblPr', CT_TblPr)


# Complex type CT_FuncPr with content type ELEMENT_ONLY
class CT_FuncPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_m, u'CT_FuncPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/officeDocument/2006/math}ctrlPr uses Python identifier ctrlPr
    __ctrlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), 'ctrlPr', '__httpschemas_openxmlformats_orgofficeDocument2006math_CT_FuncPr_httpschemas_openxmlformats_orgofficeDocument2006mathctrlPr', False)

    
    ctrlPr = property(__ctrlPr.value, __ctrlPr.set, None, None)


    _ElementMap = {
        __ctrlPr.name() : __ctrlPr
    }
    _AttributeMap = {
        
    }
_Namespace_m.addCategoryObject('typeBinding', u'CT_FuncPr', CT_FuncPr)


endnotes = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'endnotes'), CT_Endnotes, documentation=u'Document Endnotes')
_Namespace_w.addCategoryObject('elementBinding', endnotes.name().localName(), endnotes)

fonts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fonts'), CT_FontsList, documentation=u'Font Table Root Element')
_Namespace_w.addCategoryObject('elementBinding', fonts.name().localName(), fonts)

document = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'document'), CT_Document, documentation=u'Document')
_Namespace_w.addCategoryObject('elementBinding', document.name().localName(), document)

footnotes = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'footnotes'), CT_Footnotes, documentation=u'Document Footnotes')
_Namespace_w.addCategoryObject('elementBinding', footnotes.name().localName(), footnotes)

webSettings = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'webSettings'), CT_WebSettings, documentation=u'Web Page Settings')
_Namespace_w.addCategoryObject('elementBinding', webSettings.name().localName(), webSettings)

recipients = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'recipients'), CT_Recipients, documentation=u'Inclusion/Exclusion Data for Data Source')
_Namespace_w.addCategoryObject('elementBinding', recipients.name().localName(), recipients)

comments = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'comments'), CT_Comments, documentation=u'Comments Collection')
_Namespace_w.addCategoryObject('elementBinding', comments.name().localName(), comments)

txbxContent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'txbxContent'), CT_TxbxContent, documentation=u'Rich Text Box Content Container')
_Namespace_w.addCategoryObject('elementBinding', txbxContent.name().localName(), txbxContent)

settings = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'settings'), CT_Settings, documentation=u'Document Settings')
_Namespace_w.addCategoryObject('elementBinding', settings.name().localName(), settings)

numbering = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'numbering'), CT_Numbering, documentation=u'Numbering Definitions')
_Namespace_w.addCategoryObject('elementBinding', numbering.name().localName(), numbering)

ftr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ftr'), CT_HdrFtr, documentation=u'Footer')
_Namespace_w.addCategoryObject('elementBinding', ftr.name().localName(), ftr)

oMathPara = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, documentation=u'Office Math Paragraph')
_Namespace_m.addCategoryObject('elementBinding', oMathPara.name().localName(), oMathPara)

oMath = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath)
_Namespace_m.addCategoryObject('elementBinding', oMath.name().localName(), oMath)

glossaryDocument = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'glossaryDocument'), CT_GlossaryDocument, documentation=u'Glossary Document Root Element')
_Namespace_w.addCategoryObject('elementBinding', glossaryDocument.name().localName(), glossaryDocument)

mathPr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'mathPr'), CT_MathPr, documentation=u'Math Properties')
_Namespace_m.addCategoryObject('elementBinding', mathPr.name().localName(), mathPr)

styles = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'styles'), CT_Styles, documentation=u'Style Definitions')
_Namespace_w.addCategoryObject('elementBinding', styles.name().localName(), styles)

hdr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hdr'), CT_HdrFtr, documentation=u'Header')
_Namespace_w.addCategoryObject('elementBinding', hdr.name().localName(), hdr)



CT_FFCheckBox._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'checked'), CT_OnOff, scope=CT_FFCheckBox, documentation=u'Checkbox Form Field State'))

CT_FFCheckBox._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'size'), CT_HpsMeasure, scope=CT_FFCheckBox, documentation=u'Checkbox Form Field Size'))

CT_FFCheckBox._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sizeAuto'), CT_OnOff, scope=CT_FFCheckBox, documentation=u'Automatically Size Form Field'))

CT_FFCheckBox._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'default'), CT_OnOff, scope=CT_FFCheckBox, documentation=u'Default Checkbox Form Field State'))
CT_FFCheckBox._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FFCheckBox._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'size')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FFCheckBox._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sizeAuto')), min_occurs=1, max_occurs=1)
    )
CT_FFCheckBox._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FFCheckBox._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FFCheckBox._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'default')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FFCheckBox._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'checked')), min_occurs=0L, max_occurs=1)
    )
CT_FFCheckBox._ContentModel = pyxb.binding.content.ParticleModel(CT_FFCheckBox._GroupModel, min_occurs=1, max_occurs=1)



CT_AltChunk._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunkPr'), CT_AltChunkPr, scope=CT_AltChunk, documentation=u'External Content Import Properties'))
CT_AltChunk._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AltChunk._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunkPr')), min_occurs=0L, max_occurs=1L)
    )
CT_AltChunk._ContentModel = pyxb.binding.content.ParticleModel(CT_AltChunk._GroupModel, min_occurs=1, max_occurs=1)



CT_SdtRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtContent'), CT_SdtContentRun, scope=CT_SdtRun, documentation=u'Inline-Level Structured Document Tag Content'))

CT_SdtRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtPr'), CT_SdtPr, scope=CT_SdtRun, documentation=u'Structured Document Tag Properties'))

CT_SdtRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtEndPr'), CT_SdtEndPr, scope=CT_SdtRun, documentation=u'Structured Document Tag End Character Properties'))
CT_SdtRun._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SdtRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SdtRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtEndPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SdtRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtContent')), min_occurs=0L, max_occurs=1L)
    )
CT_SdtRun._ContentModel = pyxb.binding.content.ParticleModel(CT_SdtRun._GroupModel, min_occurs=1, max_occurs=1)



CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'eqArr'), CT_EqArr, scope=CT_RunTrackChange, documentation=u'Array Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_RunTrackChange, documentation=u'Comment Anchor Range End'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_RunTrackChange, documentation=u'Custom XML Markup Insertion Start'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'func'), CT_Func, scope=CT_RunTrackChange, documentation=u'Function Apply Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_RunTrackChange, documentation=u'Custom XML Markup Insertion End'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'f'), CT_F, scope=CT_RunTrackChange, documentation=u'Fraction Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'groupChr'), CT_GroupChr, scope=CT_RunTrackChange, documentation=u'Group-Character Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_RunTrackChange, documentation=u'Custom XML Markup Deletion Start'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'limLow'), CT_LimLow, scope=CT_RunTrackChange, documentation=u'Lower-Limit Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), CT_DirContentRun, scope=CT_RunTrackChange, documentation=u'Bidirectional Embedding Level'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_RunTrackChange, documentation=u'Custom XML Markup Deletion End'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'limUpp'), CT_LimUpp, scope=CT_RunTrackChange, documentation=u'Upper-Limit Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'm'), CT_M, scope=CT_RunTrackChange, documentation=u'Matrix Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_RunTrackChange, documentation=u'Custom XML Markup Move Source End'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'r'), CT_R, scope=CT_RunTrackChange, documentation=u'Run'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'nary'), CT_Nary, scope=CT_RunTrackChange, documentation=u'n-ary Operator Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_RunTrackChange, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sPre'), CT_SPre, scope=CT_RunTrackChange, documentation=u'Pre-Sub-Superscript Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'phant'), CT_Phant, scope=CT_RunTrackChange, documentation=u'Phantom Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_RunTrackChange, documentation=u'Custom XML Markup Move Destination Location End'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'rad'), CT_Rad, scope=CT_RunTrackChange, documentation=u'Radical Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), CT_BdoContentRun, scope=CT_RunTrackChange, documentation=u'Bidirectional Override'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_RunTrackChange, documentation=u'Deleted Run Content'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_RunTrackChange, documentation=u'Proofing Error Anchor'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_RunTrackChange, documentation=u'Move Source Run Content'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_RunTrackChange, documentation=u'Range Permission Start'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sSubSup'), CT_SSubSup, scope=CT_RunTrackChange, documentation=u'Sub-Superscript Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_RunTrackChange, documentation=u'Range Permission End'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sSub'), CT_SSub, scope=CT_RunTrackChange, documentation=u'Subscript Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sSup'), CT_SSup, scope=CT_RunTrackChange, documentation=u'Superscript Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_RunTrackChange, documentation=u'Custom XML Markup Move Source Start'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_RunTrackChange, documentation=u'Office Math Paragraph'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), CT_R_, scope=CT_RunTrackChange, documentation=u'Text Run'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_RunTrackChange, documentation=u'Bookmark Start'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_RunTrackChange, documentation=u'Move Destination Run Content'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlRun, scope=CT_RunTrackChange, documentation=u'Inline-Level Custom XML Element'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_RunTrackChange))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_RunTrackChange, documentation=u'Bookmark End'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'acc'), CT_Acc, scope=CT_RunTrackChange, documentation=u'Accent'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtRun, scope=CT_RunTrackChange, documentation=u'Inline-Level Structured Document Tag'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_RunTrackChange, documentation=u'Move Source Location Container - Start'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'bar'), CT_Bar, scope=CT_RunTrackChange, documentation=u'Bar'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_RunTrackChange, documentation=u'Move Source Location Container - End'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'box'), CT_Box, scope=CT_RunTrackChange, documentation=u'Box Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), CT_SmartTagRun, scope=CT_RunTrackChange, documentation=u'Inline-Level Smart Tag'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_RunTrackChange, documentation=u'Move Destination Location Container - Start'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'borderBox'), CT_BorderBox, scope=CT_RunTrackChange, documentation=u'Border-Box Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_RunTrackChange, documentation=u'Move Destination Location Container - End'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'd'), CT_D, scope=CT_RunTrackChange, documentation=u'Delimiter Object'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_RunTrackChange, documentation=u'Comment Anchor Range Start'))

CT_RunTrackChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_RunTrackChange, documentation=u'Inserted Run Content'))
CT_RunTrackChange._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_RunTrackChange._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_RunTrackChange._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._GroupModel_3, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._GroupModel_4, min_occurs=0L, max_occurs=None)
    )
CT_RunTrackChange._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dir')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'r')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CT_RunTrackChange._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'acc')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'bar')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'box')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'borderBox')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'eqArr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'f')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'func')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'groupChr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'limLow')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'limUpp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'm')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'nary')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'phant')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'rad')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sPre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sSub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sSubSup')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sSup')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'r')), min_occurs=1, max_occurs=1)
    )
CT_RunTrackChange._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RunTrackChange._GroupModel_5, min_occurs=1, max_occurs=1)
    )
CT_RunTrackChange._ContentModel = pyxb.binding.content.ParticleModel(CT_RunTrackChange._GroupModel, min_occurs=0L, max_occurs=None)



CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_CustomXmlRun, documentation=u'Custom XML Markup Move Destination Location End'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlPr'), CT_CustomXmlPr, scope=CT_CustomXmlRun, documentation=u'Custom XML Element Properties'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), CT_SimpleField, scope=CT_CustomXmlRun, documentation=u'Simple Field'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_CustomXmlRun, documentation=u'Deleted Run Content'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_CustomXmlRun, documentation=u'Proofing Error Anchor'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_CustomXmlRun, documentation=u'Inserted Run Content'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_CustomXmlRun, documentation=u'Move Source Run Content'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_CustomXmlRun, documentation=u'Range Permission Start'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlRun, scope=CT_CustomXmlRun, documentation=u'Inline-Level Custom XML Element'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_CustomXmlRun, documentation=u'Custom XML Markup Move Source End'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_CustomXmlRun, documentation=u'Move Destination Run Content'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_CustomXmlRun, documentation=u'Range Permission End'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_CustomXmlRun, documentation=u'Office Math Paragraph'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_CustomXmlRun, documentation=u'Bookmark Start'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_CustomXmlRun))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_CustomXmlRun, documentation=u'Bookmark End'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), CT_Hyperlink, scope=CT_CustomXmlRun, documentation=u'Hyperlink'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_CustomXmlRun, documentation=u'Move Source Location Container - Start'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_CustomXmlRun, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), CT_Rel, scope=CT_CustomXmlRun, documentation=u'Anchor for Subdocument Location'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_CustomXmlRun, documentation=u'Move Source Location Container - End'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_CustomXmlRun, documentation=u'Move Destination Location Container - Start'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_CustomXmlRun, documentation=u'Comment Anchor Range Start'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_CustomXmlRun, documentation=u'Comment Anchor Range End'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_CustomXmlRun, documentation=u'Move Destination Location Container - End'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_CustomXmlRun, documentation=u'Custom XML Markup Insertion Start'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_CustomXmlRun, documentation=u'Custom XML Markup Deletion End'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_CustomXmlRun, documentation=u'Custom XML Markup Insertion End'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), CT_R_, scope=CT_CustomXmlRun, documentation=u'Text Run'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_CustomXmlRun, documentation=u'Custom XML Markup Deletion Start'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), CT_SmartTagRun, scope=CT_CustomXmlRun, documentation=u'Inline-Level Smart Tag'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtRun, scope=CT_CustomXmlRun, documentation=u'Inline-Level Structured Document Tag'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), CT_DirContentRun, scope=CT_CustomXmlRun, documentation=u'Bidirectional Embedding Level'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_CustomXmlRun, documentation=u'Custom XML Markup Move Source Start'))

CT_CustomXmlRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), CT_BdoContentRun, scope=CT_CustomXmlRun, documentation=u'Bidirectional Override'))
CT_CustomXmlRun._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_CustomXmlRun._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_CustomXmlRun._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._GroupModel_4, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._GroupModel_5, min_occurs=0L, max_occurs=None)
    )
CT_CustomXmlRun._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dir')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'r')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._GroupModel_3, min_occurs=0L, max_occurs=None)
    )
CT_CustomXmlRun._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._GroupModel_2, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc')), min_occurs=1, max_occurs=1)
    )
CT_CustomXmlRun._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRun._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_CustomXmlRun._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomXmlRun._GroupModel, min_occurs=1, max_occurs=1)



CT_Func._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_Func, documentation=u'Element (Argument)'))

CT_Func._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'funcPr'), CT_FuncPr, scope=CT_Func, documentation=u'Function Properties'))

CT_Func._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'fName'), CT_OMathArg, scope=CT_Func, documentation=u'Function Name'))
CT_Func._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Func._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'funcPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Func._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'fName')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Func._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=1)
    )
CT_Func._ContentModel = pyxb.binding.content.ParticleModel(CT_Func._GroupModel, min_occurs=1, max_occurs=1)



CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_SmartTagRun, documentation=u'Move Source Run Content'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_SmartTagRun, documentation=u'Range Permission Start'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_SmartTagRun, documentation=u'Move Destination Run Content'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_SmartTagRun, documentation=u'Range Permission End'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_SmartTagRun, documentation=u'Move Source Location Container - Start'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_SmartTagRun, documentation=u'Office Math Paragraph'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_SmartTagRun, documentation=u'Bookmark Start'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_SmartTagRun))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_SmartTagRun, documentation=u'Bookmark End'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), CT_Hyperlink, scope=CT_SmartTagRun, documentation=u'Hyperlink'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), CT_Rel, scope=CT_SmartTagRun, documentation=u'Anchor for Subdocument Location'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_SmartTagRun, documentation=u'Custom XML Markup Move Destination Location End'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_SmartTagRun, documentation=u'Move Source Location Container - End'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_SmartTagRun, documentation=u'Move Destination Location Container - Start'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_SmartTagRun, documentation=u'Move Destination Location Container - End'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_SmartTagRun, documentation=u'Custom XML Markup Move Source Start'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_SmartTagRun, documentation=u'Comment Anchor Range Start'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_SmartTagRun, documentation=u'Custom XML Markup Insertion Start'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_SmartTagRun, documentation=u'Custom XML Markup Insertion End'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_SmartTagRun, documentation=u'Comment Anchor Range End'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_SmartTagRun, documentation=u'Custom XML Markup Deletion Start'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_SmartTagRun, documentation=u'Custom XML Markup Move Source End'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_SmartTagRun, documentation=u'Custom XML Markup Deletion End'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtRun, scope=CT_SmartTagRun, documentation=u'Inline-Level Structured Document Tag'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), CT_SmartTagRun, scope=CT_SmartTagRun, documentation=u'Inline-Level Smart Tag'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), CT_DirContentRun, scope=CT_SmartTagRun, documentation=u'Bidirectional Embedding Level'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlRun, scope=CT_SmartTagRun, documentation=u'Inline-Level Custom XML Element'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTagPr'), CT_SmartTagPr, scope=CT_SmartTagRun, documentation=u'Smart Tag Properties'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_SmartTagRun, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), CT_R_, scope=CT_SmartTagRun, documentation=u'Text Run'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_SmartTagRun, documentation=u'Inserted Run Content'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), CT_BdoContentRun, scope=CT_SmartTagRun, documentation=u'Bidirectional Override'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), CT_SimpleField, scope=CT_SmartTagRun, documentation=u'Simple Field'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_SmartTagRun, documentation=u'Deleted Run Content'))

CT_SmartTagRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_SmartTagRun, documentation=u'Proofing Error Anchor'))
CT_SmartTagRun._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_SmartTagRun._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_SmartTagRun._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._GroupModel_4, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._GroupModel_5, min_occurs=0L, max_occurs=None)
    )
CT_SmartTagRun._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dir')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'r')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._GroupModel_3, min_occurs=0L, max_occurs=None)
    )
CT_SmartTagRun._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._GroupModel_2, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc')), min_occurs=1, max_occurs=1)
    )
CT_SmartTagRun._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTagPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SmartTagRun._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_SmartTagRun._ContentModel = pyxb.binding.content.ParticleModel(CT_SmartTagRun._GroupModel, min_occurs=1, max_occurs=1)



CT_CtrlPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), CT_RPr, scope=CT_CtrlPr, documentation=u'Run Properties'))

CT_CtrlPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RPrChange, scope=CT_CtrlPr, documentation=u'Inserted Math Control Character'))

CT_CtrlPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RPrChange, scope=CT_CtrlPr, documentation=u'Deleted Math Control Character'))
CT_CtrlPr._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CtrlPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr')), min_occurs=0L, max_occurs=1)
    )
CT_CtrlPr._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CtrlPr._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CtrlPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CtrlPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=1, max_occurs=1)
    )
CT_CtrlPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CtrlPr._GroupModel_, min_occurs=0L, max_occurs=1)
    )
CT_CtrlPr._ContentModel = pyxb.binding.content.ParticleModel(CT_CtrlPr._GroupModel, min_occurs=1, max_occurs=1)



CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'limUpp'), CT_LimUpp, scope=CT_OMathArg, documentation=u'Upper-Limit Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'm'), CT_M, scope=CT_OMathArg, documentation=u'Matrix Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'argPr'), CT_OMathArgPr, scope=CT_OMathArg, documentation=u'Argument Properties'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_OMathArg, documentation=u'Custom XML Markup Insertion Start'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'nary'), CT_Nary, scope=CT_OMathArg, documentation=u'n-ary Operator Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'acc'), CT_Acc, scope=CT_OMathArg, documentation=u'Accent'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_OMathArg))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_OMathArg, documentation=u'Custom XML Markup Deletion Start'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'rad'), CT_Rad, scope=CT_OMathArg, documentation=u'Radical Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_OMathArg, documentation=u'Custom XML Markup Deletion End'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sPre'), CT_SPre, scope=CT_OMathArg, documentation=u'Pre-Sub-Superscript Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_OMathArg, documentation=u'Custom XML Markup Move Source Start'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_OMathArg, documentation=u'Custom XML Markup Move Source End'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'phant'), CT_Phant, scope=CT_OMathArg, documentation=u'Phantom Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sSubSup'), CT_SSubSup, scope=CT_OMathArg, documentation=u'Sub-Superscript Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_OMathArg, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sSup'), CT_SSup, scope=CT_OMathArg, documentation=u'Superscript Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_OMathArg, documentation=u'Custom XML Markup Move Destination Location End'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'r'), CT_R, scope=CT_OMathArg, documentation=u'Run'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_OMathArg, documentation=u'Inserted Run Content'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_OMathArg, documentation=u'Deleted Run Content'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_OMathArg, documentation=u'Proofing Error Anchor'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_OMathArg, documentation=u'Move Source Run Content'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_OMathArg, documentation=u'Range Permission Start'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'bar'), CT_Bar, scope=CT_OMathArg, documentation=u'Bar'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_OMathArg, documentation=u'Move Destination Run Content'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_OMathArg, documentation=u'Range Permission End'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'box'), CT_Box, scope=CT_OMathArg, documentation=u'Box Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_OMathArg, documentation=u'Comment Anchor Range End'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'borderBox'), CT_BorderBox, scope=CT_OMathArg, documentation=u'Border-Box Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_OMathArg, documentation=u'Office Math Paragraph'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_OMathArg, documentation=u'Bookmark Start'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'd'), CT_D, scope=CT_OMathArg, documentation=u'Delimiter Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_OMathArg))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_OMathArg, documentation=u'Bookmark End'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'eqArr'), CT_EqArr, scope=CT_OMathArg, documentation=u'Array Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sSub'), CT_SSub, scope=CT_OMathArg, documentation=u'Subscript Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_OMathArg, documentation=u'Move Source Location Container - Start'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_OMathArg, documentation=u'Custom XML Markup Insertion End'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'f'), CT_F, scope=CT_OMathArg, documentation=u'Fraction Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_OMathArg, documentation=u'Move Source Location Container - End'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'func'), CT_Func, scope=CT_OMathArg, documentation=u'Function Apply Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_OMathArg, documentation=u'Move Destination Location Container - Start'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'groupChr'), CT_GroupChr, scope=CT_OMathArg, documentation=u'Group-Character Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_OMathArg, documentation=u'Move Destination Location Container - End'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'limLow'), CT_LimLow, scope=CT_OMathArg, documentation=u'Lower-Limit Object'))

CT_OMathArg._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_OMathArg, documentation=u'Comment Anchor Range Start'))
CT_OMathArg._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'acc')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'bar')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'box')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'borderBox')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'eqArr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'f')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'func')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'groupChr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'limLow')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'limUpp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'm')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'nary')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'phant')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'rad')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sPre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sSub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sSubSup')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sSup')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'r')), min_occurs=1, max_occurs=1)
    )
CT_OMathArg._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_OMathArg._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_OMathArg._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._GroupModel_4, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._GroupModel_5, min_occurs=0L, max_occurs=None)
    )
CT_OMathArg._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_OMathArg._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._GroupModel_3, min_occurs=1, max_occurs=1)
    )
CT_OMathArg._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'argPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathArg._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_OMathArg._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_OMathArg._ContentModel = pyxb.binding.content.ParticleModel(CT_OMathArg._GroupModel, min_occurs=1, max_occurs=1)



CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_Hyperlink, documentation=u'Custom XML Markup Move Source Start'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_Hyperlink, documentation=u'Custom XML Markup Move Source End'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), CT_DirContentRun, scope=CT_Hyperlink, documentation=u'Bidirectional Embedding Level'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), CT_R_, scope=CT_Hyperlink, documentation=u'Text Run'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_Hyperlink, documentation=u'Inserted Run Content'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), CT_SimpleField, scope=CT_Hyperlink, documentation=u'Simple Field'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_Hyperlink, documentation=u'Deleted Run Content'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_Hyperlink, documentation=u'Proofing Error Anchor'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_Hyperlink, documentation=u'Move Source Run Content'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_Hyperlink, documentation=u'Range Permission Start'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlRun, scope=CT_Hyperlink, documentation=u'Inline-Level Custom XML Element'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_Hyperlink, documentation=u'Move Destination Run Content'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_Hyperlink, documentation=u'Range Permission End'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_Hyperlink, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_Hyperlink, documentation=u'Custom XML Markup Move Destination Location End'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_Hyperlink, documentation=u'Bookmark Start'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_Hyperlink))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), CT_Hyperlink, scope=CT_Hyperlink, documentation=u'Hyperlink'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_Hyperlink, documentation=u'Move Source Location Container - Start'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), CT_SmartTagRun, scope=CT_Hyperlink, documentation=u'Inline-Level Smart Tag'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), CT_Rel, scope=CT_Hyperlink, documentation=u'Anchor for Subdocument Location'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_Hyperlink, documentation=u'Move Source Location Container - End'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_Hyperlink, documentation=u'Bookmark End'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_Hyperlink, documentation=u'Move Destination Location Container - Start'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_Hyperlink, documentation=u'Move Destination Location Container - End'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_Hyperlink, documentation=u'Comment Anchor Range Start'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), CT_BdoContentRun, scope=CT_Hyperlink, documentation=u'Bidirectional Override'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_Hyperlink, documentation=u'Comment Anchor Range End'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtRun, scope=CT_Hyperlink, documentation=u'Inline-Level Structured Document Tag'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_Hyperlink, documentation=u'Custom XML Markup Insertion Start'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_Hyperlink, documentation=u'Custom XML Markup Insertion End'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_Hyperlink, documentation=u'Custom XML Markup Deletion Start'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_Hyperlink, documentation=u'Office Math Paragraph'))

CT_Hyperlink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_Hyperlink, documentation=u'Custom XML Markup Deletion End'))
CT_Hyperlink._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_Hyperlink._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_Hyperlink._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._GroupModel_3, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._GroupModel_4, min_occurs=0L, max_occurs=None)
    )
CT_Hyperlink._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dir')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'r')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CT_Hyperlink._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Hyperlink._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Hyperlink._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc')), min_occurs=1, max_occurs=1)
    )
CT_Hyperlink._ContentModel = pyxb.binding.content.ParticleModel(CT_Hyperlink._GroupModel, min_occurs=0L, max_occurs=None)



CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'borderBox'), CT_BorderBox, scope=CT_OMath, documentation=u'Border-Box Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_OMath, documentation=u'Office Math Paragraph'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_OMath, documentation=u'Range Permission Start'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_OMath, documentation=u'Bookmark Start'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_OMath))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_OMath, documentation=u'Custom XML Markup Move Source Start'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_OMath, documentation=u'Bookmark End'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'd'), CT_D, scope=CT_OMath, documentation=u'Delimiter Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_OMath, documentation=u'Move Source Location Container - Start'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'f'), CT_F, scope=CT_OMath, documentation=u'Fraction Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_OMath, documentation=u'Move Source Location Container - End'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'func'), CT_Func, scope=CT_OMath, documentation=u'Function Apply Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_OMath, documentation=u'Move Destination Location Container - Start'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_OMath, documentation=u'Move Destination Location Container - End'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'limLow'), CT_LimLow, scope=CT_OMath, documentation=u'Lower-Limit Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_OMath, documentation=u'Comment Anchor Range Start'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'limUpp'), CT_LimUpp, scope=CT_OMath, documentation=u'Upper-Limit Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_OMath, documentation=u'Comment Anchor Range End'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'm'), CT_M, scope=CT_OMath, documentation=u'Matrix Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_OMath, documentation=u'Custom XML Markup Insertion Start'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'nary'), CT_Nary, scope=CT_OMath, documentation=u'n-ary Operator Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_OMath, documentation=u'Custom XML Markup Insertion End'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_OMath, documentation=u'Custom XML Markup Deletion Start'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'rad'), CT_Rad, scope=CT_OMath, documentation=u'Radical Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_OMath, documentation=u'Custom XML Markup Deletion End'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sPre'), CT_SPre, scope=CT_OMath, documentation=u'Pre-Sub-Superscript Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'phant'), CT_Phant, scope=CT_OMath, documentation=u'Phantom Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sSub'), CT_SSub, scope=CT_OMath, documentation=u'Subscript Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_OMath, documentation=u'Custom XML Markup Move Source End'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sSubSup'), CT_SSubSup, scope=CT_OMath, documentation=u'Sub-Superscript Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_OMath, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sSup'), CT_SSup, scope=CT_OMath, documentation=u'Superscript Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'groupChr'), CT_GroupChr, scope=CT_OMath, documentation=u'Group-Character Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_OMath, documentation=u'Custom XML Markup Move Destination Location End'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'r'), CT_R, scope=CT_OMath, documentation=u'Run'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_OMath, documentation=u'Inserted Run Content'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_OMath, documentation=u'Deleted Run Content'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_OMath, documentation=u'Proofing Error Anchor'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'acc'), CT_Acc, scope=CT_OMath, documentation=u'Accent'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_OMath, documentation=u'Move Source Run Content'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'eqArr'), CT_EqArr, scope=CT_OMath, documentation=u'Array Object'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'bar'), CT_Bar, scope=CT_OMath, documentation=u'Bar'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_OMath, documentation=u'Move Destination Run Content'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_OMath, documentation=u'Range Permission End'))

CT_OMath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'box'), CT_Box, scope=CT_OMath, documentation=u'Box Object'))
CT_OMath._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'acc')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'bar')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'box')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'borderBox')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'eqArr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'f')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'func')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'groupChr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'limLow')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'limUpp')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'm')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'nary')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'phant')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'rad')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sPre')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sSub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sSubSup')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sSup')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'r')), min_occurs=1, max_occurs=1)
    )
CT_OMath._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_OMath._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_OMath._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._GroupModel_4, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._GroupModel_5, min_occurs=0L, max_occurs=None)
    )
CT_OMath._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_OMath._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMath._GroupModel_3, min_occurs=1, max_occurs=1)
    )
CT_OMath._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OMath._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_OMath._ContentModel = pyxb.binding.content.ParticleModel(CT_OMath._GroupModel, min_occurs=1, max_occurs=1)



CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'citation'), CT_Empty, scope=CT_SdtPr, documentation=u'Citation Structured Document Tag'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), CT_RPr, scope=CT_SdtPr, documentation=u'Run Properties For Structured Document Tag Contents'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'group'), CT_Empty, scope=CT_SdtPr, documentation=u'Group Structured Document Tag'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tag'), CT_String, scope=CT_SdtPr, documentation=u'Programmatic Tag'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'showingPlcHdr'), CT_OnOff, scope=CT_SdtPr, documentation=u'Current Contents Are Placeholder Text'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'label'), CT_DecimalNumber, scope=CT_SdtPr, documentation=u'Structured Document Tag Label'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tabIndex'), CT_UnsignedDecimalNumber, scope=CT_SdtPr, documentation=u'Structured Document Tag Navigation Order Index'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lock'), CT_Lock, scope=CT_SdtPr, documentation=u'Locking Setting'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'placeholder'), CT_Placeholder, scope=CT_SdtPr, documentation=u'Structured Document Tag Placeholder Text'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bibliography'), CT_Empty, scope=CT_SdtPr, documentation=u'Bibliography Structured Document Tag'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dataBinding'), CT_DataBinding, scope=CT_SdtPr, documentation=u'XML Mapping'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'temporary'), CT_OnOff, scope=CT_SdtPr, documentation=u'Remove Structured Document Tag When Contents Are Edited'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'id'), CT_DecimalNumber, scope=CT_SdtPr, documentation=u'Unique ID'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'equation'), CT_Empty, scope=CT_SdtPr, documentation=u'Equation Structured Document Tag'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'alias'), CT_String, scope=CT_SdtPr, documentation=u'Friendly Name'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'comboBox'), CT_SdtComboBox, scope=CT_SdtPr, documentation=u'Combo Box Structured Document Tag'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'date'), CT_SdtDate, scope=CT_SdtPr, documentation=u'Date Structured Document Tag'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartObj'), CT_SdtDocPart, scope=CT_SdtPr, documentation=u'Built-In Document Part Structured Document Tag'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'richText'), CT_Empty, scope=CT_SdtPr, documentation=u'Rich Text Structured Document Tag'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartList'), CT_SdtDocPart, scope=CT_SdtPr, documentation=u'Document Part Gallery Structured Document Tag'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dropDownList'), CT_SdtDropDownList, scope=CT_SdtPr, documentation=u'Drop-Down List Structured Document Tag'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'picture'), CT_Empty, scope=CT_SdtPr, documentation=u'Picture Structured Document Tag'))

CT_SdtPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'text'), CT_SdtText, scope=CT_SdtPr, documentation=u'Plain Text Structured Document Tag'))
CT_SdtPr._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'equation')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'comboBox')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'date')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartObj')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartList')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dropDownList')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'picture')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'richText')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'text')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'citation')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'group')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bibliography')), min_occurs=1, max_occurs=1)
    )
CT_SdtPr._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'alias')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'label')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tabIndex')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lock')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'placeholder')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'showingPlcHdr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dataBinding')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'temporary')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'id')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tag')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtPr._GroupModel_, min_occurs=0L, max_occurs=1L)
    )
CT_SdtPr._ContentModel = pyxb.binding.content.ParticleModel(CT_SdtPr._GroupModel, min_occurs=1, max_occurs=None)



CT_TblGridBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'gridCol'), CT_TblGridCol, scope=CT_TblGridBase, documentation=u'Grid Column Definition'))
CT_TblGridBase._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblGridBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'gridCol')), min_occurs=0L, max_occurs=None)
    )
CT_TblGridBase._ContentModel = pyxb.binding.content.ParticleModel(CT_TblGridBase._GroupModel, min_occurs=1, max_occurs=1)



CT_TblGrid._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblGridChange'), CT_TblGridChange, scope=CT_TblGrid, documentation=u'Revision Information for Table Grid Column Definitions'))
CT_TblGrid._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblGrid._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'gridCol')), min_occurs=0L, max_occurs=None)
    )
CT_TblGrid._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblGrid._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblGridChange')), min_occurs=0L, max_occurs=1)
    )
CT_TblGrid._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblGrid._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblGrid._GroupModel_2, min_occurs=1, max_occurs=1)
    )
CT_TblGrid._ContentModel = pyxb.binding.content.ParticleModel(CT_TblGrid._GroupModel, min_occurs=1, max_occurs=1)



CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_P, documentation=u'Move Destination Location Container - End'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_P, documentation=u'Comment Anchor Range Start'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_P, documentation=u'Custom XML Markup Deletion End'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_P, documentation=u'Move Destination Run Content'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_P, documentation=u'Custom XML Markup Insertion Start'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_P, documentation=u'Custom XML Markup Insertion End'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr'), CT_PPr, scope=CT_P, documentation=u'Paragraph Properties'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_P, documentation=u'Custom XML Markup Deletion Start'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), CT_SmartTagRun, scope=CT_P, documentation=u'Inline-Level Smart Tag'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtRun, scope=CT_P, documentation=u'Inline-Level Structured Document Tag'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_P, documentation=u'Custom XML Markup Move Source Start'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_P, documentation=u'Custom XML Markup Move Source End'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), CT_BdoContentRun, scope=CT_P, documentation=u'Bidirectional Override'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), CT_DirContentRun, scope=CT_P, documentation=u'Bidirectional Embedding Level'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_P, documentation=u'Custom XML Markup Move Destination Location End'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), CT_SimpleField, scope=CT_P, documentation=u'Simple Field'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_P, documentation=u'Deleted Run Content'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_P, documentation=u'Proofing Error Anchor'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_P, documentation=u'Move Source Run Content'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_P, documentation=u'Range Permission Start'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_P, documentation=u'Inserted Run Content'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_P, documentation=u'Range Permission End'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlRun, scope=CT_P, documentation=u'Inline-Level Custom XML Element'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_P, documentation=u'Office Math Paragraph'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_P, documentation=u'Bookmark Start'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_P, documentation=u'Comment Anchor Range End'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_P))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_P, documentation=u'Bookmark End'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_P, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), CT_Hyperlink, scope=CT_P, documentation=u'Hyperlink'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_P, documentation=u'Move Source Location Container - Start'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), CT_Rel, scope=CT_P, documentation=u'Anchor for Subdocument Location'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), CT_R_, scope=CT_P, documentation=u'Text Run'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_P, documentation=u'Move Source Location Container - End'))

CT_P._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_P, documentation=u'Move Destination Location Container - Start'))
CT_P._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_P._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_P._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._GroupModel_4, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._GroupModel_5, min_occurs=0L, max_occurs=None)
    )
CT_P._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dir')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'r')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._GroupModel_3, min_occurs=0L, max_occurs=None)
    )
CT_P._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_P._GroupModel_2, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc')), min_occurs=1, max_occurs=1)
    )
CT_P._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_P._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_P._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_P._ContentModel = pyxb.binding.content.ParticleModel(CT_P._GroupModel, min_occurs=1, max_occurs=1)



CT_DocPartCategory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'gallery'), CT_DocPartGallery, scope=CT_DocPartCategory, documentation=u'Gallery Associated With Entry'))

CT_DocPartCategory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), CT_String, scope=CT_DocPartCategory, documentation=u'Category Associated With Entry'))
CT_DocPartCategory._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DocPartCategory._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'name')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DocPartCategory._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'gallery')), min_occurs=1L, max_occurs=1L)
    )
CT_DocPartCategory._ContentModel = pyxb.binding.content.ParticleModel(CT_DocPartCategory._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_CustomXmlCell, documentation=u'Office Math Paragraph'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_CustomXmlCell))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_CustomXmlCell, documentation=u'Move Destination Run Content'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_CustomXmlCell, documentation=u'Move Source Location Container - Start'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_CustomXmlCell, documentation=u'Bookmark Start'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_CustomXmlCell, documentation=u'Move Source Location Container - End'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_CustomXmlCell, documentation=u'Move Destination Location Container - Start'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_CustomXmlCell, documentation=u'Comment Anchor Range Start'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_CustomXmlCell, documentation=u'Comment Anchor Range End'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_CustomXmlCell, documentation=u'Custom XML Markup Insertion Start'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_CustomXmlCell, documentation=u'Custom XML Markup Insertion End'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_CustomXmlCell, documentation=u'Custom XML Markup Deletion Start'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_CustomXmlCell, documentation=u'Custom XML Markup Deletion End'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlPr'), CT_CustomXmlPr, scope=CT_CustomXmlCell, documentation=u'Custom XML Element Properties'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_CustomXmlCell, documentation=u'Custom XML Markup Move Source Start'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_CustomXmlCell, documentation=u'Move Destination Location Container - End'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlCell, scope=CT_CustomXmlCell, documentation=u'Cell-Level Custom XML Element'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_CustomXmlCell, documentation=u'Custom XML Markup Move Destination Location End'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_CustomXmlCell, documentation=u'Custom XML Markup Move Source End'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_CustomXmlCell, documentation=u'Inserted Run Content'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_CustomXmlCell, documentation=u'Bookmark End'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_CustomXmlCell, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_CustomXmlCell, documentation=u'Deleted Run Content'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_CustomXmlCell, documentation=u'Proofing Error Anchor'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_CustomXmlCell, documentation=u'Move Source Run Content'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_CustomXmlCell, documentation=u'Range Permission Start'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tc'), CT_Tc, scope=CT_CustomXmlCell, documentation=u'Table Cell'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtCell, scope=CT_CustomXmlCell, documentation=u'Cell-Level Structured Document Tag'))

CT_CustomXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_CustomXmlCell, documentation=u'Range Permission End'))
CT_CustomXmlCell._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_CustomXmlCell._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_CustomXmlCell._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._GroupModel_3, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._GroupModel_4, min_occurs=0L, max_occurs=None)
    )
CT_CustomXmlCell._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tc')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CT_CustomXmlCell._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomXmlCell._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_CustomXmlCell._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomXmlCell._GroupModel, min_occurs=1, max_occurs=1)



CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_DirContentRun, documentation=u'Custom XML Markup Move Source Start'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlRun, scope=CT_DirContentRun, documentation=u'Inline-Level Custom XML Element'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), CT_DirContentRun, scope=CT_DirContentRun, documentation=u'Bidirectional Embedding Level'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_DirContentRun, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_DirContentRun))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_DirContentRun, documentation=u'Custom XML Markup Move Destination Location End'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_DirContentRun, documentation=u'Inserted Run Content'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), CT_R_, scope=CT_DirContentRun, documentation=u'Text Run'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), CT_SimpleField, scope=CT_DirContentRun, documentation=u'Simple Field'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_DirContentRun, documentation=u'Deleted Run Content'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_DirContentRun, documentation=u'Proofing Error Anchor'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), CT_SmartTagRun, scope=CT_DirContentRun, documentation=u'Inline-Level Smart Tag'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_DirContentRun, documentation=u'Move Source Run Content'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_DirContentRun, documentation=u'Move Destination Run Content'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_DirContentRun, documentation=u'Range Permission End'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_DirContentRun, documentation=u'Custom XML Markup Deletion End'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_DirContentRun, documentation=u'Office Math Paragraph'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_DirContentRun, documentation=u'Bookmark Start'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_DirContentRun, documentation=u'Bookmark End'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtRun, scope=CT_DirContentRun, documentation=u'Inline-Level Structured Document Tag'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), CT_Hyperlink, scope=CT_DirContentRun, documentation=u'Hyperlink'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_DirContentRun, documentation=u'Move Source Location Container - Start'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), CT_Rel, scope=CT_DirContentRun, documentation=u'Anchor for Subdocument Location'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_DirContentRun, documentation=u'Move Source Location Container - End'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_DirContentRun, documentation=u'Move Destination Location Container - Start'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_DirContentRun, documentation=u'Range Permission Start'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_DirContentRun, documentation=u'Move Destination Location Container - End'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_DirContentRun, documentation=u'Comment Anchor Range Start'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_DirContentRun, documentation=u'Comment Anchor Range End'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_DirContentRun, documentation=u'Custom XML Markup Move Source End'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_DirContentRun, documentation=u'Custom XML Markup Insertion Start'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_DirContentRun, documentation=u'Custom XML Markup Insertion End'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_DirContentRun, documentation=u'Custom XML Markup Deletion Start'))

CT_DirContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), CT_BdoContentRun, scope=CT_DirContentRun, documentation=u'Bidirectional Override'))
CT_DirContentRun._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_DirContentRun._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_DirContentRun._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._GroupModel_3, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._GroupModel_4, min_occurs=0L, max_occurs=None)
    )
CT_DirContentRun._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dir')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'r')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CT_DirContentRun._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_DirContentRun._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DirContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc')), min_occurs=1, max_occurs=1)
    )
CT_DirContentRun._ContentModel = pyxb.binding.content.ParticleModel(CT_DirContentRun._GroupModel, min_occurs=0L, max_occurs=None)



CT_DocRsids._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rsid'), CT_LongHexNumber, scope=CT_DocRsids, documentation=u'Single Session Revision Save ID'))

CT_DocRsids._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidRoot'), CT_LongHexNumber, scope=CT_DocRsids, documentation=u'Original Document Revision Save ID'))
CT_DocRsids._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DocRsids._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rsidRoot')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DocRsids._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rsid')), min_occurs=0L, max_occurs=None)
    )
CT_DocRsids._ContentModel = pyxb.binding.content.ParticleModel(CT_DocRsids._GroupModel, min_occurs=1, max_occurs=1)



CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'i'), CT_OnOff, scope=CT_RPr, documentation=u'Italics'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sz'), CT_HpsMeasure, scope=CT_RPr, documentation=u'Non-Complex Script Font Size'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'u'), CT_Underline, scope=CT_RPr, documentation=u'Underline'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'caps'), CT_OnOff, scope=CT_RPr, documentation=u'Display All Characters As Capital Letters'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'iCs'), CT_OnOff, scope=CT_RPr, documentation=u'Complex Script Italics'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'smallCaps'), CT_OnOff, scope=CT_RPr, documentation=u'Small Caps'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), CT_Shd, scope=CT_RPr, documentation=u'Run Shading'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'emboss'), CT_OnOff, scope=CT_RPr, documentation=u'Embossing'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bdr'), CT_Border, scope=CT_RPr, documentation=u'Text Border'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fitText'), CT_FitText, scope=CT_RPr, documentation=u'Manual Run Width'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'strike'), CT_OnOff, scope=CT_RPr, documentation=u'Single Strikethrough'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'szCs'), CT_HpsMeasure, scope=CT_RPr, documentation=u'Complex Script Font Size'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'vertAlign'), CT_VerticalAlignRun, scope=CT_RPr, documentation=u'Subscript/Superscript Text'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rtl'), CT_OnOff, scope=CT_RPr, documentation=u'Right To Left Text'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'specVanish'), CT_OnOff, scope=CT_RPr, documentation=u'Paragraph Mark Is Always Hidden'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cs'), CT_OnOff, scope=CT_RPr, documentation=u'Use Complex Script Formatting on Run'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rStyle'), CT_String, scope=CT_RPr, documentation=u'Referenced Character Style'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'webHidden'), CT_OnOff, scope=CT_RPr, documentation=u'Web Hidden Text'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'imprint'), CT_OnOff, scope=CT_RPr, documentation=u'Imprinting'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noProof'), CT_OnOff, scope=CT_RPr, documentation=u'Do Not Check Spelling or Grammar'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dstrike'), CT_OnOff, scope=CT_RPr, documentation=u'Double Strikethrough'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid'), CT_OnOff, scope=CT_RPr, documentation=u'Use Document Grid Settings For Inter-Character Spacing'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'vanish'), CT_OnOff, scope=CT_RPr, documentation=u'Hidden Text'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'oMath'), CT_OnOff, scope=CT_RPr, documentation=u'Office Open XML Math'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rFonts'), CT_Fonts, scope=CT_RPr, documentation=u'Run Fonts'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'highlight'), CT_Highlight, scope=CT_RPr, documentation=u'Text Highlighting'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'em'), CT_Em, scope=CT_RPr, documentation=u'Emphasis Mark'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rPrChange'), CT_RPrChange, scope=CT_RPr, documentation=u'Revision Information for Run Properties'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'color'), CT_Color, scope=CT_RPr, documentation=u'Run Content Color'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing'), CT_SignedTwipsMeasure, scope=CT_RPr, documentation=u'Character Spacing Adjustment'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'outline'), CT_OnOff, scope=CT_RPr, documentation=u'Display Character Outline'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), CT_TextScale, scope=CT_RPr, documentation=u'Expanded/Compressed Text'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'eastAsianLayout'), CT_EastAsianLayout, scope=CT_RPr, documentation=u'East Asian Typography Settings'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'kern'), CT_HpsMeasure, scope=CT_RPr, documentation=u'Font Kerning'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'position'), CT_SignedHpsMeasure, scope=CT_RPr, documentation=u'Vertically Raised or Lowered Text'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lang'), CT_Language, scope=CT_RPr, documentation=u'Languages for Run Content'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'b'), CT_OnOff, scope=CT_RPr, documentation=u'Bold'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bCs'), CT_OnOff, scope=CT_RPr, documentation=u'Complex Script Bold'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'shadow'), CT_OnOff, scope=CT_RPr, documentation=u'Shadow'))

CT_RPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'effect'), CT_TextEffect, scope=CT_RPr, documentation=u'Animated Text Effect'))
CT_RPr._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rStyle')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rFonts')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'b')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bCs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'i')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'iCs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'caps')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'smallCaps')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'strike')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dstrike')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'outline')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shadow')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'emboss')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'imprint')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noProof')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vanish')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'webHidden')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'color')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'w')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'kern')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'position')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sz')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'szCs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'highlight')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'u')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'effect')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bdr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fitText')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vertAlign')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rtl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'em')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lang')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'eastAsianLayout')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'specVanish')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'oMath')), min_occurs=0L, max_occurs=1)
    )
CT_RPr._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RPr._GroupModel_2, min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rPrChange')), min_occurs=0L, max_occurs=1)
    )
CT_RPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RPr._GroupModel_, min_occurs=0L, max_occurs=1)
    )
CT_RPr._ContentModel = pyxb.binding.content.ParticleModel(CT_RPr._GroupModel, min_occurs=1, max_occurs=1)



CT_OMathPara._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_OMathPara, documentation=u'Office Math'))

CT_OMathPara._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathParaPr'), CT_OMathParaPr, scope=CT_OMathPara, documentation=u'Office Math Paragraph Properties'))
CT_OMathPara._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OMathPara._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathParaPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OMathPara._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=None)
    )
CT_OMathPara._ContentModel = pyxb.binding.content.ParticleModel(CT_OMathPara._GroupModel, min_occurs=1, max_occurs=1)



CT_Frame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'title'), CT_String, scope=CT_Frame, documentation=u'Frame or Frameset Title'))

CT_Frame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noResizeAllowed'), CT_OnOff, scope=CT_Frame, documentation=u'Frame Cannot Be Resized'))

CT_Frame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'longDesc'), CT_Rel, scope=CT_Frame, documentation=u'Frame Long Description'))

CT_Frame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'linkedToFile'), CT_OnOff, scope=CT_Frame, documentation=u'Maintain Link to Existing File'))

CT_Frame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sourceFileName'), CT_Rel, scope=CT_Frame, documentation=u'Source File for Frame'))

CT_Frame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'scrollbar'), CT_FrameScrollbar, scope=CT_Frame, documentation=u'Scrollbar Display Option'))

CT_Frame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'marW'), CT_PixelsMeasure, scope=CT_Frame, documentation=u'Left and Right Margin for Frame'))

CT_Frame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sz'), CT_String, scope=CT_Frame, documentation=u'Frame Size'))

CT_Frame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'marH'), CT_PixelsMeasure, scope=CT_Frame, documentation=u'Top and Bottom Margin for Frame'))

CT_Frame._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), CT_String, scope=CT_Frame, documentation=u'Frame Name'))
CT_Frame._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Frame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sz')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Frame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'name')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Frame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'title')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Frame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'longDesc')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Frame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sourceFileName')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Frame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'marW')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Frame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'marH')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Frame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'scrollbar')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Frame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noResizeAllowed')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Frame._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'linkedToFile')), min_occurs=0L, max_occurs=1)
    )
CT_Frame._ContentModel = pyxb.binding.content.ParticleModel(CT_Frame._GroupModel, min_occurs=1, max_occurs=1)



CT_SSubSup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sup'), CT_OMathArg, scope=CT_SSubSup, documentation=u'Superscript (Sub-Superscript function)'))

CT_SSubSup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sSubSupPr'), CT_SSubSupPr, scope=CT_SSubSup, documentation=u'Sub-Superscript Properties'))

CT_SSubSup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sub'), CT_OMathArg, scope=CT_SSubSup, documentation=u'Subscript (Sub-Superscript)'))

CT_SSubSup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_SSubSup, documentation=u'Base'))
CT_SSubSup._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SSubSup._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sSubSupPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SSubSup._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SSubSup._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SSubSup._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sup')), min_occurs=1, max_occurs=1)
    )
CT_SSubSup._ContentModel = pyxb.binding.content.ParticleModel(CT_SSubSup._GroupModel, min_occurs=1, max_occurs=1)



CT_Nary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_Nary, documentation=u'Base (Argument)'))

CT_Nary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'naryPr'), CT_NaryPr, scope=CT_Nary, documentation=u'n-ary Properties'))

CT_Nary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sup'), CT_OMathArg, scope=CT_Nary, documentation=u'Upper limit (n-ary)'))

CT_Nary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sub'), CT_OMathArg, scope=CT_Nary, documentation=u'Lower limit (n-ary) '))
CT_Nary._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Nary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'naryPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Nary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Nary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sup')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Nary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=1)
    )
CT_Nary._ContentModel = pyxb.binding.content.ParticleModel(CT_Nary._GroupModel, min_occurs=1, max_occurs=1)



CT_SdtEndPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), CT_RPr, scope=CT_SdtEndPr, documentation=u'Structured Document Tag End Character Run Properties'))
CT_SdtEndPr._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtEndPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr')), min_occurs=0L, max_occurs=1)
    )
CT_SdtEndPr._ContentModel = pyxb.binding.content.ParticleModel(CT_SdtEndPr._GroupModel, min_occurs=1, max_occurs=None)



CT_GroupChrPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_GroupChrPr))

CT_GroupChrPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'chr'), CT_Char, scope=CT_GroupChrPr, documentation=u'Group Character (Grouping Character)'))

CT_GroupChrPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'vertJc'), CT_TopBot, scope=CT_GroupChrPr, documentation=u'Vertical Justification'))

CT_GroupChrPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'pos'), CT_TopBot, scope=CT_GroupChrPr, documentation=u'Position (Group Character)'))
CT_GroupChrPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GroupChrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'chr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GroupChrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'pos')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GroupChrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'vertJc')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GroupChrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_GroupChrPr._ContentModel = pyxb.binding.content.ParticleModel(CT_GroupChrPr._GroupModel, min_occurs=1, max_occurs=1)



CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), CT_SimpleField, scope=CT_BdoContentRun, documentation=u'Simple Field'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_BdoContentRun, documentation=u'Deleted Run Content'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_BdoContentRun, documentation=u'Proofing Error Anchor'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlRun, scope=CT_BdoContentRun, documentation=u'Inline-Level Custom XML Element'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), CT_SmartTagRun, scope=CT_BdoContentRun, documentation=u'Inline-Level Smart Tag'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_BdoContentRun, documentation=u'Range Permission Start'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_BdoContentRun, documentation=u'Move Destination Run Content'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_BdoContentRun, documentation=u'Bookmark End'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), CT_BdoContentRun, scope=CT_BdoContentRun, documentation=u'Bidirectional Override'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_BdoContentRun, documentation=u'Office Math Paragraph'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_BdoContentRun, documentation=u'Bookmark Start'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), CT_Hyperlink, scope=CT_BdoContentRun, documentation=u'Hyperlink'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_BdoContentRun, documentation=u'Move Source Location Container - Start'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), CT_Rel, scope=CT_BdoContentRun, documentation=u'Anchor for Subdocument Location'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_BdoContentRun, documentation=u'Move Source Location Container - End'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_BdoContentRun, documentation=u'Range Permission End'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_BdoContentRun, documentation=u'Move Destination Location Container - Start'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), CT_R_, scope=CT_BdoContentRun, documentation=u'Text Run'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_BdoContentRun, documentation=u'Move Destination Location Container - End'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_BdoContentRun, documentation=u'Comment Anchor Range Start'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtRun, scope=CT_BdoContentRun, documentation=u'Inline-Level Structured Document Tag'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_BdoContentRun, documentation=u'Comment Anchor Range End'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_BdoContentRun, documentation=u'Custom XML Markup Insertion Start'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_BdoContentRun))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_BdoContentRun, documentation=u'Custom XML Markup Insertion End'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_BdoContentRun, documentation=u'Custom XML Markup Deletion Start'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_BdoContentRun, documentation=u'Custom XML Markup Deletion End'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_BdoContentRun, documentation=u'Move Source Run Content'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_BdoContentRun, documentation=u'Custom XML Markup Move Source Start'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_BdoContentRun, documentation=u'Custom XML Markup Move Source End'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_BdoContentRun, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_BdoContentRun, documentation=u'Custom XML Markup Move Destination Location End'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), CT_DirContentRun, scope=CT_BdoContentRun, documentation=u'Bidirectional Embedding Level'))

CT_BdoContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_BdoContentRun, documentation=u'Inserted Run Content'))
CT_BdoContentRun._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_BdoContentRun._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_BdoContentRun._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._GroupModel_3, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._GroupModel_4, min_occurs=0L, max_occurs=None)
    )
CT_BdoContentRun._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dir')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'r')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CT_BdoContentRun._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BdoContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc')), min_occurs=1, max_occurs=1)
    )
CT_BdoContentRun._ContentModel = pyxb.binding.content.ParticleModel(CT_BdoContentRun._GroupModel, min_occurs=0L, max_occurs=None)



CT_Captions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'autoCaptions'), CT_AutoCaptions, scope=CT_Captions, documentation=u'Automatic Captioning Settings'))

CT_Captions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'caption'), CT_Caption, scope=CT_Captions, documentation=u'Single Caption Type Definition'))
CT_Captions._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Captions._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'caption')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Captions._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'autoCaptions')), min_occurs=0L, max_occurs=1L)
    )
CT_Captions._ContentModel = pyxb.binding.content.ParticleModel(CT_Captions._GroupModel, min_occurs=1, max_occurs=1)



CT_BoxPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'aln'), CT_OnOff_, scope=CT_BoxPr, documentation=u'Alignment'))

CT_BoxPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_BoxPr))

CT_BoxPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'brk'), CT_ManualBreak, scope=CT_BoxPr, documentation=u'Break'))

CT_BoxPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'opEmu'), CT_OnOff_, scope=CT_BoxPr, documentation=u'Operator Emulator'))

CT_BoxPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'noBreak'), CT_OnOff_, scope=CT_BoxPr, documentation=u'No Break'))

CT_BoxPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'diff'), CT_OnOff_, scope=CT_BoxPr, documentation=u'Differential'))
CT_BoxPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BoxPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'opEmu')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BoxPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'noBreak')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BoxPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'diff')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BoxPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'brk')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BoxPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'aln')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BoxPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_BoxPr._ContentModel = pyxb.binding.content.ParticleModel(CT_BoxPr._GroupModel, min_occurs=1, max_occurs=1)



CT_SdtDocPart._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartUnique'), CT_OnOff, scope=CT_SdtDocPart, documentation=u'Built-In Document Part'))

CT_SdtDocPart._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartGallery'), CT_String, scope=CT_SdtDocPart, documentation=u'Document Part Gallery Filter'))

CT_SdtDocPart._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartCategory'), CT_String, scope=CT_SdtDocPart, documentation=u'Document Part Category Filter'))
CT_SdtDocPart._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SdtDocPart._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartGallery')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtDocPart._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartCategory')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtDocPart._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartUnique')), min_occurs=0L, max_occurs=1)
    )
CT_SdtDocPart._ContentModel = pyxb.binding.content.ParticleModel(CT_SdtDocPart._GroupModel, min_occurs=1, max_occurs=1)



CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_Body, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), CT_Tbl, scope=CT_Body, documentation=u'Table'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_Body, documentation=u'Inserted Run Content'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), CT_P, scope=CT_Body, documentation=u'Paragraph'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_Body, documentation=u'Deleted Run Content'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_Body, documentation=u'Proofing Error Anchor'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_Body, documentation=u'Move Source Run Content'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_Body, documentation=u'Range Permission Start'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_Body, documentation=u'Move Destination Run Content'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sectPr'), CT_SectPr, scope=CT_Body, documentation=u'Document Final Section Properties'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_Body, documentation=u'Office Math Paragraph'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_Body, documentation=u'Bookmark Start'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_Body))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_Body, documentation=u'Bookmark End'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_Body, documentation=u'Comment Anchor Range Start'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_Body, documentation=u'Move Source Location Container - Start'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_Body, documentation=u'Move Source Location Container - End'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_Body, documentation=u'Move Destination Location Container - Start'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_Body, documentation=u'Move Destination Location Container - End'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_Body, documentation=u'Range Permission End'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_Body, documentation=u'Comment Anchor Range End'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_Body, documentation=u'Custom XML Markup Move Source Start'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_Body, documentation=u'Custom XML Markup Insertion Start'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_Body, documentation=u'Custom XML Markup Move Destination Location End'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_Body, documentation=u'Custom XML Markup Insertion End'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_Body, documentation=u'Custom XML Markup Deletion Start'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_Body, documentation=u'Custom XML Markup Deletion End'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk'), CT_AltChunk, scope=CT_Body, documentation=u'Anchor for Imported External Content'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlBlock, scope=CT_Body, documentation=u'Block-Level Custom XML Element'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_Body, documentation=u'Custom XML Markup Move Source End'))

CT_Body._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtBlock, scope=CT_Body, documentation=u'Block-Level Structured Document Tag'))
CT_Body._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_Body._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_Body._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._GroupModel_5, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._GroupModel_6, min_occurs=0L, max_occurs=None)
    )
CT_Body._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'p')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Body._GroupModel_4, min_occurs=0L, max_occurs=None)
    )
CT_Body._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Body._GroupModel_3, min_occurs=0L, max_occurs=None)
    )
CT_Body._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Body._GroupModel_2, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk')), min_occurs=0L, max_occurs=None)
    )
CT_Body._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Body._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Body._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sectPr')), min_occurs=0L, max_occurs=1L)
    )
CT_Body._ContentModel = pyxb.binding.content.ParticleModel(CT_Body._GroupModel, min_occurs=1, max_occurs=1)



CT_Columns._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'col'), CT_Column, scope=CT_Columns, documentation=u'Single Column Definition'))
CT_Columns._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Columns._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'col')), min_occurs=1, max_occurs=45L)
    )
CT_Columns._ContentModel = pyxb.binding.content.ParticleModel(CT_Columns._GroupModel, min_occurs=0L, max_occurs=1)


CT_ShapeDefaults._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=set([u'urn:schemas-microsoft-com:office:office'])), min_occurs=0L, max_occurs=None)
    )
CT_ShapeDefaults._ContentModel = pyxb.binding.content.ParticleModel(CT_ShapeDefaults._GroupModel, min_occurs=1, max_occurs=None)



CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_Tbl, documentation=u'Move Source Run Content'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tr'), CT_Row, scope=CT_Tbl, documentation=u'Table Row'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlRow, scope=CT_Tbl, documentation=u'Row-Level Custom XML Element'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_Tbl, documentation=u'Comment Anchor Range End'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtRow, scope=CT_Tbl, documentation=u'Row-Level Structured Document Tag'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_Tbl, documentation=u'Office Math Paragraph'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_Tbl, documentation=u'Bookmark Start'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_Tbl))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_Tbl, documentation=u'Bookmark End'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_Tbl, documentation=u'Move Source Location Container - Start'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_Tbl, documentation=u'Move Source Location Container - End'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_Tbl, documentation=u'Move Destination Location Container - Start'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_Tbl, documentation=u'Move Destination Location Container - End'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_Tbl, documentation=u'Comment Anchor Range Start'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_Tbl, documentation=u'Proofing Error Anchor'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_Tbl, documentation=u'Custom XML Markup Insertion Start'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_Tbl, documentation=u'Custom XML Markup Insertion End'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_Tbl, documentation=u'Custom XML Markup Move Source Start'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_Tbl, documentation=u'Custom XML Markup Deletion Start'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_Tbl, documentation=u'Custom XML Markup Deletion End'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_Tbl, documentation=u'Range Permission Start'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_Tbl, documentation=u'Move Destination Run Content'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPr'), CT_TblPr, scope=CT_Tbl, documentation=u'Table Properties'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_Tbl, documentation=u'Custom XML Markup Move Source End'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblGrid'), CT_TblGrid, scope=CT_Tbl, documentation=u'Table Grid'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_Tbl, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_Tbl, documentation=u'Custom XML Markup Move Destination Location End'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_Tbl, documentation=u'Inserted Run Content'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_Tbl, documentation=u'Deleted Run Content'))

CT_Tbl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_Tbl, documentation=u'Range Permission End'))
CT_Tbl._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_Tbl._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_Tbl._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_Tbl._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._GroupModel_4, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._GroupModel_5, min_occurs=0L, max_occurs=None)
    )
CT_Tbl._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tr')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._GroupModel_3, min_occurs=0L, max_occurs=None)
    )
CT_Tbl._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Tbl._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblGrid')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tbl._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CT_Tbl._ContentModel = pyxb.binding.content.ParticleModel(CT_Tbl._GroupModel, min_occurs=1, max_occurs=1)



CT_Endnotes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'endnote'), CT_FtnEdn, scope=CT_Endnotes, documentation=u'Endnote Content'))
CT_Endnotes._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Endnotes._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'endnote')), min_occurs=0L, max_occurs=1)
    )
CT_Endnotes._ContentModel = pyxb.binding.content.ParticleModel(CT_Endnotes._GroupModel, min_occurs=1, max_occurs=None)



CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ptab'), CT_PTab, scope=CT_R, documentation=u'Absolute Position Tab Character'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lastRenderedPageBreak'), CT_Empty, scope=CT_R, documentation=u'Position of Last Calculated Page Break'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'rPr'), CT_RPR, scope=CT_R, documentation=u'Run Properties'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'br'), CT_Br, scope=CT_R, documentation=u'Break'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u't'), CT_Text_, scope=CT_R, documentation=u'Text'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'yearLong'), CT_Empty, scope=CT_R, documentation=u'Date Block - Long Year Format'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dayLong'), CT_Empty, scope=CT_R, documentation=u'Date Block - Long Day Format'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'annotationRef'), CT_Empty, scope=CT_R, documentation=u'Comment Information Block'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'footnoteRef'), CT_Empty, scope=CT_R, documentation=u'Footnote Reference Mark'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'endnoteRef'), CT_Empty, scope=CT_R, documentation=u'Endnote Reference Mark'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'endnoteReference'), CT_FtnEdnRef, scope=CT_R, documentation=u'Endnote Reference'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'monthLong'), CT_Empty, scope=CT_R, documentation=u'Date Block - Long Month Format'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'separator'), CT_Empty, scope=CT_R, documentation=u'Footnote/Endnote Separator Mark'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), CT_RPr, scope=CT_R, documentation=u'Run Properties'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sym'), CT_Sym, scope=CT_R, documentation=u'Symbol Character'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'delText'), CT_Text, scope=CT_R, documentation=u'Deleted Text'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cr'), CT_Empty, scope=CT_R, documentation=u'Carriage Return'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentReference'), CT_Markup, scope=CT_R, documentation=u'Comment Content Reference Mark'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u't'), CT_Text, scope=CT_R, documentation=u'Text'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pgNum'), CT_Empty, scope=CT_R, documentation=u'Page Number Block'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'contentPart'), CT_Rel, scope=CT_R, documentation=u'Content Part'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fldChar'), CT_FldChar, scope=CT_R, documentation=u'Complex Field Character'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pict'), CT_Picture, scope=CT_R, documentation=u'VML Object'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tab'), CT_Empty, scope=CT_R, documentation=u'Tab Character'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'instrText'), CT_Text, scope=CT_R, documentation=u'Field Code'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'continuationSeparator'), CT_Empty, scope=CT_R, documentation=u'Continuation Separator Mark'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ruby'), CT_Ruby, scope=CT_R, documentation=u'Phonetic Guide'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'drawing'), CT_Drawing, scope=CT_R, documentation=u'DrawingML Object'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'delInstrText'), CT_Text, scope=CT_R, documentation=u'Deleted Field Code'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'footnoteReference'), CT_FtnEdnRef, scope=CT_R, documentation=u'Footnote Reference'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'yearShort'), CT_Empty, scope=CT_R, documentation=u'Date Block - Short Year Format'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'softHyphen'), CT_Empty, scope=CT_R, documentation=u'Optional Hyphen Character'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dayShort'), CT_Empty, scope=CT_R, documentation=u'Date Block - Short Day Format'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noBreakHyphen'), CT_Empty, scope=CT_R, documentation=u'Non Breaking Hyphen Character'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'object'), CT_Object, scope=CT_R, documentation=u'Embedded Object'))

CT_R._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'monthShort'), CT_Empty, scope=CT_R, documentation=u'Date Block - Short Month Format'))
CT_R._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr')), min_occurs=0L, max_occurs=1)
    )
CT_R._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u't')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'contentPart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'delText')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'instrText')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'delInstrText')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noBreakHyphen')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'softHyphen')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dayShort')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'monthShort')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'yearShort')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dayLong')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'monthLong')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'yearLong')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'annotationRef')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'footnoteRef')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'endnoteRef')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'separator')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'continuationSeparator')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sym')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pgNum')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tab')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pict')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fldChar')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ruby')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'footnoteReference')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'endnoteReference')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentReference')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'drawing')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ptab')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lastRenderedPageBreak')), min_occurs=0L, max_occurs=1L)
    )
CT_R._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_R._GroupModel_3, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u't')), min_occurs=0L, max_occurs=1)
    )
CT_R._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_R._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'rPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._GroupModel_, min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CT_R._ContentModel = pyxb.binding.content.ParticleModel(CT_R._GroupModel, min_occurs=1, max_occurs=1)



CT_SdtBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtContent'), CT_SdtContentBlock, scope=CT_SdtBlock, documentation=u'Block-Level Structured Document Tag Content'))

CT_SdtBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtPr'), CT_SdtPr, scope=CT_SdtBlock, documentation=u'Structured Document Tag Properties'))

CT_SdtBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtEndPr'), CT_SdtEndPr, scope=CT_SdtBlock, documentation=u'Structured Document Tag End Character Properties'))
CT_SdtBlock._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SdtBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SdtBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtEndPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SdtBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtContent')), min_occurs=0L, max_occurs=1L)
    )
CT_SdtBlock._ContentModel = pyxb.binding.content.ParticleModel(CT_SdtBlock._GroupModel, min_occurs=1, max_occurs=1)



CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'adjustRightInd'), CT_OnOff, scope=CT_PPrBase, documentation=u'Automatically Adjust Right Indent When Using Document Grid'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid'), CT_OnOff, scope=CT_PPrBase, documentation=u'Use Document Grid Settings for Inter-Line Paragraph Spacing'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressLineNumbers'), CT_OnOff, scope=CT_PPrBase, documentation=u'Suppress Line Numbers for Paragraph'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing'), CT_Spacing, scope=CT_PPrBase, documentation=u'Spacing Between Lines and Above/Below Paragraph'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'keepNext'), CT_OnOff, scope=CT_PPrBase, documentation=u'Keep Paragraph With Next Paragraph'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'contextualSpacing'), CT_OnOff, scope=CT_PPrBase, documentation=u'Ignore Spacing Above and Below When Using Identical Styles'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pageBreakBefore'), CT_OnOff, scope=CT_PPrBase, documentation=u'Start Paragraph on Next Page'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'mirrorIndents'), CT_OnOff, scope=CT_PPrBase, documentation=u'Use Left/Right Indents as Inside/Outside Indents'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressOverlap'), CT_OnOff, scope=CT_PPrBase, documentation=u'Prevent Text Frames From Overlapping'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'framePr'), CT_FramePr, scope=CT_PPrBase, documentation=u'Text Frame Properties'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'widowControl'), CT_OnOff, scope=CT_PPrBase, documentation=u'Allow First/Last Line to Display on a Separate Page'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pStyle'), CT_String, scope=CT_PPrBase, documentation=u'Referenced Paragraph Style'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection'), CT_TextDirection, scope=CT_PPrBase, documentation=u'Paragraph Text Flow Direction'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'textAlignment'), CT_TextAlignment, scope=CT_PPrBase, documentation=u'Vertical Character Alignment on Line'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'textboxTightWrap'), CT_TextboxTightWrap, scope=CT_PPrBase, documentation=u'Allow Surrounding Paragraphs to Tight Wrap to Text Box Contents'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pBdr'), CT_PBdr, scope=CT_PPrBase, documentation=u'Paragraph Borders'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), CT_Shd, scope=CT_PPrBase, documentation=u'Paragraph Shading'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'divId'), CT_DecimalNumber, scope=CT_PPrBase, documentation=u'Associated HTML div ID'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'keepLines'), CT_OnOff, scope=CT_PPrBase, documentation=u'Keep All Lines On One Page'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressAutoHyphens'), CT_OnOff, scope=CT_PPrBase, documentation=u'Suppress Hyphenation for Paragraph'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'kinsoku'), CT_OnOff, scope=CT_PPrBase, documentation=u'Use East Asian Typography Rules for First and Last Character per Line'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'outlineLvl'), CT_DecimalNumber, scope=CT_PPrBase, documentation=u'Associated Outline Level'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bidi'), CT_OnOff, scope=CT_PPrBase, documentation=u'Right to Left Paragraph Layout'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'wordWrap'), CT_OnOff, scope=CT_PPrBase, documentation=u'Allow Line Breaking At Character Level'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tabs'), CT_Tabs, scope=CT_PPrBase, documentation=u'Set of Custom Tab Stops'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'jc'), CT_Jc, scope=CT_PPrBase, documentation=u'Paragraph Alignment'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'overflowPunct'), CT_OnOff, scope=CT_PPrBase, documentation=u'Allow Punctuation to Extend Past Text Extents'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'numPr'), CT_NumPr, scope=CT_PPrBase, documentation=u'Numbering Definition Instance Reference'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ind'), CT_Ind, scope=CT_PPrBase, documentation=u'Paragraph Indentation'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'topLinePunct'), CT_OnOff, scope=CT_PPrBase, documentation=u'Compress Punctuation at Start of a Line'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'autoSpaceDE'), CT_OnOff, scope=CT_PPrBase, documentation=u'Automatically Adjust Spacing of Latin and East Asian Text'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'autoSpaceDN'), CT_OnOff, scope=CT_PPrBase, documentation=u'Automatically Adjust Spacing of East Asian Text and Numbers'))

CT_PPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cnfStyle'), CT_Cnf, scope=CT_PPrBase, documentation=u'Paragraph Conditional Formatting'))
CT_PPrBase._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pStyle')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'keepNext')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'keepLines')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pageBreakBefore')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'framePr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'widowControl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressLineNumbers')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pBdr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tabs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressAutoHyphens')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'kinsoku')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'wordWrap')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'overflowPunct')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'topLinePunct')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'autoSpaceDE')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'autoSpaceDN')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bidi')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'adjustRightInd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ind')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'contextualSpacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'mirrorIndents')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressOverlap')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'jc')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'textAlignment')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'textboxTightWrap')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'outlineLvl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'divId')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cnfStyle')), min_occurs=0L, max_occurs=1L)
    )
CT_PPrBase._ContentModel = pyxb.binding.content.ParticleModel(CT_PPrBase._GroupModel, min_occurs=1, max_occurs=1)



CT_PPrGeneral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pPrChange'), CT_PPrChange, scope=CT_PPrGeneral))
CT_PPrGeneral._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pStyle')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'keepNext')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'keepLines')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pageBreakBefore')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'framePr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'widowControl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressLineNumbers')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pBdr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tabs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressAutoHyphens')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'kinsoku')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'wordWrap')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'overflowPunct')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'topLinePunct')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'autoSpaceDE')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'autoSpaceDN')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bidi')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'adjustRightInd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ind')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'contextualSpacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'mirrorIndents')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressOverlap')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'jc')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'textAlignment')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'textboxTightWrap')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'outlineLvl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'divId')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cnfStyle')), min_occurs=0L, max_occurs=1L)
    )
CT_PPrGeneral._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pPrChange')), min_occurs=0L, max_occurs=1)
    )
CT_PPrGeneral._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPrGeneral._GroupModel_2, min_occurs=1, max_occurs=1)
    )
CT_PPrGeneral._ContentModel = pyxb.binding.content.ParticleModel(CT_PPrGeneral._GroupModel, min_occurs=1, max_occurs=1)



CT_DPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'grow'), CT_OnOff_, scope=CT_DPr, documentation=u'Delimiter Grow'))

CT_DPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'shp'), CT_Shp, scope=CT_DPr, documentation=u'Shape (Delimiters)'))

CT_DPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'endChr'), CT_Char, scope=CT_DPr, documentation=u'Delimiter Ending Character'))

CT_DPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_DPr))

CT_DPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'begChr'), CT_Char, scope=CT_DPr, documentation=u'Delimiter Beginning Character'))

CT_DPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sepChr'), CT_Char, scope=CT_DPr, documentation=u'Delimiter Separator Character'))
CT_DPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'begChr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sepChr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'endChr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'grow')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'shp')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_DPr._ContentModel = pyxb.binding.content.ParticleModel(CT_DPr._GroupModel, min_occurs=1, max_occurs=1)



CT_RPrDefault._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), CT_RPr, scope=CT_RPrDefault, documentation=u'Run Properties'))
CT_RPrDefault._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RPrDefault._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr')), min_occurs=0L, max_occurs=1)
    )
CT_RPrDefault._ContentModel = pyxb.binding.content.ParticleModel(CT_RPrDefault._GroupModel, min_occurs=1, max_occurs=1)



CT_SdtDropDownList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'listItem'), CT_SdtListItem, scope=CT_SdtDropDownList, documentation=u'Drop-Down List Item'))
CT_SdtDropDownList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SdtDropDownList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'listItem')), min_occurs=0L, max_occurs=None)
    )
CT_SdtDropDownList._ContentModel = pyxb.binding.content.ParticleModel(CT_SdtDropDownList._GroupModel, min_occurs=1, max_occurs=1)



CT_DocDefaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pPrDefault'), CT_PPrDefault, scope=CT_DocDefaults, documentation=u'Default Paragraph Properties'))

CT_DocDefaults._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rPrDefault'), CT_RPrDefault, scope=CT_DocDefaults, documentation=u'Default Run Properties'))
CT_DocDefaults._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DocDefaults._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rPrDefault')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DocDefaults._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pPrDefault')), min_occurs=0L, max_occurs=1)
    )
CT_DocDefaults._ContentModel = pyxb.binding.content.ParticleModel(CT_DocDefaults._GroupModel, min_occurs=1, max_occurs=1)



CT_FtnProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'numRestart'), CT_NumRestart, scope=CT_FtnProps, documentation=u'Footnote and Endnote Numbering Restart Location'))

CT_FtnProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'numStart'), CT_DecimalNumber, scope=CT_FtnProps, documentation=u'Footnote and Endnote Numbering Starting Value'))

CT_FtnProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pos'), CT_FtnPos, scope=CT_FtnProps, documentation=u'Footnote Placement'))

CT_FtnProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'numFmt'), CT_NumFmt, scope=CT_FtnProps, documentation=u'Footnote Numbering Format'))
CT_FtnProps._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FtnProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numRestart')), min_occurs=0L, max_occurs=1)
    )
CT_FtnProps._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FtnProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pos')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numFmt')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnProps._GroupModel_, min_occurs=0L, max_occurs=1)
    )
CT_FtnProps._ContentModel = pyxb.binding.content.ParticleModel(CT_FtnProps._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomXmlPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'attr'), CT_Attr, scope=CT_CustomXmlPr, documentation=u'Custom XML Attribute'))

CT_CustomXmlPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'placeholder'), CT_String, scope=CT_CustomXmlPr, documentation=u'Custom XML Element Placeholder Text'))
CT_CustomXmlPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomXmlPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'placeholder')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'attr')), min_occurs=0L, max_occurs=None)
    )
CT_CustomXmlPr._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomXmlPr._GroupModel, min_occurs=1, max_occurs=1)



CT_LimUpp._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'lim'), CT_OMathArg, scope=CT_LimUpp, documentation=u'Limit (Upper)'))

CT_LimUpp._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'limUppPr'), CT_LimUppPr, scope=CT_LimUpp, documentation=u'Upper-Limit Properties'))

CT_LimUpp._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_LimUpp, documentation=u'Base'))
CT_LimUpp._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_LimUpp._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'limUppPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_LimUpp._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_LimUpp._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'lim')), min_occurs=1, max_occurs=1)
    )
CT_LimUpp._ContentModel = pyxb.binding.content.ParticleModel(CT_LimUpp._GroupModel, min_occurs=1, max_occurs=1)



CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_Tc, documentation=u'Custom XML Markup Move Source Start'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlBlock, scope=CT_Tc, documentation=u'Block-Level Custom XML Element'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtBlock, scope=CT_Tc, documentation=u'Block-Level Structured Document Tag'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), CT_P, scope=CT_Tc, documentation=u'Paragraph'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_Tc, documentation=u'Move Source Run Content'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_Tc, documentation=u'Custom XML Markup Move Destination Location End'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), CT_Tbl, scope=CT_Tc, documentation=u'Table'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_Tc, documentation=u'Inserted Run Content'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_Tc, documentation=u'Deleted Run Content'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_Tc, documentation=u'Proofing Error Anchor'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_Tc, documentation=u'Move Destination Run Content'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_Tc, documentation=u'Range Permission End'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_Tc, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_Tc, documentation=u'Office Math Paragraph'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_Tc, documentation=u'Bookmark Start'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_Tc))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_Tc, documentation=u'Bookmark End'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_Tc, documentation=u'Move Source Location Container - Start'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_Tc, documentation=u'Move Source Location Container - End'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_Tc, documentation=u'Move Destination Location Container - Start'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_Tc, documentation=u'Range Permission Start'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_Tc, documentation=u'Move Destination Location Container - End'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_Tc, documentation=u'Comment Anchor Range Start'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_Tc, documentation=u'Comment Anchor Range End'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_Tc, documentation=u'Custom XML Markup Move Source End'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tcPr'), CT_TcPr, scope=CT_Tc, documentation=u'Table Cell Properties'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_Tc, documentation=u'Custom XML Markup Insertion End'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_Tc, documentation=u'Custom XML Markup Deletion Start'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_Tc, documentation=u'Custom XML Markup Deletion End'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk'), CT_AltChunk, scope=CT_Tc, documentation=u'Anchor for Imported External Content'))

CT_Tc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_Tc, documentation=u'Custom XML Markup Insertion Start'))
CT_Tc._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_Tc._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_Tc._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._GroupModel_5, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._GroupModel_6, min_occurs=0L, max_occurs=None)
    )
CT_Tc._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'p')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Tc._GroupModel_4, min_occurs=0L, max_occurs=None)
    )
CT_Tc._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Tc._GroupModel_3, min_occurs=0L, max_occurs=None)
    )
CT_Tc._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Tc._GroupModel_2, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk')), min_occurs=0L, max_occurs=None)
    )
CT_Tc._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Tc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Tc._GroupModel_, min_occurs=1L, max_occurs=None)
    )
CT_Tc._ContentModel = pyxb.binding.content.ParticleModel(CT_Tc._GroupModel, min_occurs=1, max_occurs=1)



CT_SdtRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtContent'), CT_SdtContentRow, scope=CT_SdtRow, documentation=u'Row-Level Structured Document Tag Content'))

CT_SdtRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtPr'), CT_SdtPr, scope=CT_SdtRow, documentation=u'Structured Document Tag Properties'))

CT_SdtRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtEndPr'), CT_SdtEndPr, scope=CT_SdtRow, documentation=u'Structured Document Tag End Character Properties'))
CT_SdtRow._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SdtRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SdtRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtEndPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SdtRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtContent')), min_occurs=0L, max_occurs=1L)
    )
CT_SdtRow._ContentModel = pyxb.binding.content.ParticleModel(CT_SdtRow._GroupModel, min_occurs=1, max_occurs=1)



CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'printerSettings'), CT_Rel, scope=CT_SectPrBase, documentation=u'Reference to Printer Settings Data'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pgNumType'), CT_PageNumber, scope=CT_SectPrBase, documentation=u'Page Numbering Settings'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pgSz'), CT_PageSz, scope=CT_SectPrBase, documentation=u'Page Size'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cols'), CT_Columns, scope=CT_SectPrBase, documentation=u'Column Definitions'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pgMar'), CT_PageMar, scope=CT_SectPrBase, documentation=u'Page Margins'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'paperSrc'), CT_PaperSource, scope=CT_SectPrBase, documentation=u'Paper Source Information'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), CT_SectType, scope=CT_SectPrBase, documentation=u'Section Type'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'formProt'), CT_OnOff, scope=CT_SectPrBase, documentation=u'Only Allow Editing of Form Fields'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'titlePg'), CT_OnOff, scope=CT_SectPrBase, documentation=u'Different First Page Headers and Footers'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'footnotePr'), CT_FtnProps, scope=CT_SectPrBase, documentation=u'Section-Wide Footnote Properties'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'vAlign'), CT_VerticalJc, scope=CT_SectPrBase, documentation=u'Vertical Text Alignment on Page'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pgBorders'), CT_PageBorders, scope=CT_SectPrBase, documentation=u'Page Borders'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'endnotePr'), CT_EdnProps, scope=CT_SectPrBase, documentation=u'Section-Wide Endnote Properties'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rtlGutter'), CT_OnOff, scope=CT_SectPrBase, documentation=u'Gutter on Right Side of Page'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'docGrid'), CT_DocGrid, scope=CT_SectPrBase, documentation=u'Document Grid'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bidi'), CT_OnOff, scope=CT_SectPrBase, documentation=u'Right to Left Section Layout'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lnNumType'), CT_LineNumber, scope=CT_SectPrBase, documentation=u'Line Numbering Settings'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection'), CT_TextDirection, scope=CT_SectPrBase, documentation=u'Text Flow Direction'))

CT_SectPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noEndnote'), CT_OnOff, scope=CT_SectPrBase, documentation=u'Suppress Endnotes In Document'))
CT_SectPrBase._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'footnotePr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'endnotePr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'type')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pgSz')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pgMar')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'paperSrc')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pgBorders')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lnNumType')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pgNumType')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cols')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'formProt')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vAlign')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noEndnote')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'titlePg')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bidi')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rtlGutter')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'docGrid')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'printerSettings')), min_occurs=0L, max_occurs=1)
    )
CT_SectPrBase._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SectPrBase._GroupModel_, min_occurs=0L, max_occurs=1)
    )
CT_SectPrBase._ContentModel = pyxb.binding.content.ParticleModel(CT_SectPrBase._GroupModel, min_occurs=1, max_occurs=1)



CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblDescription'), CT_String, scope=CT_TblPrBase, documentation=u'Table Description'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'jc'), CT_JcTable, scope=CT_TblPrBase, documentation=u'Table Alignment'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblW'), CT_TblWidth, scope=CT_TblPrBase, documentation=u'Preferred Table Width'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblpPr'), CT_TblPPr, scope=CT_TblPrBase, documentation=u'Floating Table Positioning'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLayout'), CT_TblLayoutType, scope=CT_TblPrBase, documentation=u'Table Layout'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblOverlap'), CT_TblOverlap, scope=CT_TblPrBase, documentation=u'Floating Table Allows Other Tables to Overlap'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblInd'), CT_TblWidth, scope=CT_TblPrBase, documentation=u'Table Indent from Leading Margin'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellMar'), CT_TblCellMar, scope=CT_TblPrBase, documentation=u'Table Cell Margin Defaults'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), CT_Shd, scope=CT_TblPrBase, documentation=u'Table Shading'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellSpacing'), CT_TblWidth, scope=CT_TblPrBase, documentation=u'Table Cell Spacing Default'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLook'), CT_TblLook, scope=CT_TblPrBase, documentation=u'Table Style Conditional Formatting Settings'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblStyleRowBandSize'), CT_DecimalNumber, scope=CT_TblPrBase, documentation=u'Number of Rows in Row Band'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblStyleColBandSize'), CT_DecimalNumber, scope=CT_TblPrBase, documentation=u'Number of Columns in Column Band'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCaption'), CT_String, scope=CT_TblPrBase, documentation=u'Table Caption'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bidiVisual'), CT_OnOff, scope=CT_TblPrBase, documentation=u'Visually Right to Left Table'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblBorders'), CT_TblBorders, scope=CT_TblPrBase, documentation=u'Table Borders'))

CT_TblPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblStyle'), CT_String, scope=CT_TblPrBase, documentation=u'Referenced Table Style'))
CT_TblPrBase._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblStyle')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblpPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblOverlap')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bidiVisual')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblStyleRowBandSize')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblStyleColBandSize')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblW')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'jc')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellSpacing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblInd')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblBorders')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shd')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLayout')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellMar')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLook')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCaption')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblDescription')), min_occurs=0L, max_occurs=1L)
    )
CT_TblPrBase._ContentModel = pyxb.binding.content.ParticleModel(CT_TblPrBase._GroupModel, min_occurs=1, max_occurs=1)



CT_MPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_MPr))

CT_MPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'rSpRule'), CT_SpacingRule, scope=CT_MPr, documentation=u'Row Spacing Rule'))

CT_MPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'cGpRule'), CT_SpacingRule, scope=CT_MPr, documentation=u'Matrix Column Gap Rule'))

CT_MPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'mcs'), CT_MCS, scope=CT_MPr, documentation=u'Matrix Columns'))

CT_MPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'rSp'), CT_UnSignedInteger, scope=CT_MPr, documentation=u'Row Spacing (Matrix)'))

CT_MPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'cSp'), CT_UnSignedInteger, scope=CT_MPr, documentation=u'Minimum Matrix Column Width'))

CT_MPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'plcHide'), CT_OnOff_, scope=CT_MPr, documentation=u'Hide Placeholders (Matrix)'))

CT_MPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'cGp'), CT_UnSignedInteger, scope=CT_MPr, documentation=u'Matrix Column Gap'))

CT_MPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'baseJc'), CT_YAlign, scope=CT_MPr, documentation=u'Matrix Base Justification'))
CT_MPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'baseJc')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'plcHide')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'rSpRule')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'cGpRule')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'rSp')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'cSp')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'cGp')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'mcs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_MPr._ContentModel = pyxb.binding.content.ParticleModel(CT_MPr._GroupModel, min_occurs=1, max_occurs=1)



CT_Rad._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_Rad, documentation=u'Base'))

CT_Rad._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'radPr'), CT_RadPr, scope=CT_Rad, documentation=u'Radical Properties'))

CT_Rad._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'deg'), CT_OMathArg, scope=CT_Rad, documentation=u'Degree'))
CT_Rad._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Rad._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'radPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Rad._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'deg')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Rad._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=1)
    )
CT_Rad._ContentModel = pyxb.binding.content.ParticleModel(CT_Rad._GroupModel, min_occurs=1, max_occurs=1)



CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'titlePg'), CT_OnOff, scope=CT_SectPr, documentation=u'Different First Page Headers and Footers'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection'), CT_TextDirection, scope=CT_SectPr, documentation=u'Text Flow Direction'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), CT_SectType, scope=CT_SectPr, documentation=u'Section Type'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bidi'), CT_OnOff, scope=CT_SectPr, documentation=u'Right to Left Section Layout'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rtlGutter'), CT_OnOff, scope=CT_SectPr, documentation=u'Gutter on Right Side of Page'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'docGrid'), CT_DocGrid, scope=CT_SectPr, documentation=u'Document Grid'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'headerReference'), CT_HdrFtrRef, scope=CT_SectPr, documentation=u'Header Reference'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'footerReference'), CT_HdrFtrRef, scope=CT_SectPr, documentation=u'Footer Reference'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'footnotePr'), CT_FtnProps, scope=CT_SectPr, documentation=u'Section-Wide Footnote Properties'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sectPrChange'), CT_SectPrChange, scope=CT_SectPr, documentation=u'Revision Information for Section Properties'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'endnotePr'), CT_EdnProps, scope=CT_SectPr, documentation=u'Section-Wide Endnote Properties'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pgSz'), CT_PageSz, scope=CT_SectPr, documentation=u'Page Size'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pgMar'), CT_PageMar, scope=CT_SectPr, documentation=u'Page Margins'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noEndnote'), CT_OnOff, scope=CT_SectPr, documentation=u'Suppress Endnotes In Document'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'paperSrc'), CT_PaperSource, scope=CT_SectPr, documentation=u'Paper Source Information'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pgBorders'), CT_PageBorders, scope=CT_SectPr, documentation=u'Page Borders'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lnNumType'), CT_LineNumber, scope=CT_SectPr, documentation=u'Line Numbering Settings'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'printerSettings'), CT_Rel, scope=CT_SectPr, documentation=u'Reference to Printer Settings Data'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pgNumType'), CT_PageNumber, scope=CT_SectPr, documentation=u'Page Numbering Settings'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cols'), CT_Columns, scope=CT_SectPr, documentation=u'Column Definitions'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'formProt'), CT_OnOff, scope=CT_SectPr, documentation=u'Only Allow Editing of Form Fields'))

CT_SectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'vAlign'), CT_VerticalJc, scope=CT_SectPr, documentation=u'Vertical Text Alignment on Page'))
CT_SectPr._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'headerReference')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'footerReference')), min_occurs=0L, max_occurs=1)
    )
CT_SectPr._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'footnotePr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'endnotePr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'type')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pgSz')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pgMar')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'paperSrc')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pgBorders')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lnNumType')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pgNumType')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cols')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'formProt')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vAlign')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noEndnote')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'titlePg')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bidi')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rtlGutter')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'docGrid')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'printerSettings')), min_occurs=0L, max_occurs=1)
    )
CT_SectPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SectPr._GroupModel_, min_occurs=0L, max_occurs=6L),
    pyxb.binding.content.ParticleModel(CT_SectPr._GroupModel_2, min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SectPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sectPrChange')), min_occurs=0L, max_occurs=1)
    )
CT_SectPr._ContentModel = pyxb.binding.content.ParticleModel(CT_SectPr._GroupModel, min_occurs=1, max_occurs=1)



CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ptab'), CT_PTab, scope=CT_R_, documentation=u'Absolute Position Tab Character'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lastRenderedPageBreak'), CT_Empty, scope=CT_R_, documentation=u'Position of Last Calculated Page Break'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'delInstrText'), CT_Text, scope=CT_R_, documentation=u'Deleted Field Code'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'monthLong'), CT_Empty, scope=CT_R_, documentation=u'Date Block - Long Month Format'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dayShort'), CT_Empty, scope=CT_R_, documentation=u'Date Block - Short Day Format'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u't'), CT_Text, scope=CT_R_, documentation=u'Text'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'yearLong'), CT_Empty, scope=CT_R_, documentation=u'Date Block - Long Year Format'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'annotationRef'), CT_Empty, scope=CT_R_, documentation=u'Comment Information Block'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'monthShort'), CT_Empty, scope=CT_R_, documentation=u'Date Block - Short Month Format'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'endnoteRef'), CT_Empty, scope=CT_R_, documentation=u'Endnote Reference Mark'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'separator'), CT_Empty, scope=CT_R_, documentation=u'Footnote/Endnote Separator Mark'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'contentPart'), CT_Rel, scope=CT_R_, documentation=u'Content Part'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'continuationSeparator'), CT_Empty, scope=CT_R_, documentation=u'Continuation Separator Mark'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sym'), CT_Sym, scope=CT_R_, documentation=u'Symbol Character'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), CT_RPr, scope=CT_R_, documentation=u'Run Properties'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pgNum'), CT_Empty, scope=CT_R_, documentation=u'Page Number Block'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cr'), CT_Empty, scope=CT_R_, documentation=u'Carriage Return'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noBreakHyphen'), CT_Empty, scope=CT_R_, documentation=u'Non Breaking Hyphen Character'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'object'), CT_Object, scope=CT_R_, documentation=u'Embedded Object'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tab'), CT_Empty, scope=CT_R_, documentation=u'Tab Character'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'footnoteRef'), CT_Empty, scope=CT_R_, documentation=u'Footnote Reference Mark'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'delText'), CT_Text, scope=CT_R_, documentation=u'Deleted Text'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fldChar'), CT_FldChar, scope=CT_R_, documentation=u'Complex Field Character'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dayLong'), CT_Empty, scope=CT_R_, documentation=u'Date Block - Long Day Format'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'yearShort'), CT_Empty, scope=CT_R_, documentation=u'Date Block - Short Year Format'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ruby'), CT_Ruby, scope=CT_R_, documentation=u'Phonetic Guide'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pict'), CT_Picture, scope=CT_R_, documentation=u'VML Object'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'footnoteReference'), CT_FtnEdnRef, scope=CT_R_, documentation=u'Footnote Reference'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'instrText'), CT_Text, scope=CT_R_, documentation=u'Field Code'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'softHyphen'), CT_Empty, scope=CT_R_, documentation=u'Optional Hyphen Character'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'br'), CT_Br, scope=CT_R_, documentation=u'Break'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentReference'), CT_Markup, scope=CT_R_, documentation=u'Comment Content Reference Mark'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'drawing'), CT_Drawing, scope=CT_R_, documentation=u'DrawingML Object'))

CT_R_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'endnoteReference'), CT_FtnEdnRef, scope=CT_R_, documentation=u'Endnote Reference'))
CT_R_._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr')), min_occurs=0L, max_occurs=1)
    )
CT_R_._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'br')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u't')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'contentPart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'delText')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'instrText')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'delInstrText')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noBreakHyphen')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'softHyphen')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dayShort')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'monthShort')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'yearShort')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dayLong')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'monthLong')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'yearLong')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'annotationRef')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'footnoteRef')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'endnoteRef')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'separator')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'continuationSeparator')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sym')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pgNum')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tab')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'object')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pict')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fldChar')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ruby')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'footnoteReference')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'endnoteReference')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentReference')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'drawing')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ptab')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lastRenderedPageBreak')), min_occurs=0L, max_occurs=1L)
    )
CT_R_._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_R_._GroupModel_, min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_R_._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CT_R_._ContentModel = pyxb.binding.content.ParticleModel(CT_R_._GroupModel, min_occurs=1, max_occurs=1)



CT_Picture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'control'), CT_Control, scope=CT_Picture, documentation=u'Floating Embedded Control'))

CT_Picture._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'movie'), CT_Rel, scope=CT_Picture, documentation=u'Embedded Video'))
CT_Picture._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=set([u'urn:schemas-microsoft-com:vml'])), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=set([u'urn:schemas-microsoft-com:office:office'])), min_occurs=0L, max_occurs=None)
    )
CT_Picture._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Picture._GroupModel_, min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Picture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'movie')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Picture._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'control')), min_occurs=0L, max_occurs=1)
    )
CT_Picture._ContentModel = pyxb.binding.content.ParticleModel(CT_Picture._GroupModel, min_occurs=1, max_occurs=1)



CT_FontsList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'font'), CT_Font, scope=CT_FontsList, documentation=u'Properties for a Single Font'))
CT_FontsList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FontsList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'font')), min_occurs=0L, max_occurs=None)
    )
CT_FontsList._ContentModel = pyxb.binding.content.ParticleModel(CT_FontsList._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtRow, scope=CT_CustomXmlRow, documentation=u'Row-Level Structured Document Tag'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_CustomXmlRow, documentation=u'Custom XML Markup Move Source Start'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_CustomXmlRow, documentation=u'Custom XML Markup Move Source End'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tr'), CT_Row, scope=CT_CustomXmlRow, documentation=u'Table Row'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_CustomXmlRow, documentation=u'Custom XML Markup Move Destination Location End'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_CustomXmlRow, documentation=u'Inserted Run Content'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_CustomXmlRow, documentation=u'Move Source Run Content'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_CustomXmlRow, documentation=u'Range Permission Start'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_CustomXmlRow, documentation=u'Move Destination Run Content'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlPr'), CT_CustomXmlPr, scope=CT_CustomXmlRow, documentation=u'Custom XML Element Properties'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_CustomXmlRow, documentation=u'Office Math Paragraph'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_CustomXmlRow, documentation=u'Bookmark Start'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_CustomXmlRow))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_CustomXmlRow, documentation=u'Bookmark End'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_CustomXmlRow, documentation=u'Move Source Location Container - Start'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_CustomXmlRow, documentation=u'Move Source Location Container - End'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_CustomXmlRow, documentation=u'Deleted Run Content'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_CustomXmlRow, documentation=u'Move Destination Location Container - Start'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_CustomXmlRow, documentation=u'Move Destination Location Container - End'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_CustomXmlRow, documentation=u'Comment Anchor Range Start'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_CustomXmlRow, documentation=u'Proofing Error Anchor'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlRow, scope=CT_CustomXmlRow, documentation=u'Row-Level Custom XML Element'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_CustomXmlRow, documentation=u'Comment Anchor Range End'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_CustomXmlRow, documentation=u'Custom XML Markup Insertion Start'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_CustomXmlRow, documentation=u'Custom XML Markup Insertion End'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_CustomXmlRow, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_CustomXmlRow, documentation=u'Custom XML Markup Deletion Start'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_CustomXmlRow, documentation=u'Range Permission End'))

CT_CustomXmlRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_CustomXmlRow, documentation=u'Custom XML Markup Deletion End'))
CT_CustomXmlRow._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_CustomXmlRow._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_CustomXmlRow._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._GroupModel_3, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._GroupModel_4, min_occurs=0L, max_occurs=None)
    )
CT_CustomXmlRow._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tr')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CT_CustomXmlRow._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomXmlRow._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_CustomXmlRow._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomXmlRow._GroupModel, min_occurs=1, max_occurs=1)



CT_Acc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_Acc, documentation=u'Base'))

CT_Acc._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'accPr'), CT_AccPr, scope=CT_Acc, documentation=u'Accent Properties'))
CT_Acc._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Acc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'accPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Acc._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=1)
    )
CT_Acc._ContentModel = pyxb.binding.content.ParticleModel(CT_Acc._GroupModel, min_occurs=1, max_occurs=1)



CT_Box._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_Box, documentation=u'Base'))

CT_Box._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'boxPr'), CT_BoxPr, scope=CT_Box, documentation=u'Box Properties'))
CT_Box._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Box._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'boxPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Box._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=1)
    )
CT_Box._ContentModel = pyxb.binding.content.ParticleModel(CT_Box._GroupModel, min_occurs=1, max_occurs=1)



CT_BorderBox._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_BorderBox, documentation=u'Base'))

CT_BorderBox._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'borderBoxPr'), CT_BorderBoxPr, scope=CT_BorderBox, documentation=u'Border-Box Properties'))
CT_BorderBox._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BorderBox._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'borderBoxPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BorderBox._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=1)
    )
CT_BorderBox._ContentModel = pyxb.binding.content.ParticleModel(CT_BorderBox._GroupModel, min_occurs=1, max_occurs=1)



CT_FPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_FPr))

CT_FPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'type'), CT_FType, scope=CT_FPr, documentation=u'Fraction type'))
CT_FPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'type')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_FPr._ContentModel = pyxb.binding.content.ParticleModel(CT_FPr._GroupModel, min_occurs=1, max_occurs=1)



CT_TcBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'start'), CT_Border, scope=CT_TcBorders, documentation=u'Table Cell Leading Edge Border'))

CT_TcBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'end'), CT_Border, scope=CT_TcBorders, documentation=u'Table Cell Trailing Edge Border'))

CT_TcBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), CT_Border, scope=CT_TcBorders, documentation=u'Table Cell Trailing Edge Border'))

CT_TcBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'top'), CT_Border, scope=CT_TcBorders, documentation=u'Table Cell Top Border'))

CT_TcBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'insideH'), CT_Border, scope=CT_TcBorders, documentation=u'Table Cell Inside Horizontal Edges Border'))

CT_TcBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tr2bl'), CT_Border, scope=CT_TcBorders, documentation=u'Table Cell Top Right to Bottom Left Diagonal Border'))

CT_TcBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'insideV'), CT_Border, scope=CT_TcBorders, documentation=u'Table Cell Inside Vertical Edges Border'))

CT_TcBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), CT_Border, scope=CT_TcBorders, documentation=u'Table Cell Leading Edge Border'))

CT_TcBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tl2br'), CT_Border, scope=CT_TcBorders, documentation=u'Table Cell Top Left to Bottom Right Diagonal Border'))

CT_TcBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom'), CT_Border, scope=CT_TcBorders, documentation=u'Table Cell Bottom Border'))
CT_TcBorders._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TcBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'top')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'start')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'left')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'end')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'right')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'insideH')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'insideV')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tl2br')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tr2bl')), min_occurs=0L, max_occurs=1)
    )
CT_TcBorders._ContentModel = pyxb.binding.content.ParticleModel(CT_TcBorders._GroupModel, min_occurs=1, max_occurs=1)



CT_MC._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'mcPr'), CT_MCPr, scope=CT_MC, documentation=u'Matrix Column Properties'))
CT_MC._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MC._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'mcPr')), min_occurs=0L, max_occurs=1)
    )
CT_MC._ContentModel = pyxb.binding.content.ParticleModel(CT_MC._GroupModel, min_occurs=1, max_occurs=1)



CT_DocumentBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'background'), CT_Background, scope=CT_DocumentBase, documentation=u'Document Background'))
CT_DocumentBase._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DocumentBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'background')), min_occurs=0L, max_occurs=1)
    )
CT_DocumentBase._ContentModel = pyxb.binding.content.ParticleModel(CT_DocumentBase._GroupModel, min_occurs=1, max_occurs=1)



CT_Document._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'body'), CT_Body, scope=CT_Document, documentation=u'Document Body'))
CT_Document._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Document._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'background')), min_occurs=0L, max_occurs=1)
    )
CT_Document._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Document._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'body')), min_occurs=0L, max_occurs=1L)
    )
CT_Document._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Document._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Document._GroupModel_2, min_occurs=1, max_occurs=1)
    )
CT_Document._ContentModel = pyxb.binding.content.ParticleModel(CT_Document._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_CustomXmlBlock, documentation=u'Move Source Location Container - Start'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_CustomXmlBlock, documentation=u'Move Source Location Container - End'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_CustomXmlBlock, documentation=u'Move Destination Location Container - Start'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlPr'), CT_CustomXmlPr, scope=CT_CustomXmlBlock, documentation=u'Custom XML Element Properties'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_CustomXmlBlock, documentation=u'Move Destination Location Container - End'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_CustomXmlBlock, documentation=u'Comment Anchor Range Start'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlBlock, scope=CT_CustomXmlBlock, documentation=u'Block-Level Custom XML Element'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_CustomXmlBlock, documentation=u'Comment Anchor Range End'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_CustomXmlBlock, documentation=u'Custom XML Markup Insertion Start'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_CustomXmlBlock, documentation=u'Custom XML Markup Insertion End'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_CustomXmlBlock, documentation=u'Custom XML Markup Deletion Start'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_CustomXmlBlock, documentation=u'Custom XML Markup Deletion End'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_CustomXmlBlock, documentation=u'Custom XML Markup Move Source Start'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtBlock, scope=CT_CustomXmlBlock, documentation=u'Block-Level Structured Document Tag'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), CT_P, scope=CT_CustomXmlBlock, documentation=u'Paragraph'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_CustomXmlBlock, documentation=u'Custom XML Markup Move Destination Location End'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_CustomXmlBlock, documentation=u'Range Permission Start'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_CustomXmlBlock, documentation=u'Inserted Run Content'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_CustomXmlBlock, documentation=u'Deleted Run Content'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_CustomXmlBlock, documentation=u'Proofing Error Anchor'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_CustomXmlBlock, documentation=u'Move Source Run Content'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_CustomXmlBlock, documentation=u'Custom XML Markup Move Source End'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_CustomXmlBlock, documentation=u'Move Destination Run Content'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_CustomXmlBlock, documentation=u'Range Permission End'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_CustomXmlBlock, documentation=u'Office Math Paragraph'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_CustomXmlBlock, documentation=u'Bookmark Start'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), CT_Tbl, scope=CT_CustomXmlBlock, documentation=u'Table'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_CustomXmlBlock))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_CustomXmlBlock, documentation=u'Bookmark End'))

CT_CustomXmlBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_CustomXmlBlock, documentation=u'Custom XML Markup Move Destination Location Start'))
CT_CustomXmlBlock._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_CustomXmlBlock._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_CustomXmlBlock._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._GroupModel_3, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._GroupModel_4, min_occurs=0L, max_occurs=None)
    )
CT_CustomXmlBlock._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'p')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CT_CustomXmlBlock._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_CustomXmlBlock._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomXmlBlock._GroupModel, min_occurs=1, max_occurs=1)



CT_Background._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'drawing'), CT_Drawing, scope=CT_Background))
CT_Background._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=set([u'urn:schemas-microsoft-com:vml'])), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=set([u'urn:schemas-microsoft-com:office:office'])), min_occurs=0L, max_occurs=None)
    )
CT_Background._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Background._GroupModel_, min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Background._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'drawing')), min_occurs=0L, max_occurs=1)
    )
CT_Background._ContentModel = pyxb.binding.content.ParticleModel(CT_Background._GroupModel, min_occurs=1, max_occurs=1)



CT_EdnProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'numRestart'), CT_NumRestart, scope=CT_EdnProps, documentation=u'Footnote and Endnote Numbering Restart Location'))

CT_EdnProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'numStart'), CT_DecimalNumber, scope=CT_EdnProps, documentation=u'Footnote and Endnote Numbering Starting Value'))

CT_EdnProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'numFmt'), CT_NumFmt, scope=CT_EdnProps, documentation=u'Endnote Numbering Format'))

CT_EdnProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pos'), CT_EdnPos, scope=CT_EdnProps, documentation=u'Endnote Placement'))
CT_EdnProps._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EdnProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_EdnProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numRestart')), min_occurs=0L, max_occurs=1)
    )
CT_EdnProps._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EdnProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pos')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_EdnProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numFmt')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_EdnProps._GroupModel_, min_occurs=0L, max_occurs=1)
    )
CT_EdnProps._ContentModel = pyxb.binding.content.ParticleModel(CT_EdnProps._GroupModel, min_occurs=1, max_occurs=1)



CT_RPrChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), CT_RPrOriginal, scope=CT_RPrChange, documentation=u'Previous Run Properties'))
CT_RPrChange._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RPrChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr')), min_occurs=1L, max_occurs=1)
    )
CT_RPrChange._ContentModel = pyxb.binding.content.ParticleModel(CT_RPrChange._GroupModel, min_occurs=1, max_occurs=1)



CT_Phant._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_Phant, documentation=u'Base'))

CT_Phant._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'phantPr'), CT_PhantPr, scope=CT_Phant, documentation=u'Phantom Properties'))
CT_Phant._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Phant._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'phantPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Phant._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=1)
    )
CT_Phant._ContentModel = pyxb.binding.content.ParticleModel(CT_Phant._GroupModel, min_occurs=1, max_occurs=1)



CT_M._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'mr'), CT_MR, scope=CT_M, documentation=u'Matrix Row'))

CT_M._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'mPr'), CT_MPr, scope=CT_M, documentation=u'Matrix Properties'))
CT_M._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_M._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'mPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_M._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'mr')), min_occurs=1, max_occurs=None)
    )
CT_M._ContentModel = pyxb.binding.content.ParticleModel(CT_M._GroupModel, min_occurs=1, max_occurs=1)



CT_GroupChr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_GroupChr, documentation=u'Base'))

CT_GroupChr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'groupChrPr'), CT_GroupChrPr, scope=CT_GroupChr, documentation=u'Group-Character Properties'))
CT_GroupChr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GroupChr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'groupChrPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GroupChr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=1)
    )
CT_GroupChr._ContentModel = pyxb.binding.content.ParticleModel(CT_GroupChr._GroupModel, min_occurs=1, max_occurs=1)



CT_SectPrChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sectPr'), CT_SectPrBase, scope=CT_SectPrChange, documentation=u'Previous Section Properties'))
CT_SectPrChange._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SectPrChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sectPr')), min_occurs=0L, max_occurs=1)
    )
CT_SectPrChange._ContentModel = pyxb.binding.content.ParticleModel(CT_SectPrChange._GroupModel, min_occurs=1, max_occurs=1)



CT_TblCellMar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), CT_TblWidth, scope=CT_TblCellMar, documentation=u'Table Cell Leading Margin Default'))

CT_TblCellMar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom'), CT_TblWidth, scope=CT_TblCellMar, documentation=u'Table Cell Bottom Margin Default'))

CT_TblCellMar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'start'), CT_TblWidth, scope=CT_TblCellMar, documentation=u'Table Cell Leading Margin Default'))

CT_TblCellMar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'end'), CT_TblWidth, scope=CT_TblCellMar, documentation=u'Table Cell Trailing Margin Default'))

CT_TblCellMar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), CT_TblWidth, scope=CT_TblCellMar, documentation=u'Table Cell Trailing Margin Default'))

CT_TblCellMar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'top'), CT_TblWidth, scope=CT_TblCellMar, documentation=u'Table Cell Top Margin Default'))
CT_TblCellMar._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblCellMar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'top')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblCellMar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'start')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblCellMar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'left')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblCellMar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblCellMar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'end')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblCellMar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'right')), min_occurs=0L, max_occurs=1)
    )
CT_TblCellMar._ContentModel = pyxb.binding.content.ParticleModel(CT_TblCellMar._GroupModel, min_occurs=1, max_occurs=1)



CT_TcPrChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tcPr'), CT_TcPrInner, scope=CT_TcPrChange, documentation=u'Previous Table Cell Properties'))
CT_TcPrChange._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TcPrChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcPr')), min_occurs=1L, max_occurs=1)
    )
CT_TcPrChange._ContentModel = pyxb.binding.content.ParticleModel(CT_TcPrChange._GroupModel, min_occurs=1, max_occurs=1)



CT_SmartTagPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'attr'), CT_Attr, scope=CT_SmartTagPr, documentation=u'Smart Tag Property'))
CT_SmartTagPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SmartTagPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'attr')), min_occurs=0L, max_occurs=None)
    )
CT_SmartTagPr._ContentModel = pyxb.binding.content.ParticleModel(CT_SmartTagPr._GroupModel, min_occurs=1, max_occurs=1)



CT_Object._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'control'), CT_Control, scope=CT_Object, documentation=u'Embedded Control'))

CT_Object._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'drawing'), CT_Drawing, scope=CT_Object))

CT_Object._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'objectLink'), CT_ObjectLink, scope=CT_Object, documentation=u'Linked Object Properties'))

CT_Object._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'objectEmbed'), CT_ObjectEmbed, scope=CT_Object, documentation=u'Embedded Object Properties'))

CT_Object._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'movie'), CT_Rel, scope=CT_Object))
CT_Object._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=set([u'urn:schemas-microsoft-com:vml'])), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=set([u'urn:schemas-microsoft-com:office:office'])), min_occurs=0L, max_occurs=None)
    )
CT_Object._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Object._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'control')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Object._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'objectLink')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Object._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'objectEmbed')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Object._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'movie')), min_occurs=1, max_occurs=1)
    )
CT_Object._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Object._GroupModel_, min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Object._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'drawing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Object._GroupModel_2, min_occurs=0L, max_occurs=1)
    )
CT_Object._ContentModel = pyxb.binding.content.ParticleModel(CT_Object._GroupModel, min_occurs=1, max_occurs=1)



CT_Footnotes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'footnote'), CT_FtnEdn, scope=CT_Footnotes, documentation=u'Footnote Content'))
CT_Footnotes._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Footnotes._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'footnote')), min_occurs=0L, max_occurs=1)
    )
CT_Footnotes._ContentModel = pyxb.binding.content.ParticleModel(CT_Footnotes._GroupModel, min_occurs=1, max_occurs=None)



CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_SimpleField, documentation=u'Custom XML Markup Insertion Start'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_SimpleField, documentation=u'Custom XML Markup Deletion Start'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_SimpleField, documentation=u'Custom XML Markup Insertion End'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), CT_R_, scope=CT_SimpleField, documentation=u'Text Run'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_SimpleField, documentation=u'Custom XML Markup Deletion End'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), CT_SmartTagRun, scope=CT_SimpleField, documentation=u'Inline-Level Smart Tag'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_SimpleField, documentation=u'Custom XML Markup Move Source Start'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_SimpleField, documentation=u'Office Math Paragraph'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_SimpleField, documentation=u'Custom XML Markup Move Source End'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_SimpleField, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_SimpleField, documentation=u'Custom XML Markup Move Destination Location End'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_SimpleField, documentation=u'Inserted Run Content'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtRun, scope=CT_SimpleField, documentation=u'Inline-Level Structured Document Tag'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), CT_SimpleField, scope=CT_SimpleField, documentation=u'Simple Field'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_SimpleField, documentation=u'Deleted Run Content'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_SimpleField, documentation=u'Proofing Error Anchor'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_SimpleField, documentation=u'Move Source Run Content'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_SimpleField, documentation=u'Move Destination Run Content'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_SimpleField, documentation=u'Range Permission End'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_SimpleField, documentation=u'Range Permission Start'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_SimpleField, documentation=u'Bookmark Start'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_SimpleField))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_SimpleField, documentation=u'Bookmark End'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fldData'), CT_Text, scope=CT_SimpleField, documentation=u'Custom Field Data'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), CT_Hyperlink, scope=CT_SimpleField, documentation=u'Hyperlink'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_SimpleField, documentation=u'Move Source Location Container - Start'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), CT_DirContentRun, scope=CT_SimpleField, documentation=u'Bidirectional Embedding Level'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), CT_Rel, scope=CT_SimpleField, documentation=u'Anchor for Subdocument Location'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_SimpleField, documentation=u'Move Source Location Container - End'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_SimpleField, documentation=u'Move Destination Location Container - Start'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_SimpleField, documentation=u'Move Destination Location Container - End'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), CT_BdoContentRun, scope=CT_SimpleField, documentation=u'Bidirectional Override'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_SimpleField, documentation=u'Comment Anchor Range Start'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlRun, scope=CT_SimpleField, documentation=u'Inline-Level Custom XML Element'))

CT_SimpleField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_SimpleField, documentation=u'Comment Anchor Range End'))
CT_SimpleField._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_SimpleField._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_SimpleField._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._GroupModel_4, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._GroupModel_5, min_occurs=0L, max_occurs=None)
    )
CT_SimpleField._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dir')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'r')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._GroupModel_3, min_occurs=0L, max_occurs=None)
    )
CT_SimpleField._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SimpleField._GroupModel_2, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc')), min_occurs=1, max_occurs=1)
    )
CT_SimpleField._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SimpleField._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fldData')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SimpleField._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_SimpleField._ContentModel = pyxb.binding.content.ParticleModel(CT_SimpleField._GroupModel, min_occurs=1, max_occurs=1)



CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'u'), CT_Underline, scope=CT_RPrOriginal, documentation=u'Underline'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'vertAlign'), CT_VerticalAlignRun, scope=CT_RPrOriginal, documentation=u'Subscript/Superscript Text'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'caps'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Display All Characters As Capital Letters'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bdr'), CT_Border, scope=CT_RPrOriginal, documentation=u'Text Border'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'b'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Bold'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'strike'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Single Strikethrough'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fitText'), CT_FitText, scope=CT_RPrOriginal, documentation=u'Manual Run Width'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'smallCaps'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Small Caps'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'eastAsianLayout'), CT_EastAsianLayout, scope=CT_RPrOriginal, documentation=u'East Asian Typography Settings'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'outline'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Display Character Outline'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rtl'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Right To Left Text'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'shadow'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Shadow'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cs'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Use Complex Script Formatting on Run'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'imprint'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Imprinting'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'emboss'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Embossing'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noProof'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Do Not Check Spelling or Grammar'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Use Document Grid Settings For Inter-Character Spacing'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'vanish'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Hidden Text'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'webHidden'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Web Hidden Text'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'szCs'), CT_HpsMeasure, scope=CT_RPrOriginal, documentation=u'Complex Script Font Size'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'color'), CT_Color, scope=CT_RPrOriginal, documentation=u'Run Content Color'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'highlight'), CT_Highlight, scope=CT_RPrOriginal, documentation=u'Text Highlighting'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rStyle'), CT_String, scope=CT_RPrOriginal, documentation=u'Referenced Character Style'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), CT_Shd, scope=CT_RPrOriginal, documentation=u'Run Shading'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing'), CT_SignedTwipsMeasure, scope=CT_RPrOriginal, documentation=u'Character Spacing Adjustment'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dstrike'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Double Strikethrough'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'oMath'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Office Open XML Math'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), CT_TextScale, scope=CT_RPrOriginal, documentation=u'Expanded/Compressed Text'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'iCs'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Complex Script Italics'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'em'), CT_Em, scope=CT_RPrOriginal, documentation=u'Emphasis Mark'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'kern'), CT_HpsMeasure, scope=CT_RPrOriginal, documentation=u'Font Kerning'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'specVanish'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Paragraph Mark Is Always Hidden'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rFonts'), CT_Fonts, scope=CT_RPrOriginal, documentation=u'Run Fonts'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sz'), CT_HpsMeasure, scope=CT_RPrOriginal, documentation=u'Non-Complex Script Font Size'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bCs'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Complex Script Bold'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'position'), CT_SignedHpsMeasure, scope=CT_RPrOriginal, documentation=u'Vertically Raised or Lowered Text'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'effect'), CT_TextEffect, scope=CT_RPrOriginal, documentation=u'Animated Text Effect'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'i'), CT_OnOff, scope=CT_RPrOriginal, documentation=u'Italics'))

CT_RPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lang'), CT_Language, scope=CT_RPrOriginal, documentation=u'Languages for Run Content'))
CT_RPrOriginal._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rStyle')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rFonts')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'b')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bCs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'i')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'iCs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'caps')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'smallCaps')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'strike')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dstrike')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'outline')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shadow')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'emboss')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'imprint')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noProof')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vanish')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'webHidden')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'color')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'w')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'kern')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'position')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sz')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'szCs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'highlight')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'u')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'effect')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bdr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fitText')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vertAlign')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rtl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'em')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lang')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'eastAsianLayout')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'specVanish')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'oMath')), min_occurs=0L, max_occurs=1)
    )
CT_RPrOriginal._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RPrOriginal._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_RPrOriginal._ContentModel = pyxb.binding.content.ParticleModel(CT_RPrOriginal._GroupModel, min_occurs=1, max_occurs=1)



CT_LatentStyles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lsdException'), CT_LsdException, scope=CT_LatentStyles, documentation=u'Latent Style Exception'))
CT_LatentStyles._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_LatentStyles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lsdException')), min_occurs=0L, max_occurs=None)
    )
CT_LatentStyles._ContentModel = pyxb.binding.content.ParticleModel(CT_LatentStyles._GroupModel, min_occurs=1, max_occurs=1)



CT_SSup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sup'), CT_OMathArg, scope=CT_SSup, documentation=u'Superscript (Superscript object)'))

CT_SSup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sSupPr'), CT_SSupPr, scope=CT_SSup, documentation=u'Superscript Properties'))

CT_SSup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_SSup, documentation=u'Base'))
CT_SSup._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SSup._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sSupPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SSup._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SSup._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sup')), min_occurs=1, max_occurs=1)
    )
CT_SSup._ContentModel = pyxb.binding.content.ParticleModel(CT_SSup._GroupModel, min_occurs=1, max_occurs=1)



CT_NumLvl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lvl'), CT_Lvl, scope=CT_NumLvl, documentation=u'Numbering Level Override Definition'))

CT_NumLvl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'startOverride'), CT_DecimalNumber, scope=CT_NumLvl, documentation=u'Numbering Level Starting Value Override'))
CT_NumLvl._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NumLvl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'startOverride')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_NumLvl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lvl')), min_occurs=0L, max_occurs=1L)
    )
CT_NumLvl._ContentModel = pyxb.binding.content.ParticleModel(CT_NumLvl._GroupModel, min_occurs=1, max_occurs=1)



CT_TcPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'vMerge'), CT_VMerge, scope=CT_TcPrBase, documentation=u'Vertically Merged Cell'))

CT_TcPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tcFitText'), CT_OnOff, scope=CT_TcPrBase, documentation=u'Fit Text Within Cell'))

CT_TcPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tcBorders'), CT_TcBorders, scope=CT_TcPrBase, documentation=u'Table Cell Borders'))

CT_TcPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cnfStyle'), CT_Cnf, scope=CT_TcPrBase, documentation=u'Table Cell Conditional Formatting'))

CT_TcPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'vAlign'), CT_VerticalJc, scope=CT_TcPrBase, documentation=u'Table Cell Vertical Alignment'))

CT_TcPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection'), CT_TextDirection, scope=CT_TcPrBase, documentation=u'Table Cell Text Flow Direction'))

CT_TcPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tcW'), CT_TblWidth, scope=CT_TcPrBase, documentation=u'Preferred Table Cell Width'))

CT_TcPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hideMark'), CT_OnOff, scope=CT_TcPrBase, documentation=u'Ignore End Of Cell Marker In Row Height Calculation'))

CT_TcPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noWrap'), CT_OnOff, scope=CT_TcPrBase, documentation=u"Don't Wrap Cell Content"))

CT_TcPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'gridSpan'), CT_DecimalNumber, scope=CT_TcPrBase, documentation=u'Grid Columns Spanned by Current Table Cell'))

CT_TcPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'headers'), CT_Headers, scope=CT_TcPrBase, documentation=u'Header Cells Associated With Table Cell'))

CT_TcPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tcMar'), CT_TcMar, scope=CT_TcPrBase, documentation=u'Single Table Cell Margins'))

CT_TcPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), CT_Shd, scope=CT_TcPrBase, documentation=u'Table Cell Shading'))

CT_TcPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hMerge'), CT_HMerge, scope=CT_TcPrBase, documentation=u'Horizontally Merged Cell'))
CT_TcPrBase._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TcPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cnfStyle')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcW')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'gridSpan')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hMerge')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vMerge')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcBorders')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noWrap')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcMar')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcFitText')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vAlign')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hideMark')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'headers')), min_occurs=0L, max_occurs=1)
    )
CT_TcPrBase._ContentModel = pyxb.binding.content.ParticleModel(CT_TcPrBase._GroupModel, min_occurs=1, max_occurs=1)



CT_TcPrInner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cellMerge'), CT_CellMergeTrackChange, scope=CT_TcPrInner, documentation=u'Vertically Merged/Split Table Cells'))

CT_TcPrInner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cellDel'), CT_TrackChange, scope=CT_TcPrInner, documentation=u'Table Cell Deletion'))

CT_TcPrInner._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cellIns'), CT_TrackChange, scope=CT_TcPrInner, documentation=u'Table Cell Insertion'))
CT_TcPrInner._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cnfStyle')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcW')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'gridSpan')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hMerge')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vMerge')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcBorders')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noWrap')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcMar')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcFitText')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vAlign')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hideMark')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'headers')), min_occurs=0L, max_occurs=1)
    )
CT_TcPrInner._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cellIns')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cellDel')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cellMerge')), min_occurs=0L, max_occurs=1)
    )
CT_TcPrInner._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TcPrInner._GroupModel_3, min_occurs=0L, max_occurs=1L)
    )
CT_TcPrInner._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TcPrInner._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPrInner._GroupModel_2, min_occurs=1, max_occurs=1)
    )
CT_TcPrInner._ContentModel = pyxb.binding.content.ParticleModel(CT_TcPrInner._GroupModel, min_occurs=1, max_occurs=1)



CT_TcPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tcPrChange'), CT_TcPrChange, scope=CT_TcPr, documentation=u'Revision Information for Table Cell Properties'))
CT_TcPr._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cnfStyle')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcW')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'gridSpan')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hMerge')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vMerge')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcBorders')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noWrap')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcMar')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcFitText')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vAlign')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hideMark')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'headers')), min_occurs=0L, max_occurs=1)
    )
CT_TcPr._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cellIns')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cellDel')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cellMerge')), min_occurs=0L, max_occurs=1)
    )
CT_TcPr._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TcPr._GroupModel_4, min_occurs=0L, max_occurs=1L)
    )
CT_TcPr._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TcPr._GroupModel_2, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPr._GroupModel_3, min_occurs=1, max_occurs=1)
    )
CT_TcPr._GroupModel_5 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TcPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcPrChange')), min_occurs=0L, max_occurs=1)
    )
CT_TcPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TcPr._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcPr._GroupModel_5, min_occurs=1, max_occurs=1)
    )
CT_TcPr._ContentModel = pyxb.binding.content.ParticleModel(CT_TcPr._GroupModel, min_occurs=1, max_occurs=1)



CT_D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_D, documentation=u'Base'))

CT_D._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'dPr'), CT_DPr, scope=CT_D, documentation=u'Delimiter Properties'))
CT_D._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'dPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_D._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=None)
    )
CT_D._ContentModel = pyxb.binding.content.ParticleModel(CT_D._GroupModel, min_occurs=1, max_occurs=1)



CT_WebSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotRelyOnCSS'), CT_OnOff, scope=CT_WebSettings, documentation=u'Do Not Rely on CSS for Font Face Formatting'))

CT_WebSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'relyOnVML'), CT_OnOff, scope=CT_WebSettings, documentation=u'Utilize VML When Saving as Web Page'))

CT_WebSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'allowPNG'), CT_OnOff, scope=CT_WebSettings, documentation=u'Allow PNG as Graphic Format'))

CT_WebSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'frameset'), CT_Frameset, scope=CT_WebSettings, documentation=u'Root Frameset Definition'))

CT_WebSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotUseLongFileNames'), CT_OnOff, scope=CT_WebSettings, documentation=u'Do Not Use File Names Longer than 8.3 Characters'))

CT_WebSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'divs'), CT_Divs, scope=CT_WebSettings, documentation=u'Information about HTML div Elements'))

CT_WebSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotSaveAsSingleFile'), CT_OnOff, scope=CT_WebSettings, documentation=u'Recommend Web Page Format over Single File Web Page Format'))

CT_WebSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'saveSmartTagsAsXml'), CT_OnOff, scope=CT_WebSettings, documentation=u'Save Smart Tag Data in XML Property Bag'))

CT_WebSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'encoding'), CT_String, scope=CT_WebSettings, documentation=u'Output Encoding When Saving as Web Page'))

CT_WebSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'targetScreenSz'), CT_TargetScreenSz, scope=CT_WebSettings, documentation=u'Target Screen Size for Web Page'))

CT_WebSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pixelsPerInch'), CT_DecimalNumber, scope=CT_WebSettings, documentation=u'Pixels per Inch for Graphics/Images'))

CT_WebSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotOrganizeInFolder'), CT_OnOff, scope=CT_WebSettings, documentation=u'Do Not Place Supporting Files in Subdirectory'))

CT_WebSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'optimizeForBrowser'), CT_OptimizeForBrowser, scope=CT_WebSettings, documentation=u'Disable Features Not Supported by Target Web Browser'))
CT_WebSettings._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_WebSettings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'frameset')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_WebSettings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'divs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_WebSettings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'encoding')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_WebSettings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'optimizeForBrowser')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_WebSettings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'relyOnVML')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_WebSettings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'allowPNG')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_WebSettings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotRelyOnCSS')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_WebSettings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotSaveAsSingleFile')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_WebSettings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotOrganizeInFolder')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_WebSettings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotUseLongFileNames')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_WebSettings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pixelsPerInch')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_WebSettings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'targetScreenSz')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_WebSettings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'saveSmartTagsAsXml')), min_occurs=0L, max_occurs=1)
    )
CT_WebSettings._ContentModel = pyxb.binding.content.ParticleModel(CT_WebSettings._GroupModel, min_occurs=1, max_occurs=1)



CT_TrPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblHeader'), CT_OnOff, scope=CT_TrPrBase, documentation=u'Repeat Table Row on Every New Page'))

CT_TrPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'gridAfter'), CT_DecimalNumber, scope=CT_TrPrBase, documentation=u'Grid Columns After Last Cell'))

CT_TrPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellSpacing'), CT_TblWidth, scope=CT_TrPrBase, documentation=u'Table Row Cell Spacing'))

CT_TrPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'trHeight'), CT_Height, scope=CT_TrPrBase, documentation=u'Table Row Height'))

CT_TrPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'wBefore'), CT_TblWidth, scope=CT_TrPrBase, documentation=u'Preferred Width Before Table Row'))

CT_TrPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'wAfter'), CT_TblWidth, scope=CT_TrPrBase, documentation=u'Preferred Width After Table Row'))

CT_TrPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'jc'), CT_JcTable, scope=CT_TrPrBase, documentation=u'Table Row Alignment'))

CT_TrPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hidden'), CT_OnOff, scope=CT_TrPrBase, documentation=u'Hidden Table Row Marker'))

CT_TrPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cantSplit'), CT_OnOff, scope=CT_TrPrBase, documentation=u'Table Row Cannot Break Across Pages'))

CT_TrPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'gridBefore'), CT_DecimalNumber, scope=CT_TrPrBase, documentation=u'Grid Columns Before First Cell'))

CT_TrPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'divId'), CT_DecimalNumber, scope=CT_TrPrBase, documentation=u'Associated HTML div ID'))

CT_TrPrBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cnfStyle'), CT_Cnf, scope=CT_TrPrBase, documentation=u'Table Row Conditional Formatting'))
CT_TrPrBase._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TrPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cnfStyle')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TrPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'divId')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TrPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'gridBefore')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TrPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'gridAfter')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TrPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'wBefore')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TrPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'wAfter')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TrPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cantSplit')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TrPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'trHeight')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TrPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblHeader')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TrPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellSpacing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TrPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'jc')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TrPrBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hidden')), min_occurs=0L, max_occurs=1)
    )
CT_TrPrBase._ContentModel = pyxb.binding.content.ParticleModel(CT_TrPrBase._GroupModel, min_occurs=1, max_occurs=None)



CT_TrPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_TrackChange, scope=CT_TrPr, documentation=u'Inserted Table Row'))

CT_TrPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_TrackChange, scope=CT_TrPr, documentation=u'Deleted Table Row'))

CT_TrPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'trPrChange'), CT_TrPrChange, scope=CT_TrPr, documentation=u'Revision Information for Table Row Properties'))
CT_TrPr._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cnfStyle')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'divId')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'gridBefore')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'gridAfter')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'wBefore')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'wAfter')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cantSplit')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'trHeight')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblHeader')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellSpacing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'jc')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hidden')), min_occurs=0L, max_occurs=1)
    )
CT_TrPr._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'trPrChange')), min_occurs=0L, max_occurs=1)
    )
CT_TrPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TrPr._GroupModel_, min_occurs=1, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_TrPr._GroupModel_2, min_occurs=1, max_occurs=1)
    )
CT_TrPr._ContentModel = pyxb.binding.content.ParticleModel(CT_TrPr._GroupModel, min_occurs=1, max_occurs=1)



CT_EqArr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_EqArr, documentation=u'Element'))

CT_EqArr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'eqArrPr'), CT_EqArrPr, scope=CT_EqArr, documentation=u'Array Properties'))
CT_EqArr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EqArr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'eqArrPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_EqArr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=None)
    )
CT_EqArr._ContentModel = pyxb.binding.content.ParticleModel(CT_EqArr._GroupModel, min_occurs=1, max_occurs=1)



CT_Recipients._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'recipientData'), CT_RecipientData, scope=CT_Recipients, documentation=u'Data About Single Data Source Record'))
CT_Recipients._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Recipients._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'recipientData')), min_occurs=1L, max_occurs=None)
    )
CT_Recipients._ContentModel = pyxb.binding.content.ParticleModel(CT_Recipients._GroupModel, min_occurs=1, max_occurs=1)



CT_F._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'den'), CT_OMathArg, scope=CT_F, documentation=u'Denominator'))

CT_F._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'fPr'), CT_FPr, scope=CT_F, documentation=u'Fraction Properties'))

CT_F._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'num'), CT_OMathArg, scope=CT_F, documentation=u'Numerator'))
CT_F._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_F._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'fPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_F._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'num')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_F._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'den')), min_occurs=1, max_occurs=1)
    )
CT_F._ContentModel = pyxb.binding.content.ParticleModel(CT_F._GroupModel, min_occurs=1, max_occurs=1)



CT_Bar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_Bar, documentation=u'Base'))

CT_Bar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'barPr'), CT_BarPr, scope=CT_Bar, documentation=u'Bar Properties'))
CT_Bar._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Bar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'barPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Bar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=1)
    )
CT_Bar._ContentModel = pyxb.binding.content.ParticleModel(CT_Bar._GroupModel, min_occurs=1, max_occurs=1)



CT_TblStylePr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tcPr'), CT_TcPr, scope=CT_TblStylePr, documentation=u'Table Style Conditional Formatting Table Cell Properties'))

CT_TblStylePr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr'), CT_PPrGeneral, scope=CT_TblStylePr, documentation=u'Table Style Conditional Formatting Paragraph Properties'))

CT_TblStylePr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), CT_RPr, scope=CT_TblStylePr, documentation=u'Table Style Conditional Formatting Run Properties'))

CT_TblStylePr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPr'), CT_TblPrBase, scope=CT_TblStylePr, documentation=u'Table Style Conditional Formatting Table Properties'))

CT_TblStylePr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'trPr'), CT_TrPr, scope=CT_TblStylePr, documentation=u'Table Style Conditional Formatting Table Row Properties'))
CT_TblStylePr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblStylePr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblStylePr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblStylePr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblStylePr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'trPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblStylePr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcPr')), min_occurs=0L, max_occurs=1L)
    )
CT_TblStylePr._ContentModel = pyxb.binding.content.ParticleModel(CT_TblStylePr._GroupModel, min_occurs=1, max_occurs=1)



CT_SdtCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtContent'), CT_SdtContentCell, scope=CT_SdtCell, documentation=u'Cell-Level Structured Document Tag Content'))

CT_SdtCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtPr'), CT_SdtPr, scope=CT_SdtCell, documentation=u'Structured Document Tag Properties'))

CT_SdtCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtEndPr'), CT_SdtEndPr, scope=CT_SdtCell, documentation=u'Structured Document Tag End Character Properties'))
CT_SdtCell._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SdtCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SdtCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtEndPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SdtCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdtContent')), min_occurs=0L, max_occurs=1L)
    )
CT_SdtCell._ContentModel = pyxb.binding.content.ParticleModel(CT_SdtCell._GroupModel, min_occurs=1, max_occurs=1)



CT_PageBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), CT_PageBorder, scope=CT_PageBorders, documentation=u'Right Border'))

CT_PageBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'top'), CT_TopPageBorder, scope=CT_PageBorders, documentation=u'Top Border'))

CT_PageBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), CT_PageBorder, scope=CT_PageBorders, documentation=u'Left Border'))

CT_PageBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom'), CT_BottomPageBorder, scope=CT_PageBorders, documentation=u'Bottom Border'))
CT_PageBorders._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PageBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'top')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PageBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'left')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PageBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PageBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'right')), min_occurs=0L, max_occurs=1)
    )
CT_PageBorders._ContentModel = pyxb.binding.content.ParticleModel(CT_PageBorders._GroupModel, min_occurs=1, max_occurs=1)



CT_Div._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'divBdr'), CT_DivBdr, scope=CT_Div, documentation=u'Set of Borders for HTML div'))

CT_Div._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'marBottom'), CT_SignedTwipsMeasure, scope=CT_Div, documentation=u'Bottom Margin for HTML div'))

CT_Div._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bodyDiv'), CT_OnOff, scope=CT_Div, documentation=u'Data for HTML body Element'))

CT_Div._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'blockQuote'), CT_OnOff, scope=CT_Div, documentation=u'Data for HTML blockquote Element'))

CT_Div._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'marLeft'), CT_SignedTwipsMeasure, scope=CT_Div, documentation=u'Left Margin for HTML div'))

CT_Div._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'divsChild'), CT_Divs, scope=CT_Div, documentation=u'Child div Elements Contained within Current div'))

CT_Div._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'marRight'), CT_SignedTwipsMeasure, scope=CT_Div, documentation=u'Right Margin for HTML div'))

CT_Div._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'marTop'), CT_SignedTwipsMeasure, scope=CT_Div, documentation=u'Top Margin for HTML div'))
CT_Div._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Div._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'blockQuote')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Div._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bodyDiv')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Div._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'marLeft')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Div._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'marRight')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Div._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'marTop')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Div._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'marBottom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Div._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'divBdr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Div._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'divsChild')), min_occurs=0L, max_occurs=None)
    )
CT_Div._ContentModel = pyxb.binding.content.ParticleModel(CT_Div._GroupModel, min_occurs=1, max_occurs=1)



CT_Frameset._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'frameLayout'), CT_FrameLayout, scope=CT_Frameset, documentation=u'Frameset Layout'))

CT_Frameset._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sz'), CT_String, scope=CT_Frameset, documentation=u'Nested Frameset Size'))

CT_Frameset._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'frame'), CT_Frame, scope=CT_Frameset, documentation=u'Single Frame Properties'))

CT_Frameset._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'framesetSplitbar'), CT_FramesetSplitbar, scope=CT_Frameset, documentation=u'Frameset Splitter Properties'))

CT_Frameset._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'frameset'), CT_Frameset, scope=CT_Frameset, documentation=u'Nested Frameset Definition'))

CT_Frameset._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'title'), CT_String, scope=CT_Frameset))
CT_Frameset._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Frameset._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'frameset')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Frameset._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'frame')), min_occurs=0L, max_occurs=None)
    )
CT_Frameset._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Frameset._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sz')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Frameset._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'framesetSplitbar')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Frameset._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'frameLayout')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Frameset._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'title')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Frameset._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_Frameset._ContentModel = pyxb.binding.content.ParticleModel(CT_Frameset._GroupModel, min_occurs=1, max_occurs=1)



CT_SSub._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sub'), CT_OMathArg, scope=CT_SSub, documentation=u'Subscript (Subscript function)'))

CT_SSub._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sSubPr'), CT_SSubPr, scope=CT_SSub, documentation=u'Subscript Properties'))

CT_SSub._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_SSub, documentation=u'Base'))
CT_SSub._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SSub._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sSubPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SSub._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SSub._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sub')), min_occurs=1, max_occurs=1)
    )
CT_SSub._ContentModel = pyxb.binding.content.ParticleModel(CT_SSub._GroupModel, min_occurs=1, max_occurs=1)



CT_TblPrExChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPrEx'), CT_TblPrExBase, scope=CT_TblPrExChange, documentation=u'Previous Table-Level Property Exceptions'))
CT_TblPrExChange._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblPrExChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPrEx')), min_occurs=1L, max_occurs=1)
    )
CT_TblPrExChange._ContentModel = pyxb.binding.content.ParticleModel(CT_TblPrExChange._GroupModel, min_occurs=1, max_occurs=1)



CT_BorderBoxPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'strikeH'), CT_OnOff_, scope=CT_BorderBoxPr, documentation=u'Border Box Strikethrough Horizontal'))

CT_BorderBoxPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'strikeV'), CT_OnOff_, scope=CT_BorderBoxPr, documentation=u'Border Box Strikethrough Vertical'))

CT_BorderBoxPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'strikeBLTR'), CT_OnOff_, scope=CT_BorderBoxPr, documentation=u'Border Box Strikethrough Bottom-Left to Top-Right'))

CT_BorderBoxPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'hideTop'), CT_OnOff_, scope=CT_BorderBoxPr, documentation=u'Hide Top Edge'))

CT_BorderBoxPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'strikeTLBR'), CT_OnOff_, scope=CT_BorderBoxPr, documentation=u'Border Box Strikethrough Top-Left to Bottom-Right'))

CT_BorderBoxPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'hideLeft'), CT_OnOff_, scope=CT_BorderBoxPr, documentation=u'Hide Left Edge'))

CT_BorderBoxPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'hideBot'), CT_OnOff_, scope=CT_BorderBoxPr, documentation=u'Hide Bottom Edge'))

CT_BorderBoxPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_BorderBoxPr))

CT_BorderBoxPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'hideRight'), CT_OnOff_, scope=CT_BorderBoxPr, documentation=u'Hide Right Edge'))
CT_BorderBoxPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BorderBoxPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'hideTop')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BorderBoxPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'hideBot')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BorderBoxPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'hideLeft')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BorderBoxPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'hideRight')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BorderBoxPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'strikeH')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BorderBoxPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'strikeV')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BorderBoxPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'strikeBLTR')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BorderBoxPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'strikeTLBR')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BorderBoxPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_BorderBoxPr._ContentModel = pyxb.binding.content.ParticleModel(CT_BorderBoxPr._GroupModel, min_occurs=1, max_occurs=1)



CT_DocPart._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartBody'), CT_Body, scope=CT_DocPart, documentation=u'Contents of Glossary Document Entry'))

CT_DocPart._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartPr'), CT_DocPartPr, scope=CT_DocPart, documentation=u'Glossary Document Entry Properties'))
CT_DocPart._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DocPart._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DocPart._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'docPartBody')), min_occurs=0L, max_occurs=1)
    )
CT_DocPart._ContentModel = pyxb.binding.content.ParticleModel(CT_DocPart._GroupModel, min_occurs=1, max_occurs=1)



CT_TrPrChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'trPr'), CT_TrPrBase, scope=CT_TrPrChange, documentation=u'Previous Table Row Properties'))
CT_TrPrChange._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TrPrChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'trPr')), min_occurs=1L, max_occurs=1)
    )
CT_TrPrChange._ContentModel = pyxb.binding.content.ParticleModel(CT_TrPrChange._GroupModel, min_occurs=1, max_occurs=1)



CT_SPre._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_SPre, documentation=u'Base'))

CT_SPre._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sPrePr'), CT_SPrePr, scope=CT_SPre, documentation=u'Pre-Sub-Superscript Properties'))

CT_SPre._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sup'), CT_OMathArg, scope=CT_SPre, documentation=u'Superscript(Pre-Sub-Superscript function)'))

CT_SPre._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sub'), CT_OMathArg, scope=CT_SPre, documentation=u'Subscript (Pre-Sub-Superscript)'))
CT_SPre._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SPre._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sPrePr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SPre._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sub')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SPre._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sup')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SPre._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=1)
    )
CT_SPre._ContentModel = pyxb.binding.content.ParticleModel(CT_SPre._GroupModel, min_occurs=1, max_occurs=1)



CT_Comments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'comment'), CT_Comment, scope=CT_Comments, documentation=u'Comment Content'))
CT_Comments._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Comments._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'comment')), min_occurs=0L, max_occurs=None)
    )
CT_Comments._ContentModel = pyxb.binding.content.ParticleModel(CT_Comments._GroupModel, min_occurs=1, max_occurs=1)



CT_FldChar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fldData'), CT_Text, scope=CT_FldChar, documentation=u'Custom Field Data'))

CT_FldChar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ffData'), CT_FFData, scope=CT_FldChar, documentation=u'Form Field Properties'))

CT_FldChar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'numberingChange'), CT_TrackChangeNumbering, scope=CT_FldChar, documentation=u'Previous Numbering Field Properties'))
CT_FldChar._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FldChar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fldData')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FldChar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ffData')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FldChar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numberingChange')), min_occurs=0L, max_occurs=1)
    )
CT_FldChar._ContentModel = pyxb.binding.content.ParticleModel(CT_FldChar._GroupModel, min_occurs=1, max_occurs=1)



CT_FFTextInput._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'format'), CT_String, scope=CT_FFTextInput, documentation=u'Text Box Form Field Formatting'))

CT_FFTextInput._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), CT_FFTextType, scope=CT_FFTextInput, documentation=u'Text Box Form Field Type'))

CT_FFTextInput._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'default'), CT_String, scope=CT_FFTextInput, documentation=u'Default Text Box Form Field String'))

CT_FFTextInput._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'maxLength'), CT_DecimalNumber, scope=CT_FFTextInput, documentation=u'Text Box Form Field Maximum Length'))
CT_FFTextInput._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FFTextInput._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'type')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FFTextInput._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'default')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FFTextInput._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'maxLength')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FFTextInput._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'format')), min_occurs=0L, max_occurs=1)
    )
CT_FFTextInput._ContentModel = pyxb.binding.content.ParticleModel(CT_FFTextInput._GroupModel, min_occurs=1, max_occurs=1)



CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'embedBoldItalic'), CT_FontRel, scope=CT_Font, documentation=u'Bold Italic Font Style Embedding'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'notTrueType'), CT_OnOff, scope=CT_Font, documentation=u'Raster or Vector Font'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pitch'), CT_Pitch, scope=CT_Font, documentation=u'Font Pitch'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'altName'), CT_String, scope=CT_Font, documentation=u'Alternate Names for Font'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'embedItalic'), CT_FontRel, scope=CT_Font, documentation=u'Italic Font Style Embedding'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'panose1'), CT_Panose, scope=CT_Font, documentation=u'Panose-1 Typeface Classification Number'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'embedRegular'), CT_FontRel, scope=CT_Font, documentation=u'Regular Font Style Embedding'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'charset'), CT_Charset, scope=CT_Font, documentation=u'Character Set Supported By Font'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sig'), CT_FontSig, scope=CT_Font, documentation=u'Supported Unicode Subranges and Code Pages'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'embedBold'), CT_FontRel, scope=CT_Font, documentation=u'Bold Style Font Style Embedding'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'family'), CT_FontFamily, scope=CT_Font, documentation=u'Font Family'))
CT_Font._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'altName')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'panose1')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'charset')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'family')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'notTrueType')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pitch')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sig')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'embedRegular')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'embedBold')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'embedItalic')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'embedBoldItalic')), min_occurs=0L, max_occurs=1L)
    )
CT_Font._ContentModel = pyxb.binding.content.ParticleModel(CT_Font._GroupModel, min_occurs=1, max_occurs=1)



CT_TcMar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), CT_TblWidth, scope=CT_TcMar, documentation=u'Table Cell Trailing Margin Exception'))

CT_TcMar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'top'), CT_TblWidth, scope=CT_TcMar, documentation=u'Table Cell Top Margin Exception'))

CT_TcMar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'end'), CT_TblWidth, scope=CT_TcMar, documentation=u'Table Cell Trailing Margin Exception'))

CT_TcMar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'start'), CT_TblWidth, scope=CT_TcMar, documentation=u'Table Cell Leading Margin Exception'))

CT_TcMar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), CT_TblWidth, scope=CT_TcMar, documentation=u'Table Cell Leading Margin Exception'))

CT_TcMar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom'), CT_TblWidth, scope=CT_TcMar, documentation=u'Table Cell Bottom Margin Exception'))
CT_TcMar._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TcMar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'top')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcMar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'start')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcMar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'left')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TcMar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcMar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'end')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TcMar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'right')), min_occurs=0L, max_occurs=1)
    )
CT_TcMar._ContentModel = pyxb.binding.content.ParticleModel(CT_TcMar._GroupModel, min_occurs=1, max_occurs=1)



CT_LimLow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'lim'), CT_OMathArg, scope=CT_LimLow, documentation=u'Limit'))

CT_LimLow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'limLowPr'), CT_LimLowPr, scope=CT_LimLow, documentation=u'Lower-Limit Properties'))

CT_LimLow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_LimLow, documentation=u'Base'))
CT_LimLow._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_LimLow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'limLowPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_LimLow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_LimLow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'lim')), min_occurs=1, max_occurs=1)
    )
CT_LimLow._ContentModel = pyxb.binding.content.ParticleModel(CT_LimLow._GroupModel, min_occurs=1, max_occurs=1)



CT_DivBdr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), CT_Border, scope=CT_DivBdr, documentation=u'Right Border for HTML div'))

CT_DivBdr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'top'), CT_Border, scope=CT_DivBdr, documentation=u'Top Border for HTML div'))

CT_DivBdr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), CT_Border, scope=CT_DivBdr, documentation=u'Left Border for HTML div'))

CT_DivBdr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom'), CT_Border, scope=CT_DivBdr, documentation=u'Bottom Border for HTML div'))
CT_DivBdr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DivBdr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'top')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DivBdr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'left')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DivBdr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DivBdr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'right')), min_occurs=0L, max_occurs=1)
    )
CT_DivBdr._ContentModel = pyxb.binding.content.ParticleModel(CT_DivBdr._GroupModel, min_occurs=1, max_occurs=1)



CT_LimUppPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_LimUppPr))
CT_LimUppPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_LimUppPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_LimUppPr._ContentModel = pyxb.binding.content.ParticleModel(CT_LimUppPr._GroupModel, min_occurs=1, max_occurs=1)



CT_PPrDefault._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr'), CT_PPrGeneral, scope=CT_PPrDefault, documentation=u'Paragraph Properties'))
CT_PPrDefault._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PPrDefault._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr')), min_occurs=0L, max_occurs=1)
    )
CT_PPrDefault._ContentModel = pyxb.binding.content.ParticleModel(CT_PPrDefault._GroupModel, min_occurs=1, max_occurs=1)



CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_TxbxContent, documentation=u'Custom XML Markup Move Source Start'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_TxbxContent, documentation=u'Custom XML Markup Move Source End'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_TxbxContent, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlBlock, scope=CT_TxbxContent, documentation=u'Block-Level Custom XML Element'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), CT_Tbl, scope=CT_TxbxContent, documentation=u'Table'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_TxbxContent, documentation=u'Inserted Run Content'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_TxbxContent, documentation=u'Deleted Run Content'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_TxbxContent, documentation=u'Move Source Run Content'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_TxbxContent, documentation=u'Range Permission Start'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), CT_P, scope=CT_TxbxContent, documentation=u'Paragraph'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_TxbxContent, documentation=u'Move Destination Run Content'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_TxbxContent, documentation=u'Range Permission End'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_TxbxContent, documentation=u'Office Math Paragraph'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_TxbxContent, documentation=u'Bookmark Start'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_TxbxContent))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_TxbxContent, documentation=u'Bookmark End'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_TxbxContent, documentation=u'Move Source Location Container - Start'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_TxbxContent, documentation=u'Move Source Location Container - End'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_TxbxContent, documentation=u'Custom XML Markup Move Destination Location End'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_TxbxContent, documentation=u'Proofing Error Anchor'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_TxbxContent, documentation=u'Move Destination Location Container - End'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_TxbxContent, documentation=u'Comment Anchor Range Start'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtBlock, scope=CT_TxbxContent, documentation=u'Block-Level Structured Document Tag'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_TxbxContent, documentation=u'Comment Anchor Range End'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_TxbxContent, documentation=u'Custom XML Markup Insertion Start'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_TxbxContent, documentation=u'Custom XML Markup Insertion End'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_TxbxContent, documentation=u'Move Destination Location Container - Start'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_TxbxContent, documentation=u'Custom XML Markup Deletion Start'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_TxbxContent, documentation=u'Custom XML Markup Deletion End'))

CT_TxbxContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk'), CT_AltChunk, scope=CT_TxbxContent, documentation=u'Anchor for Imported External Content'))
CT_TxbxContent._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_TxbxContent._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_TxbxContent._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._GroupModel_4, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._GroupModel_5, min_occurs=0L, max_occurs=None)
    )
CT_TxbxContent._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'p')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._GroupModel_3, min_occurs=0L, max_occurs=None)
    )
CT_TxbxContent._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TxbxContent._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CT_TxbxContent._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_TxbxContent._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_TxbxContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk')), min_occurs=0L, max_occurs=None)
    )
CT_TxbxContent._ContentModel = pyxb.binding.content.ParticleModel(CT_TxbxContent._GroupModel, min_occurs=1L, max_occurs=None)



CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ignoreMixedContent'), CT_OnOff, scope=CT_Settings, documentation=u'Ignore Mixed Content When Validating Custom XML Markup'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTagType'), CT_SmartTagType, scope=CT_Settings, documentation=u'Supplementary Smart Tag Information'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'printPostScriptOverText'), CT_OnOff, scope=CT_Settings, documentation=u'Print PostScript Codes With Document Text'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'mailMerge'), CT_MailMerge, scope=CT_Settings, documentation=u'Mail Merge Settings'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'useXSLTWhenSaving'), CT_OnOff, scope=CT_Settings, documentation=u'Save Document as XML File through Custom XSL Transform'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'decimalSymbol'), CT_String, scope=CT_Settings, documentation=u'Radix Point for Field Code Evaluation'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'embedSystemFonts'), CT_OnOff, scope=CT_Settings, documentation=u'Embed Common System Fonts'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotTrackFormatting'), CT_OnOff, scope=CT_Settings, documentation=u'Do Not Track Formatting Revisions When Tracking Revisions'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'updateFields'), CT_OnOff, scope=CT_Settings, documentation=u'Automatically Recalculate Fields on Open'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'drawingGridHorizontalSpacing'), CT_TwipsMeasure_, scope=CT_Settings, documentation=u'Drawing Grid Horizontal Grid Unit Size'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'alignBordersAndEdges'), CT_OnOff, scope=CT_Settings, documentation=u'Align Paragraph and Table Borders with Page Border'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'compat'), CT_Compat, scope=CT_Settings, documentation=u'Compatibility Settings'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'styleLockQFSet'), CT_OnOff, scope=CT_Settings, documentation=u'Prevent Replacement of Styles Part'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'stylePaneFormatFilter'), CT_StylePaneFilter, scope=CT_Settings, documentation=u'Suggested Filtering for List of Document Styles'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'removePersonalInformation'), CT_OnOff, scope=CT_Settings, documentation=u'Remove Personal Information from Document Properties'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hideSpellingErrors'), CT_OnOff, scope=CT_Settings, documentation=u'Do Not Display Visual Indication of Spelling Errors'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'stylePaneSortMethod'), CT_StyleSort, scope=CT_Settings, documentation=u'Suggested Sorting for List of Document Styles'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hyphenationZone'), CT_TwipsMeasure_, scope=CT_Settings, documentation=u'Hyphenation Zone'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotHyphenateCaps'), CT_OnOff, scope=CT_Settings, documentation=u'Do Not Hyphenate Words in ALL CAPITAL LETTERS'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'printTwoOnOne'), CT_OnOff, scope=CT_Settings, documentation=u'Print Two Pages Per Sheet'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofState'), CT_Proof, scope=CT_Settings, documentation=u'Spelling and Grammatical Checking State'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'savePreviewPicture'), CT_OnOff, scope=CT_Settings, documentation=u'Generate Thumbnail For Document On Save'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotIncludeSubdocsInStats'), CT_OnOff, scope=CT_Settings, documentation=u'Do Not Include Content in Text Boxes, Footnotes, and Endnotes in Document Statistics'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'writeProtection'), CT_WriteProtection, scope=CT_Settings, documentation=u'Write Protection'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'defaultTableStyle'), CT_String, scope=CT_Settings, documentation=u'Default Table Style for Newly Inserted Tables'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'saveFormsData'), CT_OnOff, scope=CT_Settings, documentation=u'Only Save Form Field Content'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'alwaysShowPlaceholderText'), CT_OnOff, scope=CT_Settings, documentation=u'Use Custom XML Element Names as Default Placeholder Text'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'captions'), CT_Captions, scope=CT_Settings, documentation=u'Caption Settings'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookFoldPrintingSheets'), CT_DecimalNumber, scope=CT_Settings, documentation=u'Number of Pages Per Booklet'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'defaultTabStop'), CT_TwipsMeasure_, scope=CT_Settings, documentation=u'Distance Between Automatic Tab Stops'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'revisionView'), CT_TrackChangesView, scope=CT_Settings, documentation=u'Visibility of Annotation Types'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'saveThroughXslt'), CT_SaveThroughXslt, scope=CT_Settings, documentation=u'Custom XSL Transform To Use When Saving As XML File'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'embedTrueTypeFonts'), CT_OnOff, scope=CT_Settings, documentation=u'Embed TrueType Fonts'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'listSeparator'), CT_String, scope=CT_Settings, documentation=u'List Separator for Field Code Evaluation'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'displayVerticalDrawingGridEvery'), CT_DecimalNumber, scope=CT_Settings, documentation=u'Distance between Vertical Gridlines'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'documentProtection'), CT_DocProtect, scope=CT_Settings, documentation=u'Document Editing Restrictions'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hdrShapeDefaults'), CT_ShapeDefaults, scope=CT_Settings, documentation=u'Default Properties for VML Objects in Header and Footer'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotShadeFormData'), CT_OnOff, scope=CT_Settings, documentation=u'Do Not Show Visual Indicator For Form Fields'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rsids'), CT_DocRsids, scope=CT_Settings, documentation=u'Listing of All Revision Save ID Values'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'docVars'), CT_DocVars, scope=CT_Settings, documentation=u'Document Variables'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hideGrammaticalErrors'), CT_OnOff, scope=CT_Settings, documentation=u'Do Not Display Visual Indication of Grammatical Errors'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'showXMLTags'), CT_OnOff, scope=CT_Settings, documentation=u'Show Visual Indicators for Custom XML Markup Start/End Locations'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'strictFirstAndLastChars'), CT_OnOff, scope=CT_Settings, documentation=u'Use Strict Kinsoku Rules for Japanese Text'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bordersDoNotSurroundHeader'), CT_OnOff, scope=CT_Settings, documentation=u'Page Border Excludes Header'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'view'), CT_View, scope=CT_Settings, documentation=u'Document View Setting'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'formsDesign'), CT_OnOff, scope=CT_Settings, documentation=u'Structured Document Tag Placeholder Text Should be Resaved'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'removeDateAndTime'), CT_OnOff, scope=CT_Settings, documentation=u'Remove Date and Time from Annotations'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotValidateAgainstSchema'), CT_OnOff, scope=CT_Settings, documentation=u'Do Not Validate Custom XML Markup Against Schemas'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotAutoCompressPictures'), CT_OnOff, scope=CT_Settings, documentation=u'Do Not Automatically Compress Images'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'evenAndOddHeaders'), CT_OnOff, scope=CT_Settings, documentation=u'Different Even/Odd Page Headers and Footers'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookFoldRevPrinting'), CT_OnOff, scope=CT_Settings, documentation=u'Reverse Book Fold Printing'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotDemarcateInvalidXml'), CT_OnOff, scope=CT_Settings, documentation=u'Do Not Show Visual Indicator For Invalid Custom XML Markup'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'shapeDefaults'), CT_ShapeDefaults, scope=CT_Settings, documentation=u'Default Properties for VML Objects in Main Document'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'printFormsData'), CT_OnOff, scope=CT_Settings, documentation=u'Only Print Form Field Content'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'trackRevisions'), CT_OnOff, scope=CT_Settings, documentation=u'Track Revisions to Document'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noPunctuationKerning'), CT_OnOff, scope=CT_Settings, documentation=u'Never Kern Punctuation Characters'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotUseMarginsForDrawingGridOrigin'), CT_OnOff, scope=CT_Settings, documentation=u'Do Not Use Margins for Drawing Grid Origin'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'autoFormatOverride'), CT_OnOff, scope=CT_Settings, documentation=u'Allow Automatic Formatting to Override Formatting Protection Settings'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'footnotePr'), CT_FtnDocProps, scope=CT_Settings, documentation=u'Document-Wide Footnote Properties'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'showEnvelope'), CT_OnOff, scope=CT_Settings, documentation=u'Show E-Mail Message Header'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bordersDoNotSurroundFooter'), CT_OnOff, scope=CT_Settings, documentation=u'Page Border Excludes Footer'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'drawingGridHorizontalOrigin'), CT_TwipsMeasure_, scope=CT_Settings, documentation=u'Drawing Grid Horizontal Origin Point'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'autoHyphenation'), CT_OnOff, scope=CT_Settings, documentation=u'Automatically Hyphenate Document Contents When Displayed'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'alwaysMergeEmptyNamespace'), CT_OnOff, scope=CT_Settings, documentation=u'Do Not Mark Custom XML Elements With No Namespace As Invalid'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'attachedSchema'), CT_String, scope=CT_Settings, documentation=u'Attached Custom XML Schema'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noLineBreaksAfter'), CT_Kinsoku, scope=CT_Settings, documentation=u'Custom Set of Characters Which Cannot End a Line'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'themeFontLang'), CT_Language, scope=CT_Settings, documentation=u'Theme Font Languages'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'printFractionalCharacterWidth'), CT_OnOff, scope=CT_Settings, documentation=u'Print Fractional Character Widths'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'zoom'), CT_Zoom, scope=CT_Settings, documentation=u'Magnification Setting'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'displayHorizontalDrawingGridEvery'), CT_DecimalNumber, scope=CT_Settings, documentation=u'Distance between Horizontal Gridlines'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'attachedTemplate'), CT_Rel, scope=CT_Settings, documentation=u'Attached Document Template'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'saveInvalidXml'), CT_OnOff, scope=CT_Settings, documentation=u'Allow Saving Document As XML File When Custom XML Markup Is Invalid'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'forceUpgrade'), CT_Empty, scope=CT_Settings, documentation=u'Upgrade Document on Open'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'displayBackgroundShape'), CT_OnOff, scope=CT_Settings, documentation=u'Display Background Objects When Displaying Document'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'linkStyles'), CT_OnOff, scope=CT_Settings, documentation=u'Automatically Update Styles From Document Template'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'documentType'), CT_DocType, scope=CT_Settings, documentation=u'Document Classification'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotDisplayPageBoundaries'), CT_OnOff, scope=CT_Settings, documentation=u'Do Not Display Visual Boundary For Header/Footer or Between Pages'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'saveXmlDataOnly'), CT_OnOff, scope=CT_Settings, documentation=u'Only Save Custom XML Markup'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_sl.Namespace, u'schemaLibrary'), _sl.CT_SchemaLibrary, scope=CT_Settings, documentation=u'Embedded Custom XML Schema Supplementary Data'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotEmbedSmartTags'), CT_OnOff, scope=CT_Settings, documentation=u'Remove Smart Tags When Saving'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'drawingGridVerticalSpacing'), CT_TwipsMeasure_, scope=CT_Settings, documentation=u'Drawing Grid Vertical Grid Unit Size'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotTrackMoves'), CT_OnOff, scope=CT_Settings, documentation=u'Do Not Use Move Syntax When Tracking Revisions'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'mirrorMargins'), CT_OnOff, scope=CT_Settings, documentation=u'Mirror Page Margins'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'styleLockTheme'), CT_OnOff, scope=CT_Settings, documentation=u'Prevent Modification of Themes Part'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'endnotePr'), CT_EdnDocProps, scope=CT_Settings, documentation=u'Document-Wide Endnote Properties'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'characterSpacingControl'), CT_CharacterSpacing, scope=CT_Settings, documentation=u'Character-Level Whitespace Compression'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookFoldPrinting'), CT_OnOff, scope=CT_Settings, documentation=u'Book Fold Printing'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'gutterAtTop'), CT_OnOff, scope=CT_Settings, documentation=u'Position Gutter At Top of Page'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'consecutiveHyphenLimit'), CT_DecimalNumber, scope=CT_Settings, documentation=u'Maximum Number of Consecutively Hyphenated Lines'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'readModeInkLockDown'), CT_ReadingModeInkLockDown, scope=CT_Settings, documentation=u'Freeze Document Layout'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'saveSubsetFonts'), CT_OnOff, scope=CT_Settings, documentation=u'Subset Fonts When Embedding'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'activeWritingStyle'), CT_WritingStyle, scope=CT_Settings, documentation=u'Grammar Checking Settings'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'summaryLength'), CT_DecimalNumberOrPrecent, scope=CT_Settings, documentation=u'Percentage of Document to Use When Generating Summary'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noLineBreaksBefore'), CT_Kinsoku, scope=CT_Settings, documentation=u'Custom Set Of Characters Which Cannot Begin A Line'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'clrSchemeMapping'), CT_ColorSchemeMapping, scope=CT_Settings, documentation=u'Theme Color Mappings'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'drawingGridVerticalOrigin'), CT_TwipsMeasure_, scope=CT_Settings, documentation=u'Drawing Grid Vertical Origin Point'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'mathPr'), CT_MathPr, scope=CT_Settings, documentation=u'Math Properties'))

CT_Settings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'clickAndTypeStyle'), CT_String, scope=CT_Settings, documentation=u'Paragraph Style Applied to Automatically Generated Paragraphs'))
CT_Settings._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'writeProtection')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'view')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'zoom')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'removePersonalInformation')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'removeDateAndTime')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotDisplayPageBoundaries')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'displayBackgroundShape')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'printPostScriptOverText')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'printFractionalCharacterWidth')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'printFormsData')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'embedTrueTypeFonts')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'embedSystemFonts')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'saveSubsetFonts')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'saveFormsData')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'mirrorMargins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'alignBordersAndEdges')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bordersDoNotSurroundHeader')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bordersDoNotSurroundFooter')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'gutterAtTop')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hideSpellingErrors')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hideGrammaticalErrors')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'activeWritingStyle')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofState')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'formsDesign')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'attachedTemplate')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'linkStyles')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'stylePaneFormatFilter')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'stylePaneSortMethod')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'documentType')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'mailMerge')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'revisionView')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'trackRevisions')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotTrackMoves')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotTrackFormatting')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'documentProtection')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'autoFormatOverride')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'styleLockTheme')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'styleLockQFSet')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'defaultTabStop')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'autoHyphenation')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'consecutiveHyphenLimit')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hyphenationZone')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotHyphenateCaps')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'showEnvelope')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'summaryLength')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'clickAndTypeStyle')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'defaultTableStyle')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'evenAndOddHeaders')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookFoldRevPrinting')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookFoldPrinting')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookFoldPrintingSheets')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'drawingGridHorizontalSpacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'drawingGridVerticalSpacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'displayHorizontalDrawingGridEvery')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'displayVerticalDrawingGridEvery')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotUseMarginsForDrawingGridOrigin')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'drawingGridHorizontalOrigin')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'drawingGridVerticalOrigin')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotShadeFormData')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noPunctuationKerning')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'characterSpacingControl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'printTwoOnOne')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'strictFirstAndLastChars')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noLineBreaksAfter')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noLineBreaksBefore')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'savePreviewPicture')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotValidateAgainstSchema')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'saveInvalidXml')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ignoreMixedContent')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'alwaysShowPlaceholderText')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotDemarcateInvalidXml')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'saveXmlDataOnly')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'useXSLTWhenSaving')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'saveThroughXslt')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'showXMLTags')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'alwaysMergeEmptyNamespace')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'updateFields')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hdrShapeDefaults')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'footnotePr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'endnotePr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'compat')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'docVars')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rsids')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'mathPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'attachedSchema')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'themeFontLang')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'clrSchemeMapping')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotIncludeSubdocsInStats')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotAutoCompressPictures')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'forceUpgrade')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'captions')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'readModeInkLockDown')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTagType')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_sl.Namespace, u'schemaLibrary')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shapeDefaults')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotEmbedSmartTags')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'decimalSymbol')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Settings._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'listSeparator')), min_occurs=0L, max_occurs=1L)
    )
CT_Settings._ContentModel = pyxb.binding.content.ParticleModel(CT_Settings._GroupModel, min_occurs=1, max_occurs=1)



CT_Tabs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tab'), CT_TabStop, scope=CT_Tabs, documentation=u'Custom Tab Stop'))
CT_Tabs._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Tabs._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tab')), min_occurs=1L, max_occurs=None)
    )
CT_Tabs._ContentModel = pyxb.binding.content.ParticleModel(CT_Tabs._GroupModel, min_occurs=1, max_occurs=1)



CT_LimLowPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_LimLowPr))
CT_LimLowPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_LimLowPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_LimLowPr._ContentModel = pyxb.binding.content.ParticleModel(CT_LimLowPr._GroupModel, min_occurs=1, max_occurs=1)



CT_EdnDocProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'endnote'), CT_FtnEdnSepRef, scope=CT_EdnDocProps, documentation=u'Special Endnote List'))
CT_EdnDocProps._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EdnDocProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_EdnDocProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numRestart')), min_occurs=0L, max_occurs=1)
    )
CT_EdnDocProps._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EdnDocProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pos')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_EdnDocProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numFmt')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_EdnDocProps._GroupModel_2, min_occurs=0L, max_occurs=1)
    )
CT_EdnDocProps._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EdnDocProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'endnote')), min_occurs=0L, max_occurs=3L)
    )
CT_EdnDocProps._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EdnDocProps._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_EdnDocProps._GroupModel_3, min_occurs=1, max_occurs=1)
    )
CT_EdnDocProps._ContentModel = pyxb.binding.content.ParticleModel(CT_EdnDocProps._GroupModel, min_occurs=1, max_occurs=1)



CT_DocPartBehaviors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'behavior'), CT_DocPartBehavior, scope=CT_DocPartBehaviors, documentation=u'Entry Insertion Behavior'))
CT_DocPartBehaviors._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_DocPartBehaviors._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'behavior')), min_occurs=1, max_occurs=None)
    )
CT_DocPartBehaviors._ContentModel = pyxb.binding.content.ParticleModel(CT_DocPartBehaviors._GroupModel, min_occurs=1, max_occurs=1)



CT_TblBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'end'), CT_Border, scope=CT_TblBorders, documentation=u'Table Trailing Edge Border'))

CT_TblBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'top'), CT_Border, scope=CT_TblBorders, documentation=u'Table Top Border'))

CT_TblBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'insideH'), CT_Border, scope=CT_TblBorders, documentation=u'Table Inside Horizontal Edges Border'))

CT_TblBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'start'), CT_Border, scope=CT_TblBorders, documentation=u'Table Leading Edge Border'))

CT_TblBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), CT_Border, scope=CT_TblBorders, documentation=u'Table Trailing Edge Border'))

CT_TblBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'insideV'), CT_Border, scope=CT_TblBorders, documentation=u'Table Inside Vertical Edges Border'))

CT_TblBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), CT_Border, scope=CT_TblBorders, documentation=u'Table Leading Edge Border'))

CT_TblBorders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom'), CT_Border, scope=CT_TblBorders, documentation=u'Table Bottom Border'))
CT_TblBorders._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'top')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'start')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'left')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'end')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'right')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'insideH')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblBorders._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'insideV')), min_occurs=0L, max_occurs=1)
    )
CT_TblBorders._ContentModel = pyxb.binding.content.ParticleModel(CT_TblBorders._GroupModel, min_occurs=1, max_occurs=1)



CT_PPrChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr'), CT_PPrBase, scope=CT_PPrChange, documentation=u'Previous Paragraph Properties'))
CT_PPrChange._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PPrChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr')), min_occurs=1L, max_occurs=1)
    )
CT_PPrChange._ContentModel = pyxb.binding.content.ParticleModel(CT_PPrChange._GroupModel, min_occurs=1, max_occurs=1)



CT_Numbering._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'numIdMacAtCleanup'), CT_DecimalNumber, scope=CT_Numbering, documentation=u'Last Reviewed Abstract Numbering Definition'))

CT_Numbering._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'numPicBullet'), CT_NumPicBullet, scope=CT_Numbering, documentation=u'Picture Numbering Symbol Definition'))

CT_Numbering._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'abstractNum'), CT_AbstractNum, scope=CT_Numbering, documentation=u'Abstract Numbering Definition'))

CT_Numbering._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'num'), CT_Num, scope=CT_Numbering, documentation=u'Numbering Definition Instance'))
CT_Numbering._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Numbering._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numPicBullet')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Numbering._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'abstractNum')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Numbering._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'num')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Numbering._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numIdMacAtCleanup')), min_occurs=0L, max_occurs=1)
    )
CT_Numbering._ContentModel = pyxb.binding.content.ParticleModel(CT_Numbering._GroupModel, min_occurs=1, max_occurs=1)



CT_Divs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'div'), CT_Div, scope=CT_Divs, documentation=u'Information About Single HTML div Element'))
CT_Divs._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Divs._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'div')), min_occurs=1, max_occurs=1)
    )
CT_Divs._ContentModel = pyxb.binding.content.ParticleModel(CT_Divs._GroupModel, min_occurs=1L, max_occurs=None)



CT_AbstractNum._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'styleLink'), CT_String, scope=CT_AbstractNum, documentation=u'Numbering Style Definition'))

CT_AbstractNum._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'numStyleLink'), CT_String, scope=CT_AbstractNum, documentation=u'Numbering Style Reference'))

CT_AbstractNum._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lvl'), CT_Lvl, scope=CT_AbstractNum, documentation=u'Numbering Level Definition'))

CT_AbstractNum._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'nsid'), CT_LongHexNumber, scope=CT_AbstractNum, documentation=u'Abstract Numbering Definition Identifier'))

CT_AbstractNum._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tmpl'), CT_LongHexNumber, scope=CT_AbstractNum, documentation=u'Numbering Template Code'))

CT_AbstractNum._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'multiLevelType'), CT_MultiLevelType, scope=CT_AbstractNum, documentation=u'Abstract Numbering Definition Type'))

CT_AbstractNum._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), CT_String, scope=CT_AbstractNum, documentation=u'Abstract Numbering Definition Name'))
CT_AbstractNum._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AbstractNum._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'nsid')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_AbstractNum._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'multiLevelType')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_AbstractNum._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tmpl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_AbstractNum._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'name')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_AbstractNum._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'styleLink')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_AbstractNum._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numStyleLink')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_AbstractNum._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lvl')), min_occurs=0L, max_occurs=9L)
    )
CT_AbstractNum._ContentModel = pyxb.binding.content.ParticleModel(CT_AbstractNum._GroupModel, min_occurs=1, max_occurs=1)



CT_SSupPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_SSupPr))
CT_SSupPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SSupPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_SSupPr._ContentModel = pyxb.binding.content.ParticleModel(CT_SSupPr._GroupModel, min_occurs=1, max_occurs=1)



CT_SdtComboBox._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'listItem'), CT_SdtListItem, scope=CT_SdtComboBox, documentation=u'Combo Box List Item'))
CT_SdtComboBox._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SdtComboBox._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'listItem')), min_occurs=0L, max_occurs=None)
    )
CT_SdtComboBox._ContentModel = pyxb.binding.content.ParticleModel(CT_SdtComboBox._GroupModel, min_occurs=1, max_occurs=1)



CT_EqArrPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'rSp'), CT_UnSignedInteger, scope=CT_EqArrPr, documentation=u'Row Spacing (Array)'))

CT_EqArrPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'rSpRule'), CT_SpacingRule, scope=CT_EqArrPr, documentation=u'Row Spacing Rule'))

CT_EqArrPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'baseJc'), CT_YAlign, scope=CT_EqArrPr, documentation=u'Equation Array Base Justification'))

CT_EqArrPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'maxDist'), CT_OnOff_, scope=CT_EqArrPr, documentation=u'Maximum Distribution'))

CT_EqArrPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_EqArrPr))

CT_EqArrPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'objDist'), CT_OnOff_, scope=CT_EqArrPr, documentation=u'Object Distribution'))
CT_EqArrPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_EqArrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'baseJc')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_EqArrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'maxDist')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_EqArrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'objDist')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_EqArrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'rSpRule')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_EqArrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'rSp')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_EqArrPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_EqArrPr._ContentModel = pyxb.binding.content.ParticleModel(CT_EqArrPr._GroupModel, min_occurs=1, max_occurs=1)



CT_Lvl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'isLgl'), CT_OnOff, scope=CT_Lvl, documentation=u'Display All Levels Using Arabic Numerals'))

CT_Lvl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr'), CT_PPrGeneral, scope=CT_Lvl, documentation=u'Numbering Level Associated Paragraph Properties'))

CT_Lvl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'start'), CT_DecimalNumber, scope=CT_Lvl, documentation=u'Starting Value'))

CT_Lvl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), CT_RPr, scope=CT_Lvl, documentation=u'Numbering Symbol Run Properties'))

CT_Lvl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lvlText'), CT_LevelText, scope=CT_Lvl, documentation=u'Numbering Level Text'))

CT_Lvl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'numFmt'), CT_NumFmt, scope=CT_Lvl, documentation=u'Numbering Format'))

CT_Lvl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'suff'), CT_LevelSuffix, scope=CT_Lvl, documentation=u'Content Between Numbering Symbol and Paragraph Text'))

CT_Lvl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lvlPicBulletId'), CT_DecimalNumber, scope=CT_Lvl, documentation=u'Picture Numbering Symbol Definition Reference'))

CT_Lvl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lvlRestart'), CT_DecimalNumber, scope=CT_Lvl, documentation=u'Restart Numbering Level Symbol'))

CT_Lvl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'legacy'), CT_LvlLegacy, scope=CT_Lvl, documentation=u'Legacy Numbering Level Properties'))

CT_Lvl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pStyle'), CT_String, scope=CT_Lvl, documentation=u"Paragraph Style's Associated Numbering Level"))

CT_Lvl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lvlJc'), CT_Jc, scope=CT_Lvl, documentation=u'Justification'))
CT_Lvl._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Lvl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'start')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Lvl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numFmt')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Lvl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lvlRestart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Lvl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pStyle')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Lvl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'isLgl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Lvl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'suff')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Lvl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lvlText')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Lvl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lvlPicBulletId')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Lvl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'legacy')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Lvl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lvlJc')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Lvl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Lvl._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr')), min_occurs=0L, max_occurs=1)
    )
CT_Lvl._ContentModel = pyxb.binding.content.ParticleModel(CT_Lvl._GroupModel, min_occurs=1, max_occurs=1)



CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'defJc'), CT_OMathJc, scope=CT_MathPr, documentation=u'Default Justification'))

CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'smallFrac'), CT_OnOff_, scope=CT_MathPr, documentation=u'Small Fraction'))

CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'wrapIndent'), CT_TwipsMeasure, scope=CT_MathPr, documentation=u'Wrap Indent'))

CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'preSp'), CT_TwipsMeasure, scope=CT_MathPr, documentation=u'Pre-Paragraph Spacing'))

CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'wrapRight'), CT_OnOff_, scope=CT_MathPr, documentation=u'Wrap Right'))

CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'postSp'), CT_TwipsMeasure, scope=CT_MathPr, documentation=u'Post-Paragraph Spacing'))

CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'dispDef'), CT_OnOff_, scope=CT_MathPr, documentation=u'Use Display Math Defaults'))

CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'brkBinSub'), CT_BreakBinSub, scope=CT_MathPr, documentation=u'Break on Binary Subtraction'))

CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'lMargin'), CT_TwipsMeasure, scope=CT_MathPr, documentation=u'Left Margin'))

CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'interSp'), CT_TwipsMeasure, scope=CT_MathPr, documentation=u'Inter-Equation Spacing'))

CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'naryLim'), CT_LimLoc, scope=CT_MathPr, documentation=u'n-ary Limit Location'))

CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'intLim'), CT_LimLoc, scope=CT_MathPr, documentation=u'Integral Limit Locations'))

CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'intraSp'), CT_TwipsMeasure, scope=CT_MathPr, documentation=u'Intra-Equation Spacing'))

CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'rMargin'), CT_TwipsMeasure, scope=CT_MathPr, documentation=u'Right Margin'))

CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'brkBin'), CT_BreakBin, scope=CT_MathPr, documentation=u'Break on Binary Operators'))

CT_MathPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'mathFont'), CT_String_, scope=CT_MathPr, documentation=u'Math Font'))
CT_MathPr._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'wrapIndent')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'wrapRight')), min_occurs=1, max_occurs=1)
    )
CT_MathPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'mathFont')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'brkBin')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'brkBinSub')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'smallFrac')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'dispDef')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'lMargin')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'rMargin')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'defJc')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'preSp')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'postSp')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'interSp')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'intraSp')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MathPr._GroupModel_, min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'intLim')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MathPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'naryLim')), min_occurs=0L, max_occurs=1)
    )
CT_MathPr._ContentModel = pyxb.binding.content.ParticleModel(CT_MathPr._GroupModel, min_occurs=1, max_occurs=1)



CT_FFData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), CT_FFName, scope=CT_FFData, documentation=u'Form Field Name'))

CT_FFData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ddList'), CT_FFDDList, scope=CT_FFData, documentation=u'Drop-Down List Form Field Properties'))

CT_FFData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'exitMacro'), CT_MacroName, scope=CT_FFData, documentation=u'Script Function to Execute on Form Field Exit'))

CT_FFData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'textInput'), CT_FFTextInput, scope=CT_FFData, documentation=u'Text Box Form Field Properties'))

CT_FFData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'label'), CT_DecimalNumber, scope=CT_FFData, documentation=u'Form Field Label'))

CT_FFData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'helpText'), CT_FFHelpText, scope=CT_FFData, documentation=u'Associated Help Text'))

CT_FFData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tabIndex'), CT_UnsignedDecimalNumber, scope=CT_FFData, documentation=u'Form Field Navigation Order Index'))

CT_FFData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'entryMacro'), CT_MacroName, scope=CT_FFData, documentation=u'Script Function to Execute on Form Field Entry'))

CT_FFData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'statusText'), CT_FFStatusText, scope=CT_FFData, documentation=u'Associated Status Text'))

CT_FFData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'enabled'), CT_OnOff, scope=CT_FFData, documentation=u'Form Field Enabled'))

CT_FFData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'calcOnExit'), CT_OnOff, scope=CT_FFData, documentation=u'Recalculate Fields When Current Field Is Modified'))

CT_FFData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'checkBox'), CT_FFCheckBox, scope=CT_FFData, documentation=u'Checkbox Form Field Properties'))
CT_FFData._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FFData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'checkBox')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FFData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ddList')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FFData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'textInput')), min_occurs=1, max_occurs=1)
    )
CT_FFData._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FFData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'name')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FFData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'label')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FFData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tabIndex')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FFData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'enabled')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FFData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'calcOnExit')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FFData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'entryMacro')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FFData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'exitMacro')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FFData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'helpText')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FFData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'statusText')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FFData._GroupModel_, min_occurs=1, max_occurs=1)
    )
CT_FFData._ContentModel = pyxb.binding.content.ParticleModel(CT_FFData._GroupModel, min_occurs=1, max_occurs=None)



CT_AutoCaptions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'autoCaption'), CT_AutoCaption, scope=CT_AutoCaptions, documentation=u'Single Automatic Captioning Setting'))
CT_AutoCaptions._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AutoCaptions._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'autoCaption')), min_occurs=1L, max_occurs=None)
    )
CT_AutoCaptions._ContentModel = pyxb.binding.content.ParticleModel(CT_AutoCaptions._GroupModel, min_occurs=1, max_occurs=1)



CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), CT_Tbl, scope=CT_HdrFtr, documentation=u'Table'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_HdrFtr, documentation=u'Deleted Run Content'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_HdrFtr, documentation=u'Proofing Error Anchor'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_HdrFtr, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_HdrFtr, documentation=u'Move Source Run Content'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_HdrFtr, documentation=u'Range Permission Start'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_HdrFtr, documentation=u'Move Destination Run Content'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_HdrFtr, documentation=u'Range Permission End'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_HdrFtr, documentation=u'Office Math Paragraph'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_HdrFtr, documentation=u'Bookmark Start'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_HdrFtr))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_HdrFtr, documentation=u'Bookmark End'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_HdrFtr, documentation=u'Custom XML Markup Move Destination Location End'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_HdrFtr, documentation=u'Move Source Location Container - Start'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_HdrFtr, documentation=u'Move Source Location Container - End'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_HdrFtr, documentation=u'Move Destination Location Container - End'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_HdrFtr, documentation=u'Comment Anchor Range Start'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_HdrFtr, documentation=u'Move Destination Location Container - Start'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_HdrFtr, documentation=u'Comment Anchor Range End'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_HdrFtr, documentation=u'Custom XML Markup Move Source Start'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_HdrFtr, documentation=u'Custom XML Markup Insertion Start'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_HdrFtr, documentation=u'Custom XML Markup Insertion End'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_HdrFtr, documentation=u'Inserted Run Content'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_HdrFtr, documentation=u'Custom XML Markup Deletion Start'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_HdrFtr, documentation=u'Custom XML Markup Deletion End'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk'), CT_AltChunk, scope=CT_HdrFtr, documentation=u'Anchor for Imported External Content'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlBlock, scope=CT_HdrFtr, documentation=u'Block-Level Custom XML Element'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_HdrFtr, documentation=u'Custom XML Markup Move Source End'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtBlock, scope=CT_HdrFtr, documentation=u'Block-Level Structured Document Tag'))

CT_HdrFtr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), CT_P, scope=CT_HdrFtr, documentation=u'Paragraph'))
CT_HdrFtr._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_HdrFtr._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_HdrFtr._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._GroupModel_4, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._GroupModel_5, min_occurs=0L, max_occurs=None)
    )
CT_HdrFtr._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'p')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._GroupModel_3, min_occurs=0L, max_occurs=None)
    )
CT_HdrFtr._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_HdrFtr._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CT_HdrFtr._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_HdrFtr._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_HdrFtr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk')), min_occurs=0L, max_occurs=None)
    )
CT_HdrFtr._ContentModel = pyxb.binding.content.ParticleModel(CT_HdrFtr._GroupModel, min_occurs=1L, max_occurs=None)



CT_DocPartPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'behaviors'), CT_DocPartBehaviors, scope=CT_DocPartPr, documentation=u'Entry Insertion Behaviors'))

CT_DocPartPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), CT_DocPartName, scope=CT_DocPartPr, documentation=u'Entry Name'))

CT_DocPartPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'guid'), CT_Guid, scope=CT_DocPartPr, documentation=u'Entry ID'))

CT_DocPartPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'description'), CT_String, scope=CT_DocPartPr, documentation=u'Description for Entry'))

CT_DocPartPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'style'), CT_String, scope=CT_DocPartPr, documentation=u'Associated Paragraph Style Name'))

CT_DocPartPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'category'), CT_DocPartCategory, scope=CT_DocPartPr, documentation=u'Entry Categorization'))

CT_DocPartPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'types'), CT_DocPartTypes, scope=CT_DocPartPr, documentation=u'Entry Types'))
CT_DocPartPr._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_DocPartPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'name')), min_occurs=1L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DocPartPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'style')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DocPartPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'category')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DocPartPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'types')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DocPartPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'behaviors')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DocPartPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'description')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_DocPartPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'guid')), min_occurs=1, max_occurs=1)
    )
CT_DocPartPr._ContentModel = pyxb.binding.content.ParticleModel(CT_DocPartPr._GroupModel, min_occurs=1, max_occurs=None)



CT_SSubSupPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_SSubSupPr))

CT_SSubSupPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'alnScr'), CT_OnOff_, scope=CT_SSubSupPr, documentation=u'Align Scripts'))
CT_SSubSupPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SSubSupPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'alnScr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SSubSupPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_SSubSupPr._ContentModel = pyxb.binding.content.ParticleModel(CT_SSubSupPr._GroupModel, min_occurs=1, max_occurs=1)



CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), CT_Shd, scope=CT_ParaRPr, documentation=u'Run Shading'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fitText'), CT_FitText, scope=CT_ParaRPr, documentation=u'Manual Run Width'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rFonts'), CT_Fonts, scope=CT_ParaRPr, documentation=u'Run Fonts'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rtl'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Right To Left Text'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dstrike'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Double Strikethrough'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'oMath'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Office Open XML Math'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'emboss'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Embossing'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'em'), CT_Em, scope=CT_ParaRPr, documentation=u'Emphasis Mark'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'imprint'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Imprinting'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'iCs'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Complex Script Italics'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'position'), CT_SignedHpsMeasure, scope=CT_ParaRPr, documentation=u'Vertically Raised or Lowered Text'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noProof'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Do Not Check Spelling or Grammar'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'i'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Italics'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Use Document Grid Settings For Inter-Character Spacing'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rPrChange'), CT_ParaRPrChange, scope=CT_ParaRPr, documentation=u'Revision Information for Run Properties on the Paragraph Mark'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'vanish'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Hidden Text'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_TrackChange, scope=CT_ParaRPr, documentation=u'Inserted Paragraph'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'webHidden'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Web Hidden Text'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_TrackChange, scope=CT_ParaRPr, documentation=u'Deleted Paragraph'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bCs'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Complex Script Bold'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'color'), CT_Color, scope=CT_ParaRPr, documentation=u'Run Content Color'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_TrackChange, scope=CT_ParaRPr, documentation=u'Move Source Paragraph'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing'), CT_SignedTwipsMeasure, scope=CT_ParaRPr, documentation=u'Character Spacing Adjustment'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_TrackChange, scope=CT_ParaRPr, documentation=u'Move Destination Paragraph'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), CT_TextScale, scope=CT_ParaRPr, documentation=u'Expanded/Compressed Text'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'effect'), CT_TextEffect, scope=CT_ParaRPr, documentation=u'Animated Text Effect'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rStyle'), CT_String, scope=CT_ParaRPr, documentation=u'Referenced Character Style'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lang'), CT_Language, scope=CT_ParaRPr, documentation=u'Languages for Run Content'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'eastAsianLayout'), CT_EastAsianLayout, scope=CT_ParaRPr, documentation=u'East Asian Typography Settings'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'b'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Bold'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'smallCaps'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Small Caps'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'shadow'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Shadow'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'szCs'), CT_HpsMeasure, scope=CT_ParaRPr, documentation=u'Complex Script Font Size'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'outline'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Display Character Outline'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'highlight'), CT_Highlight, scope=CT_ParaRPr, documentation=u'Text Highlighting'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'u'), CT_Underline, scope=CT_ParaRPr, documentation=u'Underline'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sz'), CT_HpsMeasure, scope=CT_ParaRPr, documentation=u'Non-Complex Script Font Size'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'caps'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Display All Characters As Capital Letters'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'specVanish'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Paragraph Mark Is Always Hidden'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bdr'), CT_Border, scope=CT_ParaRPr, documentation=u'Text Border'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cs'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Use Complex Script Formatting on Run'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'strike'), CT_OnOff, scope=CT_ParaRPr, documentation=u'Single Strikethrough'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'kern'), CT_HpsMeasure, scope=CT_ParaRPr, documentation=u'Font Kerning'))

CT_ParaRPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'vertAlign'), CT_VerticalAlignRun, scope=CT_ParaRPr, documentation=u'Subscript/Superscript Text'))
CT_ParaRPr._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=0L, max_occurs=1)
    )
CT_ParaRPr._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rStyle')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rFonts')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'b')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bCs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'i')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'iCs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'caps')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'smallCaps')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'strike')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dstrike')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'outline')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shadow')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'emboss')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'imprint')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noProof')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vanish')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'webHidden')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'color')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'w')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'kern')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'position')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sz')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'szCs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'highlight')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'u')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'effect')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bdr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fitText')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vertAlign')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rtl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'em')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lang')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'eastAsianLayout')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'specVanish')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'oMath')), min_occurs=0L, max_occurs=1)
    )
CT_ParaRPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ParaRPr._GroupModel_, min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._GroupModel_2, min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rPrChange')), min_occurs=0L, max_occurs=1)
    )
CT_ParaRPr._ContentModel = pyxb.binding.content.ParticleModel(CT_ParaRPr._GroupModel, min_occurs=1, max_occurs=1)



CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_Row, documentation=u'Office Math Paragraph'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_Row))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tc'), CT_Tc, scope=CT_Row, documentation=u'Table Cell'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_Row, documentation=u'Move Source Location Container - Start'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_Row, documentation=u'Bookmark Start'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_Row, documentation=u'Move Source Location Container - End'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_Row, documentation=u'Custom XML Markup Move Source End'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_Row, documentation=u'Move Destination Location Container - Start'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_Row, documentation=u'Comment Anchor Range Start'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_Row, documentation=u'Comment Anchor Range End'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPrEx'), CT_TblPrEx, scope=CT_Row, documentation=u'Table-Level Property Exceptions'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_Row, documentation=u'Custom XML Markup Insertion Start'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_Row, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_Row, documentation=u'Custom XML Markup Insertion End'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_Row, documentation=u'Custom XML Markup Deletion Start'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_Row, documentation=u'Custom XML Markup Deletion End'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_Row, documentation=u'Custom XML Markup Move Source Start'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'trPr'), CT_TrPr, scope=CT_Row, documentation=u'Table Row Properties'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_Row, documentation=u'Move Destination Location Container - End'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlCell, scope=CT_Row, documentation=u'Cell-Level Custom XML Element'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_Row, documentation=u'Custom XML Markup Move Destination Location End'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtCell, scope=CT_Row, documentation=u'Cell-Level Structured Document Tag'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_Row, documentation=u'Inserted Run Content'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_Row, documentation=u'Bookmark End'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_Row, documentation=u'Deleted Run Content'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_Row, documentation=u'Proofing Error Anchor'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_Row, documentation=u'Move Source Run Content'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_Row, documentation=u'Range Permission Start'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_Row, documentation=u'Move Destination Run Content'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_Row, documentation=u'Range Permission End'))
CT_Row._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_Row._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_Row._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._GroupModel_3, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._GroupModel_4, min_occurs=0L, max_occurs=None)
    )
CT_Row._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tc')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Row._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CT_Row._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPrEx')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'trPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Row._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_Row._ContentModel = pyxb.binding.content.ParticleModel(CT_Row._GroupModel, min_occurs=1, max_occurs=1)



CT_SSubPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_SSubPr))
CT_SSubPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SSubPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_SSubPr._ContentModel = pyxb.binding.content.ParticleModel(CT_SSubPr._GroupModel, min_occurs=1, max_occurs=1)



CT_ParaRPrChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), CT_ParaRPrOriginal, scope=CT_ParaRPrChange, documentation=u'Previous Run Properties for the Paragraph Mark'))
CT_ParaRPrChange._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ParaRPrChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr')), min_occurs=1L, max_occurs=1)
    )
CT_ParaRPrChange._ContentModel = pyxb.binding.content.ParticleModel(CT_ParaRPrChange._GroupModel, min_occurs=1, max_occurs=1)



CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_FtnEdn, documentation=u'Comment Anchor Range Start'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_FtnEdn, documentation=u'Move Destination Location Container - End'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_FtnEdn, documentation=u'Comment Anchor Range End'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_FtnEdn, documentation=u'Custom XML Markup Insertion Start'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_FtnEdn, documentation=u'Custom XML Markup Insertion End'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_FtnEdn, documentation=u'Custom XML Markup Deletion Start'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_FtnEdn, documentation=u'Custom XML Markup Deletion End'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk'), CT_AltChunk, scope=CT_FtnEdn, documentation=u'Anchor for Imported External Content'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlBlock, scope=CT_FtnEdn, documentation=u'Block-Level Custom XML Element'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtBlock, scope=CT_FtnEdn, documentation=u'Block-Level Structured Document Tag'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_FtnEdn, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_FtnEdn, documentation=u'Custom XML Markup Move Source Start'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_FtnEdn, documentation=u'Custom XML Markup Move Destination Location End'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_FtnEdn, documentation=u'Inserted Run Content'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_FtnEdn, documentation=u'Deleted Run Content'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_FtnEdn, documentation=u'Proofing Error Anchor'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_FtnEdn, documentation=u'Move Destination Location Container - Start'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_FtnEdn, documentation=u'Move Source Run Content'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_FtnEdn, documentation=u'Range Permission Start'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_FtnEdn, documentation=u'Move Destination Run Content'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_FtnEdn, documentation=u'Range Permission End'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_FtnEdn, documentation=u'Custom XML Markup Move Source End'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), CT_Tbl, scope=CT_FtnEdn, documentation=u'Table'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_FtnEdn, documentation=u'Office Math Paragraph'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_FtnEdn, documentation=u'Bookmark Start'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), CT_P, scope=CT_FtnEdn, documentation=u'Paragraph'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_FtnEdn))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_FtnEdn, documentation=u'Bookmark End'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_FtnEdn, documentation=u'Move Source Location Container - Start'))

CT_FtnEdn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_FtnEdn, documentation=u'Move Source Location Container - End'))
CT_FtnEdn._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_FtnEdn._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_FtnEdn._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._GroupModel_5, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._GroupModel_6, min_occurs=0L, max_occurs=None)
    )
CT_FtnEdn._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'p')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._GroupModel_4, min_occurs=0L, max_occurs=None)
    )
CT_FtnEdn._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FtnEdn._GroupModel_3, min_occurs=0L, max_occurs=None)
    )
CT_FtnEdn._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FtnEdn._GroupModel_2, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_FtnEdn._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk')), min_occurs=0L, max_occurs=None)
    )
CT_FtnEdn._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FtnEdn._GroupModel_, min_occurs=1L, max_occurs=None)
    )
CT_FtnEdn._ContentModel = pyxb.binding.content.ParticleModel(CT_FtnEdn._GroupModel, min_occurs=1, max_occurs=1)



CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_RubyContent, documentation=u'Move Destination Location Container - End'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_RubyContent, documentation=u'Comment Anchor Range Start'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_RubyContent, documentation=u'Comment Anchor Range End'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_RubyContent, documentation=u'Custom XML Markup Insertion Start'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_RubyContent, documentation=u'Custom XML Markup Insertion End'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_RubyContent, documentation=u'Custom XML Markup Deletion End'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_RubyContent, documentation=u'Range Permission Start'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_RubyContent, documentation=u'Custom XML Markup Move Source Start'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_RubyContent, documentation=u'Custom XML Markup Move Destination Location End'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_RubyContent, documentation=u'Custom XML Markup Move Source End'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_RubyContent, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), CT_R_, scope=CT_RubyContent, documentation=u'Phonetic Guide Text Run'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_RubyContent, documentation=u'Deleted Run Content'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_RubyContent, documentation=u'Proofing Error Anchor'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_RubyContent, documentation=u'Move Source Run Content'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_RubyContent, documentation=u'Custom XML Markup Deletion Start'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_RubyContent, documentation=u'Move Destination Run Content'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_RubyContent, documentation=u'Range Permission End'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_RubyContent, documentation=u'Office Math Paragraph'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_RubyContent, documentation=u'Inserted Run Content'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_RubyContent, documentation=u'Bookmark Start'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_RubyContent))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_RubyContent, documentation=u'Bookmark End'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_RubyContent, documentation=u'Move Source Location Container - Start'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_RubyContent, documentation=u'Move Source Location Container - End'))

CT_RubyContent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_RubyContent, documentation=u'Move Destination Location Container - Start'))
CT_RubyContent._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_RubyContent._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_RubyContent._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._GroupModel_2, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._GroupModel_3, min_occurs=0L, max_occurs=None)
    )
CT_RubyContent._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_RubyContent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'r')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyContent._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_RubyContent._ContentModel = pyxb.binding.content.ParticleModel(CT_RubyContent._GroupModel, min_occurs=0L, max_occurs=None)



CT_GlossaryDocument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'docParts'), CT_DocParts, scope=CT_GlossaryDocument, documentation=u'List of Glossary Document Entries'))
CT_GlossaryDocument._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GlossaryDocument._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'background')), min_occurs=0L, max_occurs=1)
    )
CT_GlossaryDocument._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GlossaryDocument._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'docParts')), min_occurs=0L, max_occurs=1)
    )
CT_GlossaryDocument._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GlossaryDocument._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GlossaryDocument._GroupModel_2, min_occurs=1, max_occurs=1)
    )
CT_GlossaryDocument._ContentModel = pyxb.binding.content.ParticleModel(CT_GlossaryDocument._GroupModel, min_occurs=1, max_occurs=1)



CT_TblGridChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblGrid'), CT_TblGridBase, scope=CT_TblGridChange, documentation=u'Previous Table Grid'))
CT_TblGridChange._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblGridChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblGrid')), min_occurs=1, max_occurs=1)
    )
CT_TblGridChange._ContentModel = pyxb.binding.content.ParticleModel(CT_TblGridChange._GroupModel, min_occurs=1, max_occurs=1)



CT_NumPicBullet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pict'), CT_Picture, scope=CT_NumPicBullet, documentation=u'Picture Numbering Symbol Properties'))

CT_NumPicBullet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'drawing'), CT_Drawing, scope=CT_NumPicBullet))
CT_NumPicBullet._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_NumPicBullet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pict')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_NumPicBullet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'drawing')), min_occurs=1, max_occurs=1)
    )
CT_NumPicBullet._ContentModel = pyxb.binding.content.ParticleModel(CT_NumPicBullet._GroupModel, min_occurs=1, max_occurs=1)



CT_Num._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lvlOverride'), CT_NumLvl, scope=CT_Num, documentation=u'Numbering Level Definition Override'))

CT_Num._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'abstractNumId'), CT_DecimalNumber, scope=CT_Num, documentation=u'Abstract Numbering Definition Reference'))
CT_Num._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Num._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'abstractNumId')), min_occurs=1L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Num._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lvlOverride')), min_occurs=0L, max_occurs=9L)
    )
CT_Num._ContentModel = pyxb.binding.content.ParticleModel(CT_Num._GroupModel, min_occurs=1, max_occurs=1)



CT_FFDDList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'listEntry'), CT_String, scope=CT_FFDDList, documentation=u'Drop-Down List Entry'))

CT_FFDDList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'result'), CT_DecimalNumber, scope=CT_FFDDList, documentation=u'Drop-Down List Selection'))

CT_FFDDList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'default'), CT_DecimalNumber, scope=CT_FFDDList, documentation=u'Default Drop-Down List Item Index'))
CT_FFDDList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FFDDList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'result')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FFDDList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'default')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FFDDList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'listEntry')), min_occurs=0L, max_occurs=None)
    )
CT_FFDDList._ContentModel = pyxb.binding.content.ParticleModel(CT_FFDDList._GroupModel, min_occurs=1, max_occurs=1)



CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_SdtContentRow, documentation=u'Move Destination Run Content'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_SdtContentRow, documentation=u'Office Math Paragraph'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_SdtContentRow, documentation=u'Bookmark Start'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_SdtContentRow, documentation=u'Range Permission End'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_SdtContentRow))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_SdtContentRow, documentation=u'Bookmark End'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_SdtContentRow, documentation=u'Move Source Location Container - Start'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_SdtContentRow, documentation=u'Move Destination Location Container - Start'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_SdtContentRow, documentation=u'Custom XML Markup Move Destination Location End'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_SdtContentRow, documentation=u'Move Destination Location Container - End'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_SdtContentRow, documentation=u'Comment Anchor Range Start'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_SdtContentRow, documentation=u'Comment Anchor Range End'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tr'), CT_Row, scope=CT_SdtContentRow, documentation=u'Table Row'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_SdtContentRow, documentation=u'Custom XML Markup Insertion Start'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_SdtContentRow, documentation=u'Custom XML Markup Insertion End'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_SdtContentRow, documentation=u'Custom XML Markup Deletion Start'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_SdtContentRow, documentation=u'Move Source Location Container - End'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_SdtContentRow, documentation=u'Custom XML Markup Deletion End'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_SdtContentRow, documentation=u'Custom XML Markup Move Source Start'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_SdtContentRow, documentation=u'Custom XML Markup Move Source End'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_SdtContentRow, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlRow, scope=CT_SdtContentRow, documentation=u'Row-Level Custom XML Element'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtRow, scope=CT_SdtContentRow, documentation=u'Row-Level Structured Document Tag'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_SdtContentRow, documentation=u'Inserted Run Content'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_SdtContentRow, documentation=u'Deleted Run Content'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_SdtContentRow, documentation=u'Proofing Error Anchor'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_SdtContentRow, documentation=u'Move Source Run Content'))

CT_SdtContentRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_SdtContentRow, documentation=u'Range Permission Start'))
CT_SdtContentRow._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_SdtContentRow._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_SdtContentRow._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._GroupModel_2, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._GroupModel_3, min_occurs=0L, max_occurs=None)
    )
CT_SdtContentRow._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tr')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRow._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_SdtContentRow._ContentModel = pyxb.binding.content.ParticleModel(CT_SdtContentRow._GroupModel, min_occurs=0L, max_occurs=None)



CT_Styles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'style'), CT_Style, scope=CT_Styles, documentation=u'Style Definition'))

CT_Styles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'docDefaults'), CT_DocDefaults, scope=CT_Styles, documentation=u'Document Default Paragraph and Run Properties'))

CT_Styles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'latentStyles'), CT_LatentStyles, scope=CT_Styles, documentation=u'Latent Style Information'))
CT_Styles._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Styles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'docDefaults')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Styles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'latentStyles')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Styles._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'style')), min_occurs=0L, max_occurs=None)
    )
CT_Styles._ContentModel = pyxb.binding.content.ParticleModel(CT_Styles._GroupModel, min_occurs=1, max_occurs=1)



CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'emboss'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Embossing'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'imprint'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Imprinting'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'szCs'), CT_HpsMeasure, scope=CT_ParaRPrOriginal, documentation=u'Complex Script Font Size'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noProof'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Do Not Check Spelling or Grammar'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rFonts'), CT_Fonts, scope=CT_ParaRPrOriginal, documentation=u'Run Fonts'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Use Document Grid Settings For Inter-Character Spacing'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dstrike'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Double Strikethrough'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'specVanish'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Paragraph Mark Is Always Hidden'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_TrackChange, scope=CT_ParaRPrOriginal, documentation=u'Inserted Paragraph'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'em'), CT_Em, scope=CT_ParaRPrOriginal, documentation=u'Emphasis Mark'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'oMath'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Office Open XML Math'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_TrackChange, scope=CT_ParaRPrOriginal, documentation=u'Deleted Paragraph'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'b'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Bold'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'color'), CT_Color, scope=CT_ParaRPrOriginal, documentation=u'Run Content Color'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_TrackChange, scope=CT_ParaRPrOriginal, documentation=u'Move Source Paragraph'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing'), CT_SignedTwipsMeasure, scope=CT_ParaRPrOriginal, documentation=u'Character Spacing Adjustment'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_TrackChange, scope=CT_ParaRPrOriginal, documentation=u'Move Destination Paragraph'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), CT_TextScale, scope=CT_ParaRPrOriginal, documentation=u'Expanded/Compressed Text'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'effect'), CT_TextEffect, scope=CT_ParaRPrOriginal, documentation=u'Animated Text Effect'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rStyle'), CT_String, scope=CT_ParaRPrOriginal, documentation=u'Referenced Character Style'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'smallCaps'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Small Caps'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lang'), CT_Language, scope=CT_ParaRPrOriginal, documentation=u'Languages for Run Content'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'position'), CT_SignedHpsMeasure, scope=CT_ParaRPrOriginal, documentation=u'Vertically Raised or Lowered Text'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'vertAlign'), CT_VerticalAlignRun, scope=CT_ParaRPrOriginal, documentation=u'Subscript/Superscript Text'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sz'), CT_HpsMeasure, scope=CT_ParaRPrOriginal, documentation=u'Non-Complex Script Font Size'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bCs'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Complex Script Bold'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'webHidden'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Web Hidden Text'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'shadow'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Shadow'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'u'), CT_Underline, scope=CT_ParaRPrOriginal, documentation=u'Underline'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'eastAsianLayout'), CT_EastAsianLayout, scope=CT_ParaRPrOriginal, documentation=u'East Asian Typography Settings'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'caps'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Display All Characters As Capital Letters'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'i'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Italics'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cs'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Use Complex Script Formatting on Run'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bdr'), CT_Border, scope=CT_ParaRPrOriginal, documentation=u'Text Border'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'vanish'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Hidden Text'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), CT_Shd, scope=CT_ParaRPrOriginal, documentation=u'Run Shading'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fitText'), CT_FitText, scope=CT_ParaRPrOriginal, documentation=u'Manual Run Width'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'outline'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Display Character Outline'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'strike'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Single Strikethrough'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'highlight'), CT_Highlight, scope=CT_ParaRPrOriginal, documentation=u'Text Highlighting'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rtl'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Right To Left Text'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'iCs'), CT_OnOff, scope=CT_ParaRPrOriginal, documentation=u'Complex Script Italics'))

CT_ParaRPrOriginal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'kern'), CT_HpsMeasure, scope=CT_ParaRPrOriginal, documentation=u'Font Kerning'))
CT_ParaRPrOriginal._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=0L, max_occurs=1)
    )
CT_ParaRPrOriginal._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rStyle')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rFonts')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'b')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bCs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'i')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'iCs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'caps')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'smallCaps')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'strike')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dstrike')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'outline')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shadow')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'emboss')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'imprint')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noProof')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vanish')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'webHidden')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'color')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'w')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'kern')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'position')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sz')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'szCs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'highlight')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'u')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'effect')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bdr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fitText')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'vertAlign')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rtl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'em')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lang')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'eastAsianLayout')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'specVanish')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'oMath')), min_occurs=0L, max_occurs=1)
    )
CT_ParaRPrOriginal._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._GroupModel_, min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CT_ParaRPrOriginal._ContentModel = pyxb.binding.content.ParticleModel(CT_ParaRPrOriginal._GroupModel, min_occurs=1, max_occurs=1)



CT_Ruby._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rubyBase'), CT_RubyContent, scope=CT_Ruby, documentation=u'Phonetic Guide Base Text'))

CT_Ruby._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rubyPr'), CT_RubyPr, scope=CT_Ruby, documentation=u'Phonetic Guide Properties'))

CT_Ruby._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rt'), CT_RubyContent, scope=CT_Ruby, documentation=u'Phonetic Guide Text'))
CT_Ruby._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Ruby._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rubyPr')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Ruby._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Ruby._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rubyBase')), min_occurs=1, max_occurs=1)
    )
CT_Ruby._ContentModel = pyxb.binding.content.ParticleModel(CT_Ruby._GroupModel, min_occurs=1, max_occurs=1)



CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_SdtContentCell, documentation=u'Custom XML Markup Insertion End'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_SdtContentCell, documentation=u'Custom XML Markup Deletion End'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_SdtContentCell, documentation=u'Custom XML Markup Deletion Start'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_SdtContentCell, documentation=u'Custom XML Markup Move Source Start'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tc'), CT_Tc, scope=CT_SdtContentCell, documentation=u'Table Cell'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlCell, scope=CT_SdtContentCell, documentation=u'Cell-Level Custom XML Element'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_SdtContentCell, documentation=u'Custom XML Markup Move Destination Location End'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_SdtContentCell, documentation=u'Inserted Run Content'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_SdtContentCell, documentation=u'Deleted Run Content'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_SdtContentCell, documentation=u'Proofing Error Anchor'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_SdtContentCell, documentation=u'Move Source Run Content'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_SdtContentCell, documentation=u'Range Permission Start'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_SdtContentCell, documentation=u'Move Destination Run Content'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_SdtContentCell, documentation=u'Range Permission End'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_SdtContentCell, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_SdtContentCell, documentation=u'Office Math Paragraph'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtCell, scope=CT_SdtContentCell, documentation=u'Cell-Level Structured Document Tag'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_SdtContentCell))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_SdtContentCell, documentation=u'Bookmark End'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_SdtContentCell, documentation=u'Bookmark Start'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_SdtContentCell, documentation=u'Move Source Location Container - Start'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_SdtContentCell, documentation=u'Move Source Location Container - End'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_SdtContentCell, documentation=u'Move Destination Location Container - Start'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_SdtContentCell, documentation=u'Custom XML Markup Move Source End'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_SdtContentCell, documentation=u'Move Destination Location Container - End'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_SdtContentCell, documentation=u'Comment Anchor Range Start'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_SdtContentCell, documentation=u'Comment Anchor Range End'))

CT_SdtContentCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_SdtContentCell, documentation=u'Custom XML Markup Insertion Start'))
CT_SdtContentCell._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_SdtContentCell._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_SdtContentCell._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._GroupModel_2, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._GroupModel_3, min_occurs=0L, max_occurs=None)
    )
CT_SdtContentCell._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tc')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentCell._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_SdtContentCell._ContentModel = pyxb.binding.content.ParticleModel(CT_SdtContentCell._GroupModel, min_occurs=0L, max_occurs=None)



CT_OMathParaPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'jc'), CT_OMathJc, scope=CT_OMathParaPr, documentation=u'Justification'))
CT_OMathParaPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OMathParaPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'jc')), min_occurs=0L, max_occurs=1)
    )
CT_OMathParaPr._ContentModel = pyxb.binding.content.ParticleModel(CT_OMathParaPr._GroupModel, min_occurs=1, max_occurs=1)



CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_SdtContentBlock, documentation=u'Office Math Paragraph'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_SdtContentBlock, documentation=u'Custom XML Markup Insertion End'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtBlock, scope=CT_SdtContentBlock, documentation=u'Block-Level Structured Document Tag'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_SdtContentBlock, documentation=u'Custom XML Markup Deletion End'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_SdtContentBlock, documentation=u'Custom XML Markup Move Source Start'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_SdtContentBlock, documentation=u'Custom XML Markup Move Source End'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_SdtContentBlock, documentation=u'Move Source Run Content'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_SdtContentBlock, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_SdtContentBlock, documentation=u'Custom XML Markup Move Destination Location End'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_SdtContentBlock, documentation=u'Inserted Run Content'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_SdtContentBlock, documentation=u'Deleted Run Content'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_SdtContentBlock, documentation=u'Proofing Error Anchor'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_SdtContentBlock, documentation=u'Custom XML Markup Deletion Start'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_SdtContentBlock, documentation=u'Move Destination Run Content'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_SdtContentBlock, documentation=u'Range Permission End'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_SdtContentBlock, documentation=u'Range Permission Start'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_SdtContentBlock, documentation=u'Bookmark Start'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_SdtContentBlock))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_SdtContentBlock, documentation=u'Bookmark End'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_SdtContentBlock, documentation=u'Move Source Location Container - Start'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), CT_P, scope=CT_SdtContentBlock, documentation=u'Paragraph'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_SdtContentBlock, documentation=u'Custom XML Markup Insertion Start'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_SdtContentBlock, documentation=u'Move Source Location Container - End'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_SdtContentBlock, documentation=u'Move Destination Location Container - Start'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_SdtContentBlock, documentation=u'Move Destination Location Container - End'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlBlock, scope=CT_SdtContentBlock, documentation=u'Block-Level Custom XML Element'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_SdtContentBlock, documentation=u'Comment Anchor Range Start'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), CT_Tbl, scope=CT_SdtContentBlock, documentation=u'Table'))

CT_SdtContentBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_SdtContentBlock, documentation=u'Comment Anchor Range End'))
CT_SdtContentBlock._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_SdtContentBlock._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_SdtContentBlock._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._GroupModel_2, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._GroupModel_3, min_occurs=0L, max_occurs=None)
    )
CT_SdtContentBlock._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'p')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SdtContentBlock._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_SdtContentBlock._ContentModel = pyxb.binding.content.ParticleModel(CT_SdtContentBlock._GroupModel, min_occurs=0L, max_occurs=None)



CT_DocParts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'docPart'), CT_DocPart, scope=CT_DocParts, documentation=u'Glossary Document Entry'))
CT_DocParts._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_DocParts._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'docPart')), min_occurs=1L, max_occurs=None)
    )
CT_DocParts._ContentModel = pyxb.binding.content.ParticleModel(CT_DocParts._GroupModel, min_occurs=1, max_occurs=1)



CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dir'), CT_DirContentRun, scope=CT_SdtContentRun, documentation=u'Bidirectional Embedding Level'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_SdtContentRun, documentation=u'Bookmark End'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink'), CT_Hyperlink, scope=CT_SdtContentRun, documentation=u'Hyperlink'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_SdtContentRun, documentation=u'Move Source Location Container - Start'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_SdtContentRun))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc'), CT_Rel, scope=CT_SdtContentRun, documentation=u'Anchor for Subdocument Location'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_SdtContentRun, documentation=u'Custom XML Markup Move Source End'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_SdtContentRun, documentation=u'Office Math Paragraph'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_SdtContentRun, documentation=u'Move Destination Location Container - Start'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlRun, scope=CT_SdtContentRun, documentation=u'Inline-Level Custom XML Element'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_SdtContentRun, documentation=u'Comment Anchor Range Start'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_SdtContentRun, documentation=u'Comment Anchor Range End'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_SdtContentRun, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_SdtContentRun, documentation=u'Custom XML Markup Insertion End'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_SdtContentRun, documentation=u'Custom XML Markup Deletion Start'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag'), CT_SmartTagRun, scope=CT_SdtContentRun, documentation=u'Inline-Level Smart Tag'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_SdtContentRun, documentation=u'Custom XML Markup Move Source Start'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_SdtContentRun, documentation=u'Move Destination Location Container - End'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo'), CT_BdoContentRun, scope=CT_SdtContentRun, documentation=u'Bidirectional Override'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_SdtContentRun, documentation=u'Custom XML Markup Deletion End'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'r'), CT_R_, scope=CT_SdtContentRun, documentation=u'Text Run'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_SdtContentRun, documentation=u'Custom XML Markup Move Destination Location End'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_SdtContentRun, documentation=u'Inserted Run Content'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_SdtContentRun, documentation=u'Bookmark Start'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtRun, scope=CT_SdtContentRun, documentation=u'Inline-Level Structured Document Tag'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple'), CT_SimpleField, scope=CT_SdtContentRun, documentation=u'Simple Field'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_SdtContentRun, documentation=u'Move Source Location Container - End'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_SdtContentRun, documentation=u'Deleted Run Content'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_SdtContentRun, documentation=u'Proofing Error Anchor'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_SdtContentRun, documentation=u'Move Source Run Content'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_SdtContentRun, documentation=u'Range Permission Start'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_SdtContentRun, documentation=u'Move Destination Run Content'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_SdtContentRun, documentation=u'Range Permission End'))

CT_SdtContentRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_SdtContentRun, documentation=u'Custom XML Markup Insertion Start'))
CT_SdtContentRun._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_SdtContentRun._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_SdtContentRun._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._GroupModel_3, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._GroupModel_4, min_occurs=0L, max_occurs=None)
    )
CT_SdtContentRun._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'smartTag')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dir')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bdo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'r')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._GroupModel_2, min_occurs=0L, max_occurs=None)
    )
CT_SdtContentRun._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._GroupModel_, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fldSimple')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hyperlink')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtContentRun._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'subDoc')), min_occurs=1, max_occurs=1)
    )
CT_SdtContentRun._ContentModel = pyxb.binding.content.ParticleModel(CT_SdtContentRun._GroupModel, min_occurs=0L, max_occurs=None)



CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl'), CT_Tbl, scope=CT_Comment, documentation=u'Table'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath'), CT_OMath, scope=CT_Comment))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd'), CT_MarkupRange, scope=CT_Comment, documentation=u'Bookmark End'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart'), CT_MoveBookmark, scope=CT_Comment, documentation=u'Move Source Location Container - Start'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart'), CT_Bookmark, scope=CT_Comment, documentation=u'Bookmark Start'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd'), CT_MarkupRange, scope=CT_Comment, documentation=u'Move Source Location Container - End'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart'), CT_MoveBookmark, scope=CT_Comment, documentation=u'Move Destination Location Container - Start'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd'), CT_MarkupRange, scope=CT_Comment, documentation=u'Move Destination Location Container - End'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart'), CT_MarkupRange, scope=CT_Comment, documentation=u'Comment Anchor Range Start'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd'), CT_MarkupRange, scope=CT_Comment, documentation=u'Comment Anchor Range End'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart'), CT_TrackChange, scope=CT_Comment, documentation=u'Custom XML Markup Insertion Start'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd'), CT_Markup, scope=CT_Comment, documentation=u'Custom XML Markup Insertion End'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart'), CT_TrackChange, scope=CT_Comment, documentation=u'Custom XML Markup Deletion Start'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt'), CT_SdtBlock, scope=CT_Comment, documentation=u'Block-Level Structured Document Tag'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk'), CT_AltChunk, scope=CT_Comment, documentation=u'Anchor for Imported External Content'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart'), CT_TrackChange, scope=CT_Comment, documentation=u'Custom XML Markup Move Source Start'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_RunTrackChange, scope=CT_Comment, documentation=u'Inserted Run Content'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart'), CT_TrackChange, scope=CT_Comment, documentation=u'Custom XML Markup Move Destination Location Start'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd'), CT_Markup, scope=CT_Comment, documentation=u'Custom XML Markup Move Source End'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara'), CT_OMathPara, scope=CT_Comment, documentation=u'Office Math Paragraph'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd'), CT_Markup, scope=CT_Comment, documentation=u'Custom XML Markup Move Destination Location End'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml'), CT_CustomXmlBlock, scope=CT_Comment, documentation=u'Block-Level Custom XML Element'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd'), CT_Markup, scope=CT_Comment, documentation=u'Custom XML Markup Deletion End'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'p'), CT_P, scope=CT_Comment, documentation=u'Paragraph'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'del'), CT_RunTrackChange, scope=CT_Comment, documentation=u'Deleted Run Content'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr'), CT_ProofErr, scope=CT_Comment, documentation=u'Proofing Error Anchor'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom'), CT_RunTrackChange, scope=CT_Comment, documentation=u'Move Source Run Content'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart'), CT_PermStart, scope=CT_Comment, documentation=u'Range Permission Start'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo'), CT_RunTrackChange, scope=CT_Comment, documentation=u'Move Destination Run Content'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd'), CT_Perm, scope=CT_Comment, documentation=u'Range Permission End'))
CT_Comment._GroupModel_5 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bookmarkEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveToRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'commentRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlInsRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlDelRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveFromRangeEnd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeStart')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXmlMoveToRangeEnd')), min_occurs=1, max_occurs=1)
    )
CT_Comment._GroupModel_6 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMathPara')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'oMath')), min_occurs=1, max_occurs=1)
    )
CT_Comment._GroupModel_4 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'proofErr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'permEnd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._GroupModel_5, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'del')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveFrom')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'moveTo')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._GroupModel_6, min_occurs=0L, max_occurs=None)
    )
CT_Comment._GroupModel_3 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'customXml')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sdt')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'p')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tbl')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Comment._GroupModel_4, min_occurs=0L, max_occurs=None)
    )
CT_Comment._GroupModel_2 = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Comment._GroupModel_3, min_occurs=0L, max_occurs=None)
    )
CT_Comment._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Comment._GroupModel_2, min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'altChunk')), min_occurs=0L, max_occurs=None)
    )
CT_Comment._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Comment._GroupModel_, min_occurs=0L, max_occurs=None)
    )
CT_Comment._ContentModel = pyxb.binding.content.ParticleModel(CT_Comment._GroupModel, min_occurs=1, max_occurs=1)



CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'personalReply'), CT_OnOff, scope=CT_Style, documentation=u'E-Mail Message Reply Style'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPr'), CT_TblPrBase, scope=CT_Style, documentation=u'Style Table Properties'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr'), CT_PPrGeneral, scope=CT_Style, documentation=u'Style Paragraph Properties'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), CT_RPr, scope=CT_Style, documentation=u'Run Properties'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblStylePr'), CT_TblStylePr, scope=CT_Style, documentation=u'Style Conditional Table Formatting Properties'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'trPr'), CT_TrPr, scope=CT_Style, documentation=u'Style Table Row Properties'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tcPr'), CT_TcPr, scope=CT_Style, documentation=u'Style Table Cell Properties'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), CT_String, scope=CT_Style, documentation=u'Primary Style Name'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'aliases'), CT_String, scope=CT_Style, documentation=u'Alternate Style Names'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'next'), CT_String, scope=CT_Style, documentation=u'Style For Next Paragraph'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'link'), CT_String, scope=CT_Style, documentation=u'Linked Style Reference'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'basedOn'), CT_String, scope=CT_Style, documentation=u'Parent Style ID'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'autoRedefine'), CT_OnOff, scope=CT_Style, documentation=u'Automatically Merge User Formatting Into Style Definition'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hidden'), CT_OnOff, scope=CT_Style, documentation=u'Hide Style From User Interface'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'uiPriority'), CT_DecimalNumber, scope=CT_Style, documentation=u'Optional User Interface Sorting Order'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'personalCompose'), CT_OnOff, scope=CT_Style, documentation=u'E-Mail Message Composition Style'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'semiHidden'), CT_OnOff, scope=CT_Style, documentation=u'Hide Style From Main User Interface'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'unhideWhenUsed'), CT_OnOff, scope=CT_Style, documentation=u'Remove Semi-Hidden Property When Style Is Used'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rsid'), CT_LongHexNumber, scope=CT_Style, documentation=u'Revision Identifier for Style Definition'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'qFormat'), CT_OnOff, scope=CT_Style, documentation=u'Primary Style'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'locked'), CT_OnOff, scope=CT_Style, documentation=u'Style Cannot Be Applied'))

CT_Style._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'personal'), CT_OnOff, scope=CT_Style, documentation=u'E-Mail Message Text Style'))
CT_Style._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'name')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'aliases')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'basedOn')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'next')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'link')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'autoRedefine')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hidden')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'uiPriority')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'semiHidden')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'unhideWhenUsed')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'qFormat')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'locked')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'personal')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'personalCompose')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'personalReply')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rsid')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'trPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tcPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Style._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblStylePr')), min_occurs=0L, max_occurs=None)
    )
CT_Style._ContentModel = pyxb.binding.content.ParticleModel(CT_Style._GroupModel, min_occurs=1, max_occurs=1)



CT_MCPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'mcJc'), CT_XAlign, scope=CT_MCPr, documentation=u'Matrix Column Justification'))

CT_MCPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'count'), CT_Integer255, scope=CT_MCPr, documentation=u'Matrix Column Count'))
CT_MCPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MCPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'count')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MCPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'mcJc')), min_occurs=0L, max_occurs=1)
    )
CT_MCPr._ContentModel = pyxb.binding.content.ParticleModel(CT_MCPr._GroupModel, min_occurs=1, max_occurs=1)



CT_OMathArgPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'argSz'), CT_Integer2, scope=CT_OMathArgPr, documentation=u'Argument Size'))
CT_OMathArgPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OMathArgPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'argSz')), min_occurs=0L, max_occurs=1)
    )
CT_OMathArgPr._ContentModel = pyxb.binding.content.ParticleModel(CT_OMathArgPr._GroupModel, min_occurs=1, max_occurs=1)



CT_NumPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ins'), CT_TrackChange, scope=CT_NumPr, documentation=u'Inserted Numbering Properties'))

CT_NumPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ilvl'), CT_DecimalNumber, scope=CT_NumPr, documentation=u'Numbering Level Reference'))

CT_NumPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'numId'), CT_DecimalNumber, scope=CT_NumPr, documentation=u'Numbering Definition Instance Reference'))

CT_NumPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'numberingChange'), CT_TrackChangeNumbering, scope=CT_NumPr, documentation=u'Previous Paragraph Numbering Properties'))
CT_NumPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NumPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ilvl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_NumPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numId')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_NumPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numberingChange')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_NumPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ins')), min_occurs=0L, max_occurs=1)
    )
CT_NumPr._ContentModel = pyxb.binding.content.ParticleModel(CT_NumPr._GroupModel, min_occurs=1, max_occurs=1)



CT_TblPrChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPr'), CT_TblPrBase, scope=CT_TblPrChange, documentation=u'Previous Table Properties'))
CT_TblPrChange._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblPrChange._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPr')), min_occurs=1, max_occurs=1)
    )
CT_TblPrChange._ContentModel = pyxb.binding.content.ParticleModel(CT_TblPrChange._GroupModel, min_occurs=1, max_occurs=1)



CT_Headers._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'header'), CT_String, scope=CT_Headers, documentation=u'Header Cell Reference'))
CT_Headers._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Headers._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'header')), min_occurs=1, max_occurs=1)
    )
CT_Headers._ContentModel = pyxb.binding.content.ParticleModel(CT_Headers._GroupModel, min_occurs=0L, max_occurs=None)



CT_RubyPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hps'), CT_HpsMeasure, scope=CT_RubyPr, documentation=u'Phonetic Guide Text Font Size'))

CT_RubyPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hpsRaise'), CT_HpsMeasure, scope=CT_RubyPr, documentation=u'Distance Between Phonetic Guide Text and Phonetic Guide Base Text'))

CT_RubyPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'hpsBaseText'), CT_HpsMeasure, scope=CT_RubyPr, documentation=u'Phonetic Guide Base Text Font Size'))

CT_RubyPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rubyAlign'), CT_RubyAlign, scope=CT_RubyPr, documentation=u'Phonetic Guide Text Alignment'))

CT_RubyPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lid'), CT_Lang, scope=CT_RubyPr, documentation=u'Language ID for Phonetic Guide'))

CT_RubyPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dirty'), CT_OnOff, scope=CT_RubyPr, documentation=u'Invalidated Field Cache'))
CT_RubyPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RubyPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rubyAlign')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hps')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hpsRaise')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'hpsBaseText')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lid')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RubyPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dirty')), min_occurs=0L, max_occurs=1)
    )
CT_RubyPr._ContentModel = pyxb.binding.content.ParticleModel(CT_RubyPr._GroupModel, min_occurs=1, max_occurs=1)



CT_PPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'sectPr'), CT_SectPr, scope=CT_PPr, documentation=u'Section Properties'))

CT_PPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr'), CT_ParaRPr, scope=CT_PPr, documentation=u'Run Properties for the Paragraph Mark'))

CT_PPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'pPrChange'), CT_PPrChange, scope=CT_PPr, documentation=u'Revision Information for Paragraph Properties'))
CT_PPr._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pStyle')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'keepNext')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'keepLines')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pageBreakBefore')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'framePr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'widowControl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressLineNumbers')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pBdr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tabs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressAutoHyphens')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'kinsoku')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'wordWrap')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'overflowPunct')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'topLinePunct')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'autoSpaceDE')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'autoSpaceDN')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bidi')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'adjustRightInd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'snapToGrid')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'spacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ind')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'contextualSpacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'mirrorIndents')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressOverlap')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'jc')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'textDirection')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'textAlignment')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'textboxTightWrap')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'outlineLvl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'divId')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cnfStyle')), min_occurs=0L, max_occurs=1L)
    )
CT_PPr._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'rPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'sectPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pPrChange')), min_occurs=0L, max_occurs=1)
    )
CT_PPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PPr._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PPr._GroupModel_2, min_occurs=1, max_occurs=1)
    )
CT_PPr._ContentModel = pyxb.binding.content.ParticleModel(CT_PPr._GroupModel, min_occurs=1, max_occurs=1)



CT_MR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'e'), CT_OMathArg, scope=CT_MR, documentation=u'Element'))
CT_MR._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MR._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'e')), min_occurs=1, max_occurs=None)
    )
CT_MR._ContentModel = pyxb.binding.content.ParticleModel(CT_MR._GroupModel, min_occurs=1, max_occurs=1)



CT_TblPrExBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLook'), CT_TblLook, scope=CT_TblPrExBase, documentation=u'Table Style Conditional Formatting Settings Exception'))

CT_TblPrExBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellSpacing'), CT_TblWidth, scope=CT_TblPrExBase, documentation=u'Table Cell Spacing Exception'))

CT_TblPrExBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblInd'), CT_TblWidth, scope=CT_TblPrExBase, documentation=u'Table Indent from Leading Margin Exception'))

CT_TblPrExBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellMar'), CT_TblCellMar, scope=CT_TblPrExBase, documentation=u'Table Cell Margin Exceptions'))

CT_TblPrExBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'shd'), CT_Shd, scope=CT_TblPrExBase, documentation=u'Table Shading Exception'))

CT_TblPrExBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblBorders'), CT_TblBorders, scope=CT_TblPrExBase, documentation=u'Table Borders Exceptions'))

CT_TblPrExBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblW'), CT_TblWidth, scope=CT_TblPrExBase, documentation=u'Preferred Table Width Exception'))

CT_TblPrExBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLayout'), CT_TblLayoutType, scope=CT_TblPrExBase, documentation=u'Table Layout Exception'))

CT_TblPrExBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'jc'), CT_JcTable, scope=CT_TblPrExBase, documentation=u'Table Alignment Exception'))
CT_TblPrExBase._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblPrExBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblW')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrExBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'jc')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrExBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellSpacing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrExBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblInd')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrExBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblBorders')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrExBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shd')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrExBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLayout')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrExBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellMar')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrExBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLook')), min_occurs=0L, max_occurs=1L)
    )
CT_TblPrExBase._ContentModel = pyxb.binding.content.ParticleModel(CT_TblPrExBase._GroupModel, min_occurs=1, max_occurs=1)



CT_OdsoFieldMapData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'mappedName'), CT_String, scope=CT_OdsoFieldMapData, documentation=u'Predefined Merge Field Name'))

CT_OdsoFieldMapData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'column'), CT_DecimalNumber, scope=CT_OdsoFieldMapData, documentation=u'Index of Column Being Mapped'))

CT_OdsoFieldMapData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'name'), CT_String, scope=CT_OdsoFieldMapData, documentation=u'Data Source Name for Column'))

CT_OdsoFieldMapData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lid'), CT_Lang, scope=CT_OdsoFieldMapData, documentation=u'Merge Field Name Language ID'))

CT_OdsoFieldMapData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dynamicAddress'), CT_OnOff, scope=CT_OdsoFieldMapData, documentation=u'Use Country-Based Address Field Ordering'))

CT_OdsoFieldMapData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), CT_MailMergeOdsoFMDFieldType, scope=CT_OdsoFieldMapData, documentation=u'Merge Field Mapping'))
CT_OdsoFieldMapData._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OdsoFieldMapData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'type')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OdsoFieldMapData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'name')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OdsoFieldMapData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'mappedName')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OdsoFieldMapData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'column')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OdsoFieldMapData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lid')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_OdsoFieldMapData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dynamicAddress')), min_occurs=0L, max_occurs=1)
    )
CT_OdsoFieldMapData._ContentModel = pyxb.binding.content.ParticleModel(CT_OdsoFieldMapData._GroupModel, min_occurs=1, max_occurs=1)



CT_FramesetSplitbar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'flatBorders'), CT_OnOff, scope=CT_FramesetSplitbar, documentation=u'Frameset Splitter Border Style'))

CT_FramesetSplitbar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'w'), CT_TwipsMeasure_, scope=CT_FramesetSplitbar, documentation=u'Frameset Splitter Width'))

CT_FramesetSplitbar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noBorder'), CT_OnOff, scope=CT_FramesetSplitbar, documentation=u'Do Not Display Frameset Splitters'))

CT_FramesetSplitbar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'color'), CT_Color, scope=CT_FramesetSplitbar, documentation=u'Frameset Splitter Color'))
CT_FramesetSplitbar._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FramesetSplitbar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'w')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FramesetSplitbar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'color')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FramesetSplitbar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noBorder')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FramesetSplitbar._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'flatBorders')), min_occurs=0L, max_occurs=1)
    )
CT_FramesetSplitbar._ContentModel = pyxb.binding.content.ParticleModel(CT_FramesetSplitbar._GroupModel, min_occurs=1, max_occurs=1)



CT_MCS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'mc'), CT_MC, scope=CT_MCS, documentation=u'Matrix Column'))
CT_MCS._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MCS._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'mc')), min_occurs=1, max_occurs=None)
    )
CT_MCS._ContentModel = pyxb.binding.content.ParticleModel(CT_MCS._GroupModel, min_occurs=1, max_occurs=1)



CT_RPR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'nor'), CT_OnOff_, scope=CT_RPR, documentation=u'Normal Text'))

CT_RPR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'lit'), CT_OnOff_, scope=CT_RPR, documentation=u'Literal'))

CT_RPR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'scr'), CT_Script, scope=CT_RPR, documentation=u'Script'))

CT_RPR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'aln'), CT_OnOff_, scope=CT_RPR, documentation=u'Align'))

CT_RPR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'sty'), CT_Style_, scope=CT_RPR, documentation=u'style'))

CT_RPR._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'brk'), CT_ManualBreak, scope=CT_RPR, documentation=u'Break'))
CT_RPR._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RPR._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'scr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPR._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'sty')), min_occurs=0L, max_occurs=1)
    )
CT_RPR._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RPR._GroupModel_3, min_occurs=1, max_occurs=1)
    )
CT_RPR._GroupModel_ = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_RPR._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'nor')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPR._GroupModel_2, min_occurs=1, max_occurs=1)
    )
CT_RPR._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RPR._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'lit')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPR._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPR._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'brk')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RPR._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'aln')), min_occurs=0L, max_occurs=1)
    )
CT_RPR._ContentModel = pyxb.binding.content.ParticleModel(CT_RPR._GroupModel, min_occurs=1, max_occurs=1)



CT_TblPrEx._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPrExChange'), CT_TblPrExChange, scope=CT_TblPrEx, documentation=u'Revision Information for Table-Level Property Exceptions'))
CT_TblPrEx._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblPrEx._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblW')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrEx._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'jc')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrEx._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellSpacing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrEx._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblInd')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrEx._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblBorders')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrEx._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shd')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrEx._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLayout')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrEx._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellMar')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPrEx._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLook')), min_occurs=0L, max_occurs=1L)
    )
CT_TblPrEx._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblPrEx._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPrExChange')), min_occurs=0L, max_occurs=1)
    )
CT_TblPrEx._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblPrEx._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblPrEx._GroupModel_2, min_occurs=1, max_occurs=1)
    )
CT_TblPrEx._ContentModel = pyxb.binding.content.ParticleModel(CT_TblPrEx._GroupModel, min_occurs=1, max_occurs=1)



CT_SdtDate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'calendar'), CT_CalendarType, scope=CT_SdtDate, documentation=u'Date Picker Calendar Type'))

CT_SdtDate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dateFormat'), CT_String, scope=CT_SdtDate, documentation=u'Date Display Mask'))

CT_SdtDate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'storeMappedDataAs'), CT_SdtDateMappingType, scope=CT_SdtDate, documentation=u'Custom XML Data Date Storage Format'))

CT_SdtDate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lid'), CT_Lang, scope=CT_SdtDate, documentation=u'Date Picker Language ID'))
CT_SdtDate._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SdtDate._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dateFormat')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtDate._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lid')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtDate._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'storeMappedDataAs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_SdtDate._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'calendar')), min_occurs=0L, max_occurs=1)
    )
CT_SdtDate._ContentModel = pyxb.binding.content.ParticleModel(CT_SdtDate._GroupModel, min_occurs=1, max_occurs=1)



CT_PBdr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'right'), CT_Border, scope=CT_PBdr, documentation=u'Right Paragraph Border'))

CT_PBdr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'between'), CT_Border, scope=CT_PBdr, documentation=u'Paragraph Border Between Identical Paragraphs'))

CT_PBdr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom'), CT_Border, scope=CT_PBdr, documentation=u'Paragraph Border Below Identical Paragraphs'))

CT_PBdr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'bar'), CT_Border, scope=CT_PBdr, documentation=u'Paragraph Border Between Facing Pages'))

CT_PBdr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'top'), CT_Border, scope=CT_PBdr, documentation=u'Paragraph Border Above Identical Paragraphs'))

CT_PBdr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'left'), CT_Border, scope=CT_PBdr, documentation=u'Left Paragraph Border'))
CT_PBdr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PBdr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'top')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PBdr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'left')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PBdr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bottom')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PBdr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'right')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PBdr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'between')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PBdr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bar')), min_occurs=0L, max_occurs=1)
    )
CT_PBdr._ContentModel = pyxb.binding.content.ParticleModel(CT_PBdr._GroupModel, min_occurs=1, max_occurs=1)



CT_DocVars._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'docVar'), CT_DocVar, scope=CT_DocVars, documentation=u'Single Document Variable'))
CT_DocVars._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DocVars._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'docVar')), min_occurs=0L, max_occurs=None)
    )
CT_DocVars._ContentModel = pyxb.binding.content.ParticleModel(CT_DocVars._GroupModel, min_occurs=1, max_occurs=1)



CT_SPrePr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_SPrePr))
CT_SPrePr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SPrePr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_SPrePr._ContentModel = pyxb.binding.content.ParticleModel(CT_SPrePr._GroupModel, min_occurs=1, max_occurs=1)



CT_RadPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_RadPr))

CT_RadPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'degHide'), CT_OnOff_, scope=CT_RadPr, documentation=u'Hide Degree'))
CT_RadPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RadPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'degHide')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RadPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_RadPr._ContentModel = pyxb.binding.content.ParticleModel(CT_RadPr._GroupModel, min_occurs=1, max_occurs=1)



CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'layoutTableRowsApart'), CT_OnOff, scope=CT_Compat, documentation=u'Allow Table Rows to Wrap Inline Objects Independently'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'cachedColBalance'), CT_OnOff, scope=CT_Compat, documentation=u'Use Cached Paragraph Information for Column Balancing'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotSuppressParagraphBorders'), CT_OnOff, scope=CT_Compat, documentation=u'Do Not Suppress Paragraph Borders Next To Frames'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'autoSpaceLikeWord95'), CT_OnOff, scope=CT_Compat, documentation=u'Incorrectly Adjust Text Spacing for Specific Unicode Ranges'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotLeaveBackslashAlone'), CT_OnOff, scope=CT_Compat, documentation=u'Display Backslash As Yen Sign'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noTabHangInd'), CT_OnOff, scope=CT_Compat, documentation=u'Do Not Create Custom Tab Stop for Hanging Indent'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'growAutofit'), CT_OnOff, scope=CT_Compat, documentation=u'Allow Tables to AutoFit Into Page Margins'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotUseIndentAsNumberingTabStop'), CT_OnOff, scope=CT_Compat, documentation=u'Ignore Hanging Indent When Creating Tab Stop After Numbering'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'wpSpaceWidth'), CT_OnOff, scope=CT_Compat, documentation=u'Use Specific Space Width'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'useWord2002TableStyleRules'), CT_OnOff, scope=CT_Compat, documentation=u'Incorrectly Display Top Border of Conditional Columns'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotExpandShiftReturn'), CT_OnOff, scope=CT_Compat, documentation=u"Don't Justify Lines Ending in Soft Line Break"))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'spacingInWholePoints'), CT_OnOff, scope=CT_Compat, documentation=u'Only Expand/Condense Text By Whole Points'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'swapBordersFacingPages'), CT_OnOff, scope=CT_Compat, documentation=u'Swap Paragraph Borders on Odd Numbered Pages'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'allowSpaceOfSameStyleInTable'), CT_OnOff, scope=CT_Compat, documentation=u'Allow Contextual Spacing of Paragraphs in Tables'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'forgetLastTabAlignment'), CT_OnOff, scope=CT_Compat, documentation=u'Ignore Width of Last Tab Stop When Aligning Paragraph If It Is Not Left Aligned'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressTopSpacing'), CT_OnOff, scope=CT_Compat, documentation=u'Ignore Minimum and Exact Line Height for First Line on Page'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'ulTrailSpace'), CT_OnOff, scope=CT_Compat, documentation=u'Underline All Trailing Spaces'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotAutofitConstrainedTables'), CT_OnOff, scope=CT_Compat, documentation=u'Do Not AutoFit Tables To Fit Next To Wrapped Objects'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noLeading'), CT_OnOff, scope=CT_Compat, documentation=u'Do Not Add Leading Between Lines of Text'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'alignTablesRowByRow'), CT_OnOff, scope=CT_Compat, documentation=u'Align Table Rows Independently'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'usePrinterMetrics'), CT_OnOff, scope=CT_Compat, documentation=u'Use Printer Metrics To Display Documents'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'useAltKinsokuLineBreakRules'), CT_OnOff, scope=CT_Compat, documentation=u'Use Alternate Set of East Asian Line Breaking Rules'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'autofitToFirstFixedWidthCell'), CT_OnOff, scope=CT_Compat, documentation=u'Allow Table Columns To Exceed Preferred Widths of Constituent Cells'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'showBreaksInFrames'), CT_OnOff, scope=CT_Compat, documentation=u'Display Page/Column Breaks Present in Frames'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noSpaceRaiseLower'), CT_OnOff, scope=CT_Compat, documentation=u'Do Not Increase Line Height for Raised/Lowered Text'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'footnoteLayoutLikeWW8'), CT_OnOff, scope=CT_Compat, documentation=u'Ignore Page Break from Continuous Section Break'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'lineWrapLikeWord6'), CT_OnOff, scope=CT_Compat, documentation=u'Ignore Compression of Full-Width Punctuation Ending a Line'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotBreakWrappedTables'), CT_OnOff, scope=CT_Compat, documentation=u'Do Not Allow Floating Tables To Break Across Pages'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'applyBreakingRules'), CT_OnOff, scope=CT_Compat, documentation=u'Use Legacy Ethiopic and Amharic Line Breaking Rules'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotBreakConstrainedForcedTable'), CT_OnOff, scope=CT_Compat, documentation=u"Don't Break Table Rows Around Floating Tables"))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotUseEastAsianBreakRules'), CT_OnOff, scope=CT_Compat, documentation=u'Do Not Compress Compressible Characters When Using Document Grid'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'splitPgBreakAndParaMark'), CT_OnOff, scope=CT_Compat, documentation=u'Always Move Paragraph Mark to Page after a Page Break'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotUseHTMLParagraphAutoSpacing'), CT_OnOff, scope=CT_Compat, documentation=u'Use Fixed Paragraph Spacing for HTML Auto Setting'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'underlineTabInNumList'), CT_OnOff, scope=CT_Compat, documentation=u'Underline Following Character Following Numbering'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotVertAlignCellWithSp'), CT_OnOff, scope=CT_Compat, documentation=u"Don't Vertically Align Cells Containing Floating Objects"))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'spaceForUL'), CT_OnOff, scope=CT_Compat, documentation=u'Add Additional Space Below Baseline For Underlined East Asian Text'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressTopSpacingWP'), CT_OnOff, scope=CT_Compat, documentation=u'Use Static Text Leading'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noExtraLineSpacing'), CT_OnOff, scope=CT_Compat, documentation=u'Do Not Center Content on Lines With Exact Line Height'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'useWord97LineBreakRules'), CT_OnOff, scope=CT_Compat, documentation=u'Use Incorrect Inter-Character Spacing Rules'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'shapeLayoutLikeWW8'), CT_OnOff, scope=CT_Compat, documentation=u'Ignore Text Wrapping around Objects at Bottom of Page'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'subFontBySize'), CT_OnOff, scope=CT_Compat, documentation=u'Require Exact Size During Font Substitution'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'wrapTrailSpaces'), CT_OnOff, scope=CT_Compat, documentation=u'Line Wrap Trailing Spaces'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressSpacingAtTopOfPage'), CT_OnOff, scope=CT_Compat, documentation=u'Ignore Minimum Line Height for First Line on Page'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'compatSetting'), CT_CompatSetting, scope=CT_Compat, documentation=u'Custom Compatibility Setting'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'printBodyTextBeforeHeader'), CT_OnOff, scope=CT_Compat, documentation=u'Print Body Text before Header/Footer Contents'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotSnapToGridInCell'), CT_OnOff, scope=CT_Compat, documentation=u'Do Not Snap to Document Grid in Table Cells with Objects'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotWrapTextWithPunct'), CT_OnOff, scope=CT_Compat, documentation=u'Do Not Allow Hanging Punctuation With Character Grid'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotVertAlignInTxbx'), CT_OnOff, scope=CT_Compat, documentation=u'Ignore Vertical Alignment in Textboxes'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'useSingleBorderforContiguousCells'), CT_OnOff, scope=CT_Compat, documentation=u'Use Simplified Rules For Table Border Conflicts'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'balanceSingleByteDoubleByteWidth'), CT_OnOff, scope=CT_Compat, documentation=u'Balance Single Byte and Double Byte Characters'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'wpJustification'), CT_OnOff, scope=CT_Compat, documentation=u'Fit To Expanded Width When Performing Full Justification'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'layoutRawTableWidth'), CT_OnOff, scope=CT_Compat, documentation=u'Ignore Space Before Table When Deciding If Table Should Wrap Floating Object'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'displayHangulFixedWidth'), CT_OnOff, scope=CT_Compat, documentation=u'Always Use Fixed Width for Hangul Characters'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'printColBlack'), CT_OnOff, scope=CT_Compat, documentation=u'Print Colors as Black And White without Dithering'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressSpBfAfterPgBrk'), CT_OnOff, scope=CT_Compat, documentation=u'Do Not Use Space Before On First Line After a Page Break'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'adjustLineHeightInTable'), CT_OnOff, scope=CT_Compat, documentation=u'Add Document Grid Line Pitch To Lines in Table Cells'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotSuppressIndentation'), CT_OnOff, scope=CT_Compat, documentation=u'Do Not Ignore Floating Objects When Calculating Paragraph Indentation'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'useAnsiKerningPairs'), CT_OnOff, scope=CT_Compat, documentation=u'Use ANSI Kerning Pairs from Fonts'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'convMailMergeEsc'), CT_OnOff, scope=CT_Compat, documentation=u'Treat Backslash Quotation Delimiter as Two Quotation Marks'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressBottomSpacing'), CT_OnOff, scope=CT_Compat, documentation=u'Ignore Exact Line Height for Last Line on Page'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'useNormalStyleForList'), CT_OnOff, scope=CT_Compat, documentation=u'Do Not Automatically Apply List Paragraph Style To Bulleted/Numbered Text'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'truncateFontHeightsLikeWP6'), CT_OnOff, scope=CT_Compat, documentation=u'Use Truncated Integer Division For Font Calculation'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'mwSmallCaps'), CT_OnOff, scope=CT_Compat, documentation=u'Use Specific Small Caps Algorithm'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'selectFldWithFirstOrLastChar'), CT_OnOff, scope=CT_Compat, documentation=u'Select Field When First or Last Character Is Selected'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'useFELayout'), CT_OnOff, scope=CT_Compat, documentation=u'Do Not Bypass East Asian/Complex Script Layout Code'))

CT_Compat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'noColumnBalance'), CT_OnOff, scope=CT_Compat, documentation=u'Do Not Balance Text Columns within a Section'))
CT_Compat._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'useSingleBorderforContiguousCells')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'wpJustification')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noTabHangInd')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noLeading')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'spaceForUL')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noColumnBalance')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'balanceSingleByteDoubleByteWidth')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noExtraLineSpacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotLeaveBackslashAlone')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'ulTrailSpace')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotExpandShiftReturn')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'spacingInWholePoints')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'lineWrapLikeWord6')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'printBodyTextBeforeHeader')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'printColBlack')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'wpSpaceWidth')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'showBreaksInFrames')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'subFontBySize')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressBottomSpacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressTopSpacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressSpacingAtTopOfPage')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressTopSpacingWP')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'suppressSpBfAfterPgBrk')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'swapBordersFacingPages')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'convMailMergeEsc')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'truncateFontHeightsLikeWP6')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'mwSmallCaps')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'usePrinterMetrics')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotSuppressParagraphBorders')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'wrapTrailSpaces')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'footnoteLayoutLikeWW8')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shapeLayoutLikeWW8')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'alignTablesRowByRow')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'forgetLastTabAlignment')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'adjustLineHeightInTable')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'autoSpaceLikeWord95')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'noSpaceRaiseLower')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotUseHTMLParagraphAutoSpacing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'layoutRawTableWidth')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'layoutTableRowsApart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'useWord97LineBreakRules')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotBreakWrappedTables')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotSnapToGridInCell')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'selectFldWithFirstOrLastChar')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'applyBreakingRules')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotWrapTextWithPunct')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotUseEastAsianBreakRules')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'useWord2002TableStyleRules')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'growAutofit')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'useFELayout')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'useNormalStyleForList')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotUseIndentAsNumberingTabStop')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'useAltKinsokuLineBreakRules')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'allowSpaceOfSameStyleInTable')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotSuppressIndentation')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotAutofitConstrainedTables')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'autofitToFirstFixedWidthCell')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'underlineTabInNumList')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'displayHangulFixedWidth')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'splitPgBreakAndParaMark')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotVertAlignCellWithSp')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotBreakConstrainedForcedTable')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotVertAlignInTxbx')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'useAnsiKerningPairs')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'cachedColBalance')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Compat._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'compatSetting')), min_occurs=0L, max_occurs=None)
    )
CT_Compat._ContentModel = pyxb.binding.content.ParticleModel(CT_Compat._GroupModel, min_occurs=1, max_occurs=1)



CT_AltChunkPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'matchSrc'), CT_OnOff, scope=CT_AltChunkPr, documentation=u'Keep Source Formatting on Import'))
CT_AltChunkPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AltChunkPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'matchSrc')), min_occurs=0L, max_occurs=1L)
    )
CT_AltChunkPr._ContentModel = pyxb.binding.content.ParticleModel(CT_AltChunkPr._GroupModel, min_occurs=1, max_occurs=1)



CT_PhantPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'zeroAsc'), CT_OnOff_, scope=CT_PhantPr, documentation=u'Phantom Zero Ascent'))

CT_PhantPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'zeroDesc'), CT_OnOff_, scope=CT_PhantPr, documentation=u'Phantom Zero Descent'))

CT_PhantPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'transp'), CT_OnOff_, scope=CT_PhantPr, documentation=u'Transparent (Phantom)'))

CT_PhantPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_PhantPr))

CT_PhantPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'show'), CT_OnOff_, scope=CT_PhantPr, documentation=u'Phantom Show'))

CT_PhantPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'zeroWid'), CT_OnOff_, scope=CT_PhantPr, documentation=u'Phantom Zero Width'))
CT_PhantPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PhantPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'show')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PhantPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'zeroWid')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PhantPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'zeroAsc')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PhantPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'zeroDesc')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PhantPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'transp')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PhantPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_PhantPr._ContentModel = pyxb.binding.content.ParticleModel(CT_PhantPr._GroupModel, min_occurs=1, max_occurs=1)



CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'query'), CT_String, scope=CT_MailMerge, documentation=u'Query For Data Source Records To Merge'))

CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'odso'), CT_Odso, scope=CT_MailMerge, documentation=u'Office Data Source Object Settings'))

CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'mailSubject'), CT_String, scope=CT_MailMerge, documentation=u'Merged E-mail or Fax Subject Line'))

CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dataSource'), CT_Rel, scope=CT_MailMerge, documentation=u'Data Source File Path'))

CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'mainDocumentType'), CT_MailMergeDocType, scope=CT_MailMerge, documentation=u'Source Document Type'))

CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'mailAsAttachment'), CT_OnOff, scope=CT_MailMerge, documentation=u'Merged Document To E-Mail Attachment'))

CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'linkToQuery'), CT_OnOff, scope=CT_MailMerge, documentation=u'Query Contains Link to External Query File'))

CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'headerSource'), CT_Rel, scope=CT_MailMerge, documentation=u'Header Definition File Path'))

CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'addressFieldName'), CT_String, scope=CT_MailMerge, documentation=u'Column Containing E-mail Address'))

CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'viewMergedData'), CT_OnOff, scope=CT_MailMerge, documentation=u'View Merged Data Within Document'))

CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotSuppressBlankLines'), CT_OnOff, scope=CT_MailMerge, documentation=u'Remove Blank Lines from Merged Documents'))

CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'dataType'), CT_MailMergeDataType, scope=CT_MailMerge, documentation=u'Data Source Type'))

CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'activeRecord'), CT_DecimalNumber, scope=CT_MailMerge, documentation=u'Record Currently Displayed In Merged Document'))

CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'destination'), CT_MailMergeDest, scope=CT_MailMerge, documentation=u'Merged Document Destination'))

CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'connectString'), CT_String, scope=CT_MailMerge, documentation=u'Data Source Connection String'))

CT_MailMerge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'checkErrors'), CT_DecimalNumber, scope=CT_MailMerge, documentation=u'Mail Merge Error Reporting Setting'))
CT_MailMerge._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'mainDocumentType')), min_occurs=1L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'linkToQuery')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dataType')), min_occurs=1L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'connectString')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'query')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'dataSource')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'headerSource')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'doNotSuppressBlankLines')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'destination')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'addressFieldName')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'mailSubject')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'mailAsAttachment')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'viewMergedData')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'activeRecord')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'checkErrors')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_MailMerge._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'odso')), min_occurs=0L, max_occurs=1)
    )
CT_MailMerge._ContentModel = pyxb.binding.content.ParticleModel(CT_MailMerge._GroupModel, min_occurs=1, max_occurs=1)



CT_Odso._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'colDelim'), CT_DecimalNumber, scope=CT_Odso, documentation=u'Column Delimiter for Data Source'))

CT_Odso._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), CT_MailMergeSourceType, scope=CT_Odso, documentation=u'ODSO Data Source Type'))

CT_Odso._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fHdr'), CT_OnOff, scope=CT_Odso, documentation=u'First Row of Data Source Contains Column Names'))

CT_Odso._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'udl'), CT_String, scope=CT_Odso, documentation=u'UDL Connection String'))

CT_Odso._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'fieldMapData'), CT_OdsoFieldMapData, scope=CT_Odso, documentation=u'External Data Source to Merge Field Mapping'))

CT_Odso._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'table'), CT_String, scope=CT_Odso, documentation=u'Data Source Table Name'))

CT_Odso._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'recipientData'), CT_Rel, scope=CT_Odso, documentation=u'Reference to Inclusion/Exclusion Data for Data Source'))

CT_Odso._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'src'), CT_Rel, scope=CT_Odso, documentation=u'ODSO Data Source File Path'))
CT_Odso._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Odso._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'udl')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Odso._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'table')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Odso._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'src')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Odso._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'colDelim')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Odso._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'type')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Odso._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fHdr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Odso._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'fieldMapData')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Odso._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'recipientData')), min_occurs=0L, max_occurs=None)
    )
CT_Odso._ContentModel = pyxb.binding.content.ParticleModel(CT_Odso._GroupModel, min_occurs=1, max_occurs=1)



CT_NaryPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'supHide'), CT_OnOff_, scope=CT_NaryPr, documentation=u'Hide Superscript (n-ary)'))

CT_NaryPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_NaryPr))

CT_NaryPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'subHide'), CT_OnOff_, scope=CT_NaryPr, documentation=u'Hide Subscript (n-ary)'))

CT_NaryPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'limLoc'), CT_LimLoc, scope=CT_NaryPr, documentation=u'n-ary Limit Location'))

CT_NaryPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'chr'), CT_Char, scope=CT_NaryPr, documentation=u'n-ary Operator Character'))

CT_NaryPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'grow'), CT_OnOff_, scope=CT_NaryPr, documentation=u'n-ary Grow'))
CT_NaryPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NaryPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'chr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_NaryPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'limLoc')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_NaryPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'grow')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_NaryPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'subHide')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_NaryPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'supHide')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_NaryPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_NaryPr._ContentModel = pyxb.binding.content.ParticleModel(CT_NaryPr._GroupModel, min_occurs=1, max_occurs=1)



CT_BarPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_BarPr))

CT_BarPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'pos'), CT_TopBot, scope=CT_BarPr, documentation=u'Position'))
CT_BarPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BarPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'pos')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_BarPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_BarPr._ContentModel = pyxb.binding.content.ParticleModel(CT_BarPr._GroupModel, min_occurs=1, max_occurs=1)



CT_AccPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_AccPr, documentation=u'Control Properties'))

CT_AccPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'chr'), CT_Char, scope=CT_AccPr, documentation=u'Character'))
CT_AccPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AccPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'chr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_AccPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_AccPr._ContentModel = pyxb.binding.content.ParticleModel(CT_AccPr._GroupModel, min_occurs=1, max_occurs=1)



CT_RecipientData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'uniqueTag'), pyxb.binding.datatypes.base64Binary, scope=CT_RecipientData, documentation=u'Unique Value for Record'))

CT_RecipientData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'active'), CT_OnOff, scope=CT_RecipientData, documentation=u'Record Is Included in Mail Merge'))

CT_RecipientData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'column'), CT_DecimalNumber, scope=CT_RecipientData, documentation=u'Index of Column Containing Unique Values for Record'))
CT_RecipientData._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RecipientData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'active')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RecipientData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'column')), min_occurs=1L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_RecipientData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'uniqueTag')), min_occurs=1L, max_occurs=1)
    )
CT_RecipientData._ContentModel = pyxb.binding.content.ParticleModel(CT_RecipientData._GroupModel, min_occurs=1, max_occurs=1)



CT_Placeholder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'docPart'), CT_String, scope=CT_Placeholder, documentation=u'Document Part Reference'))
CT_Placeholder._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Placeholder._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'docPart')), min_occurs=1, max_occurs=1)
    )
CT_Placeholder._ContentModel = pyxb.binding.content.ParticleModel(CT_Placeholder._GroupModel, min_occurs=1, max_occurs=1)



CT_FtnDocProps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'footnote'), CT_FtnEdnSepRef, scope=CT_FtnDocProps, documentation=u'Special Footnote List'))
CT_FtnDocProps._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FtnDocProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numStart')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnDocProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numRestart')), min_occurs=0L, max_occurs=1)
    )
CT_FtnDocProps._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FtnDocProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'pos')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnDocProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'numFmt')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnDocProps._GroupModel_2, min_occurs=0L, max_occurs=1)
    )
CT_FtnDocProps._GroupModel_3 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FtnDocProps._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'footnote')), min_occurs=0L, max_occurs=3L)
    )
CT_FtnDocProps._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FtnDocProps._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FtnDocProps._GroupModel_3, min_occurs=1, max_occurs=1)
    )
CT_FtnDocProps._ContentModel = pyxb.binding.content.ParticleModel(CT_FtnDocProps._GroupModel, min_occurs=1, max_occurs=1)



CT_DocPartTypes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'type'), CT_DocPartType, scope=CT_DocPartTypes, documentation=u'Entry Type'))
CT_DocPartTypes._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_DocPartTypes._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'type')), min_occurs=1, max_occurs=None)
    )
CT_DocPartTypes._ContentModel = pyxb.binding.content.ParticleModel(CT_DocPartTypes._GroupModel, min_occurs=1, max_occurs=1)



CT_TblPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPrChange'), CT_TblPrChange, scope=CT_TblPr, documentation=u'Revision Information for Table Properties'))
CT_TblPr._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblStyle')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblpPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblOverlap')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'bidiVisual')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblStyleRowBandSize')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblStyleColBandSize')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblW')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'jc')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellSpacing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblInd')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblBorders')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'shd')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLayout')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCellMar')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblLook')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblCaption')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblDescription')), min_occurs=0L, max_occurs=1L)
    )
CT_TblPr._GroupModel_2 = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_w, u'tblPrChange')), min_occurs=0L, max_occurs=1)
    )
CT_TblPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TblPr._GroupModel_, min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TblPr._GroupModel_2, min_occurs=1, max_occurs=1)
    )
CT_TblPr._ContentModel = pyxb.binding.content.ParticleModel(CT_TblPr._GroupModel, min_occurs=1, max_occurs=1)



CT_FuncPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr'), CT_CtrlPr, scope=CT_FuncPr))
CT_FuncPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FuncPr._UseForTag(pyxb.namespace.ExpandedName(_Namespace_m, u'ctrlPr')), min_occurs=0L, max_occurs=1)
    )
CT_FuncPr._ContentModel = pyxb.binding.content.ParticleModel(CT_FuncPr._GroupModel, min_occurs=1, max_occurs=1)
