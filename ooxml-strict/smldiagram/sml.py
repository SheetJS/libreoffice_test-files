# ./sml.py
# PyXB bindings for NamespaceModule
# NSM:640facc0f3ed2458258952465e2a4dcfae01c1d6
# Generated 2010-07-02 14:32:40.122915 by PyXB version 1.1.2
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import StringIO
import pyxb.utils.utility
import pyxb.utils.domutils
import sys

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:e3950400-85d5-11df-91df-0026b9799156')

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes
import _s
import _r
import _xdr

Namespace = pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/spreadsheetml/2006/main', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])
ModuleRecord = Namespace.lookupModuleRecordByUID(_GenerationUID, create_if_missing=True)
ModuleRecord._setModule(sys.modules[__name__])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a Python instance."""
    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement)
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=Namespace.fallbackNamespace(), location_base=location_base)
    handler = saxer.getContentHandler()
    saxer.parse(StringIO.StringIO(xml_text))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, _fallback_namespace=default_namespace)


# Atomic SimpleTypeDefinition
class ST_UnsignedIntHex (pyxb.binding.datatypes.hexBinary):

    """Hex Unsigned Integer"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_UnsignedIntHex')
    _Documentation = u'Hex Unsigned Integer'
ST_UnsignedIntHex._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(4L))
ST_UnsignedIntHex._InitializeFacetMap(ST_UnsignedIntHex._CF_length)
Namespace.addCategoryObject('typeBinding', u'ST_UnsignedIntHex', ST_UnsignedIntHex)

# Atomic SimpleTypeDefinition
class ST_Ref (pyxb.binding.datatypes.string):

    """Cell References"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_Ref')
    _Documentation = u'Cell References'
ST_Ref._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ST_Ref', ST_Ref)

# Atomic SimpleTypeDefinition
class ST_NumFmtId (pyxb.binding.datatypes.unsignedInt):

    """Number Format Id"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_NumFmtId')
    _Documentation = u'Number Format Id'
ST_NumFmtId._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ST_NumFmtId', ST_NumFmtId)

# Atomic SimpleTypeDefinition
class ST_HorizontalAlignment (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Horizontal Alignment Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_HorizontalAlignment')
    _Documentation = u'Horizontal Alignment Type'
ST_HorizontalAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_HorizontalAlignment, enum_prefix=None)
ST_HorizontalAlignment.general = ST_HorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'general')
ST_HorizontalAlignment.left = ST_HorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'left')
ST_HorizontalAlignment.center = ST_HorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'center')
ST_HorizontalAlignment.right = ST_HorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'right')
ST_HorizontalAlignment.fill = ST_HorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'fill')
ST_HorizontalAlignment.justify = ST_HorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'justify')
ST_HorizontalAlignment.centerContinuous = ST_HorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'centerContinuous')
ST_HorizontalAlignment.distributed = ST_HorizontalAlignment._CF_enumeration.addEnumeration(unicode_value=u'distributed')
ST_HorizontalAlignment._InitializeFacetMap(ST_HorizontalAlignment._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_HorizontalAlignment', ST_HorizontalAlignment)

# Atomic SimpleTypeDefinition
class ST_VerticalAlignment (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Vertical Alignment Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_VerticalAlignment')
    _Documentation = u'Vertical Alignment Types'
ST_VerticalAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_VerticalAlignment, enum_prefix=None)
ST_VerticalAlignment.top = ST_VerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u'top')
ST_VerticalAlignment.center = ST_VerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u'center')
ST_VerticalAlignment.bottom = ST_VerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u'bottom')
ST_VerticalAlignment.justify = ST_VerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u'justify')
ST_VerticalAlignment.distributed = ST_VerticalAlignment._CF_enumeration.addEnumeration(unicode_value=u'distributed')
ST_VerticalAlignment._InitializeFacetMap(ST_VerticalAlignment._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_VerticalAlignment', ST_VerticalAlignment)

# Atomic SimpleTypeDefinition
class ST_GradientType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Gradient Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_GradientType')
    _Documentation = u'Gradient Type'
ST_GradientType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_GradientType, enum_prefix=None)
ST_GradientType.linear = ST_GradientType._CF_enumeration.addEnumeration(unicode_value=u'linear')
ST_GradientType.path = ST_GradientType._CF_enumeration.addEnumeration(unicode_value=u'path')
ST_GradientType._InitializeFacetMap(ST_GradientType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_GradientType', ST_GradientType)

# Atomic SimpleTypeDefinition
class ST_CellRef (pyxb.binding.datatypes.string):

    """Cell Reference"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_CellRef')
    _Documentation = u'Cell Reference'
ST_CellRef._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ST_CellRef', ST_CellRef)

# Atomic SimpleTypeDefinition
class ST_Pane (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Pane Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_Pane')
    _Documentation = u'Pane Types'
ST_Pane._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Pane, enum_prefix=None)
ST_Pane.bottomRight = ST_Pane._CF_enumeration.addEnumeration(unicode_value=u'bottomRight')
ST_Pane.topRight = ST_Pane._CF_enumeration.addEnumeration(unicode_value=u'topRight')
ST_Pane.bottomLeft = ST_Pane._CF_enumeration.addEnumeration(unicode_value=u'bottomLeft')
ST_Pane.topLeft = ST_Pane._CF_enumeration.addEnumeration(unicode_value=u'topLeft')
ST_Pane._InitializeFacetMap(ST_Pane._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_Pane', ST_Pane)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_Sqref (pyxb.binding.basis.STD_list):

    """Reference Sequence"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_Sqref')
    _Documentation = u'Reference Sequence'

    _ItemType = ST_Ref
ST_Sqref._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ST_Sqref', ST_Sqref)

# Atomic SimpleTypeDefinition
class ST_PhoneticAlignment (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Phonetic Alignment Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_PhoneticAlignment')
    _Documentation = u'Phonetic Alignment Types'
ST_PhoneticAlignment._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PhoneticAlignment, enum_prefix=None)
ST_PhoneticAlignment.noControl = ST_PhoneticAlignment._CF_enumeration.addEnumeration(unicode_value=u'noControl')
ST_PhoneticAlignment.left = ST_PhoneticAlignment._CF_enumeration.addEnumeration(unicode_value=u'left')
ST_PhoneticAlignment.center = ST_PhoneticAlignment._CF_enumeration.addEnumeration(unicode_value=u'center')
ST_PhoneticAlignment.distributed = ST_PhoneticAlignment._CF_enumeration.addEnumeration(unicode_value=u'distributed')
ST_PhoneticAlignment._InitializeFacetMap(ST_PhoneticAlignment._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_PhoneticAlignment', ST_PhoneticAlignment)

# Atomic SimpleTypeDefinition
class ST_FontId (pyxb.binding.datatypes.unsignedInt):

    """Font Id"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_FontId')
    _Documentation = u'Font Id'
ST_FontId._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ST_FontId', ST_FontId)

# Atomic SimpleTypeDefinition
class ST_PhoneticType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Phonetic Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_PhoneticType')
    _Documentation = u'Phonetic Type'
ST_PhoneticType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PhoneticType, enum_prefix=None)
ST_PhoneticType.halfwidthKatakana = ST_PhoneticType._CF_enumeration.addEnumeration(unicode_value=u'halfwidthKatakana')
ST_PhoneticType.fullwidthKatakana = ST_PhoneticType._CF_enumeration.addEnumeration(unicode_value=u'fullwidthKatakana')
ST_PhoneticType.Hiragana = ST_PhoneticType._CF_enumeration.addEnumeration(unicode_value=u'Hiragana')
ST_PhoneticType.noConversion = ST_PhoneticType._CF_enumeration.addEnumeration(unicode_value=u'noConversion')
ST_PhoneticType._InitializeFacetMap(ST_PhoneticType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_PhoneticType', ST_PhoneticType)

# Atomic SimpleTypeDefinition
class ST_UnsignedShortHex (pyxb.binding.datatypes.hexBinary):

    """Unsigned Short Hex"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_UnsignedShortHex')
    _Documentation = u'Unsigned Short Hex'
ST_UnsignedShortHex._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(2L))
ST_UnsignedShortHex._InitializeFacetMap(ST_UnsignedShortHex._CF_length)
Namespace.addCategoryObject('typeBinding', u'ST_UnsignedShortHex', ST_UnsignedShortHex)

# Atomic SimpleTypeDefinition
class ST_SortMethod (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Sort Method"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_SortMethod')
    _Documentation = u'Sort Method'
ST_SortMethod._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SortMethod, enum_prefix=None)
ST_SortMethod.stroke = ST_SortMethod._CF_enumeration.addEnumeration(unicode_value=u'stroke')
ST_SortMethod.pinYin = ST_SortMethod._CF_enumeration.addEnumeration(unicode_value=u'pinYin')
ST_SortMethod.none = ST_SortMethod._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_SortMethod._InitializeFacetMap(ST_SortMethod._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_SortMethod', ST_SortMethod)

# Atomic SimpleTypeDefinition
class ST_FontScheme (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Font scheme Styles"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_FontScheme')
    _Documentation = u'Font scheme Styles'
ST_FontScheme._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FontScheme, enum_prefix=None)
ST_FontScheme.none = ST_FontScheme._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_FontScheme.major = ST_FontScheme._CF_enumeration.addEnumeration(unicode_value=u'major')
ST_FontScheme.minor = ST_FontScheme._CF_enumeration.addEnumeration(unicode_value=u'minor')
ST_FontScheme._InitializeFacetMap(ST_FontScheme._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_FontScheme', ST_FontScheme)

# Atomic SimpleTypeDefinition
class ST_Formula (_s.ST_Xstring):

    """Formula"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_Formula')
    _Documentation = u'Formula'
ST_Formula._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ST_Formula', ST_Formula)

# Atomic SimpleTypeDefinition
class ST_CellType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Cell Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_CellType')
    _Documentation = u'Cell Type'
ST_CellType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CellType, enum_prefix=None)
ST_CellType.b = ST_CellType._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_CellType.d = ST_CellType._CF_enumeration.addEnumeration(unicode_value=u'd')
ST_CellType.n = ST_CellType._CF_enumeration.addEnumeration(unicode_value=u'n')
ST_CellType.e = ST_CellType._CF_enumeration.addEnumeration(unicode_value=u'e')
ST_CellType.s = ST_CellType._CF_enumeration.addEnumeration(unicode_value=u's')
ST_CellType.str = ST_CellType._CF_enumeration.addEnumeration(unicode_value=u'str')
ST_CellType.inlineStr = ST_CellType._CF_enumeration.addEnumeration(unicode_value=u'inlineStr')
ST_CellType._InitializeFacetMap(ST_CellType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_CellType', ST_CellType)

# Atomic SimpleTypeDefinition
class ST_UnderlineValues (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Underline Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_UnderlineValues')
    _Documentation = u'Underline Types'
ST_UnderlineValues._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_UnderlineValues, enum_prefix=None)
ST_UnderlineValues.single = ST_UnderlineValues._CF_enumeration.addEnumeration(unicode_value=u'single')
ST_UnderlineValues.double = ST_UnderlineValues._CF_enumeration.addEnumeration(unicode_value=u'double')
ST_UnderlineValues.singleAccounting = ST_UnderlineValues._CF_enumeration.addEnumeration(unicode_value=u'singleAccounting')
ST_UnderlineValues.doubleAccounting = ST_UnderlineValues._CF_enumeration.addEnumeration(unicode_value=u'doubleAccounting')
ST_UnderlineValues.none = ST_UnderlineValues._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_UnderlineValues._InitializeFacetMap(ST_UnderlineValues._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_UnderlineValues', ST_UnderlineValues)

# Atomic SimpleTypeDefinition
class ST_FormatAction (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """PivotTable Format Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_FormatAction')
    _Documentation = u'PivotTable Format Types'
ST_FormatAction._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FormatAction, enum_prefix=None)
ST_FormatAction.blank = ST_FormatAction._CF_enumeration.addEnumeration(unicode_value=u'blank')
ST_FormatAction.formatting = ST_FormatAction._CF_enumeration.addEnumeration(unicode_value=u'formatting')
ST_FormatAction.drill = ST_FormatAction._CF_enumeration.addEnumeration(unicode_value=u'drill')
ST_FormatAction.formula = ST_FormatAction._CF_enumeration.addEnumeration(unicode_value=u'formula')
ST_FormatAction._InitializeFacetMap(ST_FormatAction._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_FormatAction', ST_FormatAction)

# Atomic SimpleTypeDefinition
class ST_DxfId (pyxb.binding.datatypes.unsignedInt):

    """Format Id"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_DxfId')
    _Documentation = u'Format Id'
ST_DxfId._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ST_DxfId', ST_DxfId)

# Atomic SimpleTypeDefinition
class ST_VolValueType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Volatile Dependency Value Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_VolValueType')
    _Documentation = u'Volatile Dependency Value Types'
ST_VolValueType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_VolValueType, enum_prefix=None)
ST_VolValueType.b = ST_VolValueType._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_VolValueType.n = ST_VolValueType._CF_enumeration.addEnumeration(unicode_value=u'n')
ST_VolValueType.e = ST_VolValueType._CF_enumeration.addEnumeration(unicode_value=u'e')
ST_VolValueType.s = ST_VolValueType._CF_enumeration.addEnumeration(unicode_value=u's')
ST_VolValueType._InitializeFacetMap(ST_VolValueType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_VolValueType', ST_VolValueType)

# Atomic SimpleTypeDefinition
class ST_DvAspect (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Data View Aspect Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_DvAspect')
    _Documentation = u'Data View Aspect Type'
ST_DvAspect._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DvAspect, enum_prefix=None)
ST_DvAspect.DVASPECT_CONTENT = ST_DvAspect._CF_enumeration.addEnumeration(unicode_value=u'DVASPECT_CONTENT')
ST_DvAspect.DVASPECT_ICON = ST_DvAspect._CF_enumeration.addEnumeration(unicode_value=u'DVASPECT_ICON')
ST_DvAspect._InitializeFacetMap(ST_DvAspect._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_DvAspect', ST_DvAspect)

# Atomic SimpleTypeDefinition
class ST_OleUpdate (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """OLE Update Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_OleUpdate')
    _Documentation = u'OLE Update Types'
ST_OleUpdate._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_OleUpdate, enum_prefix=None)
ST_OleUpdate.OLEUPDATE_ALWAYS = ST_OleUpdate._CF_enumeration.addEnumeration(unicode_value=u'OLEUPDATE_ALWAYS')
ST_OleUpdate.OLEUPDATE_ONCALL = ST_OleUpdate._CF_enumeration.addEnumeration(unicode_value=u'OLEUPDATE_ONCALL')
ST_OleUpdate._InitializeFacetMap(ST_OleUpdate._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_OleUpdate', ST_OleUpdate)

# Atomic SimpleTypeDefinition
class ST_PrintError (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Print Errors"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_PrintError')
    _Documentation = u'Print Errors'
ST_PrintError._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PrintError, enum_prefix=None)
ST_PrintError.displayed = ST_PrintError._CF_enumeration.addEnumeration(unicode_value=u'displayed')
ST_PrintError.blank = ST_PrintError._CF_enumeration.addEnumeration(unicode_value=u'blank')
ST_PrintError.dash = ST_PrintError._CF_enumeration.addEnumeration(unicode_value=u'dash')
ST_PrintError.NA = ST_PrintError._CF_enumeration.addEnumeration(unicode_value=u'NA')
ST_PrintError._InitializeFacetMap(ST_PrintError._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_PrintError', ST_PrintError)

# Atomic SimpleTypeDefinition
class ST_PageOrder (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Page Order"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_PageOrder')
    _Documentation = u'Page Order'
ST_PageOrder._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PageOrder, enum_prefix=None)
ST_PageOrder.downThenOver = ST_PageOrder._CF_enumeration.addEnumeration(unicode_value=u'downThenOver')
ST_PageOrder.overThenDown = ST_PageOrder._CF_enumeration.addEnumeration(unicode_value=u'overThenDown')
ST_PageOrder._InitializeFacetMap(ST_PageOrder._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_PageOrder', ST_PageOrder)

# Atomic SimpleTypeDefinition
class ST_Orientation (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Orientation"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_Orientation')
    _Documentation = u'Orientation'
ST_Orientation._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Orientation, enum_prefix=None)
ST_Orientation.default = ST_Orientation._CF_enumeration.addEnumeration(unicode_value=u'default')
ST_Orientation.portrait = ST_Orientation._CF_enumeration.addEnumeration(unicode_value=u'portrait')
ST_Orientation.landscape = ST_Orientation._CF_enumeration.addEnumeration(unicode_value=u'landscape')
ST_Orientation._InitializeFacetMap(ST_Orientation._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_Orientation', ST_Orientation)

# Atomic SimpleTypeDefinition
class ST_CellComments (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Cell Comments"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_CellComments')
    _Documentation = u'Cell Comments'
ST_CellComments._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CellComments, enum_prefix=None)
ST_CellComments.none = ST_CellComments._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_CellComments.asDisplayed = ST_CellComments._CF_enumeration.addEnumeration(unicode_value=u'asDisplayed')
ST_CellComments.atEnd = ST_CellComments._CF_enumeration.addEnumeration(unicode_value=u'atEnd')
ST_CellComments._InitializeFacetMap(ST_CellComments._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_CellComments', ST_CellComments)

# Atomic SimpleTypeDefinition
class ST_VolDepType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Volatile Dependency Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_VolDepType')
    _Documentation = u'Volatile Dependency Types'
ST_VolDepType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_VolDepType, enum_prefix=None)
ST_VolDepType.realTimeData = ST_VolDepType._CF_enumeration.addEnumeration(unicode_value=u'realTimeData')
ST_VolDepType.olapFunctions = ST_VolDepType._CF_enumeration.addEnumeration(unicode_value=u'olapFunctions')
ST_VolDepType._InitializeFacetMap(ST_VolDepType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_VolDepType', ST_VolDepType)

# Atomic SimpleTypeDefinition
class ST_DynamicFilterType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Dynamic Filter"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_DynamicFilterType')
    _Documentation = u'Dynamic Filter'
ST_DynamicFilterType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DynamicFilterType, enum_prefix=None)
ST_DynamicFilterType.null = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'null')
ST_DynamicFilterType.aboveAverage = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'aboveAverage')
ST_DynamicFilterType.belowAverage = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'belowAverage')
ST_DynamicFilterType.tomorrow = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'tomorrow')
ST_DynamicFilterType.today = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'today')
ST_DynamicFilterType.yesterday = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'yesterday')
ST_DynamicFilterType.nextWeek = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'nextWeek')
ST_DynamicFilterType.thisWeek = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'thisWeek')
ST_DynamicFilterType.lastWeek = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'lastWeek')
ST_DynamicFilterType.nextMonth = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'nextMonth')
ST_DynamicFilterType.thisMonth = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'thisMonth')
ST_DynamicFilterType.lastMonth = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'lastMonth')
ST_DynamicFilterType.nextQuarter = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'nextQuarter')
ST_DynamicFilterType.thisQuarter = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'thisQuarter')
ST_DynamicFilterType.lastQuarter = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'lastQuarter')
ST_DynamicFilterType.nextYear = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'nextYear')
ST_DynamicFilterType.thisYear = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'thisYear')
ST_DynamicFilterType.lastYear = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'lastYear')
ST_DynamicFilterType.yearToDate = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'yearToDate')
ST_DynamicFilterType.Q1 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'Q1')
ST_DynamicFilterType.Q2 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'Q2')
ST_DynamicFilterType.Q3 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'Q3')
ST_DynamicFilterType.Q4 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'Q4')
ST_DynamicFilterType.M1 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'M1')
ST_DynamicFilterType.M2 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'M2')
ST_DynamicFilterType.M3 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'M3')
ST_DynamicFilterType.M4 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'M4')
ST_DynamicFilterType.M5 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'M5')
ST_DynamicFilterType.M6 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'M6')
ST_DynamicFilterType.M7 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'M7')
ST_DynamicFilterType.M8 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'M8')
ST_DynamicFilterType.M9 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'M9')
ST_DynamicFilterType.M10 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'M10')
ST_DynamicFilterType.M11 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'M11')
ST_DynamicFilterType.M12 = ST_DynamicFilterType._CF_enumeration.addEnumeration(unicode_value=u'M12')
ST_DynamicFilterType._InitializeFacetMap(ST_DynamicFilterType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_DynamicFilterType', ST_DynamicFilterType)

# Atomic SimpleTypeDefinition
class ST_DdeValueType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """DDE Value Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_DdeValueType')
    _Documentation = u'DDE Value Types'
ST_DdeValueType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DdeValueType, enum_prefix=None)
ST_DdeValueType.nil = ST_DdeValueType._CF_enumeration.addEnumeration(unicode_value=u'nil')
ST_DdeValueType.b = ST_DdeValueType._CF_enumeration.addEnumeration(unicode_value=u'b')
ST_DdeValueType.n = ST_DdeValueType._CF_enumeration.addEnumeration(unicode_value=u'n')
ST_DdeValueType.e = ST_DdeValueType._CF_enumeration.addEnumeration(unicode_value=u'e')
ST_DdeValueType.str = ST_DdeValueType._CF_enumeration.addEnumeration(unicode_value=u'str')
ST_DdeValueType._InitializeFacetMap(ST_DdeValueType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_DdeValueType', ST_DdeValueType)

# Atomic SimpleTypeDefinition
class ST_TableType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Table Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_TableType')
    _Documentation = u'Table Type'
ST_TableType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TableType, enum_prefix=None)
ST_TableType.worksheet = ST_TableType._CF_enumeration.addEnumeration(unicode_value=u'worksheet')
ST_TableType.xml = ST_TableType._CF_enumeration.addEnumeration(unicode_value=u'xml')
ST_TableType.queryTable = ST_TableType._CF_enumeration.addEnumeration(unicode_value=u'queryTable')
ST_TableType._InitializeFacetMap(ST_TableType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_TableType', ST_TableType)

# Atomic SimpleTypeDefinition
class ST_BorderStyle (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Border Line Styles"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_BorderStyle')
    _Documentation = u'Border Line Styles'
ST_BorderStyle._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_BorderStyle, enum_prefix=None)
ST_BorderStyle.none = ST_BorderStyle._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_BorderStyle.thin = ST_BorderStyle._CF_enumeration.addEnumeration(unicode_value=u'thin')
ST_BorderStyle.medium = ST_BorderStyle._CF_enumeration.addEnumeration(unicode_value=u'medium')
ST_BorderStyle.dashed = ST_BorderStyle._CF_enumeration.addEnumeration(unicode_value=u'dashed')
ST_BorderStyle.dotted = ST_BorderStyle._CF_enumeration.addEnumeration(unicode_value=u'dotted')
ST_BorderStyle.thick = ST_BorderStyle._CF_enumeration.addEnumeration(unicode_value=u'thick')
ST_BorderStyle.double = ST_BorderStyle._CF_enumeration.addEnumeration(unicode_value=u'double')
ST_BorderStyle.hair = ST_BorderStyle._CF_enumeration.addEnumeration(unicode_value=u'hair')
ST_BorderStyle.mediumDashed = ST_BorderStyle._CF_enumeration.addEnumeration(unicode_value=u'mediumDashed')
ST_BorderStyle.dashDot = ST_BorderStyle._CF_enumeration.addEnumeration(unicode_value=u'dashDot')
ST_BorderStyle.mediumDashDot = ST_BorderStyle._CF_enumeration.addEnumeration(unicode_value=u'mediumDashDot')
ST_BorderStyle.dashDotDot = ST_BorderStyle._CF_enumeration.addEnumeration(unicode_value=u'dashDotDot')
ST_BorderStyle.mediumDashDotDot = ST_BorderStyle._CF_enumeration.addEnumeration(unicode_value=u'mediumDashDotDot')
ST_BorderStyle.slantDashDot = ST_BorderStyle._CF_enumeration.addEnumeration(unicode_value=u'slantDashDot')
ST_BorderStyle._InitializeFacetMap(ST_BorderStyle._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_BorderStyle', ST_BorderStyle)

# Atomic SimpleTypeDefinition
class ST_RevisionAction (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Revision Action Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_RevisionAction')
    _Documentation = u'Revision Action Types'
ST_RevisionAction._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_RevisionAction, enum_prefix=None)
ST_RevisionAction.add = ST_RevisionAction._CF_enumeration.addEnumeration(unicode_value=u'add')
ST_RevisionAction.delete = ST_RevisionAction._CF_enumeration.addEnumeration(unicode_value=u'delete')
ST_RevisionAction._InitializeFacetMap(ST_RevisionAction._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_RevisionAction', ST_RevisionAction)

# Atomic SimpleTypeDefinition
class ST_Visibility (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Visibility Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_Visibility')
    _Documentation = u'Visibility Types'
ST_Visibility._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Visibility, enum_prefix=None)
ST_Visibility.visible = ST_Visibility._CF_enumeration.addEnumeration(unicode_value=u'visible')
ST_Visibility.hidden = ST_Visibility._CF_enumeration.addEnumeration(unicode_value=u'hidden')
ST_Visibility.veryHidden = ST_Visibility._CF_enumeration.addEnumeration(unicode_value=u'veryHidden')
ST_Visibility._InitializeFacetMap(ST_Visibility._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_Visibility', ST_Visibility)

# Atomic SimpleTypeDefinition
class ST_SmartTagShow (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Smart Tag Display Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_SmartTagShow')
    _Documentation = u'Smart Tag Display Types'
ST_SmartTagShow._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SmartTagShow, enum_prefix=None)
ST_SmartTagShow.all = ST_SmartTagShow._CF_enumeration.addEnumeration(unicode_value=u'all')
ST_SmartTagShow.none = ST_SmartTagShow._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_SmartTagShow.noIndicator = ST_SmartTagShow._CF_enumeration.addEnumeration(unicode_value=u'noIndicator')
ST_SmartTagShow._InitializeFacetMap(ST_SmartTagShow._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_SmartTagShow', ST_SmartTagShow)

# Atomic SimpleTypeDefinition
class ST_FillId (pyxb.binding.datatypes.unsignedInt):

    """Fill Id"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_FillId')
    _Documentation = u'Fill Id'
ST_FillId._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ST_FillId', ST_FillId)

# Atomic SimpleTypeDefinition
class ST_BorderId (pyxb.binding.datatypes.unsignedInt):

    """Border Id"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_BorderId')
    _Documentation = u'Border Id'
ST_BorderId._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ST_BorderId', ST_BorderId)

# Atomic SimpleTypeDefinition
class ST_CellStyleXfId (pyxb.binding.datatypes.unsignedInt):

    """Cell Style Format Id"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_CellStyleXfId')
    _Documentation = u'Cell Style Format Id'
ST_CellStyleXfId._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ST_CellStyleXfId', ST_CellStyleXfId)

# Atomic SimpleTypeDefinition
class ST_XmlDataType (pyxb.binding.datatypes.string):

    """XML Data Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_XmlDataType')
    _Documentation = u'XML Data Types'
ST_XmlDataType._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ST_XmlDataType', ST_XmlDataType)

# Atomic SimpleTypeDefinition
class ST_Axis (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """PivotTable Axis"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_Axis')
    _Documentation = u'PivotTable Axis'
ST_Axis._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Axis, enum_prefix=None)
ST_Axis.axisRow = ST_Axis._CF_enumeration.addEnumeration(unicode_value=u'axisRow')
ST_Axis.axisCol = ST_Axis._CF_enumeration.addEnumeration(unicode_value=u'axisCol')
ST_Axis.axisPage = ST_Axis._CF_enumeration.addEnumeration(unicode_value=u'axisPage')
ST_Axis.axisValues = ST_Axis._CF_enumeration.addEnumeration(unicode_value=u'axisValues')
ST_Axis._InitializeFacetMap(ST_Axis._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_Axis', ST_Axis)

# Atomic SimpleTypeDefinition
class ST_PivotAreaType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Rule Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_PivotAreaType')
    _Documentation = u'Rule Type'
ST_PivotAreaType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PivotAreaType, enum_prefix=None)
ST_PivotAreaType.none = ST_PivotAreaType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_PivotAreaType.normal = ST_PivotAreaType._CF_enumeration.addEnumeration(unicode_value=u'normal')
ST_PivotAreaType.data = ST_PivotAreaType._CF_enumeration.addEnumeration(unicode_value=u'data')
ST_PivotAreaType.all = ST_PivotAreaType._CF_enumeration.addEnumeration(unicode_value=u'all')
ST_PivotAreaType.origin = ST_PivotAreaType._CF_enumeration.addEnumeration(unicode_value=u'origin')
ST_PivotAreaType.button = ST_PivotAreaType._CF_enumeration.addEnumeration(unicode_value=u'button')
ST_PivotAreaType.topEnd = ST_PivotAreaType._CF_enumeration.addEnumeration(unicode_value=u'topEnd')
ST_PivotAreaType.topRight = ST_PivotAreaType._CF_enumeration.addEnumeration(unicode_value=u'topRight')
ST_PivotAreaType._InitializeFacetMap(ST_PivotAreaType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_PivotAreaType', ST_PivotAreaType)

# Atomic SimpleTypeDefinition
class ST_SheetState (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Sheet Visibility Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_SheetState')
    _Documentation = u'Sheet Visibility Types'
ST_SheetState._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SheetState, enum_prefix=None)
ST_SheetState.visible = ST_SheetState._CF_enumeration.addEnumeration(unicode_value=u'visible')
ST_SheetState.hidden = ST_SheetState._CF_enumeration.addEnumeration(unicode_value=u'hidden')
ST_SheetState.veryHidden = ST_SheetState._CF_enumeration.addEnumeration(unicode_value=u'veryHidden')
ST_SheetState._InitializeFacetMap(ST_SheetState._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_SheetState', ST_SheetState)

# Atomic SimpleTypeDefinition
class ST_TargetScreenSize (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Target Screen Size Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_TargetScreenSize')
    _Documentation = u'Target Screen Size Types'
ST_TargetScreenSize._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TargetScreenSize, enum_prefix=None)
ST_TargetScreenSize.n544x376 = ST_TargetScreenSize._CF_enumeration.addEnumeration(unicode_value=u'544x376')
ST_TargetScreenSize.n640x480 = ST_TargetScreenSize._CF_enumeration.addEnumeration(unicode_value=u'640x480')
ST_TargetScreenSize.n720x512 = ST_TargetScreenSize._CF_enumeration.addEnumeration(unicode_value=u'720x512')
ST_TargetScreenSize.n800x600 = ST_TargetScreenSize._CF_enumeration.addEnumeration(unicode_value=u'800x600')
ST_TargetScreenSize.n1024x768 = ST_TargetScreenSize._CF_enumeration.addEnumeration(unicode_value=u'1024x768')
ST_TargetScreenSize.n1152x882 = ST_TargetScreenSize._CF_enumeration.addEnumeration(unicode_value=u'1152x882')
ST_TargetScreenSize.n1152x900 = ST_TargetScreenSize._CF_enumeration.addEnumeration(unicode_value=u'1152x900')
ST_TargetScreenSize.n1280x1024 = ST_TargetScreenSize._CF_enumeration.addEnumeration(unicode_value=u'1280x1024')
ST_TargetScreenSize.n1600x1200 = ST_TargetScreenSize._CF_enumeration.addEnumeration(unicode_value=u'1600x1200')
ST_TargetScreenSize.n1800x1440 = ST_TargetScreenSize._CF_enumeration.addEnumeration(unicode_value=u'1800x1440')
ST_TargetScreenSize.n1920x1200 = ST_TargetScreenSize._CF_enumeration.addEnumeration(unicode_value=u'1920x1200')
ST_TargetScreenSize._InitializeFacetMap(ST_TargetScreenSize._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_TargetScreenSize', ST_TargetScreenSize)

# Atomic SimpleTypeDefinition
class ST_GrowShrinkType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Grow Shrink Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_GrowShrinkType')
    _Documentation = u'Grow Shrink Type'
ST_GrowShrinkType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_GrowShrinkType, enum_prefix=None)
ST_GrowShrinkType.insertDelete = ST_GrowShrinkType._CF_enumeration.addEnumeration(unicode_value=u'insertDelete')
ST_GrowShrinkType.insertClear = ST_GrowShrinkType._CF_enumeration.addEnumeration(unicode_value=u'insertClear')
ST_GrowShrinkType.overwriteClear = ST_GrowShrinkType._CF_enumeration.addEnumeration(unicode_value=u'overwriteClear')
ST_GrowShrinkType._InitializeFacetMap(ST_GrowShrinkType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_GrowShrinkType', ST_GrowShrinkType)

# Atomic SimpleTypeDefinition
class ST_PaneState (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Pane State"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_PaneState')
    _Documentation = u'Pane State'
ST_PaneState._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PaneState, enum_prefix=None)
ST_PaneState.split = ST_PaneState._CF_enumeration.addEnumeration(unicode_value=u'split')
ST_PaneState.frozen = ST_PaneState._CF_enumeration.addEnumeration(unicode_value=u'frozen')
ST_PaneState.frozenSplit = ST_PaneState._CF_enumeration.addEnumeration(unicode_value=u'frozenSplit')
ST_PaneState._InitializeFacetMap(ST_PaneState._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_PaneState', ST_PaneState)

# Atomic SimpleTypeDefinition
class ST_MdxSetOrder (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """MDX Set Order"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_MdxSetOrder')
    _Documentation = u'MDX Set Order'
ST_MdxSetOrder._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_MdxSetOrder, enum_prefix=None)
ST_MdxSetOrder.u = ST_MdxSetOrder._CF_enumeration.addEnumeration(unicode_value=u'u')
ST_MdxSetOrder.a = ST_MdxSetOrder._CF_enumeration.addEnumeration(unicode_value=u'a')
ST_MdxSetOrder.d = ST_MdxSetOrder._CF_enumeration.addEnumeration(unicode_value=u'd')
ST_MdxSetOrder.aa = ST_MdxSetOrder._CF_enumeration.addEnumeration(unicode_value=u'aa')
ST_MdxSetOrder.ad = ST_MdxSetOrder._CF_enumeration.addEnumeration(unicode_value=u'ad')
ST_MdxSetOrder.na = ST_MdxSetOrder._CF_enumeration.addEnumeration(unicode_value=u'na')
ST_MdxSetOrder.nd = ST_MdxSetOrder._CF_enumeration.addEnumeration(unicode_value=u'nd')
ST_MdxSetOrder._InitializeFacetMap(ST_MdxSetOrder._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_MdxSetOrder', ST_MdxSetOrder)

# Atomic SimpleTypeDefinition
class ST_FieldSortType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Field Sort Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_FieldSortType')
    _Documentation = u'Field Sort Type'
ST_FieldSortType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FieldSortType, enum_prefix=None)
ST_FieldSortType.manual = ST_FieldSortType._CF_enumeration.addEnumeration(unicode_value=u'manual')
ST_FieldSortType.ascending = ST_FieldSortType._CF_enumeration.addEnumeration(unicode_value=u'ascending')
ST_FieldSortType.descending = ST_FieldSortType._CF_enumeration.addEnumeration(unicode_value=u'descending')
ST_FieldSortType._InitializeFacetMap(ST_FieldSortType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_FieldSortType', ST_FieldSortType)

# Atomic SimpleTypeDefinition
class ST_PivotFilterType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Pivot Filter Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_PivotFilterType')
    _Documentation = u'Pivot Filter Types'
ST_PivotFilterType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PivotFilterType, enum_prefix=None)
ST_PivotFilterType.unknown = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'unknown')
ST_PivotFilterType.count = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'count')
ST_PivotFilterType.percent = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'percent')
ST_PivotFilterType.sum = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'sum')
ST_PivotFilterType.captionEqual = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'captionEqual')
ST_PivotFilterType.captionNotEqual = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'captionNotEqual')
ST_PivotFilterType.captionBeginsWith = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'captionBeginsWith')
ST_PivotFilterType.captionNotBeginsWith = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'captionNotBeginsWith')
ST_PivotFilterType.captionEndsWith = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'captionEndsWith')
ST_PivotFilterType.captionNotEndsWith = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'captionNotEndsWith')
ST_PivotFilterType.captionContains = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'captionContains')
ST_PivotFilterType.captionNotContains = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'captionNotContains')
ST_PivotFilterType.captionGreaterThan = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'captionGreaterThan')
ST_PivotFilterType.captionGreaterThanOrEqual = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'captionGreaterThanOrEqual')
ST_PivotFilterType.captionLessThan = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'captionLessThan')
ST_PivotFilterType.captionLessThanOrEqual = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'captionLessThanOrEqual')
ST_PivotFilterType.captionBetween = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'captionBetween')
ST_PivotFilterType.captionNotBetween = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'captionNotBetween')
ST_PivotFilterType.valueEqual = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'valueEqual')
ST_PivotFilterType.valueNotEqual = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'valueNotEqual')
ST_PivotFilterType.valueGreaterThan = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'valueGreaterThan')
ST_PivotFilterType.valueGreaterThanOrEqual = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'valueGreaterThanOrEqual')
ST_PivotFilterType.valueLessThan = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'valueLessThan')
ST_PivotFilterType.valueLessThanOrEqual = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'valueLessThanOrEqual')
ST_PivotFilterType.valueBetween = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'valueBetween')
ST_PivotFilterType.valueNotBetween = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'valueNotBetween')
ST_PivotFilterType.dateEqual = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'dateEqual')
ST_PivotFilterType.dateNotEqual = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'dateNotEqual')
ST_PivotFilterType.dateOlderThan = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'dateOlderThan')
ST_PivotFilterType.dateOlderThanOrEqual = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'dateOlderThanOrEqual')
ST_PivotFilterType.dateNewerThan = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'dateNewerThan')
ST_PivotFilterType.dateNewerThanOrEqual = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'dateNewerThanOrEqual')
ST_PivotFilterType.dateBetween = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'dateBetween')
ST_PivotFilterType.dateNotBetween = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'dateNotBetween')
ST_PivotFilterType.tomorrow = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'tomorrow')
ST_PivotFilterType.today = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'today')
ST_PivotFilterType.yesterday = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'yesterday')
ST_PivotFilterType.nextWeek = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'nextWeek')
ST_PivotFilterType.thisWeek = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'thisWeek')
ST_PivotFilterType.lastWeek = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'lastWeek')
ST_PivotFilterType.nextMonth = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'nextMonth')
ST_PivotFilterType.thisMonth = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'thisMonth')
ST_PivotFilterType.lastMonth = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'lastMonth')
ST_PivotFilterType.nextQuarter = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'nextQuarter')
ST_PivotFilterType.thisQuarter = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'thisQuarter')
ST_PivotFilterType.lastQuarter = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'lastQuarter')
ST_PivotFilterType.nextYear = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'nextYear')
ST_PivotFilterType.thisYear = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'thisYear')
ST_PivotFilterType.lastYear = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'lastYear')
ST_PivotFilterType.yearToDate = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'yearToDate')
ST_PivotFilterType.Q1 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'Q1')
ST_PivotFilterType.Q2 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'Q2')
ST_PivotFilterType.Q3 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'Q3')
ST_PivotFilterType.Q4 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'Q4')
ST_PivotFilterType.M1 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'M1')
ST_PivotFilterType.M2 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'M2')
ST_PivotFilterType.M3 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'M3')
ST_PivotFilterType.M4 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'M4')
ST_PivotFilterType.M5 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'M5')
ST_PivotFilterType.M6 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'M6')
ST_PivotFilterType.M7 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'M7')
ST_PivotFilterType.M8 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'M8')
ST_PivotFilterType.M9 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'M9')
ST_PivotFilterType.M10 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'M10')
ST_PivotFilterType.M11 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'M11')
ST_PivotFilterType.M12 = ST_PivotFilterType._CF_enumeration.addEnumeration(unicode_value=u'M12')
ST_PivotFilterType._InitializeFacetMap(ST_PivotFilterType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_PivotFilterType', ST_PivotFilterType)

# Atomic SimpleTypeDefinition
class ST_ItemType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """PivotItem Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_ItemType')
    _Documentation = u'PivotItem Type'
ST_ItemType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ItemType, enum_prefix=None)
ST_ItemType.data = ST_ItemType._CF_enumeration.addEnumeration(unicode_value=u'data')
ST_ItemType.default = ST_ItemType._CF_enumeration.addEnumeration(unicode_value=u'default')
ST_ItemType.sum = ST_ItemType._CF_enumeration.addEnumeration(unicode_value=u'sum')
ST_ItemType.countA = ST_ItemType._CF_enumeration.addEnumeration(unicode_value=u'countA')
ST_ItemType.avg = ST_ItemType._CF_enumeration.addEnumeration(unicode_value=u'avg')
ST_ItemType.max = ST_ItemType._CF_enumeration.addEnumeration(unicode_value=u'max')
ST_ItemType.min = ST_ItemType._CF_enumeration.addEnumeration(unicode_value=u'min')
ST_ItemType.product = ST_ItemType._CF_enumeration.addEnumeration(unicode_value=u'product')
ST_ItemType.count = ST_ItemType._CF_enumeration.addEnumeration(unicode_value=u'count')
ST_ItemType.stdDev = ST_ItemType._CF_enumeration.addEnumeration(unicode_value=u'stdDev')
ST_ItemType.stdDevP = ST_ItemType._CF_enumeration.addEnumeration(unicode_value=u'stdDevP')
ST_ItemType.var = ST_ItemType._CF_enumeration.addEnumeration(unicode_value=u'var')
ST_ItemType.varP = ST_ItemType._CF_enumeration.addEnumeration(unicode_value=u'varP')
ST_ItemType.grand = ST_ItemType._CF_enumeration.addEnumeration(unicode_value=u'grand')
ST_ItemType.blank = ST_ItemType._CF_enumeration.addEnumeration(unicode_value=u'blank')
ST_ItemType._InitializeFacetMap(ST_ItemType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_ItemType', ST_ItemType)

# Atomic SimpleTypeDefinition
class ST_CalcMode (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Calculation Mode"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_CalcMode')
    _Documentation = u'Calculation Mode'
ST_CalcMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CalcMode, enum_prefix=None)
ST_CalcMode.manual = ST_CalcMode._CF_enumeration.addEnumeration(unicode_value=u'manual')
ST_CalcMode.auto = ST_CalcMode._CF_enumeration.addEnumeration(unicode_value=u'auto')
ST_CalcMode.autoNoTable = ST_CalcMode._CF_enumeration.addEnumeration(unicode_value=u'autoNoTable')
ST_CalcMode._InitializeFacetMap(ST_CalcMode._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_CalcMode', ST_CalcMode)

# Atomic SimpleTypeDefinition
class ST_RefMode (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Reference Mode"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_RefMode')
    _Documentation = u'Reference Mode'
ST_RefMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_RefMode, enum_prefix=None)
ST_RefMode.A1 = ST_RefMode._CF_enumeration.addEnumeration(unicode_value=u'A1')
ST_RefMode.R1C1 = ST_RefMode._CF_enumeration.addEnumeration(unicode_value=u'R1C1')
ST_RefMode._InitializeFacetMap(ST_RefMode._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_RefMode', ST_RefMode)

# Atomic SimpleTypeDefinition
class ST_SortBy (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Sort By"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_SortBy')
    _Documentation = u'Sort By'
ST_SortBy._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SortBy, enum_prefix=None)
ST_SortBy.value = ST_SortBy._CF_enumeration.addEnumeration(unicode_value=u'value')
ST_SortBy.cellColor = ST_SortBy._CF_enumeration.addEnumeration(unicode_value=u'cellColor')
ST_SortBy.fontColor = ST_SortBy._CF_enumeration.addEnumeration(unicode_value=u'fontColor')
ST_SortBy.icon = ST_SortBy._CF_enumeration.addEnumeration(unicode_value=u'icon')
ST_SortBy._InitializeFacetMap(ST_SortBy._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_SortBy', ST_SortBy)

# Atomic SimpleTypeDefinition
class ST_IconSetType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Icon Set Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_IconSetType')
    _Documentation = u'Icon Set Type'
ST_IconSetType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_IconSetType, enum_prefix=None)
ST_IconSetType.n3Arrows = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'3Arrows')
ST_IconSetType.n3ArrowsGray = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'3ArrowsGray')
ST_IconSetType.n3Flags = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'3Flags')
ST_IconSetType.n3TrafficLights1 = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'3TrafficLights1')
ST_IconSetType.n3TrafficLights2 = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'3TrafficLights2')
ST_IconSetType.n3Signs = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'3Signs')
ST_IconSetType.n3Symbols = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'3Symbols')
ST_IconSetType.n3Symbols2 = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'3Symbols2')
ST_IconSetType.n4Arrows = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'4Arrows')
ST_IconSetType.n4ArrowsGray = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'4ArrowsGray')
ST_IconSetType.n4RedToBlack = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'4RedToBlack')
ST_IconSetType.n4Rating = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'4Rating')
ST_IconSetType.n4TrafficLights = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'4TrafficLights')
ST_IconSetType.n5Arrows = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'5Arrows')
ST_IconSetType.n5ArrowsGray = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'5ArrowsGray')
ST_IconSetType.n5Rating = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'5Rating')
ST_IconSetType.n5Quarters = ST_IconSetType._CF_enumeration.addEnumeration(unicode_value=u'5Quarters')
ST_IconSetType._InitializeFacetMap(ST_IconSetType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_IconSetType', ST_IconSetType)

# Atomic SimpleTypeDefinition
class ST_CellSpan (pyxb.binding.datatypes.string):

    """Cell Span Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_CellSpan')
    _Documentation = u'Cell Span Type'
ST_CellSpan._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ST_CellSpan', ST_CellSpan)

# List SimpleTypeDefinition
# superclasses pyxb.binding.datatypes.anySimpleType
class ST_CellSpans (pyxb.binding.basis.STD_list):

    """Cell Spans"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_CellSpans')
    _Documentation = u'Cell Spans'

    _ItemType = ST_CellSpan
ST_CellSpans._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ST_CellSpans', ST_CellSpans)

# Atomic SimpleTypeDefinition
class ST_SourceType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """PivotCache Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_SourceType')
    _Documentation = u'PivotCache Type'
ST_SourceType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SourceType, enum_prefix=None)
ST_SourceType.worksheet = ST_SourceType._CF_enumeration.addEnumeration(unicode_value=u'worksheet')
ST_SourceType.external = ST_SourceType._CF_enumeration.addEnumeration(unicode_value=u'external')
ST_SourceType.consolidation = ST_SourceType._CF_enumeration.addEnumeration(unicode_value=u'consolidation')
ST_SourceType.scenario = ST_SourceType._CF_enumeration.addEnumeration(unicode_value=u'scenario')
ST_SourceType._InitializeFacetMap(ST_SourceType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_SourceType', ST_SourceType)

# Atomic SimpleTypeDefinition
class ST_CfType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Conditional Format Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_CfType')
    _Documentation = u'Conditional Format Type'
ST_CfType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CfType, enum_prefix=None)
ST_CfType.expression = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'expression')
ST_CfType.cellIs = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'cellIs')
ST_CfType.colorScale = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'colorScale')
ST_CfType.dataBar = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'dataBar')
ST_CfType.iconSet = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'iconSet')
ST_CfType.top10 = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'top10')
ST_CfType.uniqueValues = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'uniqueValues')
ST_CfType.duplicateValues = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'duplicateValues')
ST_CfType.containsText = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'containsText')
ST_CfType.notContainsText = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'notContainsText')
ST_CfType.beginsWith = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'beginsWith')
ST_CfType.endsWith = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'endsWith')
ST_CfType.containsBlanks = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'containsBlanks')
ST_CfType.notContainsBlanks = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'notContainsBlanks')
ST_CfType.containsErrors = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'containsErrors')
ST_CfType.notContainsErrors = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'notContainsErrors')
ST_CfType.timePeriod = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'timePeriod')
ST_CfType.aboveAverage = ST_CfType._CF_enumeration.addEnumeration(unicode_value=u'aboveAverage')
ST_CfType._InitializeFacetMap(ST_CfType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_CfType', ST_CfType)

# Atomic SimpleTypeDefinition
class ST_TimePeriod (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Time Period Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_TimePeriod')
    _Documentation = u'Time Period Types'
ST_TimePeriod._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TimePeriod, enum_prefix=None)
ST_TimePeriod.today = ST_TimePeriod._CF_enumeration.addEnumeration(unicode_value=u'today')
ST_TimePeriod.yesterday = ST_TimePeriod._CF_enumeration.addEnumeration(unicode_value=u'yesterday')
ST_TimePeriod.tomorrow = ST_TimePeriod._CF_enumeration.addEnumeration(unicode_value=u'tomorrow')
ST_TimePeriod.last7Days = ST_TimePeriod._CF_enumeration.addEnumeration(unicode_value=u'last7Days')
ST_TimePeriod.thisMonth = ST_TimePeriod._CF_enumeration.addEnumeration(unicode_value=u'thisMonth')
ST_TimePeriod.lastMonth = ST_TimePeriod._CF_enumeration.addEnumeration(unicode_value=u'lastMonth')
ST_TimePeriod.nextMonth = ST_TimePeriod._CF_enumeration.addEnumeration(unicode_value=u'nextMonth')
ST_TimePeriod.thisWeek = ST_TimePeriod._CF_enumeration.addEnumeration(unicode_value=u'thisWeek')
ST_TimePeriod.lastWeek = ST_TimePeriod._CF_enumeration.addEnumeration(unicode_value=u'lastWeek')
ST_TimePeriod.nextWeek = ST_TimePeriod._CF_enumeration.addEnumeration(unicode_value=u'nextWeek')
ST_TimePeriod._InitializeFacetMap(ST_TimePeriod._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_TimePeriod', ST_TimePeriod)

# Atomic SimpleTypeDefinition
class ST_ConditionalFormattingOperator (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Conditional Format Operators"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_ConditionalFormattingOperator')
    _Documentation = u'Conditional Format Operators'
ST_ConditionalFormattingOperator._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ConditionalFormattingOperator, enum_prefix=None)
ST_ConditionalFormattingOperator.lessThan = ST_ConditionalFormattingOperator._CF_enumeration.addEnumeration(unicode_value=u'lessThan')
ST_ConditionalFormattingOperator.lessThanOrEqual = ST_ConditionalFormattingOperator._CF_enumeration.addEnumeration(unicode_value=u'lessThanOrEqual')
ST_ConditionalFormattingOperator.equal = ST_ConditionalFormattingOperator._CF_enumeration.addEnumeration(unicode_value=u'equal')
ST_ConditionalFormattingOperator.notEqual = ST_ConditionalFormattingOperator._CF_enumeration.addEnumeration(unicode_value=u'notEqual')
ST_ConditionalFormattingOperator.greaterThanOrEqual = ST_ConditionalFormattingOperator._CF_enumeration.addEnumeration(unicode_value=u'greaterThanOrEqual')
ST_ConditionalFormattingOperator.greaterThan = ST_ConditionalFormattingOperator._CF_enumeration.addEnumeration(unicode_value=u'greaterThan')
ST_ConditionalFormattingOperator.between = ST_ConditionalFormattingOperator._CF_enumeration.addEnumeration(unicode_value=u'between')
ST_ConditionalFormattingOperator.notBetween = ST_ConditionalFormattingOperator._CF_enumeration.addEnumeration(unicode_value=u'notBetween')
ST_ConditionalFormattingOperator.containsText = ST_ConditionalFormattingOperator._CF_enumeration.addEnumeration(unicode_value=u'containsText')
ST_ConditionalFormattingOperator.notContains = ST_ConditionalFormattingOperator._CF_enumeration.addEnumeration(unicode_value=u'notContains')
ST_ConditionalFormattingOperator.beginsWith = ST_ConditionalFormattingOperator._CF_enumeration.addEnumeration(unicode_value=u'beginsWith')
ST_ConditionalFormattingOperator.endsWith = ST_ConditionalFormattingOperator._CF_enumeration.addEnumeration(unicode_value=u'endsWith')
ST_ConditionalFormattingOperator._InitializeFacetMap(ST_ConditionalFormattingOperator._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_ConditionalFormattingOperator', ST_ConditionalFormattingOperator)

# Atomic SimpleTypeDefinition
class ST_PatternType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Pattern Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_PatternType')
    _Documentation = u'Pattern Type'
ST_PatternType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_PatternType, enum_prefix=None)
ST_PatternType.none = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_PatternType.solid = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'solid')
ST_PatternType.mediumGray = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'mediumGray')
ST_PatternType.darkGray = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'darkGray')
ST_PatternType.lightGray = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'lightGray')
ST_PatternType.darkHorizontal = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'darkHorizontal')
ST_PatternType.darkVertical = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'darkVertical')
ST_PatternType.darkDown = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'darkDown')
ST_PatternType.darkUp = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'darkUp')
ST_PatternType.darkGrid = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'darkGrid')
ST_PatternType.darkTrellis = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'darkTrellis')
ST_PatternType.lightHorizontal = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'lightHorizontal')
ST_PatternType.lightVertical = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'lightVertical')
ST_PatternType.lightDown = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'lightDown')
ST_PatternType.lightUp = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'lightUp')
ST_PatternType.lightGrid = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'lightGrid')
ST_PatternType.lightTrellis = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'lightTrellis')
ST_PatternType.gray125 = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'gray125')
ST_PatternType.gray0625 = ST_PatternType._CF_enumeration.addEnumeration(unicode_value=u'gray0625')
ST_PatternType._InitializeFacetMap(ST_PatternType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_PatternType', ST_PatternType)

# Atomic SimpleTypeDefinition
class ST_Objects (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Object Display Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_Objects')
    _Documentation = u'Object Display Types'
ST_Objects._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Objects, enum_prefix=None)
ST_Objects.all = ST_Objects._CF_enumeration.addEnumeration(unicode_value=u'all')
ST_Objects.placeholders = ST_Objects._CF_enumeration.addEnumeration(unicode_value=u'placeholders')
ST_Objects.none = ST_Objects._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_Objects._InitializeFacetMap(ST_Objects._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_Objects', ST_Objects)

# Atomic SimpleTypeDefinition
class ST_UpdateLinks (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Update Links Behavior Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_UpdateLinks')
    _Documentation = u'Update Links Behavior Types'
ST_UpdateLinks._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_UpdateLinks, enum_prefix=None)
ST_UpdateLinks.userSet = ST_UpdateLinks._CF_enumeration.addEnumeration(unicode_value=u'userSet')
ST_UpdateLinks.never = ST_UpdateLinks._CF_enumeration.addEnumeration(unicode_value=u'never')
ST_UpdateLinks.always = ST_UpdateLinks._CF_enumeration.addEnumeration(unicode_value=u'always')
ST_UpdateLinks._InitializeFacetMap(ST_UpdateLinks._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_UpdateLinks', ST_UpdateLinks)

# Atomic SimpleTypeDefinition
class ST_WebSourceType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Web Source Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_WebSourceType')
    _Documentation = u'Web Source Type'
ST_WebSourceType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_WebSourceType, enum_prefix=None)
ST_WebSourceType.sheet = ST_WebSourceType._CF_enumeration.addEnumeration(unicode_value=u'sheet')
ST_WebSourceType.printArea = ST_WebSourceType._CF_enumeration.addEnumeration(unicode_value=u'printArea')
ST_WebSourceType.autoFilter = ST_WebSourceType._CF_enumeration.addEnumeration(unicode_value=u'autoFilter')
ST_WebSourceType.range = ST_WebSourceType._CF_enumeration.addEnumeration(unicode_value=u'range')
ST_WebSourceType.chart = ST_WebSourceType._CF_enumeration.addEnumeration(unicode_value=u'chart')
ST_WebSourceType.pivotTable = ST_WebSourceType._CF_enumeration.addEnumeration(unicode_value=u'pivotTable')
ST_WebSourceType.query = ST_WebSourceType._CF_enumeration.addEnumeration(unicode_value=u'query')
ST_WebSourceType.label = ST_WebSourceType._CF_enumeration.addEnumeration(unicode_value=u'label')
ST_WebSourceType._InitializeFacetMap(ST_WebSourceType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_WebSourceType', ST_WebSourceType)

# Atomic SimpleTypeDefinition
class ST_TextVAlign (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Comment Text Vertical Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_TextVAlign')
    _Documentation = u'Comment Text Vertical Alignment'
ST_TextVAlign._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextVAlign, enum_prefix=None)
ST_TextVAlign.top = ST_TextVAlign._CF_enumeration.addEnumeration(unicode_value=u'top')
ST_TextVAlign.center = ST_TextVAlign._CF_enumeration.addEnumeration(unicode_value=u'center')
ST_TextVAlign.bottom = ST_TextVAlign._CF_enumeration.addEnumeration(unicode_value=u'bottom')
ST_TextVAlign.justify = ST_TextVAlign._CF_enumeration.addEnumeration(unicode_value=u'justify')
ST_TextVAlign.distributed = ST_TextVAlign._CF_enumeration.addEnumeration(unicode_value=u'distributed')
ST_TextVAlign._InitializeFacetMap(ST_TextVAlign._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_TextVAlign', ST_TextVAlign)

# Atomic SimpleTypeDefinition
class ST_TextHAlign (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Comment Text Horizontal Alignment"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_TextHAlign')
    _Documentation = u'Comment Text Horizontal Alignment'
ST_TextHAlign._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TextHAlign, enum_prefix=None)
ST_TextHAlign.left = ST_TextHAlign._CF_enumeration.addEnumeration(unicode_value=u'left')
ST_TextHAlign.center = ST_TextHAlign._CF_enumeration.addEnumeration(unicode_value=u'center')
ST_TextHAlign.right = ST_TextHAlign._CF_enumeration.addEnumeration(unicode_value=u'right')
ST_TextHAlign.justify = ST_TextHAlign._CF_enumeration.addEnumeration(unicode_value=u'justify')
ST_TextHAlign.distributed = ST_TextHAlign._CF_enumeration.addEnumeration(unicode_value=u'distributed')
ST_TextHAlign._InitializeFacetMap(ST_TextHAlign._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_TextHAlign', ST_TextHAlign)

# Atomic SimpleTypeDefinition
class ST_SheetViewType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Sheet View Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_SheetViewType')
    _Documentation = u'Sheet View Type'
ST_SheetViewType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SheetViewType, enum_prefix=None)
ST_SheetViewType.normal = ST_SheetViewType._CF_enumeration.addEnumeration(unicode_value=u'normal')
ST_SheetViewType.pageBreakPreview = ST_SheetViewType._CF_enumeration.addEnumeration(unicode_value=u'pageBreakPreview')
ST_SheetViewType.pageLayout = ST_SheetViewType._CF_enumeration.addEnumeration(unicode_value=u'pageLayout')
ST_SheetViewType._InitializeFacetMap(ST_SheetViewType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_SheetViewType', ST_SheetViewType)

# Atomic SimpleTypeDefinition
class ST_FormulaExpression (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Formula Expression Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_FormulaExpression')
    _Documentation = u'Formula Expression Type'
ST_FormulaExpression._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FormulaExpression, enum_prefix=None)
ST_FormulaExpression.ref = ST_FormulaExpression._CF_enumeration.addEnumeration(unicode_value=u'ref')
ST_FormulaExpression.refError = ST_FormulaExpression._CF_enumeration.addEnumeration(unicode_value=u'refError')
ST_FormulaExpression.area = ST_FormulaExpression._CF_enumeration.addEnumeration(unicode_value=u'area')
ST_FormulaExpression.areaError = ST_FormulaExpression._CF_enumeration.addEnumeration(unicode_value=u'areaError')
ST_FormulaExpression.computedArea = ST_FormulaExpression._CF_enumeration.addEnumeration(unicode_value=u'computedArea')
ST_FormulaExpression._InitializeFacetMap(ST_FormulaExpression._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_FormulaExpression', ST_FormulaExpression)

# Atomic SimpleTypeDefinition
class ST_RefA (pyxb.binding.datatypes.string):

    """Single Cell Reference"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_RefA')
    _Documentation = u'Single Cell Reference'
ST_RefA._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', u'ST_RefA', ST_RefA)

# Atomic SimpleTypeDefinition
class ST_HtmlFmt (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """HTML Formatting Handling"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_HtmlFmt')
    _Documentation = u'HTML Formatting Handling'
ST_HtmlFmt._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_HtmlFmt, enum_prefix=None)
ST_HtmlFmt.none = ST_HtmlFmt._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_HtmlFmt.rtf = ST_HtmlFmt._CF_enumeration.addEnumeration(unicode_value=u'rtf')
ST_HtmlFmt.all = ST_HtmlFmt._CF_enumeration.addEnumeration(unicode_value=u'all')
ST_HtmlFmt._InitializeFacetMap(ST_HtmlFmt._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_HtmlFmt', ST_HtmlFmt)

# Atomic SimpleTypeDefinition
class ST_DateTimeGrouping (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Date Time Grouping"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_DateTimeGrouping')
    _Documentation = u'Date Time Grouping'
ST_DateTimeGrouping._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DateTimeGrouping, enum_prefix=None)
ST_DateTimeGrouping.year = ST_DateTimeGrouping._CF_enumeration.addEnumeration(unicode_value=u'year')
ST_DateTimeGrouping.month = ST_DateTimeGrouping._CF_enumeration.addEnumeration(unicode_value=u'month')
ST_DateTimeGrouping.day = ST_DateTimeGrouping._CF_enumeration.addEnumeration(unicode_value=u'day')
ST_DateTimeGrouping.hour = ST_DateTimeGrouping._CF_enumeration.addEnumeration(unicode_value=u'hour')
ST_DateTimeGrouping.minute = ST_DateTimeGrouping._CF_enumeration.addEnumeration(unicode_value=u'minute')
ST_DateTimeGrouping.second = ST_DateTimeGrouping._CF_enumeration.addEnumeration(unicode_value=u'second')
ST_DateTimeGrouping._InitializeFacetMap(ST_DateTimeGrouping._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_DateTimeGrouping', ST_DateTimeGrouping)

# Atomic SimpleTypeDefinition
class ST_ParameterType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Parameter Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_ParameterType')
    _Documentation = u'Parameter Type'
ST_ParameterType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ParameterType, enum_prefix=None)
ST_ParameterType.prompt = ST_ParameterType._CF_enumeration.addEnumeration(unicode_value=u'prompt')
ST_ParameterType.value = ST_ParameterType._CF_enumeration.addEnumeration(unicode_value=u'value')
ST_ParameterType.cell = ST_ParameterType._CF_enumeration.addEnumeration(unicode_value=u'cell')
ST_ParameterType._InitializeFacetMap(ST_ParameterType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_ParameterType', ST_ParameterType)

# Atomic SimpleTypeDefinition
class ST_FilterOperator (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Filter Operator"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_FilterOperator')
    _Documentation = u'Filter Operator'
ST_FilterOperator._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FilterOperator, enum_prefix=None)
ST_FilterOperator.equal = ST_FilterOperator._CF_enumeration.addEnumeration(unicode_value=u'equal')
ST_FilterOperator.lessThan = ST_FilterOperator._CF_enumeration.addEnumeration(unicode_value=u'lessThan')
ST_FilterOperator.lessThanOrEqual = ST_FilterOperator._CF_enumeration.addEnumeration(unicode_value=u'lessThanOrEqual')
ST_FilterOperator.notEqual = ST_FilterOperator._CF_enumeration.addEnumeration(unicode_value=u'notEqual')
ST_FilterOperator.greaterThanOrEqual = ST_FilterOperator._CF_enumeration.addEnumeration(unicode_value=u'greaterThanOrEqual')
ST_FilterOperator.greaterThan = ST_FilterOperator._CF_enumeration.addEnumeration(unicode_value=u'greaterThan')
ST_FilterOperator._InitializeFacetMap(ST_FilterOperator._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_FilterOperator', ST_FilterOperator)

# Atomic SimpleTypeDefinition
class ST_TableStyleType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Table Style Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_TableStyleType')
    _Documentation = u'Table Style Type'
ST_TableStyleType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TableStyleType, enum_prefix=None)
ST_TableStyleType.wholeTable = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'wholeTable')
ST_TableStyleType.headerRow = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'headerRow')
ST_TableStyleType.totalRow = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'totalRow')
ST_TableStyleType.firstColumn = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'firstColumn')
ST_TableStyleType.lastColumn = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'lastColumn')
ST_TableStyleType.firstRowStripe = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'firstRowStripe')
ST_TableStyleType.secondRowStripe = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'secondRowStripe')
ST_TableStyleType.firstColumnStripe = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'firstColumnStripe')
ST_TableStyleType.secondColumnStripe = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'secondColumnStripe')
ST_TableStyleType.firstHeaderCell = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'firstHeaderCell')
ST_TableStyleType.lastHeaderCell = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'lastHeaderCell')
ST_TableStyleType.firstTotalCell = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'firstTotalCell')
ST_TableStyleType.lastTotalCell = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'lastTotalCell')
ST_TableStyleType.firstSubtotalColumn = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'firstSubtotalColumn')
ST_TableStyleType.secondSubtotalColumn = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'secondSubtotalColumn')
ST_TableStyleType.thirdSubtotalColumn = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'thirdSubtotalColumn')
ST_TableStyleType.firstSubtotalRow = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'firstSubtotalRow')
ST_TableStyleType.secondSubtotalRow = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'secondSubtotalRow')
ST_TableStyleType.thirdSubtotalRow = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'thirdSubtotalRow')
ST_TableStyleType.blankRow = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'blankRow')
ST_TableStyleType.firstColumnSubheading = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'firstColumnSubheading')
ST_TableStyleType.secondColumnSubheading = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'secondColumnSubheading')
ST_TableStyleType.thirdColumnSubheading = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'thirdColumnSubheading')
ST_TableStyleType.firstRowSubheading = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'firstRowSubheading')
ST_TableStyleType.secondRowSubheading = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'secondRowSubheading')
ST_TableStyleType.thirdRowSubheading = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'thirdRowSubheading')
ST_TableStyleType.pageFieldLabels = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'pageFieldLabels')
ST_TableStyleType.pageFieldValues = ST_TableStyleType._CF_enumeration.addEnumeration(unicode_value=u'pageFieldValues')
ST_TableStyleType._InitializeFacetMap(ST_TableStyleType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_TableStyleType', ST_TableStyleType)

# Atomic SimpleTypeDefinition
class ST_TotalsRowFunction (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Totals Row Function Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_TotalsRowFunction')
    _Documentation = u'Totals Row Function Types'
ST_TotalsRowFunction._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_TotalsRowFunction, enum_prefix=None)
ST_TotalsRowFunction.none = ST_TotalsRowFunction._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_TotalsRowFunction.sum = ST_TotalsRowFunction._CF_enumeration.addEnumeration(unicode_value=u'sum')
ST_TotalsRowFunction.min = ST_TotalsRowFunction._CF_enumeration.addEnumeration(unicode_value=u'min')
ST_TotalsRowFunction.max = ST_TotalsRowFunction._CF_enumeration.addEnumeration(unicode_value=u'max')
ST_TotalsRowFunction.average = ST_TotalsRowFunction._CF_enumeration.addEnumeration(unicode_value=u'average')
ST_TotalsRowFunction.count = ST_TotalsRowFunction._CF_enumeration.addEnumeration(unicode_value=u'count')
ST_TotalsRowFunction.countNums = ST_TotalsRowFunction._CF_enumeration.addEnumeration(unicode_value=u'countNums')
ST_TotalsRowFunction.stdDev = ST_TotalsRowFunction._CF_enumeration.addEnumeration(unicode_value=u'stdDev')
ST_TotalsRowFunction.var = ST_TotalsRowFunction._CF_enumeration.addEnumeration(unicode_value=u'var')
ST_TotalsRowFunction.custom = ST_TotalsRowFunction._CF_enumeration.addEnumeration(unicode_value=u'custom')
ST_TotalsRowFunction._InitializeFacetMap(ST_TotalsRowFunction._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_TotalsRowFunction', ST_TotalsRowFunction)

# Atomic SimpleTypeDefinition
class ST_CellFormulaType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Formula Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_CellFormulaType')
    _Documentation = u'Formula Type'
ST_CellFormulaType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CellFormulaType, enum_prefix=None)
ST_CellFormulaType.normal = ST_CellFormulaType._CF_enumeration.addEnumeration(unicode_value=u'normal')
ST_CellFormulaType.array = ST_CellFormulaType._CF_enumeration.addEnumeration(unicode_value=u'array')
ST_CellFormulaType.dataTable = ST_CellFormulaType._CF_enumeration.addEnumeration(unicode_value=u'dataTable')
ST_CellFormulaType.shared = ST_CellFormulaType._CF_enumeration.addEnumeration(unicode_value=u'shared')
ST_CellFormulaType._InitializeFacetMap(ST_CellFormulaType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_CellFormulaType', ST_CellFormulaType)

# Atomic SimpleTypeDefinition
class ST_CfvoType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Conditional Format Value Object Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_CfvoType')
    _Documentation = u'Conditional Format Value Object Type'
ST_CfvoType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CfvoType, enum_prefix=None)
ST_CfvoType.num = ST_CfvoType._CF_enumeration.addEnumeration(unicode_value=u'num')
ST_CfvoType.percent = ST_CfvoType._CF_enumeration.addEnumeration(unicode_value=u'percent')
ST_CfvoType.max = ST_CfvoType._CF_enumeration.addEnumeration(unicode_value=u'max')
ST_CfvoType.min = ST_CfvoType._CF_enumeration.addEnumeration(unicode_value=u'min')
ST_CfvoType.formula = ST_CfvoType._CF_enumeration.addEnumeration(unicode_value=u'formula')
ST_CfvoType.percentile = ST_CfvoType._CF_enumeration.addEnumeration(unicode_value=u'percentile')
ST_CfvoType._InitializeFacetMap(ST_CfvoType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_CfvoType', ST_CfvoType)

# Atomic SimpleTypeDefinition
class ST_Comments (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Comment Display Types"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_Comments')
    _Documentation = u'Comment Display Types'
ST_Comments._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Comments, enum_prefix=None)
ST_Comments.commNone = ST_Comments._CF_enumeration.addEnumeration(unicode_value=u'commNone')
ST_Comments.commIndicator = ST_Comments._CF_enumeration.addEnumeration(unicode_value=u'commIndicator')
ST_Comments.commIndAndComment = ST_Comments._CF_enumeration.addEnumeration(unicode_value=u'commIndAndComment')
ST_Comments._InitializeFacetMap(ST_Comments._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_Comments', ST_Comments)

# Atomic SimpleTypeDefinition
class ST_ExternalConnectionType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Text Field Datatype"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_ExternalConnectionType')
    _Documentation = u'Text Field Datatype'
ST_ExternalConnectionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ExternalConnectionType, enum_prefix=None)
ST_ExternalConnectionType.general = ST_ExternalConnectionType._CF_enumeration.addEnumeration(unicode_value=u'general')
ST_ExternalConnectionType.text = ST_ExternalConnectionType._CF_enumeration.addEnumeration(unicode_value=u'text')
ST_ExternalConnectionType.MDY = ST_ExternalConnectionType._CF_enumeration.addEnumeration(unicode_value=u'MDY')
ST_ExternalConnectionType.DMY = ST_ExternalConnectionType._CF_enumeration.addEnumeration(unicode_value=u'DMY')
ST_ExternalConnectionType.YMD = ST_ExternalConnectionType._CF_enumeration.addEnumeration(unicode_value=u'YMD')
ST_ExternalConnectionType.MYD = ST_ExternalConnectionType._CF_enumeration.addEnumeration(unicode_value=u'MYD')
ST_ExternalConnectionType.DYM = ST_ExternalConnectionType._CF_enumeration.addEnumeration(unicode_value=u'DYM')
ST_ExternalConnectionType.YDM = ST_ExternalConnectionType._CF_enumeration.addEnumeration(unicode_value=u'YDM')
ST_ExternalConnectionType.skip = ST_ExternalConnectionType._CF_enumeration.addEnumeration(unicode_value=u'skip')
ST_ExternalConnectionType.EMD = ST_ExternalConnectionType._CF_enumeration.addEnumeration(unicode_value=u'EMD')
ST_ExternalConnectionType._InitializeFacetMap(ST_ExternalConnectionType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_ExternalConnectionType', ST_ExternalConnectionType)

# Atomic SimpleTypeDefinition
class ST_MdxKPIProperty (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """MDX KPI Property"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_MdxKPIProperty')
    _Documentation = u'MDX KPI Property'
ST_MdxKPIProperty._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_MdxKPIProperty, enum_prefix=None)
ST_MdxKPIProperty.v = ST_MdxKPIProperty._CF_enumeration.addEnumeration(unicode_value=u'v')
ST_MdxKPIProperty.g = ST_MdxKPIProperty._CF_enumeration.addEnumeration(unicode_value=u'g')
ST_MdxKPIProperty.s = ST_MdxKPIProperty._CF_enumeration.addEnumeration(unicode_value=u's')
ST_MdxKPIProperty.t = ST_MdxKPIProperty._CF_enumeration.addEnumeration(unicode_value=u't')
ST_MdxKPIProperty.w = ST_MdxKPIProperty._CF_enumeration.addEnumeration(unicode_value=u'w')
ST_MdxKPIProperty.m = ST_MdxKPIProperty._CF_enumeration.addEnumeration(unicode_value=u'm')
ST_MdxKPIProperty._InitializeFacetMap(ST_MdxKPIProperty._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_MdxKPIProperty', ST_MdxKPIProperty)

# Atomic SimpleTypeDefinition
class ST_GroupBy (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Values Group By"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_GroupBy')
    _Documentation = u'Values Group By'
ST_GroupBy._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_GroupBy, enum_prefix=None)
ST_GroupBy.range = ST_GroupBy._CF_enumeration.addEnumeration(unicode_value=u'range')
ST_GroupBy.seconds = ST_GroupBy._CF_enumeration.addEnumeration(unicode_value=u'seconds')
ST_GroupBy.minutes = ST_GroupBy._CF_enumeration.addEnumeration(unicode_value=u'minutes')
ST_GroupBy.hours = ST_GroupBy._CF_enumeration.addEnumeration(unicode_value=u'hours')
ST_GroupBy.days = ST_GroupBy._CF_enumeration.addEnumeration(unicode_value=u'days')
ST_GroupBy.months = ST_GroupBy._CF_enumeration.addEnumeration(unicode_value=u'months')
ST_GroupBy.quarters = ST_GroupBy._CF_enumeration.addEnumeration(unicode_value=u'quarters')
ST_GroupBy.years = ST_GroupBy._CF_enumeration.addEnumeration(unicode_value=u'years')
ST_GroupBy._InitializeFacetMap(ST_GroupBy._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_GroupBy', ST_GroupBy)

# Atomic SimpleTypeDefinition
class ST_DataConsolidateFunction (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Data Consolidation Functions"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_DataConsolidateFunction')
    _Documentation = u'Data Consolidation Functions'
ST_DataConsolidateFunction._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DataConsolidateFunction, enum_prefix=None)
ST_DataConsolidateFunction.average = ST_DataConsolidateFunction._CF_enumeration.addEnumeration(unicode_value=u'average')
ST_DataConsolidateFunction.count = ST_DataConsolidateFunction._CF_enumeration.addEnumeration(unicode_value=u'count')
ST_DataConsolidateFunction.countNums = ST_DataConsolidateFunction._CF_enumeration.addEnumeration(unicode_value=u'countNums')
ST_DataConsolidateFunction.max = ST_DataConsolidateFunction._CF_enumeration.addEnumeration(unicode_value=u'max')
ST_DataConsolidateFunction.min = ST_DataConsolidateFunction._CF_enumeration.addEnumeration(unicode_value=u'min')
ST_DataConsolidateFunction.product = ST_DataConsolidateFunction._CF_enumeration.addEnumeration(unicode_value=u'product')
ST_DataConsolidateFunction.stdDev = ST_DataConsolidateFunction._CF_enumeration.addEnumeration(unicode_value=u'stdDev')
ST_DataConsolidateFunction.stdDevp = ST_DataConsolidateFunction._CF_enumeration.addEnumeration(unicode_value=u'stdDevp')
ST_DataConsolidateFunction.sum = ST_DataConsolidateFunction._CF_enumeration.addEnumeration(unicode_value=u'sum')
ST_DataConsolidateFunction.var = ST_DataConsolidateFunction._CF_enumeration.addEnumeration(unicode_value=u'var')
ST_DataConsolidateFunction.varp = ST_DataConsolidateFunction._CF_enumeration.addEnumeration(unicode_value=u'varp')
ST_DataConsolidateFunction._InitializeFacetMap(ST_DataConsolidateFunction._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_DataConsolidateFunction', ST_DataConsolidateFunction)

# Atomic SimpleTypeDefinition
class ST_ShowDataAs (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Show Data As"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_ShowDataAs')
    _Documentation = u'Show Data As'
ST_ShowDataAs._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_ShowDataAs, enum_prefix=None)
ST_ShowDataAs.normal = ST_ShowDataAs._CF_enumeration.addEnumeration(unicode_value=u'normal')
ST_ShowDataAs.difference = ST_ShowDataAs._CF_enumeration.addEnumeration(unicode_value=u'difference')
ST_ShowDataAs.percent = ST_ShowDataAs._CF_enumeration.addEnumeration(unicode_value=u'percent')
ST_ShowDataAs.percentDiff = ST_ShowDataAs._CF_enumeration.addEnumeration(unicode_value=u'percentDiff')
ST_ShowDataAs.runTotal = ST_ShowDataAs._CF_enumeration.addEnumeration(unicode_value=u'runTotal')
ST_ShowDataAs.percentOfRow = ST_ShowDataAs._CF_enumeration.addEnumeration(unicode_value=u'percentOfRow')
ST_ShowDataAs.percentOfCol = ST_ShowDataAs._CF_enumeration.addEnumeration(unicode_value=u'percentOfCol')
ST_ShowDataAs.percentOfTotal = ST_ShowDataAs._CF_enumeration.addEnumeration(unicode_value=u'percentOfTotal')
ST_ShowDataAs.index = ST_ShowDataAs._CF_enumeration.addEnumeration(unicode_value=u'index')
ST_ShowDataAs._InitializeFacetMap(ST_ShowDataAs._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_ShowDataAs', ST_ShowDataAs)

# Atomic SimpleTypeDefinition
class ST_Type (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Top N Evaluation Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_Type')
    _Documentation = u'Top N Evaluation Type'
ST_Type._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Type, enum_prefix=None)
ST_Type.none = ST_Type._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_Type.all = ST_Type._CF_enumeration.addEnumeration(unicode_value=u'all')
ST_Type.row = ST_Type._CF_enumeration.addEnumeration(unicode_value=u'row')
ST_Type.column = ST_Type._CF_enumeration.addEnumeration(unicode_value=u'column')
ST_Type._InitializeFacetMap(ST_Type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_Type', ST_Type)

# Atomic SimpleTypeDefinition
class ST_Scope (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Conditional Formatting Scope"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_Scope')
    _Documentation = u'Conditional Formatting Scope'
ST_Scope._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Scope, enum_prefix=None)
ST_Scope.selection = ST_Scope._CF_enumeration.addEnumeration(unicode_value=u'selection')
ST_Scope.data = ST_Scope._CF_enumeration.addEnumeration(unicode_value=u'data')
ST_Scope.field = ST_Scope._CF_enumeration.addEnumeration(unicode_value=u'field')
ST_Scope._InitializeFacetMap(ST_Scope._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_Scope', ST_Scope)

# Atomic SimpleTypeDefinition
class ST_MdxFunctionType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """MDX Function Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_MdxFunctionType')
    _Documentation = u'MDX Function Type'
ST_MdxFunctionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_MdxFunctionType, enum_prefix=None)
ST_MdxFunctionType.m = ST_MdxFunctionType._CF_enumeration.addEnumeration(unicode_value=u'm')
ST_MdxFunctionType.v = ST_MdxFunctionType._CF_enumeration.addEnumeration(unicode_value=u'v')
ST_MdxFunctionType.s = ST_MdxFunctionType._CF_enumeration.addEnumeration(unicode_value=u's')
ST_MdxFunctionType.c = ST_MdxFunctionType._CF_enumeration.addEnumeration(unicode_value=u'c')
ST_MdxFunctionType.r = ST_MdxFunctionType._CF_enumeration.addEnumeration(unicode_value=u'r')
ST_MdxFunctionType.p = ST_MdxFunctionType._CF_enumeration.addEnumeration(unicode_value=u'p')
ST_MdxFunctionType.k = ST_MdxFunctionType._CF_enumeration.addEnumeration(unicode_value=u'k')
ST_MdxFunctionType._InitializeFacetMap(ST_MdxFunctionType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_MdxFunctionType', ST_MdxFunctionType)

# Atomic SimpleTypeDefinition
class ST_FileType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """File Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_FileType')
    _Documentation = u'File Type'
ST_FileType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_FileType, enum_prefix=None)
ST_FileType.mac = ST_FileType._CF_enumeration.addEnumeration(unicode_value=u'mac')
ST_FileType.win = ST_FileType._CF_enumeration.addEnumeration(unicode_value=u'win')
ST_FileType.dos = ST_FileType._CF_enumeration.addEnumeration(unicode_value=u'dos')
ST_FileType.lin = ST_FileType._CF_enumeration.addEnumeration(unicode_value=u'lin')
ST_FileType.other = ST_FileType._CF_enumeration.addEnumeration(unicode_value=u'other')
ST_FileType._InitializeFacetMap(ST_FileType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_FileType', ST_FileType)

# Atomic SimpleTypeDefinition
class ST_Qualifier (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Qualifier"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_Qualifier')
    _Documentation = u'Qualifier'
ST_Qualifier._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_Qualifier, enum_prefix=None)
ST_Qualifier.doubleQuote = ST_Qualifier._CF_enumeration.addEnumeration(unicode_value=u'doubleQuote')
ST_Qualifier.singleQuote = ST_Qualifier._CF_enumeration.addEnumeration(unicode_value=u'singleQuote')
ST_Qualifier.none = ST_Qualifier._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_Qualifier._InitializeFacetMap(ST_Qualifier._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_Qualifier', ST_Qualifier)

# Atomic SimpleTypeDefinition
class ST_CredMethod (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Credentials Method"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_CredMethod')
    _Documentation = u'Credentials Method'
ST_CredMethod._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_CredMethod, enum_prefix=None)
ST_CredMethod.integrated = ST_CredMethod._CF_enumeration.addEnumeration(unicode_value=u'integrated')
ST_CredMethod.none = ST_CredMethod._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_CredMethod.stored = ST_CredMethod._CF_enumeration.addEnumeration(unicode_value=u'stored')
ST_CredMethod.prompt = ST_CredMethod._CF_enumeration.addEnumeration(unicode_value=u'prompt')
ST_CredMethod._InitializeFacetMap(ST_CredMethod._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_CredMethod', ST_CredMethod)

# Atomic SimpleTypeDefinition
class ST_DataValidationType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Data Validation Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_DataValidationType')
    _Documentation = u'Data Validation Type'
ST_DataValidationType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DataValidationType, enum_prefix=None)
ST_DataValidationType.none = ST_DataValidationType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_DataValidationType.whole = ST_DataValidationType._CF_enumeration.addEnumeration(unicode_value=u'whole')
ST_DataValidationType.decimal = ST_DataValidationType._CF_enumeration.addEnumeration(unicode_value=u'decimal')
ST_DataValidationType.list = ST_DataValidationType._CF_enumeration.addEnumeration(unicode_value=u'list')
ST_DataValidationType.date = ST_DataValidationType._CF_enumeration.addEnumeration(unicode_value=u'date')
ST_DataValidationType.time = ST_DataValidationType._CF_enumeration.addEnumeration(unicode_value=u'time')
ST_DataValidationType.textLength = ST_DataValidationType._CF_enumeration.addEnumeration(unicode_value=u'textLength')
ST_DataValidationType.custom = ST_DataValidationType._CF_enumeration.addEnumeration(unicode_value=u'custom')
ST_DataValidationType._InitializeFacetMap(ST_DataValidationType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_DataValidationType', ST_DataValidationType)

# Atomic SimpleTypeDefinition
class ST_DataValidationErrorStyle (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Data Validation Error Styles"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_DataValidationErrorStyle')
    _Documentation = u'Data Validation Error Styles'
ST_DataValidationErrorStyle._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DataValidationErrorStyle, enum_prefix=None)
ST_DataValidationErrorStyle.stop = ST_DataValidationErrorStyle._CF_enumeration.addEnumeration(unicode_value=u'stop')
ST_DataValidationErrorStyle.warning = ST_DataValidationErrorStyle._CF_enumeration.addEnumeration(unicode_value=u'warning')
ST_DataValidationErrorStyle.information = ST_DataValidationErrorStyle._CF_enumeration.addEnumeration(unicode_value=u'information')
ST_DataValidationErrorStyle._InitializeFacetMap(ST_DataValidationErrorStyle._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_DataValidationErrorStyle', ST_DataValidationErrorStyle)

# Atomic SimpleTypeDefinition
class ST_DataValidationOperator (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Data Validation Operator"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_DataValidationOperator')
    _Documentation = u'Data Validation Operator'
ST_DataValidationOperator._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DataValidationOperator, enum_prefix=None)
ST_DataValidationOperator.between = ST_DataValidationOperator._CF_enumeration.addEnumeration(unicode_value=u'between')
ST_DataValidationOperator.notBetween = ST_DataValidationOperator._CF_enumeration.addEnumeration(unicode_value=u'notBetween')
ST_DataValidationOperator.equal = ST_DataValidationOperator._CF_enumeration.addEnumeration(unicode_value=u'equal')
ST_DataValidationOperator.notEqual = ST_DataValidationOperator._CF_enumeration.addEnumeration(unicode_value=u'notEqual')
ST_DataValidationOperator.lessThan = ST_DataValidationOperator._CF_enumeration.addEnumeration(unicode_value=u'lessThan')
ST_DataValidationOperator.lessThanOrEqual = ST_DataValidationOperator._CF_enumeration.addEnumeration(unicode_value=u'lessThanOrEqual')
ST_DataValidationOperator.greaterThan = ST_DataValidationOperator._CF_enumeration.addEnumeration(unicode_value=u'greaterThan')
ST_DataValidationOperator.greaterThanOrEqual = ST_DataValidationOperator._CF_enumeration.addEnumeration(unicode_value=u'greaterThanOrEqual')
ST_DataValidationOperator._InitializeFacetMap(ST_DataValidationOperator._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_DataValidationOperator', ST_DataValidationOperator)

# Atomic SimpleTypeDefinition
class ST_DataValidationImeMode (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Data Validation IME Mode"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_DataValidationImeMode')
    _Documentation = u'Data Validation IME Mode'
ST_DataValidationImeMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_DataValidationImeMode, enum_prefix=None)
ST_DataValidationImeMode.noControl = ST_DataValidationImeMode._CF_enumeration.addEnumeration(unicode_value=u'noControl')
ST_DataValidationImeMode.off = ST_DataValidationImeMode._CF_enumeration.addEnumeration(unicode_value=u'off')
ST_DataValidationImeMode.on = ST_DataValidationImeMode._CF_enumeration.addEnumeration(unicode_value=u'on')
ST_DataValidationImeMode.disabled = ST_DataValidationImeMode._CF_enumeration.addEnumeration(unicode_value=u'disabled')
ST_DataValidationImeMode.hiragana = ST_DataValidationImeMode._CF_enumeration.addEnumeration(unicode_value=u'hiragana')
ST_DataValidationImeMode.fullKatakana = ST_DataValidationImeMode._CF_enumeration.addEnumeration(unicode_value=u'fullKatakana')
ST_DataValidationImeMode.halfKatakana = ST_DataValidationImeMode._CF_enumeration.addEnumeration(unicode_value=u'halfKatakana')
ST_DataValidationImeMode.fullAlpha = ST_DataValidationImeMode._CF_enumeration.addEnumeration(unicode_value=u'fullAlpha')
ST_DataValidationImeMode.halfAlpha = ST_DataValidationImeMode._CF_enumeration.addEnumeration(unicode_value=u'halfAlpha')
ST_DataValidationImeMode.fullHangul = ST_DataValidationImeMode._CF_enumeration.addEnumeration(unicode_value=u'fullHangul')
ST_DataValidationImeMode.halfHangul = ST_DataValidationImeMode._CF_enumeration.addEnumeration(unicode_value=u'halfHangul')
ST_DataValidationImeMode._InitializeFacetMap(ST_DataValidationImeMode._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_DataValidationImeMode', ST_DataValidationImeMode)

# Atomic SimpleTypeDefinition
class ST_rwColActionType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Row Column Action Type"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_rwColActionType')
    _Documentation = u'Row Column Action Type'
ST_rwColActionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_rwColActionType, enum_prefix=None)
ST_rwColActionType.insertRow = ST_rwColActionType._CF_enumeration.addEnumeration(unicode_value=u'insertRow')
ST_rwColActionType.deleteRow = ST_rwColActionType._CF_enumeration.addEnumeration(unicode_value=u'deleteRow')
ST_rwColActionType.insertCol = ST_rwColActionType._CF_enumeration.addEnumeration(unicode_value=u'insertCol')
ST_rwColActionType.deleteCol = ST_rwColActionType._CF_enumeration.addEnumeration(unicode_value=u'deleteCol')
ST_rwColActionType._InitializeFacetMap(ST_rwColActionType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_rwColActionType', ST_rwColActionType)

# Atomic SimpleTypeDefinition
class ST_SortType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Set Sort Order"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ST_SortType')
    _Documentation = u'Set Sort Order'
ST_SortType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ST_SortType, enum_prefix=None)
ST_SortType.none = ST_SortType._CF_enumeration.addEnumeration(unicode_value=u'none')
ST_SortType.ascending = ST_SortType._CF_enumeration.addEnumeration(unicode_value=u'ascending')
ST_SortType.descending = ST_SortType._CF_enumeration.addEnumeration(unicode_value=u'descending')
ST_SortType.ascendingAlpha = ST_SortType._CF_enumeration.addEnumeration(unicode_value=u'ascendingAlpha')
ST_SortType.descendingAlpha = ST_SortType._CF_enumeration.addEnumeration(unicode_value=u'descendingAlpha')
ST_SortType.ascendingNatural = ST_SortType._CF_enumeration.addEnumeration(unicode_value=u'ascendingNatural')
ST_SortType.descendingNatural = ST_SortType._CF_enumeration.addEnumeration(unicode_value=u'descendingNatural')
ST_SortType._InitializeFacetMap(ST_SortType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', u'ST_SortType', ST_SortType)

# Complex type CT_FieldsUsage with content type ELEMENT_ONLY
class CT_FieldsUsage (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_FieldsUsage')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}fieldUsage uses Python identifier fieldUsage
    __fieldUsage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fieldUsage'), 'fieldUsage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FieldsUsage_httpschemas_openxmlformats_orgspreadsheetml2006mainfieldUsage', True)

    
    fieldUsage = property(__fieldUsage.value, __fieldUsage.set, None, u'PivotCache Field Id')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FieldsUsage_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Field Count')


    _ElementMap = {
        __fieldUsage.name() : __fieldUsage
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_FieldsUsage', CT_FieldsUsage)


# Complex type CT_SingleXmlCells with content type ELEMENT_ONLY
class CT_SingleXmlCells (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SingleXmlCells')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}singleXmlCell uses Python identifier singleXmlCell
    __singleXmlCell = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'singleXmlCell'), 'singleXmlCell', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SingleXmlCells_httpschemas_openxmlformats_orgspreadsheetml2006mainsingleXmlCell', True)

    
    singleXmlCell = property(__singleXmlCell.value, __singleXmlCell.set, None, u'Table Properties')


    _ElementMap = {
        __singleXmlCell.name() : __singleXmlCell
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_SingleXmlCells', CT_SingleXmlCells)


# Complex type CT_ExtensionList with content type ELEMENT_ONLY
class CT_ExtensionList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ExtensionList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}ext uses Python identifier ext
    __ext = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ext'), 'ext', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExtensionList_httpschemas_openxmlformats_orgspreadsheetml2006mainext', True)

    
    ext = property(__ext.value, __ext.set, None, u'Extension')


    _ElementMap = {
        __ext.name() : __ext
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_ExtensionList', CT_ExtensionList)


# Complex type CT_Color with content type EMPTY
class CT_Color (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Color')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute indexed uses Python identifier indexed
    __indexed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'indexed'), 'indexed', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Color_indexed', pyxb.binding.datatypes.unsignedInt)
    
    indexed = property(__indexed.value, __indexed.set, None, u'Index')

    
    # Attribute auto uses Python identifier auto
    __auto = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'auto'), 'auto', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Color_auto', pyxb.binding.datatypes.boolean)
    
    auto = property(__auto.value, __auto.set, None, u'Automatic')

    
    # Attribute rgb uses Python identifier rgb
    __rgb = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rgb'), 'rgb', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Color_rgb', ST_UnsignedIntHex)
    
    rgb = property(__rgb.value, __rgb.set, None, u'Alpha Red Green Blue Color Value')

    
    # Attribute tint uses Python identifier tint
    __tint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tint'), 'tint', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Color_tint', pyxb.binding.datatypes.double, unicode_default=u'0.0')
    
    tint = property(__tint.value, __tint.set, None, u'Tint')

    
    # Attribute theme uses Python identifier theme
    __theme = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'theme'), 'theme', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Color_theme', pyxb.binding.datatypes.unsignedInt)
    
    theme = property(__theme.value, __theme.set, None, u'Theme Color')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __indexed.name() : __indexed,
        __auto.name() : __auto,
        __rgb.name() : __rgb,
        __tint.name() : __tint,
        __theme.name() : __theme
    }
Namespace.addCategoryObject('typeBinding', u'CT_Color', CT_Color)


# Complex type CT_HeaderFooter with content type ELEMENT_ONLY
class CT_HeaderFooter (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_HeaderFooter')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}evenHeader uses Python identifier evenHeader
    __evenHeader = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'evenHeader'), 'evenHeader', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_HeaderFooter_httpschemas_openxmlformats_orgspreadsheetml2006mainevenHeader', False)

    
    evenHeader = property(__evenHeader.value, __evenHeader.set, None, u'Even Page Header')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}oddFooter uses Python identifier oddFooter
    __oddFooter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'oddFooter'), 'oddFooter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_HeaderFooter_httpschemas_openxmlformats_orgspreadsheetml2006mainoddFooter', False)

    
    oddFooter = property(__oddFooter.value, __oddFooter.set, None, u'Odd Page Footer')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}firstHeader uses Python identifier firstHeader
    __firstHeader = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'firstHeader'), 'firstHeader', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_HeaderFooter_httpschemas_openxmlformats_orgspreadsheetml2006mainfirstHeader', False)

    
    firstHeader = property(__firstHeader.value, __firstHeader.set, None, u'First Page Header')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}evenFooter uses Python identifier evenFooter
    __evenFooter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'evenFooter'), 'evenFooter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_HeaderFooter_httpschemas_openxmlformats_orgspreadsheetml2006mainevenFooter', False)

    
    evenFooter = property(__evenFooter.value, __evenFooter.set, None, u'Even Page Footer')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}firstFooter uses Python identifier firstFooter
    __firstFooter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'firstFooter'), 'firstFooter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_HeaderFooter_httpschemas_openxmlformats_orgspreadsheetml2006mainfirstFooter', False)

    
    firstFooter = property(__firstFooter.value, __firstFooter.set, None, u'First Page Footer')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}oddHeader uses Python identifier oddHeader
    __oddHeader = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'oddHeader'), 'oddHeader', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_HeaderFooter_httpschemas_openxmlformats_orgspreadsheetml2006mainoddHeader', False)

    
    oddHeader = property(__oddHeader.value, __oddHeader.set, None, u'Odd Header')

    
    # Attribute differentFirst uses Python identifier differentFirst
    __differentFirst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'differentFirst'), 'differentFirst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_HeaderFooter_differentFirst', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    differentFirst = property(__differentFirst.value, __differentFirst.set, None, u'Different First Page')

    
    # Attribute differentOddEven uses Python identifier differentOddEven
    __differentOddEven = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'differentOddEven'), 'differentOddEven', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_HeaderFooter_differentOddEven', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    differentOddEven = property(__differentOddEven.value, __differentOddEven.set, None, u'Different Odd Even Header Footer')

    
    # Attribute alignWithMargins uses Python identifier alignWithMargins
    __alignWithMargins = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'alignWithMargins'), 'alignWithMargins', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_HeaderFooter_alignWithMargins', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    alignWithMargins = property(__alignWithMargins.value, __alignWithMargins.set, None, u'Align Margins')

    
    # Attribute scaleWithDoc uses Python identifier scaleWithDoc
    __scaleWithDoc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'scaleWithDoc'), 'scaleWithDoc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_HeaderFooter_scaleWithDoc', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    scaleWithDoc = property(__scaleWithDoc.value, __scaleWithDoc.set, None, u'Scale Header & Footer With Document')


    _ElementMap = {
        __evenHeader.name() : __evenHeader,
        __oddFooter.name() : __oddFooter,
        __firstHeader.name() : __firstHeader,
        __evenFooter.name() : __evenFooter,
        __firstFooter.name() : __firstFooter,
        __oddHeader.name() : __oddHeader
    }
    _AttributeMap = {
        __differentFirst.name() : __differentFirst,
        __differentOddEven.name() : __differentOddEven,
        __alignWithMargins.name() : __alignWithMargins,
        __scaleWithDoc.name() : __scaleWithDoc
    }
Namespace.addCategoryObject('typeBinding', u'CT_HeaderFooter', CT_HeaderFooter)


# Complex type CT_PCDKPIs with content type ELEMENT_ONLY
class CT_PCDKPIs (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PCDKPIs')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}kpi uses Python identifier kpi
    __kpi = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'kpi'), 'kpi', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDKPIs_httpschemas_openxmlformats_orgspreadsheetml2006mainkpi', True)

    
    kpi = property(__kpi.value, __kpi.set, None, u'OLAP KPI')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDKPIs_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'KPI Count')


    _ElementMap = {
        __kpi.name() : __kpi
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_PCDKPIs', CT_PCDKPIs)


# Complex type CT_ExternalRow with content type ELEMENT_ONLY
class CT_ExternalRow (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ExternalRow')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cell uses Python identifier cell
    __cell = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cell'), 'cell', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalRow_httpschemas_openxmlformats_orgspreadsheetml2006maincell', True)

    
    cell = property(__cell.value, __cell.set, None, u'External Cell Data')

    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalRow_r', pyxb.binding.datatypes.unsignedInt, required=True)
    
    r = property(__r.value, __r.set, None, u'Row')


    _ElementMap = {
        __cell.name() : __cell
    }
    _AttributeMap = {
        __r.name() : __r
    }
Namespace.addCategoryObject('typeBinding', u'CT_ExternalRow', CT_ExternalRow)


# Complex type CT_MergeCells with content type ELEMENT_ONLY
class CT_MergeCells (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MergeCells')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}mergeCell uses Python identifier mergeCell
    __mergeCell = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'mergeCell'), 'mergeCell', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MergeCells_httpschemas_openxmlformats_orgspreadsheetml2006mainmergeCell', True)

    
    mergeCell = property(__mergeCell.value, __mergeCell.set, None, u'Merged Cell')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MergeCells_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Count')


    _ElementMap = {
        __mergeCell.name() : __mergeCell
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_MergeCells', CT_MergeCells)


# Complex type CT_Missing with content type ELEMENT_ONLY
class CT_Missing (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Missing')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}x uses Python identifier x
    __x = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'x'), 'x', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Missing_httpschemas_openxmlformats_orgspreadsheetml2006mainx', True)

    
    x = property(__x.value, __x.set, None, u'Member Property Indexes')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tpls uses Python identifier tpls
    __tpls = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tpls'), 'tpls', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Missing_httpschemas_openxmlformats_orgspreadsheetml2006maintpls', True)

    
    tpls = property(__tpls.value, __tpls.set, None, u'Tuples')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Missing_b', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    b = property(__b.value, __b.set, None, u'Bold')

    
    # Attribute un uses Python identifier un
    __un = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'un'), 'un', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Missing_un', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    un = property(__un.value, __un.set, None, u'Underline')

    
    # Attribute cp uses Python identifier cp
    __cp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cp'), 'cp', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Missing_cp', pyxb.binding.datatypes.unsignedInt)
    
    cp = property(__cp.value, __cp.set, None, u'Member Property Count')

    
    # Attribute st uses Python identifier st
    __st = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'st'), 'st', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Missing_st', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    st = property(__st.value, __st.set, None, u'Strikethrough')

    
    # Attribute in uses Python identifier in_
    __in = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'in'), 'in_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Missing_in', pyxb.binding.datatypes.unsignedInt)
    
    in_ = property(__in.value, __in.set, None, u'Format Index')

    
    # Attribute bc uses Python identifier bc
    __bc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bc'), 'bc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Missing_bc', ST_UnsignedIntHex)
    
    bc = property(__bc.value, __bc.set, None, u'background Color')

    
    # Attribute c uses Python identifier c
    __c = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'c'), 'c', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Missing_c', _s.ST_Xstring)
    
    c = property(__c.value, __c.set, None, u'Caption')

    
    # Attribute u uses Python identifier u
    __u = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'u'), 'u', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Missing_u', pyxb.binding.datatypes.boolean)
    
    u = property(__u.value, __u.set, None, u'Unused Item')

    
    # Attribute fc uses Python identifier fc
    __fc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fc'), 'fc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Missing_fc', ST_UnsignedIntHex)
    
    fc = property(__fc.value, __fc.set, None, u'Foreground Color')

    
    # Attribute f uses Python identifier f
    __f = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'f'), 'f', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Missing_f', pyxb.binding.datatypes.boolean)
    
    f = property(__f.value, __f.set, None, u'Calculated Item')

    
    # Attribute i uses Python identifier i
    __i = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'i'), 'i', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Missing_i', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    i = property(__i.value, __i.set, None, u'Italic')


    _ElementMap = {
        __x.name() : __x,
        __tpls.name() : __tpls
    }
    _AttributeMap = {
        __b.name() : __b,
        __un.name() : __un,
        __cp.name() : __cp,
        __st.name() : __st,
        __in.name() : __in,
        __bc.name() : __bc,
        __c.name() : __c,
        __u.name() : __u,
        __fc.name() : __fc,
        __f.name() : __f,
        __i.name() : __i
    }
Namespace.addCategoryObject('typeBinding', u'CT_Missing', CT_Missing)


# Complex type CT_CustomSheetViews with content type ELEMENT_ONLY
class CT_CustomSheetViews (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CustomSheetViews')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}customSheetView uses Python identifier customSheetView
    __customSheetView = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'customSheetView'), 'customSheetView', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetViews_httpschemas_openxmlformats_orgspreadsheetml2006maincustomSheetView', True)

    
    customSheetView = property(__customSheetView.value, __customSheetView.set, None, u'Custom Sheet View')


    _ElementMap = {
        __customSheetView.name() : __customSheetView
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_CustomSheetViews', CT_CustomSheetViews)


# Complex type CT_pivotTableDefinition with content type ELEMENT_ONLY
class CT_pivotTableDefinition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_pivotTableDefinition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rowFields uses Python identifier rowFields
    __rowFields = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rowFields'), 'rowFields', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainrowFields', False)

    
    rowFields = property(__rowFields.value, __rowFields.set, None, u'Row Fields')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rowHierarchiesUsage uses Python identifier rowHierarchiesUsage
    __rowHierarchiesUsage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rowHierarchiesUsage'), 'rowHierarchiesUsage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainrowHierarchiesUsage', False)

    
    rowHierarchiesUsage = property(__rowHierarchiesUsage.value, __rowHierarchiesUsage.set, None, u'Row OLAP Hierarchy References')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dataFields uses Python identifier dataFields
    __dataFields = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dataFields'), 'dataFields', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006maindataFields', False)

    
    dataFields = property(__dataFields.value, __dataFields.set, None, u'Data Fields')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pivotTableStyleInfo uses Python identifier pivotTableStyleInfo
    __pivotTableStyleInfo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pivotTableStyleInfo'), 'pivotTableStyleInfo', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainpivotTableStyleInfo', False)

    
    pivotTableStyleInfo = property(__pivotTableStyleInfo.value, __pivotTableStyleInfo.set, None, u'PivotTable Style')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}filters uses Python identifier filters
    __filters = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'filters'), 'filters', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainfilters', False)

    
    filters = property(__filters.value, __filters.set, None, u'Filters')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rowItems uses Python identifier rowItems
    __rowItems = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rowItems'), 'rowItems', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainrowItems', False)

    
    rowItems = property(__rowItems.value, __rowItems.set, None, u'Row Items')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}formats uses Python identifier formats
    __formats = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'formats'), 'formats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainformats', False)

    
    formats = property(__formats.value, __formats.set, None, u'PivotTable Formats')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageFields uses Python identifier pageFields
    __pageFields = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageFields'), 'pageFields', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainpageFields', False)

    
    pageFields = property(__pageFields.value, __pageFields.set, None, u'Page Field Items')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pivotFields uses Python identifier pivotFields
    __pivotFields = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pivotFields'), 'pivotFields', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainpivotFields', False)

    
    pivotFields = property(__pivotFields.value, __pivotFields.set, None, u'PivotTable Fields')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}conditionalFormats uses Python identifier conditionalFormats
    __conditionalFormats = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'conditionalFormats'), 'conditionalFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainconditionalFormats', False)

    
    conditionalFormats = property(__conditionalFormats.value, __conditionalFormats.set, None, u'Conditional Formats')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}colHierarchiesUsage uses Python identifier colHierarchiesUsage
    __colHierarchiesUsage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'colHierarchiesUsage'), 'colHierarchiesUsage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006maincolHierarchiesUsage', False)

    
    colHierarchiesUsage = property(__colHierarchiesUsage.value, __colHierarchiesUsage.set, None, u'Column OLAP Hierarchy References')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}chartFormats uses Python identifier chartFormats
    __chartFormats = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'chartFormats'), 'chartFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainchartFormats', False)

    
    chartFormats = property(__chartFormats.value, __chartFormats.set, None, u'PivotChart Formats')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}location uses Python identifier location
    __location = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'location'), 'location', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainlocation', False)

    
    location = property(__location.value, __location.set, None, u'PivotTable Location')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}colItems uses Python identifier colItems
    __colItems = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'colItems'), 'colItems', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006maincolItems', False)

    
    colItems = property(__colItems.value, __colItems.set, None, u'Column Items')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}colFields uses Python identifier colFields
    __colFields = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'colFields'), 'colFields', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006maincolFields', False)

    
    colFields = property(__colFields.value, __colFields.set, None, u'Column Fields')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pivotHierarchies uses Python identifier pivotHierarchies
    __pivotHierarchies = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pivotHierarchies'), 'pivotHierarchies', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainpivotHierarchies', False)

    
    pivotHierarchies = property(__pivotHierarchies.value, __pivotHierarchies.set, None, u'PivotTable OLAP Hierarchies')

    
    # Attribute pageStyle uses Python identifier pageStyle
    __pageStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pageStyle'), 'pageStyle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_pageStyle', _s.ST_Xstring)
    
    pageStyle = property(__pageStyle.value, __pageStyle.set, None, u'Page Header Style Name')

    
    # Attribute mergeItem uses Python identifier mergeItem
    __mergeItem = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mergeItem'), 'mergeItem', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_mergeItem', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    mergeItem = property(__mergeItem.value, __mergeItem.set, None, u'Merge Titles')

    
    # Attribute applyPatternFormats uses Python identifier applyPatternFormats
    __applyPatternFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyPatternFormats'), 'applyPatternFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_applyPatternFormats', pyxb.binding.datatypes.boolean)
    
    applyPatternFormats = property(__applyPatternFormats.value, __applyPatternFormats.set, None, u'Apply Pattern Formats')

    
    # Attribute pivotTableStyle uses Python identifier pivotTableStyle
    __pivotTableStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pivotTableStyle'), 'pivotTableStyle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_pivotTableStyle', _s.ST_Xstring)
    
    pivotTableStyle = property(__pivotTableStyle.value, __pivotTableStyle.set, None, u'Table Style Name')

    
    # Attribute rowGrandTotals uses Python identifier rowGrandTotals
    __rowGrandTotals = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rowGrandTotals'), 'rowGrandTotals', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_rowGrandTotals', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    rowGrandTotals = property(__rowGrandTotals.value, __rowGrandTotals.set, None, u'Row Grand Totals')

    
    # Attribute showEmptyRow uses Python identifier showEmptyRow
    __showEmptyRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showEmptyRow'), 'showEmptyRow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_showEmptyRow', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showEmptyRow = property(__showEmptyRow.value, __showEmptyRow.set, None, u'Show Empty Row')

    
    # Attribute vacatedStyle uses Python identifier vacatedStyle
    __vacatedStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vacatedStyle'), 'vacatedStyle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_vacatedStyle', _s.ST_Xstring)
    
    vacatedStyle = property(__vacatedStyle.value, __vacatedStyle.set, None, u'Vacated Style')

    
    # Attribute dataCaption uses Python identifier dataCaption
    __dataCaption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataCaption'), 'dataCaption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_dataCaption', _s.ST_Xstring, required=True)
    
    dataCaption = property(__dataCaption.value, __dataCaption.set, None, u'Data Field Header Name')

    
    # Attribute immersive uses Python identifier immersive
    __immersive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'immersive'), 'immersive', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_immersive', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    immersive = property(__immersive.value, __immersive.set, None, u'Stop Immersive UI')

    
    # Attribute showMissing uses Python identifier showMissing
    __showMissing = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showMissing'), 'showMissing', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_showMissing', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showMissing = property(__showMissing.value, __showMissing.set, None, u'Show Missing')

    
    # Attribute asteriskTotals uses Python identifier asteriskTotals
    __asteriskTotals = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'asteriskTotals'), 'asteriskTotals', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_asteriskTotals', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    asteriskTotals = property(__asteriskTotals.value, __asteriskTotals.set, None, u'Asterisk Totals')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Name')

    
    # Attribute enableWizard uses Python identifier enableWizard
    __enableWizard = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'enableWizard'), 'enableWizard', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_enableWizard', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    enableWizard = property(__enableWizard.value, __enableWizard.set, None, u'Enable PivotTable Wizard')

    
    # Attribute updatedVersion uses Python identifier updatedVersion
    __updatedVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'updatedVersion'), 'updatedVersion', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_updatedVersion', pyxb.binding.datatypes.unsignedByte, unicode_default=u'0')
    
    updatedVersion = property(__updatedVersion.value, __updatedVersion.set, None, u'PivotTable Last Updated Version')

    
    # Attribute compactData uses Python identifier compactData
    __compactData = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'compactData'), 'compactData', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_compactData', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    compactData = property(__compactData.value, __compactData.set, None, u'Compact Data')

    
    # Attribute minRefreshableVersion uses Python identifier minRefreshableVersion
    __minRefreshableVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minRefreshableVersion'), 'minRefreshableVersion', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_minRefreshableVersion', pyxb.binding.datatypes.unsignedByte, unicode_default=u'0')
    
    minRefreshableVersion = property(__minRefreshableVersion.value, __minRefreshableVersion.set, None, u'Minimum Refreshable Version')

    
    # Attribute showDropZones uses Python identifier showDropZones
    __showDropZones = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showDropZones'), 'showDropZones', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_showDropZones', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showDropZones = property(__showDropZones.value, __showDropZones.set, None, u'Show Drop Zones')

    
    # Attribute applyNumberFormats uses Python identifier applyNumberFormats
    __applyNumberFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyNumberFormats'), 'applyNumberFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_applyNumberFormats', pyxb.binding.datatypes.boolean)
    
    applyNumberFormats = property(__applyNumberFormats.value, __applyNumberFormats.set, None, u'Apply Number Formats')

    
    # Attribute multipleFieldFilters uses Python identifier multipleFieldFilters
    __multipleFieldFilters = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'multipleFieldFilters'), 'multipleFieldFilters', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_multipleFieldFilters', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    multipleFieldFilters = property(__multipleFieldFilters.value, __multipleFieldFilters.set, None, u'Multiple Field Filters')

    
    # Attribute colGrandTotals uses Python identifier colGrandTotals
    __colGrandTotals = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'colGrandTotals'), 'colGrandTotals', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_colGrandTotals', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    colGrandTotals = property(__colGrandTotals.value, __colGrandTotals.set, None, u'Grand Totals On Columns')

    
    # Attribute visualTotals uses Python identifier visualTotals
    __visualTotals = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'visualTotals'), 'visualTotals', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_visualTotals', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    visualTotals = property(__visualTotals.value, __visualTotals.set, None, u'Total Visual Data')

    
    # Attribute fieldPrintTitles uses Python identifier fieldPrintTitles
    __fieldPrintTitles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fieldPrintTitles'), 'fieldPrintTitles', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_fieldPrintTitles', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    fieldPrintTitles = property(__fieldPrintTitles.value, __fieldPrintTitles.set, None, u'Field Print Titles')

    
    # Attribute grandTotalCaption uses Python identifier grandTotalCaption
    __grandTotalCaption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'grandTotalCaption'), 'grandTotalCaption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_grandTotalCaption', _s.ST_Xstring)
    
    grandTotalCaption = property(__grandTotalCaption.value, __grandTotalCaption.set, None, u'Grand Totals Caption')

    
    # Attribute pageWrap uses Python identifier pageWrap
    __pageWrap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pageWrap'), 'pageWrap', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_pageWrap', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    pageWrap = property(__pageWrap.value, __pageWrap.set, None, u'Page Wrap')

    
    # Attribute customListSort uses Python identifier customListSort
    __customListSort = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'customListSort'), 'customListSort', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_customListSort', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    customListSort = property(__customListSort.value, __customListSort.set, None, u'Custom List AutoSort')

    
    # Attribute showItems uses Python identifier showItems
    __showItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showItems'), 'showItems', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_showItems', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showItems = property(__showItems.value, __showItems.set, None, u'Show Item Names')

    
    # Attribute cacheId uses Python identifier cacheId
    __cacheId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cacheId'), 'cacheId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_cacheId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    cacheId = property(__cacheId.value, __cacheId.set, None, u'PivotCache Definition Id')

    
    # Attribute enableDrill uses Python identifier enableDrill
    __enableDrill = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'enableDrill'), 'enableDrill', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_enableDrill', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    enableDrill = property(__enableDrill.value, __enableDrill.set, None, u'Enable Drill Down')

    
    # Attribute disableFieldList uses Python identifier disableFieldList
    __disableFieldList = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'disableFieldList'), 'disableFieldList', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_disableFieldList', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    disableFieldList = property(__disableFieldList.value, __disableFieldList.set, None, u'Disable Field List')

    
    # Attribute published uses Python identifier published
    __published = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'published'), 'published', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_published', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    published = property(__published.value, __published.set, None, u'Data Fields Published')

    
    # Attribute tag uses Python identifier tag
    __tag = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tag'), 'tag', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_tag', _s.ST_Xstring)
    
    tag = property(__tag.value, __tag.set, None, u'PivotTable Custom String')

    
    # Attribute chartFormat uses Python identifier chartFormat
    __chartFormat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'chartFormat'), 'chartFormat', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_chartFormat', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    chartFormat = property(__chartFormat.value, __chartFormat.set, None, u'Chart Format Id')

    
    # Attribute showCalcMbrs uses Python identifier showCalcMbrs
    __showCalcMbrs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showCalcMbrs'), 'showCalcMbrs', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_showCalcMbrs', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showCalcMbrs = property(__showCalcMbrs.value, __showCalcMbrs.set, None, u'Show Calculated Members')

    
    # Attribute showMemberPropertyTips uses Python identifier showMemberPropertyTips
    __showMemberPropertyTips = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showMemberPropertyTips'), 'showMemberPropertyTips', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_showMemberPropertyTips', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showMemberPropertyTips = property(__showMemberPropertyTips.value, __showMemberPropertyTips.set, None, u'Show Member Property ToolTips')

    
    # Attribute createdVersion uses Python identifier createdVersion
    __createdVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'createdVersion'), 'createdVersion', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_createdVersion', pyxb.binding.datatypes.unsignedByte, unicode_default=u'0')
    
    createdVersion = property(__createdVersion.value, __createdVersion.set, None, u'PivotCache Created Version')

    
    # Attribute showDrill uses Python identifier showDrill
    __showDrill = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showDrill'), 'showDrill', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_showDrill', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showDrill = property(__showDrill.value, __showDrill.set, None, u'Show Expand Collapse')

    
    # Attribute indent uses Python identifier indent
    __indent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'indent'), 'indent', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_indent', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    indent = property(__indent.value, __indent.set, None, u'Indentation for Compact Axis')

    
    # Attribute pageOverThenDown uses Python identifier pageOverThenDown
    __pageOverThenDown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pageOverThenDown'), 'pageOverThenDown', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_pageOverThenDown', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    pageOverThenDown = property(__pageOverThenDown.value, __pageOverThenDown.set, None, u'Page Over Then Down')

    
    # Attribute dataOnRows uses Python identifier dataOnRows
    __dataOnRows = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataOnRows'), 'dataOnRows', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_dataOnRows', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    dataOnRows = property(__dataOnRows.value, __dataOnRows.set, None, u'Data On Rows')

    
    # Attribute editData uses Python identifier editData
    __editData = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'editData'), 'editData', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_editData', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    editData = property(__editData.value, __editData.set, None, u'Allow Edit Data')

    
    # Attribute compact uses Python identifier compact
    __compact = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'compact'), 'compact', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_compact', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    compact = property(__compact.value, __compact.set, None, u'Compact New Fields')

    
    # Attribute rowHeaderCaption uses Python identifier rowHeaderCaption
    __rowHeaderCaption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rowHeaderCaption'), 'rowHeaderCaption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_rowHeaderCaption', _s.ST_Xstring)
    
    rowHeaderCaption = property(__rowHeaderCaption.value, __rowHeaderCaption.set, None, u'Row Header Caption')

    
    # Attribute applyBorderFormats uses Python identifier applyBorderFormats
    __applyBorderFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyBorderFormats'), 'applyBorderFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_applyBorderFormats', pyxb.binding.datatypes.boolean)
    
    applyBorderFormats = property(__applyBorderFormats.value, __applyBorderFormats.set, None, u'Apply Border Formats')

    
    # Attribute showEmptyCol uses Python identifier showEmptyCol
    __showEmptyCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showEmptyCol'), 'showEmptyCol', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_showEmptyCol', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showEmptyCol = property(__showEmptyCol.value, __showEmptyCol.set, None, u'Show Empty Column')

    
    # Attribute gridDropZones uses Python identifier gridDropZones
    __gridDropZones = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gridDropZones'), 'gridDropZones', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_gridDropZones', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    gridDropZones = property(__gridDropZones.value, __gridDropZones.set, None, u'Enable Drop Zones')

    
    # Attribute applyFontFormats uses Python identifier applyFontFormats
    __applyFontFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyFontFormats'), 'applyFontFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_applyFontFormats', pyxb.binding.datatypes.boolean)
    
    applyFontFormats = property(__applyFontFormats.value, __applyFontFormats.set, None, u'Apply Font Formats')

    
    # Attribute mdxSubqueries uses Python identifier mdxSubqueries
    __mdxSubqueries = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mdxSubqueries'), 'mdxSubqueries', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_mdxSubqueries', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    mdxSubqueries = property(__mdxSubqueries.value, __mdxSubqueries.set, None, u'MDX Subqueries Supported')

    
    # Attribute printDrill uses Python identifier printDrill
    __printDrill = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'printDrill'), 'printDrill', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_printDrill', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    printDrill = property(__printDrill.value, __printDrill.set, None, u'Print Drill Indicators')

    
    # Attribute autoFormatId uses Python identifier autoFormatId
    __autoFormatId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoFormatId'), 'autoFormatId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_autoFormatId', pyxb.binding.datatypes.unsignedInt)
    
    autoFormatId = property(__autoFormatId.value, __autoFormatId.set, None, u'Auto Format Id')

    
    # Attribute applyWidthHeightFormats uses Python identifier applyWidthHeightFormats
    __applyWidthHeightFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyWidthHeightFormats'), 'applyWidthHeightFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_applyWidthHeightFormats', pyxb.binding.datatypes.boolean)
    
    applyWidthHeightFormats = property(__applyWidthHeightFormats.value, __applyWidthHeightFormats.set, None, u'Apply Width / Height Formats')

    
    # Attribute colHeaderCaption uses Python identifier colHeaderCaption
    __colHeaderCaption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'colHeaderCaption'), 'colHeaderCaption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_colHeaderCaption', _s.ST_Xstring)
    
    colHeaderCaption = property(__colHeaderCaption.value, __colHeaderCaption.set, None, u'Column Header Caption')

    
    # Attribute itemPrintTitles uses Python identifier itemPrintTitles
    __itemPrintTitles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'itemPrintTitles'), 'itemPrintTitles', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_itemPrintTitles', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    itemPrintTitles = property(__itemPrintTitles.value, __itemPrintTitles.set, None, u'Item Print Titles')

    
    # Attribute errorCaption uses Python identifier errorCaption
    __errorCaption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'errorCaption'), 'errorCaption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_errorCaption', _s.ST_Xstring)
    
    errorCaption = property(__errorCaption.value, __errorCaption.set, None, u'Error Caption')

    
    # Attribute showDataDropDown uses Python identifier showDataDropDown
    __showDataDropDown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showDataDropDown'), 'showDataDropDown', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_showDataDropDown', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showDataDropDown = property(__showDataDropDown.value, __showDataDropDown.set, None, u'Show Drop Down')

    
    # Attribute outline uses Python identifier outline
    __outline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'outline'), 'outline', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_outline', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    outline = property(__outline.value, __outline.set, None, u'Outline New Fields')

    
    # Attribute showMultipleLabel uses Python identifier showMultipleLabel
    __showMultipleLabel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showMultipleLabel'), 'showMultipleLabel', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_showMultipleLabel', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showMultipleLabel = property(__showMultipleLabel.value, __showMultipleLabel.set, None, u'Show Multiple Labels')

    
    # Attribute subtotalHiddenItems uses Python identifier subtotalHiddenItems
    __subtotalHiddenItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'subtotalHiddenItems'), 'subtotalHiddenItems', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_subtotalHiddenItems', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    subtotalHiddenItems = property(__subtotalHiddenItems.value, __subtotalHiddenItems.set, None, u'Subtotal Hidden Items')

    
    # Attribute showError uses Python identifier showError
    __showError = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showError'), 'showError', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_showError', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showError = property(__showError.value, __showError.set, None, u'Show Error')

    
    # Attribute dataPosition uses Python identifier dataPosition
    __dataPosition = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataPosition'), 'dataPosition', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_dataPosition', pyxb.binding.datatypes.unsignedInt)
    
    dataPosition = property(__dataPosition.value, __dataPosition.set, None, u'Default Data Field Position')

    
    # Attribute preserveFormatting uses Python identifier preserveFormatting
    __preserveFormatting = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'preserveFormatting'), 'preserveFormatting', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_preserveFormatting', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    preserveFormatting = property(__preserveFormatting.value, __preserveFormatting.set, None, u'Preserve Formatting')

    
    # Attribute missingCaption uses Python identifier missingCaption
    __missingCaption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'missingCaption'), 'missingCaption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_missingCaption', _s.ST_Xstring)
    
    missingCaption = property(__missingCaption.value, __missingCaption.set, None, u'Caption for Missing Values')

    
    # Attribute applyAlignmentFormats uses Python identifier applyAlignmentFormats
    __applyAlignmentFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyAlignmentFormats'), 'applyAlignmentFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_applyAlignmentFormats', pyxb.binding.datatypes.boolean)
    
    applyAlignmentFormats = property(__applyAlignmentFormats.value, __applyAlignmentFormats.set, None, u'Apply Alignment Formats')

    
    # Attribute useAutoFormatting uses Python identifier useAutoFormatting
    __useAutoFormatting = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'useAutoFormatting'), 'useAutoFormatting', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_useAutoFormatting', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    useAutoFormatting = property(__useAutoFormatting.value, __useAutoFormatting.set, None, u'Auto Formatting')

    
    # Attribute showDataTips uses Python identifier showDataTips
    __showDataTips = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showDataTips'), 'showDataTips', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_showDataTips', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showDataTips = property(__showDataTips.value, __showDataTips.set, None, u'Show ToolTips on Data')

    
    # Attribute enableFieldProperties uses Python identifier enableFieldProperties
    __enableFieldProperties = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'enableFieldProperties'), 'enableFieldProperties', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_enableFieldProperties', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    enableFieldProperties = property(__enableFieldProperties.value, __enableFieldProperties.set, None, u'Enable Field Properties')

    
    # Attribute outlineData uses Python identifier outlineData
    __outlineData = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'outlineData'), 'outlineData', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_outlineData', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    outlineData = property(__outlineData.value, __outlineData.set, None, u'Outline Data Fields')

    
    # Attribute fieldListSortAscending uses Python identifier fieldListSortAscending
    __fieldListSortAscending = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fieldListSortAscending'), 'fieldListSortAscending', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_fieldListSortAscending', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    fieldListSortAscending = property(__fieldListSortAscending.value, __fieldListSortAscending.set, None, u'Default Sort Order')

    
    # Attribute showHeaders uses Python identifier showHeaders
    __showHeaders = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showHeaders'), 'showHeaders', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_pivotTableDefinition_showHeaders', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showHeaders = property(__showHeaders.value, __showHeaders.set, None, u'Show Field Headers')


    _ElementMap = {
        __rowFields.name() : __rowFields,
        __rowHierarchiesUsage.name() : __rowHierarchiesUsage,
        __dataFields.name() : __dataFields,
        __pivotTableStyleInfo.name() : __pivotTableStyleInfo,
        __filters.name() : __filters,
        __rowItems.name() : __rowItems,
        __formats.name() : __formats,
        __pageFields.name() : __pageFields,
        __pivotFields.name() : __pivotFields,
        __conditionalFormats.name() : __conditionalFormats,
        __colHierarchiesUsage.name() : __colHierarchiesUsage,
        __chartFormats.name() : __chartFormats,
        __location.name() : __location,
        __colItems.name() : __colItems,
        __extLst.name() : __extLst,
        __colFields.name() : __colFields,
        __pivotHierarchies.name() : __pivotHierarchies
    }
    _AttributeMap = {
        __pageStyle.name() : __pageStyle,
        __mergeItem.name() : __mergeItem,
        __applyPatternFormats.name() : __applyPatternFormats,
        __pivotTableStyle.name() : __pivotTableStyle,
        __rowGrandTotals.name() : __rowGrandTotals,
        __showEmptyRow.name() : __showEmptyRow,
        __vacatedStyle.name() : __vacatedStyle,
        __dataCaption.name() : __dataCaption,
        __immersive.name() : __immersive,
        __showMissing.name() : __showMissing,
        __asteriskTotals.name() : __asteriskTotals,
        __name.name() : __name,
        __enableWizard.name() : __enableWizard,
        __updatedVersion.name() : __updatedVersion,
        __compactData.name() : __compactData,
        __minRefreshableVersion.name() : __minRefreshableVersion,
        __showDropZones.name() : __showDropZones,
        __applyNumberFormats.name() : __applyNumberFormats,
        __multipleFieldFilters.name() : __multipleFieldFilters,
        __colGrandTotals.name() : __colGrandTotals,
        __visualTotals.name() : __visualTotals,
        __fieldPrintTitles.name() : __fieldPrintTitles,
        __grandTotalCaption.name() : __grandTotalCaption,
        __pageWrap.name() : __pageWrap,
        __customListSort.name() : __customListSort,
        __showItems.name() : __showItems,
        __cacheId.name() : __cacheId,
        __enableDrill.name() : __enableDrill,
        __disableFieldList.name() : __disableFieldList,
        __published.name() : __published,
        __tag.name() : __tag,
        __chartFormat.name() : __chartFormat,
        __showCalcMbrs.name() : __showCalcMbrs,
        __showMemberPropertyTips.name() : __showMemberPropertyTips,
        __createdVersion.name() : __createdVersion,
        __showDrill.name() : __showDrill,
        __indent.name() : __indent,
        __pageOverThenDown.name() : __pageOverThenDown,
        __dataOnRows.name() : __dataOnRows,
        __editData.name() : __editData,
        __compact.name() : __compact,
        __rowHeaderCaption.name() : __rowHeaderCaption,
        __applyBorderFormats.name() : __applyBorderFormats,
        __showEmptyCol.name() : __showEmptyCol,
        __gridDropZones.name() : __gridDropZones,
        __applyFontFormats.name() : __applyFontFormats,
        __mdxSubqueries.name() : __mdxSubqueries,
        __printDrill.name() : __printDrill,
        __autoFormatId.name() : __autoFormatId,
        __applyWidthHeightFormats.name() : __applyWidthHeightFormats,
        __colHeaderCaption.name() : __colHeaderCaption,
        __itemPrintTitles.name() : __itemPrintTitles,
        __errorCaption.name() : __errorCaption,
        __showDataDropDown.name() : __showDataDropDown,
        __outline.name() : __outline,
        __showMultipleLabel.name() : __showMultipleLabel,
        __subtotalHiddenItems.name() : __subtotalHiddenItems,
        __showError.name() : __showError,
        __dataPosition.name() : __dataPosition,
        __preserveFormatting.name() : __preserveFormatting,
        __missingCaption.name() : __missingCaption,
        __applyAlignmentFormats.name() : __applyAlignmentFormats,
        __useAutoFormatting.name() : __useAutoFormatting,
        __showDataTips.name() : __showDataTips,
        __enableFieldProperties.name() : __enableFieldProperties,
        __outlineData.name() : __outlineData,
        __fieldListSortAscending.name() : __fieldListSortAscending,
        __showHeaders.name() : __showHeaders
    }
Namespace.addCategoryObject('typeBinding', u'CT_pivotTableDefinition', CT_pivotTableDefinition)


# Complex type CT_DdeItems with content type ELEMENT_ONLY
class CT_DdeItems (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DdeItems')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}ddeItem uses Python identifier ddeItem
    __ddeItem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ddeItem'), 'ddeItem', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DdeItems_httpschemas_openxmlformats_orgspreadsheetml2006mainddeItem', True)

    
    ddeItem = property(__ddeItem.value, __ddeItem.set, None, u'DDE Item definition')


    _ElementMap = {
        __ddeItem.name() : __ddeItem
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_DdeItems', CT_DdeItems)


# Complex type CT_Dxf with content type ELEMENT_ONLY
class CT_Dxf (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Dxf')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}alignment uses Python identifier alignment
    __alignment = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alignment'), 'alignment', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dxf_httpschemas_openxmlformats_orgspreadsheetml2006mainalignment', False)

    
    alignment = property(__alignment.value, __alignment.set, None, u'Alignment')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}numFmt uses Python identifier numFmt
    __numFmt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'numFmt'), 'numFmt', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dxf_httpschemas_openxmlformats_orgspreadsheetml2006mainnumFmt', False)

    
    numFmt = property(__numFmt.value, __numFmt.set, None, u'Number Format')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}border uses Python identifier border
    __border = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'border'), 'border', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dxf_httpschemas_openxmlformats_orgspreadsheetml2006mainborder', False)

    
    border = property(__border.value, __border.set, None, u'Border Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}font uses Python identifier font
    __font = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'font'), 'font', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dxf_httpschemas_openxmlformats_orgspreadsheetml2006mainfont', False)

    
    font = property(__font.value, __font.set, None, u'Font Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dxf_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}fill uses Python identifier fill
    __fill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fill'), 'fill', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dxf_httpschemas_openxmlformats_orgspreadsheetml2006mainfill', False)

    
    fill = property(__fill.value, __fill.set, None, u'Fill')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}protection uses Python identifier protection
    __protection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'protection'), 'protection', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dxf_httpschemas_openxmlformats_orgspreadsheetml2006mainprotection', False)

    
    protection = property(__protection.value, __protection.set, None, u'Protection Properties')


    _ElementMap = {
        __alignment.name() : __alignment,
        __numFmt.name() : __numFmt,
        __border.name() : __border,
        __font.name() : __font,
        __extLst.name() : __extLst,
        __fill.name() : __fill,
        __protection.name() : __protection
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Dxf', CT_Dxf)


# Complex type CT_SheetDimension with content type EMPTY
class CT_SheetDimension (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SheetDimension')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetDimension_ref', ST_Ref, required=True)
    
    ref = property(__ref.value, __ref.set, None, u'Reference')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __ref.name() : __ref
    }
Namespace.addCategoryObject('typeBinding', u'CT_SheetDimension', CT_SheetDimension)


# Complex type CT_BooleanProperty with content type EMPTY
class CT_BooleanProperty (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_BooleanProperty')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BooleanProperty_val', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
Namespace.addCategoryObject('typeBinding', u'CT_BooleanProperty', CT_BooleanProperty)


# Complex type CT_PivotDimension with content type EMPTY
class CT_PivotDimension (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotDimension')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute caption uses Python identifier caption
    __caption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'caption'), 'caption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotDimension_caption', _s.ST_Xstring, required=True)
    
    caption = property(__caption.value, __caption.set, None, u'Dimension Display Name')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotDimension_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Dimension Name')

    
    # Attribute uniqueName uses Python identifier uniqueName
    __uniqueName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueName'), 'uniqueName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotDimension_uniqueName', _s.ST_Xstring, required=True)
    
    uniqueName = property(__uniqueName.value, __uniqueName.set, None, u'Dimension Unique Name')

    
    # Attribute measure uses Python identifier measure
    __measure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'measure'), 'measure', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotDimension_measure', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    measure = property(__measure.value, __measure.set, None, u'Measure')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __caption.name() : __caption,
        __name.name() : __name,
        __uniqueName.name() : __uniqueName,
        __measure.name() : __measure
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotDimension', CT_PivotDimension)


# Complex type CT_MetadataStringIndex with content type EMPTY
class CT_MetadataStringIndex (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MetadataStringIndex')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'x'), 'x', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataStringIndex_x', pyxb.binding.datatypes.unsignedInt, required=True)
    
    x = property(__x.value, __x.set, None, u'Index Value')

    
    # Attribute s uses Python identifier s
    __s = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u's'), 's', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataStringIndex_s', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    s = property(__s.value, __s.set, None, u'String is a Set')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __x.name() : __x,
        __s.name() : __s
    }
Namespace.addCategoryObject('typeBinding', u'CT_MetadataStringIndex', CT_MetadataStringIndex)


# Complex type CT_DataBar with content type ELEMENT_ONLY
class CT_DataBar (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DataBar')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'color'), 'color', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataBar_httpschemas_openxmlformats_orgspreadsheetml2006maincolor', False)

    
    color = property(__color.value, __color.set, None, u'Data Bar Color')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cfvo uses Python identifier cfvo
    __cfvo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cfvo'), 'cfvo', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataBar_httpschemas_openxmlformats_orgspreadsheetml2006maincfvo', True)

    
    cfvo = property(__cfvo.value, __cfvo.set, None, u'Conditional Format Value Object')

    
    # Attribute minLength uses Python identifier minLength
    __minLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minLength'), 'minLength', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataBar_minLength', pyxb.binding.datatypes.unsignedInt, unicode_default=u'10')
    
    minLength = property(__minLength.value, __minLength.set, None, u'Minimum Length')

    
    # Attribute showValue uses Python identifier showValue
    __showValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showValue'), 'showValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataBar_showValue', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showValue = property(__showValue.value, __showValue.set, None, u'Show Values')

    
    # Attribute maxLength uses Python identifier maxLength
    __maxLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxLength'), 'maxLength', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataBar_maxLength', pyxb.binding.datatypes.unsignedInt, unicode_default=u'90')
    
    maxLength = property(__maxLength.value, __maxLength.set, None, u'Maximum Length')


    _ElementMap = {
        __color.name() : __color,
        __cfvo.name() : __cfvo
    }
    _AttributeMap = {
        __minLength.name() : __minLength,
        __showValue.name() : __showValue,
        __maxLength.name() : __maxLength
    }
Namespace.addCategoryObject('typeBinding', u'CT_DataBar', CT_DataBar)


# Complex type CT_PivotCacheDefinition with content type ELEMENT_ONLY
class CT_PivotCacheDefinition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotCacheDefinition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}calculatedItems uses Python identifier calculatedItems
    __calculatedItems = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'calculatedItems'), 'calculatedItems', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_httpschemas_openxmlformats_orgspreadsheetml2006maincalculatedItems', False)

    
    calculatedItems = property(__calculatedItems.value, __calculatedItems.set, None, u'Calculated Items')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cacheSource uses Python identifier cacheSource
    __cacheSource = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cacheSource'), 'cacheSource', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_httpschemas_openxmlformats_orgspreadsheetml2006maincacheSource', False)

    
    cacheSource = property(__cacheSource.value, __cacheSource.set, None, u'PivotCache Source Description')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}calculatedMembers uses Python identifier calculatedMembers
    __calculatedMembers = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'calculatedMembers'), 'calculatedMembers', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_httpschemas_openxmlformats_orgspreadsheetml2006maincalculatedMembers', False)

    
    calculatedMembers = property(__calculatedMembers.value, __calculatedMembers.set, None, u'Calculated Members')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cacheFields uses Python identifier cacheFields
    __cacheFields = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cacheFields'), 'cacheFields', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_httpschemas_openxmlformats_orgspreadsheetml2006maincacheFields', False)

    
    cacheFields = property(__cacheFields.value, __cacheFields.set, None, u'PivotCache Fields')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tupleCache uses Python identifier tupleCache
    __tupleCache = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tupleCache'), 'tupleCache', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_httpschemas_openxmlformats_orgspreadsheetml2006maintupleCache', False)

    
    tupleCache = property(__tupleCache.value, __tupleCache.set, None, u'Tuple Cache')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dimensions uses Python identifier dimensions
    __dimensions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dimensions'), 'dimensions', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_httpschemas_openxmlformats_orgspreadsheetml2006maindimensions', False)

    
    dimensions = property(__dimensions.value, __dimensions.set, None, u'OLAP Dimensions')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cacheHierarchies uses Python identifier cacheHierarchies
    __cacheHierarchies = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cacheHierarchies'), 'cacheHierarchies', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_httpschemas_openxmlformats_orgspreadsheetml2006maincacheHierarchies', False)

    
    cacheHierarchies = property(__cacheHierarchies.value, __cacheHierarchies.set, None, u'PivotCache Hierarchies')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}measureGroups uses Python identifier measureGroups
    __measureGroups = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'measureGroups'), 'measureGroups', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainmeasureGroups', False)

    
    measureGroups = property(__measureGroups.value, __measureGroups.set, None, u'OLAP Measure Groups')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}kpis uses Python identifier kpis
    __kpis = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'kpis'), 'kpis', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainkpis', False)

    
    kpis = property(__kpis.value, __kpis.set, None, u'OLAP KPIs')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}maps uses Python identifier maps
    __maps = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'maps'), 'maps', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_httpschemas_openxmlformats_orgspreadsheetml2006mainmaps', False)

    
    maps = property(__maps.value, __maps.set, None, u'OLAP Measure Group')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute supportAdvancedDrill uses Python identifier supportAdvancedDrill
    __supportAdvancedDrill = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'supportAdvancedDrill'), 'supportAdvancedDrill', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_supportAdvancedDrill', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    supportAdvancedDrill = property(__supportAdvancedDrill.value, __supportAdvancedDrill.set, None, u'Supports Attribute Drilldown')

    
    # Attribute refreshOnLoad uses Python identifier refreshOnLoad
    __refreshOnLoad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refreshOnLoad'), 'refreshOnLoad', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_refreshOnLoad', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    refreshOnLoad = property(__refreshOnLoad.value, __refreshOnLoad.set, None, u'Refresh On Load')

    
    # Attribute recordCount uses Python identifier recordCount
    __recordCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'recordCount'), 'recordCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_recordCount', pyxb.binding.datatypes.unsignedInt)
    
    recordCount = property(__recordCount.value, __recordCount.set, None, u'PivotCache Record Count')

    
    # Attribute backgroundQuery uses Python identifier backgroundQuery
    __backgroundQuery = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'backgroundQuery'), 'backgroundQuery', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_backgroundQuery', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    backgroundQuery = property(__backgroundQuery.value, __backgroundQuery.set, None, u'Background Query')

    
    # Attribute optimizeMemory uses Python identifier optimizeMemory
    __optimizeMemory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'optimizeMemory'), 'optimizeMemory', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_optimizeMemory', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    optimizeMemory = property(__optimizeMemory.value, __optimizeMemory.set, None, u'Optimize Cache for Memory')

    
    # Attribute upgradeOnRefresh uses Python identifier upgradeOnRefresh
    __upgradeOnRefresh = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'upgradeOnRefresh'), 'upgradeOnRefresh', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_upgradeOnRefresh', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    upgradeOnRefresh = property(__upgradeOnRefresh.value, __upgradeOnRefresh.set, None, u'Upgrade PivotCache on Refresh')

    
    # Attribute missingItemsLimit uses Python identifier missingItemsLimit
    __missingItemsLimit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'missingItemsLimit'), 'missingItemsLimit', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_missingItemsLimit', pyxb.binding.datatypes.unsignedInt)
    
    missingItemsLimit = property(__missingItemsLimit.value, __missingItemsLimit.set, None, u'Missing Items Limit')

    
    # Attribute enableRefresh uses Python identifier enableRefresh
    __enableRefresh = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'enableRefresh'), 'enableRefresh', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_enableRefresh', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    enableRefresh = property(__enableRefresh.value, __enableRefresh.set, None, u'Enable PivotCache Refresh')

    
    # Attribute refreshedDateIso uses Python identifier refreshedDateIso
    __refreshedDateIso = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refreshedDateIso'), 'refreshedDateIso', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_refreshedDateIso', pyxb.binding.datatypes.dateTime)
    
    refreshedDateIso = property(__refreshedDateIso.value, __refreshedDateIso.set, None, u'PivotCache Last Refreshed Date ISO')

    
    # Attribute createdVersion uses Python identifier createdVersion
    __createdVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'createdVersion'), 'createdVersion', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_createdVersion', pyxb.binding.datatypes.unsignedByte, unicode_default=u'0')
    
    createdVersion = property(__createdVersion.value, __createdVersion.set, None, u'PivotCache Created Version')

    
    # Attribute refreshedBy uses Python identifier refreshedBy
    __refreshedBy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refreshedBy'), 'refreshedBy', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_refreshedBy', _s.ST_Xstring)
    
    refreshedBy = property(__refreshedBy.value, __refreshedBy.set, None, u'Last Refreshed By')

    
    # Attribute saveData uses Python identifier saveData
    __saveData = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'saveData'), 'saveData', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_saveData', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    saveData = property(__saveData.value, __saveData.set, None, u'Save Pivot Records')

    
    # Attribute supportSubquery uses Python identifier supportSubquery
    __supportSubquery = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'supportSubquery'), 'supportSubquery', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_supportSubquery', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    supportSubquery = property(__supportSubquery.value, __supportSubquery.set, None, u'Supports Subqueries')

    
    # Attribute invalid uses Python identifier invalid
    __invalid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'invalid'), 'invalid', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_invalid', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    invalid = property(__invalid.value, __invalid.set, None, u'Invalid Cache')

    
    # Attribute refreshedVersion uses Python identifier refreshedVersion
    __refreshedVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refreshedVersion'), 'refreshedVersion', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_refreshedVersion', pyxb.binding.datatypes.unsignedByte, unicode_default=u'0')
    
    refreshedVersion = property(__refreshedVersion.value, __refreshedVersion.set, None, u'PivotCache Last Refreshed Version')

    
    # Attribute refreshedDate uses Python identifier refreshedDate
    __refreshedDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refreshedDate'), 'refreshedDate', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_refreshedDate', pyxb.binding.datatypes.double)
    
    refreshedDate = property(__refreshedDate.value, __refreshedDate.set, None, u'PivotCache Last Refreshed Date')

    
    # Attribute tupleCache uses Python identifier tupleCache_
    __tupleCache_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tupleCache'), 'tupleCache_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_tupleCache', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    tupleCache_ = property(__tupleCache_.value, __tupleCache_.set, None, u'Stores Cache for OLAP Functions')

    
    # Attribute minRefreshableVersion uses Python identifier minRefreshableVersion
    __minRefreshableVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minRefreshableVersion'), 'minRefreshableVersion', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheDefinition_minRefreshableVersion', pyxb.binding.datatypes.unsignedByte, unicode_default=u'0')
    
    minRefreshableVersion = property(__minRefreshableVersion.value, __minRefreshableVersion.set, None, u'Minimum Version Required for Refresh')


    _ElementMap = {
        __extLst.name() : __extLst,
        __calculatedItems.name() : __calculatedItems,
        __cacheSource.name() : __cacheSource,
        __calculatedMembers.name() : __calculatedMembers,
        __cacheFields.name() : __cacheFields,
        __tupleCache.name() : __tupleCache,
        __dimensions.name() : __dimensions,
        __cacheHierarchies.name() : __cacheHierarchies,
        __measureGroups.name() : __measureGroups,
        __kpis.name() : __kpis,
        __maps.name() : __maps
    }
    _AttributeMap = {
        __id.name() : __id,
        __supportAdvancedDrill.name() : __supportAdvancedDrill,
        __refreshOnLoad.name() : __refreshOnLoad,
        __recordCount.name() : __recordCount,
        __backgroundQuery.name() : __backgroundQuery,
        __optimizeMemory.name() : __optimizeMemory,
        __upgradeOnRefresh.name() : __upgradeOnRefresh,
        __missingItemsLimit.name() : __missingItemsLimit,
        __enableRefresh.name() : __enableRefresh,
        __refreshedDateIso.name() : __refreshedDateIso,
        __createdVersion.name() : __createdVersion,
        __refreshedBy.name() : __refreshedBy,
        __saveData.name() : __saveData,
        __supportSubquery.name() : __supportSubquery,
        __invalid.name() : __invalid,
        __refreshedVersion.name() : __refreshedVersion,
        __refreshedDate.name() : __refreshedDate,
        __tupleCache_.name() : __tupleCache_,
        __minRefreshableVersion.name() : __minRefreshableVersion
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotCacheDefinition', CT_PivotCacheDefinition)


# Complex type CT_SheetData with content type ELEMENT_ONLY
class CT_SheetData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SheetData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}row uses Python identifier row
    __row = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'row'), 'row', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetData_httpschemas_openxmlformats_orgspreadsheetml2006mainrow', True)

    
    row = property(__row.value, __row.set, None, u'Row')


    _ElementMap = {
        __row.name() : __row
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_SheetData', CT_SheetData)


# Complex type CT_VolMain with content type ELEMENT_ONLY
class CT_VolMain (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_VolMain')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tp uses Python identifier tp
    __tp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tp'), 'tp', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_VolMain_httpschemas_openxmlformats_orgspreadsheetml2006maintp', True)

    
    tp = property(__tp.value, __tp.set, None, u'Topic')

    
    # Attribute first uses Python identifier first
    __first = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'first'), 'first', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_VolMain_first', _s.ST_Xstring, required=True)
    
    first = property(__first.value, __first.set, None, u'First String')


    _ElementMap = {
        __tp.name() : __tp
    }
    _AttributeMap = {
        __first.name() : __first
    }
Namespace.addCategoryObject('typeBinding', u'CT_VolMain', CT_VolMain)


# Complex type CT_PivotAreaReferences with content type ELEMENT_ONLY
class CT_PivotAreaReferences (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotAreaReferences')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}reference uses Python identifier reference
    __reference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'reference'), 'reference', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReferences_httpschemas_openxmlformats_orgspreadsheetml2006mainreference', True)

    
    reference = property(__reference.value, __reference.set, None, u'Reference')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReferences_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Pivot Filter Count')


    _ElementMap = {
        __reference.name() : __reference
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotAreaReferences', CT_PivotAreaReferences)


# Complex type CT_RevisionSheetRename with content type ELEMENT_ONLY
class CT_RevisionSheetRename (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RevisionSheetRename')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionSheetRename_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute ra uses Python identifier ra
    __ra = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ra'), 'ra', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionSheetRename_ra', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ra = property(__ra.value, __ra.set, None, u'Revision Undo Rejected')

    
    # Attribute ua uses Python identifier ua
    __ua = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ua'), 'ua', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionSheetRename_ua', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ua = property(__ua.value, __ua.set, None, u'Revision From Rejection')

    
    # Attribute rId uses Python identifier rId
    __rId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rId'), 'rId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionSheetRename_rId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    rId = property(__rId.value, __rId.set, None, u'Revision Id')

    
    # Attribute sheetId uses Python identifier sheetId
    __sheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheetId'), 'sheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionSheetRename_sheetId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    sheetId = property(__sheetId.value, __sheetId.set, None, u'Sheet Id')

    
    # Attribute newName uses Python identifier newName
    __newName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'newName'), 'newName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionSheetRename_newName', _s.ST_Xstring, required=True)
    
    newName = property(__newName.value, __newName.set, None, u'New Sheet Name')

    
    # Attribute oldName uses Python identifier oldName
    __oldName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'oldName'), 'oldName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionSheetRename_oldName', _s.ST_Xstring, required=True)
    
    oldName = property(__oldName.value, __oldName.set, None, u'Old Sheet Name')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __ra.name() : __ra,
        __ua.name() : __ua,
        __rId.name() : __rId,
        __sheetId.name() : __sheetId,
        __newName.name() : __newName,
        __oldName.name() : __oldName
    }
Namespace.addCategoryObject('typeBinding', u'CT_RevisionSheetRename', CT_RevisionSheetRename)


# Complex type CT_CacheField with content type ELEMENT_ONLY
class CT_CacheField (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CacheField')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sharedItems uses Python identifier sharedItems
    __sharedItems = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sharedItems'), 'sharedItems', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_httpschemas_openxmlformats_orgspreadsheetml2006mainsharedItems', False)

    
    sharedItems = property(__sharedItems.value, __sharedItems.set, None, u'Shared Items')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}mpMap uses Python identifier mpMap
    __mpMap = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'mpMap'), 'mpMap', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_httpschemas_openxmlformats_orgspreadsheetml2006mainmpMap', True)

    
    mpMap = property(__mpMap.value, __mpMap.set, None, u'Member Properties Map')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}fieldGroup uses Python identifier fieldGroup
    __fieldGroup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fieldGroup'), 'fieldGroup', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_httpschemas_openxmlformats_orgspreadsheetml2006mainfieldGroup', False)

    
    fieldGroup = property(__fieldGroup.value, __fieldGroup.set, None, u'Field Group Properties')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'PivotCache Field Name')

    
    # Attribute mappingCount uses Python identifier mappingCount
    __mappingCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mappingCount'), 'mappingCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_mappingCount', pyxb.binding.datatypes.unsignedInt)
    
    mappingCount = property(__mappingCount.value, __mappingCount.set, None, u'Member Property Count')

    
    # Attribute level uses Python identifier level
    __level = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'level'), 'level', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_level', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    level = property(__level.value, __level.set, None, u'Hierarchy Level')

    
    # Attribute caption uses Python identifier caption
    __caption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'caption'), 'caption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_caption', _s.ST_Xstring)
    
    caption = property(__caption.value, __caption.set, None, u'PivotCache Field Caption')

    
    # Attribute hierarchy uses Python identifier hierarchy
    __hierarchy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hierarchy'), 'hierarchy', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_hierarchy', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    hierarchy = property(__hierarchy.value, __hierarchy.set, None, u'Hierarchy')

    
    # Attribute sqlType uses Python identifier sqlType
    __sqlType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sqlType'), 'sqlType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_sqlType', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    sqlType = property(__sqlType.value, __sqlType.set, None, u'SQL Data Type')

    
    # Attribute formula uses Python identifier formula
    __formula = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'formula'), 'formula', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_formula', _s.ST_Xstring)
    
    formula = property(__formula.value, __formula.set, None, u'Calculated Field Formula')

    
    # Attribute databaseField uses Python identifier databaseField
    __databaseField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'databaseField'), 'databaseField', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_databaseField', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    databaseField = property(__databaseField.value, __databaseField.set, None, u'Database Field')

    
    # Attribute serverField uses Python identifier serverField
    __serverField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'serverField'), 'serverField', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_serverField', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    serverField = property(__serverField.value, __serverField.set, None, u'Server-based Field')

    
    # Attribute memberPropertyField uses Python identifier memberPropertyField
    __memberPropertyField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'memberPropertyField'), 'memberPropertyField', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_memberPropertyField', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    memberPropertyField = property(__memberPropertyField.value, __memberPropertyField.set, None, u'Member Property Field')

    
    # Attribute propertyName uses Python identifier propertyName
    __propertyName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'propertyName'), 'propertyName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_propertyName', _s.ST_Xstring)
    
    propertyName = property(__propertyName.value, __propertyName.set, None, u'Property Name')

    
    # Attribute uniqueList uses Python identifier uniqueList
    __uniqueList = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueList'), 'uniqueList', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_uniqueList', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    uniqueList = property(__uniqueList.value, __uniqueList.set, None, u'Unique List Retrieved')

    
    # Attribute numFmtId uses Python identifier numFmtId
    __numFmtId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numFmtId'), 'numFmtId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheField_numFmtId', ST_NumFmtId)
    
    numFmtId = property(__numFmtId.value, __numFmtId.set, None, u'Number Format Id')


    _ElementMap = {
        __extLst.name() : __extLst,
        __sharedItems.name() : __sharedItems,
        __mpMap.name() : __mpMap,
        __fieldGroup.name() : __fieldGroup
    }
    _AttributeMap = {
        __name.name() : __name,
        __mappingCount.name() : __mappingCount,
        __level.name() : __level,
        __caption.name() : __caption,
        __hierarchy.name() : __hierarchy,
        __sqlType.name() : __sqlType,
        __formula.name() : __formula,
        __databaseField.name() : __databaseField,
        __serverField.name() : __serverField,
        __memberPropertyField.name() : __memberPropertyField,
        __propertyName.name() : __propertyName,
        __uniqueList.name() : __uniqueList,
        __numFmtId.name() : __numFmtId
    }
Namespace.addCategoryObject('typeBinding', u'CT_CacheField', CT_CacheField)


# Complex type CT_Tables with content type ELEMENT_ONLY
class CT_Tables (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Tables')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}x uses Python identifier x
    __x = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'x'), 'x', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Tables_httpschemas_openxmlformats_orgspreadsheetml2006mainx', True)

    
    x = property(__x.value, __x.set, None, u'Index')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}s uses Python identifier s
    __s = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u's'), 's', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Tables_httpschemas_openxmlformats_orgspreadsheetml2006mains', True)

    
    s = property(__s.value, __s.set, None, u'Character Value')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}m uses Python identifier m
    __m = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'm'), 'm', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Tables_httpschemas_openxmlformats_orgspreadsheetml2006mainm', True)

    
    m = property(__m.value, __m.set, None, u'No Value')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Tables_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Count of Tables')


    _ElementMap = {
        __x.name() : __x,
        __s.name() : __s,
        __m.name() : __m
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_Tables', CT_Tables)


# Complex type CT_ColFields with content type ELEMENT_ONLY
class CT_ColFields (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ColFields')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}field uses Python identifier field
    __field = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'field'), 'field', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ColFields_httpschemas_openxmlformats_orgspreadsheetml2006mainfield', True)

    
    field = property(__field.value, __field.set, None, u'Field')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ColFields_count', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    count = property(__count.value, __count.set, None, u'Repeated Items Count')


    _ElementMap = {
        __field.name() : __field
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_ColFields', CT_ColFields)


# Complex type CT_CellAlignment with content type EMPTY
class CT_CellAlignment (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CellAlignment')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute indent uses Python identifier indent
    __indent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'indent'), 'indent', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellAlignment_indent', pyxb.binding.datatypes.unsignedInt)
    
    indent = property(__indent.value, __indent.set, None, u'Indent')

    
    # Attribute vertical uses Python identifier vertical
    __vertical = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vertical'), 'vertical', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellAlignment_vertical', ST_VerticalAlignment)
    
    vertical = property(__vertical.value, __vertical.set, None, u'Vertical Alignment')

    
    # Attribute textRotation uses Python identifier textRotation
    __textRotation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'textRotation'), 'textRotation', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellAlignment_textRotation', pyxb.binding.datatypes.unsignedInt)
    
    textRotation = property(__textRotation.value, __textRotation.set, None, u'Text Rotation')

    
    # Attribute horizontal uses Python identifier horizontal
    __horizontal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'horizontal'), 'horizontal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellAlignment_horizontal', ST_HorizontalAlignment)
    
    horizontal = property(__horizontal.value, __horizontal.set, None, u'Horizontal Alignment')

    
    # Attribute justifyLastLine uses Python identifier justifyLastLine
    __justifyLastLine = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'justifyLastLine'), 'justifyLastLine', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellAlignment_justifyLastLine', pyxb.binding.datatypes.boolean)
    
    justifyLastLine = property(__justifyLastLine.value, __justifyLastLine.set, None, u'Justify Last Line')

    
    # Attribute relativeIndent uses Python identifier relativeIndent
    __relativeIndent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relativeIndent'), 'relativeIndent', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellAlignment_relativeIndent', pyxb.binding.datatypes.int)
    
    relativeIndent = property(__relativeIndent.value, __relativeIndent.set, None, u'Relative Indent')

    
    # Attribute shrinkToFit uses Python identifier shrinkToFit
    __shrinkToFit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'shrinkToFit'), 'shrinkToFit', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellAlignment_shrinkToFit', pyxb.binding.datatypes.boolean)
    
    shrinkToFit = property(__shrinkToFit.value, __shrinkToFit.set, None, u'Shrink To Fit')

    
    # Attribute wrapText uses Python identifier wrapText
    __wrapText = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'wrapText'), 'wrapText', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellAlignment_wrapText', pyxb.binding.datatypes.boolean)
    
    wrapText = property(__wrapText.value, __wrapText.set, None, u'Wrap Text')

    
    # Attribute readingOrder uses Python identifier readingOrder
    __readingOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'readingOrder'), 'readingOrder', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellAlignment_readingOrder', pyxb.binding.datatypes.unsignedInt)
    
    readingOrder = property(__readingOrder.value, __readingOrder.set, None, u'Reading Order')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __indent.name() : __indent,
        __vertical.name() : __vertical,
        __textRotation.name() : __textRotation,
        __horizontal.name() : __horizontal,
        __justifyLastLine.name() : __justifyLastLine,
        __relativeIndent.name() : __relativeIndent,
        __shrinkToFit.name() : __shrinkToFit,
        __wrapText.name() : __wrapText,
        __readingOrder.name() : __readingOrder
    }
Namespace.addCategoryObject('typeBinding', u'CT_CellAlignment', CT_CellAlignment)


# Complex type CT_VolTypes with content type ELEMENT_ONLY
class CT_VolTypes (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_VolTypes')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_VolTypes_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}volType uses Python identifier volType
    __volType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'volType'), 'volType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_VolTypes_httpschemas_openxmlformats_orgspreadsheetml2006mainvolType', True)

    
    volType = property(__volType.value, __volType.set, None, u'Volatile Dependency Type')


    _ElementMap = {
        __extLst.name() : __extLst,
        __volType.name() : __volType
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_VolTypes', CT_VolTypes)


# Complex type CT_GradientFill with content type ELEMENT_ONLY
class CT_GradientFill (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_GradientFill')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}stop uses Python identifier stop
    __stop = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'stop'), 'stop', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GradientFill_httpschemas_openxmlformats_orgspreadsheetml2006mainstop', True)

    
    stop = property(__stop.value, __stop.set, None, u'Gradient Stop')

    
    # Attribute degree uses Python identifier degree
    __degree = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'degree'), 'degree', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GradientFill_degree', pyxb.binding.datatypes.double, unicode_default=u'0')
    
    degree = property(__degree.value, __degree.set, None, u'Linear Gradient Degree')

    
    # Attribute left uses Python identifier left
    __left = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'left'), 'left', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GradientFill_left', pyxb.binding.datatypes.double, unicode_default=u'0')
    
    left = property(__left.value, __left.set, None, u'Left Convergence')

    
    # Attribute right uses Python identifier right
    __right = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'right'), 'right', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GradientFill_right', pyxb.binding.datatypes.double, unicode_default=u'0')
    
    right = property(__right.value, __right.set, None, u'Right Convergence')

    
    # Attribute top uses Python identifier top
    __top = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'top'), 'top', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GradientFill_top', pyxb.binding.datatypes.double, unicode_default=u'0')
    
    top = property(__top.value, __top.set, None, u'Top Gradient Convergence')

    
    # Attribute bottom uses Python identifier bottom
    __bottom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bottom'), 'bottom', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GradientFill_bottom', pyxb.binding.datatypes.double, unicode_default=u'0')
    
    bottom = property(__bottom.value, __bottom.set, None, u'Bottom Convergence')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GradientFill_type', ST_GradientType, unicode_default=u'linear')
    
    type = property(__type.value, __type.set, None, u'Gradient Fill Type')


    _ElementMap = {
        __stop.name() : __stop
    }
    _AttributeMap = {
        __degree.name() : __degree,
        __left.name() : __left,
        __right.name() : __right,
        __top.name() : __top,
        __bottom.name() : __bottom,
        __type.name() : __type
    }
Namespace.addCategoryObject('typeBinding', u'CT_GradientFill', CT_GradientFill)


# Complex type CT_ExternalReferences with content type ELEMENT_ONLY
class CT_ExternalReferences (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ExternalReferences')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}externalReference uses Python identifier externalReference
    __externalReference = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'externalReference'), 'externalReference', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalReferences_httpschemas_openxmlformats_orgspreadsheetml2006mainexternalReference', True)

    
    externalReference = property(__externalReference.value, __externalReference.set, None, u'External Reference')


    _ElementMap = {
        __externalReference.name() : __externalReference
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_ExternalReferences', CT_ExternalReferences)


# Complex type CT_Tuples with content type ELEMENT_ONLY
class CT_Tuples (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Tuples')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tpl uses Python identifier tpl
    __tpl = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tpl'), 'tpl', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Tuples_httpschemas_openxmlformats_orgspreadsheetml2006maintpl', True)

    
    tpl = property(__tpl.value, __tpl.set, None, u'Tuple')

    
    # Attribute c uses Python identifier c
    __c = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'c'), 'c', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Tuples_c', pyxb.binding.datatypes.unsignedInt)
    
    c = property(__c.value, __c.set, None, u'Member Name Count')


    _ElementMap = {
        __tpl.name() : __tpl
    }
    _AttributeMap = {
        __c.name() : __c
    }
Namespace.addCategoryObject('typeBinding', u'CT_Tuples', CT_Tuples)


# Complex type CT_Extension with content type ELEMENT_ONLY
class CT_Extension (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Extension')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute uri uses Python identifier uri
    __uri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uri'), 'uri', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Extension_uri', pyxb.binding.datatypes.token)
    
    uri = property(__uri.value, __uri.set, None, u'URI')

    _HasWildcardElement = True

    _ElementMap = {
        
    }
    _AttributeMap = {
        __uri.name() : __uri
    }
Namespace.addCategoryObject('typeBinding', u'CT_Extension', CT_Extension)


# Complex type CT_MemberProperty with content type EMPTY
class CT_MemberProperty (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MemberProperty')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute level uses Python identifier level
    __level = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'level'), 'level', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MemberProperty_level', pyxb.binding.datatypes.unsignedInt)
    
    level = property(__level.value, __level.set, None, u'Level Index')

    
    # Attribute showTip uses Python identifier showTip
    __showTip = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showTip'), 'showTip', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MemberProperty_showTip', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showTip = property(__showTip.value, __showTip.set, None, u'Show Tooltip')

    
    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MemberProperty_field', pyxb.binding.datatypes.unsignedInt, required=True)
    
    field = property(__field.value, __field.set, None, u'Field Index')

    
    # Attribute showAsCaption uses Python identifier showAsCaption
    __showAsCaption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showAsCaption'), 'showAsCaption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MemberProperty_showAsCaption', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showAsCaption = property(__showAsCaption.value, __showAsCaption.set, None, u'Show As Caption')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MemberProperty_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'OLAP Member Property Unique Name')

    
    # Attribute nameLen uses Python identifier nameLen
    __nameLen = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nameLen'), 'nameLen', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MemberProperty_nameLen', pyxb.binding.datatypes.unsignedInt)
    
    nameLen = property(__nameLen.value, __nameLen.set, None, u'Name Length')

    
    # Attribute pLen uses Python identifier pLen
    __pLen = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pLen'), 'pLen', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MemberProperty_pLen', pyxb.binding.datatypes.unsignedInt)
    
    pLen = property(__pLen.value, __pLen.set, None, u'Property Name Length')

    
    # Attribute pPos uses Python identifier pPos
    __pPos = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pPos'), 'pPos', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MemberProperty_pPos', pyxb.binding.datatypes.unsignedInt)
    
    pPos = property(__pPos.value, __pPos.set, None, u'Property Name Character Index')

    
    # Attribute showCell uses Python identifier showCell
    __showCell = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showCell'), 'showCell', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MemberProperty_showCell', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showCell = property(__showCell.value, __showCell.set, None, u'Show Cell')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __level.name() : __level,
        __showTip.name() : __showTip,
        __field.name() : __field,
        __showAsCaption.name() : __showAsCaption,
        __name.name() : __name,
        __nameLen.name() : __nameLen,
        __pLen.name() : __pLen,
        __pPos.name() : __pPos,
        __showCell.name() : __showCell
    }
Namespace.addCategoryObject('typeBinding', u'CT_MemberProperty', CT_MemberProperty)


# Complex type CT_LegacyDrawing with content type EMPTY
class CT_LegacyDrawing (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_LegacyDrawing')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_LegacyDrawing_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
Namespace.addCategoryObject('typeBinding', u'CT_LegacyDrawing', CT_LegacyDrawing)


# Complex type CT_X with content type EMPTY
class CT_X (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_X')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute v uses Python identifier v
    __v = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'v'), 'v', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_X_v', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    v = property(__v.value, __v.set, None, u'Shared Items Index')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __v.name() : __v
    }
Namespace.addCategoryObject('typeBinding', u'CT_X', CT_X)


# Complex type CT_Selection with content type EMPTY
class CT_Selection (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Selection')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute activeCellId uses Python identifier activeCellId
    __activeCellId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'activeCellId'), 'activeCellId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Selection_activeCellId', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    activeCellId = property(__activeCellId.value, __activeCellId.set, None, u'Active Cell Index')

    
    # Attribute sqref uses Python identifier sqref
    __sqref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sqref'), 'sqref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Selection_sqref', ST_Sqref, unicode_default=u'A1')
    
    sqref = property(__sqref.value, __sqref.set, None, u'Sequence of References')

    
    # Attribute pane uses Python identifier pane
    __pane = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pane'), 'pane', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Selection_pane', ST_Pane, unicode_default=u'topLeft')
    
    pane = property(__pane.value, __pane.set, None, u'Pane')

    
    # Attribute activeCell uses Python identifier activeCell
    __activeCell = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'activeCell'), 'activeCell', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Selection_activeCell', ST_CellRef)
    
    activeCell = property(__activeCell.value, __activeCell.set, None, u'Active Cell Location')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __activeCellId.name() : __activeCellId,
        __sqref.name() : __sqref,
        __pane.name() : __pane,
        __activeCell.name() : __activeCell
    }
Namespace.addCategoryObject('typeBinding', u'CT_Selection', CT_Selection)


# Complex type CT_TupleCache with content type ELEMENT_ONLY
class CT_TupleCache (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_TupleCache')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TupleCache_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}entries uses Python identifier entries
    __entries = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'entries'), 'entries', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TupleCache_httpschemas_openxmlformats_orgspreadsheetml2006mainentries', False)

    
    entries = property(__entries.value, __entries.set, None, u'Entries')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}serverFormats uses Python identifier serverFormats
    __serverFormats = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'serverFormats'), 'serverFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TupleCache_httpschemas_openxmlformats_orgspreadsheetml2006mainserverFormats', False)

    
    serverFormats = property(__serverFormats.value, __serverFormats.set, None, u'Server Formats')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}queryCache uses Python identifier queryCache
    __queryCache = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'queryCache'), 'queryCache', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TupleCache_httpschemas_openxmlformats_orgspreadsheetml2006mainqueryCache', False)

    
    queryCache = property(__queryCache.value, __queryCache.set, None, u'OLAP Query Cache')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sets uses Python identifier sets
    __sets = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sets'), 'sets', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TupleCache_httpschemas_openxmlformats_orgspreadsheetml2006mainsets', False)

    
    sets = property(__sets.value, __sets.set, None, u'Sets')


    _ElementMap = {
        __extLst.name() : __extLst,
        __entries.name() : __entries,
        __serverFormats.name() : __serverFormats,
        __queryCache.name() : __queryCache,
        __sets.name() : __sets
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_TupleCache', CT_TupleCache)


# Complex type CT_ConditionalFormatting with content type ELEMENT_ONLY
class CT_ConditionalFormatting (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ConditionalFormatting')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ConditionalFormatting_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cfRule uses Python identifier cfRule
    __cfRule = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cfRule'), 'cfRule', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ConditionalFormatting_httpschemas_openxmlformats_orgspreadsheetml2006maincfRule', True)

    
    cfRule = property(__cfRule.value, __cfRule.set, None, u'Conditional Formatting Rule')

    
    # Attribute pivot uses Python identifier pivot
    __pivot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pivot'), 'pivot', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ConditionalFormatting_pivot', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    pivot = property(__pivot.value, __pivot.set, None, u'PivotTable Conditional Formatting')

    
    # Attribute sqref uses Python identifier sqref
    __sqref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sqref'), 'sqref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ConditionalFormatting_sqref', ST_Sqref)
    
    sqref = property(__sqref.value, __sqref.set, None, u'Sequence of Refernces')


    _ElementMap = {
        __extLst.name() : __extLst,
        __cfRule.name() : __cfRule
    }
    _AttributeMap = {
        __pivot.name() : __pivot,
        __sqref.name() : __sqref
    }
Namespace.addCategoryObject('typeBinding', u'CT_ConditionalFormatting', CT_ConditionalFormatting)


# Complex type CT_PhoneticPr with content type EMPTY
class CT_PhoneticPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PhoneticPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PhoneticPr_type', ST_PhoneticType, unicode_default=u'fullwidthKatakana')
    
    type = property(__type.value, __type.set, None, u'Character Type')

    
    # Attribute alignment uses Python identifier alignment
    __alignment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'alignment'), 'alignment', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PhoneticPr_alignment', ST_PhoneticAlignment, unicode_default=u'left')
    
    alignment = property(__alignment.value, __alignment.set, None, u'Alignment')

    
    # Attribute fontId uses Python identifier fontId
    __fontId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fontId'), 'fontId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PhoneticPr_fontId', ST_FontId, required=True)
    
    fontId = property(__fontId.value, __fontId.set, None, u'Font Id')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __type.name() : __type,
        __alignment.name() : __alignment,
        __fontId.name() : __fontId
    }
Namespace.addCategoryObject('typeBinding', u'CT_PhoneticPr', CT_PhoneticPr)


# Complex type CT_ChartsheetProtection with content type EMPTY
class CT_ChartsheetProtection (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ChartsheetProtection')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute saltValue uses Python identifier saltValue
    __saltValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'saltValue'), 'saltValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetProtection_saltValue', pyxb.binding.datatypes.base64Binary)
    
    saltValue = property(__saltValue.value, __saltValue.set, None, u'Salt Value for Password Verifier')

    
    # Attribute spinCount uses Python identifier spinCount
    __spinCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spinCount'), 'spinCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetProtection_spinCount', pyxb.binding.datatypes.unsignedInt)
    
    spinCount = property(__spinCount.value, __spinCount.set, None, u'Iterations to Run Hashing Algorithm')

    
    # Attribute content uses Python identifier content_
    __content = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'content'), 'content_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetProtection_content', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    content_ = property(__content.value, __content.set, None, u'Contents')

    
    # Attribute password uses Python identifier password
    __password = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'password'), 'password', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetProtection_password', ST_UnsignedShortHex)
    
    password = property(__password.value, __password.set, None, u'Password')

    
    # Attribute hashValue uses Python identifier hashValue
    __hashValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hashValue'), 'hashValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetProtection_hashValue', pyxb.binding.datatypes.base64Binary)
    
    hashValue = property(__hashValue.value, __hashValue.set, None, u'Password Hash Value')

    
    # Attribute objects uses Python identifier objects
    __objects = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'objects'), 'objects', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetProtection_objects', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    objects = property(__objects.value, __objects.set, None, u'Objects Locked')

    
    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetProtection_algorithmName', _s.ST_Xstring)
    
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, u'Cryptographic Algorithm Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __saltValue.name() : __saltValue,
        __spinCount.name() : __spinCount,
        __content.name() : __content,
        __password.name() : __password,
        __hashValue.name() : __hashValue,
        __objects.name() : __objects,
        __algorithmName.name() : __algorithmName
    }
Namespace.addCategoryObject('typeBinding', u'CT_ChartsheetProtection', CT_ChartsheetProtection)


# Complex type CT_SortState with content type ELEMENT_ONLY
class CT_SortState (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SortState')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SortState_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sortCondition uses Python identifier sortCondition
    __sortCondition = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sortCondition'), 'sortCondition', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SortState_httpschemas_openxmlformats_orgspreadsheetml2006mainsortCondition', True)

    
    sortCondition = property(__sortCondition.value, __sortCondition.set, None, u'Sort Condition')

    
    # Attribute caseSensitive uses Python identifier caseSensitive
    __caseSensitive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'caseSensitive'), 'caseSensitive', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SortState_caseSensitive', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    caseSensitive = property(__caseSensitive.value, __caseSensitive.set, None, u'Case Sensitive')

    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SortState_ref', ST_Ref, required=True)
    
    ref = property(__ref.value, __ref.set, None, u'Sort Range')

    
    # Attribute columnSort uses Python identifier columnSort
    __columnSort = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'columnSort'), 'columnSort', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SortState_columnSort', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    columnSort = property(__columnSort.value, __columnSort.set, None, u'Sort by Columns')

    
    # Attribute sortMethod uses Python identifier sortMethod
    __sortMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sortMethod'), 'sortMethod', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SortState_sortMethod', ST_SortMethod, unicode_default=u'none')
    
    sortMethod = property(__sortMethod.value, __sortMethod.set, None, u'Sort Method')


    _ElementMap = {
        __extLst.name() : __extLst,
        __sortCondition.name() : __sortCondition
    }
    _AttributeMap = {
        __caseSensitive.name() : __caseSensitive,
        __ref.name() : __ref,
        __columnSort.name() : __columnSort,
        __sortMethod.name() : __sortMethod
    }
Namespace.addCategoryObject('typeBinding', u'CT_SortState', CT_SortState)


# Complex type CT_IntProperty with content type EMPTY
class CT_IntProperty (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_IntProperty')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IntProperty_val', pyxb.binding.datatypes.int, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
Namespace.addCategoryObject('typeBinding', u'CT_IntProperty', CT_IntProperty)


# Complex type CT_FontScheme with content type EMPTY
class CT_FontScheme (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_FontScheme')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FontScheme_val', ST_FontScheme, required=True)
    
    val = property(__val.value, __val.set, None, u'Font Scheme')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
Namespace.addCategoryObject('typeBinding', u'CT_FontScheme', CT_FontScheme)


# Complex type CT_MdxMemeberProp with content type EMPTY
class CT_MdxMemeberProp (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MdxMemeberProp')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute np uses Python identifier np
    __np = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'np'), 'np', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxMemeberProp_np', pyxb.binding.datatypes.unsignedInt, required=True)
    
    np = property(__np.value, __np.set, None, u'Property Name Index')

    
    # Attribute n uses Python identifier n
    __n = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'n'), 'n', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxMemeberProp_n', pyxb.binding.datatypes.unsignedInt, required=True)
    
    n = property(__n.value, __n.set, None, u'Member Unique Name Index')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __np.name() : __np,
        __n.name() : __n
    }
Namespace.addCategoryObject('typeBinding', u'CT_MdxMemeberProp', CT_MdxMemeberProp)


# Complex type CT_Schema with content type MIXED
class CT_Schema (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Schema')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute SchemaLanguage uses Python identifier SchemaLanguage
    __SchemaLanguage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'SchemaLanguage'), 'SchemaLanguage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Schema_SchemaLanguage', pyxb.binding.datatypes.token)
    
    SchemaLanguage = property(__SchemaLanguage.value, __SchemaLanguage.set, None, u'Schema Language')

    
    # Attribute Namespace uses Python identifier Namespace
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'Namespace'), 'Namespace', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Schema_Namespace', pyxb.binding.datatypes.string)
    
    Namespace = property(__Namespace.value, __Namespace.set, None, u'Schema Root Namespace')

    
    # Attribute SchemaRef uses Python identifier SchemaRef
    __SchemaRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'SchemaRef'), 'SchemaRef', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Schema_SchemaRef', pyxb.binding.datatypes.string)
    
    SchemaRef = property(__SchemaRef.value, __SchemaRef.set, None, u'Schema Reference')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ID'), 'ID', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Schema_ID', pyxb.binding.datatypes.string, required=True)
    
    ID = property(__ID.value, __ID.set, None, u'Schema ID')

    _HasWildcardElement = True

    _ElementMap = {
        
    }
    _AttributeMap = {
        __SchemaLanguage.name() : __SchemaLanguage,
        __Namespace.name() : __Namespace,
        __SchemaRef.name() : __SchemaRef,
        __ID.name() : __ID
    }
Namespace.addCategoryObject('typeBinding', u'CT_Schema', CT_Schema)


# Complex type CT_Border with content type ELEMENT_ONLY
class CT_Border (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Border')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}bottom uses Python identifier bottom
    __bottom = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'bottom'), 'bottom', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Border_httpschemas_openxmlformats_orgspreadsheetml2006mainbottom', False)

    
    bottom = property(__bottom.value, __bottom.set, None, u'Bottom Border')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}top uses Python identifier top
    __top = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'top'), 'top', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Border_httpschemas_openxmlformats_orgspreadsheetml2006maintop', False)

    
    top = property(__top.value, __top.set, None, u'Top Border')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}start uses Python identifier start
    __start = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'start'), 'start', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Border_httpschemas_openxmlformats_orgspreadsheetml2006mainstart', False)

    
    start = property(__start.value, __start.set, None, u'Leading Edge Border')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}right uses Python identifier right
    __right = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'right'), 'right', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Border_httpschemas_openxmlformats_orgspreadsheetml2006mainright', False)

    
    right = property(__right.value, __right.set, None, u'Trailing Edge Border')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}diagonal uses Python identifier diagonal
    __diagonal = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'diagonal'), 'diagonal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Border_httpschemas_openxmlformats_orgspreadsheetml2006maindiagonal', False)

    
    diagonal = property(__diagonal.value, __diagonal.set, None, u'Diagonal')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}end uses Python identifier end
    __end = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'end'), 'end', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Border_httpschemas_openxmlformats_orgspreadsheetml2006mainend', False)

    
    end = property(__end.value, __end.set, None, u'Trailing Edge Border')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}vertical uses Python identifier vertical
    __vertical = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'vertical'), 'vertical', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Border_httpschemas_openxmlformats_orgspreadsheetml2006mainvertical', False)

    
    vertical = property(__vertical.value, __vertical.set, None, u'Vertical Inner Border')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}left uses Python identifier left
    __left = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'left'), 'left', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Border_httpschemas_openxmlformats_orgspreadsheetml2006mainleft', False)

    
    left = property(__left.value, __left.set, None, u'Leading Edge Border')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}horizontal uses Python identifier horizontal
    __horizontal = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'horizontal'), 'horizontal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Border_httpschemas_openxmlformats_orgspreadsheetml2006mainhorizontal', False)

    
    horizontal = property(__horizontal.value, __horizontal.set, None, u'Horizontal Inner Borders')

    
    # Attribute diagonalUp uses Python identifier diagonalUp
    __diagonalUp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'diagonalUp'), 'diagonalUp', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Border_diagonalUp', pyxb.binding.datatypes.boolean)
    
    diagonalUp = property(__diagonalUp.value, __diagonalUp.set, None, u'Diagonal Up')

    
    # Attribute diagonalDown uses Python identifier diagonalDown
    __diagonalDown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'diagonalDown'), 'diagonalDown', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Border_diagonalDown', pyxb.binding.datatypes.boolean)
    
    diagonalDown = property(__diagonalDown.value, __diagonalDown.set, None, u'Diagonal Down')

    
    # Attribute outline uses Python identifier outline
    __outline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'outline'), 'outline', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Border_outline', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    outline = property(__outline.value, __outline.set, None, u'Outline')


    _ElementMap = {
        __bottom.name() : __bottom,
        __top.name() : __top,
        __start.name() : __start,
        __right.name() : __right,
        __diagonal.name() : __diagonal,
        __end.name() : __end,
        __vertical.name() : __vertical,
        __left.name() : __left,
        __horizontal.name() : __horizontal
    }
    _AttributeMap = {
        __diagonalUp.name() : __diagonalUp,
        __diagonalDown.name() : __diagonalDown,
        __outline.name() : __outline
    }
Namespace.addCategoryObject('typeBinding', u'CT_Border', CT_Border)


# Complex type CT_ControlPr with content type ELEMENT_ONLY
class CT_ControlPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ControlPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}anchor uses Python identifier anchor
    __anchor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'anchor'), 'anchor', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_httpschemas_openxmlformats_orgspreadsheetml2006mainanchor', False)

    
    anchor = property(__anchor.value, __anchor.set, None, u'Object Cell Anchor')

    
    # Attribute defaultSize uses Python identifier defaultSize
    __defaultSize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultSize'), 'defaultSize', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_defaultSize', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    defaultSize = property(__defaultSize.value, __defaultSize.set, None, u'Default Size Flag')

    
    # Attribute locked uses Python identifier locked
    __locked = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'locked'), 'locked', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_locked', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    locked = property(__locked.value, __locked.set, None, u'Locked Flag')

    
    # Attribute listFillRange uses Python identifier listFillRange
    __listFillRange = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'listFillRange'), 'listFillRange', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_listFillRange', ST_Formula)
    
    listFillRange = property(__listFillRange.value, __listFillRange.set, None, u'List Items Source Range')

    
    # Attribute autoLine uses Python identifier autoLine
    __autoLine = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoLine'), 'autoLine', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_autoLine', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoLine = property(__autoLine.value, __autoLine.set, None, u'Automatic Line Flag')

    
    # Attribute print uses Python identifier print_
    __print = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print'), 'print_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_print', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    print_ = property(__print.value, __print.set, None, u'Print Flag')

    
    # Attribute cf uses Python identifier cf
    __cf = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cf'), 'cf', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_cf', _s.ST_Xstring, unicode_default=u'pict')
    
    cf = property(__cf.value, __cf.set, None, u'Image Format')

    
    # Attribute autoPict uses Python identifier autoPict
    __autoPict = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoPict'), 'autoPict', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_autoPict', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoPict = property(__autoPict.value, __autoPict.set, None, u'Automatic Size Flag')

    
    # Attribute disabled uses Python identifier disabled
    __disabled = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'disabled'), 'disabled', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_disabled', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    disabled = property(__disabled.value, __disabled.set, None, u'Disabled Flag')

    
    # Attribute recalcAlways uses Python identifier recalcAlways
    __recalcAlways = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'recalcAlways'), 'recalcAlways', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_recalcAlways', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    recalcAlways = property(__recalcAlways.value, __recalcAlways.set, None, u'Recalculation Flag')

    
    # Attribute altText uses Python identifier altText
    __altText = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'altText'), 'altText', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_altText', _s.ST_Xstring)
    
    altText = property(__altText.value, __altText.set, None, u'Alternative Text')

    
    # Attribute macro uses Python identifier macro
    __macro = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'macro'), 'macro', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_macro', ST_Formula)
    
    macro = property(__macro.value, __macro.set, None, u'Custom Function')

    
    # Attribute uiObject uses Python identifier uiObject
    __uiObject = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uiObject'), 'uiObject', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_uiObject', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    uiObject = property(__uiObject.value, __uiObject.set, None, u'UI Object Flag')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute linkedCell uses Python identifier linkedCell
    __linkedCell = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'linkedCell'), 'linkedCell', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_linkedCell', ST_Formula)
    
    linkedCell = property(__linkedCell.value, __linkedCell.set, None, u'Linked Formula')

    
    # Attribute autoFill uses Python identifier autoFill
    __autoFill = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoFill'), 'autoFill', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ControlPr_autoFill', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoFill = property(__autoFill.value, __autoFill.set, None, u'Automatic Fill Flag')


    _ElementMap = {
        __anchor.name() : __anchor
    }
    _AttributeMap = {
        __defaultSize.name() : __defaultSize,
        __locked.name() : __locked,
        __listFillRange.name() : __listFillRange,
        __autoLine.name() : __autoLine,
        __print.name() : __print,
        __cf.name() : __cf,
        __autoPict.name() : __autoPict,
        __disabled.name() : __disabled,
        __recalcAlways.name() : __recalcAlways,
        __altText.name() : __altText,
        __macro.name() : __macro,
        __uiObject.name() : __uiObject,
        __id.name() : __id,
        __linkedCell.name() : __linkedCell,
        __autoFill.name() : __autoFill
    }
Namespace.addCategoryObject('typeBinding', u'CT_ControlPr', CT_ControlPr)


# Complex type CT_Filters with content type ELEMENT_ONLY
class CT_Filters (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Filters')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dateGroupItem uses Python identifier dateGroupItem
    __dateGroupItem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dateGroupItem'), 'dateGroupItem', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Filters_httpschemas_openxmlformats_orgspreadsheetml2006maindateGroupItem', True)

    
    dateGroupItem = property(__dateGroupItem.value, __dateGroupItem.set, None, u'Date Grouping')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}filter uses Python identifier filter
    __filter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'filter'), 'filter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Filters_httpschemas_openxmlformats_orgspreadsheetml2006mainfilter', True)

    
    filter = property(__filter.value, __filter.set, None, u'Filter')

    
    # Attribute calendarType uses Python identifier calendarType
    __calendarType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'calendarType'), 'calendarType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Filters_calendarType', _s.ST_CalendarType, unicode_default=u'none')
    
    calendarType = property(__calendarType.value, __calendarType.set, None, u'Calendar Type')

    
    # Attribute blank uses Python identifier blank
    __blank = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blank'), 'blank', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Filters_blank', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    blank = property(__blank.value, __blank.set, None, u'Filter by Blank')


    _ElementMap = {
        __dateGroupItem.name() : __dateGroupItem,
        __filter.name() : __filter
    }
    _AttributeMap = {
        __calendarType.name() : __calendarType,
        __blank.name() : __blank
    }
Namespace.addCategoryObject('typeBinding', u'CT_Filters', CT_Filters)


# Complex type CT_MetadataType with content type EMPTY
class CT_MetadataType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MetadataType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute rowColShift uses Python identifier rowColShift
    __rowColShift = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rowColShift'), 'rowColShift', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_rowColShift', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    rowColShift = property(__rowColShift.value, __rowColShift.set, None, u'Metadata Insert Delete')

    
    # Attribute clearAll uses Python identifier clearAll
    __clearAll = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'clearAll'), 'clearAll', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_clearAll', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    clearAll = property(__clearAll.value, __clearAll.set, None, u'Metadata Clear All')

    
    # Attribute pasteFormats uses Python identifier pasteFormats
    __pasteFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pasteFormats'), 'pasteFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_pasteFormats', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    pasteFormats = property(__pasteFormats.value, __pasteFormats.set, None, u'Metadata Paste Formats')

    
    # Attribute clearFormats uses Python identifier clearFormats
    __clearFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'clearFormats'), 'clearFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_clearFormats', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    clearFormats = property(__clearFormats.value, __clearFormats.set, None, u'Metadata Clear Formats')

    
    # Attribute clearContents uses Python identifier clearContents
    __clearContents = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'clearContents'), 'clearContents', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_clearContents', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    clearContents = property(__clearContents.value, __clearContents.set, None, u'Metadata Clear Contents')

    
    # Attribute clearComments uses Python identifier clearComments
    __clearComments = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'clearComments'), 'clearComments', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_clearComments', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    clearComments = property(__clearComments.value, __clearComments.set, None, u'Metadata Clear Comments')

    
    # Attribute assign uses Python identifier assign
    __assign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'assign'), 'assign', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_assign', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    assign = property(__assign.value, __assign.set, None, u'Metadata Formula Assignment')

    
    # Attribute ghostCol uses Python identifier ghostCol
    __ghostCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ghostCol'), 'ghostCol', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_ghostCol', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ghostCol = property(__ghostCol.value, __ghostCol.set, None, u'Metadata Ghost Column')

    
    # Attribute edit uses Python identifier edit
    __edit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'edit'), 'edit', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_edit', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    edit = property(__edit.value, __edit.set, None, u'Metadata Edit')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Metadata Type Name')

    
    # Attribute copy uses Python identifier copy
    __copy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'copy'), 'copy', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_copy', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    copy = property(__copy.value, __copy.set, None, u'Metadata Copy')

    
    # Attribute pasteAll uses Python identifier pasteAll
    __pasteAll = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pasteAll'), 'pasteAll', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_pasteAll', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    pasteAll = property(__pasteAll.value, __pasteAll.set, None, u'Metadata Paste All')

    
    # Attribute coerce uses Python identifier coerce
    __coerce = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'coerce'), 'coerce', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_coerce', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    coerce = property(__coerce.value, __coerce.set, None, u'Metadata Coercion')

    
    # Attribute delete uses Python identifier delete
    __delete = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'delete'), 'delete', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_delete', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    delete = property(__delete.value, __delete.set, None, u'Metadata Cell Value Delete')

    
    # Attribute pasteValues uses Python identifier pasteValues
    __pasteValues = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pasteValues'), 'pasteValues', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_pasteValues', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    pasteValues = property(__pasteValues.value, __pasteValues.set, None, u'Metadata Paste Special Values')

    
    # Attribute minSupportedVersion uses Python identifier minSupportedVersion
    __minSupportedVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minSupportedVersion'), 'minSupportedVersion', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_minSupportedVersion', pyxb.binding.datatypes.unsignedInt, required=True)
    
    minSupportedVersion = property(__minSupportedVersion.value, __minSupportedVersion.set, None, u'Minimum Supported Version')

    
    # Attribute splitAll uses Python identifier splitAll
    __splitAll = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'splitAll'), 'splitAll', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_splitAll', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    splitAll = property(__splitAll.value, __splitAll.set, None, u'Metadata Split All')

    
    # Attribute pasteComments uses Python identifier pasteComments
    __pasteComments = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pasteComments'), 'pasteComments', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_pasteComments', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    pasteComments = property(__pasteComments.value, __pasteComments.set, None, u'Metadata Paste Comments')

    
    # Attribute pasteDataValidation uses Python identifier pasteDataValidation
    __pasteDataValidation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pasteDataValidation'), 'pasteDataValidation', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_pasteDataValidation', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    pasteDataValidation = property(__pasteDataValidation.value, __pasteDataValidation.set, None, u'Metadata Paste Data Validation')

    
    # Attribute adjust uses Python identifier adjust
    __adjust = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'adjust'), 'adjust', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_adjust', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    adjust = property(__adjust.value, __adjust.set, None, u'Adjust Metadata')

    
    # Attribute pasteBorders uses Python identifier pasteBorders
    __pasteBorders = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pasteBorders'), 'pasteBorders', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_pasteBorders', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    pasteBorders = property(__pasteBorders.value, __pasteBorders.set, None, u'Metadata Paste Borders')

    
    # Attribute pasteFormulas uses Python identifier pasteFormulas
    __pasteFormulas = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pasteFormulas'), 'pasteFormulas', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_pasteFormulas', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    pasteFormulas = property(__pasteFormulas.value, __pasteFormulas.set, None, u'Metadata Paste Formulas')

    
    # Attribute pasteColWidths uses Python identifier pasteColWidths
    __pasteColWidths = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pasteColWidths'), 'pasteColWidths', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_pasteColWidths', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    pasteColWidths = property(__pasteColWidths.value, __pasteColWidths.set, None, u'Metadata Paste Column Widths')

    
    # Attribute ghostRow uses Python identifier ghostRow
    __ghostRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ghostRow'), 'ghostRow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_ghostRow', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ghostRow = property(__ghostRow.value, __ghostRow.set, None, u'Metadata Ghost Row')

    
    # Attribute pasteNumberFormats uses Python identifier pasteNumberFormats
    __pasteNumberFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pasteNumberFormats'), 'pasteNumberFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_pasteNumberFormats', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    pasteNumberFormats = property(__pasteNumberFormats.value, __pasteNumberFormats.set, None, u'Metadata Paste Number Formats')

    
    # Attribute merge uses Python identifier merge
    __merge = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'merge'), 'merge', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_merge', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    merge = property(__merge.value, __merge.set, None, u'Metadata Merge')

    
    # Attribute splitFirst uses Python identifier splitFirst
    __splitFirst = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'splitFirst'), 'splitFirst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_splitFirst', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    splitFirst = property(__splitFirst.value, __splitFirst.set, None, u'Meatadata Split First')

    
    # Attribute cellMeta uses Python identifier cellMeta
    __cellMeta = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cellMeta'), 'cellMeta', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataType_cellMeta', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    cellMeta = property(__cellMeta.value, __cellMeta.set, None, u'Cell Metadata')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __rowColShift.name() : __rowColShift,
        __clearAll.name() : __clearAll,
        __pasteFormats.name() : __pasteFormats,
        __clearFormats.name() : __clearFormats,
        __clearContents.name() : __clearContents,
        __clearComments.name() : __clearComments,
        __assign.name() : __assign,
        __ghostCol.name() : __ghostCol,
        __edit.name() : __edit,
        __name.name() : __name,
        __copy.name() : __copy,
        __pasteAll.name() : __pasteAll,
        __coerce.name() : __coerce,
        __delete.name() : __delete,
        __pasteValues.name() : __pasteValues,
        __minSupportedVersion.name() : __minSupportedVersion,
        __splitAll.name() : __splitAll,
        __pasteComments.name() : __pasteComments,
        __pasteDataValidation.name() : __pasteDataValidation,
        __adjust.name() : __adjust,
        __pasteBorders.name() : __pasteBorders,
        __pasteFormulas.name() : __pasteFormulas,
        __pasteColWidths.name() : __pasteColWidths,
        __ghostRow.name() : __ghostRow,
        __pasteNumberFormats.name() : __pasteNumberFormats,
        __merge.name() : __merge,
        __splitFirst.name() : __splitFirst,
        __cellMeta.name() : __cellMeta
    }
Namespace.addCategoryObject('typeBinding', u'CT_MetadataType', CT_MetadataType)


# Complex type CT_PageBreak with content type ELEMENT_ONLY
class CT_PageBreak (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PageBreak')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}brk uses Python identifier brk
    __brk = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'brk'), 'brk', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageBreak_httpschemas_openxmlformats_orgspreadsheetml2006mainbrk', True)

    
    brk = property(__brk.value, __brk.set, None, u'Break')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageBreak_count', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    count = property(__count.value, __count.set, None, u'Page Break Count')

    
    # Attribute manualBreakCount uses Python identifier manualBreakCount
    __manualBreakCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'manualBreakCount'), 'manualBreakCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageBreak_manualBreakCount', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    manualBreakCount = property(__manualBreakCount.value, __manualBreakCount.set, None, u'Manual Break Count')


    _ElementMap = {
        __brk.name() : __brk
    }
    _AttributeMap = {
        __count.name() : __count,
        __manualBreakCount.name() : __manualBreakCount
    }
Namespace.addCategoryObject('typeBinding', u'CT_PageBreak', CT_PageBreak)


# Complex type CT_String with content type ELEMENT_ONLY
class CT_String (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_String')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}x uses Python identifier x
    __x = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'x'), 'x', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_String_httpschemas_openxmlformats_orgspreadsheetml2006mainx', True)

    
    x = property(__x.value, __x.set, None, u'Member Property Index')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tpls uses Python identifier tpls
    __tpls = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tpls'), 'tpls', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_String_httpschemas_openxmlformats_orgspreadsheetml2006maintpls', True)

    
    tpls = property(__tpls.value, __tpls.set, None, u'Tuples')

    
    # Attribute cp uses Python identifier cp
    __cp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cp'), 'cp', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_String_cp', pyxb.binding.datatypes.unsignedInt)
    
    cp = property(__cp.value, __cp.set, None, u'Member Property Count')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_String_b', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    b = property(__b.value, __b.set, None, u'Bold')

    
    # Attribute st uses Python identifier st
    __st = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'st'), 'st', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_String_st', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    st = property(__st.value, __st.set, None, u'Strikethrough')

    
    # Attribute in uses Python identifier in_
    __in = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'in'), 'in_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_String_in', pyxb.binding.datatypes.unsignedInt)
    
    in_ = property(__in.value, __in.set, None, u'Format Index')

    
    # Attribute v uses Python identifier v
    __v = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'v'), 'v', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_String_v', _s.ST_Xstring, required=True)
    
    v = property(__v.value, __v.set, None, u'Value')

    
    # Attribute bc uses Python identifier bc
    __bc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bc'), 'bc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_String_bc', ST_UnsignedIntHex)
    
    bc = property(__bc.value, __bc.set, None, u'Background Color')

    
    # Attribute u uses Python identifier u
    __u = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'u'), 'u', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_String_u', pyxb.binding.datatypes.boolean)
    
    u = property(__u.value, __u.set, None, u'Unused Item')

    
    # Attribute c uses Python identifier c
    __c = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'c'), 'c', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_String_c', _s.ST_Xstring)
    
    c = property(__c.value, __c.set, None, u'Item Caption')

    
    # Attribute fc uses Python identifier fc
    __fc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fc'), 'fc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_String_fc', ST_UnsignedIntHex)
    
    fc = property(__fc.value, __fc.set, None, u'Foreground Color')

    
    # Attribute f uses Python identifier f
    __f = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'f'), 'f', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_String_f', pyxb.binding.datatypes.boolean)
    
    f = property(__f.value, __f.set, None, u'Calculated Item')

    
    # Attribute i uses Python identifier i
    __i = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'i'), 'i', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_String_i', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    i = property(__i.value, __i.set, None, u'Italic')

    
    # Attribute un uses Python identifier un
    __un = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'un'), 'un', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_String_un', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    un = property(__un.value, __un.set, None, u'Underline')


    _ElementMap = {
        __x.name() : __x,
        __tpls.name() : __tpls
    }
    _AttributeMap = {
        __cp.name() : __cp,
        __b.name() : __b,
        __st.name() : __st,
        __in.name() : __in,
        __v.name() : __v,
        __bc.name() : __bc,
        __u.name() : __u,
        __c.name() : __c,
        __fc.name() : __fc,
        __f.name() : __f,
        __i.name() : __i,
        __un.name() : __un
    }
Namespace.addCategoryObject('typeBinding', u'CT_String', CT_String)


# Complex type CT_Cell with content type ELEMENT_ONLY
class CT_Cell (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Cell')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Cell_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}f uses Python identifier f
    __f = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'f'), 'f', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Cell_httpschemas_openxmlformats_orgspreadsheetml2006mainf', False)

    
    f = property(__f.value, __f.set, None, u'Formula')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}v uses Python identifier v
    __v = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'v'), 'v', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Cell_httpschemas_openxmlformats_orgspreadsheetml2006mainv', False)

    
    v = property(__v.value, __v.set, None, u'Cell Value')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}is uses Python identifier is_
    __is = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'is'), 'is_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Cell_httpschemas_openxmlformats_orgspreadsheetml2006mainis', False)

    
    is_ = property(__is.value, __is.set, None, u'Rich Text Inline')

    
    # Attribute ph uses Python identifier ph
    __ph = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ph'), 'ph', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Cell_ph', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ph = property(__ph.value, __ph.set, None, u'Show Phonetic')

    
    # Attribute vm uses Python identifier vm
    __vm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vm'), 'vm', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Cell_vm', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    vm = property(__vm.value, __vm.set, None, u'Value Metadata Index')

    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Cell_r', ST_CellRef)
    
    r = property(__r.value, __r.set, None, u'Reference')

    
    # Attribute s uses Python identifier s
    __s = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u's'), 's', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Cell_s', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    s = property(__s.value, __s.set, None, u'Style Index')

    
    # Attribute t uses Python identifier t
    __t = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u't'), 't', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Cell_t', ST_CellType, unicode_default=u'n')
    
    t = property(__t.value, __t.set, None, u'Cell Data Type')

    
    # Attribute cm uses Python identifier cm
    __cm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cm'), 'cm', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Cell_cm', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    cm = property(__cm.value, __cm.set, None, u'Cell Metadata Index')


    _ElementMap = {
        __extLst.name() : __extLst,
        __f.name() : __f,
        __v.name() : __v,
        __is.name() : __is
    }
    _AttributeMap = {
        __ph.name() : __ph,
        __vm.name() : __vm,
        __r.name() : __r,
        __s.name() : __s,
        __t.name() : __t,
        __cm.name() : __cm
    }
Namespace.addCategoryObject('typeBinding', u'CT_Cell', CT_Cell)


# Complex type CT_TablePart with content type EMPTY
class CT_TablePart (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_TablePart')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TablePart_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
Namespace.addCategoryObject('typeBinding', u'CT_TablePart', CT_TablePart)


# Complex type CT_RangeSet with content type EMPTY
class CT_RangeSet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RangeSet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangeSet_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'Named Range')

    
    # Attribute i1 uses Python identifier i1
    __i1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'i1'), 'i1', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangeSet_i1', pyxb.binding.datatypes.unsignedInt)
    
    i1 = property(__i1.value, __i1.set, None, u'Field Item Index Page 1')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangeSet_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute i2 uses Python identifier i2
    __i2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'i2'), 'i2', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangeSet_i2', pyxb.binding.datatypes.unsignedInt)
    
    i2 = property(__i2.value, __i2.set, None, u'Field Item Index Page 2')

    
    # Attribute i3 uses Python identifier i3
    __i3 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'i3'), 'i3', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangeSet_i3', pyxb.binding.datatypes.unsignedInt)
    
    i3 = property(__i3.value, __i3.set, None, u'Field Item index Page 3')

    
    # Attribute sheet uses Python identifier sheet
    __sheet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheet'), 'sheet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangeSet_sheet', _s.ST_Xstring)
    
    sheet = property(__sheet.value, __sheet.set, None, u'Sheet Name')

    
    # Attribute i4 uses Python identifier i4
    __i4 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'i4'), 'i4', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangeSet_i4', pyxb.binding.datatypes.unsignedInt)
    
    i4 = property(__i4.value, __i4.set, None, u'Field Item Index Page 4')

    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangeSet_ref', ST_Ref)
    
    ref = property(__ref.value, __ref.set, None, u'Reference')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __name.name() : __name,
        __i1.name() : __i1,
        __id.name() : __id,
        __i2.name() : __i2,
        __i3.name() : __i3,
        __sheet.name() : __sheet,
        __i4.name() : __i4,
        __ref.name() : __ref
    }
Namespace.addCategoryObject('typeBinding', u'CT_RangeSet', CT_RangeSet)


# Complex type CT_SheetViews with content type ELEMENT_ONLY
class CT_SheetViews (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SheetViews')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetViews_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetView uses Python identifier sheetView
    __sheetView = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetView'), 'sheetView', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetViews_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetView', True)

    
    sheetView = property(__sheetView.value, __sheetView.set, None, u'Worksheet View')


    _ElementMap = {
        __extLst.name() : __extLst,
        __sheetView.name() : __sheetView
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_SheetViews', CT_SheetViews)


# Complex type CT_CalculatedMembers with content type ELEMENT_ONLY
class CT_CalculatedMembers (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CalculatedMembers')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}calculatedMember uses Python identifier calculatedMember
    __calculatedMember = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'calculatedMember'), 'calculatedMember', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedMembers_httpschemas_openxmlformats_orgspreadsheetml2006maincalculatedMember', True)

    
    calculatedMember = property(__calculatedMember.value, __calculatedMember.set, None, u'Calculated Member')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedMembers_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Calculated Members Count')


    _ElementMap = {
        __calculatedMember.name() : __calculatedMember
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_CalculatedMembers', CT_CalculatedMembers)


# Complex type CT_ExternalCell with content type ELEMENT_ONLY
class CT_ExternalCell (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ExternalCell')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}v uses Python identifier v
    __v = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'v'), 'v', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalCell_httpschemas_openxmlformats_orgspreadsheetml2006mainv', False)

    
    v = property(__v.value, __v.set, None, u'Value')

    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalCell_r', ST_CellRef)
    
    r = property(__r.value, __r.set, None, u'Reference')

    
    # Attribute t uses Python identifier t
    __t = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u't'), 't', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalCell_t', ST_CellType, unicode_default=u'n')
    
    t = property(__t.value, __t.set, None, u'Type')

    
    # Attribute vm uses Python identifier vm
    __vm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vm'), 'vm', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalCell_vm', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    vm = property(__vm.value, __vm.set, None, u'Value Metadata')


    _ElementMap = {
        __v.name() : __v
    }
    _AttributeMap = {
        __r.name() : __r,
        __t.name() : __t,
        __vm.name() : __vm
    }
Namespace.addCategoryObject('typeBinding', u'CT_ExternalCell', CT_ExternalCell)


# Complex type CT_Error with content type ELEMENT_ONLY
class CT_Error (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Error')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}x uses Python identifier x
    __x = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'x'), 'x', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Error_httpschemas_openxmlformats_orgspreadsheetml2006mainx', True)

    
    x = property(__x.value, __x.set, None, u'Member Property Indexes')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tpls uses Python identifier tpls
    __tpls = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tpls'), 'tpls', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Error_httpschemas_openxmlformats_orgspreadsheetml2006maintpls', False)

    
    tpls = property(__tpls.value, __tpls.set, None, u'Tuples')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Error_b', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    b = property(__b.value, __b.set, None, u'Bold')

    
    # Attribute un uses Python identifier un
    __un = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'un'), 'un', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Error_un', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    un = property(__un.value, __un.set, None, u'Underline')

    
    # Attribute st uses Python identifier st
    __st = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'st'), 'st', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Error_st', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    st = property(__st.value, __st.set, None, u'Strikethrough')

    
    # Attribute v uses Python identifier v
    __v = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'v'), 'v', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Error_v', _s.ST_Xstring, required=True)
    
    v = property(__v.value, __v.set, None, u'Value')

    
    # Attribute c uses Python identifier c
    __c = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'c'), 'c', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Error_c', _s.ST_Xstring)
    
    c = property(__c.value, __c.set, None, u'Item Caption')

    
    # Attribute bc uses Python identifier bc
    __bc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bc'), 'bc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Error_bc', ST_UnsignedIntHex)
    
    bc = property(__bc.value, __bc.set, None, u'background Color')

    
    # Attribute fc uses Python identifier fc
    __fc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fc'), 'fc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Error_fc', ST_UnsignedIntHex)
    
    fc = property(__fc.value, __fc.set, None, u'Foreground Color')

    
    # Attribute f uses Python identifier f
    __f = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'f'), 'f', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Error_f', pyxb.binding.datatypes.boolean)
    
    f = property(__f.value, __f.set, None, u'Calculated Item')

    
    # Attribute in uses Python identifier in_
    __in = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'in'), 'in_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Error_in', pyxb.binding.datatypes.unsignedInt)
    
    in_ = property(__in.value, __in.set, None, u'Format Index')

    
    # Attribute u uses Python identifier u
    __u = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'u'), 'u', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Error_u', pyxb.binding.datatypes.boolean)
    
    u = property(__u.value, __u.set, None, u'Unused Item')

    
    # Attribute cp uses Python identifier cp
    __cp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cp'), 'cp', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Error_cp', pyxb.binding.datatypes.unsignedInt)
    
    cp = property(__cp.value, __cp.set, None, u'Member Property Count')

    
    # Attribute i uses Python identifier i
    __i = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'i'), 'i', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Error_i', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    i = property(__i.value, __i.set, None, u'Italic')


    _ElementMap = {
        __x.name() : __x,
        __tpls.name() : __tpls
    }
    _AttributeMap = {
        __b.name() : __b,
        __un.name() : __un,
        __st.name() : __st,
        __v.name() : __v,
        __c.name() : __c,
        __bc.name() : __bc,
        __fc.name() : __fc,
        __f.name() : __f,
        __in.name() : __in,
        __u.name() : __u,
        __cp.name() : __cp,
        __i.name() : __i
    }
Namespace.addCategoryObject('typeBinding', u'CT_Error', CT_Error)


# Complex type CT_ServerFormat with content type EMPTY
class CT_ServerFormat (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ServerFormat')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute culture uses Python identifier culture
    __culture = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'culture'), 'culture', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ServerFormat_culture', _s.ST_Xstring)
    
    culture = property(__culture.value, __culture.set, None, u'Culture')

    
    # Attribute format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'format'), 'format', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ServerFormat_format', _s.ST_Xstring)
    
    format = property(__format.value, __format.set, None, u'Format')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __culture.name() : __culture,
        __format.name() : __format
    }
Namespace.addCategoryObject('typeBinding', u'CT_ServerFormat', CT_ServerFormat)


# Complex type CT_FileVersion with content type EMPTY
class CT_FileVersion (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_FileVersion')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute lowestEdited uses Python identifier lowestEdited
    __lowestEdited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lowestEdited'), 'lowestEdited', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileVersion_lowestEdited', pyxb.binding.datatypes.string)
    
    lowestEdited = property(__lowestEdited.value, __lowestEdited.set, None, u'Lowest Edited Version')

    
    # Attribute codeName uses Python identifier codeName
    __codeName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeName'), 'codeName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileVersion_codeName', _s.ST_Guid)
    
    codeName = property(__codeName.value, __codeName.set, None, u'Code Name')

    
    # Attribute rupBuild uses Python identifier rupBuild
    __rupBuild = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rupBuild'), 'rupBuild', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileVersion_rupBuild', pyxb.binding.datatypes.string)
    
    rupBuild = property(__rupBuild.value, __rupBuild.set, None, u'Build Version')

    
    # Attribute lastEdited uses Python identifier lastEdited
    __lastEdited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lastEdited'), 'lastEdited', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileVersion_lastEdited', pyxb.binding.datatypes.string)
    
    lastEdited = property(__lastEdited.value, __lastEdited.set, None, u'Last Edited Version')

    
    # Attribute appName uses Python identifier appName
    __appName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'appName'), 'appName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileVersion_appName', pyxb.binding.datatypes.string)
    
    appName = property(__appName.value, __appName.set, None, u'Application Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __lowestEdited.name() : __lowestEdited,
        __codeName.name() : __codeName,
        __rupBuild.name() : __rupBuild,
        __lastEdited.name() : __lastEdited,
        __appName.name() : __appName
    }
Namespace.addCategoryObject('typeBinding', u'CT_FileVersion', CT_FileVersion)


# Complex type CT_Rst with content type ELEMENT_ONLY
class CT_Rst (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Rst')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}phoneticPr uses Python identifier phoneticPr
    __phoneticPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'phoneticPr'), 'phoneticPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Rst_httpschemas_openxmlformats_orgspreadsheetml2006mainphoneticPr', False)

    
    phoneticPr = property(__phoneticPr.value, __phoneticPr.set, None, u'Phonetic Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}t uses Python identifier t
    __t = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u't'), 't', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Rst_httpschemas_openxmlformats_orgspreadsheetml2006maint', False)

    
    t = property(__t.value, __t.set, None, u'Text')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'r'), 'r', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Rst_httpschemas_openxmlformats_orgspreadsheetml2006mainr', True)

    
    r = property(__r.value, __r.set, None, u'Rich Text Run')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rPh uses Python identifier rPh
    __rPh = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rPh'), 'rPh', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Rst_httpschemas_openxmlformats_orgspreadsheetml2006mainrPh', True)

    
    rPh = property(__rPh.value, __rPh.set, None, u'Phonetic Run')


    _ElementMap = {
        __phoneticPr.name() : __phoneticPr,
        __t.name() : __t,
        __r.name() : __r,
        __rPh.name() : __rPh
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Rst', CT_Rst)


# Complex type CT_CacheHierarchies with content type ELEMENT_ONLY
class CT_CacheHierarchies (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CacheHierarchies')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cacheHierarchy uses Python identifier cacheHierarchy
    __cacheHierarchy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cacheHierarchy'), 'cacheHierarchy', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchies_httpschemas_openxmlformats_orgspreadsheetml2006maincacheHierarchy', True)

    
    cacheHierarchy = property(__cacheHierarchy.value, __cacheHierarchy.set, None, u'PivotCache Hierarchy')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchies_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Hierarchy Count')


    _ElementMap = {
        __cacheHierarchy.name() : __cacheHierarchy
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_CacheHierarchies', CT_CacheHierarchies)


# Complex type CT_PageMargins with content type EMPTY
class CT_PageMargins (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PageMargins')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute footer uses Python identifier footer
    __footer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'footer'), 'footer', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageMargins_footer', pyxb.binding.datatypes.double, required=True)
    
    footer = property(__footer.value, __footer.set, None, u'Footer Page Margin')

    
    # Attribute top uses Python identifier top
    __top = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'top'), 'top', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageMargins_top', pyxb.binding.datatypes.double, required=True)
    
    top = property(__top.value, __top.set, None, u'Top Page Margin')

    
    # Attribute bottom uses Python identifier bottom
    __bottom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bottom'), 'bottom', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageMargins_bottom', pyxb.binding.datatypes.double, required=True)
    
    bottom = property(__bottom.value, __bottom.set, None, u'Bottom Page Margin')

    
    # Attribute right uses Python identifier right
    __right = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'right'), 'right', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageMargins_right', pyxb.binding.datatypes.double, required=True)
    
    right = property(__right.value, __right.set, None, u'Right Page Margin')

    
    # Attribute header uses Python identifier header
    __header = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'header'), 'header', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageMargins_header', pyxb.binding.datatypes.double, required=True)
    
    header = property(__header.value, __header.set, None, u'Header Page Margin')

    
    # Attribute left uses Python identifier left
    __left = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'left'), 'left', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageMargins_left', pyxb.binding.datatypes.double, required=True)
    
    left = property(__left.value, __left.set, None, u'Left Page Margin')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __footer.name() : __footer,
        __top.name() : __top,
        __bottom.name() : __bottom,
        __right.name() : __right,
        __header.name() : __header,
        __left.name() : __left
    }
Namespace.addCategoryObject('typeBinding', u'CT_PageMargins', CT_PageMargins)


# Complex type CT_DiscretePr with content type ELEMENT_ONLY
class CT_DiscretePr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DiscretePr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}x uses Python identifier x
    __x = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'x'), 'x', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DiscretePr_httpschemas_openxmlformats_orgspreadsheetml2006mainx', True)

    
    x = property(__x.value, __x.set, None, u'Element Group')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DiscretePr_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Mapping Index Count')


    _ElementMap = {
        __x.name() : __x
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_DiscretePr', CT_DiscretePr)


# Complex type CT_Scenario with content type ELEMENT_ONLY
class CT_Scenario (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Scenario')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}inputCells uses Python identifier inputCells
    __inputCells = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'inputCells'), 'inputCells', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Scenario_httpschemas_openxmlformats_orgspreadsheetml2006maininputCells', True)

    
    inputCells = property(__inputCells.value, __inputCells.set, None, u'Input Cells')

    
    # Attribute comment uses Python identifier comment
    __comment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'comment'), 'comment', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Scenario_comment', _s.ST_Xstring)
    
    comment = property(__comment.value, __comment.set, None, u'Scenario Comment')

    
    # Attribute user uses Python identifier user
    __user = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'user'), 'user', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Scenario_user', _s.ST_Xstring)
    
    user = property(__user.value, __user.set, None, u'User Name')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Scenario_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Changing Cell Count')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Scenario_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Scenario Name')

    
    # Attribute locked uses Python identifier locked
    __locked = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'locked'), 'locked', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Scenario_locked', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    locked = property(__locked.value, __locked.set, None, u'Scenario Locked')

    
    # Attribute hidden uses Python identifier hidden
    __hidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hidden'), 'hidden', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Scenario_hidden', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hidden = property(__hidden.value, __hidden.set, None, u'Hidden Scenario')


    _ElementMap = {
        __inputCells.name() : __inputCells
    }
    _AttributeMap = {
        __comment.name() : __comment,
        __user.name() : __user,
        __count.name() : __count,
        __name.name() : __name,
        __locked.name() : __locked,
        __hidden.name() : __hidden
    }
Namespace.addCategoryObject('typeBinding', u'CT_Scenario', CT_Scenario)


# Complex type CT_UnderlineProperty with content type EMPTY
class CT_UnderlineProperty (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_UnderlineProperty')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_UnderlineProperty_val', ST_UnderlineValues, unicode_default=u'single')
    
    val = property(__val.value, __val.set, None, u'Underline Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
Namespace.addCategoryObject('typeBinding', u'CT_UnderlineProperty', CT_UnderlineProperty)


# Complex type CT_DdeLink with content type ELEMENT_ONLY
class CT_DdeLink (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DdeLink')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}ddeItems uses Python identifier ddeItems
    __ddeItems = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ddeItems'), 'ddeItems', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DdeLink_httpschemas_openxmlformats_orgspreadsheetml2006mainddeItems', False)

    
    ddeItems = property(__ddeItems.value, __ddeItems.set, None, u'DDE Items Collection')

    
    # Attribute ddeService uses Python identifier ddeService
    __ddeService = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ddeService'), 'ddeService', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DdeLink_ddeService', _s.ST_Xstring, required=True)
    
    ddeService = property(__ddeService.value, __ddeService.set, None, u'Service name')

    
    # Attribute ddeTopic uses Python identifier ddeTopic
    __ddeTopic = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ddeTopic'), 'ddeTopic', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DdeLink_ddeTopic', _s.ST_Xstring, required=True)
    
    ddeTopic = property(__ddeTopic.value, __ddeTopic.set, None, u'Topic for DDE server')


    _ElementMap = {
        __ddeItems.name() : __ddeItems
    }
    _AttributeMap = {
        __ddeService.name() : __ddeService,
        __ddeTopic.name() : __ddeTopic
    }
Namespace.addCategoryObject('typeBinding', u'CT_DdeLink', CT_DdeLink)


# Complex type CT_Format with content type ELEMENT_ONLY
class CT_Format (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Format')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Format_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pivotArea uses Python identifier pivotArea
    __pivotArea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pivotArea'), 'pivotArea', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Format_httpschemas_openxmlformats_orgspreadsheetml2006mainpivotArea', False)

    
    pivotArea = property(__pivotArea.value, __pivotArea.set, None, u'Pivot Table Location')

    
    # Attribute action uses Python identifier action
    __action = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'action'), 'action', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Format_action', ST_FormatAction, unicode_default=u'formatting')
    
    action = property(__action.value, __action.set, None, u'Format Action')

    
    # Attribute dxfId uses Python identifier dxfId
    __dxfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dxfId'), 'dxfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Format_dxfId', ST_DxfId)
    
    dxfId = property(__dxfId.value, __dxfId.set, None, u'Format Id')


    _ElementMap = {
        __extLst.name() : __extLst,
        __pivotArea.name() : __pivotArea
    }
    _AttributeMap = {
        __action.name() : __action,
        __dxfId.name() : __dxfId
    }
Namespace.addCategoryObject('typeBinding', u'CT_Format', CT_Format)


# Complex type CT_MeasureGroups with content type ELEMENT_ONLY
class CT_MeasureGroups (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MeasureGroups')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}measureGroup uses Python identifier measureGroup
    __measureGroup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'measureGroup'), 'measureGroup', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MeasureGroups_httpschemas_openxmlformats_orgspreadsheetml2006mainmeasureGroup', True)

    
    measureGroup = property(__measureGroup.value, __measureGroup.set, None, u'OLAP Measure Group')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MeasureGroups_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Measure Group Count')


    _ElementMap = {
        __measureGroup.name() : __measureGroup
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_MeasureGroups', CT_MeasureGroups)


# Complex type CT_VolTopic with content type ELEMENT_ONLY
class CT_VolTopic (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_VolTopic')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tr uses Python identifier tr
    __tr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tr'), 'tr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_VolTopic_httpschemas_openxmlformats_orgspreadsheetml2006maintr', True)

    
    tr = property(__tr.value, __tr.set, None, u'References')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}v uses Python identifier v
    __v = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'v'), 'v', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_VolTopic_httpschemas_openxmlformats_orgspreadsheetml2006mainv', False)

    
    v = property(__v.value, __v.set, None, u'Topic Value')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}stp uses Python identifier stp
    __stp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'stp'), 'stp', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_VolTopic_httpschemas_openxmlformats_orgspreadsheetml2006mainstp', True)

    
    stp = property(__stp.value, __stp.set, None, u'Strings in Subtopic')

    
    # Attribute t uses Python identifier t
    __t = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u't'), 't', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_VolTopic_t', ST_VolValueType, unicode_default=u'n')
    
    t = property(__t.value, __t.set, None, u'Type')


    _ElementMap = {
        __tr.name() : __tr,
        __v.name() : __v,
        __stp.name() : __stp
    }
    _AttributeMap = {
        __t.name() : __t
    }
Namespace.addCategoryObject('typeBinding', u'CT_VolTopic', CT_VolTopic)


# Complex type CT_RevisionFormatting with content type ELEMENT_ONLY
class CT_RevisionFormatting (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RevisionFormatting')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionFormatting_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dxf uses Python identifier dxf
    __dxf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dxf'), 'dxf', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionFormatting_httpschemas_openxmlformats_orgspreadsheetml2006maindxf', False)

    
    dxf = property(__dxf.value, __dxf.set, None, u'Formatting')

    
    # Attribute sqref uses Python identifier sqref
    __sqref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sqref'), 'sqref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionFormatting_sqref', ST_Sqref, required=True)
    
    sqref = property(__sqref.value, __sqref.set, None, u'Sequence Of References')

    
    # Attribute sheetId uses Python identifier sheetId
    __sheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheetId'), 'sheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionFormatting_sheetId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    sheetId = property(__sheetId.value, __sheetId.set, None, u'Sheet Id')

    
    # Attribute s uses Python identifier s
    __s = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u's'), 's', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionFormatting_s', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    s = property(__s.value, __s.set, None, u'Style')

    
    # Attribute xfDxf uses Python identifier xfDxf
    __xfDxf = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xfDxf'), 'xfDxf', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionFormatting_xfDxf', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    xfDxf = property(__xfDxf.value, __xfDxf.set, None, u'Row or Column Formatting Change')

    
    # Attribute length uses Python identifier length
    __length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'length'), 'length', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionFormatting_length', pyxb.binding.datatypes.unsignedInt)
    
    length = property(__length.value, __length.set, None, u'Length')

    
    # Attribute start uses Python identifier start
    __start = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'start'), 'start', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionFormatting_start', pyxb.binding.datatypes.unsignedInt)
    
    start = property(__start.value, __start.set, None, u'Start index')


    _ElementMap = {
        __extLst.name() : __extLst,
        __dxf.name() : __dxf
    }
    _AttributeMap = {
        __sqref.name() : __sqref,
        __sheetId.name() : __sheetId,
        __s.name() : __s,
        __xfDxf.name() : __xfDxf,
        __length.name() : __length,
        __start.name() : __start
    }
Namespace.addCategoryObject('typeBinding', u'CT_RevisionFormatting', CT_RevisionFormatting)


# Complex type CT_MetadataStrings with content type ELEMENT_ONLY
class CT_MetadataStrings (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MetadataStrings')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}s uses Python identifier s
    __s = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u's'), 's', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataStrings_httpschemas_openxmlformats_orgspreadsheetml2006mains', True)

    
    s = property(__s.value, __s.set, None, u'MDX Metadata String')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataStrings_count', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    count = property(__count.value, __count.set, None, u'MDX Metadata String Count')


    _ElementMap = {
        __s.name() : __s
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_MetadataStrings', CT_MetadataStrings)


# Complex type CT_DataFields with content type ELEMENT_ONLY
class CT_DataFields (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DataFields')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dataField uses Python identifier dataField
    __dataField = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dataField'), 'dataField', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataFields_httpschemas_openxmlformats_orgspreadsheetml2006maindataField', True)

    
    dataField = property(__dataField.value, __dataField.set, None, u'Data Field Item')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataFields_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Data Items Count')


    _ElementMap = {
        __dataField.name() : __dataField
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_DataFields', CT_DataFields)


# Complex type CT_ProtectedRange with content type ELEMENT_ONLY
class CT_ProtectedRange (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ProtectedRange')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}securityDescriptor uses Python identifier securityDescriptor
    __securityDescriptor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'securityDescriptor'), 'securityDescriptor', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ProtectedRange_httpschemas_openxmlformats_orgspreadsheetml2006mainsecurityDescriptor', True)

    
    securityDescriptor = property(__securityDescriptor.value, __securityDescriptor.set, None, u'Security Descriptor')

    
    # Attribute spinCount uses Python identifier spinCount
    __spinCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spinCount'), 'spinCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ProtectedRange_spinCount', pyxb.binding.datatypes.unsignedInt)
    
    spinCount = property(__spinCount.value, __spinCount.set, None, u'Iterations to Run Hashing Algorithm')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ProtectedRange_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Name')

    
    # Attribute securityDescriptor uses Python identifier securityDescriptor_
    __securityDescriptor_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'securityDescriptor'), 'securityDescriptor_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ProtectedRange_securityDescriptor', pyxb.binding.datatypes.string)
    
    securityDescriptor_ = property(__securityDescriptor_.value, __securityDescriptor_.set, None, u'Security Descriptor')

    
    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ProtectedRange_algorithmName', _s.ST_Xstring)
    
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, u'Cryptographic Algorithm Name')

    
    # Attribute hashValue uses Python identifier hashValue
    __hashValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hashValue'), 'hashValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ProtectedRange_hashValue', pyxb.binding.datatypes.base64Binary)
    
    hashValue = property(__hashValue.value, __hashValue.set, None, u'Password Hash Value')

    
    # Attribute password uses Python identifier password
    __password = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'password'), 'password', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ProtectedRange_password', ST_UnsignedShortHex)
    
    password = property(__password.value, __password.set, None, u'Legacy Password')

    
    # Attribute saltValue uses Python identifier saltValue
    __saltValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'saltValue'), 'saltValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ProtectedRange_saltValue', pyxb.binding.datatypes.base64Binary)
    
    saltValue = property(__saltValue.value, __saltValue.set, None, u'Salt Value for Password Verifier')

    
    # Attribute sqref uses Python identifier sqref
    __sqref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sqref'), 'sqref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ProtectedRange_sqref', ST_Sqref, required=True)
    
    sqref = property(__sqref.value, __sqref.set, None, u'Sequence of References')


    _ElementMap = {
        __securityDescriptor.name() : __securityDescriptor
    }
    _AttributeMap = {
        __spinCount.name() : __spinCount,
        __name.name() : __name,
        __securityDescriptor_.name() : __securityDescriptor_,
        __algorithmName.name() : __algorithmName,
        __hashValue.name() : __hashValue,
        __password.name() : __password,
        __saltValue.name() : __saltValue,
        __sqref.name() : __sqref
    }
Namespace.addCategoryObject('typeBinding', u'CT_ProtectedRange', CT_ProtectedRange)


# Complex type CT_OleObject with content type ELEMENT_ONLY
class CT_OleObject (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_OleObject')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}objectPr uses Python identifier objectPr
    __objectPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'objectPr'), 'objectPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleObject_httpschemas_openxmlformats_orgspreadsheetml2006mainobjectPr', False)

    
    objectPr = property(__objectPr.value, __objectPr.set, None, u'Embedded Object Properties')

    
    # Attribute dvAspect uses Python identifier dvAspect
    __dvAspect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dvAspect'), 'dvAspect', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleObject_dvAspect', ST_DvAspect, unicode_default=u'DVASPECT_CONTENT')
    
    dvAspect = property(__dvAspect.value, __dvAspect.set, None, u'Data or View Aspect')

    
    # Attribute progId uses Python identifier progId
    __progId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'progId'), 'progId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleObject_progId', pyxb.binding.datatypes.string)
    
    progId = property(__progId.value, __progId.set, None, u'Embedded Object ProgId')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleObject_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute shapeId uses Python identifier shapeId
    __shapeId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'shapeId'), 'shapeId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleObject_shapeId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    shapeId = property(__shapeId.value, __shapeId.set, None, u'Shape Id')

    
    # Attribute oleUpdate uses Python identifier oleUpdate
    __oleUpdate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'oleUpdate'), 'oleUpdate', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleObject_oleUpdate', ST_OleUpdate)
    
    oleUpdate = property(__oleUpdate.value, __oleUpdate.set, None, u'Linked Embedded Object Update')

    
    # Attribute autoLoad uses Python identifier autoLoad
    __autoLoad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoLoad'), 'autoLoad', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleObject_autoLoad', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    autoLoad = property(__autoLoad.value, __autoLoad.set, None, u'Auto Load')

    
    # Attribute link uses Python identifier link
    __link = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'link'), 'link', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleObject_link', _s.ST_Xstring)
    
    link = property(__link.value, __link.set, None, u"Embedded Object's Link Moniker")


    _ElementMap = {
        __objectPr.name() : __objectPr
    }
    _AttributeMap = {
        __dvAspect.name() : __dvAspect,
        __progId.name() : __progId,
        __id.name() : __id,
        __shapeId.name() : __shapeId,
        __oleUpdate.name() : __oleUpdate,
        __autoLoad.name() : __autoLoad,
        __link.name() : __link
    }
Namespace.addCategoryObject('typeBinding', u'CT_OleObject', CT_OleObject)


# Complex type CT_SmartTagType with content type EMPTY
class CT_SmartTagType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SmartTagType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute url uses Python identifier url
    __url = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'url'), 'url', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SmartTagType_url', _s.ST_Xstring)
    
    url = property(__url.value, __url.set, None, u'Smart Tag URL')

    
    # Attribute namespaceUri uses Python identifier namespaceUri
    __namespaceUri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'namespaceUri'), 'namespaceUri', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SmartTagType_namespaceUri', _s.ST_Xstring)
    
    namespaceUri = property(__namespaceUri.value, __namespaceUri.set, None, u'SmartTag Namespace URI')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SmartTagType_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __url.name() : __url,
        __namespaceUri.name() : __namespaceUri,
        __name.name() : __name
    }
Namespace.addCategoryObject('typeBinding', u'CT_SmartTagType', CT_SmartTagType)


# Complex type CT_QueryTableField with content type ELEMENT_ONLY
class CT_QueryTableField (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_QueryTableField')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableField_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableField_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'Name')

    
    # Attribute rowNumbers uses Python identifier rowNumbers
    __rowNumbers = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rowNumbers'), 'rowNumbers', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableField_rowNumbers', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    rowNumbers = property(__rowNumbers.value, __rowNumbers.set, None, u'Row Numbers')

    
    # Attribute dataBound uses Python identifier dataBound
    __dataBound = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataBound'), 'dataBound', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableField_dataBound', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    dataBound = property(__dataBound.value, __dataBound.set, None, u'Data Bound Column')

    
    # Attribute tableColumnId uses Python identifier tableColumnId
    __tableColumnId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tableColumnId'), 'tableColumnId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableField_tableColumnId', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    tableColumnId = property(__tableColumnId.value, __tableColumnId.set, None, u'Table Column Id')

    
    # Attribute fillFormulas uses Python identifier fillFormulas
    __fillFormulas = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fillFormulas'), 'fillFormulas', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableField_fillFormulas', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    fillFormulas = property(__fillFormulas.value, __fillFormulas.set, None, u'Fill This Formula On Refresh')

    
    # Attribute clipped uses Python identifier clipped
    __clipped = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'clipped'), 'clipped', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableField_clipped', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    clipped = property(__clipped.value, __clipped.set, None, u'Clipped Column')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableField_id', pyxb.binding.datatypes.unsignedInt, required=True)
    
    id = property(__id.value, __id.set, None, u'Field Id')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __name.name() : __name,
        __rowNumbers.name() : __rowNumbers,
        __dataBound.name() : __dataBound,
        __tableColumnId.name() : __tableColumnId,
        __fillFormulas.name() : __fillFormulas,
        __clipped.name() : __clipped,
        __id.name() : __id
    }
Namespace.addCategoryObject('typeBinding', u'CT_QueryTableField', CT_QueryTableField)


# Complex type CT_Query with content type ELEMENT_ONLY
class CT_Query (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Query')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tpls uses Python identifier tpls
    __tpls = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tpls'), 'tpls', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Query_httpschemas_openxmlformats_orgspreadsheetml2006maintpls', False)

    
    tpls = property(__tpls.value, __tpls.set, None, u'Tuples')

    
    # Attribute mdx uses Python identifier mdx
    __mdx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mdx'), 'mdx', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Query_mdx', _s.ST_Xstring, required=True)
    
    mdx = property(__mdx.value, __mdx.set, None, u'MDX Query String')


    _ElementMap = {
        __tpls.name() : __tpls
    }
    _AttributeMap = {
        __mdx.name() : __mdx
    }
Namespace.addCategoryObject('typeBinding', u'CT_Query', CT_Query)


# Complex type CT_ChartsheetViews with content type ELEMENT_ONLY
class CT_ChartsheetViews (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ChartsheetViews')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetViews_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetView uses Python identifier sheetView
    __sheetView = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetView'), 'sheetView', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetViews_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetView', True)

    
    sheetView = property(__sheetView.value, __sheetView.set, None, u'Chart Sheet View')


    _ElementMap = {
        __extLst.name() : __extLst,
        __sheetView.name() : __sheetView
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_ChartsheetViews', CT_ChartsheetViews)


# Complex type CT_PageSetup with content type EMPTY
class CT_PageSetup (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PageSetup')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute blackAndWhite uses Python identifier blackAndWhite
    __blackAndWhite = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blackAndWhite'), 'blackAndWhite', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_blackAndWhite', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    blackAndWhite = property(__blackAndWhite.value, __blackAndWhite.set, None, u'Black And White')

    
    # Attribute paperHeight uses Python identifier paperHeight
    __paperHeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'paperHeight'), 'paperHeight', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_paperHeight', _s.ST_PositiveUniversalMeasure)
    
    paperHeight = property(__paperHeight.value, __paperHeight.set, None, u'Paper Height')

    
    # Attribute fitToWidth uses Python identifier fitToWidth
    __fitToWidth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fitToWidth'), 'fitToWidth', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_fitToWidth', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    fitToWidth = property(__fitToWidth.value, __fitToWidth.set, None, u'Fit To Width')

    
    # Attribute verticalDpi uses Python identifier verticalDpi
    __verticalDpi = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'verticalDpi'), 'verticalDpi', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_verticalDpi', pyxb.binding.datatypes.unsignedInt, unicode_default=u'600')
    
    verticalDpi = property(__verticalDpi.value, __verticalDpi.set, None, u'Vertical DPI')

    
    # Attribute draft uses Python identifier draft
    __draft = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'draft'), 'draft', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_draft', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    draft = property(__draft.value, __draft.set, None, u'Draft')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute copies uses Python identifier copies
    __copies = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'copies'), 'copies', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_copies', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    copies = property(__copies.value, __copies.set, None, u'Number Of Copies')

    
    # Attribute paperSize uses Python identifier paperSize
    __paperSize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'paperSize'), 'paperSize', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_paperSize', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    paperSize = property(__paperSize.value, __paperSize.set, None, u'Paper Size')

    
    # Attribute pageOrder uses Python identifier pageOrder
    __pageOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pageOrder'), 'pageOrder', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_pageOrder', ST_PageOrder, unicode_default=u'downThenOver')
    
    pageOrder = property(__pageOrder.value, __pageOrder.set, None, u'Page Order')

    
    # Attribute horizontalDpi uses Python identifier horizontalDpi
    __horizontalDpi = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'horizontalDpi'), 'horizontalDpi', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_horizontalDpi', pyxb.binding.datatypes.unsignedInt, unicode_default=u'600')
    
    horizontalDpi = property(__horizontalDpi.value, __horizontalDpi.set, None, u'Horizontal DPI')

    
    # Attribute useFirstPageNumber uses Python identifier useFirstPageNumber
    __useFirstPageNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'useFirstPageNumber'), 'useFirstPageNumber', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_useFirstPageNumber', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    useFirstPageNumber = property(__useFirstPageNumber.value, __useFirstPageNumber.set, None, u'Use First Page Number')

    
    # Attribute orientation uses Python identifier orientation
    __orientation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'orientation'), 'orientation', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_orientation', ST_Orientation, unicode_default=u'default')
    
    orientation = property(__orientation.value, __orientation.set, None, u'Orientation')

    
    # Attribute cellComments uses Python identifier cellComments
    __cellComments = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cellComments'), 'cellComments', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_cellComments', ST_CellComments, unicode_default=u'none')
    
    cellComments = property(__cellComments.value, __cellComments.set, None, u'Print Cell Comments')

    
    # Attribute scale uses Python identifier scale
    __scale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'scale'), 'scale', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_scale', pyxb.binding.datatypes.unsignedInt, unicode_default=u'100')
    
    scale = property(__scale.value, __scale.set, None, u'Print Scale')

    
    # Attribute fitToHeight uses Python identifier fitToHeight
    __fitToHeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fitToHeight'), 'fitToHeight', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_fitToHeight', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    fitToHeight = property(__fitToHeight.value, __fitToHeight.set, None, u'Fit To Height')

    
    # Attribute errors uses Python identifier errors
    __errors = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'errors'), 'errors', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_errors', ST_PrintError, unicode_default=u'displayed')
    
    errors = property(__errors.value, __errors.set, None, u'Print Error Handling')

    
    # Attribute usePrinterDefaults uses Python identifier usePrinterDefaults
    __usePrinterDefaults = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'usePrinterDefaults'), 'usePrinterDefaults', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_usePrinterDefaults', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    usePrinterDefaults = property(__usePrinterDefaults.value, __usePrinterDefaults.set, None, u'Use Printer Defaults')

    
    # Attribute firstPageNumber uses Python identifier firstPageNumber
    __firstPageNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'firstPageNumber'), 'firstPageNumber', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_firstPageNumber', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    firstPageNumber = property(__firstPageNumber.value, __firstPageNumber.set, None, u'First Page Number')

    
    # Attribute paperWidth uses Python identifier paperWidth
    __paperWidth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'paperWidth'), 'paperWidth', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetup_paperWidth', _s.ST_PositiveUniversalMeasure)
    
    paperWidth = property(__paperWidth.value, __paperWidth.set, None, u'Paper Width')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __blackAndWhite.name() : __blackAndWhite,
        __paperHeight.name() : __paperHeight,
        __fitToWidth.name() : __fitToWidth,
        __verticalDpi.name() : __verticalDpi,
        __draft.name() : __draft,
        __id.name() : __id,
        __copies.name() : __copies,
        __paperSize.name() : __paperSize,
        __pageOrder.name() : __pageOrder,
        __horizontalDpi.name() : __horizontalDpi,
        __useFirstPageNumber.name() : __useFirstPageNumber,
        __orientation.name() : __orientation,
        __cellComments.name() : __cellComments,
        __scale.name() : __scale,
        __fitToHeight.name() : __fitToHeight,
        __errors.name() : __errors,
        __usePrinterDefaults.name() : __usePrinterDefaults,
        __firstPageNumber.name() : __firstPageNumber,
        __paperWidth.name() : __paperWidth
    }
Namespace.addCategoryObject('typeBinding', u'CT_PageSetup', CT_PageSetup)


# Complex type CT_Colors with content type ELEMENT_ONLY
class CT_Colors (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Colors')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}mruColors uses Python identifier mruColors
    __mruColors = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'mruColors'), 'mruColors', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Colors_httpschemas_openxmlformats_orgspreadsheetml2006mainmruColors', False)

    
    mruColors = property(__mruColors.value, __mruColors.set, None, u'MRU Colors')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}indexedColors uses Python identifier indexedColors
    __indexedColors = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'indexedColors'), 'indexedColors', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Colors_httpschemas_openxmlformats_orgspreadsheetml2006mainindexedColors', False)

    
    indexedColors = property(__indexedColors.value, __indexedColors.set, None, u'Color Indexes')


    _ElementMap = {
        __mruColors.name() : __mruColors,
        __indexedColors.name() : __indexedColors
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Colors', CT_Colors)


# Complex type CT_Index with content type EMPTY
class CT_Index (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Index')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute v uses Python identifier v
    __v = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'v'), 'v', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Index_v', pyxb.binding.datatypes.unsignedInt, required=True)
    
    v = property(__v.value, __v.set, None, u'Shared Items Index')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __v.name() : __v
    }
Namespace.addCategoryObject('typeBinding', u'CT_Index', CT_Index)


# Complex type CT_Hyperlinks with content type ELEMENT_ONLY
class CT_Hyperlinks (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Hyperlinks')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}hyperlink uses Python identifier hyperlink
    __hyperlink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'hyperlink'), 'hyperlink', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Hyperlinks_httpschemas_openxmlformats_orgspreadsheetml2006mainhyperlink', True)

    
    hyperlink = property(__hyperlink.value, __hyperlink.set, None, u'Hyperlink')


    _ElementMap = {
        __hyperlink.name() : __hyperlink
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Hyperlinks', CT_Hyperlinks)


# Complex type CT_VolType with content type ELEMENT_ONLY
class CT_VolType (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_VolType')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}main uses Python identifier main
    __main = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'main'), 'main', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_VolType_httpschemas_openxmlformats_orgspreadsheetml2006mainmain', True)

    
    main = property(__main.value, __main.set, None, u'Main')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_VolType_type', ST_VolDepType, required=True)
    
    type = property(__type.value, __type.set, None, u'Type')


    _ElementMap = {
        __main.name() : __main
    }
    _AttributeMap = {
        __type.name() : __type
    }
Namespace.addCategoryObject('typeBinding', u'CT_VolType', CT_VolType)


# Complex type CT_Formats with content type ELEMENT_ONLY
class CT_Formats (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Formats')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}format uses Python identifier format
    __format = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'format'), 'format', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Formats_httpschemas_openxmlformats_orgspreadsheetml2006mainformat', True)

    
    format = property(__format.value, __format.set, None, u'PivotTable Format')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Formats_count', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    count = property(__count.value, __count.set, None, u'Formats Count')


    _ElementMap = {
        __format.name() : __format
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_Formats', CT_Formats)


# Complex type CT_DeletedField with content type EMPTY
class CT_DeletedField (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DeletedField')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DeletedField_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Deleted Fields Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __name.name() : __name
    }
Namespace.addCategoryObject('typeBinding', u'CT_DeletedField', CT_DeletedField)


# Complex type CT_CellSmartTag with content type ELEMENT_ONLY
class CT_CellSmartTag (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CellSmartTag')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cellSmartTagPr uses Python identifier cellSmartTagPr
    __cellSmartTagPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cellSmartTagPr'), 'cellSmartTagPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellSmartTag_httpschemas_openxmlformats_orgspreadsheetml2006maincellSmartTagPr', True)

    
    cellSmartTagPr = property(__cellSmartTagPr.value, __cellSmartTagPr.set, None, u'Smart Tag Properties')

    
    # Attribute deleted uses Python identifier deleted
    __deleted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'deleted'), 'deleted', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellSmartTag_deleted', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    deleted = property(__deleted.value, __deleted.set, None, u'Deleted')

    
    # Attribute xmlBased uses Python identifier xmlBased
    __xmlBased = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xmlBased'), 'xmlBased', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellSmartTag_xmlBased', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    xmlBased = property(__xmlBased.value, __xmlBased.set, None, u'XML Based')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellSmartTag_type', pyxb.binding.datatypes.unsignedInt, required=True)
    
    type = property(__type.value, __type.set, None, u'Smart Tag Type Index')


    _ElementMap = {
        __cellSmartTagPr.name() : __cellSmartTagPr
    }
    _AttributeMap = {
        __deleted.name() : __deleted,
        __xmlBased.name() : __xmlBased,
        __type.name() : __type
    }
Namespace.addCategoryObject('typeBinding', u'CT_CellSmartTag', CT_CellSmartTag)


# Complex type CT_CustomProperties with content type ELEMENT_ONLY
class CT_CustomProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CustomProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}customPr uses Python identifier customPr
    __customPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'customPr'), 'customPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomProperties_httpschemas_openxmlformats_orgspreadsheetml2006maincustomPr', True)

    
    customPr = property(__customPr.value, __customPr.set, None, u'Custom Property')


    _ElementMap = {
        __customPr.name() : __customPr
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_CustomProperties', CT_CustomProperties)


# Complex type CT_DynamicFilter with content type EMPTY
class CT_DynamicFilter (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DynamicFilter')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute maxVal uses Python identifier maxVal
    __maxVal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxVal'), 'maxVal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DynamicFilter_maxVal', pyxb.binding.datatypes.double)
    
    maxVal = property(__maxVal.value, __maxVal.set, None, u'Max Value')

    
    # Attribute valIso uses Python identifier valIso
    __valIso = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valIso'), 'valIso', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DynamicFilter_valIso', pyxb.binding.datatypes.dateTime)
    
    valIso = property(__valIso.value, __valIso.set, None, u'ISO Value')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DynamicFilter_type', ST_DynamicFilterType, required=True)
    
    type = property(__type.value, __type.set, None, u'Dynamic filter type')

    
    # Attribute maxValIso uses Python identifier maxValIso
    __maxValIso = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxValIso'), 'maxValIso', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DynamicFilter_maxValIso', pyxb.binding.datatypes.dateTime)
    
    maxValIso = property(__maxValIso.value, __maxValIso.set, None, u'Max ISO Value')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DynamicFilter_val', pyxb.binding.datatypes.double)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __maxVal.name() : __maxVal,
        __valIso.name() : __valIso,
        __type.name() : __type,
        __maxValIso.name() : __maxValIso,
        __val.name() : __val
    }
Namespace.addCategoryObject('typeBinding', u'CT_DynamicFilter', CT_DynamicFilter)


# Complex type CT_DrawingHF with content type EMPTY
class CT_DrawingHF (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DrawingHF')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute rfo uses Python identifier rfo
    __rfo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rfo'), 'rfo', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_rfo', pyxb.binding.datatypes.unsignedInt)
    
    rfo = property(__rfo.value, __rfo.set, None, u'Right Footer for Odd Pages')

    
    # Attribute cfo uses Python identifier cfo
    __cfo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cfo'), 'cfo', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_cfo', pyxb.binding.datatypes.unsignedInt)
    
    cfo = property(__cfo.value, __cfo.set, None, u'Center Footer for Odd Pages')

    
    # Attribute chf uses Python identifier chf
    __chf = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'chf'), 'chf', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_chf', pyxb.binding.datatypes.unsignedInt)
    
    chf = property(__chf.value, __chf.set, None, u'Center Header for First Page')

    
    # Attribute rfe uses Python identifier rfe
    __rfe = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rfe'), 'rfe', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_rfe', pyxb.binding.datatypes.unsignedInt)
    
    rfe = property(__rfe.value, __rfe.set, None, u'Right Footer for Even Pages')

    
    # Attribute lff uses Python identifier lff
    __lff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lff'), 'lff', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_lff', pyxb.binding.datatypes.unsignedInt)
    
    lff = property(__lff.value, __lff.set, None, u'Left Footer for First Page')

    
    # Attribute cff uses Python identifier cff
    __cff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cff'), 'cff', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_cff', pyxb.binding.datatypes.unsignedInt)
    
    cff = property(__cff.value, __cff.set, None, u'Center Footer for First Page')

    
    # Attribute rho uses Python identifier rho
    __rho = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rho'), 'rho', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_rho', pyxb.binding.datatypes.unsignedInt)
    
    rho = property(__rho.value, __rho.set, None, u'Right Header for Odd Pages')

    
    # Attribute lhe uses Python identifier lhe
    __lhe = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lhe'), 'lhe', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_lhe', pyxb.binding.datatypes.unsignedInt)
    
    lhe = property(__lhe.value, __lhe.set, None, u'Left Header for Even Pages')

    
    # Attribute rhf uses Python identifier rhf
    __rhf = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rhf'), 'rhf', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_rhf', pyxb.binding.datatypes.unsignedInt)
    
    rhf = property(__rhf.value, __rhf.set, None, u'Right Header for First Page')

    
    # Attribute lfe uses Python identifier lfe
    __lfe = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lfe'), 'lfe', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_lfe', pyxb.binding.datatypes.unsignedInt)
    
    lfe = property(__lfe.value, __lfe.set, None, u'Left Footer for Even Pages')

    
    # Attribute lhf uses Python identifier lhf
    __lhf = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lhf'), 'lhf', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_lhf', pyxb.binding.datatypes.unsignedInt)
    
    lhf = property(__lhf.value, __lhf.set, None, u'Left Header for First Page')

    
    # Attribute cfe uses Python identifier cfe
    __cfe = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cfe'), 'cfe', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_cfe', pyxb.binding.datatypes.unsignedInt)
    
    cfe = property(__cfe.value, __cfe.set, None, u'Center Footer for Even Pages')

    
    # Attribute rhe uses Python identifier rhe
    __rhe = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rhe'), 'rhe', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_rhe', pyxb.binding.datatypes.unsignedInt)
    
    rhe = property(__rhe.value, __rhe.set, None, u'Right Header for Even Pages')

    
    # Attribute lho uses Python identifier lho
    __lho = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lho'), 'lho', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_lho', pyxb.binding.datatypes.unsignedInt)
    
    lho = property(__lho.value, __lho.set, None, u'Left Header for Odd Pages')

    
    # Attribute rff uses Python identifier rff
    __rff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rff'), 'rff', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_rff', pyxb.binding.datatypes.unsignedInt)
    
    rff = property(__rff.value, __rff.set, None, u'Right Footer for First Page')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute lfo uses Python identifier lfo
    __lfo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lfo'), 'lfo', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_lfo', pyxb.binding.datatypes.unsignedInt)
    
    lfo = property(__lfo.value, __lfo.set, None, u'Left Footer for Odd Pages')

    
    # Attribute cho uses Python identifier cho
    __cho = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cho'), 'cho', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_cho', pyxb.binding.datatypes.unsignedInt)
    
    cho = property(__cho.value, __cho.set, None, u'Center Header for Odd Pages')

    
    # Attribute che uses Python identifier che
    __che = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'che'), 'che', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DrawingHF_che', pyxb.binding.datatypes.unsignedInt)
    
    che = property(__che.value, __che.set, None, u'Center Header for Even Pages')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __rfo.name() : __rfo,
        __cfo.name() : __cfo,
        __chf.name() : __chf,
        __rfe.name() : __rfe,
        __lff.name() : __lff,
        __cff.name() : __cff,
        __rho.name() : __rho,
        __lhe.name() : __lhe,
        __rhf.name() : __rhf,
        __lfe.name() : __lfe,
        __lhf.name() : __lhf,
        __cfe.name() : __cfe,
        __rhe.name() : __rhe,
        __lho.name() : __lho,
        __rff.name() : __rff,
        __id.name() : __id,
        __lfo.name() : __lfo,
        __cho.name() : __cho,
        __che.name() : __che
    }
Namespace.addCategoryObject('typeBinding', u'CT_DrawingHF', CT_DrawingHF)


# Complex type CT_DdeValue with content type ELEMENT_ONLY
class CT_DdeValue (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DdeValue')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}val uses Python identifier val
    __val = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DdeValue_httpschemas_openxmlformats_orgspreadsheetml2006mainval', False)

    
    val = property(__val.value, __val.set, None, u'DDE Link Value')

    
    # Attribute t uses Python identifier t
    __t = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u't'), 't', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DdeValue_t', ST_DdeValueType, unicode_default=u'n')
    
    t = property(__t.value, __t.set, None, u'DDE Value Type')


    _ElementMap = {
        __val.name() : __val
    }
    _AttributeMap = {
        __t.name() : __t
    }
Namespace.addCategoryObject('typeBinding', u'CT_DdeValue', CT_DdeValue)


# Complex type CT_OutlinePr with content type EMPTY
class CT_OutlinePr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_OutlinePr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute applyStyles uses Python identifier applyStyles
    __applyStyles = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyStyles'), 'applyStyles', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OutlinePr_applyStyles', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    applyStyles = property(__applyStyles.value, __applyStyles.set, None, u'Apply Styles in Outline')

    
    # Attribute summaryRight uses Python identifier summaryRight
    __summaryRight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'summaryRight'), 'summaryRight', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OutlinePr_summaryRight', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    summaryRight = property(__summaryRight.value, __summaryRight.set, None, u'Summary Right')

    
    # Attribute summaryBelow uses Python identifier summaryBelow
    __summaryBelow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'summaryBelow'), 'summaryBelow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OutlinePr_summaryBelow', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    summaryBelow = property(__summaryBelow.value, __summaryBelow.set, None, u'Summary Below')

    
    # Attribute showOutlineSymbols uses Python identifier showOutlineSymbols
    __showOutlineSymbols = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showOutlineSymbols'), 'showOutlineSymbols', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OutlinePr_showOutlineSymbols', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showOutlineSymbols = property(__showOutlineSymbols.value, __showOutlineSymbols.set, None, u'Show Outline Symbols')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __applyStyles.name() : __applyStyles,
        __summaryRight.name() : __summaryRight,
        __summaryBelow.name() : __summaryBelow,
        __showOutlineSymbols.name() : __showOutlineSymbols
    }
Namespace.addCategoryObject('typeBinding', u'CT_OutlinePr', CT_OutlinePr)


# Complex type CT_PCDKPI with content type EMPTY
class CT_PCDKPI (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PCDKPI')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'value'), 'value_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDKPI_value', _s.ST_Xstring, required=True)
    
    value_ = property(__value.value, __value.set, None, u'KPI Value Unique Name')

    
    # Attribute goal uses Python identifier goal
    __goal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'goal'), 'goal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDKPI_goal', _s.ST_Xstring)
    
    goal = property(__goal.value, __goal.set, None, u'KPI Goal Unique Name')

    
    # Attribute uniqueName uses Python identifier uniqueName
    __uniqueName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueName'), 'uniqueName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDKPI_uniqueName', _s.ST_Xstring, required=True)
    
    uniqueName = property(__uniqueName.value, __uniqueName.set, None, u'KPI Unique Name')

    
    # Attribute caption uses Python identifier caption
    __caption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'caption'), 'caption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDKPI_caption', _s.ST_Xstring)
    
    caption = property(__caption.value, __caption.set, None, u'KPI Display Name')

    
    # Attribute displayFolder uses Python identifier displayFolder
    __displayFolder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'displayFolder'), 'displayFolder', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDKPI_displayFolder', _s.ST_Xstring)
    
    displayFolder = property(__displayFolder.value, __displayFolder.set, None, u'KPI Display Folder')

    
    # Attribute status uses Python identifier status
    __status = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'status'), 'status', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDKPI_status', _s.ST_Xstring)
    
    status = property(__status.value, __status.set, None, u'KPI Status Unique Name')

    
    # Attribute trend uses Python identifier trend
    __trend = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'trend'), 'trend', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDKPI_trend', _s.ST_Xstring)
    
    trend = property(__trend.value, __trend.set, None, u'KPI Trend Unique Name')

    
    # Attribute measureGroup uses Python identifier measureGroup
    __measureGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'measureGroup'), 'measureGroup', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDKPI_measureGroup', _s.ST_Xstring)
    
    measureGroup = property(__measureGroup.value, __measureGroup.set, None, u'KPI Measure Group Name')

    
    # Attribute weight uses Python identifier weight
    __weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'weight'), 'weight', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDKPI_weight', _s.ST_Xstring)
    
    weight = property(__weight.value, __weight.set, None, u'KPI Weight Unique Name')

    
    # Attribute parent uses Python identifier parent
    __parent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parent'), 'parent', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDKPI_parent', _s.ST_Xstring)
    
    parent = property(__parent.value, __parent.set, None, u'Parent KPI')

    
    # Attribute time uses Python identifier time
    __time = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'time'), 'time', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDKPI_time', _s.ST_Xstring)
    
    time = property(__time.value, __time.set, None, u'Time Member KPI Unique Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __value.name() : __value,
        __goal.name() : __goal,
        __uniqueName.name() : __uniqueName,
        __caption.name() : __caption,
        __displayFolder.name() : __displayFolder,
        __status.name() : __status,
        __trend.name() : __trend,
        __measureGroup.name() : __measureGroup,
        __weight.name() : __weight,
        __parent.name() : __parent,
        __time.name() : __time
    }
Namespace.addCategoryObject('typeBinding', u'CT_PCDKPI', CT_PCDKPI)


# Complex type CT_Drawing with content type EMPTY
class CT_Drawing (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Drawing')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Drawing_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
Namespace.addCategoryObject('typeBinding', u'CT_Drawing', CT_Drawing)


# Complex type CT_RevisionCellChange with content type ELEMENT_ONLY
class CT_RevisionCellChange (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RevisionCellChange')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}oc uses Python identifier oc
    __oc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'oc'), 'oc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_httpschemas_openxmlformats_orgspreadsheetml2006mainoc', False)

    
    oc = property(__oc.value, __oc.set, None, u'Old Cell Data')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}odxf uses Python identifier odxf
    __odxf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'odxf'), 'odxf', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_httpschemas_openxmlformats_orgspreadsheetml2006mainodxf', False)

    
    odxf = property(__odxf.value, __odxf.set, None, u'Old Formatting Information')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}nc uses Python identifier nc
    __nc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'nc'), 'nc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_httpschemas_openxmlformats_orgspreadsheetml2006mainnc', False)

    
    nc = property(__nc.value, __nc.set, None, u'New Cell Data')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}ndxf uses Python identifier ndxf
    __ndxf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ndxf'), 'ndxf', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_httpschemas_openxmlformats_orgspreadsheetml2006mainndxf', False)

    
    ndxf = property(__ndxf.value, __ndxf.set, None, u'New Formatting Information')

    
    # Attribute oldPh uses Python identifier oldPh
    __oldPh = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'oldPh'), 'oldPh', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_oldPh', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    oldPh = property(__oldPh.value, __oldPh.set, None, u'Old Phonetic Text')

    
    # Attribute rId uses Python identifier rId
    __rId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rId'), 'rId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_rId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    rId = property(__rId.value, __rId.set, None, u'Revision Id')

    
    # Attribute quotePrefix uses Python identifier quotePrefix
    __quotePrefix = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'quotePrefix'), 'quotePrefix', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_quotePrefix', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    quotePrefix = property(__quotePrefix.value, __quotePrefix.set, None, u'Quote Prefix')

    
    # Attribute oldQuotePrefix uses Python identifier oldQuotePrefix
    __oldQuotePrefix = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'oldQuotePrefix'), 'oldQuotePrefix', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_oldQuotePrefix', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    oldQuotePrefix = property(__oldQuotePrefix.value, __oldQuotePrefix.set, None, u'Old Quote Prefix')

    
    # Attribute endOfListFormulaUpdate uses Python identifier endOfListFormulaUpdate
    __endOfListFormulaUpdate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'endOfListFormulaUpdate'), 'endOfListFormulaUpdate', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_endOfListFormulaUpdate', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    endOfListFormulaUpdate = property(__endOfListFormulaUpdate.value, __endOfListFormulaUpdate.set, None, u'End of List  Formula Update')

    
    # Attribute xfDxf uses Python identifier xfDxf
    __xfDxf = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xfDxf'), 'xfDxf', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_xfDxf', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    xfDxf = property(__xfDxf.value, __xfDxf.set, None, u'Row Column Formatting Change')

    
    # Attribute ph uses Python identifier ph
    __ph = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ph'), 'ph', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_ph', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ph = property(__ph.value, __ph.set, None, u'Phonetic Text')

    
    # Attribute sId uses Python identifier sId
    __sId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sId'), 'sId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_sId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    sId = property(__sId.value, __sId.set, None, u'Sheet Id')

    
    # Attribute s uses Python identifier s
    __s = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u's'), 's', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_s', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    s = property(__s.value, __s.set, None, u'Style Revision')

    
    # Attribute ua uses Python identifier ua
    __ua = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ua'), 'ua', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_ua', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ua = property(__ua.value, __ua.set, None, u'Revision From Rejection')

    
    # Attribute ra uses Python identifier ra
    __ra = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ra'), 'ra', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_ra', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ra = property(__ra.value, __ra.set, None, u'Revision Undo Rejected')

    
    # Attribute dxf uses Python identifier dxf
    __dxf = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dxf'), 'dxf', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_dxf', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    dxf = property(__dxf.value, __dxf.set, None, u'Formatting')

    
    # Attribute odxf uses Python identifier odxf_
    __odxf_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'odxf'), 'odxf_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_odxf', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    odxf_ = property(__odxf_.value, __odxf_.set, None, u'Old Formatting')

    
    # Attribute numFmtId uses Python identifier numFmtId
    __numFmtId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numFmtId'), 'numFmtId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCellChange_numFmtId', ST_NumFmtId)
    
    numFmtId = property(__numFmtId.value, __numFmtId.set, None, u'Number Format Id')


    _ElementMap = {
        __extLst.name() : __extLst,
        __oc.name() : __oc,
        __odxf.name() : __odxf,
        __nc.name() : __nc,
        __ndxf.name() : __ndxf
    }
    _AttributeMap = {
        __oldPh.name() : __oldPh,
        __rId.name() : __rId,
        __quotePrefix.name() : __quotePrefix,
        __oldQuotePrefix.name() : __oldQuotePrefix,
        __endOfListFormulaUpdate.name() : __endOfListFormulaUpdate,
        __xfDxf.name() : __xfDxf,
        __ph.name() : __ph,
        __sId.name() : __sId,
        __s.name() : __s,
        __ua.name() : __ua,
        __ra.name() : __ra,
        __dxf.name() : __dxf,
        __odxf_.name() : __odxf_,
        __numFmtId.name() : __numFmtId
    }
Namespace.addCategoryObject('typeBinding', u'CT_RevisionCellChange', CT_RevisionCellChange)


# Complex type CT_MeasureDimensionMaps with content type ELEMENT_ONLY
class CT_MeasureDimensionMaps (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MeasureDimensionMaps')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}map uses Python identifier map
    __map = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'map'), 'map', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MeasureDimensionMaps_httpschemas_openxmlformats_orgspreadsheetml2006mainmap', True)

    
    map = property(__map.value, __map.set, None, u'OLAP Measure Group')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MeasureDimensionMaps_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Measure Group Count')


    _ElementMap = {
        __map.name() : __map
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_MeasureDimensionMaps', CT_MeasureDimensionMaps)


# Complex type CT_Location with content type EMPTY
class CT_Location (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Location')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute rowPageCount uses Python identifier rowPageCount
    __rowPageCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rowPageCount'), 'rowPageCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Location_rowPageCount', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    rowPageCount = property(__rowPageCount.value, __rowPageCount.set, None, u'Rows Per Page Count')

    
    # Attribute colPageCount uses Python identifier colPageCount
    __colPageCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'colPageCount'), 'colPageCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Location_colPageCount', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    colPageCount = property(__colPageCount.value, __colPageCount.set, None, u'Columns Per Page')

    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Location_ref', ST_Ref, required=True)
    
    ref = property(__ref.value, __ref.set, None, u'Reference')

    
    # Attribute firstHeaderRow uses Python identifier firstHeaderRow
    __firstHeaderRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'firstHeaderRow'), 'firstHeaderRow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Location_firstHeaderRow', pyxb.binding.datatypes.unsignedInt, required=True)
    
    firstHeaderRow = property(__firstHeaderRow.value, __firstHeaderRow.set, None, u'First Header Row')

    
    # Attribute firstDataRow uses Python identifier firstDataRow
    __firstDataRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'firstDataRow'), 'firstDataRow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Location_firstDataRow', pyxb.binding.datatypes.unsignedInt, required=True)
    
    firstDataRow = property(__firstDataRow.value, __firstDataRow.set, None, u'PivotTable Data First Row')

    
    # Attribute firstDataCol uses Python identifier firstDataCol
    __firstDataCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'firstDataCol'), 'firstDataCol', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Location_firstDataCol', pyxb.binding.datatypes.unsignedInt, required=True)
    
    firstDataCol = property(__firstDataCol.value, __firstDataCol.set, None, u'First Data Column')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __rowPageCount.name() : __rowPageCount,
        __colPageCount.name() : __colPageCount,
        __ref.name() : __ref,
        __firstHeaderRow.name() : __firstHeaderRow,
        __firstDataRow.name() : __firstDataRow,
        __firstDataCol.name() : __firstDataCol
    }
Namespace.addCategoryObject('typeBinding', u'CT_Location', CT_Location)


# Complex type CT_WorkbookProtection with content type EMPTY
class CT_WorkbookProtection (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_WorkbookProtection')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute revisionsSaltValue uses Python identifier revisionsSaltValue
    __revisionsSaltValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'revisionsSaltValue'), 'revisionsSaltValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookProtection_revisionsSaltValue', pyxb.binding.datatypes.base64Binary)
    
    revisionsSaltValue = property(__revisionsSaltValue.value, __revisionsSaltValue.set, None, u'Salt Value for Password Verifier')

    
    # Attribute revisionsPassword uses Python identifier revisionsPassword
    __revisionsPassword = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'revisionsPassword'), 'revisionsPassword', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookProtection_revisionsPassword', ST_UnsignedShortHex)
    
    revisionsPassword = property(__revisionsPassword.value, __revisionsPassword.set, None, u'Legacy Revisions Password')

    
    # Attribute lockStructure uses Python identifier lockStructure
    __lockStructure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lockStructure'), 'lockStructure', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookProtection_lockStructure', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    lockStructure = property(__lockStructure.value, __lockStructure.set, None, u'Lock Structure')

    
    # Attribute revisionsAlgorithmName uses Python identifier revisionsAlgorithmName
    __revisionsAlgorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'revisionsAlgorithmName'), 'revisionsAlgorithmName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookProtection_revisionsAlgorithmName', _s.ST_Xstring)
    
    revisionsAlgorithmName = property(__revisionsAlgorithmName.value, __revisionsAlgorithmName.set, None, u'Cryptographic Algorithm Name')

    
    # Attribute revisionsSpinCount uses Python identifier revisionsSpinCount
    __revisionsSpinCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'revisionsSpinCount'), 'revisionsSpinCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookProtection_revisionsSpinCount', pyxb.binding.datatypes.unsignedInt)
    
    revisionsSpinCount = property(__revisionsSpinCount.value, __revisionsSpinCount.set, None, u'Iterations to Run Hashing Algorithm')

    
    # Attribute lockWindows uses Python identifier lockWindows
    __lockWindows = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lockWindows'), 'lockWindows', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookProtection_lockWindows', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    lockWindows = property(__lockWindows.value, __lockWindows.set, None, u'Lock Windows')

    
    # Attribute workbookPassword uses Python identifier workbookPassword
    __workbookPassword = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'workbookPassword'), 'workbookPassword', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookProtection_workbookPassword', ST_UnsignedShortHex)
    
    workbookPassword = property(__workbookPassword.value, __workbookPassword.set, None, u'Legacy Workbook Password')

    
    # Attribute lockRevision uses Python identifier lockRevision
    __lockRevision = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lockRevision'), 'lockRevision', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookProtection_lockRevision', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    lockRevision = property(__lockRevision.value, __lockRevision.set, None, u'Lock Revisions')

    
    # Attribute workbookPasswordCharacterSet uses Python identifier workbookPasswordCharacterSet
    __workbookPasswordCharacterSet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'workbookPasswordCharacterSet'), 'workbookPasswordCharacterSet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookProtection_workbookPasswordCharacterSet', pyxb.binding.datatypes.string)
    
    workbookPasswordCharacterSet = property(__workbookPasswordCharacterSet.value, __workbookPasswordCharacterSet.set, None, u'Workbook Password Character Set')

    
    # Attribute workbookSaltValue uses Python identifier workbookSaltValue
    __workbookSaltValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'workbookSaltValue'), 'workbookSaltValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookProtection_workbookSaltValue', pyxb.binding.datatypes.base64Binary)
    
    workbookSaltValue = property(__workbookSaltValue.value, __workbookSaltValue.set, None, u'Salt Value for Password Verifier')

    
    # Attribute workbookHashValue uses Python identifier workbookHashValue
    __workbookHashValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'workbookHashValue'), 'workbookHashValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookProtection_workbookHashValue', pyxb.binding.datatypes.base64Binary)
    
    workbookHashValue = property(__workbookHashValue.value, __workbookHashValue.set, None, u'Password Hash Value')

    
    # Attribute workbookSpinCount uses Python identifier workbookSpinCount
    __workbookSpinCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'workbookSpinCount'), 'workbookSpinCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookProtection_workbookSpinCount', pyxb.binding.datatypes.unsignedInt)
    
    workbookSpinCount = property(__workbookSpinCount.value, __workbookSpinCount.set, None, u'Iterations to Run Hashing Algorithm')

    
    # Attribute revisionsHashValue uses Python identifier revisionsHashValue
    __revisionsHashValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'revisionsHashValue'), 'revisionsHashValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookProtection_revisionsHashValue', pyxb.binding.datatypes.base64Binary)
    
    revisionsHashValue = property(__revisionsHashValue.value, __revisionsHashValue.set, None, u'Password Hash Value')

    
    # Attribute workbookAlgorithmName uses Python identifier workbookAlgorithmName
    __workbookAlgorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'workbookAlgorithmName'), 'workbookAlgorithmName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookProtection_workbookAlgorithmName', _s.ST_Xstring)
    
    workbookAlgorithmName = property(__workbookAlgorithmName.value, __workbookAlgorithmName.set, None, u'Cryptographic Algorithm Name')

    
    # Attribute revisionsPasswordCharacterSet uses Python identifier revisionsPasswordCharacterSet
    __revisionsPasswordCharacterSet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'revisionsPasswordCharacterSet'), 'revisionsPasswordCharacterSet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookProtection_revisionsPasswordCharacterSet', pyxb.binding.datatypes.string)
    
    revisionsPasswordCharacterSet = property(__revisionsPasswordCharacterSet.value, __revisionsPasswordCharacterSet.set, None, u'Revisions Password Character Set')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __revisionsSaltValue.name() : __revisionsSaltValue,
        __revisionsPassword.name() : __revisionsPassword,
        __lockStructure.name() : __lockStructure,
        __revisionsAlgorithmName.name() : __revisionsAlgorithmName,
        __revisionsSpinCount.name() : __revisionsSpinCount,
        __lockWindows.name() : __lockWindows,
        __workbookPassword.name() : __workbookPassword,
        __lockRevision.name() : __lockRevision,
        __workbookPasswordCharacterSet.name() : __workbookPasswordCharacterSet,
        __workbookSaltValue.name() : __workbookSaltValue,
        __workbookHashValue.name() : __workbookHashValue,
        __workbookSpinCount.name() : __workbookSpinCount,
        __revisionsHashValue.name() : __revisionsHashValue,
        __workbookAlgorithmName.name() : __workbookAlgorithmName,
        __revisionsPasswordCharacterSet.name() : __revisionsPasswordCharacterSet
    }
Namespace.addCategoryObject('typeBinding', u'CT_WorkbookProtection', CT_WorkbookProtection)


# Complex type CT_Table with content type ELEMENT_ONLY
class CT_Table (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Table')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}autoFilter uses Python identifier autoFilter
    __autoFilter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'autoFilter'), 'autoFilter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_httpschemas_openxmlformats_orgspreadsheetml2006mainautoFilter', False)

    
    autoFilter = property(__autoFilter.value, __autoFilter.set, None, u'Table AutoFilter')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tableStyleInfo uses Python identifier tableStyleInfo
    __tableStyleInfo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tableStyleInfo'), 'tableStyleInfo', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_httpschemas_openxmlformats_orgspreadsheetml2006maintableStyleInfo', False)

    
    tableStyleInfo = property(__tableStyleInfo.value, __tableStyleInfo.set, None, u'Table Style')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sortState uses Python identifier sortState
    __sortState = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sortState'), 'sortState', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_httpschemas_openxmlformats_orgspreadsheetml2006mainsortState', False)

    
    sortState = property(__sortState.value, __sortState.set, None, u'Sort State')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tableColumns uses Python identifier tableColumns
    __tableColumns = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tableColumns'), 'tableColumns', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_httpschemas_openxmlformats_orgspreadsheetml2006maintableColumns', False)

    
    tableColumns = property(__tableColumns.value, __tableColumns.set, None, u'Table Columns')

    
    # Attribute comment uses Python identifier comment
    __comment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'comment'), 'comment', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_comment', _s.ST_Xstring)
    
    comment = property(__comment.value, __comment.set, None, u'Table Comment')

    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_ref', ST_Ref, required=True)
    
    ref = property(__ref.value, __ref.set, None, u'Reference')

    
    # Attribute tableType uses Python identifier tableType
    __tableType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tableType'), 'tableType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_tableType', ST_TableType, unicode_default=u'worksheet')
    
    tableType = property(__tableType.value, __tableType.set, None, u'Table Type')

    
    # Attribute totalsRowBorderDxfId uses Python identifier totalsRowBorderDxfId
    __totalsRowBorderDxfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'totalsRowBorderDxfId'), 'totalsRowBorderDxfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_totalsRowBorderDxfId', ST_DxfId)
    
    totalsRowBorderDxfId = property(__totalsRowBorderDxfId.value, __totalsRowBorderDxfId.set, None, u'Totals Row Border Format Id')

    
    # Attribute headerRowCount uses Python identifier headerRowCount
    __headerRowCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'headerRowCount'), 'headerRowCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_headerRowCount', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    headerRowCount = property(__headerRowCount.value, __headerRowCount.set, None, u'Header Row Count')

    
    # Attribute tableBorderDxfId uses Python identifier tableBorderDxfId
    __tableBorderDxfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tableBorderDxfId'), 'tableBorderDxfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_tableBorderDxfId', ST_DxfId)
    
    tableBorderDxfId = property(__tableBorderDxfId.value, __tableBorderDxfId.set, None, u'Table Border Format Id')

    
    # Attribute insertRow uses Python identifier insertRow
    __insertRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'insertRow'), 'insertRow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_insertRow', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    insertRow = property(__insertRow.value, __insertRow.set, None, u'Insert Row Showing')

    
    # Attribute totalsRowCount uses Python identifier totalsRowCount
    __totalsRowCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'totalsRowCount'), 'totalsRowCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_totalsRowCount', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    totalsRowCount = property(__totalsRowCount.value, __totalsRowCount.set, None, u'Totals Row Count')

    
    # Attribute totalsRowShown uses Python identifier totalsRowShown
    __totalsRowShown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'totalsRowShown'), 'totalsRowShown', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_totalsRowShown', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    totalsRowShown = property(__totalsRowShown.value, __totalsRowShown.set, None, u'Totals Row Shown')

    
    # Attribute published uses Python identifier published
    __published = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'published'), 'published', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_published', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    published = property(__published.value, __published.set, None, u'Published')

    
    # Attribute headerRowDxfId uses Python identifier headerRowDxfId
    __headerRowDxfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'headerRowDxfId'), 'headerRowDxfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_headerRowDxfId', ST_DxfId)
    
    headerRowDxfId = property(__headerRowDxfId.value, __headerRowDxfId.set, None, u'Header Row Format Id')

    
    # Attribute dataDxfId uses Python identifier dataDxfId
    __dataDxfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataDxfId'), 'dataDxfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_dataDxfId', ST_DxfId)
    
    dataDxfId = property(__dataDxfId.value, __dataDxfId.set, None, u'Data Area Format Id')

    
    # Attribute totalsRowDxfId uses Python identifier totalsRowDxfId
    __totalsRowDxfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'totalsRowDxfId'), 'totalsRowDxfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_totalsRowDxfId', ST_DxfId)
    
    totalsRowDxfId = property(__totalsRowDxfId.value, __totalsRowDxfId.set, None, u'Totals Row Format Id')

    
    # Attribute headerRowBorderDxfId uses Python identifier headerRowBorderDxfId
    __headerRowBorderDxfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'headerRowBorderDxfId'), 'headerRowBorderDxfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_headerRowBorderDxfId', ST_DxfId)
    
    headerRowBorderDxfId = property(__headerRowBorderDxfId.value, __headerRowBorderDxfId.set, None, u'Header Row Border Format Id')

    
    # Attribute insertRowShift uses Python identifier insertRowShift
    __insertRowShift = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'insertRowShift'), 'insertRowShift', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_insertRowShift', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    insertRowShift = property(__insertRowShift.value, __insertRowShift.set, None, u'Insert Row Shift')

    
    # Attribute headerRowCellStyle uses Python identifier headerRowCellStyle
    __headerRowCellStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'headerRowCellStyle'), 'headerRowCellStyle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_headerRowCellStyle', _s.ST_Xstring)
    
    headerRowCellStyle = property(__headerRowCellStyle.value, __headerRowCellStyle.set, None, u'Header Row Style')

    
    # Attribute connectionId uses Python identifier connectionId
    __connectionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'connectionId'), 'connectionId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_connectionId', pyxb.binding.datatypes.unsignedInt)
    
    connectionId = property(__connectionId.value, __connectionId.set, None, u'Connection ID')

    
    # Attribute dataCellStyle uses Python identifier dataCellStyle
    __dataCellStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataCellStyle'), 'dataCellStyle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_dataCellStyle', _s.ST_Xstring)
    
    dataCellStyle = property(__dataCellStyle.value, __dataCellStyle.set, None, u'Data Style Name')

    
    # Attribute totalsRowCellStyle uses Python identifier totalsRowCellStyle
    __totalsRowCellStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'totalsRowCellStyle'), 'totalsRowCellStyle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_totalsRowCellStyle', _s.ST_Xstring)
    
    totalsRowCellStyle = property(__totalsRowCellStyle.value, __totalsRowCellStyle.set, None, u'Totals Row Style')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_id', pyxb.binding.datatypes.unsignedInt, required=True)
    
    id = property(__id.value, __id.set, None, u'Table Id')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'Name')

    
    # Attribute displayName uses Python identifier displayName
    __displayName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'displayName'), 'displayName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Table_displayName', _s.ST_Xstring, required=True)
    
    displayName = property(__displayName.value, __displayName.set, None, u'Table Name')


    _ElementMap = {
        __extLst.name() : __extLst,
        __autoFilter.name() : __autoFilter,
        __tableStyleInfo.name() : __tableStyleInfo,
        __sortState.name() : __sortState,
        __tableColumns.name() : __tableColumns
    }
    _AttributeMap = {
        __comment.name() : __comment,
        __ref.name() : __ref,
        __tableType.name() : __tableType,
        __totalsRowBorderDxfId.name() : __totalsRowBorderDxfId,
        __headerRowCount.name() : __headerRowCount,
        __tableBorderDxfId.name() : __tableBorderDxfId,
        __insertRow.name() : __insertRow,
        __totalsRowCount.name() : __totalsRowCount,
        __totalsRowShown.name() : __totalsRowShown,
        __published.name() : __published,
        __headerRowDxfId.name() : __headerRowDxfId,
        __dataDxfId.name() : __dataDxfId,
        __totalsRowDxfId.name() : __totalsRowDxfId,
        __headerRowBorderDxfId.name() : __headerRowBorderDxfId,
        __insertRowShift.name() : __insertRowShift,
        __headerRowCellStyle.name() : __headerRowCellStyle,
        __connectionId.name() : __connectionId,
        __dataCellStyle.name() : __dataCellStyle,
        __totalsRowCellStyle.name() : __totalsRowCellStyle,
        __id.name() : __id,
        __name.name() : __name,
        __displayName.name() : __displayName
    }
Namespace.addCategoryObject('typeBinding', u'CT_Table', CT_Table)


# Complex type CT_ExternalDefinedName with content type EMPTY
class CT_ExternalDefinedName (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ExternalDefinedName')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalDefinedName_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Defined Name')

    
    # Attribute refersTo uses Python identifier refersTo
    __refersTo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refersTo'), 'refersTo', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalDefinedName_refersTo', _s.ST_Xstring)
    
    refersTo = property(__refersTo.value, __refersTo.set, None, u'Refers To')

    
    # Attribute sheetId uses Python identifier sheetId
    __sheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheetId'), 'sheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalDefinedName_sheetId', pyxb.binding.datatypes.unsignedInt)
    
    sheetId = property(__sheetId.value, __sheetId.set, None, u'Sheet Id')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __name.name() : __name,
        __refersTo.name() : __refersTo,
        __sheetId.name() : __sheetId
    }
Namespace.addCategoryObject('typeBinding', u'CT_ExternalDefinedName', CT_ExternalDefinedName)


# Complex type CT_BorderPr with content type ELEMENT_ONLY
class CT_BorderPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_BorderPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'color'), 'color', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BorderPr_httpschemas_openxmlformats_orgspreadsheetml2006maincolor', False)

    
    color = property(__color.value, __color.set, None, u'Color')

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BorderPr_style', ST_BorderStyle, unicode_default=u'none')
    
    style = property(__style.value, __style.set, None, u'Line Style')


    _ElementMap = {
        __color.name() : __color
    }
    _AttributeMap = {
        __style.name() : __style
    }
Namespace.addCategoryObject('typeBinding', u'CT_BorderPr', CT_BorderPr)


# Complex type CT_SheetIdMap with content type ELEMENT_ONLY
class CT_SheetIdMap (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SheetIdMap')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetId uses Python identifier sheetId
    __sheetId = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetId'), 'sheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetIdMap_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetId', True)

    
    sheetId = property(__sheetId.value, __sheetId.set, None, u'Sheet Id')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetIdMap_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Sheet Count')


    _ElementMap = {
        __sheetId.name() : __sheetId
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_SheetIdMap', CT_SheetIdMap)


# Complex type CT_RevisionComment with content type EMPTY
class CT_RevisionComment (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RevisionComment')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute alwaysShow uses Python identifier alwaysShow
    __alwaysShow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'alwaysShow'), 'alwaysShow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionComment_alwaysShow', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    alwaysShow = property(__alwaysShow.value, __alwaysShow.set, None, u'Always Show Comment')

    
    # Attribute newLength uses Python identifier newLength
    __newLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'newLength'), 'newLength', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionComment_newLength', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    newLength = property(__newLength.value, __newLength.set, None, u'New Comment Length')

    
    # Attribute sheetId uses Python identifier sheetId
    __sheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheetId'), 'sheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionComment_sheetId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    sheetId = property(__sheetId.value, __sheetId.set, None, u'Sheet Id')

    
    # Attribute hiddenRow uses Python identifier hiddenRow
    __hiddenRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hiddenRow'), 'hiddenRow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionComment_hiddenRow', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hiddenRow = property(__hiddenRow.value, __hiddenRow.set, None, u'Comment In Hidden Row')

    
    # Attribute cell uses Python identifier cell
    __cell = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cell'), 'cell', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionComment_cell', ST_CellRef, required=True)
    
    cell = property(__cell.value, __cell.set, None, u'Cell')

    
    # Attribute old uses Python identifier old
    __old = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'old'), 'old', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionComment_old', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    old = property(__old.value, __old.set, None, u'Old Comment')

    
    # Attribute hiddenColumn uses Python identifier hiddenColumn
    __hiddenColumn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hiddenColumn'), 'hiddenColumn', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionComment_hiddenColumn', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hiddenColumn = property(__hiddenColumn.value, __hiddenColumn.set, None, u'Hidden Column')

    
    # Attribute guid uses Python identifier guid
    __guid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'guid'), 'guid', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionComment_guid', _s.ST_Guid, required=True)
    
    guid = property(__guid.value, __guid.set, None, u'GUID')

    
    # Attribute author uses Python identifier author
    __author = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'author'), 'author', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionComment_author', _s.ST_Xstring, required=True)
    
    author = property(__author.value, __author.set, None, u'Author')

    
    # Attribute action uses Python identifier action
    __action = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'action'), 'action', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionComment_action', ST_RevisionAction, unicode_default=u'add')
    
    action = property(__action.value, __action.set, None, u'User Action')

    
    # Attribute oldLength uses Python identifier oldLength
    __oldLength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'oldLength'), 'oldLength', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionComment_oldLength', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    oldLength = property(__oldLength.value, __oldLength.set, None, u'Original Comment Length')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __alwaysShow.name() : __alwaysShow,
        __newLength.name() : __newLength,
        __sheetId.name() : __sheetId,
        __hiddenRow.name() : __hiddenRow,
        __cell.name() : __cell,
        __old.name() : __old,
        __hiddenColumn.name() : __hiddenColumn,
        __guid.name() : __guid,
        __author.name() : __author,
        __action.name() : __action,
        __oldLength.name() : __oldLength
    }
Namespace.addCategoryObject('typeBinding', u'CT_RevisionComment', CT_RevisionComment)


# Complex type CT_OlapPr with content type EMPTY
class CT_OlapPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_OlapPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute sendLocale uses Python identifier sendLocale
    __sendLocale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sendLocale'), 'sendLocale', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OlapPr_sendLocale', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    sendLocale = property(__sendLocale.value, __sendLocale.set, None, u'Send Locale to OLAP')

    
    # Attribute localConnection uses Python identifier localConnection
    __localConnection = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'localConnection'), 'localConnection', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OlapPr_localConnection', _s.ST_Xstring)
    
    localConnection = property(__localConnection.value, __localConnection.set, None, u'Local Cube Connection')

    
    # Attribute localRefresh uses Python identifier localRefresh
    __localRefresh = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'localRefresh'), 'localRefresh', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OlapPr_localRefresh', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    localRefresh = property(__localRefresh.value, __localRefresh.set, None, u'Local Refresh')

    
    # Attribute serverFont uses Python identifier serverFont
    __serverFont = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'serverFont'), 'serverFont', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OlapPr_serverFont', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    serverFont = property(__serverFont.value, __serverFont.set, None, u'OLAP Server Font')

    
    # Attribute serverFill uses Python identifier serverFill
    __serverFill = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'serverFill'), 'serverFill', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OlapPr_serverFill', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    serverFill = property(__serverFill.value, __serverFill.set, None, u'OLAP Fill Formatting')

    
    # Attribute serverFontColor uses Python identifier serverFontColor
    __serverFontColor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'serverFontColor'), 'serverFontColor', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OlapPr_serverFontColor', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    serverFontColor = property(__serverFontColor.value, __serverFontColor.set, None, u'OLAP Font Formatting')

    
    # Attribute rowDrillCount uses Python identifier rowDrillCount
    __rowDrillCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rowDrillCount'), 'rowDrillCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OlapPr_rowDrillCount', pyxb.binding.datatypes.unsignedInt)
    
    rowDrillCount = property(__rowDrillCount.value, __rowDrillCount.set, None, u'Drill Through Count')

    
    # Attribute serverNumberFormat uses Python identifier serverNumberFormat
    __serverNumberFormat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'serverNumberFormat'), 'serverNumberFormat', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OlapPr_serverNumberFormat', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    serverNumberFormat = property(__serverNumberFormat.value, __serverNumberFormat.set, None, u'OLAP Number Format')

    
    # Attribute local uses Python identifier local
    __local = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'local'), 'local', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OlapPr_local', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    local = property(__local.value, __local.set, None, u'Local Cube')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __sendLocale.name() : __sendLocale,
        __localConnection.name() : __localConnection,
        __localRefresh.name() : __localRefresh,
        __serverFont.name() : __serverFont,
        __serverFill.name() : __serverFill,
        __serverFontColor.name() : __serverFontColor,
        __rowDrillCount.name() : __rowDrillCount,
        __serverNumberFormat.name() : __serverNumberFormat,
        __local.name() : __local
    }
Namespace.addCategoryObject('typeBinding', u'CT_OlapPr', CT_OlapPr)


# Complex type CT_BookView with content type ELEMENT_ONLY
class CT_BookView (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_BookView')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BookView_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute windowWidth uses Python identifier windowWidth
    __windowWidth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'windowWidth'), 'windowWidth', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BookView_windowWidth', pyxb.binding.datatypes.unsignedInt)
    
    windowWidth = property(__windowWidth.value, __windowWidth.set, None, u'Window Width')

    
    # Attribute tabRatio uses Python identifier tabRatio
    __tabRatio = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tabRatio'), 'tabRatio', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BookView_tabRatio', pyxb.binding.datatypes.unsignedInt, unicode_default=u'600')
    
    tabRatio = property(__tabRatio.value, __tabRatio.set, None, u'Sheet Tab Ratio')

    
    # Attribute showSheetTabs uses Python identifier showSheetTabs
    __showSheetTabs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showSheetTabs'), 'showSheetTabs', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BookView_showSheetTabs', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showSheetTabs = property(__showSheetTabs.value, __showSheetTabs.set, None, u'Show Sheet Tabs')

    
    # Attribute yWindow uses Python identifier yWindow
    __yWindow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'yWindow'), 'yWindow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BookView_yWindow', pyxb.binding.datatypes.int)
    
    yWindow = property(__yWindow.value, __yWindow.set, None, u'Upper Left Corner (Y Coordinate)')

    
    # Attribute firstSheet uses Python identifier firstSheet
    __firstSheet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'firstSheet'), 'firstSheet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BookView_firstSheet', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    firstSheet = property(__firstSheet.value, __firstSheet.set, None, u'First Sheet')

    
    # Attribute xWindow uses Python identifier xWindow
    __xWindow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xWindow'), 'xWindow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BookView_xWindow', pyxb.binding.datatypes.int)
    
    xWindow = property(__xWindow.value, __xWindow.set, None, u'Upper Left Corner (X Coordinate)')

    
    # Attribute visibility uses Python identifier visibility
    __visibility = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'visibility'), 'visibility', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BookView_visibility', ST_Visibility, unicode_default=u'visible')
    
    visibility = property(__visibility.value, __visibility.set, None, u'Visibility')

    
    # Attribute activeTab uses Python identifier activeTab
    __activeTab = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'activeTab'), 'activeTab', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BookView_activeTab', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    activeTab = property(__activeTab.value, __activeTab.set, None, u'Active Sheet Index')

    
    # Attribute showHorizontalScroll uses Python identifier showHorizontalScroll
    __showHorizontalScroll = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showHorizontalScroll'), 'showHorizontalScroll', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BookView_showHorizontalScroll', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showHorizontalScroll = property(__showHorizontalScroll.value, __showHorizontalScroll.set, None, u'Show Horizontal Scroll')

    
    # Attribute minimized uses Python identifier minimized
    __minimized = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimized'), 'minimized', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BookView_minimized', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    minimized = property(__minimized.value, __minimized.set, None, u'Minimized')

    
    # Attribute autoFilterDateGrouping uses Python identifier autoFilterDateGrouping
    __autoFilterDateGrouping = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoFilterDateGrouping'), 'autoFilterDateGrouping', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BookView_autoFilterDateGrouping', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoFilterDateGrouping = property(__autoFilterDateGrouping.value, __autoFilterDateGrouping.set, None, u'AutoFilter Date Grouping')

    
    # Attribute windowHeight uses Python identifier windowHeight
    __windowHeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'windowHeight'), 'windowHeight', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BookView_windowHeight', pyxb.binding.datatypes.unsignedInt)
    
    windowHeight = property(__windowHeight.value, __windowHeight.set, None, u'Window Height')

    
    # Attribute showVerticalScroll uses Python identifier showVerticalScroll
    __showVerticalScroll = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showVerticalScroll'), 'showVerticalScroll', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BookView_showVerticalScroll', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showVerticalScroll = property(__showVerticalScroll.value, __showVerticalScroll.set, None, u'Show Vertical Scroll')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __windowWidth.name() : __windowWidth,
        __tabRatio.name() : __tabRatio,
        __showSheetTabs.name() : __showSheetTabs,
        __yWindow.name() : __yWindow,
        __firstSheet.name() : __firstSheet,
        __xWindow.name() : __xWindow,
        __visibility.name() : __visibility,
        __activeTab.name() : __activeTab,
        __showHorizontalScroll.name() : __showHorizontalScroll,
        __minimized.name() : __minimized,
        __autoFilterDateGrouping.name() : __autoFilterDateGrouping,
        __windowHeight.name() : __windowHeight,
        __showVerticalScroll.name() : __showVerticalScroll
    }
Namespace.addCategoryObject('typeBinding', u'CT_BookView', CT_BookView)


# Complex type CT_RPrElt with content type ELEMENT_ONLY
class CT_RPrElt (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RPrElt')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}vertAlign uses Python identifier vertAlign
    __vertAlign = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'vertAlign'), 'vertAlign', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RPrElt_httpschemas_openxmlformats_orgspreadsheetml2006mainvertAlign', True)

    
    vertAlign = property(__vertAlign.value, __vertAlign.set, None, u'Vertical Alignment')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'b'), 'b', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RPrElt_httpschemas_openxmlformats_orgspreadsheetml2006mainb', True)

    
    b = property(__b.value, __b.set, None, u'Bold')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sz uses Python identifier sz
    __sz = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sz'), 'sz', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RPrElt_httpschemas_openxmlformats_orgspreadsheetml2006mainsz', True)

    
    sz = property(__sz.value, __sz.set, None, u'Font Size')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}scheme uses Python identifier scheme
    __scheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'scheme'), 'scheme', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RPrElt_httpschemas_openxmlformats_orgspreadsheetml2006mainscheme', True)

    
    scheme = property(__scheme.value, __scheme.set, None, u'Font Scheme')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}i uses Python identifier i
    __i = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'i'), 'i', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RPrElt_httpschemas_openxmlformats_orgspreadsheetml2006maini', True)

    
    i = property(__i.value, __i.set, None, u'Italic')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extend uses Python identifier extend_
    __extend = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extend'), 'extend_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RPrElt_httpschemas_openxmlformats_orgspreadsheetml2006mainextend', True)

    
    extend_ = property(__extend.value, __extend.set, None, u'Extend')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}shadow uses Python identifier shadow
    __shadow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'shadow'), 'shadow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RPrElt_httpschemas_openxmlformats_orgspreadsheetml2006mainshadow', True)

    
    shadow = property(__shadow.value, __shadow.set, None, u'Shadow')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'color'), 'color', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RPrElt_httpschemas_openxmlformats_orgspreadsheetml2006maincolor', True)

    
    color = property(__color.value, __color.set, None, u'Text Color')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}condense uses Python identifier condense
    __condense = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'condense'), 'condense', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RPrElt_httpschemas_openxmlformats_orgspreadsheetml2006maincondense', True)

    
    condense = property(__condense.value, __condense.set, None, u'Condense')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}strike uses Python identifier strike
    __strike = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'strike'), 'strike', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RPrElt_httpschemas_openxmlformats_orgspreadsheetml2006mainstrike', True)

    
    strike = property(__strike.value, __strike.set, None, u'Strike Through')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}outline uses Python identifier outline
    __outline = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'outline'), 'outline', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RPrElt_httpschemas_openxmlformats_orgspreadsheetml2006mainoutline', True)

    
    outline = property(__outline.value, __outline.set, None, u'Outline')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}charset uses Python identifier charset
    __charset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'charset'), 'charset', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RPrElt_httpschemas_openxmlformats_orgspreadsheetml2006maincharset', True)

    
    charset = property(__charset.value, __charset.set, None, u'Character Set')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}u uses Python identifier u
    __u = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'u'), 'u', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RPrElt_httpschemas_openxmlformats_orgspreadsheetml2006mainu', True)

    
    u = property(__u.value, __u.set, None, u'Underline')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rFont uses Python identifier rFont
    __rFont = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rFont'), 'rFont', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RPrElt_httpschemas_openxmlformats_orgspreadsheetml2006mainrFont', True)

    
    rFont = property(__rFont.value, __rFont.set, None, u'Font')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}family uses Python identifier family
    __family = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'family'), 'family', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RPrElt_httpschemas_openxmlformats_orgspreadsheetml2006mainfamily', True)

    
    family = property(__family.value, __family.set, None, u'Font Family')


    _ElementMap = {
        __vertAlign.name() : __vertAlign,
        __b.name() : __b,
        __sz.name() : __sz,
        __scheme.name() : __scheme,
        __i.name() : __i,
        __extend.name() : __extend,
        __shadow.name() : __shadow,
        __color.name() : __color,
        __condense.name() : __condense,
        __strike.name() : __strike,
        __outline.name() : __outline,
        __charset.name() : __charset,
        __u.name() : __u,
        __rFont.name() : __rFont,
        __family.name() : __family
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_RPrElt', CT_RPrElt)


# Complex type CT_SmartTagPr with content type EMPTY
class CT_SmartTagPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SmartTagPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute embed uses Python identifier embed
    __embed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'embed'), 'embed', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SmartTagPr_embed', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    embed = property(__embed.value, __embed.set, None, u'Embed SmartTags')

    
    # Attribute show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'show'), 'show', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SmartTagPr_show', ST_SmartTagShow, unicode_default=u'all')
    
    show = property(__show.value, __show.set, None, u'Show Smart Tags')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __embed.name() : __embed,
        __show.name() : __show
    }
Namespace.addCategoryObject('typeBinding', u'CT_SmartTagPr', CT_SmartTagPr)


# Complex type CT_MetadataBlocks with content type ELEMENT_ONLY
class CT_MetadataBlocks (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MetadataBlocks')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}bk uses Python identifier bk
    __bk = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'bk'), 'bk', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataBlocks_httpschemas_openxmlformats_orgspreadsheetml2006mainbk', True)

    
    bk = property(__bk.value, __bk.set, None, u'Metadata Block')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataBlocks_count', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    count = property(__count.value, __count.set, None, u'Metadata Block Count')


    _ElementMap = {
        __bk.name() : __bk
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_MetadataBlocks', CT_MetadataBlocks)


# Complex type CT_Xf with content type ELEMENT_ONLY
class CT_Xf (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Xf')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}alignment uses Python identifier alignment
    __alignment = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'alignment'), 'alignment', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_httpschemas_openxmlformats_orgspreadsheetml2006mainalignment', False)

    
    alignment = property(__alignment.value, __alignment.set, None, u'Alignment')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}protection uses Python identifier protection
    __protection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'protection'), 'protection', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_httpschemas_openxmlformats_orgspreadsheetml2006mainprotection', False)

    
    protection = property(__protection.value, __protection.set, None, u'Protection')

    
    # Attribute applyFont uses Python identifier applyFont
    __applyFont = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyFont'), 'applyFont', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_applyFont', pyxb.binding.datatypes.boolean)
    
    applyFont = property(__applyFont.value, __applyFont.set, None, u'Apply Font')

    
    # Attribute pivotButton uses Python identifier pivotButton
    __pivotButton = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pivotButton'), 'pivotButton', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_pivotButton', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    pivotButton = property(__pivotButton.value, __pivotButton.set, None, u'Pivot Button')

    
    # Attribute borderId uses Python identifier borderId
    __borderId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'borderId'), 'borderId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_borderId', ST_BorderId)
    
    borderId = property(__borderId.value, __borderId.set, None, u'Border Id')

    
    # Attribute quotePrefix uses Python identifier quotePrefix
    __quotePrefix = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'quotePrefix'), 'quotePrefix', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_quotePrefix', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    quotePrefix = property(__quotePrefix.value, __quotePrefix.set, None, u'Quote Prefix')

    
    # Attribute applyFill uses Python identifier applyFill
    __applyFill = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyFill'), 'applyFill', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_applyFill', pyxb.binding.datatypes.boolean)
    
    applyFill = property(__applyFill.value, __applyFill.set, None, u'Apply Fill')

    
    # Attribute xfId uses Python identifier xfId
    __xfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xfId'), 'xfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_xfId', ST_CellStyleXfId)
    
    xfId = property(__xfId.value, __xfId.set, None, u'Format Id')

    
    # Attribute applyBorder uses Python identifier applyBorder
    __applyBorder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyBorder'), 'applyBorder', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_applyBorder', pyxb.binding.datatypes.boolean)
    
    applyBorder = property(__applyBorder.value, __applyBorder.set, None, u'Apply Border')

    
    # Attribute numFmtId uses Python identifier numFmtId
    __numFmtId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numFmtId'), 'numFmtId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_numFmtId', ST_NumFmtId)
    
    numFmtId = property(__numFmtId.value, __numFmtId.set, None, u'Number Format Id')

    
    # Attribute fillId uses Python identifier fillId
    __fillId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fillId'), 'fillId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_fillId', ST_FillId)
    
    fillId = property(__fillId.value, __fillId.set, None, u'Fill Id')

    
    # Attribute applyAlignment uses Python identifier applyAlignment
    __applyAlignment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyAlignment'), 'applyAlignment', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_applyAlignment', pyxb.binding.datatypes.boolean)
    
    applyAlignment = property(__applyAlignment.value, __applyAlignment.set, None, u'Apply Alignment')

    
    # Attribute fontId uses Python identifier fontId
    __fontId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fontId'), 'fontId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_fontId', ST_FontId)
    
    fontId = property(__fontId.value, __fontId.set, None, u'Font Id')

    
    # Attribute applyProtection uses Python identifier applyProtection
    __applyProtection = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyProtection'), 'applyProtection', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_applyProtection', pyxb.binding.datatypes.boolean)
    
    applyProtection = property(__applyProtection.value, __applyProtection.set, None, u'Apply Protection')

    
    # Attribute applyNumberFormat uses Python identifier applyNumberFormat
    __applyNumberFormat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyNumberFormat'), 'applyNumberFormat', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Xf_applyNumberFormat', pyxb.binding.datatypes.boolean)
    
    applyNumberFormat = property(__applyNumberFormat.value, __applyNumberFormat.set, None, u'Apply Number Format')


    _ElementMap = {
        __extLst.name() : __extLst,
        __alignment.name() : __alignment,
        __protection.name() : __protection
    }
    _AttributeMap = {
        __applyFont.name() : __applyFont,
        __pivotButton.name() : __pivotButton,
        __borderId.name() : __borderId,
        __quotePrefix.name() : __quotePrefix,
        __applyFill.name() : __applyFill,
        __xfId.name() : __xfId,
        __applyBorder.name() : __applyBorder,
        __numFmtId.name() : __numFmtId,
        __fillId.name() : __fillId,
        __applyAlignment.name() : __applyAlignment,
        __fontId.name() : __fontId,
        __applyProtection.name() : __applyProtection,
        __applyNumberFormat.name() : __applyNumberFormat
    }
Namespace.addCategoryObject('typeBinding', u'CT_Xf', CT_Xf)


# Complex type CT_XmlColumnPr with content type ELEMENT_ONLY
class CT_XmlColumnPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_XmlColumnPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_XmlColumnPr_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Attribute xpath uses Python identifier xpath
    __xpath = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xpath'), 'xpath', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_XmlColumnPr_xpath', _s.ST_Xstring, required=True)
    
    xpath = property(__xpath.value, __xpath.set, None, u'XPath')

    
    # Attribute xmlDataType uses Python identifier xmlDataType
    __xmlDataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xmlDataType'), 'xmlDataType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_XmlColumnPr_xmlDataType', ST_XmlDataType, required=True)
    
    xmlDataType = property(__xmlDataType.value, __xmlDataType.set, None, u'XML Data Type')

    
    # Attribute denormalized uses Python identifier denormalized
    __denormalized = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'denormalized'), 'denormalized', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_XmlColumnPr_denormalized', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    denormalized = property(__denormalized.value, __denormalized.set, None, u'Denormalized')

    
    # Attribute mapId uses Python identifier mapId
    __mapId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mapId'), 'mapId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_XmlColumnPr_mapId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    mapId = property(__mapId.value, __mapId.set, None, u'XML Map Id')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __xpath.name() : __xpath,
        __xmlDataType.name() : __xmlDataType,
        __denormalized.name() : __denormalized,
        __mapId.name() : __mapId
    }
Namespace.addCategoryObject('typeBinding', u'CT_XmlColumnPr', CT_XmlColumnPr)


# Complex type CT_Field with content type EMPTY
class CT_Field (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Field')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'x'), 'x', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Field_x', pyxb.binding.datatypes.int, required=True)
    
    x = property(__x.value, __x.set, None, u'Field Index')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __x.name() : __x
    }
Namespace.addCategoryObject('typeBinding', u'CT_Field', CT_Field)


# Complex type CT_OleObjects with content type ELEMENT_ONLY
class CT_OleObjects (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_OleObjects')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}oleObject uses Python identifier oleObject
    __oleObject = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'oleObject'), 'oleObject', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleObjects_httpschemas_openxmlformats_orgspreadsheetml2006mainoleObject', True)

    
    oleObject = property(__oleObject.value, __oleObject.set, None, u'Embedded Object')


    _ElementMap = {
        __oleObject.name() : __oleObject
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_OleObjects', CT_OleObjects)


# Complex type CT_PivotArea with content type ELEMENT_ONLY
class CT_PivotArea (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotArea')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotArea_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}references uses Python identifier references
    __references = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'references'), 'references', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotArea_httpschemas_openxmlformats_orgspreadsheetml2006mainreferences', False)

    
    references = property(__references.value, __references.set, None, u'References')

    
    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotArea_field', pyxb.binding.datatypes.int)
    
    field = property(__field.value, __field.set, None, u'Field Index')

    
    # Attribute collapsedLevelsAreSubtotals uses Python identifier collapsedLevelsAreSubtotals
    __collapsedLevelsAreSubtotals = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'collapsedLevelsAreSubtotals'), 'collapsedLevelsAreSubtotals', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotArea_collapsedLevelsAreSubtotals', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    collapsedLevelsAreSubtotals = property(__collapsedLevelsAreSubtotals.value, __collapsedLevelsAreSubtotals.set, None, u'Collapsed Levels Are Subtotals')

    
    # Attribute cacheIndex uses Python identifier cacheIndex
    __cacheIndex = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cacheIndex'), 'cacheIndex', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotArea_cacheIndex', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    cacheIndex = property(__cacheIndex.value, __cacheIndex.set, None, u'Cache Index')

    
    # Attribute axis uses Python identifier axis
    __axis = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axis'), 'axis', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotArea_axis', ST_Axis)
    
    axis = property(__axis.value, __axis.set, None, u'Axis')

    
    # Attribute fieldPosition uses Python identifier fieldPosition
    __fieldPosition = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fieldPosition'), 'fieldPosition', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotArea_fieldPosition', pyxb.binding.datatypes.unsignedInt)
    
    fieldPosition = property(__fieldPosition.value, __fieldPosition.set, None, u'Field Position')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotArea_type', ST_PivotAreaType, unicode_default=u'normal')
    
    type = property(__type.value, __type.set, None, u'Rule Type')

    
    # Attribute outline uses Python identifier outline
    __outline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'outline'), 'outline', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotArea_outline', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    outline = property(__outline.value, __outline.set, None, u'Outline')

    
    # Attribute dataOnly uses Python identifier dataOnly
    __dataOnly = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataOnly'), 'dataOnly', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotArea_dataOnly', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    dataOnly = property(__dataOnly.value, __dataOnly.set, None, u'Data Only')

    
    # Attribute labelOnly uses Python identifier labelOnly
    __labelOnly = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'labelOnly'), 'labelOnly', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotArea_labelOnly', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    labelOnly = property(__labelOnly.value, __labelOnly.set, None, u'Labels Only')

    
    # Attribute offset uses Python identifier offset
    __offset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'offset'), 'offset', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotArea_offset', ST_Ref)
    
    offset = property(__offset.value, __offset.set, None, u'Offset Reference')

    
    # Attribute grandRow uses Python identifier grandRow
    __grandRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'grandRow'), 'grandRow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotArea_grandRow', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    grandRow = property(__grandRow.value, __grandRow.set, None, u'Include Row Grand Total')

    
    # Attribute grandCol uses Python identifier grandCol
    __grandCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'grandCol'), 'grandCol', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotArea_grandCol', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    grandCol = property(__grandCol.value, __grandCol.set, None, u'Include Column Grand Total')


    _ElementMap = {
        __extLst.name() : __extLst,
        __references.name() : __references
    }
    _AttributeMap = {
        __field.name() : __field,
        __collapsedLevelsAreSubtotals.name() : __collapsedLevelsAreSubtotals,
        __cacheIndex.name() : __cacheIndex,
        __axis.name() : __axis,
        __fieldPosition.name() : __fieldPosition,
        __type.name() : __type,
        __outline.name() : __outline,
        __dataOnly.name() : __dataOnly,
        __labelOnly.name() : __labelOnly,
        __offset.name() : __offset,
        __grandRow.name() : __grandRow,
        __grandCol.name() : __grandCol
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotArea', CT_PivotArea)


# Complex type CT_SheetPr with content type ELEMENT_ONLY
class CT_SheetPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SheetPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageSetUpPr uses Python identifier pageSetUpPr
    __pageSetUpPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageSetUpPr'), 'pageSetUpPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetPr_httpschemas_openxmlformats_orgspreadsheetml2006mainpageSetUpPr', False)

    
    pageSetUpPr = property(__pageSetUpPr.value, __pageSetUpPr.set, None, u'Page Setup Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tabColor uses Python identifier tabColor
    __tabColor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tabColor'), 'tabColor', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetPr_httpschemas_openxmlformats_orgspreadsheetml2006maintabColor', False)

    
    tabColor = property(__tabColor.value, __tabColor.set, None, u'Sheet Tab Color')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}outlinePr uses Python identifier outlinePr
    __outlinePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'outlinePr'), 'outlinePr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetPr_httpschemas_openxmlformats_orgspreadsheetml2006mainoutlinePr', False)

    
    outlinePr = property(__outlinePr.value, __outlinePr.set, None, u'Outline Properties')

    
    # Attribute transitionEvaluation uses Python identifier transitionEvaluation
    __transitionEvaluation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'transitionEvaluation'), 'transitionEvaluation', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetPr_transitionEvaluation', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    transitionEvaluation = property(__transitionEvaluation.value, __transitionEvaluation.set, None, u'Transition Formula Evaluation')

    
    # Attribute filterMode uses Python identifier filterMode
    __filterMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'filterMode'), 'filterMode', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetPr_filterMode', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    filterMode = property(__filterMode.value, __filterMode.set, None, u'Filter Mode')

    
    # Attribute published uses Python identifier published
    __published = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'published'), 'published', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetPr_published', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    published = property(__published.value, __published.set, None, u'Published')

    
    # Attribute syncHorizontal uses Python identifier syncHorizontal
    __syncHorizontal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'syncHorizontal'), 'syncHorizontal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetPr_syncHorizontal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    syncHorizontal = property(__syncHorizontal.value, __syncHorizontal.set, None, u'Synch Horizontal')

    
    # Attribute transitionEntry uses Python identifier transitionEntry
    __transitionEntry = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'transitionEntry'), 'transitionEntry', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetPr_transitionEntry', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    transitionEntry = property(__transitionEntry.value, __transitionEntry.set, None, u'Transition Formula Entry')

    
    # Attribute codeName uses Python identifier codeName
    __codeName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeName'), 'codeName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetPr_codeName', pyxb.binding.datatypes.string)
    
    codeName = property(__codeName.value, __codeName.set, None, u'Code Name')

    
    # Attribute syncVertical uses Python identifier syncVertical
    __syncVertical = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'syncVertical'), 'syncVertical', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetPr_syncVertical', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    syncVertical = property(__syncVertical.value, __syncVertical.set, None, u'Synch Vertical')

    
    # Attribute syncRef uses Python identifier syncRef
    __syncRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'syncRef'), 'syncRef', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetPr_syncRef', ST_Ref)
    
    syncRef = property(__syncRef.value, __syncRef.set, None, u'Synch Reference')

    
    # Attribute enableFormatConditionsCalculation uses Python identifier enableFormatConditionsCalculation
    __enableFormatConditionsCalculation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'enableFormatConditionsCalculation'), 'enableFormatConditionsCalculation', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetPr_enableFormatConditionsCalculation', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    enableFormatConditionsCalculation = property(__enableFormatConditionsCalculation.value, __enableFormatConditionsCalculation.set, None, u'Enable Conditional Formatting Calculations')


    _ElementMap = {
        __pageSetUpPr.name() : __pageSetUpPr,
        __tabColor.name() : __tabColor,
        __outlinePr.name() : __outlinePr
    }
    _AttributeMap = {
        __transitionEvaluation.name() : __transitionEvaluation,
        __filterMode.name() : __filterMode,
        __published.name() : __published,
        __syncHorizontal.name() : __syncHorizontal,
        __transitionEntry.name() : __transitionEntry,
        __codeName.name() : __codeName,
        __syncVertical.name() : __syncVertical,
        __syncRef.name() : __syncRef,
        __enableFormatConditionsCalculation.name() : __enableFormatConditionsCalculation
    }
Namespace.addCategoryObject('typeBinding', u'CT_SheetPr', CT_SheetPr)


# Complex type CT_Sheet with content type EMPTY
class CT_Sheet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Sheet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute state uses Python identifier state
    __state = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'state'), 'state', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Sheet_state', ST_SheetState, unicode_default=u'visible')
    
    state = property(__state.value, __state.set, None, u'Visible State')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Sheet_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute sheetId uses Python identifier sheetId
    __sheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheetId'), 'sheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Sheet_sheetId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    sheetId = property(__sheetId.value, __sheetId.set, None, u'Sheet Tab Id')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Sheet_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Sheet Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __state.name() : __state,
        __id.name() : __id,
        __sheetId.name() : __sheetId,
        __name.name() : __name
    }
Namespace.addCategoryObject('typeBinding', u'CT_Sheet', CT_Sheet)


# Complex type CT_CellWatch with content type EMPTY
class CT_CellWatch (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CellWatch')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellWatch_r', ST_CellRef, required=True)
    
    r = property(__r.value, __r.set, None, u'Reference')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __r.name() : __r
    }
Namespace.addCategoryObject('typeBinding', u'CT_CellWatch', CT_CellWatch)


# Complex type CT_Member with content type EMPTY
class CT_Member (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Member')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Member_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Hidden Item Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __name.name() : __name
    }
Namespace.addCategoryObject('typeBinding', u'CT_Member', CT_Member)


# Complex type CT_PivotAreaReference with content type ELEMENT_ONLY
class CT_PivotAreaReference (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotAreaReference')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}x uses Python identifier x
    __x = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'x'), 'x', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_httpschemas_openxmlformats_orgspreadsheetml2006mainx', True)

    
    x = property(__x.value, __x.set, None, u'Field Item')

    
    # Attribute defaultSubtotal uses Python identifier defaultSubtotal
    __defaultSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultSubtotal'), 'defaultSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_defaultSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    defaultSubtotal = property(__defaultSubtotal.value, __defaultSubtotal.set, None, u'Include Default Filter')

    
    # Attribute varSubtotal uses Python identifier varSubtotal
    __varSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'varSubtotal'), 'varSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_varSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    varSubtotal = property(__varSubtotal.value, __varSubtotal.set, None, u'Include Var Filter')

    
    # Attribute avgSubtotal uses Python identifier avgSubtotal
    __avgSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'avgSubtotal'), 'avgSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_avgSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    avgSubtotal = property(__avgSubtotal.value, __avgSubtotal.set, None, u'Include Average Filter')

    
    # Attribute byPosition uses Python identifier byPosition
    __byPosition = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'byPosition'), 'byPosition', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_byPosition', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    byPosition = property(__byPosition.value, __byPosition.set, None, u'Positional Reference')

    
    # Attribute stdDevPSubtotal uses Python identifier stdDevPSubtotal
    __stdDevPSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stdDevPSubtotal'), 'stdDevPSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_stdDevPSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    stdDevPSubtotal = property(__stdDevPSubtotal.value, __stdDevPSubtotal.set, None, u'Include StdDevP Filter')

    
    # Attribute relative uses Python identifier relative
    __relative = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'relative'), 'relative', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_relative', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    relative = property(__relative.value, __relative.set, None, u'Relative Reference')

    
    # Attribute stdDevSubtotal uses Python identifier stdDevSubtotal
    __stdDevSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stdDevSubtotal'), 'stdDevSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_stdDevSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    stdDevSubtotal = property(__stdDevSubtotal.value, __stdDevSubtotal.set, None, u'Include StdDev Filter')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Item Index Count')

    
    # Attribute countSubtotal uses Python identifier countSubtotal
    __countSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'countSubtotal'), 'countSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_countSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    countSubtotal = property(__countSubtotal.value, __countSubtotal.set, None, u'Include Count Subtotal')

    
    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_field', pyxb.binding.datatypes.unsignedInt)
    
    field = property(__field.value, __field.set, None, u'Field Index')

    
    # Attribute productSubtotal uses Python identifier productSubtotal
    __productSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'productSubtotal'), 'productSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_productSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    productSubtotal = property(__productSubtotal.value, __productSubtotal.set, None, u'Include Product Filter')

    
    # Attribute varPSubtotal uses Python identifier varPSubtotal
    __varPSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'varPSubtotal'), 'varPSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_varPSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    varPSubtotal = property(__varPSubtotal.value, __varPSubtotal.set, None, u'Include VarP Filter')

    
    # Attribute minSubtotal uses Python identifier minSubtotal
    __minSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minSubtotal'), 'minSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_minSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    minSubtotal = property(__minSubtotal.value, __minSubtotal.set, None, u'Include Minimum Filter')

    
    # Attribute sumSubtotal uses Python identifier sumSubtotal
    __sumSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sumSubtotal'), 'sumSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_sumSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    sumSubtotal = property(__sumSubtotal.value, __sumSubtotal.set, None, u'Include Sum Filter')

    
    # Attribute maxSubtotal uses Python identifier maxSubtotal
    __maxSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxSubtotal'), 'maxSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_maxSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    maxSubtotal = property(__maxSubtotal.value, __maxSubtotal.set, None, u'Include Maximum Filter')

    
    # Attribute countASubtotal uses Python identifier countASubtotal
    __countASubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'countASubtotal'), 'countASubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_countASubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    countASubtotal = property(__countASubtotal.value, __countASubtotal.set, None, u'Include CountA Filter')

    
    # Attribute selected uses Python identifier selected
    __selected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'selected'), 'selected', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreaReference_selected', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    selected = property(__selected.value, __selected.set, None, u'Selected')


    _ElementMap = {
        __extLst.name() : __extLst,
        __x.name() : __x
    }
    _AttributeMap = {
        __defaultSubtotal.name() : __defaultSubtotal,
        __varSubtotal.name() : __varSubtotal,
        __avgSubtotal.name() : __avgSubtotal,
        __byPosition.name() : __byPosition,
        __stdDevPSubtotal.name() : __stdDevPSubtotal,
        __relative.name() : __relative,
        __stdDevSubtotal.name() : __stdDevSubtotal,
        __count.name() : __count,
        __countSubtotal.name() : __countSubtotal,
        __field.name() : __field,
        __productSubtotal.name() : __productSubtotal,
        __varPSubtotal.name() : __varPSubtotal,
        __minSubtotal.name() : __minSubtotal,
        __sumSubtotal.name() : __sumSubtotal,
        __maxSubtotal.name() : __maxSubtotal,
        __countASubtotal.name() : __countASubtotal,
        __selected.name() : __selected
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotAreaReference', CT_PivotAreaReference)


# Complex type CT_ColorScale with content type ELEMENT_ONLY
class CT_ColorScale (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ColorScale')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'color'), 'color', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ColorScale_httpschemas_openxmlformats_orgspreadsheetml2006maincolor', True)

    
    color = property(__color.value, __color.set, None, u'Color Gradiant Interpolation')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cfvo uses Python identifier cfvo
    __cfvo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cfvo'), 'cfvo', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ColorScale_httpschemas_openxmlformats_orgspreadsheetml2006maincfvo', True)

    
    cfvo = property(__cfvo.value, __cfvo.set, None, u'Conditional Format Value Object')


    _ElementMap = {
        __color.name() : __color,
        __cfvo.name() : __cfvo
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_ColorScale', CT_ColorScale)


# Complex type CT_WebPublishing with content type EMPTY
class CT_WebPublishing (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_WebPublishing')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute allowPng uses Python identifier allowPng
    __allowPng = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'allowPng'), 'allowPng', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishing_allowPng', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    allowPng = property(__allowPng.value, __allowPng.set, None, u'Allow PNG')

    
    # Attribute longFileNames uses Python identifier longFileNames
    __longFileNames = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'longFileNames'), 'longFileNames', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishing_longFileNames', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    longFileNames = property(__longFileNames.value, __longFileNames.set, None, u'Enable Long File Names')

    
    # Attribute targetScreenSize uses Python identifier targetScreenSize
    __targetScreenSize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'targetScreenSize'), 'targetScreenSize', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishing_targetScreenSize', ST_TargetScreenSize, unicode_default=u'800x600')
    
    targetScreenSize = property(__targetScreenSize.value, __targetScreenSize.set, None, u'Target Screen Size')

    
    # Attribute css uses Python identifier css
    __css = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'css'), 'css', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishing_css', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    css = property(__css.value, __css.set, None, u'Use CSS')

    
    # Attribute dpi uses Python identifier dpi
    __dpi = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dpi'), 'dpi', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishing_dpi', pyxb.binding.datatypes.unsignedInt, unicode_default=u'96')
    
    dpi = property(__dpi.value, __dpi.set, None, u'DPI')

    
    # Attribute thicket uses Python identifier thicket
    __thicket = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'thicket'), 'thicket', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishing_thicket', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    thicket = property(__thicket.value, __thicket.set, None, u'Thicket')

    
    # Attribute vml uses Python identifier vml
    __vml = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vml'), 'vml', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishing_vml', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    vml = property(__vml.value, __vml.set, None, u'VML in Browsers')

    
    # Attribute codePage uses Python identifier codePage
    __codePage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codePage'), 'codePage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishing_codePage', pyxb.binding.datatypes.unsignedInt)
    
    codePage = property(__codePage.value, __codePage.set, None, u'Code Page')

    
    # Attribute characterSet uses Python identifier characterSet
    __characterSet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'characterSet'), 'characterSet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishing_characterSet', pyxb.binding.datatypes.string)
    
    characterSet = property(__characterSet.value, __characterSet.set, None, u'Character Set')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __allowPng.name() : __allowPng,
        __longFileNames.name() : __longFileNames,
        __targetScreenSize.name() : __targetScreenSize,
        __css.name() : __css,
        __dpi.name() : __dpi,
        __thicket.name() : __thicket,
        __vml.name() : __vml,
        __codePage.name() : __codePage,
        __characterSet.name() : __characterSet
    }
Namespace.addCategoryObject('typeBinding', u'CT_WebPublishing', CT_WebPublishing)


# Complex type CT_CommentList with content type ELEMENT_ONLY
class CT_CommentList (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CommentList')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}comment uses Python identifier comment
    __comment = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'comment'), 'comment', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentList_httpschemas_openxmlformats_orgspreadsheetml2006maincomment', True)

    
    comment = property(__comment.value, __comment.set, None, u'Comment')


    _ElementMap = {
        __comment.name() : __comment
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_CommentList', CT_CommentList)


# Complex type CT_RevisionCustomView with content type EMPTY
class CT_RevisionCustomView (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RevisionCustomView')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute action uses Python identifier action
    __action = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'action'), 'action', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCustomView_action', ST_RevisionAction, required=True)
    
    action = property(__action.value, __action.set, None, u'User Action')

    
    # Attribute guid uses Python identifier guid
    __guid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'guid'), 'guid', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionCustomView_guid', _s.ST_Guid, required=True)
    
    guid = property(__guid.value, __guid.set, None, u'GUID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __action.name() : __action,
        __guid.name() : __guid
    }
Namespace.addCategoryObject('typeBinding', u'CT_RevisionCustomView', CT_RevisionCustomView)


# Complex type CT_rowItems with content type ELEMENT_ONLY
class CT_rowItems (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_rowItems')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}i uses Python identifier i
    __i = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'i'), 'i', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_rowItems_httpschemas_openxmlformats_orgspreadsheetml2006maini', True)

    
    i = property(__i.value, __i.set, None, u'Row Items')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_rowItems_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Items in a Row Count')


    _ElementMap = {
        __i.name() : __i
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_rowItems', CT_rowItems)


# Complex type CT_Revisions with content type ELEMENT_ONLY
class CT_Revisions (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Revisions')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rqt uses Python identifier rqt
    __rqt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rqt'), 'rqt', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Revisions_httpschemas_openxmlformats_orgspreadsheetml2006mainrqt', True)

    
    rqt = property(__rqt.value, __rqt.set, None, u'Revision Query Table')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rrc uses Python identifier rrc
    __rrc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rrc'), 'rrc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Revisions_httpschemas_openxmlformats_orgspreadsheetml2006mainrrc', True)

    
    rrc = property(__rrc.value, __rrc.set, None, u'Revision Row Column Insert Delete')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rcft uses Python identifier rcft
    __rcft = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rcft'), 'rcft', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Revisions_httpschemas_openxmlformats_orgspreadsheetml2006mainrcft', True)

    
    rcft = property(__rcft.value, __rcft.set, None, u'Revision Merge Conflict')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rfmt uses Python identifier rfmt
    __rfmt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rfmt'), 'rfmt', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Revisions_httpschemas_openxmlformats_orgspreadsheetml2006mainrfmt', True)

    
    rfmt = property(__rfmt.value, __rfmt.set, None, u'Revision Format')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rm uses Python identifier rm
    __rm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rm'), 'rm', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Revisions_httpschemas_openxmlformats_orgspreadsheetml2006mainrm', True)

    
    rm = property(__rm.value, __rm.set, None, u'Revision Cell Move')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}raf uses Python identifier raf
    __raf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'raf'), 'raf', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Revisions_httpschemas_openxmlformats_orgspreadsheetml2006mainraf', True)

    
    raf = property(__raf.value, __raf.set, None, u'Revision AutoFormat')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rcv uses Python identifier rcv
    __rcv = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rcv'), 'rcv', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Revisions_httpschemas_openxmlformats_orgspreadsheetml2006mainrcv', True)

    
    rcv = property(__rcv.value, __rcv.set, None, u'Revision Custom View')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rcc uses Python identifier rcc
    __rcc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rcc'), 'rcc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Revisions_httpschemas_openxmlformats_orgspreadsheetml2006mainrcc', True)

    
    rcc = property(__rcc.value, __rcc.set, None, u'Revision Cell Change')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rdn uses Python identifier rdn
    __rdn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rdn'), 'rdn', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Revisions_httpschemas_openxmlformats_orgspreadsheetml2006mainrdn', True)

    
    rdn = property(__rdn.value, __rdn.set, None, u'Revision Defined Name')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rsnm uses Python identifier rsnm
    __rsnm = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rsnm'), 'rsnm', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Revisions_httpschemas_openxmlformats_orgspreadsheetml2006mainrsnm', True)

    
    rsnm = property(__rsnm.value, __rsnm.set, None, u'Revision Sheet Name')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rcmt uses Python identifier rcmt
    __rcmt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rcmt'), 'rcmt', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Revisions_httpschemas_openxmlformats_orgspreadsheetml2006mainrcmt', True)

    
    rcmt = property(__rcmt.value, __rcmt.set, None, u'Revision Cell Comment')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}ris uses Python identifier ris
    __ris = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ris'), 'ris', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Revisions_httpschemas_openxmlformats_orgspreadsheetml2006mainris', True)

    
    ris = property(__ris.value, __ris.set, None, u'Revision Insert Sheet')


    _ElementMap = {
        __rqt.name() : __rqt,
        __rrc.name() : __rrc,
        __rcft.name() : __rcft,
        __rfmt.name() : __rfmt,
        __rm.name() : __rm,
        __raf.name() : __raf,
        __rcv.name() : __rcv,
        __rcc.name() : __rcc,
        __rdn.name() : __rdn,
        __rsnm.name() : __rsnm,
        __rcmt.name() : __rcmt,
        __ris.name() : __ris
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Revisions', CT_Revisions)


# Complex type CT_AutoFilter with content type ELEMENT_ONLY
class CT_AutoFilter (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_AutoFilter')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_AutoFilter_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}filterColumn uses Python identifier filterColumn
    __filterColumn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'filterColumn'), 'filterColumn', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_AutoFilter_httpschemas_openxmlformats_orgspreadsheetml2006mainfilterColumn', True)

    
    filterColumn = property(__filterColumn.value, __filterColumn.set, None, u'AutoFilter Column')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sortState uses Python identifier sortState
    __sortState = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sortState'), 'sortState', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_AutoFilter_httpschemas_openxmlformats_orgspreadsheetml2006mainsortState', False)

    
    sortState = property(__sortState.value, __sortState.set, None, u'Sort State for Auto Filter')

    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_AutoFilter_ref', ST_Ref)
    
    ref = property(__ref.value, __ref.set, None, u'Cell or Range Reference')


    _ElementMap = {
        __extLst.name() : __extLst,
        __filterColumn.name() : __filterColumn,
        __sortState.name() : __sortState
    }
    _AttributeMap = {
        __ref.name() : __ref
    }
Namespace.addCategoryObject('typeBinding', u'CT_AutoFilter', CT_AutoFilter)


# Complex type CT_PivotHierarchies with content type ELEMENT_ONLY
class CT_PivotHierarchies (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotHierarchies')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pivotHierarchy uses Python identifier pivotHierarchy
    __pivotHierarchy = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pivotHierarchy'), 'pivotHierarchy', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchies_httpschemas_openxmlformats_orgspreadsheetml2006mainpivotHierarchy', True)

    
    pivotHierarchy = property(__pivotHierarchy.value, __pivotHierarchy.set, None, u'OLAP Hierarchy')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchies_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'OLAP Hierarchy Count')


    _ElementMap = {
        __pivotHierarchy.name() : __pivotHierarchy
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotHierarchies', CT_PivotHierarchies)


# Complex type CT_CalculatedMember with content type ELEMENT_ONLY
class CT_CalculatedMember (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CalculatedMember')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedMember_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedMember_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Calculated Member Name')

    
    # Attribute parent uses Python identifier parent
    __parent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parent'), 'parent', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedMember_parent', _s.ST_Xstring)
    
    parent = property(__parent.value, __parent.set, None, u'Parent Name')

    
    # Attribute solveOrder uses Python identifier solveOrder
    __solveOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'solveOrder'), 'solveOrder', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedMember_solveOrder', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    solveOrder = property(__solveOrder.value, __solveOrder.set, None, u'Calculated Members Solve Order')

    
    # Attribute set uses Python identifier set
    __set = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'set'), 'set', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedMember_set', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    set = property(__set.value, __set.set, None, u'Set')

    
    # Attribute mdx uses Python identifier mdx
    __mdx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mdx'), 'mdx', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedMember_mdx', _s.ST_Xstring, required=True)
    
    mdx = property(__mdx.value, __mdx.set, None, u'Calculated Member MDX Formula')

    
    # Attribute memberName uses Python identifier memberName
    __memberName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'memberName'), 'memberName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedMember_memberName', _s.ST_Xstring)
    
    memberName = property(__memberName.value, __memberName.set, None, u'OLAP Calculated Member Name')

    
    # Attribute hierarchy uses Python identifier hierarchy
    __hierarchy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hierarchy'), 'hierarchy', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedMember_hierarchy', _s.ST_Xstring)
    
    hierarchy = property(__hierarchy.value, __hierarchy.set, None, u'Hierarchy Name')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __name.name() : __name,
        __parent.name() : __parent,
        __solveOrder.name() : __solveOrder,
        __set.name() : __set,
        __mdx.name() : __mdx,
        __memberName.name() : __memberName,
        __hierarchy.name() : __hierarchy
    }
Namespace.addCategoryObject('typeBinding', u'CT_CalculatedMember', CT_CalculatedMember)


# Complex type CT_FunctionGroups with content type ELEMENT_ONLY
class CT_FunctionGroups (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_FunctionGroups')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}functionGroup uses Python identifier functionGroup
    __functionGroup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'functionGroup'), 'functionGroup', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FunctionGroups_httpschemas_openxmlformats_orgspreadsheetml2006mainfunctionGroup', True)

    
    functionGroup = property(__functionGroup.value, __functionGroup.set, None, u'Function Group')

    
    # Attribute builtInGroupCount uses Python identifier builtInGroupCount
    __builtInGroupCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'builtInGroupCount'), 'builtInGroupCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FunctionGroups_builtInGroupCount', pyxb.binding.datatypes.unsignedInt, unicode_default=u'16')
    
    builtInGroupCount = property(__builtInGroupCount.value, __builtInGroupCount.set, None, u'Built-in Function Group Count')


    _ElementMap = {
        __functionGroup.name() : __functionGroup
    }
    _AttributeMap = {
        __builtInGroupCount.name() : __builtInGroupCount
    }
Namespace.addCategoryObject('typeBinding', u'CT_FunctionGroups', CT_FunctionGroups)


# Complex type CT_QueryTable with content type ELEMENT_ONLY
class CT_QueryTable (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_QueryTable')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}queryTableRefresh uses Python identifier queryTableRefresh
    __queryTableRefresh = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'queryTableRefresh'), 'queryTableRefresh', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_httpschemas_openxmlformats_orgspreadsheetml2006mainqueryTableRefresh', False)

    
    queryTableRefresh = property(__queryTableRefresh.value, __queryTableRefresh.set, None, u'QueryTable Refresh Information')

    
    # Attribute adjustColumnWidth uses Python identifier adjustColumnWidth
    __adjustColumnWidth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'adjustColumnWidth'), 'adjustColumnWidth', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_adjustColumnWidth', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    adjustColumnWidth = property(__adjustColumnWidth.value, __adjustColumnWidth.set, None, u'Adjust Column Width On Refresh')

    
    # Attribute intermediate uses Python identifier intermediate
    __intermediate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'intermediate'), 'intermediate', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_intermediate', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    intermediate = property(__intermediate.value, __intermediate.set, None, u'Intermediate')

    
    # Attribute autoFormatId uses Python identifier autoFormatId
    __autoFormatId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoFormatId'), 'autoFormatId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_autoFormatId', pyxb.binding.datatypes.unsignedInt)
    
    autoFormatId = property(__autoFormatId.value, __autoFormatId.set, None, u'Auto Format Id')

    
    # Attribute applyFontFormats uses Python identifier applyFontFormats
    __applyFontFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyFontFormats'), 'applyFontFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_applyFontFormats', pyxb.binding.datatypes.boolean)
    
    applyFontFormats = property(__applyFontFormats.value, __applyFontFormats.set, None, u'Apply Font Formats')

    
    # Attribute applyNumberFormats uses Python identifier applyNumberFormats
    __applyNumberFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyNumberFormats'), 'applyNumberFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_applyNumberFormats', pyxb.binding.datatypes.boolean)
    
    applyNumberFormats = property(__applyNumberFormats.value, __applyNumberFormats.set, None, u'Apply Number Formats')

    
    # Attribute applyWidthHeightFormats uses Python identifier applyWidthHeightFormats
    __applyWidthHeightFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyWidthHeightFormats'), 'applyWidthHeightFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_applyWidthHeightFormats', pyxb.binding.datatypes.boolean)
    
    applyWidthHeightFormats = property(__applyWidthHeightFormats.value, __applyWidthHeightFormats.set, None, u'Apply Width / Height Formats')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'QueryTable Name')

    
    # Attribute rowNumbers uses Python identifier rowNumbers
    __rowNumbers = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rowNumbers'), 'rowNumbers', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_rowNumbers', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    rowNumbers = property(__rowNumbers.value, __rowNumbers.set, None, u'Row Numbers')

    
    # Attribute disableRefresh uses Python identifier disableRefresh
    __disableRefresh = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'disableRefresh'), 'disableRefresh', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_disableRefresh', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    disableRefresh = property(__disableRefresh.value, __disableRefresh.set, None, u'Disable Refresh')

    
    # Attribute connectionId uses Python identifier connectionId
    __connectionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'connectionId'), 'connectionId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_connectionId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    connectionId = property(__connectionId.value, __connectionId.set, None, u'Connection Id')

    
    # Attribute headers uses Python identifier headers
    __headers = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'headers'), 'headers', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_headers', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    headers = property(__headers.value, __headers.set, None, u'First Row Column Titles')

    
    # Attribute backgroundRefresh uses Python identifier backgroundRefresh
    __backgroundRefresh = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'backgroundRefresh'), 'backgroundRefresh', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_backgroundRefresh', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    backgroundRefresh = property(__backgroundRefresh.value, __backgroundRefresh.set, None, u'Background Refresh')

    
    # Attribute firstBackgroundRefresh uses Python identifier firstBackgroundRefresh
    __firstBackgroundRefresh = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'firstBackgroundRefresh'), 'firstBackgroundRefresh', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_firstBackgroundRefresh', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    firstBackgroundRefresh = property(__firstBackgroundRefresh.value, __firstBackgroundRefresh.set, None, u'First Background Refresh')

    
    # Attribute applyBorderFormats uses Python identifier applyBorderFormats
    __applyBorderFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyBorderFormats'), 'applyBorderFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_applyBorderFormats', pyxb.binding.datatypes.boolean)
    
    applyBorderFormats = property(__applyBorderFormats.value, __applyBorderFormats.set, None, u'Apply Border Formats')

    
    # Attribute growShrinkType uses Python identifier growShrinkType
    __growShrinkType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'growShrinkType'), 'growShrinkType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_growShrinkType', ST_GrowShrinkType, unicode_default=u'insertDelete')
    
    growShrinkType = property(__growShrinkType.value, __growShrinkType.set, None, u'Grow Shrink Type')

    
    # Attribute refreshOnLoad uses Python identifier refreshOnLoad
    __refreshOnLoad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refreshOnLoad'), 'refreshOnLoad', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_refreshOnLoad', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    refreshOnLoad = property(__refreshOnLoad.value, __refreshOnLoad.set, None, u'Refresh On Load')

    
    # Attribute fillFormulas uses Python identifier fillFormulas
    __fillFormulas = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fillFormulas'), 'fillFormulas', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_fillFormulas', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    fillFormulas = property(__fillFormulas.value, __fillFormulas.set, None, u'Fill Adjacent Formulas')

    
    # Attribute applyAlignmentFormats uses Python identifier applyAlignmentFormats
    __applyAlignmentFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyAlignmentFormats'), 'applyAlignmentFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_applyAlignmentFormats', pyxb.binding.datatypes.boolean)
    
    applyAlignmentFormats = property(__applyAlignmentFormats.value, __applyAlignmentFormats.set, None, u'Apply Alignment Formats')

    
    # Attribute removeDataOnSave uses Python identifier removeDataOnSave
    __removeDataOnSave = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'removeDataOnSave'), 'removeDataOnSave', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_removeDataOnSave', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    removeDataOnSave = property(__removeDataOnSave.value, __removeDataOnSave.set, None, u'Remove Data On Save')

    
    # Attribute applyPatternFormats uses Python identifier applyPatternFormats
    __applyPatternFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyPatternFormats'), 'applyPatternFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_applyPatternFormats', pyxb.binding.datatypes.boolean)
    
    applyPatternFormats = property(__applyPatternFormats.value, __applyPatternFormats.set, None, u'Apply Pattern Formats')

    
    # Attribute disableEdit uses Python identifier disableEdit
    __disableEdit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'disableEdit'), 'disableEdit', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_disableEdit', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    disableEdit = property(__disableEdit.value, __disableEdit.set, None, u'Disable Edit')

    
    # Attribute preserveFormatting uses Python identifier preserveFormatting
    __preserveFormatting = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'preserveFormatting'), 'preserveFormatting', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTable_preserveFormatting', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    preserveFormatting = property(__preserveFormatting.value, __preserveFormatting.set, None, u'Preserve Formatting On Refresh')


    _ElementMap = {
        __extLst.name() : __extLst,
        __queryTableRefresh.name() : __queryTableRefresh
    }
    _AttributeMap = {
        __adjustColumnWidth.name() : __adjustColumnWidth,
        __intermediate.name() : __intermediate,
        __autoFormatId.name() : __autoFormatId,
        __applyFontFormats.name() : __applyFontFormats,
        __applyNumberFormats.name() : __applyNumberFormats,
        __applyWidthHeightFormats.name() : __applyWidthHeightFormats,
        __name.name() : __name,
        __rowNumbers.name() : __rowNumbers,
        __disableRefresh.name() : __disableRefresh,
        __connectionId.name() : __connectionId,
        __headers.name() : __headers,
        __backgroundRefresh.name() : __backgroundRefresh,
        __firstBackgroundRefresh.name() : __firstBackgroundRefresh,
        __applyBorderFormats.name() : __applyBorderFormats,
        __growShrinkType.name() : __growShrinkType,
        __refreshOnLoad.name() : __refreshOnLoad,
        __fillFormulas.name() : __fillFormulas,
        __applyAlignmentFormats.name() : __applyAlignmentFormats,
        __removeDataOnSave.name() : __removeDataOnSave,
        __applyPatternFormats.name() : __applyPatternFormats,
        __disableEdit.name() : __disableEdit,
        __preserveFormatting.name() : __preserveFormatting
    }
Namespace.addCategoryObject('typeBinding', u'CT_QueryTable', CT_QueryTable)


# Complex type CT_MRUColors with content type ELEMENT_ONLY
class CT_MRUColors (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MRUColors')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'color'), 'color', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MRUColors_httpschemas_openxmlformats_orgspreadsheetml2006maincolor', True)

    
    color = property(__color.value, __color.set, None, u'Color')


    _ElementMap = {
        __color.name() : __color
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_MRUColors', CT_MRUColors)


# Complex type CT_Pane with content type EMPTY
class CT_Pane (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Pane')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute activePane uses Python identifier activePane
    __activePane = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'activePane'), 'activePane', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Pane_activePane', ST_Pane, unicode_default=u'topLeft')
    
    activePane = property(__activePane.value, __activePane.set, None, u'Active Pane')

    
    # Attribute state uses Python identifier state
    __state = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'state'), 'state', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Pane_state', ST_PaneState, unicode_default=u'split')
    
    state = property(__state.value, __state.set, None, u'Split State')

    
    # Attribute xSplit uses Python identifier xSplit
    __xSplit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xSplit'), 'xSplit', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Pane_xSplit', pyxb.binding.datatypes.double, unicode_default=u'0')
    
    xSplit = property(__xSplit.value, __xSplit.set, None, u'Horizontal Split Position')

    
    # Attribute topLeftCell uses Python identifier topLeftCell
    __topLeftCell = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'topLeftCell'), 'topLeftCell', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Pane_topLeftCell', ST_CellRef)
    
    topLeftCell = property(__topLeftCell.value, __topLeftCell.set, None, u'Top Left Visible Cell')

    
    # Attribute ySplit uses Python identifier ySplit
    __ySplit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ySplit'), 'ySplit', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Pane_ySplit', pyxb.binding.datatypes.double, unicode_default=u'0')
    
    ySplit = property(__ySplit.value, __ySplit.set, None, u'Vertical Split Position')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __activePane.name() : __activePane,
        __state.name() : __state,
        __xSplit.name() : __xSplit,
        __topLeftCell.name() : __topLeftCell,
        __ySplit.name() : __ySplit
    }
Namespace.addCategoryObject('typeBinding', u'CT_Pane', CT_Pane)


# Complex type CT_CellXfs with content type ELEMENT_ONLY
class CT_CellXfs (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CellXfs')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}xf uses Python identifier xf
    __xf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'xf'), 'xf', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellXfs_httpschemas_openxmlformats_orgspreadsheetml2006mainxf', True)

    
    xf = property(__xf.value, __xf.set, None, u'Format')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellXfs_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Format Count')


    _ElementMap = {
        __xf.name() : __xf
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_CellXfs', CT_CellXfs)


# Complex type CT_ExternalSheetDataSet with content type ELEMENT_ONLY
class CT_ExternalSheetDataSet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ExternalSheetDataSet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetData uses Python identifier sheetData
    __sheetData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetData'), 'sheetData', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalSheetDataSet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetData', True)

    
    sheetData = property(__sheetData.value, __sheetData.set, None, u'External Sheet Data Set')


    _ElementMap = {
        __sheetData.name() : __sheetData
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_ExternalSheetDataSet', CT_ExternalSheetDataSet)


# Complex type CT_WebPublishObjects with content type ELEMENT_ONLY
class CT_WebPublishObjects (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_WebPublishObjects')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}webPublishObject uses Python identifier webPublishObject
    __webPublishObject = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'webPublishObject'), 'webPublishObject', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishObjects_httpschemas_openxmlformats_orgspreadsheetml2006mainwebPublishObject', True)

    
    webPublishObject = property(__webPublishObject.value, __webPublishObject.set, None, u'Web Publishing Object')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishObjects_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Count')


    _ElementMap = {
        __webPublishObject.name() : __webPublishObject
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_WebPublishObjects', CT_WebPublishObjects)


# Complex type CT_QueryTableDeletedFields with content type ELEMENT_ONLY
class CT_QueryTableDeletedFields (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_QueryTableDeletedFields')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}deletedField uses Python identifier deletedField
    __deletedField = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'deletedField'), 'deletedField', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableDeletedFields_httpschemas_openxmlformats_orgspreadsheetml2006maindeletedField', True)

    
    deletedField = property(__deletedField.value, __deletedField.set, None, u'Deleted Field')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableDeletedFields_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Deleted Fields Count')


    _ElementMap = {
        __deletedField.name() : __deletedField
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_QueryTableDeletedFields', CT_QueryTableDeletedFields)


# Complex type CT_Parameters with content type ELEMENT_ONLY
class CT_Parameters (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Parameters')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'parameter'), 'parameter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Parameters_httpschemas_openxmlformats_orgspreadsheetml2006mainparameter', True)

    
    parameter = property(__parameter.value, __parameter.set, None, u'Parameter Properties')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Parameters_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Parameter Count')


    _ElementMap = {
        __parameter.name() : __parameter
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_Parameters', CT_Parameters)


# Complex type CT_FilterColumn with content type ELEMENT_ONLY
class CT_FilterColumn (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_FilterColumn')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}customFilters uses Python identifier customFilters
    __customFilters = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'customFilters'), 'customFilters', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FilterColumn_httpschemas_openxmlformats_orgspreadsheetml2006maincustomFilters', False)

    
    customFilters = property(__customFilters.value, __customFilters.set, None, u'Custom Filters')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}top10 uses Python identifier top10
    __top10 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'top10'), 'top10', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FilterColumn_httpschemas_openxmlformats_orgspreadsheetml2006maintop10', False)

    
    top10 = property(__top10.value, __top10.set, None, u'Top 10')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dynamicFilter uses Python identifier dynamicFilter
    __dynamicFilter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dynamicFilter'), 'dynamicFilter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FilterColumn_httpschemas_openxmlformats_orgspreadsheetml2006maindynamicFilter', False)

    
    dynamicFilter = property(__dynamicFilter.value, __dynamicFilter.set, None, u'Dynamic Filter')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}colorFilter uses Python identifier colorFilter
    __colorFilter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'colorFilter'), 'colorFilter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FilterColumn_httpschemas_openxmlformats_orgspreadsheetml2006maincolorFilter', False)

    
    colorFilter = property(__colorFilter.value, __colorFilter.set, None, u'Color Filter Criteria')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}filters uses Python identifier filters
    __filters = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'filters'), 'filters', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FilterColumn_httpschemas_openxmlformats_orgspreadsheetml2006mainfilters', False)

    
    filters = property(__filters.value, __filters.set, None, u'Filter Criteria')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}iconFilter uses Python identifier iconFilter
    __iconFilter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'iconFilter'), 'iconFilter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FilterColumn_httpschemas_openxmlformats_orgspreadsheetml2006mainiconFilter', False)

    
    iconFilter = property(__iconFilter.value, __iconFilter.set, None, u'Icon Filter')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FilterColumn_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute colId uses Python identifier colId
    __colId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'colId'), 'colId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FilterColumn_colId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    colId = property(__colId.value, __colId.set, None, u'Filter Column Data')

    
    # Attribute hiddenButton uses Python identifier hiddenButton
    __hiddenButton = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hiddenButton'), 'hiddenButton', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FilterColumn_hiddenButton', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hiddenButton = property(__hiddenButton.value, __hiddenButton.set, None, u'Hidden AutoFilter Button')

    
    # Attribute showButton uses Python identifier showButton
    __showButton = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showButton'), 'showButton', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FilterColumn_showButton', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showButton = property(__showButton.value, __showButton.set, None, u'Show Filter Button')


    _ElementMap = {
        __customFilters.name() : __customFilters,
        __top10.name() : __top10,
        __dynamicFilter.name() : __dynamicFilter,
        __colorFilter.name() : __colorFilter,
        __filters.name() : __filters,
        __iconFilter.name() : __iconFilter,
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __colId.name() : __colId,
        __hiddenButton.name() : __hiddenButton,
        __showButton.name() : __showButton
    }
Namespace.addCategoryObject('typeBinding', u'CT_FilterColumn', CT_FilterColumn)


# Complex type CT_FontName with content type EMPTY
class CT_FontName (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_FontName')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FontName_val', _s.ST_Xstring, required=True)
    
    val = property(__val.value, __val.set, None, u'String Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
Namespace.addCategoryObject('typeBinding', u'CT_FontName', CT_FontName)


# Complex type CT_TableParts with content type ELEMENT_ONLY
class CT_TableParts (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_TableParts')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tablePart uses Python identifier tablePart
    __tablePart = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tablePart'), 'tablePart', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableParts_httpschemas_openxmlformats_orgspreadsheetml2006maintablePart', True)

    
    tablePart = property(__tablePart.value, __tablePart.set, None, u'Table Part')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableParts_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Count')


    _ElementMap = {
        __tablePart.name() : __tablePart
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_TableParts', CT_TableParts)


# Complex type CT_MdxSet with content type ELEMENT_ONLY
class CT_MdxSet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MdxSet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}n uses Python identifier n
    __n = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'n'), 'n', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxSet_httpschemas_openxmlformats_orgspreadsheetml2006mainn', True)

    
    n = property(__n.value, __n.set, None, u'Member Unique Name Index')

    
    # Attribute c uses Python identifier c
    __c = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'c'), 'c', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxSet_c', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    c = property(__c.value, __c.set, None, u'Sort By Member Index Count')

    
    # Attribute ns uses Python identifier ns
    __ns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ns'), 'ns', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxSet_ns', pyxb.binding.datatypes.unsignedInt, required=True)
    
    ns = property(__ns.value, __ns.set, None, u'Set Definition Index')

    
    # Attribute o uses Python identifier o
    __o = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'o'), 'o', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxSet_o', ST_MdxSetOrder, unicode_default=u'u')
    
    o = property(__o.value, __o.set, None, u'Set Sort Order')


    _ElementMap = {
        __n.name() : __n
    }
    _AttributeMap = {
        __c.name() : __c,
        __ns.name() : __ns,
        __o.name() : __o
    }
Namespace.addCategoryObject('typeBinding', u'CT_MdxSet', CT_MdxSet)


# Complex type CT_FileRecoveryPr with content type EMPTY
class CT_FileRecoveryPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_FileRecoveryPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute dataExtractLoad uses Python identifier dataExtractLoad
    __dataExtractLoad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataExtractLoad'), 'dataExtractLoad', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileRecoveryPr_dataExtractLoad', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    dataExtractLoad = property(__dataExtractLoad.value, __dataExtractLoad.set, None, u'Data Extract Load')

    
    # Attribute repairLoad uses Python identifier repairLoad
    __repairLoad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'repairLoad'), 'repairLoad', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileRecoveryPr_repairLoad', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    repairLoad = property(__repairLoad.value, __repairLoad.set, None, u'Repair Load')

    
    # Attribute crashSave uses Python identifier crashSave
    __crashSave = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'crashSave'), 'crashSave', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileRecoveryPr_crashSave', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    crashSave = property(__crashSave.value, __crashSave.set, None, u'Crash Save')

    
    # Attribute autoRecover uses Python identifier autoRecover
    __autoRecover = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoRecover'), 'autoRecover', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileRecoveryPr_autoRecover', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoRecover = property(__autoRecover.value, __autoRecover.set, None, u'Auto Recover')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __dataExtractLoad.name() : __dataExtractLoad,
        __repairLoad.name() : __repairLoad,
        __crashSave.name() : __crashSave,
        __autoRecover.name() : __autoRecover
    }
Namespace.addCategoryObject('typeBinding', u'CT_FileRecoveryPr', CT_FileRecoveryPr)


# Complex type CT_PivotField with content type ELEMENT_ONLY
class CT_PivotField (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotField')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}items uses Python identifier items
    __items = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'items'), 'items', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_httpschemas_openxmlformats_orgspreadsheetml2006mainitems', False)

    
    items = property(__items.value, __items.set, None, u'Field Items')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}autoSortScope uses Python identifier autoSortScope
    __autoSortScope = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'autoSortScope'), 'autoSortScope', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_httpschemas_openxmlformats_orgspreadsheetml2006mainautoSortScope', False)

    
    autoSortScope = property(__autoSortScope.value, __autoSortScope.set, None, u'AutoSort Scope')

    
    # Attribute multipleItemSelectionAllowed uses Python identifier multipleItemSelectionAllowed
    __multipleItemSelectionAllowed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'multipleItemSelectionAllowed'), 'multipleItemSelectionAllowed', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_multipleItemSelectionAllowed', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    multipleItemSelectionAllowed = property(__multipleItemSelectionAllowed.value, __multipleItemSelectionAllowed.set, None, u'Multiple Field Filters')

    
    # Attribute uniqueMemberProperty uses Python identifier uniqueMemberProperty
    __uniqueMemberProperty = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueMemberProperty'), 'uniqueMemberProperty', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_uniqueMemberProperty', _s.ST_Xstring)
    
    uniqueMemberProperty = property(__uniqueMemberProperty.value, __uniqueMemberProperty.set, None, u'Unique Member Property')

    
    # Attribute includeNewItemsInFilter uses Python identifier includeNewItemsInFilter
    __includeNewItemsInFilter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'includeNewItemsInFilter'), 'includeNewItemsInFilter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_includeNewItemsInFilter', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    includeNewItemsInFilter = property(__includeNewItemsInFilter.value, __includeNewItemsInFilter.set, None, u'Inclusive Manual Filter')

    
    # Attribute compact uses Python identifier compact
    __compact = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'compact'), 'compact', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_compact', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    compact = property(__compact.value, __compact.set, None, u'Compact')

    
    # Attribute subtotalTop uses Python identifier subtotalTop
    __subtotalTop = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'subtotalTop'), 'subtotalTop', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_subtotalTop', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    subtotalTop = property(__subtotalTop.value, __subtotalTop.set, None, u'Subtotals At Top')

    
    # Attribute allDrilled uses Python identifier allDrilled
    __allDrilled = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'allDrilled'), 'allDrilled', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_allDrilled', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    allDrilled = property(__allDrilled.value, __allDrilled.set, None, u'All Items Expanded')

    
    # Attribute itemPageCount uses Python identifier itemPageCount
    __itemPageCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'itemPageCount'), 'itemPageCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_itemPageCount', pyxb.binding.datatypes.unsignedInt, unicode_default=u'10')
    
    itemPageCount = property(__itemPageCount.value, __itemPageCount.set, None, u'Items Per Page Count')

    
    # Attribute countSubtotal uses Python identifier countSubtotal
    __countSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'countSubtotal'), 'countSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_countSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    countSubtotal = property(__countSubtotal.value, __countSubtotal.set, None, u'Count')

    
    # Attribute nonAutoSortDefault uses Python identifier nonAutoSortDefault
    __nonAutoSortDefault = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nonAutoSortDefault'), 'nonAutoSortDefault', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_nonAutoSortDefault', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    nonAutoSortDefault = property(__nonAutoSortDefault.value, __nonAutoSortDefault.set, None, u'Auto Sort')

    
    # Attribute dataField uses Python identifier dataField
    __dataField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataField'), 'dataField', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_dataField', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    dataField = property(__dataField.value, __dataField.set, None, u'Data Field')

    
    # Attribute insertBlankRow uses Python identifier insertBlankRow
    __insertBlankRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'insertBlankRow'), 'insertBlankRow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_insertBlankRow', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    insertBlankRow = property(__insertBlankRow.value, __insertBlankRow.set, None, u'Insert Blank Row')

    
    # Attribute outline uses Python identifier outline
    __outline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'outline'), 'outline', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_outline', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    outline = property(__outline.value, __outline.set, None, u'Outline Items')

    
    # Attribute rankBy uses Python identifier rankBy
    __rankBy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rankBy'), 'rankBy', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_rankBy', pyxb.binding.datatypes.unsignedInt)
    
    rankBy = property(__rankBy.value, __rankBy.set, None, u'Auto Show Rank By')

    
    # Attribute defaultAttributeDrillState uses Python identifier defaultAttributeDrillState
    __defaultAttributeDrillState = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultAttributeDrillState'), 'defaultAttributeDrillState', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_defaultAttributeDrillState', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    defaultAttributeDrillState = property(__defaultAttributeDrillState.value, __defaultAttributeDrillState.set, None, u'Drill State')

    
    # Attribute dragToPage uses Python identifier dragToPage
    __dragToPage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dragToPage'), 'dragToPage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_dragToPage', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    dragToPage = property(__dragToPage.value, __dragToPage.set, None, u'Drag Field to Page')

    
    # Attribute defaultSubtotal uses Python identifier defaultSubtotal
    __defaultSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultSubtotal'), 'defaultSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_defaultSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    defaultSubtotal = property(__defaultSubtotal.value, __defaultSubtotal.set, None, u'Show Default Subtotal')

    
    # Attribute sumSubtotal uses Python identifier sumSubtotal
    __sumSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sumSubtotal'), 'sumSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_sumSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    sumSubtotal = property(__sumSubtotal.value, __sumSubtotal.set, None, u'Sum Subtotal')

    
    # Attribute topAutoShow uses Python identifier topAutoShow
    __topAutoShow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'topAutoShow'), 'topAutoShow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_topAutoShow', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    topAutoShow = property(__topAutoShow.value, __topAutoShow.set, None, u'Top Auto Show')

    
    # Attribute stdDevSubtotal uses Python identifier stdDevSubtotal
    __stdDevSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stdDevSubtotal'), 'stdDevSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_stdDevSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    stdDevSubtotal = property(__stdDevSubtotal.value, __stdDevSubtotal.set, None, u'StdDev Subtotal')

    
    # Attribute avgSubtotal uses Python identifier avgSubtotal
    __avgSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'avgSubtotal'), 'avgSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_avgSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    avgSubtotal = property(__avgSubtotal.value, __avgSubtotal.set, None, u'Average')

    
    # Attribute showPropTip uses Python identifier showPropTip
    __showPropTip = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showPropTip'), 'showPropTip', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_showPropTip', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showPropTip = property(__showPropTip.value, __showPropTip.set, None, u'Show Member Property ToolTip')

    
    # Attribute maxSubtotal uses Python identifier maxSubtotal
    __maxSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxSubtotal'), 'maxSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_maxSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    maxSubtotal = property(__maxSubtotal.value, __maxSubtotal.set, None, u'Max Subtotal')

    
    # Attribute dragToData uses Python identifier dragToData
    __dragToData = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dragToData'), 'dragToData', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_dragToData', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    dragToData = property(__dragToData.value, __dragToData.set, None, u'Field Can Drag to Data')

    
    # Attribute stdDevPSubtotal uses Python identifier stdDevPSubtotal
    __stdDevPSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stdDevPSubtotal'), 'stdDevPSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_stdDevPSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    stdDevPSubtotal = property(__stdDevPSubtotal.value, __stdDevPSubtotal.set, None, u'StdDevP Subtotal')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'Field Name')

    
    # Attribute sortType uses Python identifier sortType
    __sortType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sortType'), 'sortType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_sortType', ST_FieldSortType, unicode_default=u'manual')
    
    sortType = property(__sortType.value, __sortType.set, None, u'Auto Sort Type')

    
    # Attribute showPropCell uses Python identifier showPropCell
    __showPropCell = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showPropCell'), 'showPropCell', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_showPropCell', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showPropCell = property(__showPropCell.value, __showPropCell.set, None, u'Show Member Property in Cell')

    
    # Attribute productSubtotal uses Python identifier productSubtotal
    __productSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'productSubtotal'), 'productSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_productSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    productSubtotal = property(__productSubtotal.value, __productSubtotal.set, None, u'Product Subtotal')

    
    # Attribute showAll uses Python identifier showAll
    __showAll = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showAll'), 'showAll', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_showAll', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showAll = property(__showAll.value, __showAll.set, None, u'Show All Items')

    
    # Attribute subtotalCaption uses Python identifier subtotalCaption
    __subtotalCaption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'subtotalCaption'), 'subtotalCaption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_subtotalCaption', _s.ST_Xstring)
    
    subtotalCaption = property(__subtotalCaption.value, __subtotalCaption.set, None, u'Custom Subtotal Caption')

    
    # Attribute minSubtotal uses Python identifier minSubtotal
    __minSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minSubtotal'), 'minSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_minSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    minSubtotal = property(__minSubtotal.value, __minSubtotal.set, None, u'Min Subtotal')

    
    # Attribute showDropDowns uses Python identifier showDropDowns
    __showDropDowns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showDropDowns'), 'showDropDowns', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_showDropDowns', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showDropDowns = property(__showDropDowns.value, __showDropDowns.set, None, u'Show PivotField Header Drop Downs')

    
    # Attribute insertPageBreak uses Python identifier insertPageBreak
    __insertPageBreak = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'insertPageBreak'), 'insertPageBreak', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_insertPageBreak', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    insertPageBreak = property(__insertPageBreak.value, __insertPageBreak.set, None, u'Insert Item Page Break')

    
    # Attribute serverField uses Python identifier serverField
    __serverField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'serverField'), 'serverField', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_serverField', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    serverField = property(__serverField.value, __serverField.set, None, u'Server-based Page Field')

    
    # Attribute dragOff uses Python identifier dragOff
    __dragOff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dragOff'), 'dragOff', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_dragOff', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    dragOff = property(__dragOff.value, __dragOff.set, None, u'Drag Off')

    
    # Attribute varSubtotal uses Python identifier varSubtotal
    __varSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'varSubtotal'), 'varSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_varSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    varSubtotal = property(__varSubtotal.value, __varSubtotal.set, None, u'Variance Subtotal')

    
    # Attribute axis uses Python identifier axis
    __axis = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axis'), 'axis', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_axis', ST_Axis)
    
    axis = property(__axis.value, __axis.set, None, u'Axis')

    
    # Attribute dataSourceSort uses Python identifier dataSourceSort
    __dataSourceSort = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataSourceSort'), 'dataSourceSort', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_dataSourceSort', pyxb.binding.datatypes.boolean)
    
    dataSourceSort = property(__dataSourceSort.value, __dataSourceSort.set, None, u'Data Source Sort')

    
    # Attribute dragToRow uses Python identifier dragToRow
    __dragToRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dragToRow'), 'dragToRow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_dragToRow', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    dragToRow = property(__dragToRow.value, __dragToRow.set, None, u'Drag To Row')

    
    # Attribute varPSubtotal uses Python identifier varPSubtotal
    __varPSubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'varPSubtotal'), 'varPSubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_varPSubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    varPSubtotal = property(__varPSubtotal.value, __varPSubtotal.set, None, u'VarP Subtotal')

    
    # Attribute dragToCol uses Python identifier dragToCol
    __dragToCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dragToCol'), 'dragToCol', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_dragToCol', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    dragToCol = property(__dragToCol.value, __dragToCol.set, None, u'Drag To Column')

    
    # Attribute numFmtId uses Python identifier numFmtId
    __numFmtId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numFmtId'), 'numFmtId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_numFmtId', ST_NumFmtId)
    
    numFmtId = property(__numFmtId.value, __numFmtId.set, None, u'Number Format Id')

    
    # Attribute hideNewItems uses Python identifier hideNewItems
    __hideNewItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hideNewItems'), 'hideNewItems', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_hideNewItems', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hideNewItems = property(__hideNewItems.value, __hideNewItems.set, None, u'Hide New Items')

    
    # Attribute autoShow uses Python identifier autoShow
    __autoShow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoShow'), 'autoShow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_autoShow', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    autoShow = property(__autoShow.value, __autoShow.set, None, u'Auto Show')

    
    # Attribute measureFilter uses Python identifier measureFilter
    __measureFilter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'measureFilter'), 'measureFilter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_measureFilter', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    measureFilter = property(__measureFilter.value, __measureFilter.set, None, u'Measure Filter')

    
    # Attribute countASubtotal uses Python identifier countASubtotal
    __countASubtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'countASubtotal'), 'countASubtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_countASubtotal', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    countASubtotal = property(__countASubtotal.value, __countASubtotal.set, None, u'CountA')

    
    # Attribute hiddenLevel uses Python identifier hiddenLevel
    __hiddenLevel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hiddenLevel'), 'hiddenLevel', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_hiddenLevel', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hiddenLevel = property(__hiddenLevel.value, __hiddenLevel.set, None, u'Hidden Level')

    
    # Attribute showPropAsCaption uses Python identifier showPropAsCaption
    __showPropAsCaption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showPropAsCaption'), 'showPropAsCaption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotField_showPropAsCaption', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showPropAsCaption = property(__showPropAsCaption.value, __showPropAsCaption.set, None, u'Show As Caption')


    _ElementMap = {
        __extLst.name() : __extLst,
        __items.name() : __items,
        __autoSortScope.name() : __autoSortScope
    }
    _AttributeMap = {
        __multipleItemSelectionAllowed.name() : __multipleItemSelectionAllowed,
        __uniqueMemberProperty.name() : __uniqueMemberProperty,
        __includeNewItemsInFilter.name() : __includeNewItemsInFilter,
        __compact.name() : __compact,
        __subtotalTop.name() : __subtotalTop,
        __allDrilled.name() : __allDrilled,
        __itemPageCount.name() : __itemPageCount,
        __countSubtotal.name() : __countSubtotal,
        __nonAutoSortDefault.name() : __nonAutoSortDefault,
        __dataField.name() : __dataField,
        __insertBlankRow.name() : __insertBlankRow,
        __outline.name() : __outline,
        __rankBy.name() : __rankBy,
        __defaultAttributeDrillState.name() : __defaultAttributeDrillState,
        __dragToPage.name() : __dragToPage,
        __defaultSubtotal.name() : __defaultSubtotal,
        __sumSubtotal.name() : __sumSubtotal,
        __topAutoShow.name() : __topAutoShow,
        __stdDevSubtotal.name() : __stdDevSubtotal,
        __avgSubtotal.name() : __avgSubtotal,
        __showPropTip.name() : __showPropTip,
        __maxSubtotal.name() : __maxSubtotal,
        __dragToData.name() : __dragToData,
        __stdDevPSubtotal.name() : __stdDevPSubtotal,
        __name.name() : __name,
        __sortType.name() : __sortType,
        __showPropCell.name() : __showPropCell,
        __productSubtotal.name() : __productSubtotal,
        __showAll.name() : __showAll,
        __subtotalCaption.name() : __subtotalCaption,
        __minSubtotal.name() : __minSubtotal,
        __showDropDowns.name() : __showDropDowns,
        __insertPageBreak.name() : __insertPageBreak,
        __serverField.name() : __serverField,
        __dragOff.name() : __dragOff,
        __varSubtotal.name() : __varSubtotal,
        __axis.name() : __axis,
        __dataSourceSort.name() : __dataSourceSort,
        __dragToRow.name() : __dragToRow,
        __varPSubtotal.name() : __varPSubtotal,
        __dragToCol.name() : __dragToCol,
        __numFmtId.name() : __numFmtId,
        __hideNewItems.name() : __hideNewItems,
        __autoShow.name() : __autoShow,
        __measureFilter.name() : __measureFilter,
        __countASubtotal.name() : __countASubtotal,
        __hiddenLevel.name() : __hiddenLevel,
        __showPropAsCaption.name() : __showPropAsCaption
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotField', CT_PivotField)


# Complex type CT_Users with content type ELEMENT_ONLY
class CT_Users (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Users')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}userInfo uses Python identifier userInfo
    __userInfo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'userInfo'), 'userInfo', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Users_httpschemas_openxmlformats_orgspreadsheetml2006mainuserInfo', True)

    
    userInfo = property(__userInfo.value, __userInfo.set, None, u'User Information')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Users_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Active User Count')


    _ElementMap = {
        __userInfo.name() : __userInfo
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_Users', CT_Users)


# Complex type CT_SingleXmlCell with content type ELEMENT_ONLY
class CT_SingleXmlCell (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SingleXmlCell')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SingleXmlCell_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}xmlCellPr uses Python identifier xmlCellPr
    __xmlCellPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'xmlCellPr'), 'xmlCellPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SingleXmlCell_httpschemas_openxmlformats_orgspreadsheetml2006mainxmlCellPr', False)

    
    xmlCellPr = property(__xmlCellPr.value, __xmlCellPr.set, None, u'Cell Properties')

    
    # Attribute connectionId uses Python identifier connectionId
    __connectionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'connectionId'), 'connectionId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SingleXmlCell_connectionId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    connectionId = property(__connectionId.value, __connectionId.set, None, u'Connection ID')

    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SingleXmlCell_r', ST_CellRef, required=True)
    
    r = property(__r.value, __r.set, None, u'Reference')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SingleXmlCell_id', pyxb.binding.datatypes.unsignedInt, required=True)
    
    id = property(__id.value, __id.set, None, u'Table Id')


    _ElementMap = {
        __extLst.name() : __extLst,
        __xmlCellPr.name() : __xmlCellPr
    }
    _AttributeMap = {
        __connectionId.name() : __connectionId,
        __r.name() : __r,
        __id.name() : __id
    }
Namespace.addCategoryObject('typeBinding', u'CT_SingleXmlCell', CT_SingleXmlCell)


# Complex type CT_TextFields with content type ELEMENT_ONLY
class CT_TextFields (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_TextFields')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}textField uses Python identifier textField
    __textField = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'textField'), 'textField', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextFields_httpschemas_openxmlformats_orgspreadsheetml2006maintextField', True)

    
    textField = property(__textField.value, __textField.set, None, u'Text Import Field Settings')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextFields_count', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    count = property(__count.value, __count.set, None, u'Count of Fields')


    _ElementMap = {
        __textField.name() : __textField
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_TextFields', CT_TextFields)


# Complex type CT_ExternalReference with content type EMPTY
class CT_ExternalReference (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ExternalReference')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalReference_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
Namespace.addCategoryObject('typeBinding', u'CT_ExternalReference', CT_ExternalReference)


# Complex type CT_PivotFilter with content type ELEMENT_ONLY
class CT_PivotFilter (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotFilter')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFilter_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}autoFilter uses Python identifier autoFilter
    __autoFilter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'autoFilter'), 'autoFilter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFilter_httpschemas_openxmlformats_orgspreadsheetml2006mainautoFilter', False)

    
    autoFilter = property(__autoFilter.value, __autoFilter.set, None, u'Auto Filter')

    
    # Attribute iMeasureFld uses Python identifier iMeasureFld
    __iMeasureFld = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'iMeasureFld'), 'iMeasureFld', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFilter_iMeasureFld', pyxb.binding.datatypes.unsignedInt)
    
    iMeasureFld = property(__iMeasureFld.value, __iMeasureFld.set, None, u'Measure Field Index')

    
    # Attribute stringValue1 uses Python identifier stringValue1
    __stringValue1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stringValue1'), 'stringValue1', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFilter_stringValue1', _s.ST_Xstring)
    
    stringValue1 = property(__stringValue1.value, __stringValue1.set, None, u'Label Pivot')

    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'description'), 'description', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFilter_description', _s.ST_Xstring)
    
    description = property(__description.value, __description.set, None, u'Pivot Filter Description')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFilter_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'Pivot Filter Name')

    
    # Attribute evalOrder uses Python identifier evalOrder
    __evalOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'evalOrder'), 'evalOrder', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFilter_evalOrder', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    evalOrder = property(__evalOrder.value, __evalOrder.set, None, u'Evaluation Order')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFilter_type', ST_PivotFilterType, required=True)
    
    type = property(__type.value, __type.set, None, u'Pivot Filter Type')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFilter_id', pyxb.binding.datatypes.unsignedInt, required=True)
    
    id = property(__id.value, __id.set, None, u'Pivot Filter Id')

    
    # Attribute stringValue2 uses Python identifier stringValue2
    __stringValue2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stringValue2'), 'stringValue2', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFilter_stringValue2', _s.ST_Xstring)
    
    stringValue2 = property(__stringValue2.value, __stringValue2.set, None, u'Label Pivot Filter String Value 2')

    
    # Attribute iMeasureHier uses Python identifier iMeasureHier
    __iMeasureHier = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'iMeasureHier'), 'iMeasureHier', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFilter_iMeasureHier', pyxb.binding.datatypes.unsignedInt)
    
    iMeasureHier = property(__iMeasureHier.value, __iMeasureHier.set, None, u'Measure Index')

    
    # Attribute fld uses Python identifier fld
    __fld = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fld'), 'fld', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFilter_fld', pyxb.binding.datatypes.unsignedInt, required=True)
    
    fld = property(__fld.value, __fld.set, None, u'Field Index')

    
    # Attribute mpFld uses Python identifier mpFld
    __mpFld = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mpFld'), 'mpFld', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFilter_mpFld', pyxb.binding.datatypes.unsignedInt)
    
    mpFld = property(__mpFld.value, __mpFld.set, None, u'Member Property Field Id')


    _ElementMap = {
        __extLst.name() : __extLst,
        __autoFilter.name() : __autoFilter
    }
    _AttributeMap = {
        __iMeasureFld.name() : __iMeasureFld,
        __stringValue1.name() : __stringValue1,
        __description.name() : __description,
        __name.name() : __name,
        __evalOrder.name() : __evalOrder,
        __type.name() : __type,
        __id.name() : __id,
        __stringValue2.name() : __stringValue2,
        __iMeasureHier.name() : __iMeasureHier,
        __fld.name() : __fld,
        __mpFld.name() : __mpFld
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotFilter', CT_PivotFilter)


# Complex type CT_CalculatedItem with content type ELEMENT_ONLY
class CT_CalculatedItem (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CalculatedItem')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedItem_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pivotArea uses Python identifier pivotArea
    __pivotArea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pivotArea'), 'pivotArea', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedItem_httpschemas_openxmlformats_orgspreadsheetml2006mainpivotArea', False)

    
    pivotArea = property(__pivotArea.value, __pivotArea.set, None, u'Calculated Item Location')

    
    # Attribute field uses Python identifier field
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'field'), 'field', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedItem_field', pyxb.binding.datatypes.unsignedInt)
    
    field = property(__field.value, __field.set, None, u'Field Index')

    
    # Attribute formula uses Python identifier formula
    __formula = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'formula'), 'formula', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedItem_formula', _s.ST_Xstring)
    
    formula = property(__formula.value, __formula.set, None, u'Calculated Item Formula')


    _ElementMap = {
        __extLst.name() : __extLst,
        __pivotArea.name() : __pivotArea
    }
    _AttributeMap = {
        __field.name() : __field,
        __formula.name() : __formula
    }
Namespace.addCategoryObject('typeBinding', u'CT_CalculatedItem', CT_CalculatedItem)


# Complex type CT_QueryCache with content type ELEMENT_ONLY
class CT_QueryCache (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_QueryCache')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}query uses Python identifier query
    __query = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'query'), 'query', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryCache_httpschemas_openxmlformats_orgspreadsheetml2006mainquery', True)

    
    query = property(__query.value, __query.set, None, u'Query')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryCache_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Cached Query Count')


    _ElementMap = {
        __query.name() : __query
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_QueryCache', CT_QueryCache)


# Complex type CT_Number with content type ELEMENT_ONLY
class CT_Number (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Number')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}x uses Python identifier x
    __x = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'x'), 'x', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Number_httpschemas_openxmlformats_orgspreadsheetml2006mainx', True)

    
    x = property(__x.value, __x.set, None, u'Member Property Index')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tpls uses Python identifier tpls
    __tpls = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tpls'), 'tpls', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Number_httpschemas_openxmlformats_orgspreadsheetml2006maintpls', True)

    
    tpls = property(__tpls.value, __tpls.set, None, u'OLAP Members')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Number_b', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    b = property(__b.value, __b.set, None, u'Bold')

    
    # Attribute st uses Python identifier st
    __st = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'st'), 'st', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Number_st', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    st = property(__st.value, __st.set, None, u'Strikethrough')

    
    # Attribute v uses Python identifier v
    __v = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'v'), 'v', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Number_v', pyxb.binding.datatypes.double, required=True)
    
    v = property(__v.value, __v.set, None, u'Value')

    
    # Attribute bc uses Python identifier bc
    __bc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bc'), 'bc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Number_bc', ST_UnsignedIntHex)
    
    bc = property(__bc.value, __bc.set, None, u'Background Color')

    
    # Attribute fc uses Python identifier fc
    __fc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fc'), 'fc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Number_fc', ST_UnsignedIntHex)
    
    fc = property(__fc.value, __fc.set, None, u'Foreground Color')

    
    # Attribute c uses Python identifier c
    __c = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'c'), 'c', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Number_c', _s.ST_Xstring)
    
    c = property(__c.value, __c.set, None, u'Caption')

    
    # Attribute f uses Python identifier f
    __f = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'f'), 'f', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Number_f', pyxb.binding.datatypes.boolean)
    
    f = property(__f.value, __f.set, None, u'Calculated Item')

    
    # Attribute in uses Python identifier in_
    __in = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'in'), 'in_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Number_in', pyxb.binding.datatypes.unsignedInt)
    
    in_ = property(__in.value, __in.set, None, u'Format Index')

    
    # Attribute cp uses Python identifier cp
    __cp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cp'), 'cp', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Number_cp', pyxb.binding.datatypes.unsignedInt)
    
    cp = property(__cp.value, __cp.set, None, u'Member Property Count')

    
    # Attribute i uses Python identifier i
    __i = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'i'), 'i', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Number_i', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    i = property(__i.value, __i.set, None, u'Italic')

    
    # Attribute u uses Python identifier u
    __u = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'u'), 'u', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Number_u', pyxb.binding.datatypes.boolean)
    
    u = property(__u.value, __u.set, None, u'Unused Item')

    
    # Attribute un uses Python identifier un
    __un = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'un'), 'un', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Number_un', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    un = property(__un.value, __un.set, None, u'Underline')


    _ElementMap = {
        __x.name() : __x,
        __tpls.name() : __tpls
    }
    _AttributeMap = {
        __b.name() : __b,
        __st.name() : __st,
        __v.name() : __v,
        __bc.name() : __bc,
        __fc.name() : __fc,
        __c.name() : __c,
        __f.name() : __f,
        __in.name() : __in,
        __cp.name() : __cp,
        __i.name() : __i,
        __u.name() : __u,
        __un.name() : __un
    }
Namespace.addCategoryObject('typeBinding', u'CT_Number', CT_Number)


# Complex type CT_Scenarios with content type ELEMENT_ONLY
class CT_Scenarios (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Scenarios')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}scenario uses Python identifier scenario
    __scenario = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'scenario'), 'scenario', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Scenarios_httpschemas_openxmlformats_orgspreadsheetml2006mainscenario', True)

    
    scenario = property(__scenario.value, __scenario.set, None, u'Scenario')

    
    # Attribute current uses Python identifier current
    __current = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'current'), 'current', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Scenarios_current', pyxb.binding.datatypes.unsignedInt)
    
    current = property(__current.value, __current.set, None, u'Current Scenario')

    
    # Attribute sqref uses Python identifier sqref
    __sqref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sqref'), 'sqref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Scenarios_sqref', ST_Sqref)
    
    sqref = property(__sqref.value, __sqref.set, None, u'Sequence of References')

    
    # Attribute show uses Python identifier show
    __show = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'show'), 'show', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Scenarios_show', pyxb.binding.datatypes.unsignedInt)
    
    show = property(__show.value, __show.set, None, u'Last Shown Scenario')


    _ElementMap = {
        __scenario.name() : __scenario
    }
    _AttributeMap = {
        __current.name() : __current,
        __sqref.name() : __sqref,
        __show.name() : __show
    }
Namespace.addCategoryObject('typeBinding', u'CT_Scenarios', CT_Scenarios)


# Complex type CT_RevisionDefinedName with content type ELEMENT_ONLY
class CT_RevisionDefinedName (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RevisionDefinedName')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}formula uses Python identifier formula
    __formula = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'formula'), 'formula', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_httpschemas_openxmlformats_orgspreadsheetml2006mainformula', False)

    
    formula = property(__formula.value, __formula.set, None, u'Formula')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}oldFormula uses Python identifier oldFormula
    __oldFormula = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'oldFormula'), 'oldFormula', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_httpschemas_openxmlformats_orgspreadsheetml2006mainoldFormula', False)

    
    oldFormula = property(__oldFormula.value, __oldFormula.set, None, u'Old Formula')

    
    # Attribute hidden uses Python identifier hidden
    __hidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hidden'), 'hidden', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_hidden', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hidden = property(__hidden.value, __hidden.set, None, u'Named Range Hidden')

    
    # Attribute oldHidden uses Python identifier oldHidden
    __oldHidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'oldHidden'), 'oldHidden', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_oldHidden', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    oldHidden = property(__oldHidden.value, __oldHidden.set, None, u'Old Hidden')

    
    # Attribute rId uses Python identifier rId
    __rId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rId'), 'rId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_rId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    rId = property(__rId.value, __rId.set, None, u'Revision Id')

    
    # Attribute oldCustomMenu uses Python identifier oldCustomMenu
    __oldCustomMenu = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'oldCustomMenu'), 'oldCustomMenu', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_oldCustomMenu', _s.ST_Xstring)
    
    oldCustomMenu = property(__oldCustomMenu.value, __oldCustomMenu.set, None, u'Old Custom Menu Text')

    
    # Attribute customMenu uses Python identifier customMenu
    __customMenu = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'customMenu'), 'customMenu', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_customMenu', _s.ST_Xstring)
    
    customMenu = property(__customMenu.value, __customMenu.set, None, u'New Custom Menu')

    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'description'), 'description', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_description', _s.ST_Xstring)
    
    description = property(__description.value, __description.set, None, u'Description')

    
    # Attribute ua uses Python identifier ua
    __ua = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ua'), 'ua', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_ua', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ua = property(__ua.value, __ua.set, None, u'Revision From Rejection')

    
    # Attribute oldHelp uses Python identifier oldHelp
    __oldHelp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'oldHelp'), 'oldHelp', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_oldHelp', _s.ST_Xstring)
    
    oldHelp = property(__oldHelp.value, __oldHelp.set, None, u'Old Help Topic')

    
    # Attribute statusBar uses Python identifier statusBar
    __statusBar = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'statusBar'), 'statusBar', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_statusBar', _s.ST_Xstring)
    
    statusBar = property(__statusBar.value, __statusBar.set, None, u'Status Bar')

    
    # Attribute oldStatusBar uses Python identifier oldStatusBar
    __oldStatusBar = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'oldStatusBar'), 'oldStatusBar', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_oldStatusBar', _s.ST_Xstring)
    
    oldStatusBar = property(__oldStatusBar.value, __oldStatusBar.set, None, u'Old Status Bar')

    
    # Attribute comment uses Python identifier comment
    __comment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'comment'), 'comment', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_comment', _s.ST_Xstring)
    
    comment = property(__comment.value, __comment.set, None, u'Name Comment')

    
    # Attribute oldComment uses Python identifier oldComment
    __oldComment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'oldComment'), 'oldComment', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_oldComment', _s.ST_Xstring)
    
    oldComment = property(__oldComment.value, __oldComment.set, None, u'Old Name Comment')

    
    # Attribute localSheetId uses Python identifier localSheetId
    __localSheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'localSheetId'), 'localSheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_localSheetId', pyxb.binding.datatypes.unsignedInt)
    
    localSheetId = property(__localSheetId.value, __localSheetId.set, None, u'Local Name Sheet Id')

    
    # Attribute help uses Python identifier help
    __help = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'help'), 'help', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_help', _s.ST_Xstring)
    
    help = property(__help.value, __help.set, None, u'New Help Topic')

    
    # Attribute customView uses Python identifier customView
    __customView = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'customView'), 'customView', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_customView', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    customView = property(__customView.value, __customView.set, None, u'Custom View')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Name')

    
    # Attribute function uses Python identifier function
    __function = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'function'), 'function', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_function', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    function = property(__function.value, __function.set, None, u'Function')

    
    # Attribute oldDescription uses Python identifier oldDescription
    __oldDescription = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'oldDescription'), 'oldDescription', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_oldDescription', _s.ST_Xstring)
    
    oldDescription = property(__oldDescription.value, __oldDescription.set, None, u'Old Description')

    
    # Attribute oldFunction uses Python identifier oldFunction
    __oldFunction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'oldFunction'), 'oldFunction', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_oldFunction', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    oldFunction = property(__oldFunction.value, __oldFunction.set, None, u'Old Function')

    
    # Attribute functionGroupId uses Python identifier functionGroupId
    __functionGroupId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionGroupId'), 'functionGroupId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_functionGroupId', pyxb.binding.datatypes.unsignedByte)
    
    functionGroupId = property(__functionGroupId.value, __functionGroupId.set, None, u'Function Group Id')

    
    # Attribute oldFunctionGroupId uses Python identifier oldFunctionGroupId
    __oldFunctionGroupId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'oldFunctionGroupId'), 'oldFunctionGroupId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_oldFunctionGroupId', pyxb.binding.datatypes.unsignedByte)
    
    oldFunctionGroupId = property(__oldFunctionGroupId.value, __oldFunctionGroupId.set, None, u'Old Function Group Id')

    
    # Attribute shortcutKey uses Python identifier shortcutKey
    __shortcutKey = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'shortcutKey'), 'shortcutKey', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_shortcutKey', pyxb.binding.datatypes.unsignedByte)
    
    shortcutKey = property(__shortcutKey.value, __shortcutKey.set, None, u'Shortcut Key')

    
    # Attribute ra uses Python identifier ra
    __ra = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ra'), 'ra', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_ra', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ra = property(__ra.value, __ra.set, None, u'Revision Undo Rejected')

    
    # Attribute oldShortcutKey uses Python identifier oldShortcutKey
    __oldShortcutKey = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'oldShortcutKey'), 'oldShortcutKey', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionDefinedName_oldShortcutKey', pyxb.binding.datatypes.unsignedByte)
    
    oldShortcutKey = property(__oldShortcutKey.value, __oldShortcutKey.set, None, u'Old Short Cut Key')


    _ElementMap = {
        __extLst.name() : __extLst,
        __formula.name() : __formula,
        __oldFormula.name() : __oldFormula
    }
    _AttributeMap = {
        __hidden.name() : __hidden,
        __oldHidden.name() : __oldHidden,
        __rId.name() : __rId,
        __oldCustomMenu.name() : __oldCustomMenu,
        __customMenu.name() : __customMenu,
        __description.name() : __description,
        __ua.name() : __ua,
        __oldHelp.name() : __oldHelp,
        __statusBar.name() : __statusBar,
        __oldStatusBar.name() : __oldStatusBar,
        __comment.name() : __comment,
        __oldComment.name() : __oldComment,
        __localSheetId.name() : __localSheetId,
        __help.name() : __help,
        __customView.name() : __customView,
        __name.name() : __name,
        __function.name() : __function,
        __oldDescription.name() : __oldDescription,
        __oldFunction.name() : __oldFunction,
        __functionGroupId.name() : __functionGroupId,
        __oldFunctionGroupId.name() : __oldFunctionGroupId,
        __shortcutKey.name() : __shortcutKey,
        __ra.name() : __ra,
        __oldShortcutKey.name() : __oldShortcutKey
    }
Namespace.addCategoryObject('typeBinding', u'CT_RevisionDefinedName', CT_RevisionDefinedName)


# Complex type CT_Boolean with content type ELEMENT_ONLY
class CT_Boolean (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Boolean')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}x uses Python identifier x
    __x = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'x'), 'x', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Boolean_httpschemas_openxmlformats_orgspreadsheetml2006mainx', True)

    
    x = property(__x.value, __x.set, None, u'Member Property Indexes')

    
    # Attribute c uses Python identifier c
    __c = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'c'), 'c', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Boolean_c', _s.ST_Xstring)
    
    c = property(__c.value, __c.set, None, u'Caption')

    
    # Attribute cp uses Python identifier cp
    __cp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cp'), 'cp', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Boolean_cp', pyxb.binding.datatypes.unsignedInt)
    
    cp = property(__cp.value, __cp.set, None, u'Member Property Count')

    
    # Attribute v uses Python identifier v
    __v = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'v'), 'v', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Boolean_v', pyxb.binding.datatypes.boolean, required=True)
    
    v = property(__v.value, __v.set, None, u'Value')

    
    # Attribute f uses Python identifier f
    __f = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'f'), 'f', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Boolean_f', pyxb.binding.datatypes.boolean)
    
    f = property(__f.value, __f.set, None, u'Calculated Item')

    
    # Attribute u uses Python identifier u
    __u = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'u'), 'u', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Boolean_u', pyxb.binding.datatypes.boolean)
    
    u = property(__u.value, __u.set, None, u'Unused Item')


    _ElementMap = {
        __x.name() : __x
    }
    _AttributeMap = {
        __c.name() : __c,
        __cp.name() : __cp,
        __v.name() : __v,
        __f.name() : __f,
        __u.name() : __u
    }
Namespace.addCategoryObject('typeBinding', u'CT_Boolean', CT_Boolean)


# Complex type CT_Item with content type EMPTY
class CT_Item (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Item')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute e uses Python identifier e
    __e = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'e'), 'e', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Item_e', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    e = property(__e.value, __e.set, None, u'Drill Across Attributes')

    
    # Attribute sd uses Python identifier sd
    __sd = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sd'), 'sd', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Item_sd', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    sd = property(__sd.value, __sd.set, None, u'Hide Details')

    
    # Attribute h uses Python identifier h
    __h = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'h'), 'h', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Item_h', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    h = property(__h.value, __h.set, None, u'Hidden')

    
    # Attribute s uses Python identifier s
    __s = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u's'), 's', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Item_s', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    s = property(__s.value, __s.set, None, u'Character')

    
    # Attribute c uses Python identifier c
    __c = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'c'), 'c', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Item_c', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    c = property(__c.value, __c.set, None, u'Child Items')

    
    # Attribute f uses Python identifier f
    __f = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'f'), 'f', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Item_f', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    f = property(__f.value, __f.set, None, u'Calculated Member')

    
    # Attribute n uses Python identifier n
    __n = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'n'), 'n', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Item_n', _s.ST_Xstring)
    
    n = property(__n.value, __n.set, None, u'Item User Caption')

    
    # Attribute d uses Python identifier d
    __d = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'd'), 'd', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Item_d', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    d = property(__d.value, __d.set, None, u'Expanded')

    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'x'), 'x', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Item_x', pyxb.binding.datatypes.unsignedInt)
    
    x = property(__x.value, __x.set, None, u'Item Index')

    
    # Attribute m uses Python identifier m
    __m = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'm'), 'm', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Item_m', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    m = property(__m.value, __m.set, None, u'Missing')

    
    # Attribute t uses Python identifier t
    __t = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u't'), 't', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Item_t', ST_ItemType, unicode_default=u'data')
    
    t = property(__t.value, __t.set, None, u'Item Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __e.name() : __e,
        __sd.name() : __sd,
        __h.name() : __h,
        __s.name() : __s,
        __c.name() : __c,
        __f.name() : __f,
        __n.name() : __n,
        __d.name() : __d,
        __x.name() : __x,
        __m.name() : __m,
        __t.name() : __t
    }
Namespace.addCategoryObject('typeBinding', u'CT_Item', CT_Item)


# Complex type CT_Sst with content type ELEMENT_ONLY
class CT_Sst (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Sst')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Sst_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}si uses Python identifier si
    __si = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'si'), 'si', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Sst_httpschemas_openxmlformats_orgspreadsheetml2006mainsi', True)

    
    si = property(__si.value, __si.set, None, u'String Item')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Sst_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'String Count')

    
    # Attribute uniqueCount uses Python identifier uniqueCount
    __uniqueCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueCount'), 'uniqueCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Sst_uniqueCount', pyxb.binding.datatypes.unsignedInt)
    
    uniqueCount = property(__uniqueCount.value, __uniqueCount.set, None, u'Unique String Count')


    _ElementMap = {
        __extLst.name() : __extLst,
        __si.name() : __si
    }
    _AttributeMap = {
        __count.name() : __count,
        __uniqueCount.name() : __uniqueCount
    }
Namespace.addCategoryObject('typeBinding', u'CT_Sst', CT_Sst)


# Complex type CT_ColHierarchiesUsage with content type ELEMENT_ONLY
class CT_ColHierarchiesUsage (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ColHierarchiesUsage')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}colHierarchyUsage uses Python identifier colHierarchyUsage
    __colHierarchyUsage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'colHierarchyUsage'), 'colHierarchyUsage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ColHierarchiesUsage_httpschemas_openxmlformats_orgspreadsheetml2006maincolHierarchyUsage', True)

    
    colHierarchyUsage = property(__colHierarchyUsage.value, __colHierarchyUsage.set, None, u'Column OLAP Hierarchies')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ColHierarchiesUsage_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Items Count')


    _ElementMap = {
        __colHierarchyUsage.name() : __colHierarchyUsage
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_ColHierarchiesUsage', CT_ColHierarchiesUsage)


# Complex type CT_Font with content type ELEMENT_ONLY
class CT_Font (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Font')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}vertAlign uses Python identifier vertAlign
    __vertAlign = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'vertAlign'), 'vertAlign', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Font_httpschemas_openxmlformats_orgspreadsheetml2006mainvertAlign', True)

    
    vertAlign = property(__vertAlign.value, __vertAlign.set, None, u'Text Vertical Alignment')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}i uses Python identifier i
    __i = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'i'), 'i', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Font_httpschemas_openxmlformats_orgspreadsheetml2006maini', True)

    
    i = property(__i.value, __i.set, None, u'Italic')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'color'), 'color', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Font_httpschemas_openxmlformats_orgspreadsheetml2006maincolor', True)

    
    color = property(__color.value, __color.set, None, u'Text Color')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}strike uses Python identifier strike
    __strike = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'strike'), 'strike', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Font_httpschemas_openxmlformats_orgspreadsheetml2006mainstrike', True)

    
    strike = property(__strike.value, __strike.set, None, u'Strike Through')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}charset uses Python identifier charset
    __charset = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'charset'), 'charset', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Font_httpschemas_openxmlformats_orgspreadsheetml2006maincharset', True)

    
    charset = property(__charset.value, __charset.set, None, u'Character Set')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}name uses Python identifier name
    __name = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Font_httpschemas_openxmlformats_orgspreadsheetml2006mainname', True)

    
    name = property(__name.value, __name.set, None, u'Font Name')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sz uses Python identifier sz
    __sz = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sz'), 'sz', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Font_httpschemas_openxmlformats_orgspreadsheetml2006mainsz', True)

    
    sz = property(__sz.value, __sz.set, None, u'Font Size')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}outline uses Python identifier outline
    __outline = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'outline'), 'outline', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Font_httpschemas_openxmlformats_orgspreadsheetml2006mainoutline', True)

    
    outline = property(__outline.value, __outline.set, None, u'Outline')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extend uses Python identifier extend_
    __extend = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extend'), 'extend_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Font_httpschemas_openxmlformats_orgspreadsheetml2006mainextend', True)

    
    extend_ = property(__extend.value, __extend.set, None, u'Extend')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}u uses Python identifier u
    __u = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'u'), 'u', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Font_httpschemas_openxmlformats_orgspreadsheetml2006mainu', True)

    
    u = property(__u.value, __u.set, None, u'Underline')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}shadow uses Python identifier shadow
    __shadow = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'shadow'), 'shadow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Font_httpschemas_openxmlformats_orgspreadsheetml2006mainshadow', True)

    
    shadow = property(__shadow.value, __shadow.set, None, u'Shadow')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}family uses Python identifier family
    __family = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'family'), 'family', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Font_httpschemas_openxmlformats_orgspreadsheetml2006mainfamily', True)

    
    family = property(__family.value, __family.set, None, u'Font Family')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}condense uses Python identifier condense
    __condense = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'condense'), 'condense', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Font_httpschemas_openxmlformats_orgspreadsheetml2006maincondense', True)

    
    condense = property(__condense.value, __condense.set, None, u'Condense')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'b'), 'b', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Font_httpschemas_openxmlformats_orgspreadsheetml2006mainb', True)

    
    b = property(__b.value, __b.set, None, u'Bold')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}scheme uses Python identifier scheme
    __scheme = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'scheme'), 'scheme', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Font_httpschemas_openxmlformats_orgspreadsheetml2006mainscheme', True)

    
    scheme = property(__scheme.value, __scheme.set, None, u'Scheme')


    _ElementMap = {
        __vertAlign.name() : __vertAlign,
        __i.name() : __i,
        __color.name() : __color,
        __strike.name() : __strike,
        __charset.name() : __charset,
        __name.name() : __name,
        __sz.name() : __sz,
        __outline.name() : __outline,
        __extend.name() : __extend,
        __u.name() : __u,
        __shadow.name() : __shadow,
        __family.name() : __family,
        __condense.name() : __condense,
        __b.name() : __b,
        __scheme.name() : __scheme
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Font', CT_Font)


# Complex type CT_Chartsheet with content type ELEMENT_ONLY
class CT_Chartsheet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Chartsheet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetViews uses Python identifier sheetViews
    __sheetViews = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetViews'), 'sheetViews', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Chartsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetViews', False)

    
    sheetViews = property(__sheetViews.value, __sheetViews.set, None, u'Chart Sheet Views')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}legacyDrawing uses Python identifier legacyDrawing
    __legacyDrawing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawing'), 'legacyDrawing', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Chartsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainlegacyDrawing', False)

    
    legacyDrawing = property(__legacyDrawing.value, __legacyDrawing.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetProtection uses Python identifier sheetProtection
    __sheetProtection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetProtection'), 'sheetProtection', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Chartsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetProtection', False)

    
    sheetProtection = property(__sheetProtection.value, __sheetProtection.set, None, u'Chart Sheet Protection')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}legacyDrawingHF uses Python identifier legacyDrawingHF
    __legacyDrawingHF = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawingHF'), 'legacyDrawingHF', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Chartsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainlegacyDrawingHF', False)

    
    legacyDrawingHF = property(__legacyDrawingHF.value, __legacyDrawingHF.set, None, u'Legacy Drawing Reference in  Header Footer')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}customSheetViews uses Python identifier customSheetViews
    __customSheetViews = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'customSheetViews'), 'customSheetViews', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Chartsheet_httpschemas_openxmlformats_orgspreadsheetml2006maincustomSheetViews', False)

    
    customSheetViews = property(__customSheetViews.value, __customSheetViews.set, None, u'Custom Chart Sheet Views')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}drawing uses Python identifier drawing
    __drawing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'drawing'), 'drawing', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Chartsheet_httpschemas_openxmlformats_orgspreadsheetml2006maindrawing', False)

    
    drawing = property(__drawing.value, __drawing.set, None, u'Drawing')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageMargins uses Python identifier pageMargins
    __pageMargins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageMargins'), 'pageMargins', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Chartsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainpageMargins', False)

    
    pageMargins = property(__pageMargins.value, __pageMargins.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}picture uses Python identifier picture
    __picture = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'picture'), 'picture', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Chartsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainpicture', False)

    
    picture = property(__picture.value, __picture.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}headerFooter uses Python identifier headerFooter
    __headerFooter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'headerFooter'), 'headerFooter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Chartsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainheaderFooter', False)

    
    headerFooter = property(__headerFooter.value, __headerFooter.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageSetup uses Python identifier pageSetup
    __pageSetup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageSetup'), 'pageSetup', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Chartsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainpageSetup', False)

    
    pageSetup = property(__pageSetup.value, __pageSetup.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetPr uses Python identifier sheetPr
    __sheetPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetPr'), 'sheetPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Chartsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetPr', False)

    
    sheetPr = property(__sheetPr.value, __sheetPr.set, None, u'Chart Sheet Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}webPublishItems uses Python identifier webPublishItems
    __webPublishItems = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'webPublishItems'), 'webPublishItems', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Chartsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainwebPublishItems', False)

    
    webPublishItems = property(__webPublishItems.value, __webPublishItems.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}drawingHF uses Python identifier drawingHF
    __drawingHF = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'drawingHF'), 'drawingHF', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Chartsheet_httpschemas_openxmlformats_orgspreadsheetml2006maindrawingHF', False)

    
    drawingHF = property(__drawingHF.value, __drawingHF.set, None, u'Drawing Reference in Header Footer')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Chartsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)


    _ElementMap = {
        __sheetViews.name() : __sheetViews,
        __legacyDrawing.name() : __legacyDrawing,
        __sheetProtection.name() : __sheetProtection,
        __legacyDrawingHF.name() : __legacyDrawingHF,
        __customSheetViews.name() : __customSheetViews,
        __drawing.name() : __drawing,
        __pageMargins.name() : __pageMargins,
        __picture.name() : __picture,
        __headerFooter.name() : __headerFooter,
        __pageSetup.name() : __pageSetup,
        __sheetPr.name() : __sheetPr,
        __webPublishItems.name() : __webPublishItems,
        __drawingHF.name() : __drawingHF,
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Chartsheet', CT_Chartsheet)


# Complex type CT_XmlPr with content type ELEMENT_ONLY
class CT_XmlPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_XmlPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_XmlPr_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Attribute xpath uses Python identifier xpath
    __xpath = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xpath'), 'xpath', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_XmlPr_xpath', _s.ST_Xstring, required=True)
    
    xpath = property(__xpath.value, __xpath.set, None, u'XPath')

    
    # Attribute xmlDataType uses Python identifier xmlDataType
    __xmlDataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xmlDataType'), 'xmlDataType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_XmlPr_xmlDataType', ST_XmlDataType, required=True)
    
    xmlDataType = property(__xmlDataType.value, __xmlDataType.set, None, u'XML Data Type')

    
    # Attribute mapId uses Python identifier mapId
    __mapId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mapId'), 'mapId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_XmlPr_mapId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    mapId = property(__mapId.value, __mapId.set, None, u'XML Map Id')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __xpath.name() : __xpath,
        __xmlDataType.name() : __xmlDataType,
        __mapId.name() : __mapId
    }
Namespace.addCategoryObject('typeBinding', u'CT_XmlPr', CT_XmlPr)


# Complex type CT_PageSetUpPr with content type EMPTY
class CT_PageSetUpPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PageSetUpPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute fitToPage uses Python identifier fitToPage
    __fitToPage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fitToPage'), 'fitToPage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetUpPr_fitToPage', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    fitToPage = property(__fitToPage.value, __fitToPage.set, None, u'Fit To Page')

    
    # Attribute autoPageBreaks uses Python identifier autoPageBreaks
    __autoPageBreaks = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoPageBreaks'), 'autoPageBreaks', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageSetUpPr_autoPageBreaks', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoPageBreaks = property(__autoPageBreaks.value, __autoPageBreaks.set, None, u'Show Auto Page Breaks')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __fitToPage.name() : __fitToPage,
        __autoPageBreaks.name() : __autoPageBreaks
    }
Namespace.addCategoryObject('typeBinding', u'CT_PageSetUpPr', CT_PageSetUpPr)


# Complex type CT_Cols with content type ELEMENT_ONLY
class CT_Cols (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Cols')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}col uses Python identifier col
    __col = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'col'), 'col', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Cols_httpschemas_openxmlformats_orgspreadsheetml2006maincol', True)

    
    col = property(__col.value, __col.set, None, u'Column Width & Formatting')


    _ElementMap = {
        __col.name() : __col
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Cols', CT_Cols)


# Complex type CT_FontSize with content type EMPTY
class CT_FontSize (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_FontSize')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FontSize_val', pyxb.binding.datatypes.double, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
Namespace.addCategoryObject('typeBinding', u'CT_FontSize', CT_FontSize)


# Complex type CT_Stylesheet with content type ELEMENT_ONLY
class CT_Stylesheet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Stylesheet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Stylesheet_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}numFmts uses Python identifier numFmts
    __numFmts = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'numFmts'), 'numFmts', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Stylesheet_httpschemas_openxmlformats_orgspreadsheetml2006mainnumFmts', False)

    
    numFmts = property(__numFmts.value, __numFmts.set, None, u'Number Formats')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cellStyles uses Python identifier cellStyles
    __cellStyles = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cellStyles'), 'cellStyles', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Stylesheet_httpschemas_openxmlformats_orgspreadsheetml2006maincellStyles', False)

    
    cellStyles = property(__cellStyles.value, __cellStyles.set, None, u'Cell Styles')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}fonts uses Python identifier fonts
    __fonts = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fonts'), 'fonts', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Stylesheet_httpschemas_openxmlformats_orgspreadsheetml2006mainfonts', False)

    
    fonts = property(__fonts.value, __fonts.set, None, u'Fonts')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}colors uses Python identifier colors
    __colors = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'colors'), 'colors', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Stylesheet_httpschemas_openxmlformats_orgspreadsheetml2006maincolors', False)

    
    colors = property(__colors.value, __colors.set, None, u'Colors')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dxfs uses Python identifier dxfs
    __dxfs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dxfs'), 'dxfs', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Stylesheet_httpschemas_openxmlformats_orgspreadsheetml2006maindxfs', False)

    
    dxfs = property(__dxfs.value, __dxfs.set, None, u'Formats')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cellXfs uses Python identifier cellXfs
    __cellXfs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cellXfs'), 'cellXfs', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Stylesheet_httpschemas_openxmlformats_orgspreadsheetml2006maincellXfs', False)

    
    cellXfs = property(__cellXfs.value, __cellXfs.set, None, u'Cell Formats')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tableStyles uses Python identifier tableStyles
    __tableStyles = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tableStyles'), 'tableStyles', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Stylesheet_httpschemas_openxmlformats_orgspreadsheetml2006maintableStyles', False)

    
    tableStyles = property(__tableStyles.value, __tableStyles.set, None, u'Table Styles')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}borders uses Python identifier borders
    __borders = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'borders'), 'borders', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Stylesheet_httpschemas_openxmlformats_orgspreadsheetml2006mainborders', False)

    
    borders = property(__borders.value, __borders.set, None, u'Borders')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}fills uses Python identifier fills
    __fills = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fills'), 'fills', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Stylesheet_httpschemas_openxmlformats_orgspreadsheetml2006mainfills', False)

    
    fills = property(__fills.value, __fills.set, None, u'Fills')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cellStyleXfs uses Python identifier cellStyleXfs
    __cellStyleXfs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cellStyleXfs'), 'cellStyleXfs', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Stylesheet_httpschemas_openxmlformats_orgspreadsheetml2006maincellStyleXfs', False)

    
    cellStyleXfs = property(__cellStyleXfs.value, __cellStyleXfs.set, None, u'Formatting Records')


    _ElementMap = {
        __extLst.name() : __extLst,
        __numFmts.name() : __numFmts,
        __cellStyles.name() : __cellStyles,
        __fonts.name() : __fonts,
        __colors.name() : __colors,
        __dxfs.name() : __dxfs,
        __cellXfs.name() : __cellXfs,
        __tableStyles.name() : __tableStyles,
        __borders.name() : __borders,
        __fills.name() : __fills,
        __cellStyleXfs.name() : __cellStyleXfs
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Stylesheet', CT_Stylesheet)


# Complex type CT_ExternalBook with content type ELEMENT_ONLY
class CT_ExternalBook (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ExternalBook')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetDataSet uses Python identifier sheetDataSet
    __sheetDataSet = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetDataSet'), 'sheetDataSet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalBook_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetDataSet', False)

    
    sheetDataSet = property(__sheetDataSet.value, __sheetDataSet.set, None, u'Cached Worksheet Data')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetNames uses Python identifier sheetNames
    __sheetNames = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetNames'), 'sheetNames', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalBook_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetNames', False)

    
    sheetNames = property(__sheetNames.value, __sheetNames.set, None, u'Supporting Workbook Sheet Names')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}definedNames uses Python identifier definedNames
    __definedNames = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'definedNames'), 'definedNames', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalBook_httpschemas_openxmlformats_orgspreadsheetml2006maindefinedNames', False)

    
    definedNames = property(__definedNames.value, __definedNames.set, None, u'Named Links')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalBook_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        __sheetDataSet.name() : __sheetDataSet,
        __sheetNames.name() : __sheetNames,
        __definedNames.name() : __definedNames
    }
    _AttributeMap = {
        __id.name() : __id
    }
Namespace.addCategoryObject('typeBinding', u'CT_ExternalBook', CT_ExternalBook)


# Complex type CT_SheetProtection with content type EMPTY
class CT_SheetProtection (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SheetProtection')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute autoFilter uses Python identifier autoFilter
    __autoFilter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoFilter'), 'autoFilter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_autoFilter', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoFilter = property(__autoFilter.value, __autoFilter.set, None, u'AutoFilter Locked')

    
    # Attribute pivotTables uses Python identifier pivotTables
    __pivotTables = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pivotTables'), 'pivotTables', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_pivotTables', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    pivotTables = property(__pivotTables.value, __pivotTables.set, None, u'Pivot Tables Locked')

    
    # Attribute deleteRows uses Python identifier deleteRows
    __deleteRows = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'deleteRows'), 'deleteRows', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_deleteRows', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    deleteRows = property(__deleteRows.value, __deleteRows.set, None, u'Delete Rows Locked')

    
    # Attribute formatRows uses Python identifier formatRows
    __formatRows = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'formatRows'), 'formatRows', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_formatRows', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    formatRows = property(__formatRows.value, __formatRows.set, None, u'Format Rows Locked')

    
    # Attribute sheet uses Python identifier sheet
    __sheet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheet'), 'sheet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_sheet', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    sheet = property(__sheet.value, __sheet.set, None, u'Sheet Locked')

    
    # Attribute selectLockedCells uses Python identifier selectLockedCells
    __selectLockedCells = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'selectLockedCells'), 'selectLockedCells', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_selectLockedCells', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    selectLockedCells = property(__selectLockedCells.value, __selectLockedCells.set, None, u'Select Locked Cells Locked')

    
    # Attribute insertColumns uses Python identifier insertColumns
    __insertColumns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'insertColumns'), 'insertColumns', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_insertColumns', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    insertColumns = property(__insertColumns.value, __insertColumns.set, None, u'Insert Columns Locked')

    
    # Attribute insertRows uses Python identifier insertRows
    __insertRows = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'insertRows'), 'insertRows', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_insertRows', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    insertRows = property(__insertRows.value, __insertRows.set, None, u'Insert Rows Locked')

    
    # Attribute objects uses Python identifier objects
    __objects = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'objects'), 'objects', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_objects', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    objects = property(__objects.value, __objects.set, None, u'Objects Locked')

    
    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_algorithmName', _s.ST_Xstring)
    
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, u'Cryptographic Algorithm Name')

    
    # Attribute sort uses Python identifier sort
    __sort = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sort'), 'sort', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_sort', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    sort = property(__sort.value, __sort.set, None, u'Sort Locked')

    
    # Attribute scenarios uses Python identifier scenarios
    __scenarios = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'scenarios'), 'scenarios', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_scenarios', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    scenarios = property(__scenarios.value, __scenarios.set, None, u'Scenarios Locked')

    
    # Attribute hashValue uses Python identifier hashValue
    __hashValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hashValue'), 'hashValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_hashValue', pyxb.binding.datatypes.base64Binary)
    
    hashValue = property(__hashValue.value, __hashValue.set, None, u'Password Hash Value')

    
    # Attribute selectUnlockedCells uses Python identifier selectUnlockedCells
    __selectUnlockedCells = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'selectUnlockedCells'), 'selectUnlockedCells', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_selectUnlockedCells', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    selectUnlockedCells = property(__selectUnlockedCells.value, __selectUnlockedCells.set, None, u'Select Unlocked Cells Locked')

    
    # Attribute insertHyperlinks uses Python identifier insertHyperlinks
    __insertHyperlinks = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'insertHyperlinks'), 'insertHyperlinks', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_insertHyperlinks', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    insertHyperlinks = property(__insertHyperlinks.value, __insertHyperlinks.set, None, u'Insert Hyperlinks Locked')

    
    # Attribute password uses Python identifier password
    __password = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'password'), 'password', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_password', ST_UnsignedShortHex)
    
    password = property(__password.value, __password.set, None, u'Legacy Password')

    
    # Attribute formatCells uses Python identifier formatCells
    __formatCells = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'formatCells'), 'formatCells', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_formatCells', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    formatCells = property(__formatCells.value, __formatCells.set, None, u'Format Cells Locked')

    
    # Attribute spinCount uses Python identifier spinCount
    __spinCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spinCount'), 'spinCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_spinCount', pyxb.binding.datatypes.unsignedInt)
    
    spinCount = property(__spinCount.value, __spinCount.set, None, u'Iterations to Run Hashing Algorithm')

    
    # Attribute saltValue uses Python identifier saltValue
    __saltValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'saltValue'), 'saltValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_saltValue', pyxb.binding.datatypes.base64Binary)
    
    saltValue = property(__saltValue.value, __saltValue.set, None, u'Salt Value for Password Verifier')

    
    # Attribute deleteColumns uses Python identifier deleteColumns
    __deleteColumns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'deleteColumns'), 'deleteColumns', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_deleteColumns', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    deleteColumns = property(__deleteColumns.value, __deleteColumns.set, None, u'Delete Columns Locked')

    
    # Attribute formatColumns uses Python identifier formatColumns
    __formatColumns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'formatColumns'), 'formatColumns', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetProtection_formatColumns', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    formatColumns = property(__formatColumns.value, __formatColumns.set, None, u'Format Columns Locked')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __autoFilter.name() : __autoFilter,
        __pivotTables.name() : __pivotTables,
        __deleteRows.name() : __deleteRows,
        __formatRows.name() : __formatRows,
        __sheet.name() : __sheet,
        __selectLockedCells.name() : __selectLockedCells,
        __insertColumns.name() : __insertColumns,
        __insertRows.name() : __insertRows,
        __objects.name() : __objects,
        __algorithmName.name() : __algorithmName,
        __sort.name() : __sort,
        __scenarios.name() : __scenarios,
        __hashValue.name() : __hashValue,
        __selectUnlockedCells.name() : __selectUnlockedCells,
        __insertHyperlinks.name() : __insertHyperlinks,
        __password.name() : __password,
        __formatCells.name() : __formatCells,
        __spinCount.name() : __spinCount,
        __saltValue.name() : __saltValue,
        __deleteColumns.name() : __deleteColumns,
        __formatColumns.name() : __formatColumns
    }
Namespace.addCategoryObject('typeBinding', u'CT_SheetProtection', CT_SheetProtection)


# Complex type CT_OleItems with content type ELEMENT_ONLY
class CT_OleItems (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_OleItems')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}oleItem uses Python identifier oleItem
    __oleItem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'oleItem'), 'oleItem', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleItems_httpschemas_openxmlformats_orgspreadsheetml2006mainoleItem', True)

    
    oleItem = property(__oleItem.value, __oleItem.set, None, u'Object Link Item')


    _ElementMap = {
        __oleItem.name() : __oleItem
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_OleItems', CT_OleItems)


# Complex type CT_MetadataTypes with content type ELEMENT_ONLY
class CT_MetadataTypes (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MetadataTypes')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}metadataType uses Python identifier metadataType
    __metadataType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'metadataType'), 'metadataType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataTypes_httpschemas_openxmlformats_orgspreadsheetml2006mainmetadataType', True)

    
    metadataType = property(__metadataType.value, __metadataType.set, None, u'Metadata Type Information')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataTypes_count', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    count = property(__count.value, __count.set, None, u'Metadata Type Count')


    _ElementMap = {
        __metadataType.name() : __metadataType
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_MetadataTypes', CT_MetadataTypes)


# Complex type CT_PageFields with content type ELEMENT_ONLY
class CT_PageFields (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PageFields')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageField uses Python identifier pageField
    __pageField = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageField'), 'pageField', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageFields_httpschemas_openxmlformats_orgspreadsheetml2006mainpageField', True)

    
    pageField = property(__pageField.value, __pageField.set, None, u'Page Field')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageFields_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Page Item Count')


    _ElementMap = {
        __pageField.name() : __pageField
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_PageFields', CT_PageFields)


# Complex type CT_ChartsheetView with content type ELEMENT_ONLY
class CT_ChartsheetView (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ChartsheetView')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute zoomScale uses Python identifier zoomScale
    __zoomScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'zoomScale'), 'zoomScale', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetView_zoomScale', pyxb.binding.datatypes.unsignedInt, unicode_default=u'100')
    
    zoomScale = property(__zoomScale.value, __zoomScale.set, None, u'Window Zoom Scale')

    
    # Attribute tabSelected uses Python identifier tabSelected
    __tabSelected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tabSelected'), 'tabSelected', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetView_tabSelected', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    tabSelected = property(__tabSelected.value, __tabSelected.set, None, u'Sheet Tab Selected')

    
    # Attribute zoomToFit uses Python identifier zoomToFit
    __zoomToFit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'zoomToFit'), 'zoomToFit', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetView_zoomToFit', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    zoomToFit = property(__zoomToFit.value, __zoomToFit.set, None, u'Zoom To Fit')

    
    # Attribute workbookViewId uses Python identifier workbookViewId
    __workbookViewId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'workbookViewId'), 'workbookViewId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetView_workbookViewId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    workbookViewId = property(__workbookViewId.value, __workbookViewId.set, None, u'Workbook View Id')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __zoomScale.name() : __zoomScale,
        __tabSelected.name() : __tabSelected,
        __zoomToFit.name() : __zoomToFit,
        __workbookViewId.name() : __workbookViewId
    }
Namespace.addCategoryObject('typeBinding', u'CT_ChartsheetView', CT_ChartsheetView)


# Complex type CT_CalcPr with content type EMPTY
class CT_CalcPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CalcPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute iterate uses Python identifier iterate
    __iterate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'iterate'), 'iterate', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcPr_iterate', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    iterate = property(__iterate.value, __iterate.set, None, u'Calculation Iteration')

    
    # Attribute forceFullCalc uses Python identifier forceFullCalc
    __forceFullCalc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'forceFullCalc'), 'forceFullCalc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcPr_forceFullCalc', pyxb.binding.datatypes.boolean)
    
    forceFullCalc = property(__forceFullCalc.value, __forceFullCalc.set, None, u'Force Full Calculation')

    
    # Attribute concurrentCalc uses Python identifier concurrentCalc
    __concurrentCalc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'concurrentCalc'), 'concurrentCalc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcPr_concurrentCalc', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    concurrentCalc = property(__concurrentCalc.value, __concurrentCalc.set, None, u'Concurrent Calculations')

    
    # Attribute iterateCount uses Python identifier iterateCount
    __iterateCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'iterateCount'), 'iterateCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcPr_iterateCount', pyxb.binding.datatypes.unsignedInt, unicode_default=u'100')
    
    iterateCount = property(__iterateCount.value, __iterateCount.set, None, u'Iteration Count')

    
    # Attribute calcId uses Python identifier calcId
    __calcId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'calcId'), 'calcId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcPr_calcId', pyxb.binding.datatypes.unsignedInt)
    
    calcId = property(__calcId.value, __calcId.set, None, u'Calculation Id')

    
    # Attribute concurrentManualCount uses Python identifier concurrentManualCount
    __concurrentManualCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'concurrentManualCount'), 'concurrentManualCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcPr_concurrentManualCount', pyxb.binding.datatypes.unsignedInt)
    
    concurrentManualCount = property(__concurrentManualCount.value, __concurrentManualCount.set, None, u'Concurrent Thread Manual Count')

    
    # Attribute iterateDelta uses Python identifier iterateDelta
    __iterateDelta = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'iterateDelta'), 'iterateDelta', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcPr_iterateDelta', pyxb.binding.datatypes.double, unicode_default=u'0.001')
    
    iterateDelta = property(__iterateDelta.value, __iterateDelta.set, None, u'Iterative Calculation Delta')

    
    # Attribute calcMode uses Python identifier calcMode
    __calcMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'calcMode'), 'calcMode', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcPr_calcMode', ST_CalcMode, unicode_default=u'auto')
    
    calcMode = property(__calcMode.value, __calcMode.set, None, u'Calculation Mode')

    
    # Attribute fullPrecision uses Python identifier fullPrecision
    __fullPrecision = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fullPrecision'), 'fullPrecision', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcPr_fullPrecision', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    fullPrecision = property(__fullPrecision.value, __fullPrecision.set, None, u'Full Precision Calculation')

    
    # Attribute fullCalcOnLoad uses Python identifier fullCalcOnLoad
    __fullCalcOnLoad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fullCalcOnLoad'), 'fullCalcOnLoad', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcPr_fullCalcOnLoad', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    fullCalcOnLoad = property(__fullCalcOnLoad.value, __fullCalcOnLoad.set, None, u'Full Calculation On Load')

    
    # Attribute calcCompleted uses Python identifier calcCompleted
    __calcCompleted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'calcCompleted'), 'calcCompleted', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcPr_calcCompleted', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    calcCompleted = property(__calcCompleted.value, __calcCompleted.set, None, u'Calc Completed')

    
    # Attribute refMode uses Python identifier refMode
    __refMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refMode'), 'refMode', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcPr_refMode', ST_RefMode, unicode_default=u'A1')
    
    refMode = property(__refMode.value, __refMode.set, None, u'Reference Mode')

    
    # Attribute calcOnSave uses Python identifier calcOnSave
    __calcOnSave = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'calcOnSave'), 'calcOnSave', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcPr_calcOnSave', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    calcOnSave = property(__calcOnSave.value, __calcOnSave.set, None, u'Calculate On Save')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __iterate.name() : __iterate,
        __forceFullCalc.name() : __forceFullCalc,
        __concurrentCalc.name() : __concurrentCalc,
        __iterateCount.name() : __iterateCount,
        __calcId.name() : __calcId,
        __concurrentManualCount.name() : __concurrentManualCount,
        __iterateDelta.name() : __iterateDelta,
        __calcMode.name() : __calcMode,
        __fullPrecision.name() : __fullPrecision,
        __fullCalcOnLoad.name() : __fullCalcOnLoad,
        __calcCompleted.name() : __calcCompleted,
        __refMode.name() : __refMode,
        __calcOnSave.name() : __calcOnSave
    }
Namespace.addCategoryObject('typeBinding', u'CT_CalcPr', CT_CalcPr)


# Complex type CT_Fill with content type ELEMENT_ONLY
class CT_Fill (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Fill')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}patternFill uses Python identifier patternFill
    __patternFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'patternFill'), 'patternFill', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Fill_httpschemas_openxmlformats_orgspreadsheetml2006mainpatternFill', False)

    
    patternFill = property(__patternFill.value, __patternFill.set, None, u'Pattern')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}gradientFill uses Python identifier gradientFill
    __gradientFill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'gradientFill'), 'gradientFill', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Fill_httpschemas_openxmlformats_orgspreadsheetml2006maingradientFill', False)

    
    gradientFill = property(__gradientFill.value, __gradientFill.set, None, u'Gradient')


    _ElementMap = {
        __patternFill.name() : __patternFill,
        __gradientFill.name() : __gradientFill
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Fill', CT_Fill)


# Complex type CT_MetadataBlock with content type ELEMENT_ONLY
class CT_MetadataBlock (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MetadataBlock')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rc uses Python identifier rc
    __rc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rc'), 'rc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataBlock_httpschemas_openxmlformats_orgspreadsheetml2006mainrc', True)

    
    rc = property(__rc.value, __rc.set, None, u'Metadata Record')


    _ElementMap = {
        __rc.name() : __rc
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_MetadataBlock', CT_MetadataBlock)


# Complex type CT_SheetBackgroundPicture with content type EMPTY
class CT_SheetBackgroundPicture (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SheetBackgroundPicture')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetBackgroundPicture_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id
    }
Namespace.addCategoryObject('typeBinding', u'CT_SheetBackgroundPicture', CT_SheetBackgroundPicture)


# Complex type CT_IgnoredError with content type EMPTY
class CT_IgnoredError (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_IgnoredError')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute listDataValidation uses Python identifier listDataValidation
    __listDataValidation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'listDataValidation'), 'listDataValidation', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IgnoredError_listDataValidation', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    listDataValidation = property(__listDataValidation.value, __listDataValidation.set, None, u'List Data Validation')

    
    # Attribute numberStoredAsText uses Python identifier numberStoredAsText
    __numberStoredAsText = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numberStoredAsText'), 'numberStoredAsText', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IgnoredError_numberStoredAsText', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    numberStoredAsText = property(__numberStoredAsText.value, __numberStoredAsText.set, None, u'Number Stored As Text')

    
    # Attribute calculatedColumn uses Python identifier calculatedColumn
    __calculatedColumn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'calculatedColumn'), 'calculatedColumn', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IgnoredError_calculatedColumn', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    calculatedColumn = property(__calculatedColumn.value, __calculatedColumn.set, None, u'Calculated Column')

    
    # Attribute formula uses Python identifier formula
    __formula = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'formula'), 'formula', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IgnoredError_formula', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    formula = property(__formula.value, __formula.set, None, u'Formula')

    
    # Attribute formulaRange uses Python identifier formulaRange
    __formulaRange = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'formulaRange'), 'formulaRange', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IgnoredError_formulaRange', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    formulaRange = property(__formulaRange.value, __formulaRange.set, None, u'Formula Range')

    
    # Attribute emptyCellReference uses Python identifier emptyCellReference
    __emptyCellReference = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'emptyCellReference'), 'emptyCellReference', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IgnoredError_emptyCellReference', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    emptyCellReference = property(__emptyCellReference.value, __emptyCellReference.set, None, u'Empty Cell Reference')

    
    # Attribute sqref uses Python identifier sqref
    __sqref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sqref'), 'sqref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IgnoredError_sqref', ST_Sqref, required=True)
    
    sqref = property(__sqref.value, __sqref.set, None, u'Sequence of References')

    
    # Attribute unlockedFormula uses Python identifier unlockedFormula
    __unlockedFormula = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'unlockedFormula'), 'unlockedFormula', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IgnoredError_unlockedFormula', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    unlockedFormula = property(__unlockedFormula.value, __unlockedFormula.set, None, u'Unlocked Formula')

    
    # Attribute evalError uses Python identifier evalError
    __evalError = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'evalError'), 'evalError', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IgnoredError_evalError', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    evalError = property(__evalError.value, __evalError.set, None, u'Evaluation Error')

    
    # Attribute twoDigitTextYear uses Python identifier twoDigitTextYear
    __twoDigitTextYear = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'twoDigitTextYear'), 'twoDigitTextYear', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IgnoredError_twoDigitTextYear', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    twoDigitTextYear = property(__twoDigitTextYear.value, __twoDigitTextYear.set, None, u'Two Digit Text Year')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __listDataValidation.name() : __listDataValidation,
        __numberStoredAsText.name() : __numberStoredAsText,
        __calculatedColumn.name() : __calculatedColumn,
        __formula.name() : __formula,
        __formulaRange.name() : __formulaRange,
        __emptyCellReference.name() : __emptyCellReference,
        __sqref.name() : __sqref,
        __unlockedFormula.name() : __unlockedFormula,
        __evalError.name() : __evalError,
        __twoDigitTextYear.name() : __twoDigitTextYear
    }
Namespace.addCategoryObject('typeBinding', u'CT_IgnoredError', CT_IgnoredError)


# Complex type CT_GroupLevel with content type ELEMENT_ONLY
class CT_GroupLevel (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_GroupLevel')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupLevel_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}groups uses Python identifier groups
    __groups = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'groups'), 'groups', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupLevel_httpschemas_openxmlformats_orgspreadsheetml2006maingroups', False)

    
    groups = property(__groups.value, __groups.set, None, u'OLAP Level Groups')

    
    # Attribute caption uses Python identifier caption
    __caption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'caption'), 'caption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupLevel_caption', _s.ST_Xstring, required=True)
    
    caption = property(__caption.value, __caption.set, None, u'Grouping Level Display Name')

    
    # Attribute user uses Python identifier user
    __user = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'user'), 'user', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupLevel_user', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    user = property(__user.value, __user.set, None, u'User-Defined Group Level')

    
    # Attribute uniqueName uses Python identifier uniqueName
    __uniqueName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueName'), 'uniqueName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupLevel_uniqueName', _s.ST_Xstring, required=True)
    
    uniqueName = property(__uniqueName.value, __uniqueName.set, None, u'Unique Name')

    
    # Attribute customRollUp uses Python identifier customRollUp
    __customRollUp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'customRollUp'), 'customRollUp', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupLevel_customRollUp', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    customRollUp = property(__customRollUp.value, __customRollUp.set, None, u'Custom Roll Up')


    _ElementMap = {
        __extLst.name() : __extLst,
        __groups.name() : __groups
    }
    _AttributeMap = {
        __caption.name() : __caption,
        __user.name() : __user,
        __uniqueName.name() : __uniqueName,
        __customRollUp.name() : __customRollUp
    }
Namespace.addCategoryObject('typeBinding', u'CT_GroupLevel', CT_GroupLevel)


# Complex type CT_HierarchyUsage with content type EMPTY
class CT_HierarchyUsage (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_HierarchyUsage')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute hierarchyUsage uses Python identifier hierarchyUsage
    __hierarchyUsage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hierarchyUsage'), 'hierarchyUsage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_HierarchyUsage_hierarchyUsage', pyxb.binding.datatypes.int, required=True)
    
    hierarchyUsage = property(__hierarchyUsage.value, __hierarchyUsage.set, None, u'Hierarchy Usage')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __hierarchyUsage.name() : __hierarchyUsage
    }
Namespace.addCategoryObject('typeBinding', u'CT_HierarchyUsage', CT_HierarchyUsage)


# Complex type CT_TableStyles with content type ELEMENT_ONLY
class CT_TableStyles (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_TableStyles')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tableStyle uses Python identifier tableStyle
    __tableStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tableStyle'), 'tableStyle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyles_httpschemas_openxmlformats_orgspreadsheetml2006maintableStyle', True)

    
    tableStyle = property(__tableStyle.value, __tableStyle.set, None, u'Table Style')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyles_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Table Style Count')

    
    # Attribute defaultTableStyle uses Python identifier defaultTableStyle
    __defaultTableStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultTableStyle'), 'defaultTableStyle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyles_defaultTableStyle', pyxb.binding.datatypes.string)
    
    defaultTableStyle = property(__defaultTableStyle.value, __defaultTableStyle.set, None, u'Default Table Style')

    
    # Attribute defaultPivotStyle uses Python identifier defaultPivotStyle
    __defaultPivotStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultPivotStyle'), 'defaultPivotStyle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyles_defaultPivotStyle', pyxb.binding.datatypes.string)
    
    defaultPivotStyle = property(__defaultPivotStyle.value, __defaultPivotStyle.set, None, u'Default Pivot Style')


    _ElementMap = {
        __tableStyle.name() : __tableStyle
    }
    _AttributeMap = {
        __count.name() : __count,
        __defaultTableStyle.name() : __defaultTableStyle,
        __defaultPivotStyle.name() : __defaultPivotStyle
    }
Namespace.addCategoryObject('typeBinding', u'CT_TableStyles', CT_TableStyles)


# Complex type CT_XStringElement with content type EMPTY
class CT_XStringElement (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_XStringElement')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute v uses Python identifier v
    __v = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'v'), 'v', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_XStringElement_v', _s.ST_Xstring, required=True)
    
    v = property(__v.value, __v.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __v.name() : __v
    }
Namespace.addCategoryObject('typeBinding', u'CT_XStringElement', CT_XStringElement)


# Complex type CT_DataValidations with content type ELEMENT_ONLY
class CT_DataValidations (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DataValidations')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dataValidation uses Python identifier dataValidation
    __dataValidation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dataValidation'), 'dataValidation', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidations_httpschemas_openxmlformats_orgspreadsheetml2006maindataValidation', True)

    
    dataValidation = property(__dataValidation.value, __dataValidation.set, None, u'Data Validation')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidations_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Data Validation Item Count')

    
    # Attribute xWindow uses Python identifier xWindow
    __xWindow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xWindow'), 'xWindow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidations_xWindow', pyxb.binding.datatypes.unsignedInt)
    
    xWindow = property(__xWindow.value, __xWindow.set, None, u'Top Left Corner (X Coodrinate)')

    
    # Attribute disablePrompts uses Python identifier disablePrompts
    __disablePrompts = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'disablePrompts'), 'disablePrompts', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidations_disablePrompts', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    disablePrompts = property(__disablePrompts.value, __disablePrompts.set, None, u'Disable Prompts')

    
    # Attribute yWindow uses Python identifier yWindow
    __yWindow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'yWindow'), 'yWindow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidations_yWindow', pyxb.binding.datatypes.unsignedInt)
    
    yWindow = property(__yWindow.value, __yWindow.set, None, u'Top Left Corner (Y Coordinate)')


    _ElementMap = {
        __dataValidation.name() : __dataValidation
    }
    _AttributeMap = {
        __count.name() : __count,
        __xWindow.name() : __xWindow,
        __disablePrompts.name() : __disablePrompts,
        __yWindow.name() : __yWindow
    }
Namespace.addCategoryObject('typeBinding', u'CT_DataValidations', CT_DataValidations)


# Complex type CT_SheetId with content type EMPTY
class CT_SheetId (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SheetId')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetId_val', pyxb.binding.datatypes.unsignedInt, required=True)
    
    val = property(__val.value, __val.set, None, u'Sheet Id')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
Namespace.addCategoryObject('typeBinding', u'CT_SheetId', CT_SheetId)


# Complex type CT_SortCondition with content type EMPTY
class CT_SortCondition (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SortCondition')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute dxfId uses Python identifier dxfId
    __dxfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dxfId'), 'dxfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SortCondition_dxfId', ST_DxfId)
    
    dxfId = property(__dxfId.value, __dxfId.set, None, u'Format Id')

    
    # Attribute customList uses Python identifier customList
    __customList = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'customList'), 'customList', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SortCondition_customList', _s.ST_Xstring)
    
    customList = property(__customList.value, __customList.set, None, u'Custom List')

    
    # Attribute iconSet uses Python identifier iconSet
    __iconSet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'iconSet'), 'iconSet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SortCondition_iconSet', ST_IconSetType, unicode_default=u'3Arrows')
    
    iconSet = property(__iconSet.value, __iconSet.set, None, u'Icon Set')

    
    # Attribute iconId uses Python identifier iconId
    __iconId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'iconId'), 'iconId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SortCondition_iconId', pyxb.binding.datatypes.unsignedInt)
    
    iconId = property(__iconId.value, __iconId.set, None, u'Icon Id')

    
    # Attribute descending uses Python identifier descending
    __descending = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'descending'), 'descending', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SortCondition_descending', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    descending = property(__descending.value, __descending.set, None, u'Descending')

    
    # Attribute sortBy uses Python identifier sortBy
    __sortBy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sortBy'), 'sortBy', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SortCondition_sortBy', ST_SortBy, unicode_default=u'value')
    
    sortBy = property(__sortBy.value, __sortBy.set, None, u'Sort By')

    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SortCondition_ref', ST_Ref, required=True)
    
    ref = property(__ref.value, __ref.set, None, u'Reference')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __dxfId.name() : __dxfId,
        __customList.name() : __customList,
        __iconSet.name() : __iconSet,
        __iconId.name() : __iconId,
        __descending.name() : __descending,
        __sortBy.name() : __sortBy,
        __ref.name() : __ref
    }
Namespace.addCategoryObject('typeBinding', u'CT_SortCondition', CT_SortCondition)


# Complex type CT_Items with content type ELEMENT_ONLY
class CT_Items (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Items')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}item uses Python identifier item
    __item = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'item'), 'item', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Items_httpschemas_openxmlformats_orgspreadsheetml2006mainitem', True)

    
    item = property(__item.value, __item.set, None, u'PivotTable Field Item')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Items_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Field Count')


    _ElementMap = {
        __item.name() : __item
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_Items', CT_Items)


# Complex type CT_CsPageSetup with content type EMPTY
class CT_CsPageSetup (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CsPageSetup')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute blackAndWhite uses Python identifier blackAndWhite
    __blackAndWhite = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'blackAndWhite'), 'blackAndWhite', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CsPageSetup_blackAndWhite', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    blackAndWhite = property(__blackAndWhite.value, __blackAndWhite.set, None, u'Black And White')

    
    # Attribute paperWidth uses Python identifier paperWidth
    __paperWidth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'paperWidth'), 'paperWidth', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CsPageSetup_paperWidth', _s.ST_PositiveUniversalMeasure)
    
    paperWidth = property(__paperWidth.value, __paperWidth.set, None, u'Paper Width')

    
    # Attribute draft uses Python identifier draft
    __draft = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'draft'), 'draft', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CsPageSetup_draft', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    draft = property(__draft.value, __draft.set, None, u'Draft')

    
    # Attribute paperHeight uses Python identifier paperHeight
    __paperHeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'paperHeight'), 'paperHeight', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CsPageSetup_paperHeight', _s.ST_PositiveUniversalMeasure)
    
    paperHeight = property(__paperHeight.value, __paperHeight.set, None, u'Paper Height')

    
    # Attribute useFirstPageNumber uses Python identifier useFirstPageNumber
    __useFirstPageNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'useFirstPageNumber'), 'useFirstPageNumber', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CsPageSetup_useFirstPageNumber', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    useFirstPageNumber = property(__useFirstPageNumber.value, __useFirstPageNumber.set, None, u'Use First Page Number')

    
    # Attribute firstPageNumber uses Python identifier firstPageNumber
    __firstPageNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'firstPageNumber'), 'firstPageNumber', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CsPageSetup_firstPageNumber', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    firstPageNumber = property(__firstPageNumber.value, __firstPageNumber.set, None, u'First Page Number')

    
    # Attribute horizontalDpi uses Python identifier horizontalDpi
    __horizontalDpi = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'horizontalDpi'), 'horizontalDpi', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CsPageSetup_horizontalDpi', pyxb.binding.datatypes.unsignedInt, unicode_default=u'600')
    
    horizontalDpi = property(__horizontalDpi.value, __horizontalDpi.set, None, u'Horizontal DPI')

    
    # Attribute orientation uses Python identifier orientation
    __orientation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'orientation'), 'orientation', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CsPageSetup_orientation', ST_Orientation, unicode_default=u'default')
    
    orientation = property(__orientation.value, __orientation.set, None, u'Orientation')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CsPageSetup_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute verticalDpi uses Python identifier verticalDpi
    __verticalDpi = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'verticalDpi'), 'verticalDpi', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CsPageSetup_verticalDpi', pyxb.binding.datatypes.unsignedInt, unicode_default=u'600')
    
    verticalDpi = property(__verticalDpi.value, __verticalDpi.set, None, u'Vertical DPI')

    
    # Attribute paperSize uses Python identifier paperSize
    __paperSize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'paperSize'), 'paperSize', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CsPageSetup_paperSize', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    paperSize = property(__paperSize.value, __paperSize.set, None, u'Paper Size')

    
    # Attribute copies uses Python identifier copies
    __copies = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'copies'), 'copies', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CsPageSetup_copies', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    copies = property(__copies.value, __copies.set, None, u'Number Of Copies')

    
    # Attribute usePrinterDefaults uses Python identifier usePrinterDefaults
    __usePrinterDefaults = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'usePrinterDefaults'), 'usePrinterDefaults', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CsPageSetup_usePrinterDefaults', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    usePrinterDefaults = property(__usePrinterDefaults.value, __usePrinterDefaults.set, None, u'Use Printer Defaults')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __blackAndWhite.name() : __blackAndWhite,
        __paperWidth.name() : __paperWidth,
        __draft.name() : __draft,
        __paperHeight.name() : __paperHeight,
        __useFirstPageNumber.name() : __useFirstPageNumber,
        __firstPageNumber.name() : __firstPageNumber,
        __horizontalDpi.name() : __horizontalDpi,
        __orientation.name() : __orientation,
        __id.name() : __id,
        __verticalDpi.name() : __verticalDpi,
        __paperSize.name() : __paperSize,
        __copies.name() : __copies,
        __usePrinterDefaults.name() : __usePrinterDefaults
    }
Namespace.addCategoryObject('typeBinding', u'CT_CsPageSetup', CT_CsPageSetup)


# Complex type CT_Dxfs with content type ELEMENT_ONLY
class CT_Dxfs (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Dxfs')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dxf uses Python identifier dxf
    __dxf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dxf'), 'dxf', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dxfs_httpschemas_openxmlformats_orgspreadsheetml2006maindxf', True)

    
    dxf = property(__dxf.value, __dxf.set, None, u'Formatting')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dxfs_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Format Count')


    _ElementMap = {
        __dxf.name() : __dxf
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_Dxfs', CT_Dxfs)


# Complex type CT_PivotHierarchy with content type ELEMENT_ONLY
class CT_PivotHierarchy (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotHierarchy')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchy_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}mps uses Python identifier mps
    __mps = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'mps'), 'mps', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchy_httpschemas_openxmlformats_orgspreadsheetml2006mainmps', False)

    
    mps = property(__mps.value, __mps.set, None, u'OLAP Member Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}members uses Python identifier members
    __members = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'members'), 'members', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchy_httpschemas_openxmlformats_orgspreadsheetml2006mainmembers', True)

    
    members = property(__members.value, __members.set, None, u'Members')

    
    # Attribute dragOff uses Python identifier dragOff
    __dragOff = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dragOff'), 'dragOff', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchy_dragOff', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    dragOff = property(__dragOff.value, __dragOff.set, None, u'Drag Off')

    
    # Attribute dragToPage uses Python identifier dragToPage
    __dragToPage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dragToPage'), 'dragToPage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchy_dragToPage', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    dragToPage = property(__dragToPage.value, __dragToPage.set, None, u'Drag to Page')

    
    # Attribute multipleItemSelectionAllowed uses Python identifier multipleItemSelectionAllowed
    __multipleItemSelectionAllowed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'multipleItemSelectionAllowed'), 'multipleItemSelectionAllowed', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchy_multipleItemSelectionAllowed', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    multipleItemSelectionAllowed = property(__multipleItemSelectionAllowed.value, __multipleItemSelectionAllowed.set, None, u'Multiple Field Filters')

    
    # Attribute subtotalTop uses Python identifier subtotalTop
    __subtotalTop = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'subtotalTop'), 'subtotalTop', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchy_subtotalTop', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    subtotalTop = property(__subtotalTop.value, __subtotalTop.set, None, u'New Levels Subtotals At Top')

    
    # Attribute dragToData uses Python identifier dragToData
    __dragToData = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dragToData'), 'dragToData', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchy_dragToData', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    dragToData = property(__dragToData.value, __dragToData.set, None, u'Drag To Data')

    
    # Attribute showInFieldList uses Python identifier showInFieldList
    __showInFieldList = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showInFieldList'), 'showInFieldList', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchy_showInFieldList', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showInFieldList = property(__showInFieldList.value, __showInFieldList.set, None, u'Show In Field List')

    
    # Attribute caption uses Python identifier caption
    __caption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'caption'), 'caption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchy_caption', _s.ST_Xstring)
    
    caption = property(__caption.value, __caption.set, None, u'Hierarchy Caption')

    
    # Attribute dragToRow uses Python identifier dragToRow
    __dragToRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dragToRow'), 'dragToRow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchy_dragToRow', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    dragToRow = property(__dragToRow.value, __dragToRow.set, None, u'Drag To Row')

    
    # Attribute includeNewItemsInFilter uses Python identifier includeNewItemsInFilter
    __includeNewItemsInFilter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'includeNewItemsInFilter'), 'includeNewItemsInFilter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchy_includeNewItemsInFilter', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    includeNewItemsInFilter = property(__includeNewItemsInFilter.value, __includeNewItemsInFilter.set, None, u'Inclusive Manual Filter')

    
    # Attribute dragToCol uses Python identifier dragToCol
    __dragToCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dragToCol'), 'dragToCol', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchy_dragToCol', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    dragToCol = property(__dragToCol.value, __dragToCol.set, None, u'Drag To Column')

    
    # Attribute outline uses Python identifier outline
    __outline = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'outline'), 'outline', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotHierarchy_outline', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    outline = property(__outline.value, __outline.set, None, u'Outline New Levels')


    _ElementMap = {
        __extLst.name() : __extLst,
        __mps.name() : __mps,
        __members.name() : __members
    }
    _AttributeMap = {
        __dragOff.name() : __dragOff,
        __dragToPage.name() : __dragToPage,
        __multipleItemSelectionAllowed.name() : __multipleItemSelectionAllowed,
        __subtotalTop.name() : __subtotalTop,
        __dragToData.name() : __dragToData,
        __showInFieldList.name() : __showInFieldList,
        __caption.name() : __caption,
        __dragToRow.name() : __dragToRow,
        __includeNewItemsInFilter.name() : __includeNewItemsInFilter,
        __dragToCol.name() : __dragToCol,
        __outline.name() : __outline
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotHierarchy', CT_PivotHierarchy)


# Complex type CT_Row with content type ELEMENT_ONLY
class CT_Row (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Row')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Row_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}c uses Python identifier c
    __c = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'c'), 'c', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Row_httpschemas_openxmlformats_orgspreadsheetml2006mainc', True)

    
    c = property(__c.value, __c.set, None, u'Cell')

    
    # Attribute ht uses Python identifier ht
    __ht = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ht'), 'ht', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Row_ht', pyxb.binding.datatypes.double)
    
    ht = property(__ht.value, __ht.set, None, u'Row Height')

    
    # Attribute outlineLevel uses Python identifier outlineLevel
    __outlineLevel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'outlineLevel'), 'outlineLevel', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Row_outlineLevel', pyxb.binding.datatypes.unsignedByte, unicode_default=u'0')
    
    outlineLevel = property(__outlineLevel.value, __outlineLevel.set, None, u'Outline Level')

    
    # Attribute thickBot uses Python identifier thickBot
    __thickBot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'thickBot'), 'thickBot', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Row_thickBot', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    thickBot = property(__thickBot.value, __thickBot.set, None, u'Thick Bottom')

    
    # Attribute hidden uses Python identifier hidden
    __hidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hidden'), 'hidden', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Row_hidden', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hidden = property(__hidden.value, __hidden.set, None, u'Hidden')

    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Row_r', pyxb.binding.datatypes.unsignedInt)
    
    r = property(__r.value, __r.set, None, u'Row Index')

    
    # Attribute ph uses Python identifier ph
    __ph = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ph'), 'ph', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Row_ph', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ph = property(__ph.value, __ph.set, None, u'Show Phonetic')

    
    # Attribute customHeight uses Python identifier customHeight
    __customHeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'customHeight'), 'customHeight', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Row_customHeight', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    customHeight = property(__customHeight.value, __customHeight.set, None, u'Custom Height')

    
    # Attribute spans uses Python identifier spans
    __spans = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spans'), 'spans', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Row_spans', ST_CellSpans)
    
    spans = property(__spans.value, __spans.set, None, u'Spans')

    
    # Attribute customFormat uses Python identifier customFormat
    __customFormat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'customFormat'), 'customFormat', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Row_customFormat', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    customFormat = property(__customFormat.value, __customFormat.set, None, u'Custom Format')

    
    # Attribute s uses Python identifier s
    __s = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u's'), 's', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Row_s', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    s = property(__s.value, __s.set, None, u'Style Index')

    
    # Attribute collapsed uses Python identifier collapsed
    __collapsed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'collapsed'), 'collapsed', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Row_collapsed', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    collapsed = property(__collapsed.value, __collapsed.set, None, u'Collapsed')

    
    # Attribute thickTop uses Python identifier thickTop
    __thickTop = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'thickTop'), 'thickTop', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Row_thickTop', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    thickTop = property(__thickTop.value, __thickTop.set, None, u'Thick Top Border')


    _ElementMap = {
        __extLst.name() : __extLst,
        __c.name() : __c
    }
    _AttributeMap = {
        __ht.name() : __ht,
        __outlineLevel.name() : __outlineLevel,
        __thickBot.name() : __thickBot,
        __hidden.name() : __hidden,
        __r.name() : __r,
        __ph.name() : __ph,
        __customHeight.name() : __customHeight,
        __spans.name() : __spans,
        __customFormat.name() : __customFormat,
        __s.name() : __s,
        __collapsed.name() : __collapsed,
        __thickTop.name() : __thickTop
    }
Namespace.addCategoryObject('typeBinding', u'CT_Row', CT_Row)


# Complex type CT_CacheSource with content type ELEMENT_ONLY
class CT_CacheSource (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CacheSource')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}worksheetSource uses Python identifier worksheetSource
    __worksheetSource = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'worksheetSource'), 'worksheetSource', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheSource_httpschemas_openxmlformats_orgspreadsheetml2006mainworksheetSource', False)

    
    worksheetSource = property(__worksheetSource.value, __worksheetSource.set, None, u'Worksheet PivotCache Source')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}consolidation uses Python identifier consolidation
    __consolidation = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'consolidation'), 'consolidation', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheSource_httpschemas_openxmlformats_orgspreadsheetml2006mainconsolidation', False)

    
    consolidation = property(__consolidation.value, __consolidation.set, None, u'Consolidation Source')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheSource_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Attribute connectionId uses Python identifier connectionId
    __connectionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'connectionId'), 'connectionId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheSource_connectionId', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    connectionId = property(__connectionId.value, __connectionId.set, None, u'Connection Index')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheSource_type', ST_SourceType, required=True)
    
    type = property(__type.value, __type.set, None, u'Cache Type')


    _ElementMap = {
        __worksheetSource.name() : __worksheetSource,
        __consolidation.name() : __consolidation,
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __connectionId.name() : __connectionId,
        __type.name() : __type
    }
Namespace.addCategoryObject('typeBinding', u'CT_CacheSource', CT_CacheSource)


# Complex type CT_CfRule with content type ELEMENT_ONLY
class CT_CfRule (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CfRule')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}formula uses Python identifier formula
    __formula = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'formula'), 'formula', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_httpschemas_openxmlformats_orgspreadsheetml2006mainformula', True)

    
    formula = property(__formula.value, __formula.set, None, u'Formula')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}colorScale uses Python identifier colorScale
    __colorScale = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'colorScale'), 'colorScale', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_httpschemas_openxmlformats_orgspreadsheetml2006maincolorScale', False)

    
    colorScale = property(__colorScale.value, __colorScale.set, None, u'Color Scale')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}iconSet uses Python identifier iconSet
    __iconSet = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'iconSet'), 'iconSet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_httpschemas_openxmlformats_orgspreadsheetml2006mainiconSet', False)

    
    iconSet = property(__iconSet.value, __iconSet.set, None, u'Icon Set')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dataBar uses Python identifier dataBar
    __dataBar = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dataBar'), 'dataBar', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_httpschemas_openxmlformats_orgspreadsheetml2006maindataBar', False)

    
    dataBar = property(__dataBar.value, __dataBar.set, None, u'Data Bar')

    
    # Attribute bottom uses Python identifier bottom
    __bottom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bottom'), 'bottom', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_bottom', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    bottom = property(__bottom.value, __bottom.set, None, u'Bottom N')

    
    # Attribute stdDev uses Python identifier stdDev
    __stdDev = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stdDev'), 'stdDev', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_stdDev', pyxb.binding.datatypes.int)
    
    stdDev = property(__stdDev.value, __stdDev.set, None, u'StdDev')

    
    # Attribute dxfId uses Python identifier dxfId
    __dxfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dxfId'), 'dxfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_dxfId', ST_DxfId)
    
    dxfId = property(__dxfId.value, __dxfId.set, None, u'Differential Formatting Id')

    
    # Attribute equalAverage uses Python identifier equalAverage
    __equalAverage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'equalAverage'), 'equalAverage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_equalAverage', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    equalAverage = property(__equalAverage.value, __equalAverage.set, None, u'Equal Average')

    
    # Attribute operator uses Python identifier operator
    __operator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'operator'), 'operator', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_operator', ST_ConditionalFormattingOperator)
    
    operator = property(__operator.value, __operator.set, None, u'Operator')

    
    # Attribute priority uses Python identifier priority
    __priority = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'priority'), 'priority', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_priority', pyxb.binding.datatypes.int, required=True)
    
    priority = property(__priority.value, __priority.set, None, u'Priority')

    
    # Attribute aboveAverage uses Python identifier aboveAverage
    __aboveAverage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aboveAverage'), 'aboveAverage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_aboveAverage', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    aboveAverage = property(__aboveAverage.value, __aboveAverage.set, None, u'Above Or Below Average')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_type', ST_CfType)
    
    type = property(__type.value, __type.set, None, u'Type')

    
    # Attribute stopIfTrue uses Python identifier stopIfTrue
    __stopIfTrue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'stopIfTrue'), 'stopIfTrue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_stopIfTrue', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    stopIfTrue = property(__stopIfTrue.value, __stopIfTrue.set, None, u'Stop If True')

    
    # Attribute timePeriod uses Python identifier timePeriod
    __timePeriod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'timePeriod'), 'timePeriod', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_timePeriod', ST_TimePeriod)
    
    timePeriod = property(__timePeriod.value, __timePeriod.set, None, u'Time Period')

    
    # Attribute text uses Python identifier text
    __text = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'text'), 'text', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_text', pyxb.binding.datatypes.string)
    
    text = property(__text.value, __text.set, None, u'Text')

    
    # Attribute rank uses Python identifier rank
    __rank = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rank'), 'rank', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_rank', pyxb.binding.datatypes.unsignedInt)
    
    rank = property(__rank.value, __rank.set, None, u'Rank')

    
    # Attribute percent uses Python identifier percent
    __percent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'percent'), 'percent', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CfRule_percent', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    percent = property(__percent.value, __percent.set, None, u'Top 10 Percent')


    _ElementMap = {
        __extLst.name() : __extLst,
        __formula.name() : __formula,
        __colorScale.name() : __colorScale,
        __iconSet.name() : __iconSet,
        __dataBar.name() : __dataBar
    }
    _AttributeMap = {
        __bottom.name() : __bottom,
        __stdDev.name() : __stdDev,
        __dxfId.name() : __dxfId,
        __equalAverage.name() : __equalAverage,
        __operator.name() : __operator,
        __priority.name() : __priority,
        __aboveAverage.name() : __aboveAverage,
        __type.name() : __type,
        __stopIfTrue.name() : __stopIfTrue,
        __timePeriod.name() : __timePeriod,
        __text.name() : __text,
        __rank.name() : __rank,
        __percent.name() : __percent
    }
Namespace.addCategoryObject('typeBinding', u'CT_CfRule', CT_CfRule)


# Complex type CT_CustomFilters with content type ELEMENT_ONLY
class CT_CustomFilters (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CustomFilters')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}customFilter uses Python identifier customFilter
    __customFilter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'customFilter'), 'customFilter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomFilters_httpschemas_openxmlformats_orgspreadsheetml2006maincustomFilter', True)

    
    customFilter = property(__customFilter.value, __customFilter.set, None, u'Custom Filter Criteria')

    
    # Attribute and uses Python identifier and_
    __and = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'and'), 'and_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomFilters_and', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    and_ = property(__and.value, __and.set, None, u'And')


    _ElementMap = {
        __customFilter.name() : __customFilter
    }
    _AttributeMap = {
        __and.name() : __and
    }
Namespace.addCategoryObject('typeBinding', u'CT_CustomFilters', CT_CustomFilters)


# Complex type CT_DateTime with content type ELEMENT_ONLY
class CT_DateTime (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DateTime')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}x uses Python identifier x
    __x = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'x'), 'x', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DateTime_httpschemas_openxmlformats_orgspreadsheetml2006mainx', True)

    
    x = property(__x.value, __x.set, None, u'Member Property Index')

    
    # Attribute cp uses Python identifier cp
    __cp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cp'), 'cp', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DateTime_cp', pyxb.binding.datatypes.unsignedInt)
    
    cp = property(__cp.value, __cp.set, None, u'Member Property Count')

    
    # Attribute c uses Python identifier c
    __c = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'c'), 'c', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DateTime_c', _s.ST_Xstring)
    
    c = property(__c.value, __c.set, None, u'Caption')

    
    # Attribute f uses Python identifier f
    __f = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'f'), 'f', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DateTime_f', pyxb.binding.datatypes.boolean)
    
    f = property(__f.value, __f.set, None, u'Calculated Item Value')

    
    # Attribute u uses Python identifier u
    __u = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'u'), 'u', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DateTime_u', pyxb.binding.datatypes.boolean)
    
    u = property(__u.value, __u.set, None, u'Unused Item')

    
    # Attribute v uses Python identifier v
    __v = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'v'), 'v', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DateTime_v', pyxb.binding.datatypes.dateTime, required=True)
    
    v = property(__v.value, __v.set, None, u'Value')


    _ElementMap = {
        __x.name() : __x
    }
    _AttributeMap = {
        __cp.name() : __cp,
        __c.name() : __c,
        __f.name() : __f,
        __u.name() : __u,
        __v.name() : __v
    }
Namespace.addCategoryObject('typeBinding', u'CT_DateTime', CT_DateTime)


# Complex type CT_SharedUser with content type ELEMENT_ONLY
class CT_SharedUser (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SharedUser')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedUser_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedUser_id', pyxb.binding.datatypes.int, required=True)
    
    id = property(__id.value, __id.set, None, u'User Id')

    
    # Attribute guid uses Python identifier guid
    __guid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'guid'), 'guid', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedUser_guid', _s.ST_Guid, required=True)
    
    guid = property(__guid.value, __guid.set, None, u'User Revisions GUID')

    
    # Attribute dateTime uses Python identifier dateTime
    __dateTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dateTime'), 'dateTime', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedUser_dateTime', pyxb.binding.datatypes.dateTime, required=True)
    
    dateTime = property(__dateTime.value, __dateTime.set, None, u'Date Time')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedUser_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'User Name')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __id.name() : __id,
        __guid.name() : __guid,
        __dateTime.name() : __dateTime,
        __name.name() : __name
    }
Namespace.addCategoryObject('typeBinding', u'CT_SharedUser', CT_SharedUser)


# Complex type CT_FieldUsage with content type EMPTY
class CT_FieldUsage (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_FieldUsage')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'x'), 'x', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FieldUsage_x', pyxb.binding.datatypes.int, required=True)
    
    x = property(__x.value, __x.set, None, u'Field Index')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __x.name() : __x
    }
Namespace.addCategoryObject('typeBinding', u'CT_FieldUsage', CT_FieldUsage)


# Complex type CT_CalcCell with content type EMPTY
class CT_CalcCell (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CalcCell')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute l uses Python identifier l
    __l = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'l'), 'l', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcCell_l', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    l = property(__l.value, __l.set, None, u'New Dependency Level')

    
    # Attribute i uses Python identifier i
    __i = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'i'), 'i', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcCell_i', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    i = property(__i.value, __i.set, None, u'Sheet Id')

    
    # Attribute t uses Python identifier t
    __t = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u't'), 't', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcCell_t', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    t = property(__t.value, __t.set, None, u'New Thread')

    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcCell_r', ST_CellRef, required=True)
    
    r = property(__r.value, __r.set, None, u'Cell Reference')

    
    # Attribute a uses Python identifier a
    __a = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'a'), 'a', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcCell_a', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    a = property(__a.value, __a.set, None, u'Array')

    
    # Attribute s uses Python identifier s
    __s = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u's'), 's', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcCell_s', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    s = property(__s.value, __s.set, None, u'Child Chain')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __l.name() : __l,
        __i.name() : __i,
        __t.name() : __t,
        __r.name() : __r,
        __a.name() : __a,
        __s.name() : __s
    }
Namespace.addCategoryObject('typeBinding', u'CT_CalcCell', CT_CalcCell)


# Complex type CT_DataRef with content type EMPTY
class CT_DataRef (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DataRef')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataRef_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataRef_ref', ST_Ref)
    
    ref = property(__ref.value, __ref.set, None, u'Reference')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataRef_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'Named Range')

    
    # Attribute sheet uses Python identifier sheet
    __sheet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheet'), 'sheet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataRef_sheet', _s.ST_Xstring)
    
    sheet = property(__sheet.value, __sheet.set, None, u'Sheet Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id,
        __ref.name() : __ref,
        __name.name() : __name,
        __sheet.name() : __sheet
    }
Namespace.addCategoryObject('typeBinding', u'CT_DataRef', CT_DataRef)


# Complex type CT_MergeCell with content type EMPTY
class CT_MergeCell (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MergeCell')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MergeCell_ref', ST_Ref, required=True)
    
    ref = property(__ref.value, __ref.set, None, u'Reference')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __ref.name() : __ref
    }
Namespace.addCategoryObject('typeBinding', u'CT_MergeCell', CT_MergeCell)


# Complex type CT_SmartTags with content type ELEMENT_ONLY
class CT_SmartTags (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SmartTags')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cellSmartTags uses Python identifier cellSmartTags
    __cellSmartTags = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cellSmartTags'), 'cellSmartTags', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SmartTags_httpschemas_openxmlformats_orgspreadsheetml2006maincellSmartTags', True)

    
    cellSmartTags = property(__cellSmartTags.value, __cellSmartTags.set, None, u'Cell Smart Tags')


    _ElementMap = {
        __cellSmartTags.name() : __cellSmartTags
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_SmartTags', CT_SmartTags)


# Complex type CT_I with content type ELEMENT_ONLY
class CT_I (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_I')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}x uses Python identifier x
    __x = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'x'), 'x', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_I_httpschemas_openxmlformats_orgspreadsheetml2006mainx', True)

    
    x = property(__x.value, __x.set, None, u'Row / Column Item Index')

    
    # Attribute i uses Python identifier i
    __i = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'i'), 'i', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_I_i', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    i = property(__i.value, __i.set, None, u'Data Field Index')

    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_I_r', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    r = property(__r.value, __r.set, None, u'Repeated Items Count')

    
    # Attribute t uses Python identifier t
    __t = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u't'), 't', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_I_t', ST_ItemType, unicode_default=u'data')
    
    t = property(__t.value, __t.set, None, u'Item Type')


    _ElementMap = {
        __x.name() : __x
    }
    _AttributeMap = {
        __i.name() : __i,
        __r.name() : __r,
        __t.name() : __t
    }
Namespace.addCategoryObject('typeBinding', u'CT_I', CT_I)


# Complex type CT_RevisionHeader with content type ELEMENT_ONLY
class CT_RevisionHeader (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RevisionHeader')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeader_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetIdMap uses Python identifier sheetIdMap
    __sheetIdMap = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetIdMap'), 'sheetIdMap', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeader_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetIdMap', False)

    
    sheetIdMap = property(__sheetIdMap.value, __sheetIdMap.set, None, u'Sheet Id Map')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}reviewedList uses Python identifier reviewedList
    __reviewedList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'reviewedList'), 'reviewedList', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeader_httpschemas_openxmlformats_orgspreadsheetml2006mainreviewedList', False)

    
    reviewedList = property(__reviewedList.value, __reviewedList.set, None, u'Reviewed List')

    
    # Attribute guid uses Python identifier guid
    __guid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'guid'), 'guid', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeader_guid', _s.ST_Guid, required=True)
    
    guid = property(__guid.value, __guid.set, None, u'GUID')

    
    # Attribute maxRId uses Python identifier maxRId
    __maxRId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxRId'), 'maxRId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeader_maxRId', pyxb.binding.datatypes.unsignedInt)
    
    maxRId = property(__maxRId.value, __maxRId.set, None, u'Max Revision Id')

    
    # Attribute dateTime uses Python identifier dateTime
    __dateTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dateTime'), 'dateTime', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeader_dateTime', pyxb.binding.datatypes.dateTime, required=True)
    
    dateTime = property(__dateTime.value, __dateTime.set, None, u'Date Time')

    
    # Attribute maxSheetId uses Python identifier maxSheetId
    __maxSheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxSheetId'), 'maxSheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeader_maxSheetId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    maxSheetId = property(__maxSheetId.value, __maxSheetId.set, None, u'Last Sheet Id')

    
    # Attribute userName uses Python identifier userName
    __userName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'userName'), 'userName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeader_userName', _s.ST_Xstring, required=True)
    
    userName = property(__userName.value, __userName.set, None, u'User Name')

    
    # Attribute minRId uses Python identifier minRId
    __minRId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minRId'), 'minRId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeader_minRId', pyxb.binding.datatypes.unsignedInt)
    
    minRId = property(__minRId.value, __minRId.set, None, u'Minimum Revision Id')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeader_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        __extLst.name() : __extLst,
        __sheetIdMap.name() : __sheetIdMap,
        __reviewedList.name() : __reviewedList
    }
    _AttributeMap = {
        __guid.name() : __guid,
        __maxRId.name() : __maxRId,
        __dateTime.name() : __dateTime,
        __maxSheetId.name() : __maxSheetId,
        __userName.name() : __userName,
        __minRId.name() : __minRId,
        __id.name() : __id
    }
Namespace.addCategoryObject('typeBinding', u'CT_RevisionHeader', CT_RevisionHeader)


# Complex type CT_Reviewed with content type EMPTY
class CT_Reviewed (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Reviewed')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute rId uses Python identifier rId
    __rId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rId'), 'rId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Reviewed_rId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    rId = property(__rId.value, __rId.set, None, u'revision Id')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __rId.name() : __rId
    }
Namespace.addCategoryObject('typeBinding', u'CT_Reviewed', CT_Reviewed)


# Complex type CT_PatternFill with content type ELEMENT_ONLY
class CT_PatternFill (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PatternFill')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}bgColor uses Python identifier bgColor
    __bgColor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'bgColor'), 'bgColor', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PatternFill_httpschemas_openxmlformats_orgspreadsheetml2006mainbgColor', False)

    
    bgColor = property(__bgColor.value, __bgColor.set, None, u'Background Color')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}fgColor uses Python identifier fgColor
    __fgColor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fgColor'), 'fgColor', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PatternFill_httpschemas_openxmlformats_orgspreadsheetml2006mainfgColor', False)

    
    fgColor = property(__fgColor.value, __fgColor.set, None, u'Foreground Color')

    
    # Attribute patternType uses Python identifier patternType
    __patternType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'patternType'), 'patternType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PatternFill_patternType', ST_PatternType)
    
    patternType = property(__patternType.value, __patternType.set, None, u'Pattern Type')


    _ElementMap = {
        __bgColor.name() : __bgColor,
        __fgColor.name() : __fgColor
    }
    _AttributeMap = {
        __patternType.name() : __patternType
    }
Namespace.addCategoryObject('typeBinding', u'CT_PatternFill', CT_PatternFill)


# Complex type CT_WorkbookPr with content type EMPTY
class CT_WorkbookPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_WorkbookPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute date1904 uses Python identifier date1904
    __date1904 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'date1904'), 'date1904', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_date1904', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    date1904 = property(__date1904.value, __date1904.set, None, u'Date 1904')

    
    # Attribute hidePivotFieldList uses Python identifier hidePivotFieldList
    __hidePivotFieldList = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hidePivotFieldList'), 'hidePivotFieldList', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_hidePivotFieldList', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hidePivotFieldList = property(__hidePivotFieldList.value, __hidePivotFieldList.set, None, u'Hide Pivot Field List')

    
    # Attribute autoCompressPictures uses Python identifier autoCompressPictures
    __autoCompressPictures = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoCompressPictures'), 'autoCompressPictures', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_autoCompressPictures', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoCompressPictures = property(__autoCompressPictures.value, __autoCompressPictures.set, None, u'Auto Compress Pictures')

    
    # Attribute showInkAnnotation uses Python identifier showInkAnnotation
    __showInkAnnotation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showInkAnnotation'), 'showInkAnnotation', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_showInkAnnotation', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showInkAnnotation = property(__showInkAnnotation.value, __showInkAnnotation.set, None, u'Show Ink Annotations')

    
    # Attribute dateCompatibility uses Python identifier dateCompatibility
    __dateCompatibility = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dateCompatibility'), 'dateCompatibility', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_dateCompatibility', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    dateCompatibility = property(__dateCompatibility.value, __dateCompatibility.set, None, u'Date Compatibility')

    
    # Attribute showObjects uses Python identifier showObjects
    __showObjects = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showObjects'), 'showObjects', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_showObjects', ST_Objects, unicode_default=u'all')
    
    showObjects = property(__showObjects.value, __showObjects.set, None, u'Show Objects')

    
    # Attribute refreshAllConnections uses Python identifier refreshAllConnections
    __refreshAllConnections = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refreshAllConnections'), 'refreshAllConnections', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_refreshAllConnections', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    refreshAllConnections = property(__refreshAllConnections.value, __refreshAllConnections.set, None, u'Refresh all Connections on Open')

    
    # Attribute allowRefreshQuery uses Python identifier allowRefreshQuery
    __allowRefreshQuery = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'allowRefreshQuery'), 'allowRefreshQuery', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_allowRefreshQuery', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    allowRefreshQuery = property(__allowRefreshQuery.value, __allowRefreshQuery.set, None, u'Allow Refresh Query')

    
    # Attribute showPivotChartFilter uses Python identifier showPivotChartFilter
    __showPivotChartFilter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showPivotChartFilter'), 'showPivotChartFilter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_showPivotChartFilter', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showPivotChartFilter = property(__showPivotChartFilter.value, __showPivotChartFilter.set, None, u'Show Pivot Chart Filter')

    
    # Attribute codeName uses Python identifier codeName
    __codeName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeName'), 'codeName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_codeName', pyxb.binding.datatypes.string)
    
    codeName = property(__codeName.value, __codeName.set, None, u'Code Name')

    
    # Attribute defaultThemeVersion uses Python identifier defaultThemeVersion
    __defaultThemeVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultThemeVersion'), 'defaultThemeVersion', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_defaultThemeVersion', pyxb.binding.datatypes.unsignedInt)
    
    defaultThemeVersion = property(__defaultThemeVersion.value, __defaultThemeVersion.set, None, u'Default Theme Version')

    
    # Attribute updateLinks uses Python identifier updateLinks
    __updateLinks = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'updateLinks'), 'updateLinks', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_updateLinks', ST_UpdateLinks, unicode_default=u'userSet')
    
    updateLinks = property(__updateLinks.value, __updateLinks.set, None, u'Update Links Behavior')

    
    # Attribute saveExternalLinkValues uses Python identifier saveExternalLinkValues
    __saveExternalLinkValues = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'saveExternalLinkValues'), 'saveExternalLinkValues', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_saveExternalLinkValues', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    saveExternalLinkValues = property(__saveExternalLinkValues.value, __saveExternalLinkValues.set, None, u'Save External Link Values')

    
    # Attribute backupFile uses Python identifier backupFile
    __backupFile = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'backupFile'), 'backupFile', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_backupFile', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    backupFile = property(__backupFile.value, __backupFile.set, None, u'Create Backup File')

    
    # Attribute publishItems uses Python identifier publishItems
    __publishItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'publishItems'), 'publishItems', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_publishItems', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    publishItems = property(__publishItems.value, __publishItems.set, None, u'Publish Items')

    
    # Attribute filterPrivacy uses Python identifier filterPrivacy
    __filterPrivacy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'filterPrivacy'), 'filterPrivacy', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_filterPrivacy', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    filterPrivacy = property(__filterPrivacy.value, __filterPrivacy.set, None, u'Filter Privacy')

    
    # Attribute checkCompatibility uses Python identifier checkCompatibility
    __checkCompatibility = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'checkCompatibility'), 'checkCompatibility', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_checkCompatibility', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    checkCompatibility = property(__checkCompatibility.value, __checkCompatibility.set, None, u'Check Compatibility On Save')

    
    # Attribute showBorderUnselectedTables uses Python identifier showBorderUnselectedTables
    __showBorderUnselectedTables = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showBorderUnselectedTables'), 'showBorderUnselectedTables', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_showBorderUnselectedTables', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showBorderUnselectedTables = property(__showBorderUnselectedTables.value, __showBorderUnselectedTables.set, None, u'Show Border Unselected Table')

    
    # Attribute promptedSolutions uses Python identifier promptedSolutions
    __promptedSolutions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'promptedSolutions'), 'promptedSolutions', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorkbookPr_promptedSolutions', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    promptedSolutions = property(__promptedSolutions.value, __promptedSolutions.set, None, u'Prompted Solutions')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __date1904.name() : __date1904,
        __hidePivotFieldList.name() : __hidePivotFieldList,
        __autoCompressPictures.name() : __autoCompressPictures,
        __showInkAnnotation.name() : __showInkAnnotation,
        __dateCompatibility.name() : __dateCompatibility,
        __showObjects.name() : __showObjects,
        __refreshAllConnections.name() : __refreshAllConnections,
        __allowRefreshQuery.name() : __allowRefreshQuery,
        __showPivotChartFilter.name() : __showPivotChartFilter,
        __codeName.name() : __codeName,
        __defaultThemeVersion.name() : __defaultThemeVersion,
        __updateLinks.name() : __updateLinks,
        __saveExternalLinkValues.name() : __saveExternalLinkValues,
        __backupFile.name() : __backupFile,
        __publishItems.name() : __publishItems,
        __filterPrivacy.name() : __filterPrivacy,
        __checkCompatibility.name() : __checkCompatibility,
        __showBorderUnselectedTables.name() : __showBorderUnselectedTables,
        __promptedSolutions.name() : __promptedSolutions
    }
Namespace.addCategoryObject('typeBinding', u'CT_WorkbookPr', CT_WorkbookPr)


# Complex type CT_WebPublishItem with content type EMPTY
class CT_WebPublishItem (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_WebPublishItem')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishItem_id', pyxb.binding.datatypes.unsignedInt, required=True)
    
    id = property(__id.value, __id.set, None, u'Id')

    
    # Attribute sourceType uses Python identifier sourceType
    __sourceType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sourceType'), 'sourceType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishItem_sourceType', ST_WebSourceType, required=True)
    
    sourceType = property(__sourceType.value, __sourceType.set, None, u'Web Source Type')

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishItem_title', _s.ST_Xstring)
    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Attribute divId uses Python identifier divId
    __divId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'divId'), 'divId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishItem_divId', _s.ST_Xstring, required=True)
    
    divId = property(__divId.value, __divId.set, None, u'Destination Bookmark')

    
    # Attribute autoRepublish uses Python identifier autoRepublish
    __autoRepublish = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoRepublish'), 'autoRepublish', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishItem_autoRepublish', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    autoRepublish = property(__autoRepublish.value, __autoRepublish.set, None, u'Automatically Publish')

    
    # Attribute sourceRef uses Python identifier sourceRef
    __sourceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sourceRef'), 'sourceRef', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishItem_sourceRef', ST_Ref)
    
    sourceRef = property(__sourceRef.value, __sourceRef.set, None, u'Source Id')

    
    # Attribute sourceObject uses Python identifier sourceObject
    __sourceObject = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sourceObject'), 'sourceObject', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishItem_sourceObject', _s.ST_Xstring)
    
    sourceObject = property(__sourceObject.value, __sourceObject.set, None, u'Source Object Name')

    
    # Attribute destinationFile uses Python identifier destinationFile
    __destinationFile = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'destinationFile'), 'destinationFile', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishItem_destinationFile', _s.ST_Xstring, required=True)
    
    destinationFile = property(__destinationFile.value, __destinationFile.set, None, u'Destination File Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id,
        __sourceType.name() : __sourceType,
        __title.name() : __title,
        __divId.name() : __divId,
        __autoRepublish.name() : __autoRepublish,
        __sourceRef.name() : __sourceRef,
        __sourceObject.name() : __sourceObject,
        __destinationFile.name() : __destinationFile
    }
Namespace.addCategoryObject('typeBinding', u'CT_WebPublishItem', CT_WebPublishItem)


# Complex type CT_OleItem with content type EMPTY
class CT_OleItem (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_OleItem')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute advise uses Python identifier advise
    __advise = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'advise'), 'advise', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleItem_advise', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    advise = property(__advise.value, __advise.set, None, u'Advise')

    
    # Attribute preferPic uses Python identifier preferPic
    __preferPic = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'preferPic'), 'preferPic', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleItem_preferPic', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    preferPic = property(__preferPic.value, __preferPic.set, None, u'Object is an Image')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleItem_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Object Name')

    
    # Attribute icon uses Python identifier icon
    __icon = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'icon'), 'icon', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleItem_icon', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    icon = property(__icon.value, __icon.set, None, u'Icon')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __advise.name() : __advise,
        __preferPic.name() : __preferPic,
        __name.name() : __name,
        __icon.name() : __icon
    }
Namespace.addCategoryObject('typeBinding', u'CT_OleItem', CT_OleItem)


# Complex type CT_CommentPr with content type ELEMENT_ONLY
class CT_CommentPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CommentPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}anchor uses Python identifier anchor
    __anchor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'anchor'), 'anchor', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_httpschemas_openxmlformats_orgspreadsheetml2006mainanchor', False)

    
    anchor = property(__anchor.value, __anchor.set, None, None)

    
    # Attribute uiObject uses Python identifier uiObject
    __uiObject = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uiObject'), 'uiObject', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_uiObject', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    uiObject = property(__uiObject.value, __uiObject.set, None, u'UI Object Flag')

    
    # Attribute rowHidden uses Python identifier rowHidden
    __rowHidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rowHidden'), 'rowHidden', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_rowHidden', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    rowHidden = property(__rowHidden.value, __rowHidden.set, None, u'Hidden Row Flag')

    
    # Attribute disabled uses Python identifier disabled
    __disabled = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'disabled'), 'disabled', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_disabled', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    disabled = property(__disabled.value, __disabled.set, None, u'Disabled Flag')

    
    # Attribute colHidden uses Python identifier colHidden
    __colHidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'colHidden'), 'colHidden', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_colHidden', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    colHidden = property(__colHidden.value, __colHidden.set, None, u'Hidden Column Flag')

    
    # Attribute textVAlign uses Python identifier textVAlign
    __textVAlign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'textVAlign'), 'textVAlign', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_textVAlign', ST_TextVAlign, unicode_default=u'top')
    
    textVAlign = property(__textVAlign.value, __textVAlign.set, None, u'ext Vertical Alignment')

    
    # Attribute textHAlign uses Python identifier textHAlign
    __textHAlign = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'textHAlign'), 'textHAlign', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_textHAlign', ST_TextHAlign, unicode_default=u'left')
    
    textHAlign = property(__textHAlign.value, __textHAlign.set, None, u'Text Horizontal Alignment')

    
    # Attribute altText uses Python identifier altText
    __altText = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'altText'), 'altText', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_altText', _s.ST_Xstring)
    
    altText = property(__altText.value, __altText.set, None, u'Alternative Text')

    
    # Attribute lockText uses Python identifier lockText
    __lockText = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lockText'), 'lockText', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_lockText', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    lockText = property(__lockText.value, __lockText.set, None, u'Text Lock Flag')

    
    # Attribute autoLine uses Python identifier autoLine
    __autoLine = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoLine'), 'autoLine', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_autoLine', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoLine = property(__autoLine.value, __autoLine.set, None, u'Automatic Line Flag')

    
    # Attribute locked uses Python identifier locked
    __locked = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'locked'), 'locked', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_locked', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    locked = property(__locked.value, __locked.set, None, u'Locked Flag')

    
    # Attribute autoFill uses Python identifier autoFill
    __autoFill = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoFill'), 'autoFill', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_autoFill', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoFill = property(__autoFill.value, __autoFill.set, None, u'Automatic Fill Flag')

    
    # Attribute justLastX uses Python identifier justLastX
    __justLastX = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'justLastX'), 'justLastX', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_justLastX', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    justLastX = property(__justLastX.value, __justLastX.set, None, u'Far East Alignment Flag')

    
    # Attribute defaultSize uses Python identifier defaultSize
    __defaultSize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultSize'), 'defaultSize', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_defaultSize', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    defaultSize = property(__defaultSize.value, __defaultSize.set, None, u'Default Size Flag')

    
    # Attribute autoScale uses Python identifier autoScale
    __autoScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoScale'), 'autoScale', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_autoScale', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    autoScale = property(__autoScale.value, __autoScale.set, None, u'Automatic Text Scaling Flag')

    
    # Attribute print uses Python identifier print_
    __print = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print'), 'print_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CommentPr_print', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    print_ = property(__print.value, __print.set, None, u'Print Flag')


    _ElementMap = {
        __anchor.name() : __anchor
    }
    _AttributeMap = {
        __uiObject.name() : __uiObject,
        __rowHidden.name() : __rowHidden,
        __disabled.name() : __disabled,
        __colHidden.name() : __colHidden,
        __textVAlign.name() : __textVAlign,
        __textHAlign.name() : __textHAlign,
        __altText.name() : __altText,
        __lockText.name() : __lockText,
        __autoLine.name() : __autoLine,
        __locked.name() : __locked,
        __autoFill.name() : __autoFill,
        __justLastX.name() : __justLastX,
        __defaultSize.name() : __defaultSize,
        __autoScale.name() : __autoScale,
        __print.name() : __print
    }
Namespace.addCategoryObject('typeBinding', u'CT_CommentPr', CT_CommentPr)


# Complex type CT_Fonts with content type ELEMENT_ONLY
class CT_Fonts (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Fonts')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}font uses Python identifier font
    __font = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'font'), 'font', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Fonts_httpschemas_openxmlformats_orgspreadsheetml2006mainfont', True)

    
    font = property(__font.value, __font.set, None, u'Font')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Fonts_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Font Count')


    _ElementMap = {
        __font.name() : __font
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_Fonts', CT_Fonts)


# Complex type CT_PCDSCPage with content type ELEMENT_ONLY
class CT_PCDSCPage (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PCDSCPage')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageItem uses Python identifier pageItem
    __pageItem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageItem'), 'pageItem', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDSCPage_httpschemas_openxmlformats_orgspreadsheetml2006mainpageItem', True)

    
    pageItem = property(__pageItem.value, __pageItem.set, None, u'Page Item')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDSCPage_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Page Item String Count')


    _ElementMap = {
        __pageItem.name() : __pageItem
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_PCDSCPage', CT_PCDSCPage)


# Complex type CT_Authors with content type ELEMENT_ONLY
class CT_Authors (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Authors')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}author uses Python identifier author
    __author = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'author'), 'author', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Authors_httpschemas_openxmlformats_orgspreadsheetml2006mainauthor', True)

    
    author = property(__author.value, __author.set, None, u'Author')


    _ElementMap = {
        __author.name() : __author
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Authors', CT_Authors)


# Complex type CT_FutureMetadata with content type ELEMENT_ONLY
class CT_FutureMetadata (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_FutureMetadata')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FutureMetadata_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}bk uses Python identifier bk
    __bk = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'bk'), 'bk', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FutureMetadata_httpschemas_openxmlformats_orgspreadsheetml2006mainbk', True)

    
    bk = property(__bk.value, __bk.set, None, u'Future Metadata Block')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FutureMetadata_count', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    count = property(__count.value, __count.set, None, u'Future Metadata Block Count')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FutureMetadata_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Metadata Type Name')


    _ElementMap = {
        __extLst.name() : __extLst,
        __bk.name() : __bk
    }
    _AttributeMap = {
        __count.name() : __count,
        __name.name() : __name
    }
Namespace.addCategoryObject('typeBinding', u'CT_FutureMetadata', CT_FutureMetadata)


# Complex type CT_DbPr with content type EMPTY
class CT_DbPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DbPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute commandType uses Python identifier commandType
    __commandType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'commandType'), 'commandType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DbPr_commandType', pyxb.binding.datatypes.unsignedInt, unicode_default=u'2')
    
    commandType = property(__commandType.value, __commandType.set, None, u'OLE DB Command Type')

    
    # Attribute connection uses Python identifier connection
    __connection = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'connection'), 'connection', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DbPr_connection', _s.ST_Xstring, required=True)
    
    connection = property(__connection.value, __connection.set, None, u'Connection String')

    
    # Attribute command uses Python identifier command
    __command = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'command'), 'command', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DbPr_command', _s.ST_Xstring)
    
    command = property(__command.value, __command.set, None, u'Command Text')

    
    # Attribute serverCommand uses Python identifier serverCommand
    __serverCommand = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'serverCommand'), 'serverCommand', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DbPr_serverCommand', _s.ST_Xstring)
    
    serverCommand = property(__serverCommand.value, __serverCommand.set, None, u'Command Text')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __commandType.name() : __commandType,
        __connection.name() : __connection,
        __command.name() : __command,
        __serverCommand.name() : __serverCommand
    }
Namespace.addCategoryObject('typeBinding', u'CT_DbPr', CT_DbPr)


# Complex type CT_PrintOptions with content type EMPTY
class CT_PrintOptions (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PrintOptions')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute headings uses Python identifier headings
    __headings = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'headings'), 'headings', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PrintOptions_headings', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    headings = property(__headings.value, __headings.set, None, u'Print Headings')

    
    # Attribute gridLines uses Python identifier gridLines
    __gridLines = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gridLines'), 'gridLines', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PrintOptions_gridLines', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    gridLines = property(__gridLines.value, __gridLines.set, None, u'Print Grid Lines')

    
    # Attribute horizontalCentered uses Python identifier horizontalCentered
    __horizontalCentered = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'horizontalCentered'), 'horizontalCentered', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PrintOptions_horizontalCentered', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    horizontalCentered = property(__horizontalCentered.value, __horizontalCentered.set, None, u'Horizontal Centered')

    
    # Attribute gridLinesSet uses Python identifier gridLinesSet
    __gridLinesSet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gridLinesSet'), 'gridLinesSet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PrintOptions_gridLinesSet', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    gridLinesSet = property(__gridLinesSet.value, __gridLinesSet.set, None, u'Grid Lines Set')

    
    # Attribute verticalCentered uses Python identifier verticalCentered
    __verticalCentered = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'verticalCentered'), 'verticalCentered', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PrintOptions_verticalCentered', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    verticalCentered = property(__verticalCentered.value, __verticalCentered.set, None, u'Vertical Centered')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __headings.name() : __headings,
        __gridLines.name() : __gridLines,
        __horizontalCentered.name() : __horizontalCentered,
        __gridLinesSet.name() : __gridLinesSet,
        __verticalCentered.name() : __verticalCentered
    }
Namespace.addCategoryObject('typeBinding', u'CT_PrintOptions', CT_PrintOptions)


# Complex type CT_WebPublishItems with content type ELEMENT_ONLY
class CT_WebPublishItems (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_WebPublishItems')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}webPublishItem uses Python identifier webPublishItem
    __webPublishItem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'webPublishItem'), 'webPublishItem', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishItems_httpschemas_openxmlformats_orgspreadsheetml2006mainwebPublishItem', True)

    
    webPublishItem = property(__webPublishItem.value, __webPublishItem.set, None, u'Web Publishing Item')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishItems_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Web Publishing Items Count')


    _ElementMap = {
        __webPublishItem.name() : __webPublishItem
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_WebPublishItems', CT_WebPublishItems)


# Complex type CT_FunctionGroup with content type EMPTY
class CT_FunctionGroup (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_FunctionGroup')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FunctionGroup_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __name.name() : __name
    }
Namespace.addCategoryObject('typeBinding', u'CT_FunctionGroup', CT_FunctionGroup)


# Complex type CT_NumFmt with content type EMPTY
class CT_NumFmt (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_NumFmt')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute numFmtId uses Python identifier numFmtId
    __numFmtId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numFmtId'), 'numFmtId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_NumFmt_numFmtId', ST_NumFmtId, required=True)
    
    numFmtId = property(__numFmtId.value, __numFmtId.set, None, u'Number Format Id')

    
    # Attribute formatCode uses Python identifier formatCode
    __formatCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'formatCode'), 'formatCode', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_NumFmt_formatCode', _s.ST_Xstring, required=True)
    
    formatCode = property(__formatCode.value, __formatCode.set, None, u'Number Format Code')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __numFmtId.name() : __numFmtId,
        __formatCode.name() : __formatCode
    }
Namespace.addCategoryObject('typeBinding', u'CT_NumFmt', CT_NumFmt)


# Complex type CT_SheetView with content type ELEMENT_ONLY
class CT_SheetView (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SheetView')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pane uses Python identifier pane
    __pane = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pane'), 'pane', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainpane', False)

    
    pane = property(__pane.value, __pane.set, None, u'View Pane')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pivotSelection uses Python identifier pivotSelection
    __pivotSelection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pivotSelection'), 'pivotSelection', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainpivotSelection', True)

    
    pivotSelection = property(__pivotSelection.value, __pivotSelection.set, None, u'PivotTable Selection')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}selection uses Python identifier selection
    __selection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'selection'), 'selection', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainselection', True)

    
    selection = property(__selection.value, __selection.set, None, u'Selection')

    
    # Attribute topLeftCell uses Python identifier topLeftCell
    __topLeftCell = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'topLeftCell'), 'topLeftCell', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_topLeftCell', ST_CellRef)
    
    topLeftCell = property(__topLeftCell.value, __topLeftCell.set, None, u'Top Left Visible Cell')

    
    # Attribute zoomScaleSheetLayoutView uses Python identifier zoomScaleSheetLayoutView
    __zoomScaleSheetLayoutView = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'zoomScaleSheetLayoutView'), 'zoomScaleSheetLayoutView', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_zoomScaleSheetLayoutView', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    zoomScaleSheetLayoutView = property(__zoomScaleSheetLayoutView.value, __zoomScaleSheetLayoutView.set, None, u'Zoom Scale Page Break Preview')

    
    # Attribute showRuler uses Python identifier showRuler
    __showRuler = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showRuler'), 'showRuler', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_showRuler', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showRuler = property(__showRuler.value, __showRuler.set, None, u'Show Ruler')

    
    # Attribute showGridLines uses Python identifier showGridLines
    __showGridLines = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showGridLines'), 'showGridLines', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_showGridLines', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showGridLines = property(__showGridLines.value, __showGridLines.set, None, u'Show Grid Lines')

    
    # Attribute colorId uses Python identifier colorId
    __colorId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'colorId'), 'colorId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_colorId', pyxb.binding.datatypes.unsignedInt, unicode_default=u'64')
    
    colorId = property(__colorId.value, __colorId.set, None, u'Color Id')

    
    # Attribute showOutlineSymbols uses Python identifier showOutlineSymbols
    __showOutlineSymbols = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showOutlineSymbols'), 'showOutlineSymbols', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_showOutlineSymbols', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showOutlineSymbols = property(__showOutlineSymbols.value, __showOutlineSymbols.set, None, u'Show Outline Symbols')

    
    # Attribute workbookViewId uses Python identifier workbookViewId
    __workbookViewId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'workbookViewId'), 'workbookViewId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_workbookViewId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    workbookViewId = property(__workbookViewId.value, __workbookViewId.set, None, u'Workbook View Index')

    
    # Attribute showRowColHeaders uses Python identifier showRowColHeaders
    __showRowColHeaders = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showRowColHeaders'), 'showRowColHeaders', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_showRowColHeaders', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showRowColHeaders = property(__showRowColHeaders.value, __showRowColHeaders.set, None, u'Show Headers')

    
    # Attribute showZeros uses Python identifier showZeros
    __showZeros = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showZeros'), 'showZeros', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_showZeros', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showZeros = property(__showZeros.value, __showZeros.set, None, u'Show Zero Values')

    
    # Attribute zoomScale uses Python identifier zoomScale
    __zoomScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'zoomScale'), 'zoomScale', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_zoomScale', pyxb.binding.datatypes.unsignedInt, unicode_default=u'100')
    
    zoomScale = property(__zoomScale.value, __zoomScale.set, None, u'Zoom Scale')

    
    # Attribute defaultGridColor uses Python identifier defaultGridColor
    __defaultGridColor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultGridColor'), 'defaultGridColor', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_defaultGridColor', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    defaultGridColor = property(__defaultGridColor.value, __defaultGridColor.set, None, u'Default Grid Color')

    
    # Attribute zoomScalePageLayoutView uses Python identifier zoomScalePageLayoutView
    __zoomScalePageLayoutView = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'zoomScalePageLayoutView'), 'zoomScalePageLayoutView', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_zoomScalePageLayoutView', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    zoomScalePageLayoutView = property(__zoomScalePageLayoutView.value, __zoomScalePageLayoutView.set, None, u'Zoom Scale Page Layout View')

    
    # Attribute zoomScaleNormal uses Python identifier zoomScaleNormal
    __zoomScaleNormal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'zoomScaleNormal'), 'zoomScaleNormal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_zoomScaleNormal', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    zoomScaleNormal = property(__zoomScaleNormal.value, __zoomScaleNormal.set, None, u'Zoom Scale Normal View')

    
    # Attribute showWhiteSpace uses Python identifier showWhiteSpace
    __showWhiteSpace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showWhiteSpace'), 'showWhiteSpace', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_showWhiteSpace', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showWhiteSpace = property(__showWhiteSpace.value, __showWhiteSpace.set, None, u'Show White Space')

    
    # Attribute rightToLeft uses Python identifier rightToLeft
    __rightToLeft = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rightToLeft'), 'rightToLeft', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_rightToLeft', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    rightToLeft = property(__rightToLeft.value, __rightToLeft.set, None, u'Right To Left')

    
    # Attribute windowProtection uses Python identifier windowProtection
    __windowProtection = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'windowProtection'), 'windowProtection', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_windowProtection', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    windowProtection = property(__windowProtection.value, __windowProtection.set, None, u'Window Protection')

    
    # Attribute view uses Python identifier view
    __view = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'view'), 'view', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_view', ST_SheetViewType, unicode_default=u'normal')
    
    view = property(__view.value, __view.set, None, u'View Type')

    
    # Attribute tabSelected uses Python identifier tabSelected
    __tabSelected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tabSelected'), 'tabSelected', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_tabSelected', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    tabSelected = property(__tabSelected.value, __tabSelected.set, None, u'Sheet Tab Selected')

    
    # Attribute showFormulas uses Python identifier showFormulas
    __showFormulas = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showFormulas'), 'showFormulas', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetView_showFormulas', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showFormulas = property(__showFormulas.value, __showFormulas.set, None, u'Show Formulas')


    _ElementMap = {
        __extLst.name() : __extLst,
        __pane.name() : __pane,
        __pivotSelection.name() : __pivotSelection,
        __selection.name() : __selection
    }
    _AttributeMap = {
        __topLeftCell.name() : __topLeftCell,
        __zoomScaleSheetLayoutView.name() : __zoomScaleSheetLayoutView,
        __showRuler.name() : __showRuler,
        __showGridLines.name() : __showGridLines,
        __colorId.name() : __colorId,
        __showOutlineSymbols.name() : __showOutlineSymbols,
        __workbookViewId.name() : __workbookViewId,
        __showRowColHeaders.name() : __showRowColHeaders,
        __showZeros.name() : __showZeros,
        __zoomScale.name() : __zoomScale,
        __defaultGridColor.name() : __defaultGridColor,
        __zoomScalePageLayoutView.name() : __zoomScalePageLayoutView,
        __zoomScaleNormal.name() : __zoomScaleNormal,
        __showWhiteSpace.name() : __showWhiteSpace,
        __rightToLeft.name() : __rightToLeft,
        __windowProtection.name() : __windowProtection,
        __view.name() : __view,
        __tabSelected.name() : __tabSelected,
        __showFormulas.name() : __showFormulas
    }
Namespace.addCategoryObject('typeBinding', u'CT_SheetView', CT_SheetView)


# Complex type CT_ChartsheetPr with content type ELEMENT_ONLY
class CT_ChartsheetPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ChartsheetPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tabColor uses Python identifier tabColor
    __tabColor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tabColor'), 'tabColor', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetPr_httpschemas_openxmlformats_orgspreadsheetml2006maintabColor', False)

    
    tabColor = property(__tabColor.value, __tabColor.set, None, None)

    
    # Attribute codeName uses Python identifier codeName
    __codeName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeName'), 'codeName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetPr_codeName', pyxb.binding.datatypes.string)
    
    codeName = property(__codeName.value, __codeName.set, None, u'Code Name')

    
    # Attribute published uses Python identifier published
    __published = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'published'), 'published', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartsheetPr_published', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    published = property(__published.value, __published.set, None, u'Published')


    _ElementMap = {
        __tabColor.name() : __tabColor
    }
    _AttributeMap = {
        __codeName.name() : __codeName,
        __published.name() : __published
    }
Namespace.addCategoryObject('typeBinding', u'CT_ChartsheetPr', CT_ChartsheetPr)


# Complex type CT_ObjectAnchor with content type ELEMENT_ONLY
class CT_ObjectAnchor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ObjectAnchor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing}to uses Python identifier to
    __to = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing'), u'to'), 'to', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectAnchor_httpschemas_openxmlformats_orgdrawingml2006spreadsheetDrawingto', False)

    
    to = property(__to.value, __to.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing}from uses Python identifier from_
    __from = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing'), u'from'), 'from_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectAnchor_httpschemas_openxmlformats_orgdrawingml2006spreadsheetDrawingfrom', False)

    
    from_ = property(__from.value, __from.set, None, None)

    
    # Attribute sizeWithCells uses Python identifier sizeWithCells
    __sizeWithCells = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sizeWithCells'), 'sizeWithCells', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectAnchor_sizeWithCells', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    sizeWithCells = property(__sizeWithCells.value, __sizeWithCells.set, None, u'Size With Cells')

    
    # Attribute z-order uses Python identifier z_order
    __z_order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'z-order'), 'z_order', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectAnchor_z_order', pyxb.binding.datatypes.unsignedInt)
    
    z_order = property(__z_order.value, __z_order.set, None, u'Z-Order')

    
    # Attribute moveWithCells uses Python identifier moveWithCells
    __moveWithCells = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'moveWithCells'), 'moveWithCells', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectAnchor_moveWithCells', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    moveWithCells = property(__moveWithCells.value, __moveWithCells.set, None, u'Move With Cells')


    _ElementMap = {
        __to.name() : __to,
        __from.name() : __from
    }
    _AttributeMap = {
        __sizeWithCells.name() : __sizeWithCells,
        __z_order.name() : __z_order,
        __moveWithCells.name() : __moveWithCells
    }
Namespace.addCategoryObject('typeBinding', u'CT_ObjectAnchor', CT_ObjectAnchor)


# Complex type CT_UndoInfo with content type EMPTY
class CT_UndoInfo (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_UndoInfo')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ref3D uses Python identifier ref3D
    __ref3D = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref3D'), 'ref3D', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_UndoInfo_ref3D', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ref3D = property(__ref3D.value, __ref3D.set, None, u'Reference 3D')

    
    # Attribute index uses Python identifier index
    __index = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'index'), 'index', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_UndoInfo_index', pyxb.binding.datatypes.unsignedInt, required=True)
    
    index = property(__index.value, __index.set, None, u'Index')

    
    # Attribute sId uses Python identifier sId
    __sId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sId'), 'sId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_UndoInfo_sId', pyxb.binding.datatypes.unsignedInt)
    
    sId = property(__sId.value, __sId.set, None, u'Sheet Id')

    
    # Attribute array uses Python identifier array
    __array = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'array'), 'array', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_UndoInfo_array', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    array = property(__array.value, __array.set, None, u'Array Formula')

    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_UndoInfo_r', ST_CellRef)
    
    r = property(__r.value, __r.set, None, u'Cell Reference')

    
    # Attribute v uses Python identifier v
    __v = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'v'), 'v', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_UndoInfo_v', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    v = property(__v.value, __v.set, None, u'Value Needed')

    
    # Attribute dn uses Python identifier dn
    __dn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dn'), 'dn', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_UndoInfo_dn', _s.ST_Xstring)
    
    dn = property(__dn.value, __dn.set, None, u'Defined Name')

    
    # Attribute nf uses Python identifier nf
    __nf = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nf'), 'nf', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_UndoInfo_nf', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    nf = property(__nf.value, __nf.set, None, u'Defined Name Formula')

    
    # Attribute cs uses Python identifier cs
    __cs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cs'), 'cs', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_UndoInfo_cs', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    cs = property(__cs.value, __cs.set, None, u'Cross Sheet Move')

    
    # Attribute exp uses Python identifier exp
    __exp = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'exp'), 'exp', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_UndoInfo_exp', ST_FormulaExpression, required=True)
    
    exp = property(__exp.value, __exp.set, None, u'Expression')

    
    # Attribute dr uses Python identifier dr
    __dr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dr'), 'dr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_UndoInfo_dr', ST_RefA, required=True)
    
    dr = property(__dr.value, __dr.set, None, u'Range')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __ref3D.name() : __ref3D,
        __index.name() : __index,
        __sId.name() : __sId,
        __array.name() : __array,
        __r.name() : __r,
        __v.name() : __v,
        __dn.name() : __dn,
        __nf.name() : __nf,
        __cs.name() : __cs,
        __exp.name() : __exp,
        __dr.name() : __dr
    }
Namespace.addCategoryObject('typeBinding', u'CT_UndoInfo', CT_UndoInfo)


# Complex type CT_CacheFields with content type ELEMENT_ONLY
class CT_CacheFields (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CacheFields')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cacheField uses Python identifier cacheField
    __cacheField = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cacheField'), 'cacheField', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheFields_httpschemas_openxmlformats_orgspreadsheetml2006maincacheField', True)

    
    cacheField = property(__cacheField.value, __cacheField.set, None, u'PivotCache Field')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheFields_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Field Count')


    _ElementMap = {
        __cacheField.name() : __cacheField
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_CacheFields', CT_CacheFields)


# Complex type CT_WebPr with content type ELEMENT_ONLY
class CT_WebPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_WebPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tables uses Python identifier tables
    __tables = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tables'), 'tables', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPr_httpschemas_openxmlformats_orgspreadsheetml2006maintables', False)

    
    tables = property(__tables.value, __tables.set, None, u'Tables')

    
    # Attribute editPage uses Python identifier editPage
    __editPage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'editPage'), 'editPage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPr_editPage', _s.ST_Xstring)
    
    editPage = property(__editPage.value, __editPage.set, None, u'Edit Query URL')

    
    # Attribute htmlTables uses Python identifier htmlTables
    __htmlTables = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'htmlTables'), 'htmlTables', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPr_htmlTables', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    htmlTables = property(__htmlTables.value, __htmlTables.set, None, u'HTML Tables Only')

    
    # Attribute xl2000 uses Python identifier xl2000
    __xl2000 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xl2000'), 'xl2000', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPr_xl2000', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    xl2000 = property(__xl2000.value, __xl2000.set, None, u'Refreshed in Excel 2000')

    
    # Attribute parsePre uses Python identifier parsePre
    __parsePre = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parsePre'), 'parsePre', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPr_parsePre', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    parsePre = property(__parsePre.value, __parsePre.set, None, u'Parse PRE')

    
    # Attribute url uses Python identifier url
    __url = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'url'), 'url', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPr_url', _s.ST_Xstring)
    
    url = property(__url.value, __url.set, None, u'URL')

    
    # Attribute consecutive uses Python identifier consecutive
    __consecutive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'consecutive'), 'consecutive', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPr_consecutive', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    consecutive = property(__consecutive.value, __consecutive.set, None, u'Consecutive Delimiters')

    
    # Attribute post uses Python identifier post
    __post = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'post'), 'post', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPr_post', _s.ST_Xstring)
    
    post = property(__post.value, __post.set, None, u'Web Post')

    
    # Attribute xml uses Python identifier xml
    __xml = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xml'), 'xml', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPr_xml', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    xml = property(__xml.value, __xml.set, None, u'XML Source')

    
    # Attribute xl97 uses Python identifier xl97
    __xl97 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xl97'), 'xl97', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPr_xl97', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    xl97 = property(__xl97.value, __xl97.set, None, u'Created in Excel 97')

    
    # Attribute firstRow uses Python identifier firstRow
    __firstRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'firstRow'), 'firstRow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPr_firstRow', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    firstRow = property(__firstRow.value, __firstRow.set, None, u'Use First Row')

    
    # Attribute htmlFormat uses Python identifier htmlFormat
    __htmlFormat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'htmlFormat'), 'htmlFormat', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPr_htmlFormat', ST_HtmlFmt, unicode_default=u'none')
    
    htmlFormat = property(__htmlFormat.value, __htmlFormat.set, None, u'HTML Formatting Handling')

    
    # Attribute textDates uses Python identifier textDates
    __textDates = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'textDates'), 'textDates', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPr_textDates', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    textDates = property(__textDates.value, __textDates.set, None, u'Dates as Text')

    
    # Attribute sourceData uses Python identifier sourceData
    __sourceData = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sourceData'), 'sourceData', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPr_sourceData', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    sourceData = property(__sourceData.value, __sourceData.set, None, u'Import XML Source Data')


    _ElementMap = {
        __tables.name() : __tables
    }
    _AttributeMap = {
        __editPage.name() : __editPage,
        __htmlTables.name() : __htmlTables,
        __xl2000.name() : __xl2000,
        __parsePre.name() : __parsePre,
        __url.name() : __url,
        __consecutive.name() : __consecutive,
        __post.name() : __post,
        __xml.name() : __xml,
        __xl97.name() : __xl97,
        __firstRow.name() : __firstRow,
        __htmlFormat.name() : __htmlFormat,
        __textDates.name() : __textDates,
        __sourceData.name() : __sourceData
    }
Namespace.addCategoryObject('typeBinding', u'CT_WebPr', CT_WebPr)


# Complex type CT_ChartFormats with content type ELEMENT_ONLY
class CT_ChartFormats (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ChartFormats')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}chartFormat uses Python identifier chartFormat
    __chartFormat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'chartFormat'), 'chartFormat', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartFormats_httpschemas_openxmlformats_orgspreadsheetml2006mainchartFormat', True)

    
    chartFormat = property(__chartFormat.value, __chartFormat.set, None, u'PivotChart Format')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartFormats_count', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    count = property(__count.value, __count.set, None, u'Format Count')


    _ElementMap = {
        __chartFormat.name() : __chartFormat
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_ChartFormats', CT_ChartFormats)


# Complex type CT_CalculatedItems with content type ELEMENT_ONLY
class CT_CalculatedItems (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CalculatedItems')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}calculatedItem uses Python identifier calculatedItem
    __calculatedItem = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'calculatedItem'), 'calculatedItem', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedItems_httpschemas_openxmlformats_orgspreadsheetml2006maincalculatedItem', True)

    
    calculatedItem = property(__calculatedItem.value, __calculatedItem.set, None, u'Calculated Item')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalculatedItems_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Calculated Item Formula Count')


    _ElementMap = {
        __calculatedItem.name() : __calculatedItem
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_CalculatedItems', CT_CalculatedItems)


# Complex type CT_DateGroupItem with content type EMPTY
class CT_DateGroupItem (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DateGroupItem')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute month uses Python identifier month
    __month = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'month'), 'month', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DateGroupItem_month', pyxb.binding.datatypes.unsignedShort)
    
    month = property(__month.value, __month.set, None, u'Month')

    
    # Attribute second uses Python identifier second
    __second = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'second'), 'second', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DateGroupItem_second', pyxb.binding.datatypes.unsignedShort)
    
    second = property(__second.value, __second.set, None, u'Second')

    
    # Attribute year uses Python identifier year
    __year = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'year'), 'year', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DateGroupItem_year', pyxb.binding.datatypes.unsignedShort, required=True)
    
    year = property(__year.value, __year.set, None, u'Year')

    
    # Attribute dateTimeGrouping uses Python identifier dateTimeGrouping
    __dateTimeGrouping = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dateTimeGrouping'), 'dateTimeGrouping', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DateGroupItem_dateTimeGrouping', ST_DateTimeGrouping, required=True)
    
    dateTimeGrouping = property(__dateTimeGrouping.value, __dateTimeGrouping.set, None, u'Date Time Grouping')

    
    # Attribute hour uses Python identifier hour
    __hour = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hour'), 'hour', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DateGroupItem_hour', pyxb.binding.datatypes.unsignedShort)
    
    hour = property(__hour.value, __hour.set, None, u'Hour')

    
    # Attribute day uses Python identifier day
    __day = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'day'), 'day', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DateGroupItem_day', pyxb.binding.datatypes.unsignedShort)
    
    day = property(__day.value, __day.set, None, u'Day')

    
    # Attribute minute uses Python identifier minute
    __minute = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minute'), 'minute', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DateGroupItem_minute', pyxb.binding.datatypes.unsignedShort)
    
    minute = property(__minute.value, __minute.set, None, u'Minute')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __month.name() : __month,
        __second.name() : __second,
        __year.name() : __year,
        __dateTimeGrouping.name() : __dateTimeGrouping,
        __hour.name() : __hour,
        __day.name() : __day,
        __minute.name() : __minute
    }
Namespace.addCategoryObject('typeBinding', u'CT_DateGroupItem', CT_DateGroupItem)


# Complex type CT_Hyperlink with content type EMPTY
class CT_Hyperlink (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Hyperlink')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Hyperlink_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Hyperlink_ref', ST_Ref, required=True)
    
    ref = property(__ref.value, __ref.set, None, u'Reference')

    
    # Attribute display uses Python identifier display
    __display = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'display'), 'display', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Hyperlink_display', _s.ST_Xstring)
    
    display = property(__display.value, __display.set, None, u'Display String')

    
    # Attribute tooltip uses Python identifier tooltip
    __tooltip = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tooltip'), 'tooltip', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Hyperlink_tooltip', _s.ST_Xstring)
    
    tooltip = property(__tooltip.value, __tooltip.set, None, u'Tool Tip')

    
    # Attribute location uses Python identifier location
    __location = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'location'), 'location', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Hyperlink_location', _s.ST_Xstring)
    
    location = property(__location.value, __location.set, None, u'Location')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id,
        __ref.name() : __ref,
        __display.name() : __display,
        __tooltip.name() : __tooltip,
        __location.name() : __location
    }
Namespace.addCategoryObject('typeBinding', u'CT_Hyperlink', CT_Hyperlink)


# Complex type CT_IconFilter with content type EMPTY
class CT_IconFilter (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_IconFilter')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute iconSet uses Python identifier iconSet
    __iconSet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'iconSet'), 'iconSet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IconFilter_iconSet', ST_IconSetType, required=True)
    
    iconSet = property(__iconSet.value, __iconSet.set, None, u'Icon Set')

    
    # Attribute iconId uses Python identifier iconId
    __iconId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'iconId'), 'iconId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IconFilter_iconId', pyxb.binding.datatypes.unsignedInt)
    
    iconId = property(__iconId.value, __iconId.set, None, u'Icon Id')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __iconSet.name() : __iconSet,
        __iconId.name() : __iconId
    }
Namespace.addCategoryObject('typeBinding', u'CT_IconFilter', CT_IconFilter)


# Complex type CT_Comment with content type ELEMENT_ONLY
class CT_Comment (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Comment')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}commentPr uses Python identifier commentPr
    __commentPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'commentPr'), 'commentPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Comment_httpschemas_openxmlformats_orgspreadsheetml2006maincommentPr', False)

    
    commentPr = property(__commentPr.value, __commentPr.set, None, u'Comment Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}text uses Python identifier text
    __text = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'text'), 'text', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Comment_httpschemas_openxmlformats_orgspreadsheetml2006maintext', False)

    
    text = property(__text.value, __text.set, None, u'Comment Text')

    
    # Attribute authorId uses Python identifier authorId
    __authorId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'authorId'), 'authorId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Comment_authorId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    authorId = property(__authorId.value, __authorId.set, None, u'Author Id')

    
    # Attribute guid uses Python identifier guid
    __guid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'guid'), 'guid', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Comment_guid', _s.ST_Guid)
    
    guid = property(__guid.value, __guid.set, None, u'Unique Identifier for Comment')

    
    # Attribute shapeId uses Python identifier shapeId
    __shapeId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'shapeId'), 'shapeId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Comment_shapeId', pyxb.binding.datatypes.unsignedInt)
    
    shapeId = property(__shapeId.value, __shapeId.set, None, u'Shape ID')

    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Comment_ref', ST_Ref, required=True)
    
    ref = property(__ref.value, __ref.set, None, u'Cell Reference')


    _ElementMap = {
        __commentPr.name() : __commentPr,
        __text.name() : __text
    }
    _AttributeMap = {
        __authorId.name() : __authorId,
        __guid.name() : __guid,
        __shapeId.name() : __shapeId,
        __ref.name() : __ref
    }
Namespace.addCategoryObject('typeBinding', u'CT_Comment', CT_Comment)


# Complex type CT_FieldGroup with content type ELEMENT_ONLY
class CT_FieldGroup (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_FieldGroup')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}groupItems uses Python identifier groupItems
    __groupItems = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'groupItems'), 'groupItems', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FieldGroup_httpschemas_openxmlformats_orgspreadsheetml2006maingroupItems', False)

    
    groupItems = property(__groupItems.value, __groupItems.set, None, u'OLAP Group Items')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rangePr uses Python identifier rangePr
    __rangePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rangePr'), 'rangePr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FieldGroup_httpschemas_openxmlformats_orgspreadsheetml2006mainrangePr', False)

    
    rangePr = property(__rangePr.value, __rangePr.set, None, u'Range Grouping Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}discretePr uses Python identifier discretePr
    __discretePr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'discretePr'), 'discretePr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FieldGroup_httpschemas_openxmlformats_orgspreadsheetml2006maindiscretePr', False)

    
    discretePr = property(__discretePr.value, __discretePr.set, None, u'Discrete Grouping Properties')

    
    # Attribute par uses Python identifier par
    __par = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'par'), 'par', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FieldGroup_par', pyxb.binding.datatypes.unsignedInt)
    
    par = property(__par.value, __par.set, None, u'Parent')

    
    # Attribute base uses Python identifier base
    __base = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'base'), 'base', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FieldGroup_base', pyxb.binding.datatypes.unsignedInt)
    
    base = property(__base.value, __base.set, None, u'Field Base')


    _ElementMap = {
        __groupItems.name() : __groupItems,
        __rangePr.name() : __rangePr,
        __discretePr.name() : __discretePr
    }
    _AttributeMap = {
        __par.name() : __par,
        __base.name() : __base
    }
Namespace.addCategoryObject('typeBinding', u'CT_FieldGroup', CT_FieldGroup)


# Complex type CT_Groups with content type ELEMENT_ONLY
class CT_Groups (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Groups')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}group uses Python identifier group
    __group = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'group'), 'group', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Groups_httpschemas_openxmlformats_orgspreadsheetml2006maingroup', True)

    
    group = property(__group.value, __group.set, None, u'OLAP Group')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Groups_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Level Group Count')


    _ElementMap = {
        __group.name() : __group
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_Groups', CT_Groups)


# Complex type CT_SheetFormatPr with content type EMPTY
class CT_SheetFormatPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SheetFormatPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute defaultColWidth uses Python identifier defaultColWidth
    __defaultColWidth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultColWidth'), 'defaultColWidth', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetFormatPr_defaultColWidth', pyxb.binding.datatypes.double)
    
    defaultColWidth = property(__defaultColWidth.value, __defaultColWidth.set, None, u'Default Column Width')

    
    # Attribute baseColWidth uses Python identifier baseColWidth
    __baseColWidth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'baseColWidth'), 'baseColWidth', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetFormatPr_baseColWidth', pyxb.binding.datatypes.unsignedInt, unicode_default=u'8')
    
    baseColWidth = property(__baseColWidth.value, __baseColWidth.set, None, u'Base Column Width')

    
    # Attribute outlineLevelRow uses Python identifier outlineLevelRow
    __outlineLevelRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'outlineLevelRow'), 'outlineLevelRow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetFormatPr_outlineLevelRow', pyxb.binding.datatypes.unsignedByte, unicode_default=u'0')
    
    outlineLevelRow = property(__outlineLevelRow.value, __outlineLevelRow.set, None, u'Maximum Outline Row')

    
    # Attribute defaultRowHeight uses Python identifier defaultRowHeight
    __defaultRowHeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultRowHeight'), 'defaultRowHeight', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetFormatPr_defaultRowHeight', pyxb.binding.datatypes.double, required=True)
    
    defaultRowHeight = property(__defaultRowHeight.value, __defaultRowHeight.set, None, u'Default Row Height')

    
    # Attribute outlineLevelCol uses Python identifier outlineLevelCol
    __outlineLevelCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'outlineLevelCol'), 'outlineLevelCol', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetFormatPr_outlineLevelCol', pyxb.binding.datatypes.unsignedByte, unicode_default=u'0')
    
    outlineLevelCol = property(__outlineLevelCol.value, __outlineLevelCol.set, None, u'Column Outline Level')

    
    # Attribute customHeight uses Python identifier customHeight
    __customHeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'customHeight'), 'customHeight', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetFormatPr_customHeight', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    customHeight = property(__customHeight.value, __customHeight.set, None, u'Custom Height')

    
    # Attribute thickTop uses Python identifier thickTop
    __thickTop = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'thickTop'), 'thickTop', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetFormatPr_thickTop', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    thickTop = property(__thickTop.value, __thickTop.set, None, u'Thick Top Border')

    
    # Attribute zeroHeight uses Python identifier zeroHeight
    __zeroHeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'zeroHeight'), 'zeroHeight', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetFormatPr_zeroHeight', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    zeroHeight = property(__zeroHeight.value, __zeroHeight.set, None, u'Hidden By Default')

    
    # Attribute thickBottom uses Python identifier thickBottom
    __thickBottom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'thickBottom'), 'thickBottom', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetFormatPr_thickBottom', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    thickBottom = property(__thickBottom.value, __thickBottom.set, None, u'Thick Bottom Border')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __defaultColWidth.name() : __defaultColWidth,
        __baseColWidth.name() : __baseColWidth,
        __outlineLevelRow.name() : __outlineLevelRow,
        __defaultRowHeight.name() : __defaultRowHeight,
        __outlineLevelCol.name() : __outlineLevelCol,
        __customHeight.name() : __customHeight,
        __thickTop.name() : __thickTop,
        __zeroHeight.name() : __zeroHeight,
        __thickBottom.name() : __thickBottom
    }
Namespace.addCategoryObject('typeBinding', u'CT_SheetFormatPr', CT_SheetFormatPr)


# Complex type CT_QueryTableRefresh with content type ELEMENT_ONLY
class CT_QueryTableRefresh (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_QueryTableRefresh')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableRefresh_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}queryTableFields uses Python identifier queryTableFields
    __queryTableFields = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'queryTableFields'), 'queryTableFields', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableRefresh_httpschemas_openxmlformats_orgspreadsheetml2006mainqueryTableFields', False)

    
    queryTableFields = property(__queryTableFields.value, __queryTableFields.set, None, u'Query table fields')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sortState uses Python identifier sortState
    __sortState = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sortState'), 'sortState', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableRefresh_httpschemas_openxmlformats_orgspreadsheetml2006mainsortState', False)

    
    sortState = property(__sortState.value, __sortState.set, None, u'Sort State')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}queryTableDeletedFields uses Python identifier queryTableDeletedFields
    __queryTableDeletedFields = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'queryTableDeletedFields'), 'queryTableDeletedFields', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableRefresh_httpschemas_openxmlformats_orgspreadsheetml2006mainqueryTableDeletedFields', False)

    
    queryTableDeletedFields = property(__queryTableDeletedFields.value, __queryTableDeletedFields.set, None, u'Deleted Fields')

    
    # Attribute nextId uses Python identifier nextId
    __nextId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nextId'), 'nextId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableRefresh_nextId', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    nextId = property(__nextId.value, __nextId.set, None, u'Next field id')

    
    # Attribute unboundColumnsLeft uses Python identifier unboundColumnsLeft
    __unboundColumnsLeft = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'unboundColumnsLeft'), 'unboundColumnsLeft', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableRefresh_unboundColumnsLeft', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    unboundColumnsLeft = property(__unboundColumnsLeft.value, __unboundColumnsLeft.set, None, u'Columns Left')

    
    # Attribute preserveSortFilterLayout uses Python identifier preserveSortFilterLayout
    __preserveSortFilterLayout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'preserveSortFilterLayout'), 'preserveSortFilterLayout', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableRefresh_preserveSortFilterLayout', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    preserveSortFilterLayout = property(__preserveSortFilterLayout.value, __preserveSortFilterLayout.set, None, u'Preserve Sort & Filter Layout')

    
    # Attribute unboundColumnsRight uses Python identifier unboundColumnsRight
    __unboundColumnsRight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'unboundColumnsRight'), 'unboundColumnsRight', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableRefresh_unboundColumnsRight', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    unboundColumnsRight = property(__unboundColumnsRight.value, __unboundColumnsRight.set, None, u'Columns Right')

    
    # Attribute fieldIdWrapped uses Python identifier fieldIdWrapped
    __fieldIdWrapped = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fieldIdWrapped'), 'fieldIdWrapped', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableRefresh_fieldIdWrapped', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    fieldIdWrapped = property(__fieldIdWrapped.value, __fieldIdWrapped.set, None, u'Next Field Id Wrapped')

    
    # Attribute headersInLastRefresh uses Python identifier headersInLastRefresh
    __headersInLastRefresh = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'headersInLastRefresh'), 'headersInLastRefresh', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableRefresh_headersInLastRefresh', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    headersInLastRefresh = property(__headersInLastRefresh.value, __headersInLastRefresh.set, None, u'Headers In Last Refresh')

    
    # Attribute minimumVersion uses Python identifier minimumVersion
    __minimumVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimumVersion'), 'minimumVersion', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableRefresh_minimumVersion', pyxb.binding.datatypes.unsignedByte, unicode_default=u'0')
    
    minimumVersion = property(__minimumVersion.value, __minimumVersion.set, None, u'Minimum Refresh Version')


    _ElementMap = {
        __extLst.name() : __extLst,
        __queryTableFields.name() : __queryTableFields,
        __sortState.name() : __sortState,
        __queryTableDeletedFields.name() : __queryTableDeletedFields
    }
    _AttributeMap = {
        __nextId.name() : __nextId,
        __unboundColumnsLeft.name() : __unboundColumnsLeft,
        __preserveSortFilterLayout.name() : __preserveSortFilterLayout,
        __unboundColumnsRight.name() : __unboundColumnsRight,
        __fieldIdWrapped.name() : __fieldIdWrapped,
        __headersInLastRefresh.name() : __headersInLastRefresh,
        __minimumVersion.name() : __minimumVersion
    }
Namespace.addCategoryObject('typeBinding', u'CT_QueryTableRefresh', CT_QueryTableRefresh)


# Complex type CT_RevisionMove with content type ELEMENT_ONLY
class CT_RevisionMove (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RevisionMove')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rfmt uses Python identifier rfmt
    __rfmt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rfmt'), 'rfmt', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionMove_httpschemas_openxmlformats_orgspreadsheetml2006mainrfmt', True)

    
    rfmt = property(__rfmt.value, __rfmt.set, None, u'Revision Format')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rcc uses Python identifier rcc
    __rcc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rcc'), 'rcc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionMove_httpschemas_openxmlformats_orgspreadsheetml2006mainrcc', True)

    
    rcc = property(__rcc.value, __rcc.set, None, u'Revision Cell Change')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}undo uses Python identifier undo
    __undo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'undo'), 'undo', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionMove_httpschemas_openxmlformats_orgspreadsheetml2006mainundo', True)

    
    undo = property(__undo.value, __undo.set, None, u'Undo')

    
    # Attribute sheetId uses Python identifier sheetId
    __sheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheetId'), 'sheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionMove_sheetId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    sheetId = property(__sheetId.value, __sheetId.set, None, u'Sheet Id')

    
    # Attribute ra uses Python identifier ra
    __ra = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ra'), 'ra', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionMove_ra', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ra = property(__ra.value, __ra.set, None, u'Revision Undo Rejected')

    
    # Attribute rId uses Python identifier rId
    __rId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rId'), 'rId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionMove_rId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    rId = property(__rId.value, __rId.set, None, u'Revision Id')

    
    # Attribute sourceSheetId uses Python identifier sourceSheetId
    __sourceSheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sourceSheetId'), 'sourceSheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionMove_sourceSheetId', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    sourceSheetId = property(__sourceSheetId.value, __sourceSheetId.set, None, u'Source Sheet Id')

    
    # Attribute destination uses Python identifier destination
    __destination = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'destination'), 'destination', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionMove_destination', ST_Ref, required=True)
    
    destination = property(__destination.value, __destination.set, None, u'Destination')

    
    # Attribute source uses Python identifier source
    __source = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'source'), 'source', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionMove_source', ST_Ref, required=True)
    
    source = property(__source.value, __source.set, None, u'Source')

    
    # Attribute ua uses Python identifier ua
    __ua = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ua'), 'ua', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionMove_ua', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ua = property(__ua.value, __ua.set, None, u'Revision From Rejection')


    _ElementMap = {
        __rfmt.name() : __rfmt,
        __rcc.name() : __rcc,
        __undo.name() : __undo
    }
    _AttributeMap = {
        __sheetId.name() : __sheetId,
        __ra.name() : __ra,
        __rId.name() : __rId,
        __sourceSheetId.name() : __sourceSheetId,
        __destination.name() : __destination,
        __source.name() : __source,
        __ua.name() : __ua
    }
Namespace.addCategoryObject('typeBinding', u'CT_RevisionMove', CT_RevisionMove)


# Complex type CT_RowFields with content type ELEMENT_ONLY
class CT_RowFields (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RowFields')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}field uses Python identifier field
    __field = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'field'), 'field', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RowFields_httpschemas_openxmlformats_orgspreadsheetml2006mainfield', True)

    
    field = property(__field.value, __field.set, None, u'Row Items')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RowFields_count', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    count = property(__count.value, __count.set, None, u'Repeated Items Count')


    _ElementMap = {
        __field.name() : __field
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_RowFields', CT_RowFields)


# Complex type CT_MeasureGroup with content type EMPTY
class CT_MeasureGroup (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MeasureGroup')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute caption uses Python identifier caption
    __caption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'caption'), 'caption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MeasureGroup_caption', _s.ST_Xstring, required=True)
    
    caption = property(__caption.value, __caption.set, None, u'Measure Group Display Name')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MeasureGroup_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Measure Group Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __caption.name() : __caption,
        __name.name() : __name
    }
Namespace.addCategoryObject('typeBinding', u'CT_MeasureGroup', CT_MeasureGroup)


# Complex type CT_FutureMetadataBlock with content type ELEMENT_ONLY
class CT_FutureMetadataBlock (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_FutureMetadataBlock')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FutureMetadataBlock_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Storage Area')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_FutureMetadataBlock', CT_FutureMetadataBlock)


# Complex type CT_Sheets with content type ELEMENT_ONLY
class CT_Sheets (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Sheets')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheet uses Python identifier sheet
    __sheet = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheet'), 'sheet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Sheets_httpschemas_openxmlformats_orgspreadsheetml2006mainsheet', True)

    
    sheet = property(__sheet.value, __sheet.set, None, u'Sheet Information')


    _ElementMap = {
        __sheet.name() : __sheet
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Sheets', CT_Sheets)


# Complex type CT_Metadata with content type ELEMENT_ONLY
class CT_Metadata (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Metadata')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}futureMetadata uses Python identifier futureMetadata
    __futureMetadata = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'futureMetadata'), 'futureMetadata', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Metadata_httpschemas_openxmlformats_orgspreadsheetml2006mainfutureMetadata', True)

    
    futureMetadata = property(__futureMetadata.value, __futureMetadata.set, None, u'Future Metadata')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Metadata_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cellMetadata uses Python identifier cellMetadata
    __cellMetadata = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cellMetadata'), 'cellMetadata', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Metadata_httpschemas_openxmlformats_orgspreadsheetml2006maincellMetadata', False)

    
    cellMetadata = property(__cellMetadata.value, __cellMetadata.set, None, u'Cell Metadata')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}valueMetadata uses Python identifier valueMetadata
    __valueMetadata = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'valueMetadata'), 'valueMetadata', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Metadata_httpschemas_openxmlformats_orgspreadsheetml2006mainvalueMetadata', False)

    
    valueMetadata = property(__valueMetadata.value, __valueMetadata.set, None, u'Value Metadata')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}metadataStrings uses Python identifier metadataStrings
    __metadataStrings = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'metadataStrings'), 'metadataStrings', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Metadata_httpschemas_openxmlformats_orgspreadsheetml2006mainmetadataStrings', False)

    
    metadataStrings = property(__metadataStrings.value, __metadataStrings.set, None, u'Metadata String Store')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}metadataTypes uses Python identifier metadataTypes
    __metadataTypes = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'metadataTypes'), 'metadataTypes', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Metadata_httpschemas_openxmlformats_orgspreadsheetml2006mainmetadataTypes', False)

    
    metadataTypes = property(__metadataTypes.value, __metadataTypes.set, None, u'Metadata Types Collection')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}mdxMetadata uses Python identifier mdxMetadata
    __mdxMetadata = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'mdxMetadata'), 'mdxMetadata', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Metadata_httpschemas_openxmlformats_orgspreadsheetml2006mainmdxMetadata', False)

    
    mdxMetadata = property(__mdxMetadata.value, __mdxMetadata.set, None, u'MDX Metadata Information')


    _ElementMap = {
        __futureMetadata.name() : __futureMetadata,
        __extLst.name() : __extLst,
        __cellMetadata.name() : __cellMetadata,
        __valueMetadata.name() : __valueMetadata,
        __metadataStrings.name() : __metadataStrings,
        __metadataTypes.name() : __metadataTypes,
        __mdxMetadata.name() : __mdxMetadata
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Metadata', CT_Metadata)


# Complex type CT_Parameter with content type EMPTY
class CT_Parameter (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Parameter')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute cell uses Python identifier cell
    __cell = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cell'), 'cell', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Parameter_cell', _s.ST_Xstring)
    
    cell = property(__cell.value, __cell.set, None, u'Cell Reference')

    
    # Attribute prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prompt'), 'prompt', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Parameter_prompt', _s.ST_Xstring)
    
    prompt = property(__prompt.value, __prompt.set, None, u'Parameter Prompt String')

    
    # Attribute boolean uses Python identifier boolean
    __boolean = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'boolean'), 'boolean', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Parameter_boolean', pyxb.binding.datatypes.boolean)
    
    boolean = property(__boolean.value, __boolean.set, None, u'Boolean')

    
    # Attribute sqlType uses Python identifier sqlType
    __sqlType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sqlType'), 'sqlType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Parameter_sqlType', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    sqlType = property(__sqlType.value, __sqlType.set, None, u'SQL Data Type')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Parameter_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'Parameter Name')

    
    # Attribute double uses Python identifier double
    __double = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'double'), 'double', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Parameter_double', pyxb.binding.datatypes.double)
    
    double = property(__double.value, __double.set, None, u'Double')

    
    # Attribute parameterType uses Python identifier parameterType
    __parameterType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parameterType'), 'parameterType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Parameter_parameterType', ST_ParameterType, unicode_default=u'prompt')
    
    parameterType = property(__parameterType.value, __parameterType.set, None, u'Parameter Type')

    
    # Attribute integer uses Python identifier integer
    __integer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'integer'), 'integer', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Parameter_integer', pyxb.binding.datatypes.int)
    
    integer = property(__integer.value, __integer.set, None, u'Integer')

    
    # Attribute string uses Python identifier string
    __string = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'string'), 'string', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Parameter_string', _s.ST_Xstring)
    
    string = property(__string.value, __string.set, None, u'String')

    
    # Attribute refreshOnChange uses Python identifier refreshOnChange
    __refreshOnChange = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refreshOnChange'), 'refreshOnChange', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Parameter_refreshOnChange', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    refreshOnChange = property(__refreshOnChange.value, __refreshOnChange.set, None, u'Refresh on Change')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __cell.name() : __cell,
        __prompt.name() : __prompt,
        __boolean.name() : __boolean,
        __sqlType.name() : __sqlType,
        __name.name() : __name,
        __double.name() : __double,
        __parameterType.name() : __parameterType,
        __integer.name() : __integer,
        __string.name() : __string,
        __refreshOnChange.name() : __refreshOnChange
    }
Namespace.addCategoryObject('typeBinding', u'CT_Parameter', CT_Parameter)


# Complex type CT_CustomFilter with content type EMPTY
class CT_CustomFilter (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CustomFilter')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute operator uses Python identifier operator
    __operator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'operator'), 'operator', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomFilter_operator', ST_FilterOperator, unicode_default=u'equal')
    
    operator = property(__operator.value, __operator.set, None, u'Filter Comparison Operator')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomFilter_val', _s.ST_Xstring)
    
    val = property(__val.value, __val.set, None, u'Top or Bottom Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __operator.name() : __operator,
        __val.name() : __val
    }
Namespace.addCategoryObject('typeBinding', u'CT_CustomFilter', CT_CustomFilter)


# Complex type CT_CacheHierarchy with content type ELEMENT_ONLY
class CT_CacheHierarchy (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CacheHierarchy')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}fieldsUsage uses Python identifier fieldsUsage
    __fieldsUsage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fieldsUsage'), 'fieldsUsage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_httpschemas_openxmlformats_orgspreadsheetml2006mainfieldsUsage', False)

    
    fieldsUsage = property(__fieldsUsage.value, __fieldsUsage.set, None, u'Fields Usage')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}groupLevels uses Python identifier groupLevels
    __groupLevels = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'groupLevels'), 'groupLevels', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_httpschemas_openxmlformats_orgspreadsheetml2006maingroupLevels', False)

    
    groupLevels = property(__groupLevels.value, __groupLevels.set, None, u'OLAP Grouping Levels')

    
    # Attribute caption uses Python identifier caption
    __caption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'caption'), 'caption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_caption', _s.ST_Xstring)
    
    caption = property(__caption.value, __caption.set, None, u'Hierarchy Display Name')

    
    # Attribute measure uses Python identifier measure
    __measure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'measure'), 'measure', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_measure', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    measure = property(__measure.value, __measure.set, None, u'Measure Hierarchy')

    
    # Attribute set uses Python identifier set
    __set = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'set'), 'set', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_set', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    set = property(__set.value, __set.set, None, u'Set')

    
    # Attribute attribute uses Python identifier attribute
    __attribute = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'attribute'), 'attribute', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_attribute', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    attribute = property(__attribute.value, __attribute.set, None, u'Attribute Hierarchy')

    
    # Attribute parentSet uses Python identifier parentSet
    __parentSet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'parentSet'), 'parentSet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_parentSet', pyxb.binding.datatypes.unsignedInt)
    
    parentSet = property(__parentSet.value, __parentSet.set, None, u'Parent Set')

    
    # Attribute iconSet uses Python identifier iconSet
    __iconSet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'iconSet'), 'iconSet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_iconSet', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    iconSet = property(__iconSet.value, __iconSet.set, None, u'KPI Icon Set')

    
    # Attribute time uses Python identifier time
    __time = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'time'), 'time', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_time', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    time = property(__time.value, __time.set, None, u'Time')

    
    # Attribute keyAttribute uses Python identifier keyAttribute
    __keyAttribute = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'keyAttribute'), 'keyAttribute', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_keyAttribute', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    keyAttribute = property(__keyAttribute.value, __keyAttribute.set, None, u'Key Attribute Hierarchy')

    
    # Attribute defaultMemberUniqueName uses Python identifier defaultMemberUniqueName
    __defaultMemberUniqueName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultMemberUniqueName'), 'defaultMemberUniqueName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_defaultMemberUniqueName', _s.ST_Xstring)
    
    defaultMemberUniqueName = property(__defaultMemberUniqueName.value, __defaultMemberUniqueName.set, None, u'Default Member Unique Name')

    
    # Attribute allUniqueName uses Python identifier allUniqueName
    __allUniqueName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'allUniqueName'), 'allUniqueName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_allUniqueName', _s.ST_Xstring)
    
    allUniqueName = property(__allUniqueName.value, __allUniqueName.set, None, u"Unique Name of 'All'")

    
    # Attribute allCaption uses Python identifier allCaption
    __allCaption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'allCaption'), 'allCaption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_allCaption', _s.ST_Xstring)
    
    allCaption = property(__allCaption.value, __allCaption.set, None, u"Display Name of 'All'")

    
    # Attribute displayFolder uses Python identifier displayFolder
    __displayFolder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'displayFolder'), 'displayFolder', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_displayFolder', _s.ST_Xstring)
    
    displayFolder = property(__displayFolder.value, __displayFolder.set, None, u'Display Folder')

    
    # Attribute measureGroup uses Python identifier measureGroup
    __measureGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'measureGroup'), 'measureGroup', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_measureGroup', _s.ST_Xstring)
    
    measureGroup = property(__measureGroup.value, __measureGroup.set, None, u'Measure Group Name')

    
    # Attribute hidden uses Python identifier hidden
    __hidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hidden'), 'hidden', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_hidden', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hidden = property(__hidden.value, __hidden.set, None, u'Hidden')

    
    # Attribute oneField uses Python identifier oneField
    __oneField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'oneField'), 'oneField', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_oneField', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    oneField = property(__oneField.value, __oneField.set, None, u'One Field')

    
    # Attribute measures uses Python identifier measures
    __measures = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'measures'), 'measures', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_measures', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    measures = property(__measures.value, __measures.set, None, u'Measures')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_count', pyxb.binding.datatypes.unsignedInt, required=True)
    
    count = property(__count.value, __count.set, None, u'Levels Count')

    
    # Attribute dimensionUniqueName uses Python identifier dimensionUniqueName
    __dimensionUniqueName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dimensionUniqueName'), 'dimensionUniqueName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_dimensionUniqueName', _s.ST_Xstring)
    
    dimensionUniqueName = property(__dimensionUniqueName.value, __dimensionUniqueName.set, None, u'Dimension Unique Name')

    
    # Attribute memberValueDatatype uses Python identifier memberValueDatatype
    __memberValueDatatype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'memberValueDatatype'), 'memberValueDatatype', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_memberValueDatatype', pyxb.binding.datatypes.unsignedShort)
    
    memberValueDatatype = property(__memberValueDatatype.value, __memberValueDatatype.set, None, u'Member Value Data Type')

    
    # Attribute unbalanced uses Python identifier unbalanced
    __unbalanced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'unbalanced'), 'unbalanced', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_unbalanced', pyxb.binding.datatypes.boolean)
    
    unbalanced = property(__unbalanced.value, __unbalanced.set, None, u'Unbalanced')

    
    # Attribute unbalancedGroup uses Python identifier unbalancedGroup
    __unbalancedGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'unbalancedGroup'), 'unbalancedGroup', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_unbalancedGroup', pyxb.binding.datatypes.boolean)
    
    unbalancedGroup = property(__unbalancedGroup.value, __unbalancedGroup.set, None, u'Unbalanced Group')

    
    # Attribute uniqueName uses Python identifier uniqueName
    __uniqueName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueName'), 'uniqueName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CacheHierarchy_uniqueName', _s.ST_Xstring, required=True)
    
    uniqueName = property(__uniqueName.value, __uniqueName.set, None, u'Hierarchy Unique Name')


    _ElementMap = {
        __extLst.name() : __extLst,
        __fieldsUsage.name() : __fieldsUsage,
        __groupLevels.name() : __groupLevels
    }
    _AttributeMap = {
        __caption.name() : __caption,
        __measure.name() : __measure,
        __set.name() : __set,
        __attribute.name() : __attribute,
        __parentSet.name() : __parentSet,
        __iconSet.name() : __iconSet,
        __time.name() : __time,
        __keyAttribute.name() : __keyAttribute,
        __defaultMemberUniqueName.name() : __defaultMemberUniqueName,
        __allUniqueName.name() : __allUniqueName,
        __allCaption.name() : __allCaption,
        __displayFolder.name() : __displayFolder,
        __measureGroup.name() : __measureGroup,
        __hidden.name() : __hidden,
        __oneField.name() : __oneField,
        __measures.name() : __measures,
        __count.name() : __count,
        __dimensionUniqueName.name() : __dimensionUniqueName,
        __memberValueDatatype.name() : __memberValueDatatype,
        __unbalanced.name() : __unbalanced,
        __unbalancedGroup.name() : __unbalancedGroup,
        __uniqueName.name() : __uniqueName
    }
Namespace.addCategoryObject('typeBinding', u'CT_CacheHierarchy', CT_CacheHierarchy)


# Complex type CT_Members with content type ELEMENT_ONLY
class CT_Members (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Members')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}member uses Python identifier member
    __member = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'member'), 'member', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Members_httpschemas_openxmlformats_orgspreadsheetml2006mainmember', True)

    
    member = property(__member.value, __member.set, None, u'Member')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Members_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Item Count')

    
    # Attribute level uses Python identifier level
    __level = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'level'), 'level', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Members_level', pyxb.binding.datatypes.unsignedInt)
    
    level = property(__level.value, __level.set, None, u'Hierarchy Level')


    _ElementMap = {
        __member.name() : __member
    }
    _AttributeMap = {
        __count.name() : __count,
        __level.name() : __level
    }
Namespace.addCategoryObject('typeBinding', u'CT_Members', CT_Members)


# Complex type CT_RElt with content type ELEMENT_ONLY
class CT_RElt (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RElt')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}t uses Python identifier t
    __t = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u't'), 't', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RElt_httpschemas_openxmlformats_orgspreadsheetml2006maint', False)

    
    t = property(__t.value, __t.set, None, u'Text')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rPr uses Python identifier rPr
    __rPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rPr'), 'rPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RElt_httpschemas_openxmlformats_orgspreadsheetml2006mainrPr', False)

    
    rPr = property(__rPr.value, __rPr.set, None, u'Run Properties')


    _ElementMap = {
        __t.name() : __t,
        __rPr.name() : __rPr
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_RElt', CT_RElt)


# Complex type CT_CellStyleXfs with content type ELEMENT_ONLY
class CT_CellStyleXfs (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CellStyleXfs')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}xf uses Python identifier xf
    __xf = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'xf'), 'xf', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellStyleXfs_httpschemas_openxmlformats_orgspreadsheetml2006mainxf', True)

    
    xf = property(__xf.value, __xf.set, None, u'Formatting Elements')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellStyleXfs_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Style Count')


    _ElementMap = {
        __xf.name() : __xf
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_CellStyleXfs', CT_CellStyleXfs)


# Complex type CT_ExternalDefinedNames with content type ELEMENT_ONLY
class CT_ExternalDefinedNames (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ExternalDefinedNames')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}definedName uses Python identifier definedName
    __definedName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'definedName'), 'definedName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalDefinedNames_httpschemas_openxmlformats_orgspreadsheetml2006maindefinedName', True)

    
    definedName = property(__definedName.value, __definedName.set, None, u'Defined Name')


    _ElementMap = {
        __definedName.name() : __definedName
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_ExternalDefinedNames', CT_ExternalDefinedNames)


# Complex type CT_VolTopicRef with content type EMPTY
class CT_VolTopicRef (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_VolTopicRef')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute s uses Python identifier s
    __s = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u's'), 's', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_VolTopicRef_s', pyxb.binding.datatypes.unsignedInt, required=True)
    
    s = property(__s.value, __s.set, None, u'Sheet Id')

    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_VolTopicRef_r', ST_CellRef, required=True)
    
    r = property(__r.value, __r.set, None, u'Reference')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __s.name() : __s,
        __r.name() : __r
    }
Namespace.addCategoryObject('typeBinding', u'CT_VolTopicRef', CT_VolTopicRef)


# Complex type CT_QueryTableFields with content type ELEMENT_ONLY
class CT_QueryTableFields (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_QueryTableFields')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}queryTableField uses Python identifier queryTableField
    __queryTableField = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'queryTableField'), 'queryTableField', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableFields_httpschemas_openxmlformats_orgspreadsheetml2006mainqueryTableField', True)

    
    queryTableField = property(__queryTableField.value, __queryTableField.set, None, u'QueryTable Field')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_QueryTableFields_count', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    count = property(__count.value, __count.set, None, u'Column Count')


    _ElementMap = {
        __queryTableField.name() : __queryTableField
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_QueryTableFields', CT_QueryTableFields)


# Complex type CT_TableStyle with content type ELEMENT_ONLY
class CT_TableStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_TableStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tableStyleElement uses Python identifier tableStyleElement
    __tableStyleElement = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tableStyleElement'), 'tableStyleElement', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyle_httpschemas_openxmlformats_orgspreadsheetml2006maintableStyleElement', True)

    
    tableStyleElement = property(__tableStyleElement.value, __tableStyleElement.set, None, u'Table Style')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyle_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Table Style Count')

    
    # Attribute pivot uses Python identifier pivot
    __pivot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pivot'), 'pivot', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyle_pivot', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    pivot = property(__pivot.value, __pivot.set, None, u'Pivot Style')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyle_name', pyxb.binding.datatypes.string, required=True)
    
    name = property(__name.value, __name.set, None, u'Table Style Name')

    
    # Attribute table uses Python identifier table
    __table = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'table'), 'table', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyle_table', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    table = property(__table.value, __table.set, None, u'Table')


    _ElementMap = {
        __tableStyleElement.name() : __tableStyleElement
    }
    _AttributeMap = {
        __count.name() : __count,
        __pivot.name() : __pivot,
        __name.name() : __name,
        __table.name() : __table
    }
Namespace.addCategoryObject('typeBinding', u'CT_TableStyle', CT_TableStyle)


# Complex type CT_RevisionConflict with content type EMPTY
class CT_RevisionConflict (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RevisionConflict')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute rId uses Python identifier rId
    __rId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rId'), 'rId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionConflict_rId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    rId = property(__rId.value, __rId.set, None, u'Revision Id')

    
    # Attribute ua uses Python identifier ua
    __ua = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ua'), 'ua', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionConflict_ua', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ua = property(__ua.value, __ua.set, None, u'Revision From Rejection')

    
    # Attribute sheetId uses Python identifier sheetId
    __sheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheetId'), 'sheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionConflict_sheetId', pyxb.binding.datatypes.unsignedInt)
    
    sheetId = property(__sheetId.value, __sheetId.set, None, u'Sheet Id')

    
    # Attribute ra uses Python identifier ra
    __ra = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ra'), 'ra', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionConflict_ra', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ra = property(__ra.value, __ra.set, None, u'Revision Undo Rejected')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __rId.name() : __rId,
        __ua.name() : __ua,
        __sheetId.name() : __sheetId,
        __ra.name() : __ra
    }
Namespace.addCategoryObject('typeBinding', u'CT_RevisionConflict', CT_RevisionConflict)


# Complex type CT_ObjectPr with content type ELEMENT_ONLY
class CT_ObjectPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ObjectPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}anchor uses Python identifier anchor
    __anchor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'anchor'), 'anchor', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectPr_httpschemas_openxmlformats_orgspreadsheetml2006mainanchor', False)

    
    anchor = property(__anchor.value, __anchor.set, None, None)

    
    # Attribute autoPict uses Python identifier autoPict
    __autoPict = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoPict'), 'autoPict', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectPr_autoPict', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoPict = property(__autoPict.value, __autoPict.set, None, u'Automatic Size Flag')

    
    # Attribute locked uses Python identifier locked
    __locked = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'locked'), 'locked', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectPr_locked', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    locked = property(__locked.value, __locked.set, None, u'Locked Flag')

    
    # Attribute print uses Python identifier print_
    __print = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'print'), 'print_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectPr_print', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    print_ = property(__print.value, __print.set, None, u'Print Flag')

    
    # Attribute dde uses Python identifier dde
    __dde = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dde'), 'dde', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectPr_dde', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    dde = property(__dde.value, __dde.set, None, u'Dynamic Data Exchange Flag')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectPr_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute macro uses Python identifier macro
    __macro = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'macro'), 'macro', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectPr_macro', ST_Formula)
    
    macro = property(__macro.value, __macro.set, None, u'Custom Function')

    
    # Attribute uiObject uses Python identifier uiObject
    __uiObject = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uiObject'), 'uiObject', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectPr_uiObject', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    uiObject = property(__uiObject.value, __uiObject.set, None, u'UI Object Flag')

    
    # Attribute altText uses Python identifier altText
    __altText = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'altText'), 'altText', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectPr_altText', _s.ST_Xstring)
    
    altText = property(__altText.value, __altText.set, None, u'Alternative Text')

    
    # Attribute autoFill uses Python identifier autoFill
    __autoFill = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoFill'), 'autoFill', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectPr_autoFill', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoFill = property(__autoFill.value, __autoFill.set, None, u'Automatic Fill Flag')

    
    # Attribute disabled uses Python identifier disabled
    __disabled = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'disabled'), 'disabled', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectPr_disabled', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    disabled = property(__disabled.value, __disabled.set, None, u'Disabled Flag')

    
    # Attribute autoLine uses Python identifier autoLine
    __autoLine = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoLine'), 'autoLine', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectPr_autoLine', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoLine = property(__autoLine.value, __autoLine.set, None, u'Automatic Line Flag')

    
    # Attribute defaultSize uses Python identifier defaultSize
    __defaultSize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'defaultSize'), 'defaultSize', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ObjectPr_defaultSize', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    defaultSize = property(__defaultSize.value, __defaultSize.set, None, u'Default Size Flag')


    _ElementMap = {
        __anchor.name() : __anchor
    }
    _AttributeMap = {
        __autoPict.name() : __autoPict,
        __locked.name() : __locked,
        __print.name() : __print,
        __dde.name() : __dde,
        __id.name() : __id,
        __macro.name() : __macro,
        __uiObject.name() : __uiObject,
        __altText.name() : __altText,
        __autoFill.name() : __autoFill,
        __disabled.name() : __disabled,
        __autoLine.name() : __autoLine,
        __defaultSize.name() : __defaultSize
    }
Namespace.addCategoryObject('typeBinding', u'CT_ObjectPr', CT_ObjectPr)


# Complex type CT_InputCells with content type EMPTY
class CT_InputCells (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_InputCells')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute deleted uses Python identifier deleted
    __deleted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'deleted'), 'deleted', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_InputCells_deleted', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    deleted = property(__deleted.value, __deleted.set, None, u'Deleted')

    
    # Attribute numFmtId uses Python identifier numFmtId
    __numFmtId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numFmtId'), 'numFmtId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_InputCells_numFmtId', ST_NumFmtId)
    
    numFmtId = property(__numFmtId.value, __numFmtId.set, None, u'Number Format Id')

    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_InputCells_r', ST_CellRef, required=True)
    
    r = property(__r.value, __r.set, None, u'Reference')

    
    # Attribute undone uses Python identifier undone
    __undone = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'undone'), 'undone', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_InputCells_undone', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    undone = property(__undone.value, __undone.set, None, u'Undone')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_InputCells_val', _s.ST_Xstring, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __deleted.name() : __deleted,
        __numFmtId.name() : __numFmtId,
        __r.name() : __r,
        __undone.name() : __undone,
        __val.name() : __val
    }
Namespace.addCategoryObject('typeBinding', u'CT_InputCells', CT_InputCells)


# Complex type CT_TableStyleInfo with content type EMPTY
class CT_TableStyleInfo (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_TableStyleInfo')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute showColumnStripes uses Python identifier showColumnStripes
    __showColumnStripes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showColumnStripes'), 'showColumnStripes', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyleInfo_showColumnStripes', pyxb.binding.datatypes.boolean)
    
    showColumnStripes = property(__showColumnStripes.value, __showColumnStripes.set, None, u'Show Column Stripes')

    
    # Attribute showRowStripes uses Python identifier showRowStripes
    __showRowStripes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showRowStripes'), 'showRowStripes', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyleInfo_showRowStripes', pyxb.binding.datatypes.boolean)
    
    showRowStripes = property(__showRowStripes.value, __showRowStripes.set, None, u'Show Row Stripes')

    
    # Attribute showLastColumn uses Python identifier showLastColumn
    __showLastColumn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showLastColumn'), 'showLastColumn', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyleInfo_showLastColumn', pyxb.binding.datatypes.boolean)
    
    showLastColumn = property(__showLastColumn.value, __showLastColumn.set, None, u'Show Last Column')

    
    # Attribute showFirstColumn uses Python identifier showFirstColumn
    __showFirstColumn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showFirstColumn'), 'showFirstColumn', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyleInfo_showFirstColumn', pyxb.binding.datatypes.boolean)
    
    showFirstColumn = property(__showFirstColumn.value, __showFirstColumn.set, None, u'Show First Column')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyleInfo_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'Style Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __showColumnStripes.name() : __showColumnStripes,
        __showRowStripes.name() : __showRowStripes,
        __showLastColumn.name() : __showLastColumn,
        __showFirstColumn.name() : __showFirstColumn,
        __name.name() : __name
    }
Namespace.addCategoryObject('typeBinding', u'CT_TableStyleInfo', CT_TableStyleInfo)


# Complex type CT_PivotCache with content type EMPTY
class CT_PivotCache (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotCache')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute cacheId uses Python identifier cacheId
    __cacheId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cacheId'), 'cacheId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCache_cacheId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    cacheId = property(__cacheId.value, __cacheId.set, None, u'PivotCache Id')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCache_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __cacheId.name() : __cacheId,
        __id.name() : __id
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotCache', CT_PivotCache)


# Complex type CT_PCDSDTCEntries with content type ELEMENT_ONLY
class CT_PCDSDTCEntries (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PCDSDTCEntries')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}s uses Python identifier s
    __s = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u's'), 's', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDSDTCEntries_httpschemas_openxmlformats_orgspreadsheetml2006mains', True)

    
    s = property(__s.value, __s.set, None, u'Character Value')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'e'), 'e', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDSDTCEntries_httpschemas_openxmlformats_orgspreadsheetml2006maine', True)

    
    e = property(__e.value, __e.set, None, u'Error Value')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}n uses Python identifier n
    __n = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'n'), 'n', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDSDTCEntries_httpschemas_openxmlformats_orgspreadsheetml2006mainn', True)

    
    n = property(__n.value, __n.set, None, u'Numeric Value')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}m uses Python identifier m
    __m = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'm'), 'm', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDSDTCEntries_httpschemas_openxmlformats_orgspreadsheetml2006mainm', True)

    
    m = property(__m.value, __m.set, None, u'No Value')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PCDSDTCEntries_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Tuple Count')


    _ElementMap = {
        __s.name() : __s,
        __e.name() : __e,
        __n.name() : __n,
        __m.name() : __m
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_PCDSDTCEntries', CT_PCDSDTCEntries)


# Complex type CT_MdxTuple with content type ELEMENT_ONLY
class CT_MdxTuple (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MdxTuple')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}n uses Python identifier n
    __n = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'n'), 'n', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxTuple_httpschemas_openxmlformats_orgspreadsheetml2006mainn', True)

    
    n = property(__n.value, __n.set, None, u'Member Unique Name Index')

    
    # Attribute b uses Python identifier b
    __b = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'b'), 'b', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxTuple_b', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    b = property(__b.value, __b.set, None, u'Server Formatting Bold Font')

    
    # Attribute si uses Python identifier si
    __si = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'si'), 'si', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxTuple_si', pyxb.binding.datatypes.unsignedInt)
    
    si = property(__si.value, __si.set, None, u'Server Formatting String Index')

    
    # Attribute u uses Python identifier u
    __u = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'u'), 'u', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxTuple_u', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    u = property(__u.value, __u.set, None, u'Server Formatting Underline Font')

    
    # Attribute st uses Python identifier st
    __st = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'st'), 'st', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxTuple_st', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    st = property(__st.value, __st.set, None, u'Server Formatting Strikethrough Font')

    
    # Attribute fi uses Python identifier fi
    __fi = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fi'), 'fi', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxTuple_fi', pyxb.binding.datatypes.unsignedInt)
    
    fi = property(__fi.value, __fi.set, None, u'Server Formatting Built-In Number Format Index')

    
    # Attribute bc uses Python identifier bc
    __bc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bc'), 'bc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxTuple_bc', ST_UnsignedIntHex)
    
    bc = property(__bc.value, __bc.set, None, u'Server Formatting Background Color')

    
    # Attribute c uses Python identifier c
    __c = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'c'), 'c', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxTuple_c', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    c = property(__c.value, __c.set, None, u'Member Index Count')

    
    # Attribute ct uses Python identifier ct
    __ct = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ct'), 'ct', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxTuple_ct', _s.ST_Xstring)
    
    ct = property(__ct.value, __ct.set, None, u'Server Formatting Culture Currency')

    
    # Attribute fc uses Python identifier fc
    __fc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fc'), 'fc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxTuple_fc', ST_UnsignedIntHex)
    
    fc = property(__fc.value, __fc.set, None, u'Server Formatting Foreground Color')

    
    # Attribute i uses Python identifier i
    __i = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'i'), 'i', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxTuple_i', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    i = property(__i.value, __i.set, None, u'Server Formatting Italic Font')


    _ElementMap = {
        __n.name() : __n
    }
    _AttributeMap = {
        __b.name() : __b,
        __si.name() : __si,
        __u.name() : __u,
        __st.name() : __st,
        __fi.name() : __fi,
        __bc.name() : __bc,
        __c.name() : __c,
        __ct.name() : __ct,
        __fc.name() : __fc,
        __i.name() : __i
    }
Namespace.addCategoryObject('typeBinding', u'CT_MdxTuple', CT_MdxTuple)


# Complex type CT_Comments with content type ELEMENT_ONLY
class CT_Comments (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Comments')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Comments_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}authors uses Python identifier authors
    __authors = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'authors'), 'authors', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Comments_httpschemas_openxmlformats_orgspreadsheetml2006mainauthors', False)

    
    authors = property(__authors.value, __authors.set, None, u'Authors')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}commentList uses Python identifier commentList
    __commentList = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'commentList'), 'commentList', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Comments_httpschemas_openxmlformats_orgspreadsheetml2006maincommentList', False)

    
    commentList = property(__commentList.value, __commentList.set, None, u'List of Comments')


    _ElementMap = {
        __extLst.name() : __extLst,
        __authors.name() : __authors,
        __commentList.name() : __commentList
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Comments', CT_Comments)


# Complex type CT_VerticalAlignFontProperty with content type EMPTY
class CT_VerticalAlignFontProperty (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_VerticalAlignFontProperty')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_VerticalAlignFontProperty_val', _s.ST_VerticalAlignRun, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
Namespace.addCategoryObject('typeBinding', u'CT_VerticalAlignFontProperty', CT_VerticalAlignFontProperty)


# Complex type CT_GroupLevels with content type ELEMENT_ONLY
class CT_GroupLevels (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_GroupLevels')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}groupLevel uses Python identifier groupLevel
    __groupLevel = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'groupLevel'), 'groupLevel', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupLevels_httpschemas_openxmlformats_orgspreadsheetml2006maingroupLevel', True)

    
    groupLevel = property(__groupLevel.value, __groupLevel.set, None, u'OLAP Grouping Levels')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupLevels_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Grouping Level Count')


    _ElementMap = {
        __groupLevel.name() : __groupLevel
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_GroupLevels', CT_GroupLevels)


# Complex type CT_IndexedColors with content type ELEMENT_ONLY
class CT_IndexedColors (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_IndexedColors')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rgbColor uses Python identifier rgbColor
    __rgbColor = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rgbColor'), 'rgbColor', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IndexedColors_httpschemas_openxmlformats_orgspreadsheetml2006mainrgbColor', True)

    
    rgbColor = property(__rgbColor.value, __rgbColor.set, None, u'RGB Color')


    _ElementMap = {
        __rgbColor.name() : __rgbColor
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_IndexedColors', CT_IndexedColors)


# Complex type CT_Sets with content type ELEMENT_ONLY
class CT_Sets (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Sets')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}set uses Python identifier set
    __set = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'set'), 'set', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Sets_httpschemas_openxmlformats_orgspreadsheetml2006mainset', True)

    
    set = property(__set.value, __set.set, None, u'OLAP Set')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Sets_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Tuple Set Count')


    _ElementMap = {
        __set.name() : __set
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_Sets', CT_Sets)


# Complex type CT_ExternalSheetData with content type ELEMENT_ONLY
class CT_ExternalSheetData (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ExternalSheetData')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}row uses Python identifier row
    __row = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'row'), 'row', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalSheetData_httpschemas_openxmlformats_orgspreadsheetml2006mainrow', True)

    
    row = property(__row.value, __row.set, None, u'Row')

    
    # Attribute sheetId uses Python identifier sheetId
    __sheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheetId'), 'sheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalSheetData_sheetId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    sheetId = property(__sheetId.value, __sheetId.set, None, u'Sheet Id')

    
    # Attribute refreshError uses Python identifier refreshError
    __refreshError = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refreshError'), 'refreshError', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalSheetData_refreshError', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    refreshError = property(__refreshError.value, __refreshError.set, None, u'Last Refresh Resulted in Error')


    _ElementMap = {
        __row.name() : __row
    }
    _AttributeMap = {
        __sheetId.name() : __sheetId,
        __refreshError.name() : __refreshError
    }
Namespace.addCategoryObject('typeBinding', u'CT_ExternalSheetData', CT_ExternalSheetData)


# Complex type CT_TableFormula with content type SIMPLE
class CT_TableFormula (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = ST_Formula
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_TableFormula')
    # Base type is ST_Formula
    
    # Attribute array uses Python identifier array
    __array = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'array'), 'array', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableFormula_array', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    array = property(__array.value, __array.set, None, u'Array')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __array.name() : __array
    }
Namespace.addCategoryObject('typeBinding', u'CT_TableFormula', CT_TableFormula)


# Complex type CT_PivotFilters with content type ELEMENT_ONLY
class CT_PivotFilters (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotFilters')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}filter uses Python identifier filter
    __filter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'filter'), 'filter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFilters_httpschemas_openxmlformats_orgspreadsheetml2006mainfilter', True)

    
    filter = property(__filter.value, __filter.set, None, u'PivotTable Advanced Filter')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFilters_count', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    count = property(__count.value, __count.set, None, u'Pivot Filter Count')


    _ElementMap = {
        __filter.name() : __filter
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotFilters', CT_PivotFilters)


# Complex type CT_CustomChartsheetView with content type ELEMENT_ONLY
class CT_CustomChartsheetView (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CustomChartsheetView')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}headerFooter uses Python identifier headerFooter
    __headerFooter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'headerFooter'), 'headerFooter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomChartsheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainheaderFooter', False)

    
    headerFooter = property(__headerFooter.value, __headerFooter.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageMargins uses Python identifier pageMargins
    __pageMargins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageMargins'), 'pageMargins', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomChartsheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainpageMargins', False)

    
    pageMargins = property(__pageMargins.value, __pageMargins.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageSetup uses Python identifier pageSetup
    __pageSetup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageSetup'), 'pageSetup', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomChartsheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainpageSetup', False)

    
    pageSetup = property(__pageSetup.value, __pageSetup.set, None, u'Chart Sheet Page Setup')

    
    # Attribute state uses Python identifier state
    __state = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'state'), 'state', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomChartsheetView_state', ST_SheetState, unicode_default=u'visible')
    
    state = property(__state.value, __state.set, None, u'Visible State')

    
    # Attribute guid uses Python identifier guid
    __guid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'guid'), 'guid', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomChartsheetView_guid', _s.ST_Guid, required=True)
    
    guid = property(__guid.value, __guid.set, None, u'GUID')

    
    # Attribute scale uses Python identifier scale
    __scale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'scale'), 'scale', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomChartsheetView_scale', pyxb.binding.datatypes.unsignedInt, unicode_default=u'100')
    
    scale = property(__scale.value, __scale.set, None, u'Print Scale')

    
    # Attribute zoomToFit uses Python identifier zoomToFit
    __zoomToFit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'zoomToFit'), 'zoomToFit', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomChartsheetView_zoomToFit', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    zoomToFit = property(__zoomToFit.value, __zoomToFit.set, None, u'Zoom To Fit')


    _ElementMap = {
        __headerFooter.name() : __headerFooter,
        __pageMargins.name() : __pageMargins,
        __pageSetup.name() : __pageSetup
    }
    _AttributeMap = {
        __state.name() : __state,
        __guid.name() : __guid,
        __scale.name() : __scale,
        __zoomToFit.name() : __zoomToFit
    }
Namespace.addCategoryObject('typeBinding', u'CT_CustomChartsheetView', CT_CustomChartsheetView)


# Complex type CT_TableStyleElement with content type EMPTY
class CT_TableStyleElement (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_TableStyleElement')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute dxfId uses Python identifier dxfId
    __dxfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dxfId'), 'dxfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyleElement_dxfId', ST_DxfId)
    
    dxfId = property(__dxfId.value, __dxfId.set, None, u'Formatting Id')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyleElement_type', ST_TableStyleType, required=True)
    
    type = property(__type.value, __type.set, None, u'Table Style Type')

    
    # Attribute size uses Python identifier size
    __size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'size'), 'size', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableStyleElement_size', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    size = property(__size.value, __size.set, None, u'Band Size')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __dxfId.name() : __dxfId,
        __type.name() : __type,
        __size.name() : __size
    }
Namespace.addCategoryObject('typeBinding', u'CT_TableStyleElement', CT_TableStyleElement)


# Complex type CT_TableColumn with content type ELEMENT_ONLY
class CT_TableColumn (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_TableColumn')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}calculatedColumnFormula uses Python identifier calculatedColumnFormula
    __calculatedColumnFormula = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'calculatedColumnFormula'), 'calculatedColumnFormula', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_httpschemas_openxmlformats_orgspreadsheetml2006maincalculatedColumnFormula', False)

    
    calculatedColumnFormula = property(__calculatedColumnFormula.value, __calculatedColumnFormula.set, None, u'Calculated Column Formula')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}xmlColumnPr uses Python identifier xmlColumnPr
    __xmlColumnPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'xmlColumnPr'), 'xmlColumnPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_httpschemas_openxmlformats_orgspreadsheetml2006mainxmlColumnPr', False)

    
    xmlColumnPr = property(__xmlColumnPr.value, __xmlColumnPr.set, None, u'XML Column Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}totalsRowFormula uses Python identifier totalsRowFormula
    __totalsRowFormula = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'totalsRowFormula'), 'totalsRowFormula', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_httpschemas_openxmlformats_orgspreadsheetml2006maintotalsRowFormula', False)

    
    totalsRowFormula = property(__totalsRowFormula.value, __totalsRowFormula.set, None, u'Totals Row Formula')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_id', pyxb.binding.datatypes.unsignedInt, required=True)
    
    id = property(__id.value, __id.set, None, u'Table Field Id')

    
    # Attribute totalsRowDxfId uses Python identifier totalsRowDxfId
    __totalsRowDxfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'totalsRowDxfId'), 'totalsRowDxfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_totalsRowDxfId', ST_DxfId)
    
    totalsRowDxfId = property(__totalsRowDxfId.value, __totalsRowDxfId.set, None, u'Totals Row Format Id')

    
    # Attribute totalsRowFunction uses Python identifier totalsRowFunction
    __totalsRowFunction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'totalsRowFunction'), 'totalsRowFunction', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_totalsRowFunction', ST_TotalsRowFunction, unicode_default=u'none')
    
    totalsRowFunction = property(__totalsRowFunction.value, __totalsRowFunction.set, None, u'Totals Row Function')

    
    # Attribute headerRowCellStyle uses Python identifier headerRowCellStyle
    __headerRowCellStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'headerRowCellStyle'), 'headerRowCellStyle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_headerRowCellStyle', _s.ST_Xstring)
    
    headerRowCellStyle = property(__headerRowCellStyle.value, __headerRowCellStyle.set, None, u'Header Row Cell Style')

    
    # Attribute totalsRowLabel uses Python identifier totalsRowLabel
    __totalsRowLabel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'totalsRowLabel'), 'totalsRowLabel', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_totalsRowLabel', _s.ST_Xstring)
    
    totalsRowLabel = property(__totalsRowLabel.value, __totalsRowLabel.set, None, u'Totals Row Label')

    
    # Attribute dataCellStyle uses Python identifier dataCellStyle
    __dataCellStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataCellStyle'), 'dataCellStyle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_dataCellStyle', _s.ST_Xstring)
    
    dataCellStyle = property(__dataCellStyle.value, __dataCellStyle.set, None, u'Data Area Style Name')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Column name')

    
    # Attribute headerRowDxfId uses Python identifier headerRowDxfId
    __headerRowDxfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'headerRowDxfId'), 'headerRowDxfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_headerRowDxfId', ST_DxfId)
    
    headerRowDxfId = property(__headerRowDxfId.value, __headerRowDxfId.set, None, u'Header Row Cell Format Id')

    
    # Attribute totalsRowCellStyle uses Python identifier totalsRowCellStyle
    __totalsRowCellStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'totalsRowCellStyle'), 'totalsRowCellStyle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_totalsRowCellStyle', _s.ST_Xstring)
    
    totalsRowCellStyle = property(__totalsRowCellStyle.value, __totalsRowCellStyle.set, None, u'Totals Row Style Name')

    
    # Attribute queryTableFieldId uses Python identifier queryTableFieldId
    __queryTableFieldId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'queryTableFieldId'), 'queryTableFieldId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_queryTableFieldId', pyxb.binding.datatypes.unsignedInt)
    
    queryTableFieldId = property(__queryTableFieldId.value, __queryTableFieldId.set, None, u'Query Table Field Id')

    
    # Attribute uniqueName uses Python identifier uniqueName
    __uniqueName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueName'), 'uniqueName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_uniqueName', _s.ST_Xstring)
    
    uniqueName = property(__uniqueName.value, __uniqueName.set, None, u'Unique Name')

    
    # Attribute dataDxfId uses Python identifier dataDxfId
    __dataDxfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dataDxfId'), 'dataDxfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumn_dataDxfId', ST_DxfId)
    
    dataDxfId = property(__dataDxfId.value, __dataDxfId.set, None, u'Data & Insert Row Format Id')


    _ElementMap = {
        __extLst.name() : __extLst,
        __calculatedColumnFormula.name() : __calculatedColumnFormula,
        __xmlColumnPr.name() : __xmlColumnPr,
        __totalsRowFormula.name() : __totalsRowFormula
    }
    _AttributeMap = {
        __id.name() : __id,
        __totalsRowDxfId.name() : __totalsRowDxfId,
        __totalsRowFunction.name() : __totalsRowFunction,
        __headerRowCellStyle.name() : __headerRowCellStyle,
        __totalsRowLabel.name() : __totalsRowLabel,
        __dataCellStyle.name() : __dataCellStyle,
        __name.name() : __name,
        __headerRowDxfId.name() : __headerRowDxfId,
        __totalsRowCellStyle.name() : __totalsRowCellStyle,
        __queryTableFieldId.name() : __queryTableFieldId,
        __uniqueName.name() : __uniqueName,
        __dataDxfId.name() : __dataDxfId
    }
Namespace.addCategoryObject('typeBinding', u'CT_TableColumn', CT_TableColumn)


# Complex type CT_Workbook with content type ELEMENT_ONLY
class CT_Workbook (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Workbook')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheets uses Python identifier sheets
    __sheets = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheets'), 'sheets', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainsheets', False)

    
    sheets = property(__sheets.value, __sheets.set, None, u'Sheets')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}bookViews uses Python identifier bookViews
    __bookViews = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'bookViews'), 'bookViews', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainbookViews', False)

    
    bookViews = property(__bookViews.value, __bookViews.set, None, u'Workbook Views')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}webPublishing uses Python identifier webPublishing
    __webPublishing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'webPublishing'), 'webPublishing', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainwebPublishing', False)

    
    webPublishing = property(__webPublishing.value, __webPublishing.set, None, u'Web Publishing Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}oleSize uses Python identifier oleSize
    __oleSize = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'oleSize'), 'oleSize', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainoleSize', False)

    
    oleSize = property(__oleSize.value, __oleSize.set, None, u'Embedded Object Size')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}fileRecoveryPr uses Python identifier fileRecoveryPr
    __fileRecoveryPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fileRecoveryPr'), 'fileRecoveryPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainfileRecoveryPr', True)

    
    fileRecoveryPr = property(__fileRecoveryPr.value, __fileRecoveryPr.set, None, u'File Recovery Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}customWorkbookViews uses Python identifier customWorkbookViews
    __customWorkbookViews = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'customWorkbookViews'), 'customWorkbookViews', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006maincustomWorkbookViews', False)

    
    customWorkbookViews = property(__customWorkbookViews.value, __customWorkbookViews.set, None, u'Custom Workbook Views')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}webPublishObjects uses Python identifier webPublishObjects
    __webPublishObjects = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'webPublishObjects'), 'webPublishObjects', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainwebPublishObjects', False)

    
    webPublishObjects = property(__webPublishObjects.value, __webPublishObjects.set, None, u'Web Publish Objects')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}functionGroups uses Python identifier functionGroups
    __functionGroups = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'functionGroups'), 'functionGroups', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainfunctionGroups', False)

    
    functionGroups = property(__functionGroups.value, __functionGroups.set, None, u'Function Groups')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}fileVersion uses Python identifier fileVersion
    __fileVersion = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fileVersion'), 'fileVersion', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainfileVersion', False)

    
    fileVersion = property(__fileVersion.value, __fileVersion.set, None, u'File Version')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}calcPr uses Python identifier calcPr
    __calcPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'calcPr'), 'calcPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006maincalcPr', False)

    
    calcPr = property(__calcPr.value, __calcPr.set, None, u'Calculation Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pivotCaches uses Python identifier pivotCaches
    __pivotCaches = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pivotCaches'), 'pivotCaches', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainpivotCaches', False)

    
    pivotCaches = property(__pivotCaches.value, __pivotCaches.set, None, u'PivotCaches')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}externalReferences uses Python identifier externalReferences
    __externalReferences = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'externalReferences'), 'externalReferences', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainexternalReferences', False)

    
    externalReferences = property(__externalReferences.value, __externalReferences.set, None, u'External References')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}workbookPr uses Python identifier workbookPr
    __workbookPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'workbookPr'), 'workbookPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainworkbookPr', False)

    
    workbookPr = property(__workbookPr.value, __workbookPr.set, None, u'Workbook Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}smartTagPr uses Python identifier smartTagPr
    __smartTagPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'smartTagPr'), 'smartTagPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainsmartTagPr', False)

    
    smartTagPr = property(__smartTagPr.value, __smartTagPr.set, None, u'Smart Tag Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}definedNames uses Python identifier definedNames
    __definedNames = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'definedNames'), 'definedNames', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006maindefinedNames', False)

    
    definedNames = property(__definedNames.value, __definedNames.set, None, u'Defined Names')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}workbookProtection uses Python identifier workbookProtection
    __workbookProtection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'workbookProtection'), 'workbookProtection', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainworkbookProtection', False)

    
    workbookProtection = property(__workbookProtection.value, __workbookProtection.set, None, u'Workbook Protection')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}fileSharing uses Python identifier fileSharing
    __fileSharing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fileSharing'), 'fileSharing', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainfileSharing', False)

    
    fileSharing = property(__fileSharing.value, __fileSharing.set, None, u'File Sharing')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}smartTagTypes uses Python identifier smartTagTypes
    __smartTagTypes = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'smartTagTypes'), 'smartTagTypes', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_httpschemas_openxmlformats_orgspreadsheetml2006mainsmartTagTypes', False)

    
    smartTagTypes = property(__smartTagTypes.value, __smartTagTypes.set, None, u'Smart Tag Types')

    
    # Attribute conformance uses Python identifier conformance
    __conformance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'conformance'), 'conformance', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Workbook_conformance', _s.ST_ConformanceClass)
    
    conformance = property(__conformance.value, __conformance.set, None, u'Document Conformance Class')


    _ElementMap = {
        __sheets.name() : __sheets,
        __bookViews.name() : __bookViews,
        __extLst.name() : __extLst,
        __webPublishing.name() : __webPublishing,
        __oleSize.name() : __oleSize,
        __fileRecoveryPr.name() : __fileRecoveryPr,
        __customWorkbookViews.name() : __customWorkbookViews,
        __webPublishObjects.name() : __webPublishObjects,
        __functionGroups.name() : __functionGroups,
        __fileVersion.name() : __fileVersion,
        __calcPr.name() : __calcPr,
        __pivotCaches.name() : __pivotCaches,
        __externalReferences.name() : __externalReferences,
        __workbookPr.name() : __workbookPr,
        __smartTagPr.name() : __smartTagPr,
        __definedNames.name() : __definedNames,
        __workbookProtection.name() : __workbookProtection,
        __fileSharing.name() : __fileSharing,
        __smartTagTypes.name() : __smartTagTypes
    }
    _AttributeMap = {
        __conformance.name() : __conformance
    }
Namespace.addCategoryObject('typeBinding', u'CT_Workbook', CT_Workbook)


# Complex type CT_CellFormula with content type SIMPLE
class CT_CellFormula (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = ST_Formula
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CellFormula')
    # Base type is ST_Formula
    
    # Attribute r1 uses Python identifier r1
    __r1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r1'), 'r1', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellFormula_r1', ST_CellRef)
    
    r1 = property(__r1.value, __r1.set, None, u'Data Table Cell 1')

    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellFormula_ref', ST_Ref)
    
    ref = property(__ref.value, __ref.set, None, u'Range of Cells')

    
    # Attribute r2 uses Python identifier r2
    __r2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r2'), 'r2', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellFormula_r2', ST_CellRef)
    
    r2 = property(__r2.value, __r2.set, None, u'Input Cell 2')

    
    # Attribute dt2D uses Python identifier dt2D
    __dt2D = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dt2D'), 'dt2D', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellFormula_dt2D', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    dt2D = property(__dt2D.value, __dt2D.set, None, u'Data Table 2-D')

    
    # Attribute ca uses Python identifier ca
    __ca = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ca'), 'ca', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellFormula_ca', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ca = property(__ca.value, __ca.set, None, u'Calculate Cell')

    
    # Attribute aca uses Python identifier aca
    __aca = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'aca'), 'aca', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellFormula_aca', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    aca = property(__aca.value, __aca.set, None, u'Always Calculate Array')

    
    # Attribute dtr uses Python identifier dtr
    __dtr = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dtr'), 'dtr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellFormula_dtr', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    dtr = property(__dtr.value, __dtr.set, None, u'Data Table Row')

    
    # Attribute si uses Python identifier si
    __si = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'si'), 'si', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellFormula_si', pyxb.binding.datatypes.unsignedInt)
    
    si = property(__si.value, __si.set, None, u'Shared Group Index')

    
    # Attribute del1 uses Python identifier del1
    __del1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'del1'), 'del1', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellFormula_del1', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    del1 = property(__del1.value, __del1.set, None, u'Input 1 Deleted')

    
    # Attribute t uses Python identifier t
    __t = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u't'), 't', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellFormula_t', ST_CellFormulaType, unicode_default=u'normal')
    
    t = property(__t.value, __t.set, None, u'Formula Type')

    
    # Attribute bx uses Python identifier bx
    __bx = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bx'), 'bx', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellFormula_bx', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    bx = property(__bx.value, __bx.set, None, u'Assigns Value to Name')

    
    # Attribute del2 uses Python identifier del2
    __del2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'del2'), 'del2', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellFormula_del2', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    del2 = property(__del2.value, __del2.set, None, u'Input 2 Deleted')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __r1.name() : __r1,
        __ref.name() : __ref,
        __r2.name() : __r2,
        __dt2D.name() : __dt2D,
        __ca.name() : __ca,
        __aca.name() : __aca,
        __dtr.name() : __dtr,
        __si.name() : __si,
        __del1.name() : __del1,
        __t.name() : __t,
        __bx.name() : __bx,
        __del2.name() : __del2
    }
Namespace.addCategoryObject('typeBinding', u'CT_CellFormula', CT_CellFormula)


# Complex type CT_CellWatches with content type ELEMENT_ONLY
class CT_CellWatches (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CellWatches')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cellWatch uses Python identifier cellWatch
    __cellWatch = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cellWatch'), 'cellWatch', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellWatches_httpschemas_openxmlformats_orgspreadsheetml2006maincellWatch', True)

    
    cellWatch = property(__cellWatch.value, __cellWatch.set, None, u'Cell Watch Item')


    _ElementMap = {
        __cellWatch.name() : __cellWatch
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_CellWatches', CT_CellWatches)


# Complex type CT_IconSet with content type ELEMENT_ONLY
class CT_IconSet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_IconSet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cfvo uses Python identifier cfvo
    __cfvo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cfvo'), 'cfvo', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IconSet_httpschemas_openxmlformats_orgspreadsheetml2006maincfvo', True)

    
    cfvo = property(__cfvo.value, __cfvo.set, None, u'Conditional Formatting Object')

    
    # Attribute iconSet uses Python identifier iconSet
    __iconSet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'iconSet'), 'iconSet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IconSet_iconSet', ST_IconSetType, unicode_default=u'3TrafficLights1')
    
    iconSet = property(__iconSet.value, __iconSet.set, None, u'Icon Set')

    
    # Attribute showValue uses Python identifier showValue
    __showValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showValue'), 'showValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IconSet_showValue', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showValue = property(__showValue.value, __showValue.set, None, u'Show Value')

    
    # Attribute reverse uses Python identifier reverse
    __reverse = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'reverse'), 'reverse', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IconSet_reverse', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    reverse = property(__reverse.value, __reverse.set, None, u'Reverse Icons')

    
    # Attribute percent uses Python identifier percent
    __percent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'percent'), 'percent', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IconSet_percent', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    percent = property(__percent.value, __percent.set, None, u'Percent')


    _ElementMap = {
        __cfvo.name() : __cfvo
    }
    _AttributeMap = {
        __iconSet.name() : __iconSet,
        __showValue.name() : __showValue,
        __reverse.name() : __reverse,
        __percent.name() : __percent
    }
Namespace.addCategoryObject('typeBinding', u'CT_IconSet', CT_IconSet)


# Complex type CT_OleSize with content type EMPTY
class CT_OleSize (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_OleSize')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleSize_ref', ST_Ref, required=True)
    
    ref = property(__ref.value, __ref.set, None, u'Reference')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __ref.name() : __ref
    }
Namespace.addCategoryObject('typeBinding', u'CT_OleSize', CT_OleSize)


# Complex type CT_DdeValues with content type ELEMENT_ONLY
class CT_DdeValues (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DdeValues')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}value uses Python identifier value_
    __value = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'value'), 'value_', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DdeValues_httpschemas_openxmlformats_orgspreadsheetml2006mainvalue', True)

    
    value_ = property(__value.value, __value.set, None, u'Value')

    
    # Attribute rows uses Python identifier rows
    __rows = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rows'), 'rows', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DdeValues_rows', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    rows = property(__rows.value, __rows.set, None, u'Rows')

    
    # Attribute cols uses Python identifier cols
    __cols = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cols'), 'cols', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DdeValues_cols', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    cols = property(__cols.value, __cols.set, None, u'Columns')


    _ElementMap = {
        __value.name() : __value
    }
    _AttributeMap = {
        __rows.name() : __rows,
        __cols.name() : __cols
    }
Namespace.addCategoryObject('typeBinding', u'CT_DdeValues', CT_DdeValues)


# Complex type CT_AutoSortScope with content type ELEMENT_ONLY
class CT_AutoSortScope (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_AutoSortScope')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pivotArea uses Python identifier pivotArea
    __pivotArea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pivotArea'), 'pivotArea', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_AutoSortScope_httpschemas_openxmlformats_orgspreadsheetml2006mainpivotArea', False)

    
    pivotArea = property(__pivotArea.value, __pivotArea.set, None, u'Auto Sort Scope')


    _ElementMap = {
        __pivotArea.name() : __pivotArea
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_AutoSortScope', CT_AutoSortScope)


# Complex type CT_Pages with content type ELEMENT_ONLY
class CT_Pages (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Pages')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}page uses Python identifier page
    __page = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'page'), 'page', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Pages_httpschemas_openxmlformats_orgspreadsheetml2006mainpage', True)

    
    page = property(__page.value, __page.set, None, u'Page Items')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Pages_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Page Item String Count')


    _ElementMap = {
        __page.name() : __page
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_Pages', CT_Pages)


# Complex type CT_Cfvo with content type ELEMENT_ONLY
class CT_Cfvo (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Cfvo')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Cfvo_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Cfvo_type', ST_CfvoType, required=True)
    
    type = property(__type.value, __type.set, None, u'Type')

    
    # Attribute gte uses Python identifier gte
    __gte = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'gte'), 'gte', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Cfvo_gte', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    gte = property(__gte.value, __gte.set, None, u'Greater Than Or Equal')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Cfvo_val', _s.ST_Xstring)
    
    val = property(__val.value, __val.set, None, u'Value')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __type.name() : __type,
        __gte.name() : __gte,
        __val.name() : __val
    }
Namespace.addCategoryObject('typeBinding', u'CT_Cfvo', CT_Cfvo)


# Complex type CT_RevisionInsertSheet with content type EMPTY
class CT_RevisionInsertSheet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RevisionInsertSheet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ra uses Python identifier ra
    __ra = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ra'), 'ra', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionInsertSheet_ra', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ra = property(__ra.value, __ra.set, None, u'Revision Undo Rejected')

    
    # Attribute sheetPosition uses Python identifier sheetPosition
    __sheetPosition = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheetPosition'), 'sheetPosition', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionInsertSheet_sheetPosition', pyxb.binding.datatypes.unsignedInt, required=True)
    
    sheetPosition = property(__sheetPosition.value, __sheetPosition.set, None, u'Sheet Position')

    
    # Attribute rId uses Python identifier rId
    __rId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rId'), 'rId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionInsertSheet_rId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    rId = property(__rId.value, __rId.set, None, u'Revision Id')

    
    # Attribute sheetId uses Python identifier sheetId
    __sheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheetId'), 'sheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionInsertSheet_sheetId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    sheetId = property(__sheetId.value, __sheetId.set, None, u'Sheet Id')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionInsertSheet_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Sheet Name')

    
    # Attribute ua uses Python identifier ua
    __ua = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ua'), 'ua', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionInsertSheet_ua', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ua = property(__ua.value, __ua.set, None, u'Revision From Rejection')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __ra.name() : __ra,
        __sheetPosition.name() : __sheetPosition,
        __rId.name() : __rId,
        __sheetId.name() : __sheetId,
        __name.name() : __name,
        __ua.name() : __ua
    }
Namespace.addCategoryObject('typeBinding', u'CT_RevisionInsertSheet', CT_RevisionInsertSheet)


# Complex type CT_RangeSets with content type ELEMENT_ONLY
class CT_RangeSets (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RangeSets')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rangeSet uses Python identifier rangeSet
    __rangeSet = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rangeSet'), 'rangeSet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangeSets_httpschemas_openxmlformats_orgspreadsheetml2006mainrangeSet', True)

    
    rangeSet = property(__rangeSet.value, __rangeSet.set, None, u'Range Set')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangeSets_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Reference and Page Item Count')


    _ElementMap = {
        __rangeSet.name() : __rangeSet
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_RangeSets', CT_RangeSets)


# Complex type CT_colItems with content type ELEMENT_ONLY
class CT_colItems (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_colItems')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}i uses Python identifier i
    __i = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'i'), 'i', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_colItems_httpschemas_openxmlformats_orgspreadsheetml2006maini', True)

    
    i = property(__i.value, __i.set, None, u'Column Items')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_colItems_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Column Item Count')


    _ElementMap = {
        __i.name() : __i
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_colItems', CT_colItems)


# Complex type CT_MeasureDimensionMap with content type EMPTY
class CT_MeasureDimensionMap (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MeasureDimensionMap')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute measureGroup uses Python identifier measureGroup
    __measureGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'measureGroup'), 'measureGroup', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MeasureDimensionMap_measureGroup', pyxb.binding.datatypes.unsignedInt)
    
    measureGroup = property(__measureGroup.value, __measureGroup.set, None, u'Measure Group Id')

    
    # Attribute dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dimension'), 'dimension', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MeasureDimensionMap_dimension', pyxb.binding.datatypes.unsignedInt)
    
    dimension = property(__dimension.value, __dimension.set, None, u'Dimension Id')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __measureGroup.name() : __measureGroup,
        __dimension.name() : __dimension
    }
Namespace.addCategoryObject('typeBinding', u'CT_MeasureDimensionMap', CT_MeasureDimensionMap)


# Complex type CT_DefinedNames with content type ELEMENT_ONLY
class CT_DefinedNames (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DefinedNames')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}definedName uses Python identifier definedName
    __definedName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'definedName'), 'definedName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedNames_httpschemas_openxmlformats_orgspreadsheetml2006maindefinedName', True)

    
    definedName = property(__definedName.value, __definedName.set, None, u'Defined Name')


    _ElementMap = {
        __definedName.name() : __definedName
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_DefinedNames', CT_DefinedNames)


# Complex type CT_Tuple with content type EMPTY
class CT_Tuple (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Tuple')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute item uses Python identifier item
    __item = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'item'), 'item', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Tuple_item', pyxb.binding.datatypes.unsignedInt, required=True)
    
    item = property(__item.value, __item.set, None, u'Item Index')

    
    # Attribute hier uses Python identifier hier
    __hier = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hier'), 'hier', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Tuple_hier', pyxb.binding.datatypes.unsignedInt)
    
    hier = property(__hier.value, __hier.set, None, u'Hierarchy Index')

    
    # Attribute fld uses Python identifier fld
    __fld = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fld'), 'fld', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Tuple_fld', pyxb.binding.datatypes.unsignedInt)
    
    fld = property(__fld.value, __fld.set, None, u'Field Index')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __item.name() : __item,
        __hier.name() : __hier,
        __fld.name() : __fld
    }
Namespace.addCategoryObject('typeBinding', u'CT_Tuple', CT_Tuple)


# Complex type CT_CellProtection with content type EMPTY
class CT_CellProtection (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CellProtection')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute hidden uses Python identifier hidden
    __hidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hidden'), 'hidden', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellProtection_hidden', pyxb.binding.datatypes.boolean)
    
    hidden = property(__hidden.value, __hidden.set, None, u'Hidden Cell')

    
    # Attribute locked uses Python identifier locked
    __locked = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'locked'), 'locked', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellProtection_locked', pyxb.binding.datatypes.boolean)
    
    locked = property(__locked.value, __locked.set, None, u'Cell Locked')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __hidden.name() : __hidden,
        __locked.name() : __locked
    }
Namespace.addCategoryObject('typeBinding', u'CT_CellProtection', CT_CellProtection)


# Complex type CT_PivotSelection with content type ELEMENT_ONLY
class CT_PivotSelection (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotSelection')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pivotArea uses Python identifier pivotArea
    __pivotArea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pivotArea'), 'pivotArea', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_httpschemas_openxmlformats_orgspreadsheetml2006mainpivotArea', False)

    
    pivotArea = property(__pivotArea.value, __pivotArea.set, None, u'Pivot Area')

    
    # Attribute min uses Python identifier min
    __min = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'min'), 'min', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_min', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    min = property(__min.value, __min.set, None, u'Minimum')

    
    # Attribute extendable uses Python identifier extendable
    __extendable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'extendable'), 'extendable', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_extendable', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    extendable = property(__extendable.value, __extendable.set, None, u'Extendable')

    
    # Attribute max uses Python identifier max
    __max = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'max'), 'max', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_max', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    max = property(__max.value, __max.set, None, u'Maximum')

    
    # Attribute click uses Python identifier click
    __click = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'click'), 'click', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_click', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    click = property(__click.value, __click.set, None, u'Click Count')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute pane uses Python identifier pane
    __pane = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pane'), 'pane', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_pane', ST_Pane, unicode_default=u'topLeft')
    
    pane = property(__pane.value, __pane.set, None, u'Pane')

    
    # Attribute axis uses Python identifier axis
    __axis = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'axis'), 'axis', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_axis', ST_Axis)
    
    axis = property(__axis.value, __axis.set, None, u'Axis')

    
    # Attribute dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dimension'), 'dimension', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_dimension', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    dimension = property(__dimension.value, __dimension.set, None, u'Dimension')

    
    # Attribute activeRow uses Python identifier activeRow
    __activeRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'activeRow'), 'activeRow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_activeRow', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    activeRow = property(__activeRow.value, __activeRow.set, None, u'Active Row')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_count', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    count = property(__count.value, __count.set, None, u'Selection Count')

    
    # Attribute activeCol uses Python identifier activeCol
    __activeCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'activeCol'), 'activeCol', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_activeCol', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    activeCol = property(__activeCol.value, __activeCol.set, None, u'Active Column')

    
    # Attribute label uses Python identifier label
    __label = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'label'), 'label', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_label', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    label = property(__label.value, __label.set, None, u'Label')

    
    # Attribute showHeader uses Python identifier showHeader
    __showHeader = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showHeader'), 'showHeader', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_showHeader', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showHeader = property(__showHeader.value, __showHeader.set, None, u'Show Header')

    
    # Attribute start uses Python identifier start
    __start = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'start'), 'start', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_start', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    start = property(__start.value, __start.set, None, u'Start')

    
    # Attribute data uses Python identifier data
    __data = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'data'), 'data', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_data', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    data = property(__data.value, __data.set, None, u'Data Selection')

    
    # Attribute previousCol uses Python identifier previousCol
    __previousCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'previousCol'), 'previousCol', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_previousCol', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    previousCol = property(__previousCol.value, __previousCol.set, None, u'Previous Column Selection')

    
    # Attribute previousRow uses Python identifier previousRow
    __previousRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'previousRow'), 'previousRow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotSelection_previousRow', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    previousRow = property(__previousRow.value, __previousRow.set, None, u'Previous Row')


    _ElementMap = {
        __pivotArea.name() : __pivotArea
    }
    _AttributeMap = {
        __min.name() : __min,
        __extendable.name() : __extendable,
        __max.name() : __max,
        __click.name() : __click,
        __id.name() : __id,
        __pane.name() : __pane,
        __axis.name() : __axis,
        __dimension.name() : __dimension,
        __activeRow.name() : __activeRow,
        __count.name() : __count,
        __activeCol.name() : __activeCol,
        __label.name() : __label,
        __showHeader.name() : __showHeader,
        __start.name() : __start,
        __data.name() : __data,
        __previousCol.name() : __previousCol,
        __previousRow.name() : __previousRow
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotSelection', CT_PivotSelection)


# Complex type CT_PivotCaches with content type ELEMENT_ONLY
class CT_PivotCaches (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotCaches')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pivotCache uses Python identifier pivotCache
    __pivotCache = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pivotCache'), 'pivotCache', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCaches_httpschemas_openxmlformats_orgspreadsheetml2006mainpivotCache', True)

    
    pivotCache = property(__pivotCache.value, __pivotCache.set, None, u'PivotCache')


    _ElementMap = {
        __pivotCache.name() : __pivotCache
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotCaches', CT_PivotCaches)


# Complex type CT_RevisionHeaders with content type ELEMENT_ONLY
class CT_RevisionHeaders (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RevisionHeaders')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}header uses Python identifier header
    __header = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'header'), 'header', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeaders_httpschemas_openxmlformats_orgspreadsheetml2006mainheader', True)

    
    header = property(__header.value, __header.set, None, u'Header')

    
    # Attribute history uses Python identifier history
    __history = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'history'), 'history', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeaders_history', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    history = property(__history.value, __history.set, None, u'History')

    
    # Attribute exclusive uses Python identifier exclusive
    __exclusive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'exclusive'), 'exclusive', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeaders_exclusive', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    exclusive = property(__exclusive.value, __exclusive.set, None, u'Exclusive Mode')

    
    # Attribute protected uses Python identifier protected
    __protected = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'protected'), 'protected', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeaders_protected', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    protected = property(__protected.value, __protected.set, None, u'Protected')

    
    # Attribute guid uses Python identifier guid
    __guid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'guid'), 'guid', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeaders_guid', _s.ST_Guid, required=True)
    
    guid = property(__guid.value, __guid.set, None, u'Last Revision GUID')

    
    # Attribute preserveHistory uses Python identifier preserveHistory
    __preserveHistory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'preserveHistory'), 'preserveHistory', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeaders_preserveHistory', pyxb.binding.datatypes.unsignedInt, unicode_default=u'30')
    
    preserveHistory = property(__preserveHistory.value, __preserveHistory.set, None, u'Preserve History')

    
    # Attribute lastGuid uses Python identifier lastGuid
    __lastGuid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'lastGuid'), 'lastGuid', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeaders_lastGuid', _s.ST_Guid)
    
    lastGuid = property(__lastGuid.value, __lastGuid.set, None, u'Last GUID')

    
    # Attribute keepChangeHistory uses Python identifier keepChangeHistory
    __keepChangeHistory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'keepChangeHistory'), 'keepChangeHistory', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeaders_keepChangeHistory', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    keepChangeHistory = property(__keepChangeHistory.value, __keepChangeHistory.set, None, u'Keep Change History')

    
    # Attribute revisionId uses Python identifier revisionId
    __revisionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'revisionId'), 'revisionId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeaders_revisionId', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    revisionId = property(__revisionId.value, __revisionId.set, None, u'Revision Id')

    
    # Attribute diskRevisions uses Python identifier diskRevisions
    __diskRevisions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'diskRevisions'), 'diskRevisions', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeaders_diskRevisions', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    diskRevisions = property(__diskRevisions.value, __diskRevisions.set, None, u'Disk Revisions')

    
    # Attribute version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'version'), 'version', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeaders_version', pyxb.binding.datatypes.int, unicode_default=u'1')
    
    version = property(__version.value, __version.set, None, u'Version')

    
    # Attribute trackRevisions uses Python identifier trackRevisions
    __trackRevisions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'trackRevisions'), 'trackRevisions', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeaders_trackRevisions', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    trackRevisions = property(__trackRevisions.value, __trackRevisions.set, None, u'Track Revisions')

    
    # Attribute shared uses Python identifier shared
    __shared = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'shared'), 'shared', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionHeaders_shared', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    shared = property(__shared.value, __shared.set, None, u'Shared Workbook')


    _ElementMap = {
        __header.name() : __header
    }
    _AttributeMap = {
        __history.name() : __history,
        __exclusive.name() : __exclusive,
        __protected.name() : __protected,
        __guid.name() : __guid,
        __preserveHistory.name() : __preserveHistory,
        __lastGuid.name() : __lastGuid,
        __keepChangeHistory.name() : __keepChangeHistory,
        __revisionId.name() : __revisionId,
        __diskRevisions.name() : __diskRevisions,
        __version.name() : __version,
        __trackRevisions.name() : __trackRevisions,
        __shared.name() : __shared
    }
Namespace.addCategoryObject('typeBinding', u'CT_RevisionHeaders', CT_RevisionHeaders)


# Complex type CT_CustomChartsheetViews with content type ELEMENT_ONLY
class CT_CustomChartsheetViews (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CustomChartsheetViews')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}customSheetView uses Python identifier customSheetView
    __customSheetView = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'customSheetView'), 'customSheetView', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomChartsheetViews_httpschemas_openxmlformats_orgspreadsheetml2006maincustomSheetView', True)

    
    customSheetView = property(__customSheetView.value, __customSheetView.set, None, u'Custom Chart Sheet View')


    _ElementMap = {
        __customSheetView.name() : __customSheetView
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_CustomChartsheetViews', CT_CustomChartsheetViews)


# Complex type CT_ExternalSheetName with content type EMPTY
class CT_ExternalSheetName (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ExternalSheetName')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalSheetName_val', _s.ST_Xstring)
    
    val = property(__val.value, __val.set, None, u'Sheet Name Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
Namespace.addCategoryObject('typeBinding', u'CT_ExternalSheetName', CT_ExternalSheetName)


# Complex type CT_TableMissing with content type EMPTY
class CT_TableMissing (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_TableMissing')
    # Base type is pyxb.binding.datatypes.anyType

    _ElementMap = {
        
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_TableMissing', CT_TableMissing)


# Complex type CT_Break with content type EMPTY
class CT_Break (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Break')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute max uses Python identifier max
    __max = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'max'), 'max', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Break_max', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    max = property(__max.value, __max.set, None, u'Maximum')

    
    # Attribute man uses Python identifier man
    __man = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'man'), 'man', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Break_man', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    man = property(__man.value, __man.set, None, u'Manual Page Break')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Break_id', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    id = property(__id.value, __id.set, None, u'Id')

    
    # Attribute min uses Python identifier min
    __min = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'min'), 'min', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Break_min', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    min = property(__min.value, __min.set, None, u'Minimum')

    
    # Attribute pt uses Python identifier pt
    __pt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'pt'), 'pt', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Break_pt', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    pt = property(__pt.value, __pt.set, None, u'Pivot-Created Page Break')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __max.name() : __max,
        __man.name() : __man,
        __id.name() : __id,
        __min.name() : __min,
        __pt.name() : __pt
    }
Namespace.addCategoryObject('typeBinding', u'CT_Break', CT_Break)


# Complex type CT_CustomWorkbookView with content type ELEMENT_ONLY
class CT_CustomWorkbookView (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CustomWorkbookView')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Attribute showObjects uses Python identifier showObjects
    __showObjects = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showObjects'), 'showObjects', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_showObjects', ST_Objects, unicode_default=u'all')
    
    showObjects = property(__showObjects.value, __showObjects.set, None, u'Show Objects')

    
    # Attribute changesSavedWin uses Python identifier changesSavedWin
    __changesSavedWin = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'changesSavedWin'), 'changesSavedWin', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_changesSavedWin', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    changesSavedWin = property(__changesSavedWin.value, __changesSavedWin.set, None, u'Changes Saved Win')

    
    # Attribute autoUpdate uses Python identifier autoUpdate
    __autoUpdate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoUpdate'), 'autoUpdate', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_autoUpdate', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    autoUpdate = property(__autoUpdate.value, __autoUpdate.set, None, u'Auto Update')

    
    # Attribute onlySync uses Python identifier onlySync
    __onlySync = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onlySync'), 'onlySync', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_onlySync', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    onlySync = property(__onlySync.value, __onlySync.set, None, u'Only Synch')

    
    # Attribute personalView uses Python identifier personalView
    __personalView = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'personalView'), 'personalView', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_personalView', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    personalView = property(__personalView.value, __personalView.set, None, u'Personal View')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Custom View Name')

    
    # Attribute includePrintSettings uses Python identifier includePrintSettings
    __includePrintSettings = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'includePrintSettings'), 'includePrintSettings', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_includePrintSettings', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    includePrintSettings = property(__includePrintSettings.value, __includePrintSettings.set, None, u'Include Print Settings')

    
    # Attribute includeHiddenRowCol uses Python identifier includeHiddenRowCol
    __includeHiddenRowCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'includeHiddenRowCol'), 'includeHiddenRowCol', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_includeHiddenRowCol', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    includeHiddenRowCol = property(__includeHiddenRowCol.value, __includeHiddenRowCol.set, None, u'Include Hidden Rows & Columns')

    
    # Attribute maximized uses Python identifier maximized
    __maximized = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maximized'), 'maximized', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_maximized', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    maximized = property(__maximized.value, __maximized.set, None, u'Maximized')

    
    # Attribute minimized uses Python identifier minimized
    __minimized = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minimized'), 'minimized', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_minimized', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    minimized = property(__minimized.value, __minimized.set, None, u'Minimized')

    
    # Attribute showHorizontalScroll uses Python identifier showHorizontalScroll
    __showHorizontalScroll = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showHorizontalScroll'), 'showHorizontalScroll', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_showHorizontalScroll', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showHorizontalScroll = property(__showHorizontalScroll.value, __showHorizontalScroll.set, None, u'Show Horizontal Scroll')

    
    # Attribute guid uses Python identifier guid
    __guid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'guid'), 'guid', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_guid', _s.ST_Guid, required=True)
    
    guid = property(__guid.value, __guid.set, None, u'Custom View GUID')

    
    # Attribute showVerticalScroll uses Python identifier showVerticalScroll
    __showVerticalScroll = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showVerticalScroll'), 'showVerticalScroll', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_showVerticalScroll', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showVerticalScroll = property(__showVerticalScroll.value, __showVerticalScroll.set, None, u'Show Vertical Scroll')

    
    # Attribute showSheetTabs uses Python identifier showSheetTabs
    __showSheetTabs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showSheetTabs'), 'showSheetTabs', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_showSheetTabs', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showSheetTabs = property(__showSheetTabs.value, __showSheetTabs.set, None, u'Show Sheet Tabs')

    
    # Attribute xWindow uses Python identifier xWindow
    __xWindow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xWindow'), 'xWindow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_xWindow', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    xWindow = property(__xWindow.value, __xWindow.set, None, u'Top Left Corner (X Coordinate)')

    
    # Attribute yWindow uses Python identifier yWindow
    __yWindow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'yWindow'), 'yWindow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_yWindow', pyxb.binding.datatypes.int, unicode_default=u'0')
    
    yWindow = property(__yWindow.value, __yWindow.set, None, u'Top Left Corner (Y Coordinate)')

    
    # Attribute windowWidth uses Python identifier windowWidth
    __windowWidth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'windowWidth'), 'windowWidth', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_windowWidth', pyxb.binding.datatypes.unsignedInt, required=True)
    
    windowWidth = property(__windowWidth.value, __windowWidth.set, None, u'Window Width')

    
    # Attribute windowHeight uses Python identifier windowHeight
    __windowHeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'windowHeight'), 'windowHeight', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_windowHeight', pyxb.binding.datatypes.unsignedInt, required=True)
    
    windowHeight = property(__windowHeight.value, __windowHeight.set, None, u'Window Height')

    
    # Attribute mergeInterval uses Python identifier mergeInterval
    __mergeInterval = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mergeInterval'), 'mergeInterval', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_mergeInterval', pyxb.binding.datatypes.unsignedInt)
    
    mergeInterval = property(__mergeInterval.value, __mergeInterval.set, None, u'Merge Interval')

    
    # Attribute tabRatio uses Python identifier tabRatio
    __tabRatio = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tabRatio'), 'tabRatio', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_tabRatio', pyxb.binding.datatypes.unsignedInt, unicode_default=u'600')
    
    tabRatio = property(__tabRatio.value, __tabRatio.set, None, u'Sheet Tab Ratio')

    
    # Attribute activeSheetId uses Python identifier activeSheetId
    __activeSheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'activeSheetId'), 'activeSheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_activeSheetId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    activeSheetId = property(__activeSheetId.value, __activeSheetId.set, None, u'Active Sheet in Book View')

    
    # Attribute showFormulaBar uses Python identifier showFormulaBar
    __showFormulaBar = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showFormulaBar'), 'showFormulaBar', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_showFormulaBar', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showFormulaBar = property(__showFormulaBar.value, __showFormulaBar.set, None, u'Show Formula Bar')

    
    # Attribute showStatusbar uses Python identifier showStatusbar
    __showStatusbar = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showStatusbar'), 'showStatusbar', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_showStatusbar', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showStatusbar = property(__showStatusbar.value, __showStatusbar.set, None, u'Show Status Bar')

    
    # Attribute showComments uses Python identifier showComments
    __showComments = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showComments'), 'showComments', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookView_showComments', ST_Comments, unicode_default=u'commIndicator')
    
    showComments = property(__showComments.value, __showComments.set, None, u'Show Comments')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __showObjects.name() : __showObjects,
        __changesSavedWin.name() : __changesSavedWin,
        __autoUpdate.name() : __autoUpdate,
        __onlySync.name() : __onlySync,
        __personalView.name() : __personalView,
        __name.name() : __name,
        __includePrintSettings.name() : __includePrintSettings,
        __includeHiddenRowCol.name() : __includeHiddenRowCol,
        __maximized.name() : __maximized,
        __minimized.name() : __minimized,
        __showHorizontalScroll.name() : __showHorizontalScroll,
        __guid.name() : __guid,
        __showVerticalScroll.name() : __showVerticalScroll,
        __showSheetTabs.name() : __showSheetTabs,
        __xWindow.name() : __xWindow,
        __yWindow.name() : __yWindow,
        __windowWidth.name() : __windowWidth,
        __windowHeight.name() : __windowHeight,
        __mergeInterval.name() : __mergeInterval,
        __tabRatio.name() : __tabRatio,
        __activeSheetId.name() : __activeSheetId,
        __showFormulaBar.name() : __showFormulaBar,
        __showStatusbar.name() : __showStatusbar,
        __showComments.name() : __showComments
    }
Namespace.addCategoryObject('typeBinding', u'CT_CustomWorkbookView', CT_CustomWorkbookView)


# Complex type CT_TextField with content type EMPTY
class CT_TextField (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_TextField')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute position uses Python identifier position
    __position = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'position'), 'position', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextField_position', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    position = property(__position.value, __position.set, None, u'Position')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextField_type', ST_ExternalConnectionType, unicode_default=u'general')
    
    type = property(__type.value, __type.set, None, u'Field Type')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __position.name() : __position,
        __type.name() : __type
    }
Namespace.addCategoryObject('typeBinding', u'CT_TextField', CT_TextField)


# Complex type CT_CellStyle with content type ELEMENT_ONLY
class CT_CellStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CellStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellStyle_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Attribute xfId uses Python identifier xfId
    __xfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xfId'), 'xfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellStyle_xfId', ST_CellStyleXfId, required=True)
    
    xfId = property(__xfId.value, __xfId.set, None, u'Format Id')

    
    # Attribute hidden uses Python identifier hidden
    __hidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hidden'), 'hidden', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellStyle_hidden', pyxb.binding.datatypes.boolean)
    
    hidden = property(__hidden.value, __hidden.set, None, u'Hidden Style')

    
    # Attribute customBuiltin uses Python identifier customBuiltin
    __customBuiltin = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'customBuiltin'), 'customBuiltin', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellStyle_customBuiltin', pyxb.binding.datatypes.boolean)
    
    customBuiltin = property(__customBuiltin.value, __customBuiltin.set, None, u'Custom Built In')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellStyle_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'User Defined Cell Style')

    
    # Attribute builtinId uses Python identifier builtinId
    __builtinId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'builtinId'), 'builtinId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellStyle_builtinId', pyxb.binding.datatypes.unsignedInt)
    
    builtinId = property(__builtinId.value, __builtinId.set, None, u'Built-In Style Id')

    
    # Attribute iLevel uses Python identifier iLevel
    __iLevel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'iLevel'), 'iLevel', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellStyle_iLevel', pyxb.binding.datatypes.unsignedInt)
    
    iLevel = property(__iLevel.value, __iLevel.set, None, u'Outline Style')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __xfId.name() : __xfId,
        __hidden.name() : __hidden,
        __customBuiltin.name() : __customBuiltin,
        __name.name() : __name,
        __builtinId.name() : __builtinId,
        __iLevel.name() : __iLevel
    }
Namespace.addCategoryObject('typeBinding', u'CT_CellStyle', CT_CellStyle)


# Complex type CT_CellSmartTagPr with content type EMPTY
class CT_CellSmartTagPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CellSmartTagPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellSmartTagPr_val', _s.ST_Xstring, required=True)
    
    val = property(__val.value, __val.set, None, u'Value')

    
    # Attribute key uses Python identifier key
    __key = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'key'), 'key', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellSmartTagPr_key', _s.ST_Xstring, required=True)
    
    key = property(__key.value, __key.set, None, u'Key Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val,
        __key.name() : __key
    }
Namespace.addCategoryObject('typeBinding', u'CT_CellSmartTagPr', CT_CellSmartTagPr)


# Complex type CT_ExternalLink with content type ELEMENT_ONLY
class CT_ExternalLink (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ExternalLink')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}externalBook uses Python identifier externalBook
    __externalBook = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'externalBook'), 'externalBook', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalLink_httpschemas_openxmlformats_orgspreadsheetml2006mainexternalBook', False)

    
    externalBook = property(__externalBook.value, __externalBook.set, None, u'External Workbook')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}ddeLink uses Python identifier ddeLink
    __ddeLink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ddeLink'), 'ddeLink', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalLink_httpschemas_openxmlformats_orgspreadsheetml2006mainddeLink', False)

    
    ddeLink = property(__ddeLink.value, __ddeLink.set, None, u'DDE Connection')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}oleLink uses Python identifier oleLink
    __oleLink = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'oleLink'), 'oleLink', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalLink_httpschemas_openxmlformats_orgspreadsheetml2006mainoleLink', False)

    
    oleLink = property(__oleLink.value, __oleLink.set, None, u'Generic Object Link Connection')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalLink_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)


    _ElementMap = {
        __externalBook.name() : __externalBook,
        __ddeLink.name() : __ddeLink,
        __oleLink.name() : __oleLink,
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_ExternalLink', CT_ExternalLink)


# Complex type CT_MdxKPI with content type EMPTY
class CT_MdxKPI (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MdxKPI')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute np uses Python identifier np
    __np = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'np'), 'np', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxKPI_np', pyxb.binding.datatypes.unsignedInt, required=True)
    
    np = property(__np.value, __np.set, None, u'KPI Index')

    
    # Attribute p uses Python identifier p
    __p = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'p'), 'p', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxKPI_p', ST_MdxKPIProperty, required=True)
    
    p = property(__p.value, __p.set, None, u'KPI Property')

    
    # Attribute n uses Python identifier n
    __n = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'n'), 'n', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxKPI_n', pyxb.binding.datatypes.unsignedInt, required=True)
    
    n = property(__n.value, __n.set, None, u'Member Unique Name Index')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __np.name() : __np,
        __p.name() : __p,
        __n.name() : __n
    }
Namespace.addCategoryObject('typeBinding', u'CT_MdxKPI', CT_MdxKPI)


# Complex type CT_Map with content type ELEMENT_ONLY
class CT_Map (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Map')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}DataBinding uses Python identifier DataBinding
    __DataBinding = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'DataBinding'), 'DataBinding', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Map_httpschemas_openxmlformats_orgspreadsheetml2006mainDataBinding', False)

    
    DataBinding = property(__DataBinding.value, __DataBinding.set, None, u'XML Mapping')

    
    # Attribute ID uses Python identifier ID
    __ID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ID'), 'ID', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Map_ID', pyxb.binding.datatypes.unsignedInt, required=True)
    
    ID = property(__ID.value, __ID.set, None, u'XML Mapping ID')

    
    # Attribute PreserveFormat uses Python identifier PreserveFormat
    __PreserveFormat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'PreserveFormat'), 'PreserveFormat', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Map_PreserveFormat', pyxb.binding.datatypes.boolean, required=True)
    
    PreserveFormat = property(__PreserveFormat.value, __PreserveFormat.set, None, u'Preserve Cell Formatting')

    
    # Attribute Append uses Python identifier Append
    __Append = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'Append'), 'Append', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Map_Append', pyxb.binding.datatypes.boolean, required=True)
    
    Append = property(__Append.value, __Append.set, None, u'Append Data to Table')

    
    # Attribute PreserveSortAFLayout uses Python identifier PreserveSortAFLayout
    __PreserveSortAFLayout = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'PreserveSortAFLayout'), 'PreserveSortAFLayout', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Map_PreserveSortAFLayout', pyxb.binding.datatypes.boolean, required=True)
    
    PreserveSortAFLayout = property(__PreserveSortAFLayout.value, __PreserveSortAFLayout.set, None, u'Preserve AutoFilter State')

    
    # Attribute RootElement uses Python identifier RootElement
    __RootElement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'RootElement'), 'RootElement', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Map_RootElement', pyxb.binding.datatypes.string, required=True)
    
    RootElement = property(__RootElement.value, __RootElement.set, None, u'Root Element Name')

    
    # Attribute Name uses Python identifier Name
    __Name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'Name'), 'Name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Map_Name', pyxb.binding.datatypes.string, required=True)
    
    Name = property(__Name.value, __Name.set, None, u'XML Mapping Name')

    
    # Attribute SchemaID uses Python identifier SchemaID
    __SchemaID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'SchemaID'), 'SchemaID', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Map_SchemaID', pyxb.binding.datatypes.string, required=True)
    
    SchemaID = property(__SchemaID.value, __SchemaID.set, None, u'Schema Name')

    
    # Attribute ShowImportExportValidationErrors uses Python identifier ShowImportExportValidationErrors
    __ShowImportExportValidationErrors = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ShowImportExportValidationErrors'), 'ShowImportExportValidationErrors', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Map_ShowImportExportValidationErrors', pyxb.binding.datatypes.boolean, required=True)
    
    ShowImportExportValidationErrors = property(__ShowImportExportValidationErrors.value, __ShowImportExportValidationErrors.set, None, u'Show Validation Errors')

    
    # Attribute AutoFit uses Python identifier AutoFit
    __AutoFit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'AutoFit'), 'AutoFit', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Map_AutoFit', pyxb.binding.datatypes.boolean, required=True)
    
    AutoFit = property(__AutoFit.value, __AutoFit.set, None, u'AutoFit Table on Refresh')


    _ElementMap = {
        __DataBinding.name() : __DataBinding
    }
    _AttributeMap = {
        __ID.name() : __ID,
        __PreserveFormat.name() : __PreserveFormat,
        __Append.name() : __Append,
        __PreserveSortAFLayout.name() : __PreserveSortAFLayout,
        __RootElement.name() : __RootElement,
        __Name.name() : __Name,
        __SchemaID.name() : __SchemaID,
        __ShowImportExportValidationErrors.name() : __ShowImportExportValidationErrors,
        __AutoFit.name() : __AutoFit
    }
Namespace.addCategoryObject('typeBinding', u'CT_Map', CT_Map)


# Complex type CT_Top10 with content type EMPTY
class CT_Top10 (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Top10')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute top uses Python identifier top
    __top = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'top'), 'top', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Top10_top', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    top = property(__top.value, __top.set, None, u'Top')

    
    # Attribute percent uses Python identifier percent
    __percent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'percent'), 'percent', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Top10_percent', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    percent = property(__percent.value, __percent.set, None, u'Filter by Percent')

    
    # Attribute filterVal uses Python identifier filterVal
    __filterVal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'filterVal'), 'filterVal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Top10_filterVal', pyxb.binding.datatypes.double)
    
    filterVal = property(__filterVal.value, __filterVal.set, None, u'Filter Value')

    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Top10_val', pyxb.binding.datatypes.double, required=True)
    
    val = property(__val.value, __val.set, None, u'Top or Bottom Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __top.name() : __top,
        __percent.name() : __percent,
        __filterVal.name() : __filterVal,
        __val.name() : __val
    }
Namespace.addCategoryObject('typeBinding', u'CT_Top10', CT_Top10)


# Complex type CT_RgbColor with content type EMPTY
class CT_RgbColor (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RgbColor')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute rgb uses Python identifier rgb
    __rgb = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rgb'), 'rgb', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RgbColor_rgb', ST_UnsignedIntHex)
    
    rgb = property(__rgb.value, __rgb.set, None, u'Alpha Red Green Blue')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __rgb.name() : __rgb
    }
Namespace.addCategoryObject('typeBinding', u'CT_RgbColor', CT_RgbColor)


# Complex type CT_Control with content type ELEMENT_ONLY
class CT_Control (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Control')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}controlPr uses Python identifier controlPr
    __controlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'controlPr'), 'controlPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Control_httpschemas_openxmlformats_orgspreadsheetml2006maincontrolPr', False)

    
    controlPr = property(__controlPr.value, __controlPr.set, None, u'Embedded Control Properties')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Control_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Control_name', pyxb.binding.datatypes.string)
    
    name = property(__name.value, __name.set, None, u'Control Name')

    
    # Attribute shapeId uses Python identifier shapeId
    __shapeId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'shapeId'), 'shapeId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Control_shapeId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    shapeId = property(__shapeId.value, __shapeId.set, None, u'Shape Id')


    _ElementMap = {
        __controlPr.name() : __controlPr
    }
    _AttributeMap = {
        __id.name() : __id,
        __name.name() : __name,
        __shapeId.name() : __shapeId
    }
Namespace.addCategoryObject('typeBinding', u'CT_Control', CT_Control)


# Complex type CT_PivotCacheRecords with content type ELEMENT_ONLY
class CT_PivotCacheRecords (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotCacheRecords')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheRecords_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}r uses Python identifier r
    __r = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'r'), 'r', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheRecords_httpschemas_openxmlformats_orgspreadsheetml2006mainr', True)

    
    r = property(__r.value, __r.set, None, u'PivotCache Record')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotCacheRecords_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'PivotCache Records Count')


    _ElementMap = {
        __extLst.name() : __extLst,
        __r.name() : __r
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotCacheRecords', CT_PivotCacheRecords)


# Complex type CT_IgnoredErrors with content type ELEMENT_ONLY
class CT_IgnoredErrors (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_IgnoredErrors')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IgnoredErrors_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}ignoredError uses Python identifier ignoredError
    __ignoredError = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ignoredError'), 'ignoredError', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_IgnoredErrors_httpschemas_openxmlformats_orgspreadsheetml2006mainignoredError', True)

    
    ignoredError = property(__ignoredError.value, __ignoredError.set, None, u'Ignored Error')


    _ElementMap = {
        __extLst.name() : __extLst,
        __ignoredError.name() : __ignoredError
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_IgnoredErrors', CT_IgnoredErrors)


# Complex type CT_PageField with content type ELEMENT_ONLY
class CT_PageField (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PageField')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageField_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Attribute item uses Python identifier item
    __item = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'item'), 'item', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageField_item', pyxb.binding.datatypes.unsignedInt)
    
    item = property(__item.value, __item.set, None, u'Item Index')

    
    # Attribute cap uses Python identifier cap
    __cap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cap'), 'cap', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageField_cap', _s.ST_Xstring)
    
    cap = property(__cap.value, __cap.set, None, u'Hierarchy Display Name')

    
    # Attribute fld uses Python identifier fld
    __fld = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fld'), 'fld', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageField_fld', pyxb.binding.datatypes.int, required=True)
    
    fld = property(__fld.value, __fld.set, None, u'Field')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageField_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'Hierarchy Unique Name')

    
    # Attribute hier uses Python identifier hier
    __hier = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hier'), 'hier', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageField_hier', pyxb.binding.datatypes.int)
    
    hier = property(__hier.value, __hier.set, None, u'OLAP Hierarchy Index')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __item.name() : __item,
        __cap.name() : __cap,
        __fld.name() : __fld,
        __name.name() : __name,
        __hier.name() : __hier
    }
Namespace.addCategoryObject('typeBinding', u'CT_PageField', CT_PageField)


# Complex type CT_Dimensions with content type ELEMENT_ONLY
class CT_Dimensions (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Dimensions')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dimension'), 'dimension', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dimensions_httpschemas_openxmlformats_orgspreadsheetml2006maindimension', True)

    
    dimension = property(__dimension.value, __dimension.set, None, u'OLAP Dimension')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dimensions_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'OLAP Dimensions Count')


    _ElementMap = {
        __dimension.name() : __dimension
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_Dimensions', CT_Dimensions)


# Complex type CT_FileSharing with content type EMPTY
class CT_FileSharing (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_FileSharing')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute hashValue uses Python identifier hashValue
    __hashValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hashValue'), 'hashValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileSharing_hashValue', pyxb.binding.datatypes.base64Binary)
    
    hashValue = property(__hashValue.value, __hashValue.set, None, u'Password Hash Value')

    
    # Attribute reservationPassword uses Python identifier reservationPassword
    __reservationPassword = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'reservationPassword'), 'reservationPassword', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileSharing_reservationPassword', ST_UnsignedShortHex)
    
    reservationPassword = property(__reservationPassword.value, __reservationPassword.set, None, u'Write Reservation Password')

    
    # Attribute algorithmName uses Python identifier algorithmName
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'algorithmName'), 'algorithmName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileSharing_algorithmName', _s.ST_Xstring)
    
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, u'Cryptographic Algorithm Name')

    
    # Attribute userName uses Python identifier userName
    __userName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'userName'), 'userName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileSharing_userName', _s.ST_Xstring)
    
    userName = property(__userName.value, __userName.set, None, u'User Name')

    
    # Attribute saltValue uses Python identifier saltValue
    __saltValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'saltValue'), 'saltValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileSharing_saltValue', pyxb.binding.datatypes.base64Binary)
    
    saltValue = property(__saltValue.value, __saltValue.set, None, u'Salt Value for Password Verifier')

    
    # Attribute readOnlyRecommended uses Python identifier readOnlyRecommended
    __readOnlyRecommended = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'readOnlyRecommended'), 'readOnlyRecommended', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileSharing_readOnlyRecommended', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    readOnlyRecommended = property(__readOnlyRecommended.value, __readOnlyRecommended.set, None, u'Read Only Recommended')

    
    # Attribute spinCount uses Python identifier spinCount
    __spinCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'spinCount'), 'spinCount', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_FileSharing_spinCount', pyxb.binding.datatypes.unsignedInt)
    
    spinCount = property(__spinCount.value, __spinCount.set, None, u'Iterations to Run Hashing Algorithm')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __hashValue.name() : __hashValue,
        __reservationPassword.name() : __reservationPassword,
        __algorithmName.name() : __algorithmName,
        __userName.name() : __userName,
        __saltValue.name() : __saltValue,
        __readOnlyRecommended.name() : __readOnlyRecommended,
        __spinCount.name() : __spinCount
    }
Namespace.addCategoryObject('typeBinding', u'CT_FileSharing', CT_FileSharing)


# Complex type CT_SharedItems with content type ELEMENT_ONLY
class CT_SharedItems (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SharedItems')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}m uses Python identifier m
    __m = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'm'), 'm', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_httpschemas_openxmlformats_orgspreadsheetml2006mainm', True)

    
    m = property(__m.value, __m.set, None, u'No Value')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}d uses Python identifier d
    __d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'd'), 'd', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_httpschemas_openxmlformats_orgspreadsheetml2006maind', True)

    
    d = property(__d.value, __d.set, None, u'Date Time')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}s uses Python identifier s
    __s = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u's'), 's', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_httpschemas_openxmlformats_orgspreadsheetml2006mains', True)

    
    s = property(__s.value, __s.set, None, u'Character Value')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'b'), 'b', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_httpschemas_openxmlformats_orgspreadsheetml2006mainb', True)

    
    b = property(__b.value, __b.set, None, u'Boolean')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}n uses Python identifier n
    __n = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'n'), 'n', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_httpschemas_openxmlformats_orgspreadsheetml2006mainn', True)

    
    n = property(__n.value, __n.set, None, u'Numeric')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'e'), 'e', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_httpschemas_openxmlformats_orgspreadsheetml2006maine', True)

    
    e = property(__e.value, __e.set, None, u'Error Value')

    
    # Attribute longText uses Python identifier longText
    __longText = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'longText'), 'longText', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_longText', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    longText = property(__longText.value, __longText.set, None, u'Long Text')

    
    # Attribute containsNumber uses Python identifier containsNumber
    __containsNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'containsNumber'), 'containsNumber', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_containsNumber', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    containsNumber = property(__containsNumber.value, __containsNumber.set, None, u'Contains Numbers')

    
    # Attribute minValue uses Python identifier minValue
    __minValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minValue'), 'minValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_minValue', pyxb.binding.datatypes.double)
    
    minValue = property(__minValue.value, __minValue.set, None, u'Minimum Numeric Value')

    
    # Attribute containsString uses Python identifier containsString
    __containsString = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'containsString'), 'containsString', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_containsString', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    containsString = property(__containsString.value, __containsString.set, None, u'Contains String')

    
    # Attribute maxValue uses Python identifier maxValue
    __maxValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxValue'), 'maxValue', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_maxValue', pyxb.binding.datatypes.double)
    
    maxValue = property(__maxValue.value, __maxValue.set, None, u'Maximum Numeric Value')

    
    # Attribute containsBlank uses Python identifier containsBlank
    __containsBlank = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'containsBlank'), 'containsBlank', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_containsBlank', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    containsBlank = property(__containsBlank.value, __containsBlank.set, None, u'Contains Blank')

    
    # Attribute minDate uses Python identifier minDate
    __minDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minDate'), 'minDate', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_minDate', pyxb.binding.datatypes.dateTime)
    
    minDate = property(__minDate.value, __minDate.set, None, u'Minimum Date Time')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Shared Items Count')

    
    # Attribute containsSemiMixedTypes uses Python identifier containsSemiMixedTypes
    __containsSemiMixedTypes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'containsSemiMixedTypes'), 'containsSemiMixedTypes', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_containsSemiMixedTypes', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    containsSemiMixedTypes = property(__containsSemiMixedTypes.value, __containsSemiMixedTypes.set, None, u'Contains Semi Mixed Data Types')

    
    # Attribute maxDate uses Python identifier maxDate
    __maxDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxDate'), 'maxDate', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_maxDate', pyxb.binding.datatypes.dateTime)
    
    maxDate = property(__maxDate.value, __maxDate.set, None, u'Maximum Date Time Value')

    
    # Attribute containsMixedTypes uses Python identifier containsMixedTypes
    __containsMixedTypes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'containsMixedTypes'), 'containsMixedTypes', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_containsMixedTypes', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    containsMixedTypes = property(__containsMixedTypes.value, __containsMixedTypes.set, None, u'Contains Mixed Data Types')

    
    # Attribute containsNonDate uses Python identifier containsNonDate
    __containsNonDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'containsNonDate'), 'containsNonDate', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_containsNonDate', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    containsNonDate = property(__containsNonDate.value, __containsNonDate.set, None, u'Contains Non Date')

    
    # Attribute containsInteger uses Python identifier containsInteger
    __containsInteger = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'containsInteger'), 'containsInteger', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_containsInteger', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    containsInteger = property(__containsInteger.value, __containsInteger.set, None, u'Contains Integer')

    
    # Attribute containsDate uses Python identifier containsDate
    __containsDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'containsDate'), 'containsDate', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SharedItems_containsDate', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    containsDate = property(__containsDate.value, __containsDate.set, None, u'Contains Date')


    _ElementMap = {
        __m.name() : __m,
        __d.name() : __d,
        __s.name() : __s,
        __b.name() : __b,
        __n.name() : __n,
        __e.name() : __e
    }
    _AttributeMap = {
        __longText.name() : __longText,
        __containsNumber.name() : __containsNumber,
        __minValue.name() : __minValue,
        __containsString.name() : __containsString,
        __maxValue.name() : __maxValue,
        __containsBlank.name() : __containsBlank,
        __minDate.name() : __minDate,
        __count.name() : __count,
        __containsSemiMixedTypes.name() : __containsSemiMixedTypes,
        __maxDate.name() : __maxDate,
        __containsMixedTypes.name() : __containsMixedTypes,
        __containsNonDate.name() : __containsNonDate,
        __containsInteger.name() : __containsInteger,
        __containsDate.name() : __containsDate
    }
Namespace.addCategoryObject('typeBinding', u'CT_SharedItems', CT_SharedItems)


# Complex type CT_GroupMembers with content type ELEMENT_ONLY
class CT_GroupMembers (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_GroupMembers')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}groupMember uses Python identifier groupMember
    __groupMember = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'groupMember'), 'groupMember', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupMembers_httpschemas_openxmlformats_orgspreadsheetml2006maingroupMember', True)

    
    groupMember = property(__groupMember.value, __groupMember.set, None, u'OLAP Group Member')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupMembers_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Group Member Count')


    _ElementMap = {
        __groupMember.name() : __groupMember
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_GroupMembers', CT_GroupMembers)


# Complex type CT_DataBinding with content type ELEMENT_ONLY
class CT_DataBinding (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DataBinding')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute DataBindingName uses Python identifier DataBindingName
    __DataBindingName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'DataBindingName'), 'DataBindingName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataBinding_DataBindingName', pyxb.binding.datatypes.string)
    
    DataBindingName = property(__DataBindingName.value, __DataBindingName.set, None, u'Unique Identifer')

    
    # Attribute FileBinding uses Python identifier FileBinding
    __FileBinding = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'FileBinding'), 'FileBinding', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataBinding_FileBinding', pyxb.binding.datatypes.boolean)
    
    FileBinding = property(__FileBinding.value, __FileBinding.set, None, u'Binding to External File')

    
    # Attribute DataBindingLoadMode uses Python identifier DataBindingLoadMode
    __DataBindingLoadMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'DataBindingLoadMode'), 'DataBindingLoadMode', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataBinding_DataBindingLoadMode', pyxb.binding.datatypes.unsignedInt, required=True)
    
    DataBindingLoadMode = property(__DataBindingLoadMode.value, __DataBindingLoadMode.set, None, u'XML Data Loading Behavior')

    
    # Attribute FileBindingName uses Python identifier FileBindingName
    __FileBindingName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'FileBindingName'), 'FileBindingName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataBinding_FileBindingName', pyxb.binding.datatypes.string)
    
    FileBindingName = property(__FileBindingName.value, __FileBindingName.set, None, u'File Binding Name')

    
    # Attribute ConnectionID uses Python identifier ConnectionID
    __ConnectionID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ConnectionID'), 'ConnectionID', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataBinding_ConnectionID', pyxb.binding.datatypes.unsignedInt)
    
    ConnectionID = property(__ConnectionID.value, __ConnectionID.set, None, u'Reference to Connection ID')

    _HasWildcardElement = True

    _ElementMap = {
        
    }
    _AttributeMap = {
        __DataBindingName.name() : __DataBindingName,
        __FileBinding.name() : __FileBinding,
        __DataBindingLoadMode.name() : __DataBindingLoadMode,
        __FileBindingName.name() : __FileBindingName,
        __ConnectionID.name() : __ConnectionID
    }
Namespace.addCategoryObject('typeBinding', u'CT_DataBinding', CT_DataBinding)


# Complex type CT_WorksheetSource with content type EMPTY
class CT_WorksheetSource (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_WorksheetSource')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorksheetSource_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorksheetSource_ref', ST_Ref)
    
    ref = property(__ref.value, __ref.set, None, u'Reference')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorksheetSource_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'Named Range')

    
    # Attribute sheet uses Python identifier sheet
    __sheet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheet'), 'sheet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WorksheetSource_sheet', _s.ST_Xstring)
    
    sheet = property(__sheet.value, __sheet.set, None, u'Sheet Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id,
        __ref.name() : __ref,
        __name.name() : __name,
        __sheet.name() : __sheet
    }
Namespace.addCategoryObject('typeBinding', u'CT_WorksheetSource', CT_WorksheetSource)


# Complex type CT_RangePr with content type EMPTY
class CT_RangePr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RangePr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute startNum uses Python identifier startNum
    __startNum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'startNum'), 'startNum', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangePr_startNum', pyxb.binding.datatypes.double)
    
    startNum = property(__startNum.value, __startNum.set, None, u'Numeric Grouping Start Value')

    
    # Attribute endDate uses Python identifier endDate
    __endDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'endDate'), 'endDate', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangePr_endDate', pyxb.binding.datatypes.dateTime)
    
    endDate = property(__endDate.value, __endDate.set, None, u'Date Grouping End Value')

    
    # Attribute endNum uses Python identifier endNum
    __endNum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'endNum'), 'endNum', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangePr_endNum', pyxb.binding.datatypes.double)
    
    endNum = property(__endNum.value, __endNum.set, None, u'Numeric Grouping End Value')

    
    # Attribute startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'startDate'), 'startDate', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangePr_startDate', pyxb.binding.datatypes.dateTime)
    
    startDate = property(__startDate.value, __startDate.set, None, u'Date Grouping Start Value')

    
    # Attribute autoStart uses Python identifier autoStart
    __autoStart = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoStart'), 'autoStart', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangePr_autoStart', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoStart = property(__autoStart.value, __autoStart.set, None, u'Source Data Set Beginning Range')

    
    # Attribute groupInterval uses Python identifier groupInterval
    __groupInterval = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'groupInterval'), 'groupInterval', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangePr_groupInterval', pyxb.binding.datatypes.double, unicode_default=u'1')
    
    groupInterval = property(__groupInterval.value, __groupInterval.set, None, u'Grouping Interval')

    
    # Attribute autoEnd uses Python identifier autoEnd
    __autoEnd = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoEnd'), 'autoEnd', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangePr_autoEnd', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoEnd = property(__autoEnd.value, __autoEnd.set, None, u'Source Data Ending Range')

    
    # Attribute groupBy uses Python identifier groupBy
    __groupBy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'groupBy'), 'groupBy', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RangePr_groupBy', ST_GroupBy, unicode_default=u'range')
    
    groupBy = property(__groupBy.value, __groupBy.set, None, u'Group By')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __startNum.name() : __startNum,
        __endDate.name() : __endDate,
        __endNum.name() : __endNum,
        __startDate.name() : __startDate,
        __autoStart.name() : __autoStart,
        __groupInterval.name() : __groupInterval,
        __autoEnd.name() : __autoEnd,
        __groupBy.name() : __groupBy
    }
Namespace.addCategoryObject('typeBinding', u'CT_RangePr', CT_RangePr)


# Complex type CT_ServerFormats with content type ELEMENT_ONLY
class CT_ServerFormats (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ServerFormats')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}serverFormat uses Python identifier serverFormat
    __serverFormat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'serverFormat'), 'serverFormat', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ServerFormats_httpschemas_openxmlformats_orgspreadsheetml2006mainserverFormat', True)

    
    serverFormat = property(__serverFormat.value, __serverFormat.set, None, u'Server Format')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ServerFormats_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Format Count')


    _ElementMap = {
        __serverFormat.name() : __serverFormat
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_ServerFormats', CT_ServerFormats)


# Complex type CT_NumFmts with content type ELEMENT_ONLY
class CT_NumFmts (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_NumFmts')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}numFmt uses Python identifier numFmt
    __numFmt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'numFmt'), 'numFmt', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_NumFmts_httpschemas_openxmlformats_orgspreadsheetml2006mainnumFmt', True)

    
    numFmt = property(__numFmt.value, __numFmt.set, None, u'Number Formats')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_NumFmts_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Number Format Count')


    _ElementMap = {
        __numFmt.name() : __numFmt
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_NumFmts', CT_NumFmts)


# Complex type CT_OleLink with content type ELEMENT_ONLY
class CT_OleLink (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_OleLink')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}oleItems uses Python identifier oleItems
    __oleItems = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'oleItems'), 'oleItems', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleLink_httpschemas_openxmlformats_orgspreadsheetml2006mainoleItems', False)

    
    oleItems = property(__oleItems.value, __oleItems.set, None, u'Object Link Items')

    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleLink_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute progId uses Python identifier progId
    __progId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'progId'), 'progId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_OleLink_progId', _s.ST_Xstring, required=True)
    
    progId = property(__progId.value, __progId.set, None, u'Object Link Identifier')


    _ElementMap = {
        __oleItems.name() : __oleItems
    }
    _AttributeMap = {
        __id.name() : __id,
        __progId.name() : __progId
    }
Namespace.addCategoryObject('typeBinding', u'CT_OleLink', CT_OleLink)


# Complex type CT_Consolidation with content type ELEMENT_ONLY
class CT_Consolidation (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Consolidation')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rangeSets uses Python identifier rangeSets
    __rangeSets = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rangeSets'), 'rangeSets', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Consolidation_httpschemas_openxmlformats_orgspreadsheetml2006mainrangeSets', False)

    
    rangeSets = property(__rangeSets.value, __rangeSets.set, None, u'Range Sets')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pages uses Python identifier pages
    __pages = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pages'), 'pages', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Consolidation_httpschemas_openxmlformats_orgspreadsheetml2006mainpages', False)

    
    pages = property(__pages.value, __pages.set, None, u'Page Item Values')

    
    # Attribute autoPage uses Python identifier autoPage
    __autoPage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoPage'), 'autoPage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Consolidation_autoPage', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    autoPage = property(__autoPage.value, __autoPage.set, None, u'Auto Page')


    _ElementMap = {
        __rangeSets.name() : __rangeSets,
        __pages.name() : __pages
    }
    _AttributeMap = {
        __autoPage.name() : __autoPage
    }
Namespace.addCategoryObject('typeBinding', u'CT_Consolidation', CT_Consolidation)


# Complex type CT_SheetCalcPr with content type EMPTY
class CT_SheetCalcPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SheetCalcPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute fullCalcOnLoad uses Python identifier fullCalcOnLoad
    __fullCalcOnLoad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fullCalcOnLoad'), 'fullCalcOnLoad', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SheetCalcPr_fullCalcOnLoad', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    fullCalcOnLoad = property(__fullCalcOnLoad.value, __fullCalcOnLoad.set, None, u'Full Calculation On Load')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __fullCalcOnLoad.name() : __fullCalcOnLoad
    }
Namespace.addCategoryObject('typeBinding', u'CT_SheetCalcPr', CT_SheetCalcPr)


# Complex type CT_DataField with content type ELEMENT_ONLY
class CT_DataField (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DataField')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataField_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataField_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'Data Field Name')

    
    # Attribute fld uses Python identifier fld
    __fld = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fld'), 'fld', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataField_fld', pyxb.binding.datatypes.unsignedInt, required=True)
    
    fld = property(__fld.value, __fld.set, None, u'Field')

    
    # Attribute baseItem uses Python identifier baseItem
    __baseItem = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'baseItem'), 'baseItem', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataField_baseItem', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1048832')
    
    baseItem = property(__baseItem.value, __baseItem.set, None, u"'Show Data As' Base Setting")

    
    # Attribute baseField uses Python identifier baseField
    __baseField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'baseField'), 'baseField', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataField_baseField', pyxb.binding.datatypes.int, unicode_default=u'-1')
    
    baseField = property(__baseField.value, __baseField.set, None, u"'Show Data As' Base Field")

    
    # Attribute numFmtId uses Python identifier numFmtId
    __numFmtId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numFmtId'), 'numFmtId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataField_numFmtId', ST_NumFmtId)
    
    numFmtId = property(__numFmtId.value, __numFmtId.set, None, u'Number Format Id')

    
    # Attribute subtotal uses Python identifier subtotal
    __subtotal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'subtotal'), 'subtotal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataField_subtotal', ST_DataConsolidateFunction, unicode_default=u'sum')
    
    subtotal = property(__subtotal.value, __subtotal.set, None, u'Subtotal')

    
    # Attribute showDataAs uses Python identifier showDataAs
    __showDataAs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showDataAs'), 'showDataAs', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataField_showDataAs', ST_ShowDataAs, unicode_default=u'normal')
    
    showDataAs = property(__showDataAs.value, __showDataAs.set, None, u'Show Data As Display Format')


    _ElementMap = {
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __name.name() : __name,
        __fld.name() : __fld,
        __baseItem.name() : __baseItem,
        __baseField.name() : __baseField,
        __numFmtId.name() : __numFmtId,
        __subtotal.name() : __subtotal,
        __showDataAs.name() : __showDataAs
    }
Namespace.addCategoryObject('typeBinding', u'CT_DataField', CT_DataField)


# Complex type CT_RevisionAutoFormatting with content type EMPTY
class CT_RevisionAutoFormatting (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RevisionAutoFormatting')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionAutoFormatting_ref', ST_Ref, required=True)
    
    ref = property(__ref.value, __ref.set, None, u'Reference')

    
    # Attribute applyNumberFormats uses Python identifier applyNumberFormats
    __applyNumberFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyNumberFormats'), 'applyNumberFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionAutoFormatting_applyNumberFormats', pyxb.binding.datatypes.boolean)
    
    applyNumberFormats = property(__applyNumberFormats.value, __applyNumberFormats.set, None, u'Apply Number Formats')

    
    # Attribute autoFormatId uses Python identifier autoFormatId
    __autoFormatId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoFormatId'), 'autoFormatId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionAutoFormatting_autoFormatId', pyxb.binding.datatypes.unsignedInt)
    
    autoFormatId = property(__autoFormatId.value, __autoFormatId.set, None, u'Auto Format Id')

    
    # Attribute applyPatternFormats uses Python identifier applyPatternFormats
    __applyPatternFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyPatternFormats'), 'applyPatternFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionAutoFormatting_applyPatternFormats', pyxb.binding.datatypes.boolean)
    
    applyPatternFormats = property(__applyPatternFormats.value, __applyPatternFormats.set, None, u'Apply Pattern Formats')

    
    # Attribute applyAlignmentFormats uses Python identifier applyAlignmentFormats
    __applyAlignmentFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyAlignmentFormats'), 'applyAlignmentFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionAutoFormatting_applyAlignmentFormats', pyxb.binding.datatypes.boolean)
    
    applyAlignmentFormats = property(__applyAlignmentFormats.value, __applyAlignmentFormats.set, None, u'Apply Alignment Formats')

    
    # Attribute applyBorderFormats uses Python identifier applyBorderFormats
    __applyBorderFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyBorderFormats'), 'applyBorderFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionAutoFormatting_applyBorderFormats', pyxb.binding.datatypes.boolean)
    
    applyBorderFormats = property(__applyBorderFormats.value, __applyBorderFormats.set, None, u'Apply Border Formats')

    
    # Attribute applyWidthHeightFormats uses Python identifier applyWidthHeightFormats
    __applyWidthHeightFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyWidthHeightFormats'), 'applyWidthHeightFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionAutoFormatting_applyWidthHeightFormats', pyxb.binding.datatypes.boolean)
    
    applyWidthHeightFormats = property(__applyWidthHeightFormats.value, __applyWidthHeightFormats.set, None, u'Apply Width / Height Formats')

    
    # Attribute sheetId uses Python identifier sheetId
    __sheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheetId'), 'sheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionAutoFormatting_sheetId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    sheetId = property(__sheetId.value, __sheetId.set, None, u'Sheet Id')

    
    # Attribute applyFontFormats uses Python identifier applyFontFormats
    __applyFontFormats = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'applyFontFormats'), 'applyFontFormats', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionAutoFormatting_applyFontFormats', pyxb.binding.datatypes.boolean)
    
    applyFontFormats = property(__applyFontFormats.value, __applyFontFormats.set, None, u'Apply Font Formats')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __ref.name() : __ref,
        __applyNumberFormats.name() : __applyNumberFormats,
        __autoFormatId.name() : __autoFormatId,
        __applyPatternFormats.name() : __applyPatternFormats,
        __applyAlignmentFormats.name() : __applyAlignmentFormats,
        __applyBorderFormats.name() : __applyBorderFormats,
        __applyWidthHeightFormats.name() : __applyWidthHeightFormats,
        __sheetId.name() : __sheetId,
        __applyFontFormats.name() : __applyFontFormats
    }
Namespace.addCategoryObject('typeBinding', u'CT_RevisionAutoFormatting', CT_RevisionAutoFormatting)


# Complex type CT_MdxMetadata with content type ELEMENT_ONLY
class CT_MdxMetadata (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MdxMetadata')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}mdx uses Python identifier mdx
    __mdx = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'mdx'), 'mdx', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxMetadata_httpschemas_openxmlformats_orgspreadsheetml2006mainmdx', True)

    
    mdx = property(__mdx.value, __mdx.set, None, u'MDX Metadata Record')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MdxMetadata_count', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    count = property(__count.value, __count.set, None, u'MDX Metadata Record Count')


    _ElementMap = {
        __mdx.name() : __mdx
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_MdxMetadata', CT_MdxMetadata)


# Complex type CT_PageItem with content type EMPTY
class CT_PageItem (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PageItem')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PageItem_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Page Item Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __name.name() : __name
    }
Namespace.addCategoryObject('typeBinding', u'CT_PageItem', CT_PageItem)


# Complex type CT_PivotTableStyle with content type EMPTY
class CT_PivotTableStyle (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotTableStyle')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotTableStyle_name', pyxb.binding.datatypes.string)
    
    name = property(__name.value, __name.set, None, u'Table Style Name')

    
    # Attribute showColHeaders uses Python identifier showColHeaders
    __showColHeaders = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showColHeaders'), 'showColHeaders', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotTableStyle_showColHeaders', pyxb.binding.datatypes.boolean)
    
    showColHeaders = property(__showColHeaders.value, __showColHeaders.set, None, u'Show Table Style Column Header Formatting')

    
    # Attribute showRowHeaders uses Python identifier showRowHeaders
    __showRowHeaders = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showRowHeaders'), 'showRowHeaders', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotTableStyle_showRowHeaders', pyxb.binding.datatypes.boolean)
    
    showRowHeaders = property(__showRowHeaders.value, __showRowHeaders.set, None, u'Show Row Header Formatting')

    
    # Attribute showRowStripes uses Python identifier showRowStripes
    __showRowStripes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showRowStripes'), 'showRowStripes', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotTableStyle_showRowStripes', pyxb.binding.datatypes.boolean)
    
    showRowStripes = property(__showRowStripes.value, __showRowStripes.set, None, u'Show Row Stripes')

    
    # Attribute showColStripes uses Python identifier showColStripes
    __showColStripes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showColStripes'), 'showColStripes', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotTableStyle_showColStripes', pyxb.binding.datatypes.boolean)
    
    showColStripes = property(__showColStripes.value, __showColStripes.set, None, u'Show Column Stripes')

    
    # Attribute showLastColumn uses Python identifier showLastColumn
    __showLastColumn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showLastColumn'), 'showLastColumn', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotTableStyle_showLastColumn', pyxb.binding.datatypes.boolean)
    
    showLastColumn = property(__showLastColumn.value, __showLastColumn.set, None, u'Show Last Column')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __name.name() : __name,
        __showColHeaders.name() : __showColHeaders,
        __showRowHeaders.name() : __showRowHeaders,
        __showRowStripes.name() : __showRowStripes,
        __showColStripes.name() : __showColStripes,
        __showLastColumn.name() : __showLastColumn
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotTableStyle', CT_PivotTableStyle)


# Complex type CT_ChartFormat with content type ELEMENT_ONLY
class CT_ChartFormat (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ChartFormat')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pivotArea uses Python identifier pivotArea
    __pivotArea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pivotArea'), 'pivotArea', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartFormat_httpschemas_openxmlformats_orgspreadsheetml2006mainpivotArea', False)

    
    pivotArea = property(__pivotArea.value, __pivotArea.set, None, u'Pivot Table Location Rule')

    
    # Attribute series uses Python identifier series
    __series = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'series'), 'series', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartFormat_series', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    series = property(__series.value, __series.set, None, u'Series Format')

    
    # Attribute chart uses Python identifier chart
    __chart = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'chart'), 'chart', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartFormat_chart', pyxb.binding.datatypes.unsignedInt, required=True)
    
    chart = property(__chart.value, __chart.set, None, u'Chart Index')

    
    # Attribute format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'format'), 'format', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ChartFormat_format', pyxb.binding.datatypes.unsignedInt, required=True)
    
    format = property(__format.value, __format.set, None, u'Pivot Format Id')


    _ElementMap = {
        __pivotArea.name() : __pivotArea
    }
    _AttributeMap = {
        __series.name() : __series,
        __chart.name() : __chart,
        __format.name() : __format
    }
Namespace.addCategoryObject('typeBinding', u'CT_ChartFormat', CT_ChartFormat)


# Complex type CT_ConditionalFormat with content type ELEMENT_ONLY
class CT_ConditionalFormat (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ConditionalFormat')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ConditionalFormat_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pivotAreas uses Python identifier pivotAreas
    __pivotAreas = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pivotAreas'), 'pivotAreas', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ConditionalFormat_httpschemas_openxmlformats_orgspreadsheetml2006mainpivotAreas', False)

    
    pivotAreas = property(__pivotAreas.value, __pivotAreas.set, None, u'Pivot Areas')

    
    # Attribute priority uses Python identifier priority
    __priority = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'priority'), 'priority', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ConditionalFormat_priority', pyxb.binding.datatypes.unsignedInt, required=True)
    
    priority = property(__priority.value, __priority.set, None, u'Priority')

    
    # Attribute scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'scope'), 'scope', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ConditionalFormat_scope', ST_Scope, unicode_default=u'selection')
    
    scope = property(__scope.value, __scope.set, None, u'Conditional Formatting Scope')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ConditionalFormat_type', ST_Type, unicode_default=u'none')
    
    type = property(__type.value, __type.set, None, u'Conditional Formatting Rule Type')


    _ElementMap = {
        __extLst.name() : __extLst,
        __pivotAreas.name() : __pivotAreas
    }
    _AttributeMap = {
        __priority.name() : __priority,
        __scope.name() : __scope,
        __type.name() : __type
    }
Namespace.addCategoryObject('typeBinding', u'CT_ConditionalFormat', CT_ConditionalFormat)


# Complex type CT_CellSmartTags with content type ELEMENT_ONLY
class CT_CellSmartTags (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CellSmartTags')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cellSmartTag uses Python identifier cellSmartTag
    __cellSmartTag = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cellSmartTag'), 'cellSmartTag', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellSmartTags_httpschemas_openxmlformats_orgspreadsheetml2006maincellSmartTag', True)

    
    cellSmartTag = property(__cellSmartTag.value, __cellSmartTag.set, None, u'Cell Smart Tag')

    
    # Attribute r uses Python identifier r
    __r = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'r'), 'r', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellSmartTags_r', ST_CellRef, required=True)
    
    r = property(__r.value, __r.set, None, u'Reference')


    _ElementMap = {
        __cellSmartTag.name() : __cellSmartTag
    }
    _AttributeMap = {
        __r.name() : __r
    }
Namespace.addCategoryObject('typeBinding', u'CT_CellSmartTags', CT_CellSmartTags)


# Complex type CT_Mdx with content type ELEMENT_ONLY
class CT_Mdx (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Mdx')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}t uses Python identifier t
    __t = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u't'), 't', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Mdx_httpschemas_openxmlformats_orgspreadsheetml2006maint', False)

    
    t = property(__t.value, __t.set, None, u'Tuple MDX Metadata')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}ms uses Python identifier ms
    __ms = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ms'), 'ms', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Mdx_httpschemas_openxmlformats_orgspreadsheetml2006mainms', False)

    
    ms = property(__ms.value, __ms.set, None, u'Set MDX Metadata')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}k uses Python identifier k
    __k = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'k'), 'k', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Mdx_httpschemas_openxmlformats_orgspreadsheetml2006maink', False)

    
    k = property(__k.value, __k.set, None, u'KPI MDX Metadata')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}p uses Python identifier p
    __p = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'p'), 'p', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Mdx_httpschemas_openxmlformats_orgspreadsheetml2006mainp', False)

    
    p = property(__p.value, __p.set, None, u'Member Property MDX Metadata')

    
    # Attribute f uses Python identifier f
    __f = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'f'), 'f', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Mdx_f', ST_MdxFunctionType, required=True)
    
    f = property(__f.value, __f.set, None, u'Cube Function Tag')

    
    # Attribute n uses Python identifier n
    __n = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'n'), 'n', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Mdx_n', pyxb.binding.datatypes.unsignedInt, required=True)
    
    n = property(__n.value, __n.set, None, u'Connection Name Index')


    _ElementMap = {
        __t.name() : __t,
        __ms.name() : __ms,
        __k.name() : __k,
        __p.name() : __p
    }
    _AttributeMap = {
        __f.name() : __f,
        __n.name() : __n
    }
Namespace.addCategoryObject('typeBinding', u'CT_Mdx', CT_Mdx)


# Complex type CT_GradientStop with content type ELEMENT_ONLY
class CT_GradientStop (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_GradientStop')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}color uses Python identifier color
    __color = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'color'), 'color', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GradientStop_httpschemas_openxmlformats_orgspreadsheetml2006maincolor', False)

    
    color = property(__color.value, __color.set, None, u'Color')

    
    # Attribute position uses Python identifier position
    __position = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'position'), 'position', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GradientStop_position', pyxb.binding.datatypes.double, required=True)
    
    position = property(__position.value, __position.set, None, u'Gradient Stop Position')


    _ElementMap = {
        __color.name() : __color
    }
    _AttributeMap = {
        __position.name() : __position
    }
Namespace.addCategoryObject('typeBinding', u'CT_GradientStop', CT_GradientStop)


# Complex type CT_CustomWorkbookViews with content type ELEMENT_ONLY
class CT_CustomWorkbookViews (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CustomWorkbookViews')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}customWorkbookView uses Python identifier customWorkbookView
    __customWorkbookView = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'customWorkbookView'), 'customWorkbookView', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomWorkbookViews_httpschemas_openxmlformats_orgspreadsheetml2006maincustomWorkbookView', True)

    
    customWorkbookView = property(__customWorkbookView.value, __customWorkbookView.set, None, u'Custom Workbook View')


    _ElementMap = {
        __customWorkbookView.name() : __customWorkbookView
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_CustomWorkbookViews', CT_CustomWorkbookViews)


# Complex type CT_Record with content type ELEMENT_ONLY
class CT_Record (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Record')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}m uses Python identifier m
    __m = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'm'), 'm', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Record_httpschemas_openxmlformats_orgspreadsheetml2006mainm', True)

    
    m = property(__m.value, __m.set, None, u'No Value')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}x uses Python identifier x
    __x = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'x'), 'x', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Record_httpschemas_openxmlformats_orgspreadsheetml2006mainx', True)

    
    x = property(__x.value, __x.set, None, u'Shared Items Index')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}n uses Python identifier n
    __n = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'n'), 'n', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Record_httpschemas_openxmlformats_orgspreadsheetml2006mainn', True)

    
    n = property(__n.value, __n.set, None, u'Numeric Value')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}d uses Python identifier d
    __d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'd'), 'd', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Record_httpschemas_openxmlformats_orgspreadsheetml2006maind', True)

    
    d = property(__d.value, __d.set, None, u'Date Time')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'b'), 'b', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Record_httpschemas_openxmlformats_orgspreadsheetml2006mainb', True)

    
    b = property(__b.value, __b.set, None, u'Boolean')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'e'), 'e', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Record_httpschemas_openxmlformats_orgspreadsheetml2006maine', True)

    
    e = property(__e.value, __e.set, None, u'Error Value')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}s uses Python identifier s
    __s = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u's'), 's', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Record_httpschemas_openxmlformats_orgspreadsheetml2006mains', True)

    
    s = property(__s.value, __s.set, None, u'Character Value')


    _ElementMap = {
        __m.name() : __m,
        __x.name() : __x,
        __n.name() : __n,
        __d.name() : __d,
        __b.name() : __b,
        __e.name() : __e,
        __s.name() : __s
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Record', CT_Record)


# Complex type CT_Col with content type EMPTY
class CT_Col (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Col')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute min uses Python identifier min
    __min = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'min'), 'min', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Col_min', pyxb.binding.datatypes.unsignedInt, required=True)
    
    min = property(__min.value, __min.set, None, u'Minimum Column')

    
    # Attribute style uses Python identifier style
    __style = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'style'), 'style', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Col_style', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    style = property(__style.value, __style.set, None, u'Style')

    
    # Attribute customWidth uses Python identifier customWidth
    __customWidth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'customWidth'), 'customWidth', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Col_customWidth', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    customWidth = property(__customWidth.value, __customWidth.set, None, u'Custom Width')

    
    # Attribute max uses Python identifier max
    __max = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'max'), 'max', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Col_max', pyxb.binding.datatypes.unsignedInt, required=True)
    
    max = property(__max.value, __max.set, None, u'Maximum Column')

    
    # Attribute outlineLevel uses Python identifier outlineLevel
    __outlineLevel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'outlineLevel'), 'outlineLevel', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Col_outlineLevel', pyxb.binding.datatypes.unsignedByte, unicode_default=u'0')
    
    outlineLevel = property(__outlineLevel.value, __outlineLevel.set, None, u'Outline Level')

    
    # Attribute phonetic uses Python identifier phonetic
    __phonetic = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'phonetic'), 'phonetic', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Col_phonetic', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    phonetic = property(__phonetic.value, __phonetic.set, None, u'Show Phonetic Information')

    
    # Attribute width uses Python identifier width
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'width'), 'width', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Col_width', pyxb.binding.datatypes.double)
    
    width = property(__width.value, __width.set, None, u'Column Width')

    
    # Attribute bestFit uses Python identifier bestFit
    __bestFit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'bestFit'), 'bestFit', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Col_bestFit', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    bestFit = property(__bestFit.value, __bestFit.set, None, u'Best Fit Column Width')

    
    # Attribute collapsed uses Python identifier collapsed
    __collapsed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'collapsed'), 'collapsed', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Col_collapsed', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    collapsed = property(__collapsed.value, __collapsed.set, None, u'Collapsed')

    
    # Attribute hidden uses Python identifier hidden
    __hidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hidden'), 'hidden', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Col_hidden', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hidden = property(__hidden.value, __hidden.set, None, u'Hidden Columns')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __min.name() : __min,
        __style.name() : __style,
        __customWidth.name() : __customWidth,
        __max.name() : __max,
        __outlineLevel.name() : __outlineLevel,
        __phonetic.name() : __phonetic,
        __width.name() : __width,
        __bestFit.name() : __bestFit,
        __collapsed.name() : __collapsed,
        __hidden.name() : __hidden
    }
Namespace.addCategoryObject('typeBinding', u'CT_Col', CT_Col)


# Complex type CT_MetadataRecord with content type EMPTY
class CT_MetadataRecord (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MetadataRecord')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute t uses Python identifier t
    __t = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u't'), 't', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataRecord_t', pyxb.binding.datatypes.unsignedInt, required=True)
    
    t = property(__t.value, __t.set, None, u'Metadata Record Type Index')

    
    # Attribute v uses Python identifier v
    __v = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'v'), 'v', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MetadataRecord_v', pyxb.binding.datatypes.unsignedInt, required=True)
    
    v = property(__v.value, __v.set, None, u'Metadata Record Value Index')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __t.name() : __t,
        __v.name() : __v
    }
Namespace.addCategoryObject('typeBinding', u'CT_MetadataRecord', CT_MetadataRecord)


# Complex type CT_GroupItems with content type ELEMENT_ONLY
class CT_GroupItems (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_GroupItems')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}s uses Python identifier s
    __s = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u's'), 's', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupItems_httpschemas_openxmlformats_orgspreadsheetml2006mains', True)

    
    s = property(__s.value, __s.set, None, u'Character Value')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}n uses Python identifier n
    __n = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'n'), 'n', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupItems_httpschemas_openxmlformats_orgspreadsheetml2006mainn', True)

    
    n = property(__n.value, __n.set, None, u'Numeric Value')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}b uses Python identifier b
    __b = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'b'), 'b', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupItems_httpschemas_openxmlformats_orgspreadsheetml2006mainb', True)

    
    b = property(__b.value, __b.set, None, u'Boolean')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}m uses Python identifier m
    __m = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'm'), 'm', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupItems_httpschemas_openxmlformats_orgspreadsheetml2006mainm', True)

    
    m = property(__m.value, __m.set, None, u'No Value')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}e uses Python identifier e
    __e = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'e'), 'e', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupItems_httpschemas_openxmlformats_orgspreadsheetml2006maine', True)

    
    e = property(__e.value, __e.set, None, u'Error Value')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}d uses Python identifier d
    __d = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'd'), 'd', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupItems_httpschemas_openxmlformats_orgspreadsheetml2006maind', True)

    
    d = property(__d.value, __d.set, None, u'Date Time')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupItems_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Items Created Count')


    _ElementMap = {
        __s.name() : __s,
        __n.name() : __n,
        __b.name() : __b,
        __m.name() : __m,
        __e.name() : __e,
        __d.name() : __d
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_GroupItems', CT_GroupItems)


# Complex type CT_Connections with content type ELEMENT_ONLY
class CT_Connections (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Connections')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}connection uses Python identifier connection
    __connection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'connection'), 'connection', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connections_httpschemas_openxmlformats_orgspreadsheetml2006mainconnection', True)

    
    connection = property(__connection.value, __connection.set, None, u'Connection')


    _ElementMap = {
        __connection.name() : __connection
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Connections', CT_Connections)


# Complex type CT_PhoneticRun with content type ELEMENT_ONLY
class CT_PhoneticRun (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PhoneticRun')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}t uses Python identifier t
    __t = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u't'), 't', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PhoneticRun_httpschemas_openxmlformats_orgspreadsheetml2006maint', False)

    
    t = property(__t.value, __t.set, None, u'Text')

    
    # Attribute sb uses Python identifier sb
    __sb = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sb'), 'sb', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PhoneticRun_sb', pyxb.binding.datatypes.unsignedInt, required=True)
    
    sb = property(__sb.value, __sb.set, None, u'Base Text Start Index')

    
    # Attribute eb uses Python identifier eb
    __eb = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'eb'), 'eb', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PhoneticRun_eb', pyxb.binding.datatypes.unsignedInt, required=True)
    
    eb = property(__eb.value, __eb.set, None, u'Base Text End Index')


    _ElementMap = {
        __t.name() : __t
    }
    _AttributeMap = {
        __sb.name() : __sb,
        __eb.name() : __eb
    }
Namespace.addCategoryObject('typeBinding', u'CT_PhoneticRun', CT_PhoneticRun)


# Complex type CT_Macrosheet with content type ELEMENT_ONLY
class CT_Macrosheet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Macrosheet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}autoFilter uses Python identifier autoFilter
    __autoFilter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'autoFilter'), 'autoFilter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainautoFilter', False)

    
    autoFilter = property(__autoFilter.value, __autoFilter.set, None, u'AutoFilter')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dataConsolidate uses Python identifier dataConsolidate
    __dataConsolidate = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dataConsolidate'), 'dataConsolidate', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006maindataConsolidate', False)

    
    dataConsolidate = property(__dataConsolidate.value, __dataConsolidate.set, None, u'Data Consolidation')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sortState uses Python identifier sortState
    __sortState = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sortState'), 'sortState', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsortState', False)

    
    sortState = property(__sortState.value, __sortState.set, None, u'Sort State')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}customSheetViews uses Python identifier customSheetViews
    __customSheetViews = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'customSheetViews'), 'customSheetViews', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006maincustomSheetViews', False)

    
    customSheetViews = property(__customSheetViews.value, __customSheetViews.set, None, u'Custom Sheet Views')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}phoneticPr uses Python identifier phoneticPr
    __phoneticPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'phoneticPr'), 'phoneticPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainphoneticPr', False)

    
    phoneticPr = property(__phoneticPr.value, __phoneticPr.set, None, u'Phonetic Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}legacyDrawing uses Python identifier legacyDrawing
    __legacyDrawing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawing'), 'legacyDrawing', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainlegacyDrawing', False)

    
    legacyDrawing = property(__legacyDrawing.value, __legacyDrawing.set, None, u'Legacy Drawing Reference')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}conditionalFormatting uses Python identifier conditionalFormatting
    __conditionalFormatting = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'conditionalFormatting'), 'conditionalFormatting', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainconditionalFormatting', True)

    
    conditionalFormatting = property(__conditionalFormatting.value, __conditionalFormatting.set, None, u'Conditional Formatting')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dimension'), 'dimension', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006maindimension', False)

    
    dimension = property(__dimension.value, __dimension.set, None, u'Macro Sheet Dimensions')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}printOptions uses Python identifier printOptions
    __printOptions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'printOptions'), 'printOptions', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainprintOptions', False)

    
    printOptions = property(__printOptions.value, __printOptions.set, None, u'Print Options')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageMargins uses Python identifier pageMargins
    __pageMargins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageMargins'), 'pageMargins', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainpageMargins', False)

    
    pageMargins = property(__pageMargins.value, __pageMargins.set, None, u'Page Margins')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageSetup uses Python identifier pageSetup
    __pageSetup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageSetup'), 'pageSetup', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainpageSetup', False)

    
    pageSetup = property(__pageSetup.value, __pageSetup.set, None, u'Page Setup Settings')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}headerFooter uses Python identifier headerFooter
    __headerFooter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'headerFooter'), 'headerFooter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainheaderFooter', False)

    
    headerFooter = property(__headerFooter.value, __headerFooter.set, None, u'Header Footer Settings')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rowBreaks uses Python identifier rowBreaks
    __rowBreaks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rowBreaks'), 'rowBreaks', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainrowBreaks', False)

    
    rowBreaks = property(__rowBreaks.value, __rowBreaks.set, None, u'Horizontal Page Breaks (Row)')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}customProperties uses Python identifier customProperties
    __customProperties = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'customProperties'), 'customProperties', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006maincustomProperties', False)

    
    customProperties = property(__customProperties.value, __customProperties.set, None, u'Custom Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}drawing uses Python identifier drawing
    __drawing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'drawing'), 'drawing', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006maindrawing', False)

    
    drawing = property(__drawing.value, __drawing.set, None, u'Drawing')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}drawingHF uses Python identifier drawingHF
    __drawingHF = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'drawingHF'), 'drawingHF', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006maindrawingHF', False)

    
    drawingHF = property(__drawingHF.value, __drawingHF.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetPr uses Python identifier sheetPr
    __sheetPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetPr'), 'sheetPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetPr', False)

    
    sheetPr = property(__sheetPr.value, __sheetPr.set, None, u'Sheet Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}legacyDrawingHF uses Python identifier legacyDrawingHF
    __legacyDrawingHF = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawingHF'), 'legacyDrawingHF', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainlegacyDrawingHF', False)

    
    legacyDrawingHF = property(__legacyDrawingHF.value, __legacyDrawingHF.set, None, u'Legacy Drawing Header Footer')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetViews uses Python identifier sheetViews
    __sheetViews = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetViews'), 'sheetViews', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetViews', False)

    
    sheetViews = property(__sheetViews.value, __sheetViews.set, None, u'Macro Sheet Views')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}colBreaks uses Python identifier colBreaks
    __colBreaks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'colBreaks'), 'colBreaks', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006maincolBreaks', False)

    
    colBreaks = property(__colBreaks.value, __colBreaks.set, None, u'Vertical Page Breaks')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}picture uses Python identifier picture
    __picture = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'picture'), 'picture', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainpicture', False)

    
    picture = property(__picture.value, __picture.set, None, u'Background Image')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetFormatPr uses Python identifier sheetFormatPr
    __sheetFormatPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetFormatPr'), 'sheetFormatPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetFormatPr', False)

    
    sheetFormatPr = property(__sheetFormatPr.value, __sheetFormatPr.set, None, u'Sheet Format Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}oleObjects uses Python identifier oleObjects
    __oleObjects = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'oleObjects'), 'oleObjects', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainoleObjects', False)

    
    oleObjects = property(__oleObjects.value, __oleObjects.set, None, u'Embedded Objects')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cols uses Python identifier cols
    __cols = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cols'), 'cols', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006maincols', True)

    
    cols = property(__cols.value, __cols.set, None, u'Column Information')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetData uses Python identifier sheetData
    __sheetData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetData'), 'sheetData', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetData', False)

    
    sheetData = property(__sheetData.value, __sheetData.set, None, u'Sheet Data')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetProtection uses Python identifier sheetProtection
    __sheetProtection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetProtection'), 'sheetProtection', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Macrosheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetProtection', False)

    
    sheetProtection = property(__sheetProtection.value, __sheetProtection.set, None, u'Sheet Protection Options')


    _ElementMap = {
        __autoFilter.name() : __autoFilter,
        __dataConsolidate.name() : __dataConsolidate,
        __sortState.name() : __sortState,
        __customSheetViews.name() : __customSheetViews,
        __phoneticPr.name() : __phoneticPr,
        __legacyDrawing.name() : __legacyDrawing,
        __conditionalFormatting.name() : __conditionalFormatting,
        __dimension.name() : __dimension,
        __printOptions.name() : __printOptions,
        __pageMargins.name() : __pageMargins,
        __pageSetup.name() : __pageSetup,
        __headerFooter.name() : __headerFooter,
        __rowBreaks.name() : __rowBreaks,
        __customProperties.name() : __customProperties,
        __drawing.name() : __drawing,
        __drawingHF.name() : __drawingHF,
        __sheetPr.name() : __sheetPr,
        __legacyDrawingHF.name() : __legacyDrawingHF,
        __sheetViews.name() : __sheetViews,
        __colBreaks.name() : __colBreaks,
        __picture.name() : __picture,
        __sheetFormatPr.name() : __sheetFormatPr,
        __oleObjects.name() : __oleObjects,
        __cols.name() : __cols,
        __extLst.name() : __extLst,
        __sheetData.name() : __sheetData,
        __sheetProtection.name() : __sheetProtection
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Macrosheet', CT_Macrosheet)


# Complex type CT_ProtectedRanges with content type ELEMENT_ONLY
class CT_ProtectedRanges (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ProtectedRanges')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}protectedRange uses Python identifier protectedRange
    __protectedRange = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'protectedRange'), 'protectedRange', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ProtectedRanges_httpschemas_openxmlformats_orgspreadsheetml2006mainprotectedRange', True)

    
    protectedRange = property(__protectedRange.value, __protectedRange.set, None, u'Protected Range')


    _ElementMap = {
        __protectedRange.name() : __protectedRange
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_ProtectedRanges', CT_ProtectedRanges)


# Complex type CT_DefinedName with content type SIMPLE
class CT_DefinedName (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = ST_Formula
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DefinedName')
    # Base type is ST_Formula
    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'description'), 'description', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedName_description', _s.ST_Xstring)
    
    description = property(__description.value, __description.set, None, u'Description')

    
    # Attribute function uses Python identifier function
    __function = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'function'), 'function', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedName_function', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    function = property(__function.value, __function.set, None, u'Function')

    
    # Attribute workbookParameter uses Python identifier workbookParameter
    __workbookParameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'workbookParameter'), 'workbookParameter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedName_workbookParameter', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    workbookParameter = property(__workbookParameter.value, __workbookParameter.set, None, u'Workbook Parameter (Server)')

    
    # Attribute vbProcedure uses Python identifier vbProcedure
    __vbProcedure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'vbProcedure'), 'vbProcedure', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedName_vbProcedure', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    vbProcedure = property(__vbProcedure.value, __vbProcedure.set, None, u'Procedure')

    
    # Attribute help uses Python identifier help
    __help = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'help'), 'help', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedName_help', _s.ST_Xstring)
    
    help = property(__help.value, __help.set, None, u'Help')

    
    # Attribute xlm uses Python identifier xlm
    __xlm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'xlm'), 'xlm', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedName_xlm', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    xlm = property(__xlm.value, __xlm.set, None, u'External Function')

    
    # Attribute statusBar uses Python identifier statusBar
    __statusBar = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'statusBar'), 'statusBar', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedName_statusBar', _s.ST_Xstring)
    
    statusBar = property(__statusBar.value, __statusBar.set, None, u'Status Bar')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedName_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Defined Name')

    
    # Attribute comment uses Python identifier comment
    __comment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'comment'), 'comment', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedName_comment', _s.ST_Xstring)
    
    comment = property(__comment.value, __comment.set, None, u'Comment')

    
    # Attribute localSheetId uses Python identifier localSheetId
    __localSheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'localSheetId'), 'localSheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedName_localSheetId', pyxb.binding.datatypes.unsignedInt)
    
    localSheetId = property(__localSheetId.value, __localSheetId.set, None, u'Local Name Sheet Id')

    
    # Attribute shortcutKey uses Python identifier shortcutKey
    __shortcutKey = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'shortcutKey'), 'shortcutKey', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedName_shortcutKey', _s.ST_Xstring)
    
    shortcutKey = property(__shortcutKey.value, __shortcutKey.set, None, u'Shortcut Key')

    
    # Attribute hidden uses Python identifier hidden
    __hidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hidden'), 'hidden', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedName_hidden', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hidden = property(__hidden.value, __hidden.set, None, u'Hidden Name')

    
    # Attribute customMenu uses Python identifier customMenu
    __customMenu = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'customMenu'), 'customMenu', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedName_customMenu', _s.ST_Xstring)
    
    customMenu = property(__customMenu.value, __customMenu.set, None, u'Custom Menu Text')

    
    # Attribute functionGroupId uses Python identifier functionGroupId
    __functionGroupId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'functionGroupId'), 'functionGroupId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedName_functionGroupId', pyxb.binding.datatypes.unsignedInt)
    
    functionGroupId = property(__functionGroupId.value, __functionGroupId.set, None, u'Function Group Id')

    
    # Attribute publishToServer uses Python identifier publishToServer
    __publishToServer = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'publishToServer'), 'publishToServer', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DefinedName_publishToServer', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    publishToServer = property(__publishToServer.value, __publishToServer.set, None, u'Publish To Server')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __description.name() : __description,
        __function.name() : __function,
        __workbookParameter.name() : __workbookParameter,
        __vbProcedure.name() : __vbProcedure,
        __help.name() : __help,
        __xlm.name() : __xlm,
        __statusBar.name() : __statusBar,
        __name.name() : __name,
        __comment.name() : __comment,
        __localSheetId.name() : __localSheetId,
        __shortcutKey.name() : __shortcutKey,
        __hidden.name() : __hidden,
        __customMenu.name() : __customMenu,
        __functionGroupId.name() : __functionGroupId,
        __publishToServer.name() : __publishToServer
    }
Namespace.addCategoryObject('typeBinding', u'CT_DefinedName', CT_DefinedName)


# Complex type CT_ConditionalFormats with content type ELEMENT_ONLY
class CT_ConditionalFormats (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ConditionalFormats')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}conditionalFormat uses Python identifier conditionalFormat
    __conditionalFormat = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'conditionalFormat'), 'conditionalFormat', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ConditionalFormats_httpschemas_openxmlformats_orgspreadsheetml2006mainconditionalFormat', True)

    
    conditionalFormat = property(__conditionalFormat.value, __conditionalFormat.set, None, u'Conditional Formatting')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ConditionalFormats_count', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    count = property(__count.value, __count.set, None, u'Conditional Format Count')


    _ElementMap = {
        __conditionalFormat.name() : __conditionalFormat
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_ConditionalFormats', CT_ConditionalFormats)


# Complex type CT_Fills with content type ELEMENT_ONLY
class CT_Fills (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Fills')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}fill uses Python identifier fill
    __fill = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'fill'), 'fill', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Fills_httpschemas_openxmlformats_orgspreadsheetml2006mainfill', True)

    
    fill = property(__fill.value, __fill.set, None, u'Fill')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Fills_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Fill Count')


    _ElementMap = {
        __fill.name() : __fill
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_Fills', CT_Fills)


# Complex type CT_Filter with content type EMPTY
class CT_Filter (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Filter')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute val uses Python identifier val
    __val = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'val'), 'val', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Filter_val', _s.ST_Xstring)
    
    val = property(__val.value, __val.set, None, u'Filter Value')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __val.name() : __val
    }
Namespace.addCategoryObject('typeBinding', u'CT_Filter', CT_Filter)


# Complex type CT_ReviewedRevisions with content type ELEMENT_ONLY
class CT_ReviewedRevisions (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ReviewedRevisions')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}reviewed uses Python identifier reviewed
    __reviewed = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'reviewed'), 'reviewed', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ReviewedRevisions_httpschemas_openxmlformats_orgspreadsheetml2006mainreviewed', True)

    
    reviewed = property(__reviewed.value, __reviewed.set, None, u'Reviewed')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ReviewedRevisions_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Reviewed Revisions Count')


    _ElementMap = {
        __reviewed.name() : __reviewed
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_ReviewedRevisions', CT_ReviewedRevisions)


# Complex type CT_CalcChain with content type ELEMENT_ONLY
class CT_CalcChain (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CalcChain')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcChain_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}c uses Python identifier c
    __c = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'c'), 'c', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CalcChain_httpschemas_openxmlformats_orgspreadsheetml2006mainc', True)

    
    c = property(__c.value, __c.set, None, u'Cell')


    _ElementMap = {
        __extLst.name() : __extLst,
        __c.name() : __c
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_CalcChain', CT_CalcChain)


# Complex type CT_Dialogsheet with content type ELEMENT_ONLY
class CT_Dialogsheet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Dialogsheet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}legacyDrawingHF uses Python identifier legacyDrawingHF
    __legacyDrawingHF = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawingHF'), 'legacyDrawingHF', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dialogsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainlegacyDrawingHF', False)

    
    legacyDrawingHF = property(__legacyDrawingHF.value, __legacyDrawingHF.set, None, u'Legacy Drawing Header Footer')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageMargins uses Python identifier pageMargins
    __pageMargins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageMargins'), 'pageMargins', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dialogsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainpageMargins', False)

    
    pageMargins = property(__pageMargins.value, __pageMargins.set, None, u'Page Margins')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetPr uses Python identifier sheetPr
    __sheetPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetPr'), 'sheetPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dialogsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetPr', False)

    
    sheetPr = property(__sheetPr.value, __sheetPr.set, None, u'Sheet Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetViews uses Python identifier sheetViews
    __sheetViews = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetViews'), 'sheetViews', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dialogsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetViews', False)

    
    sheetViews = property(__sheetViews.value, __sheetViews.set, None, u'Dialog Sheet Views')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}drawingHF uses Python identifier drawingHF
    __drawingHF = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'drawingHF'), 'drawingHF', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dialogsheet_httpschemas_openxmlformats_orgspreadsheetml2006maindrawingHF', False)

    
    drawingHF = property(__drawingHF.value, __drawingHF.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageSetup uses Python identifier pageSetup
    __pageSetup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageSetup'), 'pageSetup', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dialogsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainpageSetup', False)

    
    pageSetup = property(__pageSetup.value, __pageSetup.set, None, u'Page Setup Settings')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}oleObjects uses Python identifier oleObjects
    __oleObjects = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'oleObjects'), 'oleObjects', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dialogsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainoleObjects', False)

    
    oleObjects = property(__oleObjects.value, __oleObjects.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dialogsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetFormatPr uses Python identifier sheetFormatPr
    __sheetFormatPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetFormatPr'), 'sheetFormatPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dialogsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetFormatPr', False)

    
    sheetFormatPr = property(__sheetFormatPr.value, __sheetFormatPr.set, None, u'Dialog Sheet Format Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}drawing uses Python identifier drawing
    __drawing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'drawing'), 'drawing', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dialogsheet_httpschemas_openxmlformats_orgspreadsheetml2006maindrawing', False)

    
    drawing = property(__drawing.value, __drawing.set, None, u'Drawing')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}headerFooter uses Python identifier headerFooter
    __headerFooter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'headerFooter'), 'headerFooter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dialogsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainheaderFooter', False)

    
    headerFooter = property(__headerFooter.value, __headerFooter.set, None, u'Header & Footer Settings')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}customSheetViews uses Python identifier customSheetViews
    __customSheetViews = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'customSheetViews'), 'customSheetViews', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dialogsheet_httpschemas_openxmlformats_orgspreadsheetml2006maincustomSheetViews', False)

    
    customSheetViews = property(__customSheetViews.value, __customSheetViews.set, None, u'Custom Sheet Views')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}legacyDrawing uses Python identifier legacyDrawing
    __legacyDrawing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawing'), 'legacyDrawing', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dialogsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainlegacyDrawing', False)

    
    legacyDrawing = property(__legacyDrawing.value, __legacyDrawing.set, None, u'Legacy Drawing')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}printOptions uses Python identifier printOptions
    __printOptions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'printOptions'), 'printOptions', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dialogsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainprintOptions', False)

    
    printOptions = property(__printOptions.value, __printOptions.set, None, u'Print Options')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetProtection uses Python identifier sheetProtection
    __sheetProtection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetProtection'), 'sheetProtection', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Dialogsheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetProtection', False)

    
    sheetProtection = property(__sheetProtection.value, __sheetProtection.set, None, u'Sheet Protection')


    _ElementMap = {
        __legacyDrawingHF.name() : __legacyDrawingHF,
        __pageMargins.name() : __pageMargins,
        __sheetPr.name() : __sheetPr,
        __sheetViews.name() : __sheetViews,
        __drawingHF.name() : __drawingHF,
        __pageSetup.name() : __pageSetup,
        __oleObjects.name() : __oleObjects,
        __extLst.name() : __extLst,
        __sheetFormatPr.name() : __sheetFormatPr,
        __drawing.name() : __drawing,
        __headerFooter.name() : __headerFooter,
        __customSheetViews.name() : __customSheetViews,
        __legacyDrawing.name() : __legacyDrawing,
        __printOptions.name() : __printOptions,
        __sheetProtection.name() : __sheetProtection
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Dialogsheet', CT_Dialogsheet)


# Complex type CT_TextPr with content type ELEMENT_ONLY
class CT_TextPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_TextPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}textFields uses Python identifier textFields
    __textFields = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'textFields'), 'textFields', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_httpschemas_openxmlformats_orgspreadsheetml2006maintextFields', False)

    
    textFields = property(__textFields.value, __textFields.set, None, u'Fields')

    
    # Attribute sourceFile uses Python identifier sourceFile
    __sourceFile = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sourceFile'), 'sourceFile', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_sourceFile', _s.ST_Xstring, unicode_default=u'')
    
    sourceFile = property(__sourceFile.value, __sourceFile.set, None, u'Source File Name')

    
    # Attribute qualifier uses Python identifier qualifier
    __qualifier = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'qualifier'), 'qualifier', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_qualifier', ST_Qualifier, unicode_default=u'doubleQuote')
    
    qualifier = property(__qualifier.value, __qualifier.set, None, u'Qualifier')

    
    # Attribute firstRow uses Python identifier firstRow
    __firstRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'firstRow'), 'firstRow', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_firstRow', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    firstRow = property(__firstRow.value, __firstRow.set, None, u'First Row')

    
    # Attribute tab uses Python identifier tab
    __tab = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'tab'), 'tab', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_tab', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    tab = property(__tab.value, __tab.set, None, u'Tab as Delimiter')

    
    # Attribute comma uses Python identifier comma
    __comma = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'comma'), 'comma', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_comma', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    comma = property(__comma.value, __comma.set, None, u'Comma is Delimiter')

    
    # Attribute thousands uses Python identifier thousands
    __thousands = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'thousands'), 'thousands', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_thousands', _s.ST_Xstring, unicode_default=u',')
    
    thousands = property(__thousands.value, __thousands.set, None, u'Thousands Separator')

    
    # Attribute delimiter uses Python identifier delimiter
    __delimiter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'delimiter'), 'delimiter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_delimiter', _s.ST_Xstring)
    
    delimiter = property(__delimiter.value, __delimiter.set, None, u'Custom Delimiter')

    
    # Attribute space uses Python identifier space
    __space = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'space'), 'space', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_space', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    space = property(__space.value, __space.set, None, u'Space is Delimiter')

    
    # Attribute prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prompt'), 'prompt', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_prompt', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    prompt = property(__prompt.value, __prompt.set, None, u'Prompt for File Name')

    
    # Attribute delimited uses Python identifier delimited
    __delimited = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'delimited'), 'delimited', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_delimited', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    delimited = property(__delimited.value, __delimited.set, None, u'Delimited File')

    
    # Attribute fileType uses Python identifier fileType
    __fileType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fileType'), 'fileType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_fileType', ST_FileType, unicode_default=u'win')
    
    fileType = property(__fileType.value, __fileType.set, None, u'File Type')

    
    # Attribute codePage uses Python identifier codePage
    __codePage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codePage'), 'codePage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_codePage', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1252')
    
    codePage = property(__codePage.value, __codePage.set, None, u'Code Page')

    
    # Attribute semicolon uses Python identifier semicolon
    __semicolon = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'semicolon'), 'semicolon', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_semicolon', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    semicolon = property(__semicolon.value, __semicolon.set, None, u'Semicolon is Delimiter')

    
    # Attribute decimal uses Python identifier decimal
    __decimal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'decimal'), 'decimal', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_decimal', _s.ST_Xstring, unicode_default=u'.')
    
    decimal = property(__decimal.value, __decimal.set, None, u'Decimal Separator')

    
    # Attribute consecutive uses Python identifier consecutive
    __consecutive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'consecutive'), 'consecutive', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_consecutive', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    consecutive = property(__consecutive.value, __consecutive.set, None, u'Consecutive Delimiters')

    
    # Attribute characterSet uses Python identifier characterSet
    __characterSet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'characterSet'), 'characterSet', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TextPr_characterSet', pyxb.binding.datatypes.string)
    
    characterSet = property(__characterSet.value, __characterSet.set, None, u'Character Set')


    _ElementMap = {
        __textFields.name() : __textFields
    }
    _AttributeMap = {
        __sourceFile.name() : __sourceFile,
        __qualifier.name() : __qualifier,
        __firstRow.name() : __firstRow,
        __tab.name() : __tab,
        __comma.name() : __comma,
        __thousands.name() : __thousands,
        __delimiter.name() : __delimiter,
        __space.name() : __space,
        __prompt.name() : __prompt,
        __delimited.name() : __delimited,
        __fileType.name() : __fileType,
        __codePage.name() : __codePage,
        __semicolon.name() : __semicolon,
        __decimal.name() : __decimal,
        __consecutive.name() : __consecutive,
        __characterSet.name() : __characterSet
    }
Namespace.addCategoryObject('typeBinding', u'CT_TextPr', CT_TextPr)


# Complex type CT_LevelGroup with content type ELEMENT_ONLY
class CT_LevelGroup (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_LevelGroup')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}groupMembers uses Python identifier groupMembers
    __groupMembers = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'groupMembers'), 'groupMembers', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_LevelGroup_httpschemas_openxmlformats_orgspreadsheetml2006maingroupMembers', False)

    
    groupMembers = property(__groupMembers.value, __groupMembers.set, None, u'OLAP Group Members')

    
    # Attribute uniqueParent uses Python identifier uniqueParent
    __uniqueParent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueParent'), 'uniqueParent', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_LevelGroup_uniqueParent', _s.ST_Xstring)
    
    uniqueParent = property(__uniqueParent.value, __uniqueParent.set, None, u'Parent Unique Name')

    
    # Attribute caption uses Python identifier caption
    __caption = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'caption'), 'caption', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_LevelGroup_caption', _s.ST_Xstring, required=True)
    
    caption = property(__caption.value, __caption.set, None, u'Group Caption')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_LevelGroup_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Group Name')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_LevelGroup_id', pyxb.binding.datatypes.int)
    
    id = property(__id.value, __id.set, None, u'Group Id')

    
    # Attribute uniqueName uses Python identifier uniqueName
    __uniqueName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueName'), 'uniqueName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_LevelGroup_uniqueName', _s.ST_Xstring, required=True)
    
    uniqueName = property(__uniqueName.value, __uniqueName.set, None, u'Unique Group Name')


    _ElementMap = {
        __groupMembers.name() : __groupMembers
    }
    _AttributeMap = {
        __uniqueParent.name() : __uniqueParent,
        __caption.name() : __caption,
        __name.name() : __name,
        __id.name() : __id,
        __uniqueName.name() : __uniqueName
    }
Namespace.addCategoryObject('typeBinding', u'CT_LevelGroup', CT_LevelGroup)


# Complex type CT_ColorFilter with content type EMPTY
class CT_ColorFilter (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ColorFilter')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute cellColor uses Python identifier cellColor
    __cellColor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'cellColor'), 'cellColor', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ColorFilter_cellColor', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    cellColor = property(__cellColor.value, __cellColor.set, None, u'Filter By Cell Color')

    
    # Attribute dxfId uses Python identifier dxfId
    __dxfId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'dxfId'), 'dxfId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ColorFilter_dxfId', ST_DxfId)
    
    dxfId = property(__dxfId.value, __dxfId.set, None, u'Differential Format Record Id')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __cellColor.name() : __cellColor,
        __dxfId.name() : __dxfId
    }
Namespace.addCategoryObject('typeBinding', u'CT_ColorFilter', CT_ColorFilter)


# Complex type CT_XmlCellPr with content type ELEMENT_ONLY
class CT_XmlCellPr (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_XmlCellPr')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_XmlCellPr_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}xmlPr uses Python identifier xmlPr
    __xmlPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'xmlPr'), 'xmlPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_XmlCellPr_httpschemas_openxmlformats_orgspreadsheetml2006mainxmlPr', False)

    
    xmlPr = property(__xmlPr.value, __xmlPr.set, None, u'Column XML Properties')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_XmlCellPr_id', pyxb.binding.datatypes.unsignedInt, required=True)
    
    id = property(__id.value, __id.set, None, u'Table Field Id')

    
    # Attribute uniqueName uses Python identifier uniqueName
    __uniqueName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueName'), 'uniqueName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_XmlCellPr_uniqueName', _s.ST_Xstring)
    
    uniqueName = property(__uniqueName.value, __uniqueName.set, None, u'Unique Table Name')


    _ElementMap = {
        __extLst.name() : __extLst,
        __xmlPr.name() : __xmlPr
    }
    _AttributeMap = {
        __id.name() : __id,
        __uniqueName.name() : __uniqueName
    }
Namespace.addCategoryObject('typeBinding', u'CT_XmlCellPr', CT_XmlCellPr)


# Complex type CT_Connection with content type ELEMENT_ONLY
class CT_Connection (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Connection')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}olapPr uses Python identifier olapPr
    __olapPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'olapPr'), 'olapPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_httpschemas_openxmlformats_orgspreadsheetml2006mainolapPr', False)

    
    olapPr = property(__olapPr.value, __olapPr.set, None, u'OLAP Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}webPr uses Python identifier webPr
    __webPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'webPr'), 'webPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_httpschemas_openxmlformats_orgspreadsheetml2006mainwebPr', False)

    
    webPr = property(__webPr.value, __webPr.set, None, u'Web Query Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}textPr uses Python identifier textPr
    __textPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'textPr'), 'textPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_httpschemas_openxmlformats_orgspreadsheetml2006maintextPr', False)

    
    textPr = property(__textPr.value, __textPr.set, None, u'Text Import Settings')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dbPr uses Python identifier dbPr
    __dbPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dbPr'), 'dbPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_httpschemas_openxmlformats_orgspreadsheetml2006maindbPr', False)

    
    dbPr = property(__dbPr.value, __dbPr.set, None, u'Database Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'parameters'), 'parameters', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_httpschemas_openxmlformats_orgspreadsheetml2006mainparameters', False)

    
    parameters = property(__parameters.value, __parameters.set, None, u'Query Parameters')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage')

    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'description'), 'description', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_description', _s.ST_Xstring)
    
    description = property(__description.value, __description.set, None, u'Connection Description')

    
    # Attribute refreshedVersion uses Python identifier refreshedVersion
    __refreshedVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refreshedVersion'), 'refreshedVersion', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_refreshedVersion', pyxb.binding.datatypes.unsignedByte, required=True)
    
    refreshedVersion = property(__refreshedVersion.value, __refreshedVersion.set, None, u'Last Refresh Version')

    
    # Attribute sourceFile uses Python identifier sourceFile
    __sourceFile = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sourceFile'), 'sourceFile', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_sourceFile', _s.ST_Xstring)
    
    sourceFile = property(__sourceFile.value, __sourceFile.set, None, u'Source Database File')

    
    # Attribute new uses Python identifier new
    __new = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'new'), 'new', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_new', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    new = property(__new.value, __new.set, None, u'New Connection')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_name', _s.ST_Xstring)
    
    name = property(__name.value, __name.set, None, u'Connection Name')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_type', pyxb.binding.datatypes.unsignedInt)
    
    type = property(__type.value, __type.set, None, u'Database Source Type')

    
    # Attribute odcFile uses Python identifier odcFile
    __odcFile = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'odcFile'), 'odcFile', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_odcFile', _s.ST_Xstring)
    
    odcFile = property(__odcFile.value, __odcFile.set, None, u'Connection File')

    
    # Attribute credentials uses Python identifier credentials
    __credentials = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'credentials'), 'credentials', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_credentials', ST_CredMethod, unicode_default=u'integrated')
    
    credentials = property(__credentials.value, __credentials.set, None, u'Reconnection Method')

    
    # Attribute reconnectionMethod uses Python identifier reconnectionMethod
    __reconnectionMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'reconnectionMethod'), 'reconnectionMethod', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_reconnectionMethod', pyxb.binding.datatypes.unsignedInt, unicode_default=u'1')
    
    reconnectionMethod = property(__reconnectionMethod.value, __reconnectionMethod.set, None, u'Reconnection Method')

    
    # Attribute keepAlive uses Python identifier keepAlive
    __keepAlive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'keepAlive'), 'keepAlive', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_keepAlive', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    keepAlive = property(__keepAlive.value, __keepAlive.set, None, u'Keep Connection Open')

    
    # Attribute onlyUseConnectionFile uses Python identifier onlyUseConnectionFile
    __onlyUseConnectionFile = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'onlyUseConnectionFile'), 'onlyUseConnectionFile', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_onlyUseConnectionFile', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    onlyUseConnectionFile = property(__onlyUseConnectionFile.value, __onlyUseConnectionFile.set, None, u'Only Use Connection File')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_id', pyxb.binding.datatypes.unsignedInt, required=True)
    
    id = property(__id.value, __id.set, None, u'Connection Id')

    
    # Attribute saveData uses Python identifier saveData
    __saveData = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'saveData'), 'saveData', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_saveData', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    saveData = property(__saveData.value, __saveData.set, None, u'Save Data')

    
    # Attribute interval uses Python identifier interval
    __interval = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'interval'), 'interval', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_interval', pyxb.binding.datatypes.unsignedInt, unicode_default=u'0')
    
    interval = property(__interval.value, __interval.set, None, u'Automatic Refresh Interval')

    
    # Attribute background uses Python identifier background
    __background = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'background'), 'background', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_background', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    background = property(__background.value, __background.set, None, u'Background Refresh')

    
    # Attribute minRefreshableVersion uses Python identifier minRefreshableVersion
    __minRefreshableVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'minRefreshableVersion'), 'minRefreshableVersion', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_minRefreshableVersion', pyxb.binding.datatypes.unsignedByte, unicode_default=u'0')
    
    minRefreshableVersion = property(__minRefreshableVersion.value, __minRefreshableVersion.set, None, u'Minimum Version Required for Refresh')

    
    # Attribute deleted uses Python identifier deleted
    __deleted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'deleted'), 'deleted', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_deleted', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    deleted = property(__deleted.value, __deleted.set, None, u'Deleted Connection')

    
    # Attribute refreshOnLoad uses Python identifier refreshOnLoad
    __refreshOnLoad = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'refreshOnLoad'), 'refreshOnLoad', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_refreshOnLoad', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    refreshOnLoad = property(__refreshOnLoad.value, __refreshOnLoad.set, None, u'Refresh on Open')

    
    # Attribute singleSignOnId uses Python identifier singleSignOnId
    __singleSignOnId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'singleSignOnId'), 'singleSignOnId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_singleSignOnId', _s.ST_Xstring)
    
    singleSignOnId = property(__singleSignOnId.value, __singleSignOnId.set, None, u'SSO Id')

    
    # Attribute savePassword uses Python identifier savePassword
    __savePassword = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'savePassword'), 'savePassword', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Connection_savePassword', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    savePassword = property(__savePassword.value, __savePassword.set, None, u'Save Password')


    _ElementMap = {
        __olapPr.name() : __olapPr,
        __webPr.name() : __webPr,
        __textPr.name() : __textPr,
        __dbPr.name() : __dbPr,
        __parameters.name() : __parameters,
        __extLst.name() : __extLst
    }
    _AttributeMap = {
        __description.name() : __description,
        __refreshedVersion.name() : __refreshedVersion,
        __sourceFile.name() : __sourceFile,
        __new.name() : __new,
        __name.name() : __name,
        __type.name() : __type,
        __odcFile.name() : __odcFile,
        __credentials.name() : __credentials,
        __reconnectionMethod.name() : __reconnectionMethod,
        __keepAlive.name() : __keepAlive,
        __onlyUseConnectionFile.name() : __onlyUseConnectionFile,
        __id.name() : __id,
        __saveData.name() : __saveData,
        __interval.name() : __interval,
        __background.name() : __background,
        __minRefreshableVersion.name() : __minRefreshableVersion,
        __deleted.name() : __deleted,
        __refreshOnLoad.name() : __refreshOnLoad,
        __singleSignOnId.name() : __singleSignOnId,
        __savePassword.name() : __savePassword
    }
Namespace.addCategoryObject('typeBinding', u'CT_Connection', CT_Connection)


# Complex type CT_DataValidation with content type ELEMENT_ONLY
class CT_DataValidation (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DataValidation')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}formula2 uses Python identifier formula2
    __formula2 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'formula2'), 'formula2', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidation_httpschemas_openxmlformats_orgspreadsheetml2006mainformula2', False)

    
    formula2 = property(__formula2.value, __formula2.set, None, u'Formula 2')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}formula1 uses Python identifier formula1
    __formula1 = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'formula1'), 'formula1', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidation_httpschemas_openxmlformats_orgspreadsheetml2006mainformula1', False)

    
    formula1 = property(__formula1.value, __formula1.set, None, u'Formula 1')

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidation_type', ST_DataValidationType, unicode_default=u'none')
    
    type = property(__type.value, __type.set, None, u'Data Validation Type')

    
    # Attribute allowBlank uses Python identifier allowBlank
    __allowBlank = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'allowBlank'), 'allowBlank', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidation_allowBlank', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    allowBlank = property(__allowBlank.value, __allowBlank.set, None, u'Allow Blank')

    
    # Attribute showInputMessage uses Python identifier showInputMessage
    __showInputMessage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showInputMessage'), 'showInputMessage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidation_showInputMessage', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showInputMessage = property(__showInputMessage.value, __showInputMessage.set, None, u'Show Input Message')

    
    # Attribute errorTitle uses Python identifier errorTitle
    __errorTitle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'errorTitle'), 'errorTitle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidation_errorTitle', _s.ST_Xstring)
    
    errorTitle = property(__errorTitle.value, __errorTitle.set, None, u'Error Alert Text')

    
    # Attribute prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prompt'), 'prompt', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidation_prompt', _s.ST_Xstring)
    
    prompt = property(__prompt.value, __prompt.set, None, u'Input Prompt')

    
    # Attribute errorStyle uses Python identifier errorStyle
    __errorStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'errorStyle'), 'errorStyle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidation_errorStyle', ST_DataValidationErrorStyle, unicode_default=u'stop')
    
    errorStyle = property(__errorStyle.value, __errorStyle.set, None, u'Data Validation Error Style')

    
    # Attribute sqref uses Python identifier sqref
    __sqref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sqref'), 'sqref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidation_sqref', ST_Sqref, required=True)
    
    sqref = property(__sqref.value, __sqref.set, None, u'Sequence of References')

    
    # Attribute imeMode uses Python identifier imeMode
    __imeMode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'imeMode'), 'imeMode', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidation_imeMode', ST_DataValidationImeMode, unicode_default=u'noControl')
    
    imeMode = property(__imeMode.value, __imeMode.set, None, u'IME Mode Enforced')

    
    # Attribute showErrorMessage uses Python identifier showErrorMessage
    __showErrorMessage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showErrorMessage'), 'showErrorMessage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidation_showErrorMessage', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showErrorMessage = property(__showErrorMessage.value, __showErrorMessage.set, None, u'Show Error Message')

    
    # Attribute operator uses Python identifier operator
    __operator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'operator'), 'operator', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidation_operator', ST_DataValidationOperator, unicode_default=u'between')
    
    operator = property(__operator.value, __operator.set, None, u'Operator')

    
    # Attribute error uses Python identifier error
    __error = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'error'), 'error', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidation_error', _s.ST_Xstring)
    
    error = property(__error.value, __error.set, None, u'Error Message')

    
    # Attribute showDropDown uses Python identifier showDropDown
    __showDropDown = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showDropDown'), 'showDropDown', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidation_showDropDown', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showDropDown = property(__showDropDown.value, __showDropDown.set, None, u'Show Drop Down')

    
    # Attribute promptTitle uses Python identifier promptTitle
    __promptTitle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'promptTitle'), 'promptTitle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataValidation_promptTitle', _s.ST_Xstring)
    
    promptTitle = property(__promptTitle.value, __promptTitle.set, None, u'Prompt Title')


    _ElementMap = {
        __formula2.name() : __formula2,
        __formula1.name() : __formula1
    }
    _AttributeMap = {
        __type.name() : __type,
        __allowBlank.name() : __allowBlank,
        __showInputMessage.name() : __showInputMessage,
        __errorTitle.name() : __errorTitle,
        __prompt.name() : __prompt,
        __errorStyle.name() : __errorStyle,
        __sqref.name() : __sqref,
        __imeMode.name() : __imeMode,
        __showErrorMessage.name() : __showErrorMessage,
        __operator.name() : __operator,
        __error.name() : __error,
        __showDropDown.name() : __showDropDown,
        __promptTitle.name() : __promptTitle
    }
Namespace.addCategoryObject('typeBinding', u'CT_DataValidation', CT_DataValidation)


# Complex type CT_RevisionRowColumn with content type ELEMENT_ONLY
class CT_RevisionRowColumn (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RevisionRowColumn')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rfmt uses Python identifier rfmt
    __rfmt = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rfmt'), 'rfmt', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionRowColumn_httpschemas_openxmlformats_orgspreadsheetml2006mainrfmt', True)

    
    rfmt = property(__rfmt.value, __rfmt.set, None, u'Revision Format')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rcc uses Python identifier rcc
    __rcc = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rcc'), 'rcc', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionRowColumn_httpschemas_openxmlformats_orgspreadsheetml2006mainrcc', True)

    
    rcc = property(__rcc.value, __rcc.set, None, u'Revised Row Column')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}undo uses Python identifier undo
    __undo = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'undo'), 'undo', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionRowColumn_httpschemas_openxmlformats_orgspreadsheetml2006mainundo', True)

    
    undo = property(__undo.value, __undo.set, None, u'Undo')

    
    # Attribute ra uses Python identifier ra
    __ra = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ra'), 'ra', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionRowColumn_ra', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ra = property(__ra.value, __ra.set, None, u'Revision Undo Rejected')

    
    # Attribute eol uses Python identifier eol
    __eol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'eol'), 'eol', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionRowColumn_eol', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    eol = property(__eol.value, __eol.set, None, u'End Of List')

    
    # Attribute edge uses Python identifier edge
    __edge = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'edge'), 'edge', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionRowColumn_edge', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    edge = property(__edge.value, __edge.set, None, u'Edge Deleted')

    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionRowColumn_ref', ST_Ref, required=True)
    
    ref = property(__ref.value, __ref.set, None, u'Reference')

    
    # Attribute action uses Python identifier action
    __action = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'action'), 'action', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionRowColumn_action', ST_rwColActionType, required=True)
    
    action = property(__action.value, __action.set, None, u'User Action')

    
    # Attribute ua uses Python identifier ua
    __ua = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ua'), 'ua', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionRowColumn_ua', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ua = property(__ua.value, __ua.set, None, u'Revision From Rejection')

    
    # Attribute rId uses Python identifier rId
    __rId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'rId'), 'rId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionRowColumn_rId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    rId = property(__rId.value, __rId.set, None, u'Revision Id')

    
    # Attribute sId uses Python identifier sId
    __sId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sId'), 'sId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionRowColumn_sId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    sId = property(__sId.value, __sId.set, None, u'Sheet Id')


    _ElementMap = {
        __rfmt.name() : __rfmt,
        __rcc.name() : __rcc,
        __undo.name() : __undo
    }
    _AttributeMap = {
        __ra.name() : __ra,
        __eol.name() : __eol,
        __edge.name() : __edge,
        __ref.name() : __ref,
        __action.name() : __action,
        __ua.name() : __ua,
        __rId.name() : __rId,
        __sId.name() : __sId
    }
Namespace.addCategoryObject('typeBinding', u'CT_RevisionRowColumn', CT_RevisionRowColumn)


# Complex type CT_PivotFields with content type ELEMENT_ONLY
class CT_PivotFields (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotFields')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pivotField uses Python identifier pivotField
    __pivotField = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pivotField'), 'pivotField', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFields_httpschemas_openxmlformats_orgspreadsheetml2006mainpivotField', True)

    
    pivotField = property(__pivotField.value, __pivotField.set, None, u'PivotTable Field')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotFields_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Field Count')


    _ElementMap = {
        __pivotField.name() : __pivotField
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotFields', CT_PivotFields)


# Complex type CT_CustomSheetView with content type ELEMENT_ONLY
class CT_CustomSheetView (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CustomSheetView')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageSetup uses Python identifier pageSetup
    __pageSetup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageSetup'), 'pageSetup', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainpageSetup', False)

    
    pageSetup = property(__pageSetup.value, __pageSetup.set, None, u'Page Setup Settings')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}autoFilter uses Python identifier autoFilter
    __autoFilter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'autoFilter'), 'autoFilter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainautoFilter', False)

    
    autoFilter = property(__autoFilter.value, __autoFilter.set, None, u'AutoFilter Settings')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}headerFooter uses Python identifier headerFooter
    __headerFooter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'headerFooter'), 'headerFooter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainheaderFooter', False)

    
    headerFooter = property(__headerFooter.value, __headerFooter.set, None, u'Header Footer Settings')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rowBreaks uses Python identifier rowBreaks
    __rowBreaks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rowBreaks'), 'rowBreaks', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainrowBreaks', False)

    
    rowBreaks = property(__rowBreaks.value, __rowBreaks.set, None, u'Horizontal Page Breaks')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}selection uses Python identifier selection
    __selection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'selection'), 'selection', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainselection', False)

    
    selection = property(__selection.value, __selection.set, None, u'Selection')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}colBreaks uses Python identifier colBreaks
    __colBreaks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'colBreaks'), 'colBreaks', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_httpschemas_openxmlformats_orgspreadsheetml2006maincolBreaks', False)

    
    colBreaks = property(__colBreaks.value, __colBreaks.set, None, u'Vertical Page Breaks')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageMargins uses Python identifier pageMargins
    __pageMargins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageMargins'), 'pageMargins', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainpageMargins', False)

    
    pageMargins = property(__pageMargins.value, __pageMargins.set, None, u'Page Margins')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}printOptions uses Python identifier printOptions
    __printOptions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'printOptions'), 'printOptions', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainprintOptions', False)

    
    printOptions = property(__printOptions.value, __printOptions.set, None, u'Print Options')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pane uses Python identifier pane
    __pane = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pane'), 'pane', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_httpschemas_openxmlformats_orgspreadsheetml2006mainpane', False)

    
    pane = property(__pane.value, __pane.set, None, u'Pane Split Information')

    
    # Attribute showGridLines uses Python identifier showGridLines
    __showGridLines = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showGridLines'), 'showGridLines', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_showGridLines', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showGridLines = property(__showGridLines.value, __showGridLines.set, None, u'Show Grid Lines')

    
    # Attribute zeroValues uses Python identifier zeroValues
    __zeroValues = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'zeroValues'), 'zeroValues', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_zeroValues', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    zeroValues = property(__zeroValues.value, __zeroValues.set, None, u'Show Zero Values')

    
    # Attribute filterUnique uses Python identifier filterUnique
    __filterUnique = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'filterUnique'), 'filterUnique', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_filterUnique', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    filterUnique = property(__filterUnique.value, __filterUnique.set, None, u'Filter')

    
    # Attribute filter uses Python identifier filter
    __filter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'filter'), 'filter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_filter', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    filter = property(__filter.value, __filter.set, None, u'Filtered List')

    
    # Attribute topLeftCell uses Python identifier topLeftCell
    __topLeftCell = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'topLeftCell'), 'topLeftCell', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_topLeftCell', ST_CellRef)
    
    topLeftCell = property(__topLeftCell.value, __topLeftCell.set, None, u'Top Left Visible Cell')

    
    # Attribute showRowCol uses Python identifier showRowCol
    __showRowCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showRowCol'), 'showRowCol', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_showRowCol', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showRowCol = property(__showRowCol.value, __showRowCol.set, None, u'Show Headers')

    
    # Attribute scale uses Python identifier scale
    __scale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'scale'), 'scale', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_scale', pyxb.binding.datatypes.unsignedInt, unicode_default=u'100')
    
    scale = property(__scale.value, __scale.set, None, u'Print Scale')

    
    # Attribute showAutoFilter uses Python identifier showAutoFilter
    __showAutoFilter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showAutoFilter'), 'showAutoFilter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_showAutoFilter', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showAutoFilter = property(__showAutoFilter.value, __showAutoFilter.set, None, u'Show AutoFitler Drop Down Controls')

    
    # Attribute hiddenRows uses Python identifier hiddenRows
    __hiddenRows = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hiddenRows'), 'hiddenRows', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_hiddenRows', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hiddenRows = property(__hiddenRows.value, __hiddenRows.set, None, u'Hidden Rows')

    
    # Attribute outlineSymbols uses Python identifier outlineSymbols
    __outlineSymbols = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'outlineSymbols'), 'outlineSymbols', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_outlineSymbols', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    outlineSymbols = property(__outlineSymbols.value, __outlineSymbols.set, None, u'Show Outline Symbols')

    
    # Attribute guid uses Python identifier guid
    __guid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'guid'), 'guid', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_guid', _s.ST_Guid, required=True)
    
    guid = property(__guid.value, __guid.set, None, u'GUID')

    
    # Attribute showRuler uses Python identifier showRuler
    __showRuler = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showRuler'), 'showRuler', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_showRuler', pyxb.binding.datatypes.boolean, unicode_default=u'true')
    
    showRuler = property(__showRuler.value, __showRuler.set, None, u'Show Ruler')

    
    # Attribute fitToPage uses Python identifier fitToPage
    __fitToPage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fitToPage'), 'fitToPage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_fitToPage', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    fitToPage = property(__fitToPage.value, __fitToPage.set, None, u'Fit To Page')

    
    # Attribute showPageBreaks uses Python identifier showPageBreaks
    __showPageBreaks = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showPageBreaks'), 'showPageBreaks', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_showPageBreaks', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showPageBreaks = property(__showPageBreaks.value, __showPageBreaks.set, None, u'Show Page Breaks')

    
    # Attribute hiddenColumns uses Python identifier hiddenColumns
    __hiddenColumns = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'hiddenColumns'), 'hiddenColumns', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_hiddenColumns', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    hiddenColumns = property(__hiddenColumns.value, __hiddenColumns.set, None, u'Hidden Columns')

    
    # Attribute view uses Python identifier view
    __view = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'view'), 'view', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_view', ST_SheetViewType, unicode_default=u'normal')
    
    view = property(__view.value, __view.set, None, u'View Type')

    
    # Attribute showFormulas uses Python identifier showFormulas
    __showFormulas = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'showFormulas'), 'showFormulas', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_showFormulas', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    showFormulas = property(__showFormulas.value, __showFormulas.set, None, u'Show Formulas')

    
    # Attribute state uses Python identifier state
    __state = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'state'), 'state', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_state', ST_SheetState, unicode_default=u'visible')
    
    state = property(__state.value, __state.set, None, u'Visible State')

    
    # Attribute printArea uses Python identifier printArea
    __printArea = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'printArea'), 'printArea', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_printArea', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    printArea = property(__printArea.value, __printArea.set, None, u'Print Area Defined')

    
    # Attribute colorId uses Python identifier colorId
    __colorId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'colorId'), 'colorId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomSheetView_colorId', pyxb.binding.datatypes.unsignedInt, unicode_default=u'64')
    
    colorId = property(__colorId.value, __colorId.set, None, u'Color Id')


    _ElementMap = {
        __pageSetup.name() : __pageSetup,
        __autoFilter.name() : __autoFilter,
        __headerFooter.name() : __headerFooter,
        __rowBreaks.name() : __rowBreaks,
        __selection.name() : __selection,
        __colBreaks.name() : __colBreaks,
        __extLst.name() : __extLst,
        __pageMargins.name() : __pageMargins,
        __printOptions.name() : __printOptions,
        __pane.name() : __pane
    }
    _AttributeMap = {
        __showGridLines.name() : __showGridLines,
        __zeroValues.name() : __zeroValues,
        __filterUnique.name() : __filterUnique,
        __filter.name() : __filter,
        __topLeftCell.name() : __topLeftCell,
        __showRowCol.name() : __showRowCol,
        __scale.name() : __scale,
        __showAutoFilter.name() : __showAutoFilter,
        __hiddenRows.name() : __hiddenRows,
        __outlineSymbols.name() : __outlineSymbols,
        __guid.name() : __guid,
        __showRuler.name() : __showRuler,
        __fitToPage.name() : __fitToPage,
        __showPageBreaks.name() : __showPageBreaks,
        __hiddenColumns.name() : __hiddenColumns,
        __view.name() : __view,
        __showFormulas.name() : __showFormulas,
        __state.name() : __state,
        __printArea.name() : __printArea,
        __colorId.name() : __colorId
    }
Namespace.addCategoryObject('typeBinding', u'CT_CustomSheetView', CT_CustomSheetView)


# Complex type CT_WebPublishObject with content type EMPTY
class CT_WebPublishObject (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_WebPublishObject')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute divId uses Python identifier divId
    __divId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'divId'), 'divId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishObject_divId', _s.ST_Xstring, required=True)
    
    divId = property(__divId.value, __divId.set, None, u'Div Id')

    
    # Attribute destinationFile uses Python identifier destinationFile
    __destinationFile = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'destinationFile'), 'destinationFile', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishObject_destinationFile', _s.ST_Xstring, required=True)
    
    destinationFile = property(__destinationFile.value, __destinationFile.set, None, u'Destination File')

    
    # Attribute title uses Python identifier title
    __title = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'title'), 'title', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishObject_title', _s.ST_Xstring)
    
    title = property(__title.value, __title.set, None, u'Title')

    
    # Attribute sourceObject uses Python identifier sourceObject
    __sourceObject = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sourceObject'), 'sourceObject', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishObject_sourceObject', _s.ST_Xstring)
    
    sourceObject = property(__sourceObject.value, __sourceObject.set, None, u'Source Object')

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishObject_id', pyxb.binding.datatypes.unsignedInt, required=True)
    
    id = property(__id.value, __id.set, None, u'Id')

    
    # Attribute autoRepublish uses Python identifier autoRepublish
    __autoRepublish = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'autoRepublish'), 'autoRepublish', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_WebPublishObject_autoRepublish', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    autoRepublish = property(__autoRepublish.value, __autoRepublish.set, None, u'Auto Republish')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __divId.name() : __divId,
        __destinationFile.name() : __destinationFile,
        __title.name() : __title,
        __sourceObject.name() : __sourceObject,
        __id.name() : __id,
        __autoRepublish.name() : __autoRepublish
    }
Namespace.addCategoryObject('typeBinding', u'CT_WebPublishObject', CT_WebPublishObject)


# Complex type CT_BookViews with content type ELEMENT_ONLY
class CT_BookViews (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_BookViews')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}workbookView uses Python identifier workbookView
    __workbookView = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'workbookView'), 'workbookView', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_BookViews_httpschemas_openxmlformats_orgspreadsheetml2006mainworkbookView', True)

    
    workbookView = property(__workbookView.value, __workbookView.set, None, u'Workbook View')


    _ElementMap = {
        __workbookView.name() : __workbookView
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_BookViews', CT_BookViews)


# Complex type CT_GroupMember with content type EMPTY
class CT_GroupMember (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_GroupMember')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute group uses Python identifier group
    __group = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'group'), 'group', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupMember_group', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    group = property(__group.value, __group.set, None, u'Group')

    
    # Attribute uniqueName uses Python identifier uniqueName
    __uniqueName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uniqueName'), 'uniqueName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_GroupMember_uniqueName', _s.ST_Xstring, required=True)
    
    uniqueName = property(__uniqueName.value, __uniqueName.set, None, u'Group Member Unique Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __group.name() : __group,
        __uniqueName.name() : __uniqueName
    }
Namespace.addCategoryObject('typeBinding', u'CT_GroupMember', CT_GroupMember)


# Complex type CT_MemberProperties with content type ELEMENT_ONLY
class CT_MemberProperties (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MemberProperties')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}mp uses Python identifier mp
    __mp = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'mp'), 'mp', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MemberProperties_httpschemas_openxmlformats_orgspreadsheetml2006mainmp', True)

    
    mp = property(__mp.value, __mp.set, None, u'OLAP Member Property')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MemberProperties_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'OLAP Member Properties Count')


    _ElementMap = {
        __mp.name() : __mp
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_MemberProperties', CT_MemberProperties)


# Complex type CT_DdeItem with content type ELEMENT_ONLY
class CT_DdeItem (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DdeItem')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}values uses Python identifier values
    __values = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'values'), 'values', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DdeItem_httpschemas_openxmlformats_orgspreadsheetml2006mainvalues', False)

    
    values = property(__values.value, __values.set, None, u'DDE Name Values')

    
    # Attribute advise uses Python identifier advise
    __advise = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'advise'), 'advise', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DdeItem_advise', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    advise = property(__advise.value, __advise.set, None, u'Advise')

    
    # Attribute preferPic uses Python identifier preferPic
    __preferPic = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'preferPic'), 'preferPic', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DdeItem_preferPic', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    preferPic = property(__preferPic.value, __preferPic.set, None, u'Data is an Image')

    
    # Attribute ole uses Python identifier ole
    __ole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ole'), 'ole', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DdeItem_ole', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    ole = property(__ole.value, __ole.set, None, u'Object Linking TechnologyE')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DdeItem_name', _s.ST_Xstring, unicode_default=u'0')
    
    name = property(__name.value, __name.set, None, u'DDE Name')


    _ElementMap = {
        __values.name() : __values
    }
    _AttributeMap = {
        __advise.name() : __advise,
        __preferPic.name() : __preferPic,
        __ole.name() : __ole,
        __name.name() : __name
    }
Namespace.addCategoryObject('typeBinding', u'CT_DdeItem', CT_DdeItem)


# Complex type CT_DataConsolidate with content type ELEMENT_ONLY
class CT_DataConsolidate (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DataConsolidate')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dataRefs uses Python identifier dataRefs
    __dataRefs = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dataRefs'), 'dataRefs', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataConsolidate_httpschemas_openxmlformats_orgspreadsheetml2006maindataRefs', False)

    
    dataRefs = property(__dataRefs.value, __dataRefs.set, None, u'Data Consolidation References')

    
    # Attribute function uses Python identifier function
    __function = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'function'), 'function', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataConsolidate_function', ST_DataConsolidateFunction, unicode_default=u'sum')
    
    function = property(__function.value, __function.set, None, u'Function Index')

    
    # Attribute leftLabels uses Python identifier leftLabels
    __leftLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'leftLabels'), 'leftLabels', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataConsolidate_leftLabels', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    leftLabels = property(__leftLabels.value, __leftLabels.set, None, u'Starting Column Labels')

    
    # Attribute startLabels uses Python identifier startLabels
    __startLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'startLabels'), 'startLabels', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataConsolidate_startLabels', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    startLabels = property(__startLabels.value, __startLabels.set, None, u'Use Starting Column Labels')

    
    # Attribute link uses Python identifier link
    __link = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'link'), 'link', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataConsolidate_link', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    link = property(__link.value, __link.set, None, u'Link')

    
    # Attribute topLabels uses Python identifier topLabels
    __topLabels = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'topLabels'), 'topLabels', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataConsolidate_topLabels', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    topLabels = property(__topLabels.value, __topLabels.set, None, u'Labels In Top Row')


    _ElementMap = {
        __dataRefs.name() : __dataRefs
    }
    _AttributeMap = {
        __function.name() : __function,
        __leftLabels.name() : __leftLabels,
        __startLabels.name() : __startLabels,
        __link.name() : __link,
        __topLabels.name() : __topLabels
    }
Namespace.addCategoryObject('typeBinding', u'CT_DataConsolidate', CT_DataConsolidate)


# Complex type CT_RowHierarchiesUsage with content type ELEMENT_ONLY
class CT_RowHierarchiesUsage (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RowHierarchiesUsage')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rowHierarchyUsage uses Python identifier rowHierarchyUsage
    __rowHierarchyUsage = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rowHierarchyUsage'), 'rowHierarchyUsage', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RowHierarchiesUsage_httpschemas_openxmlformats_orgspreadsheetml2006mainrowHierarchyUsage', True)

    
    rowHierarchyUsage = property(__rowHierarchyUsage.value, __rowHierarchyUsage.set, None, u'Row OLAP Hierarchies')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RowHierarchiesUsage_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Item Count')


    _ElementMap = {
        __rowHierarchyUsage.name() : __rowHierarchyUsage
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_RowHierarchiesUsage', CT_RowHierarchiesUsage)


# Complex type CT_Borders with content type ELEMENT_ONLY
class CT_Borders (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Borders')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}border uses Python identifier border
    __border = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'border'), 'border', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Borders_httpschemas_openxmlformats_orgspreadsheetml2006mainborder', True)

    
    border = property(__border.value, __border.set, None, u'Border')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Borders_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Border Count')


    _ElementMap = {
        __border.name() : __border
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_Borders', CT_Borders)


# Complex type CT_ExternalSheetNames with content type ELEMENT_ONLY
class CT_ExternalSheetNames (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_ExternalSheetNames')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetName uses Python identifier sheetName
    __sheetName = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetName'), 'sheetName', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_ExternalSheetNames_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetName', True)

    
    sheetName = property(__sheetName.value, __sheetName.set, None, u'Sheet Name')


    _ElementMap = {
        __sheetName.name() : __sheetName
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_ExternalSheetNames', CT_ExternalSheetNames)


# Complex type CT_RevisionQueryTableField with content type EMPTY
class CT_RevisionQueryTableField (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_RevisionQueryTableField')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute fieldId uses Python identifier fieldId
    __fieldId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'fieldId'), 'fieldId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionQueryTableField_fieldId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    fieldId = property(__fieldId.value, __fieldId.set, None, u'Field Id')

    
    # Attribute ref uses Python identifier ref
    __ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'ref'), 'ref', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionQueryTableField_ref', ST_Ref, required=True)
    
    ref = property(__ref.value, __ref.set, None, u'QueryTable Reference')

    
    # Attribute sheetId uses Python identifier sheetId
    __sheetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sheetId'), 'sheetId', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_RevisionQueryTableField_sheetId', pyxb.binding.datatypes.unsignedInt, required=True)
    
    sheetId = property(__sheetId.value, __sheetId.set, None, u'Sheet Id')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __fieldId.name() : __fieldId,
        __ref.name() : __ref,
        __sheetId.name() : __sheetId
    }
Namespace.addCategoryObject('typeBinding', u'CT_RevisionQueryTableField', CT_RevisionQueryTableField)


# Complex type CT_Set with content type ELEMENT_ONLY
class CT_Set (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Set')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sortByTuple uses Python identifier sortByTuple
    __sortByTuple = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sortByTuple'), 'sortByTuple', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Set_httpschemas_openxmlformats_orgspreadsheetml2006mainsortByTuple', False)

    
    sortByTuple = property(__sortByTuple.value, __sortByTuple.set, None, u'Sort By Tuple')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tpls uses Python identifier tpls
    __tpls = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tpls'), 'tpls', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Set_httpschemas_openxmlformats_orgspreadsheetml2006maintpls', True)

    
    tpls = property(__tpls.value, __tpls.set, None, u'Tuples')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Set_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Number of Tuples')

    
    # Attribute queryFailed uses Python identifier queryFailed
    __queryFailed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'queryFailed'), 'queryFailed', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Set_queryFailed', pyxb.binding.datatypes.boolean, unicode_default=u'false')
    
    queryFailed = property(__queryFailed.value, __queryFailed.set, None, u'Query Failed')

    
    # Attribute sortType uses Python identifier sortType
    __sortType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sortType'), 'sortType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Set_sortType', ST_SortType, unicode_default=u'none')
    
    sortType = property(__sortType.value, __sortType.set, None, u'Set Sort Order')

    
    # Attribute setDefinition uses Python identifier setDefinition
    __setDefinition = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'setDefinition'), 'setDefinition', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Set_setDefinition', _s.ST_Xstring, required=True)
    
    setDefinition = property(__setDefinition.value, __setDefinition.set, None, u'MDX Set Definition')

    
    # Attribute maxRank uses Python identifier maxRank
    __maxRank = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'maxRank'), 'maxRank', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Set_maxRank', pyxb.binding.datatypes.int, required=True)
    
    maxRank = property(__maxRank.value, __maxRank.set, None, u'Maximum Rank Requested')


    _ElementMap = {
        __sortByTuple.name() : __sortByTuple,
        __tpls.name() : __tpls
    }
    _AttributeMap = {
        __count.name() : __count,
        __queryFailed.name() : __queryFailed,
        __sortType.name() : __sortType,
        __setDefinition.name() : __setDefinition,
        __maxRank.name() : __maxRank
    }
Namespace.addCategoryObject('typeBinding', u'CT_Set', CT_Set)


# Complex type CT_PivotAreas with content type ELEMENT_ONLY
class CT_PivotAreas (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_PivotAreas')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pivotArea uses Python identifier pivotArea
    __pivotArea = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pivotArea'), 'pivotArea', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreas_httpschemas_openxmlformats_orgspreadsheetml2006mainpivotArea', True)

    
    pivotArea = property(__pivotArea.value, __pivotArea.set, None, u'Pivot Area')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_PivotAreas_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Pivot Area Count')


    _ElementMap = {
        __pivotArea.name() : __pivotArea
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_PivotAreas', CT_PivotAreas)


# Complex type CT_TableColumns with content type ELEMENT_ONLY
class CT_TableColumns (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_TableColumns')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tableColumn uses Python identifier tableColumn
    __tableColumn = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tableColumn'), 'tableColumn', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumns_httpschemas_openxmlformats_orgspreadsheetml2006maintableColumn', True)

    
    tableColumn = property(__tableColumn.value, __tableColumn.set, None, u'Table Column')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_TableColumns_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Column Count')


    _ElementMap = {
        __tableColumn.name() : __tableColumn
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_TableColumns', CT_TableColumns)


# Complex type CT_CellStyles with content type ELEMENT_ONLY
class CT_CellStyles (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CellStyles')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cellStyle uses Python identifier cellStyle
    __cellStyle = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cellStyle'), 'cellStyle', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellStyles_httpschemas_openxmlformats_orgspreadsheetml2006maincellStyle', True)

    
    cellStyle = property(__cellStyle.value, __cellStyle.set, None, u'Cell Style')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CellStyles_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Style Count')


    _ElementMap = {
        __cellStyle.name() : __cellStyle
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_CellStyles', CT_CellStyles)


# Complex type CT_DataRefs with content type ELEMENT_ONLY
class CT_DataRefs (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_DataRefs')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dataRef uses Python identifier dataRef
    __dataRef = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dataRef'), 'dataRef', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataRefs_httpschemas_openxmlformats_orgspreadsheetml2006maindataRef', True)

    
    dataRef = property(__dataRef.value, __dataRef.set, None, u'Data Consolidation Reference')

    
    # Attribute count uses Python identifier count
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'count'), 'count', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_DataRefs_count', pyxb.binding.datatypes.unsignedInt)
    
    count = property(__count.value, __count.set, None, u'Data Consolidation Reference Count')


    _ElementMap = {
        __dataRef.name() : __dataRef
    }
    _AttributeMap = {
        __count.name() : __count
    }
Namespace.addCategoryObject('typeBinding', u'CT_DataRefs', CT_DataRefs)


# Complex type CT_Worksheet with content type ELEMENT_ONLY
class CT_Worksheet (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Worksheet')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}ignoredErrors uses Python identifier ignoredErrors
    __ignoredErrors = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'ignoredErrors'), 'ignoredErrors', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainignoredErrors', False)

    
    ignoredErrors = property(__ignoredErrors.value, __ignoredErrors.set, None, u'Ignored Errors')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetProtection uses Python identifier sheetProtection
    __sheetProtection = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetProtection'), 'sheetProtection', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetProtection', False)

    
    sheetProtection = property(__sheetProtection.value, __sheetProtection.set, None, u'Sheet Protection')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetData uses Python identifier sheetData
    __sheetData = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetData'), 'sheetData', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetData', False)

    
    sheetData = property(__sheetData.value, __sheetData.set, None, u'Sheet Data')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}protectedRanges uses Python identifier protectedRanges
    __protectedRanges = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'protectedRanges'), 'protectedRanges', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainprotectedRanges', False)

    
    protectedRanges = property(__protectedRanges.value, __protectedRanges.set, None, u'Protected Ranges')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}smartTags uses Python identifier smartTags
    __smartTags = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'smartTags'), 'smartTags', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsmartTags', False)

    
    smartTags = property(__smartTags.value, __smartTags.set, None, u'Smart Tags')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}scenarios uses Python identifier scenarios
    __scenarios = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'scenarios'), 'scenarios', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainscenarios', False)

    
    scenarios = property(__scenarios.value, __scenarios.set, None, u'Scenarios')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}legacyDrawing uses Python identifier legacyDrawing
    __legacyDrawing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawing'), 'legacyDrawing', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainlegacyDrawing', False)

    
    legacyDrawing = property(__legacyDrawing.value, __legacyDrawing.set, None, u'Legacy Drawing')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}autoFilter uses Python identifier autoFilter
    __autoFilter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'autoFilter'), 'autoFilter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainautoFilter', False)

    
    autoFilter = property(__autoFilter.value, __autoFilter.set, None, u'AutoFilter')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}legacyDrawingHF uses Python identifier legacyDrawingHF
    __legacyDrawingHF = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawingHF'), 'legacyDrawingHF', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainlegacyDrawingHF', False)

    
    legacyDrawingHF = property(__legacyDrawingHF.value, __legacyDrawingHF.set, None, u'Legacy Drawing Header Footer')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}drawingHF uses Python identifier drawingHF
    __drawingHF = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'drawingHF'), 'drawingHF', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006maindrawingHF', False)

    
    drawingHF = property(__drawingHF.value, __drawingHF.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dataConsolidate uses Python identifier dataConsolidate
    __dataConsolidate = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dataConsolidate'), 'dataConsolidate', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006maindataConsolidate', False)

    
    dataConsolidate = property(__dataConsolidate.value, __dataConsolidate.set, None, u'Data Consolidate')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}oleObjects uses Python identifier oleObjects
    __oleObjects = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'oleObjects'), 'oleObjects', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainoleObjects', False)

    
    oleObjects = property(__oleObjects.value, __oleObjects.set, None, None)

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}customSheetViews uses Python identifier customSheetViews
    __customSheetViews = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'customSheetViews'), 'customSheetViews', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006maincustomSheetViews', False)

    
    customSheetViews = property(__customSheetViews.value, __customSheetViews.set, None, u'Custom Sheet Views')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}controls uses Python identifier controls
    __controls = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'controls'), 'controls', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006maincontrols', False)

    
    controls = property(__controls.value, __controls.set, None, u'Embedded Controls')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetViews uses Python identifier sheetViews
    __sheetViews = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetViews'), 'sheetViews', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetViews', False)

    
    sheetViews = property(__sheetViews.value, __sheetViews.set, None, u'Sheet Views')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}mergeCells uses Python identifier mergeCells
    __mergeCells = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'mergeCells'), 'mergeCells', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainmergeCells', False)

    
    mergeCells = property(__mergeCells.value, __mergeCells.set, None, u'Merge Cells')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}webPublishItems uses Python identifier webPublishItems
    __webPublishItems = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'webPublishItems'), 'webPublishItems', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainwebPublishItems', False)

    
    webPublishItems = property(__webPublishItems.value, __webPublishItems.set, None, u'Web Publishing Items')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}phoneticPr uses Python identifier phoneticPr
    __phoneticPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'phoneticPr'), 'phoneticPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainphoneticPr', False)

    
    phoneticPr = property(__phoneticPr.value, __phoneticPr.set, None, u'Phonetic Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}tableParts uses Python identifier tableParts
    __tableParts = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'tableParts'), 'tableParts', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006maintableParts', False)

    
    tableParts = property(__tableParts.value, __tableParts.set, None, u'Table Parts')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}conditionalFormatting uses Python identifier conditionalFormatting
    __conditionalFormatting = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'conditionalFormatting'), 'conditionalFormatting', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainconditionalFormatting', True)

    
    conditionalFormatting = property(__conditionalFormatting.value, __conditionalFormatting.set, None, u'Conditional Formatting')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}extLst uses Python identifier extLst
    __extLst = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'extLst'), 'extLst', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainextLst', False)

    
    extLst = property(__extLst.value, __extLst.set, None, u'Future Feature Data Storage Area')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dataValidations uses Python identifier dataValidations
    __dataValidations = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dataValidations'), 'dataValidations', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006maindataValidations', False)

    
    dataValidations = property(__dataValidations.value, __dataValidations.set, None, u'Data Validations')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}hyperlinks uses Python identifier hyperlinks
    __hyperlinks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'hyperlinks'), 'hyperlinks', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainhyperlinks', False)

    
    hyperlinks = property(__hyperlinks.value, __hyperlinks.set, None, u'Hyperlinks')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sortState uses Python identifier sortState
    __sortState = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sortState'), 'sortState', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsortState', False)

    
    sortState = property(__sortState.value, __sortState.set, None, u'Sort State')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetFormatPr uses Python identifier sheetFormatPr
    __sheetFormatPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetFormatPr'), 'sheetFormatPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetFormatPr', False)

    
    sheetFormatPr = property(__sheetFormatPr.value, __sheetFormatPr.set, None, u'Sheet Format Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}printOptions uses Python identifier printOptions
    __printOptions = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'printOptions'), 'printOptions', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainprintOptions', False)

    
    printOptions = property(__printOptions.value, __printOptions.set, None, u'Print Options')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetCalcPr uses Python identifier sheetCalcPr
    __sheetCalcPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetCalcPr'), 'sheetCalcPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetCalcPr', False)

    
    sheetCalcPr = property(__sheetCalcPr.value, __sheetCalcPr.set, None, u'Sheet Calculation Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageMargins uses Python identifier pageMargins
    __pageMargins = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageMargins'), 'pageMargins', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainpageMargins', False)

    
    pageMargins = property(__pageMargins.value, __pageMargins.set, None, u'Page Margins')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}sheetPr uses Python identifier sheetPr
    __sheetPr = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'sheetPr'), 'sheetPr', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainsheetPr', False)

    
    sheetPr = property(__sheetPr.value, __sheetPr.set, None, u'Worksheet Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}headerFooter uses Python identifier headerFooter
    __headerFooter = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'headerFooter'), 'headerFooter', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainheaderFooter', False)

    
    headerFooter = property(__headerFooter.value, __headerFooter.set, None, u'Header and Footer Settings')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}picture uses Python identifier picture
    __picture = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'picture'), 'picture', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainpicture', False)

    
    picture = property(__picture.value, __picture.set, None, u'Background Image')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}rowBreaks uses Python identifier rowBreaks
    __rowBreaks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'rowBreaks'), 'rowBreaks', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainrowBreaks', False)

    
    rowBreaks = property(__rowBreaks.value, __rowBreaks.set, None, u'Horizontal Page Breaks')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}pageSetup uses Python identifier pageSetup
    __pageSetup = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'pageSetup'), 'pageSetup', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006mainpageSetup', False)

    
    pageSetup = property(__pageSetup.value, __pageSetup.set, None, u'Page Setup Settings')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}colBreaks uses Python identifier colBreaks
    __colBreaks = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'colBreaks'), 'colBreaks', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006maincolBreaks', False)

    
    colBreaks = property(__colBreaks.value, __colBreaks.set, None, u'Vertical Page Breaks')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'dimension'), 'dimension', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006maindimension', False)

    
    dimension = property(__dimension.value, __dimension.set, None, u'Worksheet Dimensions')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cols uses Python identifier cols
    __cols = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cols'), 'cols', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006maincols', True)

    
    cols = property(__cols.value, __cols.set, None, u'Column Information')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}drawing uses Python identifier drawing
    __drawing = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'drawing'), 'drawing', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006maindrawing', False)

    
    drawing = property(__drawing.value, __drawing.set, None, u'Drawing')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}cellWatches uses Python identifier cellWatches
    __cellWatches = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'cellWatches'), 'cellWatches', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006maincellWatches', False)

    
    cellWatches = property(__cellWatches.value, __cellWatches.set, None, u'Cell Watch Items')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}customProperties uses Python identifier customProperties
    __customProperties = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'customProperties'), 'customProperties', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Worksheet_httpschemas_openxmlformats_orgspreadsheetml2006maincustomProperties', False)

    
    customProperties = property(__customProperties.value, __customProperties.set, None, u'Custom Properties')


    _ElementMap = {
        __ignoredErrors.name() : __ignoredErrors,
        __sheetProtection.name() : __sheetProtection,
        __sheetData.name() : __sheetData,
        __protectedRanges.name() : __protectedRanges,
        __smartTags.name() : __smartTags,
        __scenarios.name() : __scenarios,
        __legacyDrawing.name() : __legacyDrawing,
        __autoFilter.name() : __autoFilter,
        __legacyDrawingHF.name() : __legacyDrawingHF,
        __drawingHF.name() : __drawingHF,
        __dataConsolidate.name() : __dataConsolidate,
        __oleObjects.name() : __oleObjects,
        __customSheetViews.name() : __customSheetViews,
        __controls.name() : __controls,
        __sheetViews.name() : __sheetViews,
        __mergeCells.name() : __mergeCells,
        __webPublishItems.name() : __webPublishItems,
        __phoneticPr.name() : __phoneticPr,
        __tableParts.name() : __tableParts,
        __conditionalFormatting.name() : __conditionalFormatting,
        __extLst.name() : __extLst,
        __dataValidations.name() : __dataValidations,
        __hyperlinks.name() : __hyperlinks,
        __sortState.name() : __sortState,
        __sheetFormatPr.name() : __sheetFormatPr,
        __printOptions.name() : __printOptions,
        __sheetCalcPr.name() : __sheetCalcPr,
        __pageMargins.name() : __pageMargins,
        __sheetPr.name() : __sheetPr,
        __headerFooter.name() : __headerFooter,
        __picture.name() : __picture,
        __rowBreaks.name() : __rowBreaks,
        __pageSetup.name() : __pageSetup,
        __colBreaks.name() : __colBreaks,
        __dimension.name() : __dimension,
        __cols.name() : __cols,
        __drawing.name() : __drawing,
        __cellWatches.name() : __cellWatches,
        __customProperties.name() : __customProperties
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Worksheet', CT_Worksheet)


# Complex type CT_Controls with content type ELEMENT_ONLY
class CT_Controls (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_Controls')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}control uses Python identifier control
    __control = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'control'), 'control', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_Controls_httpschemas_openxmlformats_orgspreadsheetml2006maincontrol', True)

    
    control = property(__control.value, __control.set, None, u'Embedded Control')


    _ElementMap = {
        __control.name() : __control
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_Controls', CT_Controls)


# Complex type CT_MapInfo with content type ELEMENT_ONLY
class CT_MapInfo (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_MapInfo')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}Map uses Python identifier Map
    __Map = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'Map'), 'Map', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MapInfo_httpschemas_openxmlformats_orgspreadsheetml2006mainMap', True)

    
    Map = property(__Map.value, __Map.set, None, u'XML Mapping Properties')

    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}Schema uses Python identifier Schema
    __Schema = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'Schema'), 'Schema', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MapInfo_httpschemas_openxmlformats_orgspreadsheetml2006mainSchema', True)

    
    Schema = property(__Schema.value, __Schema.set, None, u'XML Schema')

    
    # Attribute SelectionNamespaces uses Python identifier SelectionNamespaces
    __SelectionNamespaces = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'SelectionNamespaces'), 'SelectionNamespaces', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_MapInfo_SelectionNamespaces', pyxb.binding.datatypes.string, required=True)
    
    SelectionNamespaces = property(__SelectionNamespaces.value, __SelectionNamespaces.set, None, u'Prefix Mappings for XPath Expressions')


    _ElementMap = {
        __Map.name() : __Map,
        __Schema.name() : __Schema
    }
    _AttributeMap = {
        __SelectionNamespaces.name() : __SelectionNamespaces
    }
Namespace.addCategoryObject('typeBinding', u'CT_MapInfo', CT_MapInfo)


# Complex type CT_SmartTagTypes with content type ELEMENT_ONLY
class CT_SmartTagTypes (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_SmartTagTypes')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://schemas.openxmlformats.org/spreadsheetml/2006/main}smartTagType uses Python identifier smartTagType
    __smartTagType = pyxb.binding.content.ElementUse(pyxb.namespace.ExpandedName(Namespace, u'smartTagType'), 'smartTagType', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_SmartTagTypes_httpschemas_openxmlformats_orgspreadsheetml2006mainsmartTagType', True)

    
    smartTagType = property(__smartTagType.value, __smartTagType.set, None, u'Smart Tag Type')


    _ElementMap = {
        __smartTagType.name() : __smartTagType
    }
    _AttributeMap = {
        
    }
Namespace.addCategoryObject('typeBinding', u'CT_SmartTagTypes', CT_SmartTagTypes)


# Complex type CT_CustomProperty with content type EMPTY
class CT_CustomProperty (pyxb.binding.basis.complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CT_CustomProperty')
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute {http://schemas.openxmlformats.org/officeDocument/2006/relationships}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/officeDocument/2006/relationships'), u'id'), 'id', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomProperty_httpschemas_openxmlformats_orgofficeDocument2006relationshipsid', _r.ST_RelationshipId, required=True)
    
    id = property(__id.value, __id.set, None, u'Relationship ID')

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'name'), 'name', '__httpschemas_openxmlformats_orgspreadsheetml2006main_CT_CustomProperty_name', _s.ST_Xstring, required=True)
    
    name = property(__name.value, __name.set, None, u'Custom Property Name')


    _ElementMap = {
        
    }
    _AttributeMap = {
        __id.name() : __id,
        __name.name() : __name
    }
Namespace.addCategoryObject('typeBinding', u'CT_CustomProperty', CT_CustomProperty)


singleXmlCells = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'singleXmlCells'), CT_SingleXmlCells, documentation=u'Single Cells')
Namespace.addCategoryObject('elementBinding', singleXmlCells.name().localName(), singleXmlCells)

pivotTableDefinition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotTableDefinition'), CT_pivotTableDefinition, documentation=u'PivotTable Definition')
Namespace.addCategoryObject('elementBinding', pivotTableDefinition.name().localName(), pivotTableDefinition)

pivotCacheDefinition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotCacheDefinition'), CT_PivotCacheDefinition, documentation=u'PivotCache Definition')
Namespace.addCategoryObject('elementBinding', pivotCacheDefinition.name().localName(), pivotCacheDefinition)

volTypes = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'volTypes'), CT_VolTypes, documentation=u'Volatile Dependency Types')
Namespace.addCategoryObject('elementBinding', volTypes.name().localName(), volTypes)

table = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'table'), CT_Table, documentation=u'Table')
Namespace.addCategoryObject('elementBinding', table.name().localName(), table)

revisions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'revisions'), CT_Revisions, documentation=u'Revisions')
Namespace.addCategoryObject('elementBinding', revisions.name().localName(), revisions)

queryTable = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'queryTable'), CT_QueryTable, documentation=u'Query Table')
Namespace.addCategoryObject('elementBinding', queryTable.name().localName(), queryTable)

users = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'users'), CT_Users, documentation=u'User List')
Namespace.addCategoryObject('elementBinding', users.name().localName(), users)

sst = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sst'), CT_Sst, documentation=u'Shared String Table')
Namespace.addCategoryObject('elementBinding', sst.name().localName(), sst)

chartsheet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'chartsheet'), CT_Chartsheet, documentation=u'Chart Sheet')
Namespace.addCategoryObject('elementBinding', chartsheet.name().localName(), chartsheet)

styleSheet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'styleSheet'), CT_Stylesheet, documentation=u'Style Sheet')
Namespace.addCategoryObject('elementBinding', styleSheet.name().localName(), styleSheet)

metadata = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'metadata'), CT_Metadata, documentation=u'Metadata')
Namespace.addCategoryObject('elementBinding', metadata.name().localName(), metadata)

comments = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'comments'), CT_Comments, documentation=u'Comments')
Namespace.addCategoryObject('elementBinding', comments.name().localName(), comments)

workbook = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'workbook'), CT_Workbook, documentation=u'Workbook')
Namespace.addCategoryObject('elementBinding', workbook.name().localName(), workbook)

headers = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'headers'), CT_RevisionHeaders, documentation=u'Revision Headers')
Namespace.addCategoryObject('elementBinding', headers.name().localName(), headers)

externalLink = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalLink'), CT_ExternalLink, documentation=u'External Reference')
Namespace.addCategoryObject('elementBinding', externalLink.name().localName(), externalLink)

pivotCacheRecords = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotCacheRecords'), CT_PivotCacheRecords, documentation=u'PivotCache Records')
Namespace.addCategoryObject('elementBinding', pivotCacheRecords.name().localName(), pivotCacheRecords)

connections = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'connections'), CT_Connections, documentation=u'Connections')
Namespace.addCategoryObject('elementBinding', connections.name().localName(), connections)

calcChain = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'calcChain'), CT_CalcChain, documentation=u'Calculation Chain Info')
Namespace.addCategoryObject('elementBinding', calcChain.name().localName(), calcChain)

dialogsheet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dialogsheet'), CT_Dialogsheet, documentation=u'Dialog Sheet')
Namespace.addCategoryObject('elementBinding', dialogsheet.name().localName(), dialogsheet)

worksheet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'worksheet'), CT_Worksheet, documentation=u'Worksheet')
Namespace.addCategoryObject('elementBinding', worksheet.name().localName(), worksheet)

MapInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MapInfo'), CT_MapInfo, documentation=u'XML Mapping')
Namespace.addCategoryObject('elementBinding', MapInfo.name().localName(), MapInfo)



CT_FieldsUsage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fieldUsage'), CT_FieldUsage, scope=CT_FieldsUsage, documentation=u'PivotCache Field Id'))
CT_FieldsUsage._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FieldsUsage._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldUsage')), min_occurs=0L, max_occurs=None)
    )
CT_FieldsUsage._ContentModel = pyxb.binding.content.ParticleModel(CT_FieldsUsage._GroupModel, min_occurs=1, max_occurs=1)



CT_SingleXmlCells._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'singleXmlCell'), CT_SingleXmlCell, scope=CT_SingleXmlCells, documentation=u'Table Properties'))
CT_SingleXmlCells._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SingleXmlCells._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'singleXmlCell')), min_occurs=1, max_occurs=None)
    )
CT_SingleXmlCells._ContentModel = pyxb.binding.content.ParticleModel(CT_SingleXmlCells._GroupModel, min_occurs=1, max_occurs=1)



CT_ExtensionList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ext'), CT_Extension, scope=CT_ExtensionList, documentation=u'Extension'))
CT_ExtensionList._GroupModel_ = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ExtensionList._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ext')), min_occurs=0L, max_occurs=None)
    )
CT_ExtensionList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ExtensionList._GroupModel_, min_occurs=0L, max_occurs=1)
    )
CT_ExtensionList._ContentModel = pyxb.binding.content.ParticleModel(CT_ExtensionList._GroupModel, min_occurs=1, max_occurs=1)



CT_HeaderFooter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'evenHeader'), _s.ST_Xstring, scope=CT_HeaderFooter, documentation=u'Even Page Header'))

CT_HeaderFooter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'oddFooter'), _s.ST_Xstring, scope=CT_HeaderFooter, documentation=u'Odd Page Footer'))

CT_HeaderFooter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'firstHeader'), _s.ST_Xstring, scope=CT_HeaderFooter, documentation=u'First Page Header'))

CT_HeaderFooter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'evenFooter'), _s.ST_Xstring, scope=CT_HeaderFooter, documentation=u'Even Page Footer'))

CT_HeaderFooter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'firstFooter'), _s.ST_Xstring, scope=CT_HeaderFooter, documentation=u'First Page Footer'))

CT_HeaderFooter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'oddHeader'), _s.ST_Xstring, scope=CT_HeaderFooter, documentation=u'Odd Header'))
CT_HeaderFooter._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_HeaderFooter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'oddHeader')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HeaderFooter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'oddFooter')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HeaderFooter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'evenHeader')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HeaderFooter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'evenFooter')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HeaderFooter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'firstHeader')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_HeaderFooter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'firstFooter')), min_occurs=0L, max_occurs=1L)
    )
CT_HeaderFooter._ContentModel = pyxb.binding.content.ParticleModel(CT_HeaderFooter._GroupModel, min_occurs=1, max_occurs=1)



CT_PCDKPIs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'kpi'), CT_PCDKPI, scope=CT_PCDKPIs, documentation=u'OLAP KPI'))
CT_PCDKPIs._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PCDKPIs._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kpi')), min_occurs=0L, max_occurs=None)
    )
CT_PCDKPIs._ContentModel = pyxb.binding.content.ParticleModel(CT_PCDKPIs._GroupModel, min_occurs=1, max_occurs=1)



CT_ExternalRow._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cell'), CT_ExternalCell, scope=CT_ExternalRow, documentation=u'External Cell Data'))
CT_ExternalRow._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ExternalRow._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cell')), min_occurs=0L, max_occurs=None)
    )
CT_ExternalRow._ContentModel = pyxb.binding.content.ParticleModel(CT_ExternalRow._GroupModel, min_occurs=1, max_occurs=1)



CT_MergeCells._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'mergeCell'), CT_MergeCell, scope=CT_MergeCells, documentation=u'Merged Cell'))
CT_MergeCells._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MergeCells._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'mergeCell')), min_occurs=1L, max_occurs=None)
    )
CT_MergeCells._ContentModel = pyxb.binding.content.ParticleModel(CT_MergeCells._GroupModel, min_occurs=1, max_occurs=1)



CT_Missing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'x'), CT_X, scope=CT_Missing, documentation=u'Member Property Indexes'))

CT_Missing._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tpls'), CT_Tuples, scope=CT_Missing, documentation=u'Tuples'))
CT_Missing._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Missing._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tpls')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Missing._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'x')), min_occurs=0L, max_occurs=None)
    )
CT_Missing._ContentModel = pyxb.binding.content.ParticleModel(CT_Missing._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomSheetViews._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customSheetView'), CT_CustomSheetView, scope=CT_CustomSheetViews, documentation=u'Custom Sheet View'))
CT_CustomSheetViews._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomSheetViews._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customSheetView')), min_occurs=1L, max_occurs=None)
    )
CT_CustomSheetViews._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomSheetViews._GroupModel, min_occurs=1, max_occurs=1)



CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rowFields'), CT_RowFields, scope=CT_pivotTableDefinition, documentation=u'Row Fields'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rowHierarchiesUsage'), CT_RowHierarchiesUsage, scope=CT_pivotTableDefinition, documentation=u'Row OLAP Hierarchy References'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataFields'), CT_DataFields, scope=CT_pivotTableDefinition, documentation=u'Data Fields'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotTableStyleInfo'), CT_PivotTableStyle, scope=CT_pivotTableDefinition, documentation=u'PivotTable Style'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'filters'), CT_PivotFilters, scope=CT_pivotTableDefinition, documentation=u'Filters'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rowItems'), CT_rowItems, scope=CT_pivotTableDefinition, documentation=u'Row Items'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'formats'), CT_Formats, scope=CT_pivotTableDefinition, documentation=u'PivotTable Formats'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageFields'), CT_PageFields, scope=CT_pivotTableDefinition, documentation=u'Page Field Items'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotFields'), CT_PivotFields, scope=CT_pivotTableDefinition, documentation=u'PivotTable Fields'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'conditionalFormats'), CT_ConditionalFormats, scope=CT_pivotTableDefinition, documentation=u'Conditional Formats'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colHierarchiesUsage'), CT_ColHierarchiesUsage, scope=CT_pivotTableDefinition, documentation=u'Column OLAP Hierarchy References'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'chartFormats'), CT_ChartFormats, scope=CT_pivotTableDefinition, documentation=u'PivotChart Formats'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'location'), CT_Location, scope=CT_pivotTableDefinition, documentation=u'PivotTable Location'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colItems'), CT_colItems, scope=CT_pivotTableDefinition, documentation=u'Column Items'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_pivotTableDefinition, documentation=u'Future Feature Data Storage Area'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colFields'), CT_ColFields, scope=CT_pivotTableDefinition, documentation=u'Column Fields'))

CT_pivotTableDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotHierarchies'), CT_PivotHierarchies, scope=CT_pivotTableDefinition, documentation=u'PivotTable OLAP Hierarchies'))
CT_pivotTableDefinition._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'location')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pivotFields')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rowFields')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rowItems')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'colFields')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'colItems')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageFields')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataFields')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'formats')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'conditionalFormats')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'chartFormats')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pivotHierarchies')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pivotTableStyleInfo')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'filters')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rowHierarchiesUsage')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'colHierarchiesUsage')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_pivotTableDefinition._ContentModel = pyxb.binding.content.ParticleModel(CT_pivotTableDefinition._GroupModel, min_occurs=1, max_occurs=1)



CT_DdeItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ddeItem'), CT_DdeItem, scope=CT_DdeItems, documentation=u'DDE Item definition'))
CT_DdeItems._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DdeItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ddeItem')), min_occurs=0L, max_occurs=None)
    )
CT_DdeItems._ContentModel = pyxb.binding.content.ParticleModel(CT_DdeItems._GroupModel, min_occurs=1, max_occurs=1)



CT_Dxf._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alignment'), CT_CellAlignment, scope=CT_Dxf, documentation=u'Alignment'))

CT_Dxf._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'numFmt'), CT_NumFmt, scope=CT_Dxf, documentation=u'Number Format'))

CT_Dxf._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'border'), CT_Border, scope=CT_Dxf, documentation=u'Border Properties'))

CT_Dxf._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'font'), CT_Font, scope=CT_Dxf, documentation=u'Font Properties'))

CT_Dxf._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Dxf, documentation=u'Future Feature Data Storage Area'))

CT_Dxf._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fill'), CT_Fill, scope=CT_Dxf, documentation=u'Fill'))

CT_Dxf._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'protection'), CT_CellProtection, scope=CT_Dxf, documentation=u'Protection Properties'))
CT_Dxf._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Dxf._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'font')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Dxf._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'numFmt')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Dxf._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fill')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Dxf._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alignment')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Dxf._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'border')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Dxf._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'protection')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Dxf._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Dxf._ContentModel = pyxb.binding.content.ParticleModel(CT_Dxf._GroupModel, min_occurs=1, max_occurs=1)



CT_DataBar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'color'), CT_Color, scope=CT_DataBar, documentation=u'Data Bar Color'))

CT_DataBar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cfvo'), CT_Cfvo, scope=CT_DataBar, documentation=u'Conditional Format Value Object'))
CT_DataBar._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DataBar._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cfvo')), min_occurs=2L, max_occurs=2L),
    pyxb.binding.content.ParticleModel(CT_DataBar._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'color')), min_occurs=1L, max_occurs=1L)
    )
CT_DataBar._ContentModel = pyxb.binding.content.ParticleModel(CT_DataBar._GroupModel, min_occurs=1, max_occurs=1)



CT_PivotCacheDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_PivotCacheDefinition, documentation=u'Future Feature Data Storage Area'))

CT_PivotCacheDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'calculatedItems'), CT_CalculatedItems, scope=CT_PivotCacheDefinition, documentation=u'Calculated Items'))

CT_PivotCacheDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cacheSource'), CT_CacheSource, scope=CT_PivotCacheDefinition, documentation=u'PivotCache Source Description'))

CT_PivotCacheDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'calculatedMembers'), CT_CalculatedMembers, scope=CT_PivotCacheDefinition, documentation=u'Calculated Members'))

CT_PivotCacheDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cacheFields'), CT_CacheFields, scope=CT_PivotCacheDefinition, documentation=u'PivotCache Fields'))

CT_PivotCacheDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tupleCache'), CT_TupleCache, scope=CT_PivotCacheDefinition, documentation=u'Tuple Cache'))

CT_PivotCacheDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dimensions'), CT_Dimensions, scope=CT_PivotCacheDefinition, documentation=u'OLAP Dimensions'))

CT_PivotCacheDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cacheHierarchies'), CT_CacheHierarchies, scope=CT_PivotCacheDefinition, documentation=u'PivotCache Hierarchies'))

CT_PivotCacheDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'measureGroups'), CT_MeasureGroups, scope=CT_PivotCacheDefinition, documentation=u'OLAP Measure Groups'))

CT_PivotCacheDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'kpis'), CT_PCDKPIs, scope=CT_PivotCacheDefinition, documentation=u'OLAP KPIs'))

CT_PivotCacheDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'maps'), CT_MeasureDimensionMaps, scope=CT_PivotCacheDefinition, documentation=u'OLAP Measure Group'))
CT_PivotCacheDefinition._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PivotCacheDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cacheSource')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PivotCacheDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cacheFields')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PivotCacheDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cacheHierarchies')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PivotCacheDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'kpis')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PivotCacheDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tupleCache')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PivotCacheDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'calculatedItems')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PivotCacheDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'calculatedMembers')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PivotCacheDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dimensions')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PivotCacheDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'measureGroups')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PivotCacheDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'maps')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PivotCacheDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_PivotCacheDefinition._ContentModel = pyxb.binding.content.ParticleModel(CT_PivotCacheDefinition._GroupModel, min_occurs=1, max_occurs=1)



CT_SheetData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'row'), CT_Row, scope=CT_SheetData, documentation=u'Row'))
CT_SheetData._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SheetData._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'row')), min_occurs=0L, max_occurs=None)
    )
CT_SheetData._ContentModel = pyxb.binding.content.ParticleModel(CT_SheetData._GroupModel, min_occurs=1, max_occurs=1)



CT_VolMain._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tp'), CT_VolTopic, scope=CT_VolMain, documentation=u'Topic'))
CT_VolMain._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_VolMain._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tp')), min_occurs=1L, max_occurs=None)
    )
CT_VolMain._ContentModel = pyxb.binding.content.ParticleModel(CT_VolMain._GroupModel, min_occurs=1, max_occurs=1)



CT_PivotAreaReferences._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reference'), CT_PivotAreaReference, scope=CT_PivotAreaReferences, documentation=u'Reference'))
CT_PivotAreaReferences._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PivotAreaReferences._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reference')), min_occurs=1, max_occurs=None)
    )
CT_PivotAreaReferences._ContentModel = pyxb.binding.content.ParticleModel(CT_PivotAreaReferences._GroupModel, min_occurs=1, max_occurs=1)



CT_RevisionSheetRename._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_RevisionSheetRename))
CT_RevisionSheetRename._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RevisionSheetRename._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_RevisionSheetRename._ContentModel = pyxb.binding.content.ParticleModel(CT_RevisionSheetRename._GroupModel, min_occurs=1, max_occurs=1)



CT_CacheField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_CacheField, documentation=u'Future Feature Data Storage Area'))

CT_CacheField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sharedItems'), CT_SharedItems, scope=CT_CacheField, documentation=u'Shared Items'))

CT_CacheField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'mpMap'), CT_X, scope=CT_CacheField, documentation=u'Member Properties Map'))

CT_CacheField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fieldGroup'), CT_FieldGroup, scope=CT_CacheField, documentation=u'Field Group Properties'))
CT_CacheField._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CacheField._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sharedItems')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CacheField._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldGroup')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CacheField._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'mpMap')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CacheField._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_CacheField._ContentModel = pyxb.binding.content.ParticleModel(CT_CacheField._GroupModel, min_occurs=1, max_occurs=1)



CT_Tables._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'x'), CT_Index, scope=CT_Tables, documentation=u'Index'))

CT_Tables._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u's'), CT_XStringElement, scope=CT_Tables, documentation=u'Character Value'))

CT_Tables._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'm'), CT_TableMissing, scope=CT_Tables, documentation=u'No Value'))
CT_Tables._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Tables._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'm')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tables._UseForTag(pyxb.namespace.ExpandedName(Namespace, u's')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Tables._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'x')), min_occurs=1, max_occurs=1)
    )
CT_Tables._ContentModel = pyxb.binding.content.ParticleModel(CT_Tables._GroupModel, min_occurs=1L, max_occurs=None)



CT_ColFields._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'field'), CT_Field, scope=CT_ColFields, documentation=u'Field'))
CT_ColFields._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColFields._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'field')), min_occurs=1, max_occurs=None)
    )
CT_ColFields._ContentModel = pyxb.binding.content.ParticleModel(CT_ColFields._GroupModel, min_occurs=1, max_occurs=1)



CT_VolTypes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_VolTypes))

CT_VolTypes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'volType'), CT_VolType, scope=CT_VolTypes, documentation=u'Volatile Dependency Type'))
CT_VolTypes._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_VolTypes._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'volType')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_VolTypes._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_VolTypes._ContentModel = pyxb.binding.content.ParticleModel(CT_VolTypes._GroupModel, min_occurs=1, max_occurs=1)



CT_GradientFill._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'stop'), CT_GradientStop, scope=CT_GradientFill, documentation=u'Gradient Stop'))
CT_GradientFill._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GradientFill._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'stop')), min_occurs=0L, max_occurs=None)
    )
CT_GradientFill._ContentModel = pyxb.binding.content.ParticleModel(CT_GradientFill._GroupModel, min_occurs=1, max_occurs=1)



CT_ExternalReferences._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalReference'), CT_ExternalReference, scope=CT_ExternalReferences, documentation=u'External Reference'))
CT_ExternalReferences._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ExternalReferences._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalReference')), min_occurs=1L, max_occurs=None)
    )
CT_ExternalReferences._ContentModel = pyxb.binding.content.ParticleModel(CT_ExternalReferences._GroupModel, min_occurs=1, max_occurs=1)



CT_Tuples._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tpl'), CT_Tuple, scope=CT_Tuples, documentation=u'Tuple'))
CT_Tuples._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Tuples._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tpl')), min_occurs=1L, max_occurs=None)
    )
CT_Tuples._ContentModel = pyxb.binding.content.ParticleModel(CT_Tuples._GroupModel, min_occurs=1, max_occurs=1)


CT_Extension._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), min_occurs=1, max_occurs=1)
    )
CT_Extension._ContentModel = pyxb.binding.content.ParticleModel(CT_Extension._GroupModel, min_occurs=1, max_occurs=1)



CT_TupleCache._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_TupleCache, documentation=u'Future Feature Data Storage Area'))

CT_TupleCache._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'entries'), CT_PCDSDTCEntries, scope=CT_TupleCache, documentation=u'Entries'))

CT_TupleCache._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'serverFormats'), CT_ServerFormats, scope=CT_TupleCache, documentation=u'Server Formats'))

CT_TupleCache._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'queryCache'), CT_QueryCache, scope=CT_TupleCache, documentation=u'OLAP Query Cache'))

CT_TupleCache._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sets'), CT_Sets, scope=CT_TupleCache, documentation=u'Sets'))
CT_TupleCache._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TupleCache._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'entries')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TupleCache._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sets')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TupleCache._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'queryCache')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_TupleCache._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'serverFormats')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TupleCache._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_TupleCache._ContentModel = pyxb.binding.content.ParticleModel(CT_TupleCache._GroupModel, min_occurs=1, max_occurs=1)



CT_ConditionalFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_ConditionalFormatting))

CT_ConditionalFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cfRule'), CT_CfRule, scope=CT_ConditionalFormatting, documentation=u'Conditional Formatting Rule'))
CT_ConditionalFormatting._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ConditionalFormatting._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cfRule')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_ConditionalFormatting._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_ConditionalFormatting._ContentModel = pyxb.binding.content.ParticleModel(CT_ConditionalFormatting._GroupModel, min_occurs=1, max_occurs=1)



CT_SortState._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_SortState))

CT_SortState._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sortCondition'), CT_SortCondition, scope=CT_SortState, documentation=u'Sort Condition'))
CT_SortState._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SortState._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sortCondition')), min_occurs=0L, max_occurs=64L),
    pyxb.binding.content.ParticleModel(CT_SortState._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_SortState._ContentModel = pyxb.binding.content.ParticleModel(CT_SortState._GroupModel, min_occurs=1, max_occurs=1)


CT_Schema._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_strict, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), min_occurs=1, max_occurs=1)
    )
CT_Schema._ContentModel = pyxb.binding.content.ParticleModel(CT_Schema._GroupModel, min_occurs=1, max_occurs=1)



CT_Border._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bottom'), CT_BorderPr, scope=CT_Border, documentation=u'Bottom Border'))

CT_Border._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'top'), CT_BorderPr, scope=CT_Border, documentation=u'Top Border'))

CT_Border._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'start'), CT_BorderPr, scope=CT_Border, documentation=u'Leading Edge Border'))

CT_Border._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'right'), CT_BorderPr, scope=CT_Border, documentation=u'Trailing Edge Border'))

CT_Border._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'diagonal'), CT_BorderPr, scope=CT_Border, documentation=u'Diagonal'))

CT_Border._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'end'), CT_BorderPr, scope=CT_Border, documentation=u'Trailing Edge Border'))

CT_Border._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'vertical'), CT_BorderPr, scope=CT_Border, documentation=u'Vertical Inner Border'))

CT_Border._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'left'), CT_BorderPr, scope=CT_Border, documentation=u'Leading Edge Border'))

CT_Border._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'horizontal'), CT_BorderPr, scope=CT_Border, documentation=u'Horizontal Inner Borders'))
CT_Border._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Border._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'start')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Border._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'end')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Border._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'left')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Border._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'right')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Border._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'top')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Border._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bottom')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Border._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'diagonal')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Border._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'vertical')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Border._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'horizontal')), min_occurs=0L, max_occurs=1L)
    )
CT_Border._ContentModel = pyxb.binding.content.ParticleModel(CT_Border._GroupModel, min_occurs=1, max_occurs=1)



CT_ControlPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'anchor'), CT_ObjectAnchor, scope=CT_ControlPr, documentation=u'Object Cell Anchor'))
CT_ControlPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ControlPr._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'anchor')), min_occurs=1L, max_occurs=1L)
    )
CT_ControlPr._ContentModel = pyxb.binding.content.ParticleModel(CT_ControlPr._GroupModel, min_occurs=1, max_occurs=1)



CT_Filters._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dateGroupItem'), CT_DateGroupItem, scope=CT_Filters, documentation=u'Date Grouping'))

CT_Filters._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'filter'), CT_Filter, scope=CT_Filters, documentation=u'Filter'))
CT_Filters._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Filters._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'filter')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Filters._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dateGroupItem')), min_occurs=0L, max_occurs=None)
    )
CT_Filters._ContentModel = pyxb.binding.content.ParticleModel(CT_Filters._GroupModel, min_occurs=1, max_occurs=1)



CT_PageBreak._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'brk'), CT_Break, scope=CT_PageBreak, documentation=u'Break'))
CT_PageBreak._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PageBreak._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'brk')), min_occurs=0L, max_occurs=None)
    )
CT_PageBreak._ContentModel = pyxb.binding.content.ParticleModel(CT_PageBreak._GroupModel, min_occurs=1, max_occurs=1)



CT_String._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'x'), CT_X, scope=CT_String, documentation=u'Member Property Index'))

CT_String._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tpls'), CT_Tuples, scope=CT_String, documentation=u'Tuples'))
CT_String._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_String._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tpls')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_String._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'x')), min_occurs=0L, max_occurs=None)
    )
CT_String._ContentModel = pyxb.binding.content.ParticleModel(CT_String._GroupModel, min_occurs=1, max_occurs=1)



CT_Cell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Cell, documentation=u'Future Feature Data Storage Area'))

CT_Cell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'f'), CT_CellFormula, scope=CT_Cell, documentation=u'Formula'))

CT_Cell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'v'), _s.ST_Xstring, scope=CT_Cell, documentation=u'Cell Value'))

CT_Cell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'is'), CT_Rst, scope=CT_Cell, documentation=u'Rich Text Inline'))
CT_Cell._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Cell._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'f')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Cell._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'v')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Cell._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'is')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Cell._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_Cell._ContentModel = pyxb.binding.content.ParticleModel(CT_Cell._GroupModel, min_occurs=1, max_occurs=1)



CT_SheetViews._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_SheetViews, documentation=u'Future Feature Data Storage Area'))

CT_SheetViews._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetView'), CT_SheetView, scope=CT_SheetViews, documentation=u'Worksheet View'))
CT_SheetViews._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SheetViews._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetView')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_SheetViews._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_SheetViews._ContentModel = pyxb.binding.content.ParticleModel(CT_SheetViews._GroupModel, min_occurs=1, max_occurs=1)



CT_CalculatedMembers._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'calculatedMember'), CT_CalculatedMember, scope=CT_CalculatedMembers, documentation=u'Calculated Member'))
CT_CalculatedMembers._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CalculatedMembers._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'calculatedMember')), min_occurs=1, max_occurs=None)
    )
CT_CalculatedMembers._ContentModel = pyxb.binding.content.ParticleModel(CT_CalculatedMembers._GroupModel, min_occurs=1, max_occurs=1)



CT_ExternalCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'v'), _s.ST_Xstring, scope=CT_ExternalCell, documentation=u'Value'))
CT_ExternalCell._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ExternalCell._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'v')), min_occurs=0L, max_occurs=1L)
    )
CT_ExternalCell._ContentModel = pyxb.binding.content.ParticleModel(CT_ExternalCell._GroupModel, min_occurs=1, max_occurs=1)



CT_Error._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'x'), CT_X, scope=CT_Error, documentation=u'Member Property Indexes'))

CT_Error._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tpls'), CT_Tuples, scope=CT_Error, documentation=u'Tuples'))
CT_Error._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Error._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tpls')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Error._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'x')), min_occurs=0L, max_occurs=None)
    )
CT_Error._ContentModel = pyxb.binding.content.ParticleModel(CT_Error._GroupModel, min_occurs=1, max_occurs=1)



CT_Rst._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'phoneticPr'), CT_PhoneticPr, scope=CT_Rst, documentation=u'Phonetic Properties'))

CT_Rst._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u't'), _s.ST_Xstring, scope=CT_Rst, documentation=u'Text'))

CT_Rst._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'r'), CT_RElt, scope=CT_Rst, documentation=u'Rich Text Run'))

CT_Rst._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rPh'), CT_PhoneticRun, scope=CT_Rst, documentation=u'Phonetic Run'))
CT_Rst._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Rst._UseForTag(pyxb.namespace.ExpandedName(Namespace, u't')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Rst._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'r')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Rst._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rPh')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Rst._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'phoneticPr')), min_occurs=0L, max_occurs=1L)
    )
CT_Rst._ContentModel = pyxb.binding.content.ParticleModel(CT_Rst._GroupModel, min_occurs=1, max_occurs=1)



CT_CacheHierarchies._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cacheHierarchy'), CT_CacheHierarchy, scope=CT_CacheHierarchies, documentation=u'PivotCache Hierarchy'))
CT_CacheHierarchies._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CacheHierarchies._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cacheHierarchy')), min_occurs=0L, max_occurs=None)
    )
CT_CacheHierarchies._ContentModel = pyxb.binding.content.ParticleModel(CT_CacheHierarchies._GroupModel, min_occurs=1, max_occurs=1)



CT_DiscretePr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'x'), CT_Index, scope=CT_DiscretePr, documentation=u'Element Group'))
CT_DiscretePr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DiscretePr._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'x')), min_occurs=1, max_occurs=None)
    )
CT_DiscretePr._ContentModel = pyxb.binding.content.ParticleModel(CT_DiscretePr._GroupModel, min_occurs=1, max_occurs=1)



CT_Scenario._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'inputCells'), CT_InputCells, scope=CT_Scenario, documentation=u'Input Cells'))
CT_Scenario._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Scenario._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'inputCells')), min_occurs=1L, max_occurs=None)
    )
CT_Scenario._ContentModel = pyxb.binding.content.ParticleModel(CT_Scenario._GroupModel, min_occurs=1, max_occurs=1)



CT_DdeLink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ddeItems'), CT_DdeItems, scope=CT_DdeLink, documentation=u'DDE Items Collection'))
CT_DdeLink._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DdeLink._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ddeItems')), min_occurs=0L, max_occurs=1L)
    )
CT_DdeLink._ContentModel = pyxb.binding.content.ParticleModel(CT_DdeLink._GroupModel, min_occurs=1, max_occurs=1)



CT_Format._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Format, documentation=u'Future Feature Data Storage Area'))

CT_Format._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotArea'), CT_PivotArea, scope=CT_Format, documentation=u'Pivot Table Location'))
CT_Format._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Format._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pivotArea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Format._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_Format._ContentModel = pyxb.binding.content.ParticleModel(CT_Format._GroupModel, min_occurs=1, max_occurs=1)



CT_MeasureGroups._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'measureGroup'), CT_MeasureGroup, scope=CT_MeasureGroups, documentation=u'OLAP Measure Group'))
CT_MeasureGroups._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MeasureGroups._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'measureGroup')), min_occurs=0L, max_occurs=None)
    )
CT_MeasureGroups._ContentModel = pyxb.binding.content.ParticleModel(CT_MeasureGroups._GroupModel, min_occurs=1, max_occurs=1)



CT_VolTopic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tr'), CT_VolTopicRef, scope=CT_VolTopic, documentation=u'References'))

CT_VolTopic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'v'), _s.ST_Xstring, scope=CT_VolTopic, documentation=u'Topic Value'))

CT_VolTopic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'stp'), _s.ST_Xstring, scope=CT_VolTopic, documentation=u'Strings in Subtopic'))
CT_VolTopic._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_VolTopic._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'v')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_VolTopic._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'stp')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_VolTopic._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tr')), min_occurs=1L, max_occurs=None)
    )
CT_VolTopic._ContentModel = pyxb.binding.content.ParticleModel(CT_VolTopic._GroupModel, min_occurs=1, max_occurs=1)



CT_RevisionFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_RevisionFormatting))

CT_RevisionFormatting._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dxf'), CT_Dxf, scope=CT_RevisionFormatting, documentation=u'Formatting'))
CT_RevisionFormatting._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RevisionFormatting._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dxf')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RevisionFormatting._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_RevisionFormatting._ContentModel = pyxb.binding.content.ParticleModel(CT_RevisionFormatting._GroupModel, min_occurs=1, max_occurs=1)



CT_MetadataStrings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u's'), CT_XStringElement, scope=CT_MetadataStrings, documentation=u'MDX Metadata String'))
CT_MetadataStrings._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MetadataStrings._UseForTag(pyxb.namespace.ExpandedName(Namespace, u's')), min_occurs=1L, max_occurs=None)
    )
CT_MetadataStrings._ContentModel = pyxb.binding.content.ParticleModel(CT_MetadataStrings._GroupModel, min_occurs=1, max_occurs=1)



CT_DataFields._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataField'), CT_DataField, scope=CT_DataFields, documentation=u'Data Field Item'))
CT_DataFields._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DataFields._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataField')), min_occurs=1, max_occurs=None)
    )
CT_DataFields._ContentModel = pyxb.binding.content.ParticleModel(CT_DataFields._GroupModel, min_occurs=1, max_occurs=1)



CT_ProtectedRange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'securityDescriptor'), pyxb.binding.datatypes.string, scope=CT_ProtectedRange, documentation=u'Security Descriptor'))
CT_ProtectedRange._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ProtectedRange._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'securityDescriptor')), min_occurs=0L, max_occurs=None)
    )
CT_ProtectedRange._ContentModel = pyxb.binding.content.ParticleModel(CT_ProtectedRange._GroupModel, min_occurs=1, max_occurs=1)



CT_OleObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'objectPr'), CT_ObjectPr, scope=CT_OleObject, documentation=u'Embedded Object Properties'))
CT_OleObject._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OleObject._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'objectPr')), min_occurs=0L, max_occurs=1L)
    )
CT_OleObject._ContentModel = pyxb.binding.content.ParticleModel(CT_OleObject._GroupModel, min_occurs=1, max_occurs=1)



CT_QueryTableField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_QueryTableField, documentation=u'Future Feature Data Storage Area'))
CT_QueryTableField._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_QueryTableField._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_QueryTableField._ContentModel = pyxb.binding.content.ParticleModel(CT_QueryTableField._GroupModel, min_occurs=0L, max_occurs=1)



CT_Query._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tpls'), CT_Tuples, scope=CT_Query, documentation=u'Tuples'))
CT_Query._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Query._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tpls')), min_occurs=0L, max_occurs=1)
    )
CT_Query._ContentModel = pyxb.binding.content.ParticleModel(CT_Query._GroupModel, min_occurs=1, max_occurs=1)



CT_ChartsheetViews._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_ChartsheetViews))

CT_ChartsheetViews._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetView'), CT_ChartsheetView, scope=CT_ChartsheetViews, documentation=u'Chart Sheet View'))
CT_ChartsheetViews._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ChartsheetViews._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetView')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_ChartsheetViews._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ChartsheetViews._ContentModel = pyxb.binding.content.ParticleModel(CT_ChartsheetViews._GroupModel, min_occurs=1, max_occurs=1)



CT_Colors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'mruColors'), CT_MRUColors, scope=CT_Colors, documentation=u'MRU Colors'))

CT_Colors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'indexedColors'), CT_IndexedColors, scope=CT_Colors, documentation=u'Color Indexes'))
CT_Colors._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Colors._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'indexedColors')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Colors._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'mruColors')), min_occurs=0L, max_occurs=1L)
    )
CT_Colors._ContentModel = pyxb.binding.content.ParticleModel(CT_Colors._GroupModel, min_occurs=1, max_occurs=1)



CT_Hyperlinks._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'hyperlink'), CT_Hyperlink, scope=CT_Hyperlinks, documentation=u'Hyperlink'))
CT_Hyperlinks._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Hyperlinks._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hyperlink')), min_occurs=1L, max_occurs=None)
    )
CT_Hyperlinks._ContentModel = pyxb.binding.content.ParticleModel(CT_Hyperlinks._GroupModel, min_occurs=1, max_occurs=1)



CT_VolType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'main'), CT_VolMain, scope=CT_VolType, documentation=u'Main'))
CT_VolType._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_VolType._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'main')), min_occurs=1L, max_occurs=None)
    )
CT_VolType._ContentModel = pyxb.binding.content.ParticleModel(CT_VolType._GroupModel, min_occurs=1, max_occurs=1)



CT_Formats._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'format'), CT_Format, scope=CT_Formats, documentation=u'PivotTable Format'))
CT_Formats._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Formats._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'format')), min_occurs=1, max_occurs=None)
    )
CT_Formats._ContentModel = pyxb.binding.content.ParticleModel(CT_Formats._GroupModel, min_occurs=1, max_occurs=1)



CT_CellSmartTag._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cellSmartTagPr'), CT_CellSmartTagPr, scope=CT_CellSmartTag, documentation=u'Smart Tag Properties'))
CT_CellSmartTag._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CellSmartTag._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cellSmartTagPr')), min_occurs=0L, max_occurs=None)
    )
CT_CellSmartTag._ContentModel = pyxb.binding.content.ParticleModel(CT_CellSmartTag._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customPr'), CT_CustomProperty, scope=CT_CustomProperties, documentation=u'Custom Property'))
CT_CustomProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomProperties._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customPr')), min_occurs=1L, max_occurs=None)
    )
CT_CustomProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_DdeValue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'val'), _s.ST_Xstring, scope=CT_DdeValue, documentation=u'DDE Link Value'))
CT_DdeValue._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DdeValue._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'val')), min_occurs=1L, max_occurs=1L)
    )
CT_DdeValue._ContentModel = pyxb.binding.content.ParticleModel(CT_DdeValue._GroupModel, min_occurs=1, max_occurs=1)



CT_RevisionCellChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_RevisionCellChange))

CT_RevisionCellChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'oc'), CT_Cell, scope=CT_RevisionCellChange, documentation=u'Old Cell Data'))

CT_RevisionCellChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'odxf'), CT_Dxf, scope=CT_RevisionCellChange, documentation=u'Old Formatting Information'))

CT_RevisionCellChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'nc'), CT_Cell, scope=CT_RevisionCellChange, documentation=u'New Cell Data'))

CT_RevisionCellChange._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ndxf'), CT_Dxf, scope=CT_RevisionCellChange, documentation=u'New Formatting Information'))
CT_RevisionCellChange._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RevisionCellChange._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'oc')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RevisionCellChange._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'nc')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RevisionCellChange._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'odxf')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RevisionCellChange._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ndxf')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RevisionCellChange._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_RevisionCellChange._ContentModel = pyxb.binding.content.ParticleModel(CT_RevisionCellChange._GroupModel, min_occurs=1, max_occurs=1)



CT_MeasureDimensionMaps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'map'), CT_MeasureDimensionMap, scope=CT_MeasureDimensionMaps, documentation=u'OLAP Measure Group'))
CT_MeasureDimensionMaps._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MeasureDimensionMaps._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'map')), min_occurs=0L, max_occurs=None)
    )
CT_MeasureDimensionMaps._ContentModel = pyxb.binding.content.ParticleModel(CT_MeasureDimensionMaps._GroupModel, min_occurs=1, max_occurs=1)



CT_Table._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Table, documentation=u'Future Feature Data Storage Area'))

CT_Table._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'autoFilter'), CT_AutoFilter, scope=CT_Table, documentation=u'Table AutoFilter'))

CT_Table._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tableStyleInfo'), CT_TableStyleInfo, scope=CT_Table, documentation=u'Table Style'))

CT_Table._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sortState'), CT_SortState, scope=CT_Table, documentation=u'Sort State'))

CT_Table._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tableColumns'), CT_TableColumns, scope=CT_Table, documentation=u'Table Columns'))
CT_Table._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Table._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'autoFilter')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Table._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sortState')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Table._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tableColumns')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Table._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tableStyleInfo')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Table._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Table._ContentModel = pyxb.binding.content.ParticleModel(CT_Table._GroupModel, min_occurs=1, max_occurs=1)



CT_BorderPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'color'), CT_Color, scope=CT_BorderPr, documentation=u'Color'))
CT_BorderPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BorderPr._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'color')), min_occurs=0L, max_occurs=1L)
    )
CT_BorderPr._ContentModel = pyxb.binding.content.ParticleModel(CT_BorderPr._GroupModel, min_occurs=1, max_occurs=1)



CT_SheetIdMap._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetId'), CT_SheetId, scope=CT_SheetIdMap, documentation=u'Sheet Id'))
CT_SheetIdMap._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SheetIdMap._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetId')), min_occurs=1L, max_occurs=None)
    )
CT_SheetIdMap._ContentModel = pyxb.binding.content.ParticleModel(CT_SheetIdMap._GroupModel, min_occurs=1, max_occurs=1)



CT_BookView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_BookView))
CT_BookView._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BookView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_BookView._ContentModel = pyxb.binding.content.ParticleModel(CT_BookView._GroupModel, min_occurs=1, max_occurs=1)



CT_RPrElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'vertAlign'), CT_VerticalAlignFontProperty, scope=CT_RPrElt, documentation=u'Vertical Alignment'))

CT_RPrElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'b'), CT_BooleanProperty, scope=CT_RPrElt, documentation=u'Bold'))

CT_RPrElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sz'), CT_FontSize, scope=CT_RPrElt, documentation=u'Font Size'))

CT_RPrElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'scheme'), CT_FontScheme, scope=CT_RPrElt, documentation=u'Font Scheme'))

CT_RPrElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'i'), CT_BooleanProperty, scope=CT_RPrElt, documentation=u'Italic'))

CT_RPrElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extend'), CT_BooleanProperty, scope=CT_RPrElt, documentation=u'Extend'))

CT_RPrElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shadow'), CT_BooleanProperty, scope=CT_RPrElt, documentation=u'Shadow'))

CT_RPrElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'color'), CT_Color, scope=CT_RPrElt, documentation=u'Text Color'))

CT_RPrElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'condense'), CT_BooleanProperty, scope=CT_RPrElt, documentation=u'Condense'))

CT_RPrElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'strike'), CT_BooleanProperty, scope=CT_RPrElt, documentation=u'Strike Through'))

CT_RPrElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'outline'), CT_BooleanProperty, scope=CT_RPrElt, documentation=u'Outline'))

CT_RPrElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'charset'), CT_IntProperty, scope=CT_RPrElt, documentation=u'Character Set'))

CT_RPrElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'u'), CT_UnderlineProperty, scope=CT_RPrElt, documentation=u'Underline'))

CT_RPrElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rFont'), CT_FontName, scope=CT_RPrElt, documentation=u'Font'))

CT_RPrElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'family'), CT_IntProperty, scope=CT_RPrElt, documentation=u'Font Family'))
CT_RPrElt._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_RPrElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rFont')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RPrElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'charset')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RPrElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'family')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RPrElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RPrElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RPrElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strike')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RPrElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'outline')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RPrElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'shadow')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RPrElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'condense')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RPrElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extend')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RPrElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'color')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RPrElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sz')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RPrElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'u')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RPrElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'vertAlign')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RPrElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'scheme')), min_occurs=0L, max_occurs=1L)
    )
CT_RPrElt._ContentModel = pyxb.binding.content.ParticleModel(CT_RPrElt._GroupModel, min_occurs=1, max_occurs=None)



CT_MetadataBlocks._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bk'), CT_MetadataBlock, scope=CT_MetadataBlocks, documentation=u'Metadata Block'))
CT_MetadataBlocks._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MetadataBlocks._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bk')), min_occurs=1L, max_occurs=None)
    )
CT_MetadataBlocks._ContentModel = pyxb.binding.content.ParticleModel(CT_MetadataBlocks._GroupModel, min_occurs=1, max_occurs=1)



CT_Xf._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Xf, documentation=u'Future Feature Data Storage Area'))

CT_Xf._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'alignment'), CT_CellAlignment, scope=CT_Xf, documentation=u'Alignment'))

CT_Xf._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'protection'), CT_CellProtection, scope=CT_Xf, documentation=u'Protection'))
CT_Xf._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Xf._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'alignment')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Xf._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'protection')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Xf._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Xf._ContentModel = pyxb.binding.content.ParticleModel(CT_Xf._GroupModel, min_occurs=1, max_occurs=1)



CT_XmlColumnPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_XmlColumnPr, documentation=u'Future Feature Data Storage Area'))
CT_XmlColumnPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_XmlColumnPr._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_XmlColumnPr._ContentModel = pyxb.binding.content.ParticleModel(CT_XmlColumnPr._GroupModel, min_occurs=1, max_occurs=1)



CT_OleObjects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'oleObject'), CT_OleObject, scope=CT_OleObjects, documentation=u'Embedded Object'))
CT_OleObjects._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OleObjects._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'oleObject')), min_occurs=1L, max_occurs=None)
    )
CT_OleObjects._ContentModel = pyxb.binding.content.ParticleModel(CT_OleObjects._GroupModel, min_occurs=1, max_occurs=1)



CT_PivotArea._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_PivotArea, documentation=u'Future Feature Data Storage Area'))

CT_PivotArea._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'references'), CT_PivotAreaReferences, scope=CT_PivotArea, documentation=u'References'))
CT_PivotArea._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PivotArea._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'references')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PivotArea._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_PivotArea._ContentModel = pyxb.binding.content.ParticleModel(CT_PivotArea._GroupModel, min_occurs=1, max_occurs=1)



CT_SheetPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageSetUpPr'), CT_PageSetUpPr, scope=CT_SheetPr, documentation=u'Page Setup Properties'))

CT_SheetPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tabColor'), CT_Color, scope=CT_SheetPr, documentation=u'Sheet Tab Color'))

CT_SheetPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'outlinePr'), CT_OutlinePr, scope=CT_SheetPr, documentation=u'Outline Properties'))
CT_SheetPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SheetPr._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tabColor')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SheetPr._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'outlinePr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SheetPr._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageSetUpPr')), min_occurs=0L, max_occurs=1L)
    )
CT_SheetPr._ContentModel = pyxb.binding.content.ParticleModel(CT_SheetPr._GroupModel, min_occurs=1, max_occurs=1)



CT_PivotAreaReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_PivotAreaReference))

CT_PivotAreaReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'x'), CT_Index, scope=CT_PivotAreaReference, documentation=u'Field Item'))
CT_PivotAreaReference._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PivotAreaReference._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'x')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_PivotAreaReference._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_PivotAreaReference._ContentModel = pyxb.binding.content.ParticleModel(CT_PivotAreaReference._GroupModel, min_occurs=1, max_occurs=1)



CT_ColorScale._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'color'), CT_Color, scope=CT_ColorScale, documentation=u'Color Gradiant Interpolation'))

CT_ColorScale._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cfvo'), CT_Cfvo, scope=CT_ColorScale, documentation=u'Conditional Format Value Object'))
CT_ColorScale._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColorScale._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cfvo')), min_occurs=2L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_ColorScale._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'color')), min_occurs=2L, max_occurs=None)
    )
CT_ColorScale._ContentModel = pyxb.binding.content.ParticleModel(CT_ColorScale._GroupModel, min_occurs=1, max_occurs=1)



CT_CommentList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'comment'), CT_Comment, scope=CT_CommentList, documentation=u'Comment'))
CT_CommentList._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CommentList._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'comment')), min_occurs=0L, max_occurs=None)
    )
CT_CommentList._ContentModel = pyxb.binding.content.ParticleModel(CT_CommentList._GroupModel, min_occurs=1, max_occurs=1)



CT_rowItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'i'), CT_I, scope=CT_rowItems, documentation=u'Row Items'))
CT_rowItems._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_rowItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=None)
    )
CT_rowItems._ContentModel = pyxb.binding.content.ParticleModel(CT_rowItems._GroupModel, min_occurs=1, max_occurs=1)



CT_Revisions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rqt'), CT_RevisionQueryTableField, scope=CT_Revisions, documentation=u'Revision Query Table'))

CT_Revisions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rrc'), CT_RevisionRowColumn, scope=CT_Revisions, documentation=u'Revision Row Column Insert Delete'))

CT_Revisions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rcft'), CT_RevisionConflict, scope=CT_Revisions, documentation=u'Revision Merge Conflict'))

CT_Revisions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rfmt'), CT_RevisionFormatting, scope=CT_Revisions, documentation=u'Revision Format'))

CT_Revisions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rm'), CT_RevisionMove, scope=CT_Revisions, documentation=u'Revision Cell Move'))

CT_Revisions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'raf'), CT_RevisionAutoFormatting, scope=CT_Revisions, documentation=u'Revision AutoFormat'))

CT_Revisions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rcv'), CT_RevisionCustomView, scope=CT_Revisions, documentation=u'Revision Custom View'))

CT_Revisions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rcc'), CT_RevisionCellChange, scope=CT_Revisions, documentation=u'Revision Cell Change'))

CT_Revisions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rdn'), CT_RevisionDefinedName, scope=CT_Revisions, documentation=u'Revision Defined Name'))

CT_Revisions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rsnm'), CT_RevisionSheetRename, scope=CT_Revisions, documentation=u'Revision Sheet Name'))

CT_Revisions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rcmt'), CT_RevisionComment, scope=CT_Revisions, documentation=u'Revision Cell Comment'))

CT_Revisions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ris'), CT_RevisionInsertSheet, scope=CT_Revisions, documentation=u'Revision Insert Sheet'))
CT_Revisions._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Revisions._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rrc')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Revisions._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rm')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Revisions._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rcv')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Revisions._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rsnm')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Revisions._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ris')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Revisions._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rcc')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Revisions._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rfmt')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Revisions._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'raf')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Revisions._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rdn')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Revisions._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rcmt')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Revisions._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rqt')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Revisions._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rcft')), min_occurs=0L, max_occurs=None)
    )
CT_Revisions._ContentModel = pyxb.binding.content.ParticleModel(CT_Revisions._GroupModel, min_occurs=1, max_occurs=None)



CT_AutoFilter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_AutoFilter))

CT_AutoFilter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'filterColumn'), CT_FilterColumn, scope=CT_AutoFilter, documentation=u'AutoFilter Column'))

CT_AutoFilter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sortState'), CT_SortState, scope=CT_AutoFilter, documentation=u'Sort State for Auto Filter'))
CT_AutoFilter._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AutoFilter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'filterColumn')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_AutoFilter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sortState')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_AutoFilter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_AutoFilter._ContentModel = pyxb.binding.content.ParticleModel(CT_AutoFilter._GroupModel, min_occurs=1, max_occurs=1)



CT_PivotHierarchies._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotHierarchy'), CT_PivotHierarchy, scope=CT_PivotHierarchies, documentation=u'OLAP Hierarchy'))
CT_PivotHierarchies._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PivotHierarchies._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pivotHierarchy')), min_occurs=1, max_occurs=None)
    )
CT_PivotHierarchies._ContentModel = pyxb.binding.content.ParticleModel(CT_PivotHierarchies._GroupModel, min_occurs=1, max_occurs=1)



CT_CalculatedMember._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_CalculatedMember, documentation=u'Future Feature Data Storage Area'))
CT_CalculatedMember._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CalculatedMember._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_CalculatedMember._ContentModel = pyxb.binding.content.ParticleModel(CT_CalculatedMember._GroupModel, min_occurs=0L, max_occurs=1)



CT_FunctionGroups._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionGroup'), CT_FunctionGroup, scope=CT_FunctionGroups, documentation=u'Function Group'))
CT_FunctionGroups._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FunctionGroups._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionGroup')), min_occurs=0L, max_occurs=1)
    )
CT_FunctionGroups._ContentModel = pyxb.binding.content.ParticleModel(CT_FunctionGroups._GroupModel, min_occurs=1, max_occurs=None)



CT_QueryTable._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_QueryTable, documentation=u'Future Feature Data Storage Area'))

CT_QueryTable._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'queryTableRefresh'), CT_QueryTableRefresh, scope=CT_QueryTable, documentation=u'QueryTable Refresh Information'))
CT_QueryTable._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_QueryTable._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'queryTableRefresh')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_QueryTable._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_QueryTable._ContentModel = pyxb.binding.content.ParticleModel(CT_QueryTable._GroupModel, min_occurs=1, max_occurs=1)



CT_MRUColors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'color'), CT_Color, scope=CT_MRUColors, documentation=u'Color'))
CT_MRUColors._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MRUColors._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'color')), min_occurs=1L, max_occurs=None)
    )
CT_MRUColors._ContentModel = pyxb.binding.content.ParticleModel(CT_MRUColors._GroupModel, min_occurs=1, max_occurs=1)



CT_CellXfs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'xf'), CT_Xf, scope=CT_CellXfs, documentation=u'Format'))
CT_CellXfs._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CellXfs._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'xf')), min_occurs=1L, max_occurs=None)
    )
CT_CellXfs._ContentModel = pyxb.binding.content.ParticleModel(CT_CellXfs._GroupModel, min_occurs=1, max_occurs=1)



CT_ExternalSheetDataSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetData'), CT_ExternalSheetData, scope=CT_ExternalSheetDataSet, documentation=u'External Sheet Data Set'))
CT_ExternalSheetDataSet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ExternalSheetDataSet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetData')), min_occurs=1L, max_occurs=None)
    )
CT_ExternalSheetDataSet._ContentModel = pyxb.binding.content.ParticleModel(CT_ExternalSheetDataSet._GroupModel, min_occurs=1, max_occurs=1)



CT_WebPublishObjects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'webPublishObject'), CT_WebPublishObject, scope=CT_WebPublishObjects, documentation=u'Web Publishing Object'))
CT_WebPublishObjects._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_WebPublishObjects._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'webPublishObject')), min_occurs=1L, max_occurs=None)
    )
CT_WebPublishObjects._ContentModel = pyxb.binding.content.ParticleModel(CT_WebPublishObjects._GroupModel, min_occurs=1, max_occurs=1)



CT_QueryTableDeletedFields._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'deletedField'), CT_DeletedField, scope=CT_QueryTableDeletedFields, documentation=u'Deleted Field'))
CT_QueryTableDeletedFields._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_QueryTableDeletedFields._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'deletedField')), min_occurs=1L, max_occurs=None)
    )
CT_QueryTableDeletedFields._ContentModel = pyxb.binding.content.ParticleModel(CT_QueryTableDeletedFields._GroupModel, min_occurs=1, max_occurs=1)



CT_Parameters._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'parameter'), CT_Parameter, scope=CT_Parameters, documentation=u'Parameter Properties'))
CT_Parameters._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Parameters._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'parameter')), min_occurs=1L, max_occurs=None)
    )
CT_Parameters._ContentModel = pyxb.binding.content.ParticleModel(CT_Parameters._GroupModel, min_occurs=1, max_occurs=1)



CT_FilterColumn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customFilters'), CT_CustomFilters, scope=CT_FilterColumn, documentation=u'Custom Filters'))

CT_FilterColumn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'top10'), CT_Top10, scope=CT_FilterColumn, documentation=u'Top 10'))

CT_FilterColumn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dynamicFilter'), CT_DynamicFilter, scope=CT_FilterColumn, documentation=u'Dynamic Filter'))

CT_FilterColumn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colorFilter'), CT_ColorFilter, scope=CT_FilterColumn, documentation=u'Color Filter Criteria'))

CT_FilterColumn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'filters'), CT_Filters, scope=CT_FilterColumn, documentation=u'Filter Criteria'))

CT_FilterColumn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'iconFilter'), CT_IconFilter, scope=CT_FilterColumn, documentation=u'Icon Filter'))

CT_FilterColumn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_FilterColumn))
CT_FilterColumn._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_FilterColumn._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'filters')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FilterColumn._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'top10')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FilterColumn._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customFilters')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FilterColumn._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dynamicFilter')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FilterColumn._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'colorFilter')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FilterColumn._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'iconFilter')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_FilterColumn._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_FilterColumn._ContentModel = pyxb.binding.content.ParticleModel(CT_FilterColumn._GroupModel, min_occurs=0L, max_occurs=1L)



CT_TableParts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tablePart'), CT_TablePart, scope=CT_TableParts, documentation=u'Table Part'))
CT_TableParts._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableParts._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tablePart')), min_occurs=0L, max_occurs=None)
    )
CT_TableParts._ContentModel = pyxb.binding.content.ParticleModel(CT_TableParts._GroupModel, min_occurs=1, max_occurs=1)



CT_MdxSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'n'), CT_MetadataStringIndex, scope=CT_MdxSet, documentation=u'Member Unique Name Index'))
CT_MdxSet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MdxSet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'n')), min_occurs=0L, max_occurs=None)
    )
CT_MdxSet._ContentModel = pyxb.binding.content.ParticleModel(CT_MdxSet._GroupModel, min_occurs=1, max_occurs=1)



CT_PivotField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_PivotField, documentation=u'Future Feature Data Storage Area'))

CT_PivotField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'items'), CT_Items, scope=CT_PivotField, documentation=u'Field Items'))

CT_PivotField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'autoSortScope'), CT_AutoSortScope, scope=CT_PivotField, documentation=u'AutoSort Scope'))
CT_PivotField._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PivotField._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'items')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PivotField._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'autoSortScope')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PivotField._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_PivotField._ContentModel = pyxb.binding.content.ParticleModel(CT_PivotField._GroupModel, min_occurs=1, max_occurs=1)



CT_Users._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'userInfo'), CT_SharedUser, scope=CT_Users, documentation=u'User Information'))
CT_Users._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Users._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'userInfo')), min_occurs=0L, max_occurs=256L)
    )
CT_Users._ContentModel = pyxb.binding.content.ParticleModel(CT_Users._GroupModel, min_occurs=1, max_occurs=1)



CT_SingleXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_SingleXmlCell, documentation=u'Future Feature Data Storage Area'))

CT_SingleXmlCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'xmlCellPr'), CT_XmlCellPr, scope=CT_SingleXmlCell, documentation=u'Cell Properties'))
CT_SingleXmlCell._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SingleXmlCell._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'xmlCellPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SingleXmlCell._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_SingleXmlCell._ContentModel = pyxb.binding.content.ParticleModel(CT_SingleXmlCell._GroupModel, min_occurs=1, max_occurs=1)



CT_TextFields._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'textField'), CT_TextField, scope=CT_TextFields, documentation=u'Text Import Field Settings'))
CT_TextFields._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextFields._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textField')), min_occurs=1L, max_occurs=None)
    )
CT_TextFields._ContentModel = pyxb.binding.content.ParticleModel(CT_TextFields._GroupModel, min_occurs=1, max_occurs=1)



CT_PivotFilter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_PivotFilter))

CT_PivotFilter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'autoFilter'), CT_AutoFilter, scope=CT_PivotFilter, documentation=u'Auto Filter'))
CT_PivotFilter._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PivotFilter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'autoFilter')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PivotFilter._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_PivotFilter._ContentModel = pyxb.binding.content.ParticleModel(CT_PivotFilter._GroupModel, min_occurs=1, max_occurs=1)



CT_CalculatedItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_CalculatedItem, documentation=u'Future Feature Data Storage Area'))

CT_CalculatedItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotArea'), CT_PivotArea, scope=CT_CalculatedItem, documentation=u'Calculated Item Location'))
CT_CalculatedItem._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CalculatedItem._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pivotArea')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CalculatedItem._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_CalculatedItem._ContentModel = pyxb.binding.content.ParticleModel(CT_CalculatedItem._GroupModel, min_occurs=1, max_occurs=1)



CT_QueryCache._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'query'), CT_Query, scope=CT_QueryCache, documentation=u'Query'))
CT_QueryCache._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_QueryCache._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'query')), min_occurs=1, max_occurs=None)
    )
CT_QueryCache._ContentModel = pyxb.binding.content.ParticleModel(CT_QueryCache._GroupModel, min_occurs=1, max_occurs=1)



CT_Number._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'x'), CT_X, scope=CT_Number, documentation=u'Member Property Index'))

CT_Number._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tpls'), CT_Tuples, scope=CT_Number, documentation=u'OLAP Members'))
CT_Number._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Number._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tpls')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Number._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'x')), min_occurs=0L, max_occurs=None)
    )
CT_Number._ContentModel = pyxb.binding.content.ParticleModel(CT_Number._GroupModel, min_occurs=1, max_occurs=1)



CT_Scenarios._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'scenario'), CT_Scenario, scope=CT_Scenarios, documentation=u'Scenario'))
CT_Scenarios._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Scenarios._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'scenario')), min_occurs=1L, max_occurs=None)
    )
CT_Scenarios._ContentModel = pyxb.binding.content.ParticleModel(CT_Scenarios._GroupModel, min_occurs=1, max_occurs=1)



CT_RevisionDefinedName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_RevisionDefinedName))

CT_RevisionDefinedName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'formula'), ST_Formula, scope=CT_RevisionDefinedName, documentation=u'Formula'))

CT_RevisionDefinedName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'oldFormula'), ST_Formula, scope=CT_RevisionDefinedName, documentation=u'Old Formula'))
CT_RevisionDefinedName._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RevisionDefinedName._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'formula')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RevisionDefinedName._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'oldFormula')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RevisionDefinedName._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_RevisionDefinedName._ContentModel = pyxb.binding.content.ParticleModel(CT_RevisionDefinedName._GroupModel, min_occurs=1, max_occurs=1)



CT_Boolean._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'x'), CT_X, scope=CT_Boolean, documentation=u'Member Property Indexes'))
CT_Boolean._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Boolean._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'x')), min_occurs=0L, max_occurs=None)
    )
CT_Boolean._ContentModel = pyxb.binding.content.ParticleModel(CT_Boolean._GroupModel, min_occurs=1, max_occurs=1)



CT_Sst._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Sst))

CT_Sst._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'si'), CT_Rst, scope=CT_Sst, documentation=u'String Item'))
CT_Sst._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Sst._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'si')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Sst._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_Sst._ContentModel = pyxb.binding.content.ParticleModel(CT_Sst._GroupModel, min_occurs=1, max_occurs=1)



CT_ColHierarchiesUsage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colHierarchyUsage'), CT_HierarchyUsage, scope=CT_ColHierarchiesUsage, documentation=u'Column OLAP Hierarchies'))
CT_ColHierarchiesUsage._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ColHierarchiesUsage._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'colHierarchyUsage')), min_occurs=1L, max_occurs=None)
    )
CT_ColHierarchiesUsage._ContentModel = pyxb.binding.content.ParticleModel(CT_ColHierarchiesUsage._GroupModel, min_occurs=1, max_occurs=1)



CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'vertAlign'), CT_VerticalAlignFontProperty, scope=CT_Font, documentation=u'Text Vertical Alignment'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'i'), CT_BooleanProperty, scope=CT_Font, documentation=u'Italic'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'color'), CT_Color, scope=CT_Font, documentation=u'Text Color'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'strike'), CT_BooleanProperty, scope=CT_Font, documentation=u'Strike Through'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'charset'), CT_IntProperty, scope=CT_Font, documentation=u'Character Set'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'name'), CT_FontName, scope=CT_Font, documentation=u'Font Name'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sz'), CT_FontSize, scope=CT_Font, documentation=u'Font Size'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'outline'), CT_BooleanProperty, scope=CT_Font, documentation=u'Outline'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extend'), CT_BooleanProperty, scope=CT_Font, documentation=u'Extend'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'u'), CT_UnderlineProperty, scope=CT_Font, documentation=u'Underline'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'shadow'), CT_BooleanProperty, scope=CT_Font, documentation=u'Shadow'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'family'), CT_IntProperty, scope=CT_Font, documentation=u'Font Family'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'condense'), CT_BooleanProperty, scope=CT_Font, documentation=u'Condense'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'b'), CT_BooleanProperty, scope=CT_Font, documentation=u'Bold'))

CT_Font._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'scheme'), CT_FontScheme, scope=CT_Font, documentation=u'Scheme'))
CT_Font._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'name')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'charset')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'family')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'strike')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'outline')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'shadow')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'condense')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extend')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'color')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sz')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'u')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'vertAlign')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Font._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'scheme')), min_occurs=0L, max_occurs=1L)
    )
CT_Font._ContentModel = pyxb.binding.content.ParticleModel(CT_Font._GroupModel, min_occurs=1, max_occurs=None)



CT_Chartsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetViews'), CT_ChartsheetViews, scope=CT_Chartsheet, documentation=u'Chart Sheet Views'))

CT_Chartsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawing'), CT_LegacyDrawing, scope=CT_Chartsheet))

CT_Chartsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetProtection'), CT_ChartsheetProtection, scope=CT_Chartsheet, documentation=u'Chart Sheet Protection'))

CT_Chartsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawingHF'), CT_LegacyDrawing, scope=CT_Chartsheet, documentation=u'Legacy Drawing Reference in  Header Footer'))

CT_Chartsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customSheetViews'), CT_CustomChartsheetViews, scope=CT_Chartsheet, documentation=u'Custom Chart Sheet Views'))

CT_Chartsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'drawing'), CT_Drawing, scope=CT_Chartsheet, documentation=u'Drawing'))

CT_Chartsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageMargins'), CT_PageMargins, scope=CT_Chartsheet))

CT_Chartsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'picture'), CT_SheetBackgroundPicture, scope=CT_Chartsheet))

CT_Chartsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'headerFooter'), CT_HeaderFooter, scope=CT_Chartsheet))

CT_Chartsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageSetup'), CT_CsPageSetup, scope=CT_Chartsheet))

CT_Chartsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetPr'), CT_ChartsheetPr, scope=CT_Chartsheet, documentation=u'Chart Sheet Properties'))

CT_Chartsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'webPublishItems'), CT_WebPublishItems, scope=CT_Chartsheet))

CT_Chartsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'drawingHF'), CT_DrawingHF, scope=CT_Chartsheet, documentation=u'Drawing Reference in Header Footer'))

CT_Chartsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Chartsheet))
CT_Chartsheet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Chartsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Chartsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetViews')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Chartsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetProtection')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Chartsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customSheetViews')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Chartsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageMargins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Chartsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageSetup')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Chartsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'headerFooter')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Chartsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'drawing')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Chartsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Chartsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawingHF')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Chartsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'drawingHF')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Chartsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'picture')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Chartsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'webPublishItems')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Chartsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Chartsheet._ContentModel = pyxb.binding.content.ParticleModel(CT_Chartsheet._GroupModel, min_occurs=1, max_occurs=1)



CT_XmlPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_XmlPr, documentation=u'Future Feature Data Storage Area'))
CT_XmlPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_XmlPr._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_XmlPr._ContentModel = pyxb.binding.content.ParticleModel(CT_XmlPr._GroupModel, min_occurs=1, max_occurs=1)



CT_Cols._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'col'), CT_Col, scope=CT_Cols, documentation=u'Column Width & Formatting'))
CT_Cols._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Cols._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'col')), min_occurs=1L, max_occurs=None)
    )
CT_Cols._ContentModel = pyxb.binding.content.ParticleModel(CT_Cols._GroupModel, min_occurs=1, max_occurs=1)



CT_Stylesheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Stylesheet, documentation=u'Future Feature Data Storage Area'))

CT_Stylesheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'numFmts'), CT_NumFmts, scope=CT_Stylesheet, documentation=u'Number Formats'))

CT_Stylesheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cellStyles'), CT_CellStyles, scope=CT_Stylesheet, documentation=u'Cell Styles'))

CT_Stylesheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fonts'), CT_Fonts, scope=CT_Stylesheet, documentation=u'Fonts'))

CT_Stylesheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colors'), CT_Colors, scope=CT_Stylesheet, documentation=u'Colors'))

CT_Stylesheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dxfs'), CT_Dxfs, scope=CT_Stylesheet, documentation=u'Formats'))

CT_Stylesheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cellXfs'), CT_CellXfs, scope=CT_Stylesheet, documentation=u'Cell Formats'))

CT_Stylesheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tableStyles'), CT_TableStyles, scope=CT_Stylesheet, documentation=u'Table Styles'))

CT_Stylesheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'borders'), CT_Borders, scope=CT_Stylesheet, documentation=u'Borders'))

CT_Stylesheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fills'), CT_Fills, scope=CT_Stylesheet, documentation=u'Fills'))

CT_Stylesheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cellStyleXfs'), CT_CellStyleXfs, scope=CT_Stylesheet, documentation=u'Formatting Records'))
CT_Stylesheet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Stylesheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'numFmts')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Stylesheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fonts')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Stylesheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fills')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Stylesheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'borders')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Stylesheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cellStyleXfs')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Stylesheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cellXfs')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Stylesheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cellStyles')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Stylesheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dxfs')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Stylesheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tableStyles')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Stylesheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'colors')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Stylesheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Stylesheet._ContentModel = pyxb.binding.content.ParticleModel(CT_Stylesheet._GroupModel, min_occurs=1, max_occurs=1)



CT_ExternalBook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetDataSet'), CT_ExternalSheetDataSet, scope=CT_ExternalBook, documentation=u'Cached Worksheet Data'))

CT_ExternalBook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetNames'), CT_ExternalSheetNames, scope=CT_ExternalBook, documentation=u'Supporting Workbook Sheet Names'))

CT_ExternalBook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'definedNames'), CT_ExternalDefinedNames, scope=CT_ExternalBook, documentation=u'Named Links'))
CT_ExternalBook._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ExternalBook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetNames')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ExternalBook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'definedNames')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ExternalBook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetDataSet')), min_occurs=0L, max_occurs=1L)
    )
CT_ExternalBook._ContentModel = pyxb.binding.content.ParticleModel(CT_ExternalBook._GroupModel, min_occurs=1, max_occurs=1)



CT_OleItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'oleItem'), CT_OleItem, scope=CT_OleItems, documentation=u'Object Link Item'))
CT_OleItems._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OleItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'oleItem')), min_occurs=0L, max_occurs=None)
    )
CT_OleItems._ContentModel = pyxb.binding.content.ParticleModel(CT_OleItems._GroupModel, min_occurs=1, max_occurs=1)



CT_MetadataTypes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'metadataType'), CT_MetadataType, scope=CT_MetadataTypes, documentation=u'Metadata Type Information'))
CT_MetadataTypes._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MetadataTypes._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'metadataType')), min_occurs=1L, max_occurs=None)
    )
CT_MetadataTypes._ContentModel = pyxb.binding.content.ParticleModel(CT_MetadataTypes._GroupModel, min_occurs=1, max_occurs=1)



CT_PageFields._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageField'), CT_PageField, scope=CT_PageFields, documentation=u'Page Field'))
CT_PageFields._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PageFields._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageField')), min_occurs=1, max_occurs=None)
    )
CT_PageFields._ContentModel = pyxb.binding.content.ParticleModel(CT_PageFields._GroupModel, min_occurs=1, max_occurs=1)



CT_ChartsheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_ChartsheetView))
CT_ChartsheetView._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ChartsheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_ChartsheetView._ContentModel = pyxb.binding.content.ParticleModel(CT_ChartsheetView._GroupModel, min_occurs=1, max_occurs=1)



CT_Fill._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'patternFill'), CT_PatternFill, scope=CT_Fill, documentation=u'Pattern'))

CT_Fill._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'gradientFill'), CT_GradientFill, scope=CT_Fill, documentation=u'Gradient'))
CT_Fill._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Fill._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'patternFill')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Fill._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'gradientFill')), min_occurs=0L, max_occurs=1L)
    )
CT_Fill._ContentModel = pyxb.binding.content.ParticleModel(CT_Fill._GroupModel, min_occurs=1L, max_occurs=1L)



CT_MetadataBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rc'), CT_MetadataRecord, scope=CT_MetadataBlock, documentation=u'Metadata Record'))
CT_MetadataBlock._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MetadataBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rc')), min_occurs=1L, max_occurs=None)
    )
CT_MetadataBlock._ContentModel = pyxb.binding.content.ParticleModel(CT_MetadataBlock._GroupModel, min_occurs=1, max_occurs=1)



CT_GroupLevel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_GroupLevel, documentation=u'Future Feature Data Storage Area'))

CT_GroupLevel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'groups'), CT_Groups, scope=CT_GroupLevel, documentation=u'OLAP Level Groups'))
CT_GroupLevel._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GroupLevel._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'groups')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GroupLevel._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_GroupLevel._ContentModel = pyxb.binding.content.ParticleModel(CT_GroupLevel._GroupModel, min_occurs=1, max_occurs=1)



CT_TableStyles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tableStyle'), CT_TableStyle, scope=CT_TableStyles, documentation=u'Table Style'))
CT_TableStyles._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableStyles._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tableStyle')), min_occurs=0L, max_occurs=None)
    )
CT_TableStyles._ContentModel = pyxb.binding.content.ParticleModel(CT_TableStyles._GroupModel, min_occurs=1, max_occurs=1)



CT_DataValidations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataValidation'), CT_DataValidation, scope=CT_DataValidations, documentation=u'Data Validation'))
CT_DataValidations._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DataValidations._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataValidation')), min_occurs=1L, max_occurs=None)
    )
CT_DataValidations._ContentModel = pyxb.binding.content.ParticleModel(CT_DataValidations._GroupModel, min_occurs=1, max_occurs=1)



CT_Items._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'item'), CT_Item, scope=CT_Items, documentation=u'PivotTable Field Item'))
CT_Items._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Items._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'item')), min_occurs=1, max_occurs=None)
    )
CT_Items._ContentModel = pyxb.binding.content.ParticleModel(CT_Items._GroupModel, min_occurs=1, max_occurs=1)



CT_Dxfs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dxf'), CT_Dxf, scope=CT_Dxfs, documentation=u'Formatting'))
CT_Dxfs._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Dxfs._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dxf')), min_occurs=0L, max_occurs=None)
    )
CT_Dxfs._ContentModel = pyxb.binding.content.ParticleModel(CT_Dxfs._GroupModel, min_occurs=1, max_occurs=1)



CT_PivotHierarchy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_PivotHierarchy, documentation=u'Future Feature Data Storage Area'))

CT_PivotHierarchy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'mps'), CT_MemberProperties, scope=CT_PivotHierarchy, documentation=u'OLAP Member Properties'))

CT_PivotHierarchy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'members'), CT_Members, scope=CT_PivotHierarchy, documentation=u'Members'))
CT_PivotHierarchy._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PivotHierarchy._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'mps')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PivotHierarchy._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'members')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_PivotHierarchy._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_PivotHierarchy._ContentModel = pyxb.binding.content.ParticleModel(CT_PivotHierarchy._GroupModel, min_occurs=1, max_occurs=1)



CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Row, documentation=u'Future Feature Data Storage Area'))

CT_Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'c'), CT_Cell, scope=CT_Row, documentation=u'Cell'))
CT_Row._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'c')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Row._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_Row._ContentModel = pyxb.binding.content.ParticleModel(CT_Row._GroupModel, min_occurs=1, max_occurs=1)



CT_CacheSource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'worksheetSource'), CT_WorksheetSource, scope=CT_CacheSource, documentation=u'Worksheet PivotCache Source'))

CT_CacheSource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'consolidation'), CT_Consolidation, scope=CT_CacheSource, documentation=u'Consolidation Source'))

CT_CacheSource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_CacheSource, documentation=u'Future Feature Data Storage Area'))
CT_CacheSource._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_CacheSource._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'worksheetSource')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CacheSource._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'consolidation')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CacheSource._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_CacheSource._ContentModel = pyxb.binding.content.ParticleModel(CT_CacheSource._GroupModel, min_occurs=0L, max_occurs=1L)



CT_CfRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_CfRule))

CT_CfRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'formula'), ST_Formula, scope=CT_CfRule, documentation=u'Formula'))

CT_CfRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colorScale'), CT_ColorScale, scope=CT_CfRule, documentation=u'Color Scale'))

CT_CfRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'iconSet'), CT_IconSet, scope=CT_CfRule, documentation=u'Icon Set'))

CT_CfRule._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataBar'), CT_DataBar, scope=CT_CfRule, documentation=u'Data Bar'))
CT_CfRule._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CfRule._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'formula')), min_occurs=0L, max_occurs=3L),
    pyxb.binding.content.ParticleModel(CT_CfRule._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'colorScale')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CfRule._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataBar')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CfRule._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'iconSet')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CfRule._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_CfRule._ContentModel = pyxb.binding.content.ParticleModel(CT_CfRule._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomFilters._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customFilter'), CT_CustomFilter, scope=CT_CustomFilters, documentation=u'Custom Filter Criteria'))
CT_CustomFilters._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomFilters._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customFilter')), min_occurs=1L, max_occurs=2L)
    )
CT_CustomFilters._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomFilters._GroupModel, min_occurs=1, max_occurs=1)



CT_DateTime._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'x'), CT_X, scope=CT_DateTime, documentation=u'Member Property Index'))
CT_DateTime._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DateTime._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'x')), min_occurs=0L, max_occurs=None)
    )
CT_DateTime._ContentModel = pyxb.binding.content.ParticleModel(CT_DateTime._GroupModel, min_occurs=1, max_occurs=1)



CT_SharedUser._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_SharedUser))
CT_SharedUser._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SharedUser._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_SharedUser._ContentModel = pyxb.binding.content.ParticleModel(CT_SharedUser._GroupModel, min_occurs=1, max_occurs=1)



CT_SmartTags._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cellSmartTags'), CT_CellSmartTags, scope=CT_SmartTags, documentation=u'Cell Smart Tags'))
CT_SmartTags._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SmartTags._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cellSmartTags')), min_occurs=1L, max_occurs=None)
    )
CT_SmartTags._ContentModel = pyxb.binding.content.ParticleModel(CT_SmartTags._GroupModel, min_occurs=1, max_occurs=1)



CT_I._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'x'), CT_X, scope=CT_I, documentation=u'Row / Column Item Index'))
CT_I._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_I._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'x')), min_occurs=0L, max_occurs=None)
    )
CT_I._ContentModel = pyxb.binding.content.ParticleModel(CT_I._GroupModel, min_occurs=1, max_occurs=1)



CT_RevisionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_RevisionHeader))

CT_RevisionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetIdMap'), CT_SheetIdMap, scope=CT_RevisionHeader, documentation=u'Sheet Id Map'))

CT_RevisionHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reviewedList'), CT_ReviewedRevisions, scope=CT_RevisionHeader, documentation=u'Reviewed List'))
CT_RevisionHeader._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RevisionHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetIdMap')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RevisionHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reviewedList')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RevisionHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_RevisionHeader._ContentModel = pyxb.binding.content.ParticleModel(CT_RevisionHeader._GroupModel, min_occurs=1, max_occurs=1)



CT_PatternFill._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bgColor'), CT_Color, scope=CT_PatternFill, documentation=u'Background Color'))

CT_PatternFill._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fgColor'), CT_Color, scope=CT_PatternFill, documentation=u'Foreground Color'))
CT_PatternFill._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PatternFill._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fgColor')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_PatternFill._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bgColor')), min_occurs=0L, max_occurs=1L)
    )
CT_PatternFill._ContentModel = pyxb.binding.content.ParticleModel(CT_PatternFill._GroupModel, min_occurs=1, max_occurs=1)



CT_CommentPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'anchor'), CT_ObjectAnchor, scope=CT_CommentPr))
CT_CommentPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CommentPr._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'anchor')), min_occurs=1L, max_occurs=1L)
    )
CT_CommentPr._ContentModel = pyxb.binding.content.ParticleModel(CT_CommentPr._GroupModel, min_occurs=1, max_occurs=1)



CT_Fonts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'font'), CT_Font, scope=CT_Fonts, documentation=u'Font'))
CT_Fonts._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Fonts._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'font')), min_occurs=0L, max_occurs=None)
    )
CT_Fonts._ContentModel = pyxb.binding.content.ParticleModel(CT_Fonts._GroupModel, min_occurs=1, max_occurs=1)



CT_PCDSCPage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageItem'), CT_PageItem, scope=CT_PCDSCPage, documentation=u'Page Item'))
CT_PCDSCPage._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PCDSCPage._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageItem')), min_occurs=0L, max_occurs=None)
    )
CT_PCDSCPage._ContentModel = pyxb.binding.content.ParticleModel(CT_PCDSCPage._GroupModel, min_occurs=1, max_occurs=1)



CT_Authors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'author'), _s.ST_Xstring, scope=CT_Authors, documentation=u'Author'))
CT_Authors._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Authors._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'author')), min_occurs=0L, max_occurs=None)
    )
CT_Authors._ContentModel = pyxb.binding.content.ParticleModel(CT_Authors._GroupModel, min_occurs=1, max_occurs=1)



CT_FutureMetadata._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_FutureMetadata, documentation=u'Future Feature Data Storage Area'))

CT_FutureMetadata._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bk'), CT_FutureMetadataBlock, scope=CT_FutureMetadata, documentation=u'Future Metadata Block'))
CT_FutureMetadata._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FutureMetadata._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bk')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_FutureMetadata._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_FutureMetadata._ContentModel = pyxb.binding.content.ParticleModel(CT_FutureMetadata._GroupModel, min_occurs=1, max_occurs=1)



CT_WebPublishItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'webPublishItem'), CT_WebPublishItem, scope=CT_WebPublishItems, documentation=u'Web Publishing Item'))
CT_WebPublishItems._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_WebPublishItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'webPublishItem')), min_occurs=1L, max_occurs=None)
    )
CT_WebPublishItems._ContentModel = pyxb.binding.content.ParticleModel(CT_WebPublishItems._GroupModel, min_occurs=1, max_occurs=1)



CT_SheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_SheetView, documentation=u'Future Feature Data Storage Area'))

CT_SheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pane'), CT_Pane, scope=CT_SheetView, documentation=u'View Pane'))

CT_SheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotSelection'), CT_PivotSelection, scope=CT_SheetView, documentation=u'PivotTable Selection'))

CT_SheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'selection'), CT_Selection, scope=CT_SheetView, documentation=u'Selection'))
CT_SheetView._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pane')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'selection')), min_occurs=0L, max_occurs=4L),
    pyxb.binding.content.ParticleModel(CT_SheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pivotSelection')), min_occurs=0L, max_occurs=4L),
    pyxb.binding.content.ParticleModel(CT_SheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_SheetView._ContentModel = pyxb.binding.content.ParticleModel(CT_SheetView._GroupModel, min_occurs=1, max_occurs=1)



CT_ChartsheetPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tabColor'), CT_Color, scope=CT_ChartsheetPr))
CT_ChartsheetPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ChartsheetPr._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tabColor')), min_occurs=0L, max_occurs=1L)
    )
CT_ChartsheetPr._ContentModel = pyxb.binding.content.ParticleModel(CT_ChartsheetPr._GroupModel, min_occurs=1, max_occurs=1)



CT_ObjectAnchor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing'), u'to'), _xdr.CT_Marker, scope=CT_ObjectAnchor))

CT_ObjectAnchor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing'), u'from'), _xdr.CT_Marker, scope=CT_ObjectAnchor))
CT_ObjectAnchor._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ObjectAnchor._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing'), u'from')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ObjectAnchor._UseForTag(pyxb.namespace.ExpandedName(pyxb.namespace.NamespaceForURI(u'http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing'), u'to')), min_occurs=1L, max_occurs=1L)
    )
CT_ObjectAnchor._ContentModel = pyxb.binding.content.ParticleModel(CT_ObjectAnchor._GroupModel, min_occurs=1, max_occurs=1)



CT_CacheFields._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cacheField'), CT_CacheField, scope=CT_CacheFields, documentation=u'PivotCache Field'))
CT_CacheFields._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CacheFields._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cacheField')), min_occurs=0L, max_occurs=None)
    )
CT_CacheFields._ContentModel = pyxb.binding.content.ParticleModel(CT_CacheFields._GroupModel, min_occurs=1, max_occurs=1)



CT_WebPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tables'), CT_Tables, scope=CT_WebPr, documentation=u'Tables'))
CT_WebPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_WebPr._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tables')), min_occurs=0L, max_occurs=1L)
    )
CT_WebPr._ContentModel = pyxb.binding.content.ParticleModel(CT_WebPr._GroupModel, min_occurs=1, max_occurs=1)



CT_ChartFormats._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'chartFormat'), CT_ChartFormat, scope=CT_ChartFormats, documentation=u'PivotChart Format'))
CT_ChartFormats._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ChartFormats._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'chartFormat')), min_occurs=1, max_occurs=None)
    )
CT_ChartFormats._ContentModel = pyxb.binding.content.ParticleModel(CT_ChartFormats._GroupModel, min_occurs=1, max_occurs=1)



CT_CalculatedItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'calculatedItem'), CT_CalculatedItem, scope=CT_CalculatedItems, documentation=u'Calculated Item'))
CT_CalculatedItems._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CalculatedItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'calculatedItem')), min_occurs=1, max_occurs=None)
    )
CT_CalculatedItems._ContentModel = pyxb.binding.content.ParticleModel(CT_CalculatedItems._GroupModel, min_occurs=1, max_occurs=1)



CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'commentPr'), CT_CommentPr, scope=CT_Comment, documentation=u'Comment Properties'))

CT_Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'text'), CT_Rst, scope=CT_Comment, documentation=u'Comment Text'))
CT_Comment._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'text')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Comment._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'commentPr')), min_occurs=0L, max_occurs=1L)
    )
CT_Comment._ContentModel = pyxb.binding.content.ParticleModel(CT_Comment._GroupModel, min_occurs=1, max_occurs=1)



CT_FieldGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'groupItems'), CT_GroupItems, scope=CT_FieldGroup, documentation=u'OLAP Group Items'))

CT_FieldGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rangePr'), CT_RangePr, scope=CT_FieldGroup, documentation=u'Range Grouping Properties'))

CT_FieldGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'discretePr'), CT_DiscretePr, scope=CT_FieldGroup, documentation=u'Discrete Grouping Properties'))
CT_FieldGroup._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FieldGroup._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rangePr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FieldGroup._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'discretePr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_FieldGroup._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'groupItems')), min_occurs=0L, max_occurs=1)
    )
CT_FieldGroup._ContentModel = pyxb.binding.content.ParticleModel(CT_FieldGroup._GroupModel, min_occurs=1, max_occurs=1)



CT_Groups._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'group'), CT_LevelGroup, scope=CT_Groups, documentation=u'OLAP Group'))
CT_Groups._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Groups._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'group')), min_occurs=1, max_occurs=None)
    )
CT_Groups._ContentModel = pyxb.binding.content.ParticleModel(CT_Groups._GroupModel, min_occurs=1, max_occurs=1)



CT_QueryTableRefresh._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_QueryTableRefresh, documentation=u'Future Feature Data Storage Area'))

CT_QueryTableRefresh._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'queryTableFields'), CT_QueryTableFields, scope=CT_QueryTableRefresh, documentation=u'Query table fields'))

CT_QueryTableRefresh._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sortState'), CT_SortState, scope=CT_QueryTableRefresh, documentation=u'Sort State'))

CT_QueryTableRefresh._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'queryTableDeletedFields'), CT_QueryTableDeletedFields, scope=CT_QueryTableRefresh, documentation=u'Deleted Fields'))
CT_QueryTableRefresh._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_QueryTableRefresh._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'queryTableFields')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_QueryTableRefresh._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'queryTableDeletedFields')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_QueryTableRefresh._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sortState')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_QueryTableRefresh._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_QueryTableRefresh._ContentModel = pyxb.binding.content.ParticleModel(CT_QueryTableRefresh._GroupModel, min_occurs=1, max_occurs=1)



CT_RevisionMove._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rfmt'), CT_RevisionFormatting, scope=CT_RevisionMove, documentation=u'Revision Format'))

CT_RevisionMove._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rcc'), CT_RevisionCellChange, scope=CT_RevisionMove, documentation=u'Revision Cell Change'))

CT_RevisionMove._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'undo'), CT_UndoInfo, scope=CT_RevisionMove, documentation=u'Undo'))
CT_RevisionMove._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_RevisionMove._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'undo')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_RevisionMove._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rcc')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_RevisionMove._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rfmt')), min_occurs=0L, max_occurs=None)
    )
CT_RevisionMove._ContentModel = pyxb.binding.content.ParticleModel(CT_RevisionMove._GroupModel, min_occurs=0L, max_occurs=None)



CT_RowFields._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'field'), CT_Field, scope=CT_RowFields, documentation=u'Row Items'))
CT_RowFields._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RowFields._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'field')), min_occurs=1, max_occurs=None)
    )
CT_RowFields._ContentModel = pyxb.binding.content.ParticleModel(CT_RowFields._GroupModel, min_occurs=1, max_occurs=1)



CT_FutureMetadataBlock._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_FutureMetadataBlock, documentation=u'Future Feature Storage Area'))
CT_FutureMetadataBlock._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_FutureMetadataBlock._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_FutureMetadataBlock._ContentModel = pyxb.binding.content.ParticleModel(CT_FutureMetadataBlock._GroupModel, min_occurs=1, max_occurs=1)



CT_Sheets._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheet'), CT_Sheet, scope=CT_Sheets, documentation=u'Sheet Information'))
CT_Sheets._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Sheets._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheet')), min_occurs=1L, max_occurs=None)
    )
CT_Sheets._ContentModel = pyxb.binding.content.ParticleModel(CT_Sheets._GroupModel, min_occurs=1, max_occurs=1)



CT_Metadata._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'futureMetadata'), CT_FutureMetadata, scope=CT_Metadata, documentation=u'Future Metadata'))

CT_Metadata._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Metadata, documentation=u'Future Feature Storage Area'))

CT_Metadata._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cellMetadata'), CT_MetadataBlocks, scope=CT_Metadata, documentation=u'Cell Metadata'))

CT_Metadata._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'valueMetadata'), CT_MetadataBlocks, scope=CT_Metadata, documentation=u'Value Metadata'))

CT_Metadata._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'metadataStrings'), CT_MetadataStrings, scope=CT_Metadata, documentation=u'Metadata String Store'))

CT_Metadata._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'metadataTypes'), CT_MetadataTypes, scope=CT_Metadata, documentation=u'Metadata Types Collection'))

CT_Metadata._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'mdxMetadata'), CT_MdxMetadata, scope=CT_Metadata, documentation=u'MDX Metadata Information'))
CT_Metadata._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Metadata._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'metadataTypes')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Metadata._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'metadataStrings')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Metadata._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'mdxMetadata')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Metadata._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'futureMetadata')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Metadata._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cellMetadata')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Metadata._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'valueMetadata')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Metadata._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Metadata._ContentModel = pyxb.binding.content.ParticleModel(CT_Metadata._GroupModel, min_occurs=1, max_occurs=1)



CT_CacheHierarchy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_CacheHierarchy, documentation=u'Future Feature Data Storage Area'))

CT_CacheHierarchy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fieldsUsage'), CT_FieldsUsage, scope=CT_CacheHierarchy, documentation=u'Fields Usage'))

CT_CacheHierarchy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'groupLevels'), CT_GroupLevels, scope=CT_CacheHierarchy, documentation=u'OLAP Grouping Levels'))
CT_CacheHierarchy._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CacheHierarchy._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fieldsUsage')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CacheHierarchy._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'groupLevels')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_CacheHierarchy._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_CacheHierarchy._ContentModel = pyxb.binding.content.ParticleModel(CT_CacheHierarchy._GroupModel, min_occurs=1, max_occurs=1)



CT_Members._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'member'), CT_Member, scope=CT_Members, documentation=u'Member'))
CT_Members._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Members._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'member')), min_occurs=1, max_occurs=None)
    )
CT_Members._ContentModel = pyxb.binding.content.ParticleModel(CT_Members._GroupModel, min_occurs=1, max_occurs=1)



CT_RElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u't'), _s.ST_Xstring, scope=CT_RElt, documentation=u'Text'))

CT_RElt._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rPr'), CT_RPrElt, scope=CT_RElt, documentation=u'Run Properties'))
CT_RElt._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_RElt._UseForTag(pyxb.namespace.ExpandedName(Namespace, u't')), min_occurs=1L, max_occurs=1L)
    )
CT_RElt._ContentModel = pyxb.binding.content.ParticleModel(CT_RElt._GroupModel, min_occurs=1, max_occurs=1)



CT_CellStyleXfs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'xf'), CT_Xf, scope=CT_CellStyleXfs, documentation=u'Formatting Elements'))
CT_CellStyleXfs._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CellStyleXfs._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'xf')), min_occurs=1L, max_occurs=None)
    )
CT_CellStyleXfs._ContentModel = pyxb.binding.content.ParticleModel(CT_CellStyleXfs._GroupModel, min_occurs=1, max_occurs=1)



CT_ExternalDefinedNames._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'definedName'), CT_ExternalDefinedName, scope=CT_ExternalDefinedNames, documentation=u'Defined Name'))
CT_ExternalDefinedNames._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ExternalDefinedNames._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'definedName')), min_occurs=0L, max_occurs=None)
    )
CT_ExternalDefinedNames._ContentModel = pyxb.binding.content.ParticleModel(CT_ExternalDefinedNames._GroupModel, min_occurs=1, max_occurs=1)



CT_QueryTableFields._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'queryTableField'), CT_QueryTableField, scope=CT_QueryTableFields, documentation=u'QueryTable Field'))
CT_QueryTableFields._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_QueryTableFields._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'queryTableField')), min_occurs=0L, max_occurs=None)
    )
CT_QueryTableFields._ContentModel = pyxb.binding.content.ParticleModel(CT_QueryTableFields._GroupModel, min_occurs=1, max_occurs=1)



CT_TableStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tableStyleElement'), CT_TableStyleElement, scope=CT_TableStyle, documentation=u'Table Style'))
CT_TableStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableStyle._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tableStyleElement')), min_occurs=0L, max_occurs=None)
    )
CT_TableStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_TableStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_ObjectPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'anchor'), CT_ObjectAnchor, scope=CT_ObjectPr))
CT_ObjectPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ObjectPr._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'anchor')), min_occurs=1L, max_occurs=1L)
    )
CT_ObjectPr._ContentModel = pyxb.binding.content.ParticleModel(CT_ObjectPr._GroupModel, min_occurs=1, max_occurs=1)



CT_PCDSDTCEntries._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u's'), CT_String, scope=CT_PCDSDTCEntries, documentation=u'Character Value'))

CT_PCDSDTCEntries._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'e'), CT_Error, scope=CT_PCDSDTCEntries, documentation=u'Error Value'))

CT_PCDSDTCEntries._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'n'), CT_Number, scope=CT_PCDSDTCEntries, documentation=u'Numeric Value'))

CT_PCDSDTCEntries._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'm'), CT_Missing, scope=CT_PCDSDTCEntries, documentation=u'No Value'))
CT_PCDSDTCEntries._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_PCDSDTCEntries._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'm')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PCDSDTCEntries._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'n')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PCDSDTCEntries._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'e')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_PCDSDTCEntries._UseForTag(pyxb.namespace.ExpandedName(Namespace, u's')), min_occurs=1, max_occurs=1)
    )
CT_PCDSDTCEntries._ContentModel = pyxb.binding.content.ParticleModel(CT_PCDSDTCEntries._GroupModel, min_occurs=1, max_occurs=None)



CT_MdxTuple._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'n'), CT_MetadataStringIndex, scope=CT_MdxTuple, documentation=u'Member Unique Name Index'))
CT_MdxTuple._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MdxTuple._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'n')), min_occurs=0L, max_occurs=None)
    )
CT_MdxTuple._ContentModel = pyxb.binding.content.ParticleModel(CT_MdxTuple._GroupModel, min_occurs=1, max_occurs=1)



CT_Comments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Comments))

CT_Comments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'authors'), CT_Authors, scope=CT_Comments, documentation=u'Authors'))

CT_Comments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'commentList'), CT_CommentList, scope=CT_Comments, documentation=u'List of Comments'))
CT_Comments._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Comments._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'authors')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Comments._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'commentList')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Comments._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_Comments._ContentModel = pyxb.binding.content.ParticleModel(CT_Comments._GroupModel, min_occurs=1, max_occurs=1)



CT_GroupLevels._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'groupLevel'), CT_GroupLevel, scope=CT_GroupLevels, documentation=u'OLAP Grouping Levels'))
CT_GroupLevels._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GroupLevels._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'groupLevel')), min_occurs=1, max_occurs=None)
    )
CT_GroupLevels._ContentModel = pyxb.binding.content.ParticleModel(CT_GroupLevels._GroupModel, min_occurs=1, max_occurs=1)



CT_IndexedColors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rgbColor'), CT_RgbColor, scope=CT_IndexedColors, documentation=u'RGB Color'))
CT_IndexedColors._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_IndexedColors._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rgbColor')), min_occurs=1L, max_occurs=None)
    )
CT_IndexedColors._ContentModel = pyxb.binding.content.ParticleModel(CT_IndexedColors._GroupModel, min_occurs=1, max_occurs=1)



CT_Sets._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'set'), CT_Set, scope=CT_Sets, documentation=u'OLAP Set'))
CT_Sets._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Sets._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'set')), min_occurs=1, max_occurs=None)
    )
CT_Sets._ContentModel = pyxb.binding.content.ParticleModel(CT_Sets._GroupModel, min_occurs=1, max_occurs=1)



CT_ExternalSheetData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'row'), CT_ExternalRow, scope=CT_ExternalSheetData, documentation=u'Row'))
CT_ExternalSheetData._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ExternalSheetData._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'row')), min_occurs=0L, max_occurs=None)
    )
CT_ExternalSheetData._ContentModel = pyxb.binding.content.ParticleModel(CT_ExternalSheetData._GroupModel, min_occurs=1, max_occurs=1)



CT_PivotFilters._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'filter'), CT_PivotFilter, scope=CT_PivotFilters, documentation=u'PivotTable Advanced Filter'))
CT_PivotFilters._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PivotFilters._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'filter')), min_occurs=0L, max_occurs=None)
    )
CT_PivotFilters._ContentModel = pyxb.binding.content.ParticleModel(CT_PivotFilters._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomChartsheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'headerFooter'), CT_HeaderFooter, scope=CT_CustomChartsheetView))

CT_CustomChartsheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageMargins'), CT_PageMargins, scope=CT_CustomChartsheetView))

CT_CustomChartsheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageSetup'), CT_CsPageSetup, scope=CT_CustomChartsheetView, documentation=u'Chart Sheet Page Setup'))
CT_CustomChartsheetView._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomChartsheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageMargins')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomChartsheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageSetup')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomChartsheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'headerFooter')), min_occurs=0L, max_occurs=1L)
    )
CT_CustomChartsheetView._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomChartsheetView._GroupModel, min_occurs=1, max_occurs=1)



CT_TableColumn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_TableColumn, documentation=u'Future Feature Data Storage Area'))

CT_TableColumn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'calculatedColumnFormula'), CT_TableFormula, scope=CT_TableColumn, documentation=u'Calculated Column Formula'))

CT_TableColumn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'xmlColumnPr'), CT_XmlColumnPr, scope=CT_TableColumn, documentation=u'XML Column Properties'))

CT_TableColumn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'totalsRowFormula'), CT_TableFormula, scope=CT_TableColumn, documentation=u'Totals Row Formula'))
CT_TableColumn._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableColumn._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'calculatedColumnFormula')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableColumn._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'totalsRowFormula')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableColumn._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'xmlColumnPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_TableColumn._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_TableColumn._ContentModel = pyxb.binding.content.ParticleModel(CT_TableColumn._GroupModel, min_occurs=1, max_occurs=1)



CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheets'), CT_Sheets, scope=CT_Workbook, documentation=u'Sheets'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'bookViews'), CT_BookViews, scope=CT_Workbook, documentation=u'Workbook Views'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Workbook, documentation=u'Future Feature Data Storage Area'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'webPublishing'), CT_WebPublishing, scope=CT_Workbook, documentation=u'Web Publishing Properties'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'oleSize'), CT_OleSize, scope=CT_Workbook, documentation=u'Embedded Object Size'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fileRecoveryPr'), CT_FileRecoveryPr, scope=CT_Workbook, documentation=u'File Recovery Properties'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customWorkbookViews'), CT_CustomWorkbookViews, scope=CT_Workbook, documentation=u'Custom Workbook Views'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'webPublishObjects'), CT_WebPublishObjects, scope=CT_Workbook, documentation=u'Web Publish Objects'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'functionGroups'), CT_FunctionGroups, scope=CT_Workbook, documentation=u'Function Groups'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fileVersion'), CT_FileVersion, scope=CT_Workbook, documentation=u'File Version'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'calcPr'), CT_CalcPr, scope=CT_Workbook, documentation=u'Calculation Properties'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotCaches'), CT_PivotCaches, scope=CT_Workbook, documentation=u'PivotCaches'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalReferences'), CT_ExternalReferences, scope=CT_Workbook, documentation=u'External References'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'workbookPr'), CT_WorkbookPr, scope=CT_Workbook, documentation=u'Workbook Properties'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'smartTagPr'), CT_SmartTagPr, scope=CT_Workbook, documentation=u'Smart Tag Properties'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'definedNames'), CT_DefinedNames, scope=CT_Workbook, documentation=u'Defined Names'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'workbookProtection'), CT_WorkbookProtection, scope=CT_Workbook, documentation=u'Workbook Protection'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fileSharing'), CT_FileSharing, scope=CT_Workbook, documentation=u'File Sharing'))

CT_Workbook._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'smartTagTypes'), CT_SmartTagTypes, scope=CT_Workbook, documentation=u'Smart Tag Types'))
CT_Workbook._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fileVersion')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fileSharing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'workbookPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'workbookProtection')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'bookViews')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheets')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'functionGroups')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalReferences')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'definedNames')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'calcPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'oleSize')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customWorkbookViews')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pivotCaches')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'smartTagPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'smartTagTypes')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'webPublishing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fileRecoveryPr')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'webPublishObjects')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Workbook._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Workbook._ContentModel = pyxb.binding.content.ParticleModel(CT_Workbook._GroupModel, min_occurs=1, max_occurs=1)



CT_CellWatches._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cellWatch'), CT_CellWatch, scope=CT_CellWatches, documentation=u'Cell Watch Item'))
CT_CellWatches._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CellWatches._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cellWatch')), min_occurs=1L, max_occurs=None)
    )
CT_CellWatches._ContentModel = pyxb.binding.content.ParticleModel(CT_CellWatches._GroupModel, min_occurs=1, max_occurs=1)



CT_IconSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cfvo'), CT_Cfvo, scope=CT_IconSet, documentation=u'Conditional Formatting Object'))
CT_IconSet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_IconSet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cfvo')), min_occurs=2L, max_occurs=None)
    )
CT_IconSet._ContentModel = pyxb.binding.content.ParticleModel(CT_IconSet._GroupModel, min_occurs=1, max_occurs=1)



CT_DdeValues._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'value'), CT_DdeValue, scope=CT_DdeValues, documentation=u'Value'))
CT_DdeValues._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DdeValues._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'value')), min_occurs=1L, max_occurs=None)
    )
CT_DdeValues._ContentModel = pyxb.binding.content.ParticleModel(CT_DdeValues._GroupModel, min_occurs=1, max_occurs=1)



CT_AutoSortScope._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotArea'), CT_PivotArea, scope=CT_AutoSortScope, documentation=u'Auto Sort Scope'))
CT_AutoSortScope._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_AutoSortScope._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pivotArea')), min_occurs=1, max_occurs=1)
    )
CT_AutoSortScope._ContentModel = pyxb.binding.content.ParticleModel(CT_AutoSortScope._GroupModel, min_occurs=1, max_occurs=1)



CT_Pages._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'page'), CT_PCDSCPage, scope=CT_Pages, documentation=u'Page Items'))
CT_Pages._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Pages._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'page')), min_occurs=1L, max_occurs=4L)
    )
CT_Pages._ContentModel = pyxb.binding.content.ParticleModel(CT_Pages._GroupModel, min_occurs=1, max_occurs=1)



CT_Cfvo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Cfvo))
CT_Cfvo._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Cfvo._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Cfvo._ContentModel = pyxb.binding.content.ParticleModel(CT_Cfvo._GroupModel, min_occurs=1, max_occurs=1)



CT_RangeSets._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rangeSet'), CT_RangeSet, scope=CT_RangeSets, documentation=u'Range Set'))
CT_RangeSets._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RangeSets._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rangeSet')), min_occurs=1L, max_occurs=None)
    )
CT_RangeSets._ContentModel = pyxb.binding.content.ParticleModel(CT_RangeSets._GroupModel, min_occurs=1, max_occurs=1)



CT_colItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'i'), CT_I, scope=CT_colItems, documentation=u'Column Items'))
CT_colItems._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_colItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'i')), min_occurs=1, max_occurs=None)
    )
CT_colItems._ContentModel = pyxb.binding.content.ParticleModel(CT_colItems._GroupModel, min_occurs=1, max_occurs=1)



CT_DefinedNames._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'definedName'), CT_DefinedName, scope=CT_DefinedNames, documentation=u'Defined Name'))
CT_DefinedNames._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DefinedNames._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'definedName')), min_occurs=0L, max_occurs=None)
    )
CT_DefinedNames._ContentModel = pyxb.binding.content.ParticleModel(CT_DefinedNames._GroupModel, min_occurs=1, max_occurs=1)



CT_PivotSelection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotArea'), CT_PivotArea, scope=CT_PivotSelection, documentation=u'Pivot Area'))
CT_PivotSelection._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PivotSelection._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pivotArea')), min_occurs=1, max_occurs=1)
    )
CT_PivotSelection._ContentModel = pyxb.binding.content.ParticleModel(CT_PivotSelection._GroupModel, min_occurs=1, max_occurs=1)



CT_PivotCaches._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotCache'), CT_PivotCache, scope=CT_PivotCaches, documentation=u'PivotCache'))
CT_PivotCaches._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PivotCaches._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pivotCache')), min_occurs=1L, max_occurs=None)
    )
CT_PivotCaches._ContentModel = pyxb.binding.content.ParticleModel(CT_PivotCaches._GroupModel, min_occurs=1, max_occurs=1)



CT_RevisionHeaders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'header'), CT_RevisionHeader, scope=CT_RevisionHeaders, documentation=u'Header'))
CT_RevisionHeaders._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RevisionHeaders._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'header')), min_occurs=1L, max_occurs=None)
    )
CT_RevisionHeaders._ContentModel = pyxb.binding.content.ParticleModel(CT_RevisionHeaders._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomChartsheetViews._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customSheetView'), CT_CustomChartsheetView, scope=CT_CustomChartsheetViews, documentation=u'Custom Chart Sheet View'))
CT_CustomChartsheetViews._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomChartsheetViews._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customSheetView')), min_occurs=0L, max_occurs=None)
    )
CT_CustomChartsheetViews._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomChartsheetViews._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomWorkbookView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_CustomWorkbookView))
CT_CustomWorkbookView._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomWorkbookView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_CustomWorkbookView._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomWorkbookView._GroupModel, min_occurs=1, max_occurs=1)



CT_CellStyle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_CellStyle, documentation=u'Future Feature Data Storage Area'))
CT_CellStyle._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CellStyle._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_CellStyle._ContentModel = pyxb.binding.content.ParticleModel(CT_CellStyle._GroupModel, min_occurs=1, max_occurs=1)



CT_ExternalLink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'externalBook'), CT_ExternalBook, scope=CT_ExternalLink, documentation=u'External Workbook'))

CT_ExternalLink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ddeLink'), CT_DdeLink, scope=CT_ExternalLink, documentation=u'DDE Connection'))

CT_ExternalLink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'oleLink'), CT_OleLink, scope=CT_ExternalLink, documentation=u'Generic Object Link Connection'))

CT_ExternalLink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_ExternalLink))
CT_ExternalLink._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_ExternalLink._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'externalBook')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ExternalLink._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ddeLink')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ExternalLink._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'oleLink')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_ExternalLink._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_ExternalLink._ContentModel = pyxb.binding.content.ParticleModel(CT_ExternalLink._GroupModel, min_occurs=1, max_occurs=1)



CT_Map._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DataBinding'), CT_DataBinding, scope=CT_Map, documentation=u'XML Mapping'))
CT_Map._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Map._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'DataBinding')), min_occurs=0L, max_occurs=1L)
    )
CT_Map._ContentModel = pyxb.binding.content.ParticleModel(CT_Map._GroupModel, min_occurs=1, max_occurs=1)



CT_Control._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'controlPr'), CT_ControlPr, scope=CT_Control, documentation=u'Embedded Control Properties'))
CT_Control._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Control._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'controlPr')), min_occurs=0L, max_occurs=1L)
    )
CT_Control._ContentModel = pyxb.binding.content.ParticleModel(CT_Control._GroupModel, min_occurs=1, max_occurs=1)



CT_PivotCacheRecords._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_PivotCacheRecords, documentation=u'Future Feature Data Storage Area'))

CT_PivotCacheRecords._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'r'), CT_Record, scope=CT_PivotCacheRecords, documentation=u'PivotCache Record'))
CT_PivotCacheRecords._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PivotCacheRecords._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'r')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_PivotCacheRecords._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_PivotCacheRecords._ContentModel = pyxb.binding.content.ParticleModel(CT_PivotCacheRecords._GroupModel, min_occurs=1, max_occurs=1)



CT_IgnoredErrors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_IgnoredErrors))

CT_IgnoredErrors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ignoredError'), CT_IgnoredError, scope=CT_IgnoredErrors, documentation=u'Ignored Error'))
CT_IgnoredErrors._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_IgnoredErrors._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ignoredError')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_IgnoredErrors._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_IgnoredErrors._ContentModel = pyxb.binding.content.ParticleModel(CT_IgnoredErrors._GroupModel, min_occurs=1, max_occurs=1)



CT_PageField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_PageField, documentation=u'Future Feature Data Storage Area'))
CT_PageField._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PageField._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_PageField._ContentModel = pyxb.binding.content.ParticleModel(CT_PageField._GroupModel, min_occurs=0L, max_occurs=1)



CT_Dimensions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dimension'), CT_PivotDimension, scope=CT_Dimensions, documentation=u'OLAP Dimension'))
CT_Dimensions._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Dimensions._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dimension')), min_occurs=0L, max_occurs=None)
    )
CT_Dimensions._ContentModel = pyxb.binding.content.ParticleModel(CT_Dimensions._GroupModel, min_occurs=1, max_occurs=1)



CT_SharedItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'm'), CT_Missing, scope=CT_SharedItems, documentation=u'No Value'))

CT_SharedItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'd'), CT_DateTime, scope=CT_SharedItems, documentation=u'Date Time'))

CT_SharedItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u's'), CT_String, scope=CT_SharedItems, documentation=u'Character Value'))

CT_SharedItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'b'), CT_Boolean, scope=CT_SharedItems, documentation=u'Boolean'))

CT_SharedItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'n'), CT_Number, scope=CT_SharedItems, documentation=u'Numeric'))

CT_SharedItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'e'), CT_Error, scope=CT_SharedItems, documentation=u'Error Value'))
CT_SharedItems._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_SharedItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'm')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SharedItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'n')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SharedItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SharedItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'e')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SharedItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u's')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_SharedItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'd')), min_occurs=1L, max_occurs=1L)
    )
CT_SharedItems._ContentModel = pyxb.binding.content.ParticleModel(CT_SharedItems._GroupModel, min_occurs=0L, max_occurs=None)



CT_GroupMembers._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'groupMember'), CT_GroupMember, scope=CT_GroupMembers, documentation=u'OLAP Group Member'))
CT_GroupMembers._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GroupMembers._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'groupMember')), min_occurs=1, max_occurs=None)
    )
CT_GroupMembers._ContentModel = pyxb.binding.content.ParticleModel(CT_GroupMembers._GroupModel, min_occurs=1, max_occurs=1)


CT_DataBinding._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_strict, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), min_occurs=1, max_occurs=1)
    )
CT_DataBinding._ContentModel = pyxb.binding.content.ParticleModel(CT_DataBinding._GroupModel, min_occurs=1, max_occurs=1)



CT_ServerFormats._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'serverFormat'), CT_ServerFormat, scope=CT_ServerFormats, documentation=u'Server Format'))
CT_ServerFormats._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ServerFormats._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'serverFormat')), min_occurs=0L, max_occurs=None)
    )
CT_ServerFormats._ContentModel = pyxb.binding.content.ParticleModel(CT_ServerFormats._GroupModel, min_occurs=1, max_occurs=1)



CT_NumFmts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'numFmt'), CT_NumFmt, scope=CT_NumFmts, documentation=u'Number Formats'))
CT_NumFmts._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_NumFmts._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'numFmt')), min_occurs=0L, max_occurs=None)
    )
CT_NumFmts._ContentModel = pyxb.binding.content.ParticleModel(CT_NumFmts._GroupModel, min_occurs=1, max_occurs=1)



CT_OleLink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'oleItems'), CT_OleItems, scope=CT_OleLink, documentation=u'Object Link Items'))
CT_OleLink._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_OleLink._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'oleItems')), min_occurs=0L, max_occurs=1L)
    )
CT_OleLink._ContentModel = pyxb.binding.content.ParticleModel(CT_OleLink._GroupModel, min_occurs=1, max_occurs=1)



CT_Consolidation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rangeSets'), CT_RangeSets, scope=CT_Consolidation, documentation=u'Range Sets'))

CT_Consolidation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pages'), CT_Pages, scope=CT_Consolidation, documentation=u'Page Item Values'))
CT_Consolidation._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Consolidation._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pages')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Consolidation._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rangeSets')), min_occurs=1L, max_occurs=1L)
    )
CT_Consolidation._ContentModel = pyxb.binding.content.ParticleModel(CT_Consolidation._GroupModel, min_occurs=1, max_occurs=1)



CT_DataField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_DataField, documentation=u'Future Feature Data Storage Area'))
CT_DataField._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DataField._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_DataField._ContentModel = pyxb.binding.content.ParticleModel(CT_DataField._GroupModel, min_occurs=1, max_occurs=1)



CT_MdxMetadata._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'mdx'), CT_Mdx, scope=CT_MdxMetadata, documentation=u'MDX Metadata Record'))
CT_MdxMetadata._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MdxMetadata._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'mdx')), min_occurs=1L, max_occurs=None)
    )
CT_MdxMetadata._ContentModel = pyxb.binding.content.ParticleModel(CT_MdxMetadata._GroupModel, min_occurs=1, max_occurs=1)



CT_ChartFormat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotArea'), CT_PivotArea, scope=CT_ChartFormat, documentation=u'Pivot Table Location Rule'))
CT_ChartFormat._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ChartFormat._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pivotArea')), min_occurs=1, max_occurs=1)
    )
CT_ChartFormat._ContentModel = pyxb.binding.content.ParticleModel(CT_ChartFormat._GroupModel, min_occurs=1, max_occurs=1)



CT_ConditionalFormat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_ConditionalFormat))

CT_ConditionalFormat._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotAreas'), CT_PivotAreas, scope=CT_ConditionalFormat, documentation=u'Pivot Areas'))
CT_ConditionalFormat._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ConditionalFormat._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pivotAreas')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_ConditionalFormat._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_ConditionalFormat._ContentModel = pyxb.binding.content.ParticleModel(CT_ConditionalFormat._GroupModel, min_occurs=1, max_occurs=1)



CT_CellSmartTags._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cellSmartTag'), CT_CellSmartTag, scope=CT_CellSmartTags, documentation=u'Cell Smart Tag'))
CT_CellSmartTags._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CellSmartTags._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cellSmartTag')), min_occurs=1L, max_occurs=None)
    )
CT_CellSmartTags._ContentModel = pyxb.binding.content.ParticleModel(CT_CellSmartTags._GroupModel, min_occurs=1, max_occurs=1)



CT_Mdx._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u't'), CT_MdxTuple, scope=CT_Mdx, documentation=u'Tuple MDX Metadata'))

CT_Mdx._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ms'), CT_MdxSet, scope=CT_Mdx, documentation=u'Set MDX Metadata'))

CT_Mdx._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'k'), CT_MdxKPI, scope=CT_Mdx, documentation=u'KPI MDX Metadata'))

CT_Mdx._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'p'), CT_MdxMemeberProp, scope=CT_Mdx, documentation=u'Member Property MDX Metadata'))
CT_Mdx._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Mdx._UseForTag(pyxb.namespace.ExpandedName(Namespace, u't')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Mdx._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ms')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Mdx._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'p')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Mdx._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'k')), min_occurs=1, max_occurs=1)
    )
CT_Mdx._ContentModel = pyxb.binding.content.ParticleModel(CT_Mdx._GroupModel, min_occurs=1L, max_occurs=1L)



CT_GradientStop._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'color'), CT_Color, scope=CT_GradientStop, documentation=u'Color'))
CT_GradientStop._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_GradientStop._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'color')), min_occurs=1L, max_occurs=1L)
    )
CT_GradientStop._ContentModel = pyxb.binding.content.ParticleModel(CT_GradientStop._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomWorkbookViews._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customWorkbookView'), CT_CustomWorkbookView, scope=CT_CustomWorkbookViews, documentation=u'Custom Workbook View'))
CT_CustomWorkbookViews._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomWorkbookViews._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customWorkbookView')), min_occurs=1L, max_occurs=None)
    )
CT_CustomWorkbookViews._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomWorkbookViews._GroupModel, min_occurs=1, max_occurs=1)



CT_Record._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'm'), CT_Missing, scope=CT_Record, documentation=u'No Value'))

CT_Record._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'x'), CT_Index, scope=CT_Record, documentation=u'Shared Items Index'))

CT_Record._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'n'), CT_Number, scope=CT_Record, documentation=u'Numeric Value'))

CT_Record._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'd'), CT_DateTime, scope=CT_Record, documentation=u'Date Time'))

CT_Record._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'b'), CT_Boolean, scope=CT_Record, documentation=u'Boolean'))

CT_Record._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'e'), CT_Error, scope=CT_Record, documentation=u'Error Value'))

CT_Record._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u's'), CT_String, scope=CT_Record, documentation=u'Character Value'))
CT_Record._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_Record._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'm')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Record._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'n')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Record._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Record._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'e')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Record._UseForTag(pyxb.namespace.ExpandedName(Namespace, u's')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Record._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'd')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Record._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'x')), min_occurs=1, max_occurs=1)
    )
CT_Record._ContentModel = pyxb.binding.content.ParticleModel(CT_Record._GroupModel, min_occurs=1, max_occurs=None)



CT_GroupItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u's'), CT_String, scope=CT_GroupItems, documentation=u'Character Value'))

CT_GroupItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'n'), CT_Number, scope=CT_GroupItems, documentation=u'Numeric Value'))

CT_GroupItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'b'), CT_Boolean, scope=CT_GroupItems, documentation=u'Boolean'))

CT_GroupItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'm'), CT_Missing, scope=CT_GroupItems, documentation=u'No Value'))

CT_GroupItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'e'), CT_Error, scope=CT_GroupItems, documentation=u'Error Value'))

CT_GroupItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'd'), CT_DateTime, scope=CT_GroupItems, documentation=u'Date Time'))
CT_GroupItems._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_GroupItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'm')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GroupItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'n')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GroupItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'b')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GroupItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'e')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GroupItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u's')), min_occurs=1, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_GroupItems._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'd')), min_occurs=1, max_occurs=1)
    )
CT_GroupItems._ContentModel = pyxb.binding.content.ParticleModel(CT_GroupItems._GroupModel, min_occurs=1, max_occurs=None)



CT_Connections._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'connection'), CT_Connection, scope=CT_Connections, documentation=u'Connection'))
CT_Connections._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Connections._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'connection')), min_occurs=1L, max_occurs=None)
    )
CT_Connections._ContentModel = pyxb.binding.content.ParticleModel(CT_Connections._GroupModel, min_occurs=1, max_occurs=1)



CT_PhoneticRun._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u't'), _s.ST_Xstring, scope=CT_PhoneticRun, documentation=u'Text'))
CT_PhoneticRun._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PhoneticRun._UseForTag(pyxb.namespace.ExpandedName(Namespace, u't')), min_occurs=1L, max_occurs=1L)
    )
CT_PhoneticRun._ContentModel = pyxb.binding.content.ParticleModel(CT_PhoneticRun._GroupModel, min_occurs=1, max_occurs=1)



CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'autoFilter'), CT_AutoFilter, scope=CT_Macrosheet, documentation=u'AutoFilter'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataConsolidate'), CT_DataConsolidate, scope=CT_Macrosheet, documentation=u'Data Consolidation'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sortState'), CT_SortState, scope=CT_Macrosheet, documentation=u'Sort State'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customSheetViews'), CT_CustomSheetViews, scope=CT_Macrosheet, documentation=u'Custom Sheet Views'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'phoneticPr'), CT_PhoneticPr, scope=CT_Macrosheet, documentation=u'Phonetic Properties'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawing'), CT_LegacyDrawing, scope=CT_Macrosheet, documentation=u'Legacy Drawing Reference'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'conditionalFormatting'), CT_ConditionalFormatting, scope=CT_Macrosheet, documentation=u'Conditional Formatting'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dimension'), CT_SheetDimension, scope=CT_Macrosheet, documentation=u'Macro Sheet Dimensions'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'printOptions'), CT_PrintOptions, scope=CT_Macrosheet, documentation=u'Print Options'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageMargins'), CT_PageMargins, scope=CT_Macrosheet, documentation=u'Page Margins'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageSetup'), CT_PageSetup, scope=CT_Macrosheet, documentation=u'Page Setup Settings'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'headerFooter'), CT_HeaderFooter, scope=CT_Macrosheet, documentation=u'Header Footer Settings'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rowBreaks'), CT_PageBreak, scope=CT_Macrosheet, documentation=u'Horizontal Page Breaks (Row)'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customProperties'), CT_CustomProperties, scope=CT_Macrosheet, documentation=u'Custom Properties'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'drawing'), CT_Drawing, scope=CT_Macrosheet, documentation=u'Drawing'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'drawingHF'), CT_DrawingHF, scope=CT_Macrosheet))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetPr'), CT_SheetPr, scope=CT_Macrosheet, documentation=u'Sheet Properties'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawingHF'), CT_LegacyDrawing, scope=CT_Macrosheet, documentation=u'Legacy Drawing Header Footer'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetViews'), CT_SheetViews, scope=CT_Macrosheet, documentation=u'Macro Sheet Views'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colBreaks'), CT_PageBreak, scope=CT_Macrosheet, documentation=u'Vertical Page Breaks'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'picture'), CT_SheetBackgroundPicture, scope=CT_Macrosheet, documentation=u'Background Image'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetFormatPr'), CT_SheetFormatPr, scope=CT_Macrosheet, documentation=u'Sheet Format Properties'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'oleObjects'), CT_OleObjects, scope=CT_Macrosheet, documentation=u'Embedded Objects'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cols'), CT_Cols, scope=CT_Macrosheet, documentation=u'Column Information'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Macrosheet, documentation=u'Future Feature Data Storage Area'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetData'), CT_SheetData, scope=CT_Macrosheet, documentation=u'Sheet Data'))

CT_Macrosheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetProtection'), CT_SheetProtection, scope=CT_Macrosheet, documentation=u'Sheet Protection Options'))
CT_Macrosheet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dimension')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetViews')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetFormatPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cols')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetData')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetProtection')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'autoFilter')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sortState')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataConsolidate')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customSheetViews')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'phoneticPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'conditionalFormatting')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'printOptions')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageMargins')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageSetup')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'headerFooter')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rowBreaks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'colBreaks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customProperties')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'drawing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawingHF')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'drawingHF')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'picture')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'oleObjects')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Macrosheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_Macrosheet._ContentModel = pyxb.binding.content.ParticleModel(CT_Macrosheet._GroupModel, min_occurs=1, max_occurs=1)



CT_ProtectedRanges._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'protectedRange'), CT_ProtectedRange, scope=CT_ProtectedRanges, documentation=u'Protected Range'))
CT_ProtectedRanges._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ProtectedRanges._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'protectedRange')), min_occurs=1L, max_occurs=None)
    )
CT_ProtectedRanges._ContentModel = pyxb.binding.content.ParticleModel(CT_ProtectedRanges._GroupModel, min_occurs=1, max_occurs=1)



CT_ConditionalFormats._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'conditionalFormat'), CT_ConditionalFormat, scope=CT_ConditionalFormats, documentation=u'Conditional Formatting'))
CT_ConditionalFormats._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ConditionalFormats._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'conditionalFormat')), min_occurs=1, max_occurs=None)
    )
CT_ConditionalFormats._ContentModel = pyxb.binding.content.ParticleModel(CT_ConditionalFormats._GroupModel, min_occurs=1, max_occurs=1)



CT_Fills._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'fill'), CT_Fill, scope=CT_Fills, documentation=u'Fill'))
CT_Fills._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Fills._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'fill')), min_occurs=0L, max_occurs=None)
    )
CT_Fills._ContentModel = pyxb.binding.content.ParticleModel(CT_Fills._GroupModel, min_occurs=1, max_occurs=1)



CT_ReviewedRevisions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'reviewed'), CT_Reviewed, scope=CT_ReviewedRevisions, documentation=u'Reviewed'))
CT_ReviewedRevisions._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ReviewedRevisions._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'reviewed')), min_occurs=1L, max_occurs=None)
    )
CT_ReviewedRevisions._ContentModel = pyxb.binding.content.ParticleModel(CT_ReviewedRevisions._GroupModel, min_occurs=1, max_occurs=1)



CT_CalcChain._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_CalcChain))

CT_CalcChain._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'c'), CT_CalcCell, scope=CT_CalcChain, documentation=u'Cell'))
CT_CalcChain._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CalcChain._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'c')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_CalcChain._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_CalcChain._ContentModel = pyxb.binding.content.ParticleModel(CT_CalcChain._GroupModel, min_occurs=1, max_occurs=1)



CT_Dialogsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawingHF'), CT_LegacyDrawing, scope=CT_Dialogsheet, documentation=u'Legacy Drawing Header Footer'))

CT_Dialogsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageMargins'), CT_PageMargins, scope=CT_Dialogsheet, documentation=u'Page Margins'))

CT_Dialogsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetPr'), CT_SheetPr, scope=CT_Dialogsheet, documentation=u'Sheet Properties'))

CT_Dialogsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetViews'), CT_SheetViews, scope=CT_Dialogsheet, documentation=u'Dialog Sheet Views'))

CT_Dialogsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'drawingHF'), CT_DrawingHF, scope=CT_Dialogsheet))

CT_Dialogsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageSetup'), CT_PageSetup, scope=CT_Dialogsheet, documentation=u'Page Setup Settings'))

CT_Dialogsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'oleObjects'), CT_OleObjects, scope=CT_Dialogsheet))

CT_Dialogsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Dialogsheet, documentation=u'Future Feature Data Storage Area'))

CT_Dialogsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetFormatPr'), CT_SheetFormatPr, scope=CT_Dialogsheet, documentation=u'Dialog Sheet Format Properties'))

CT_Dialogsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'drawing'), CT_Drawing, scope=CT_Dialogsheet, documentation=u'Drawing'))

CT_Dialogsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'headerFooter'), CT_HeaderFooter, scope=CT_Dialogsheet, documentation=u'Header & Footer Settings'))

CT_Dialogsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customSheetViews'), CT_CustomSheetViews, scope=CT_Dialogsheet, documentation=u'Custom Sheet Views'))

CT_Dialogsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawing'), CT_LegacyDrawing, scope=CT_Dialogsheet, documentation=u'Legacy Drawing'))

CT_Dialogsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'printOptions'), CT_PrintOptions, scope=CT_Dialogsheet, documentation=u'Print Options'))

CT_Dialogsheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetProtection'), CT_SheetProtection, scope=CT_Dialogsheet, documentation=u'Sheet Protection'))
CT_Dialogsheet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Dialogsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Dialogsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetViews')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Dialogsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetFormatPr')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Dialogsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetProtection')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Dialogsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customSheetViews')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Dialogsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'printOptions')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Dialogsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageMargins')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Dialogsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageSetup')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Dialogsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'headerFooter')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Dialogsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'drawing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Dialogsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawing')), min_occurs=0L, max_occurs=1),
    pyxb.binding.content.ParticleModel(CT_Dialogsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawingHF')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Dialogsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'drawingHF')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Dialogsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'oleObjects')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Dialogsheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_Dialogsheet._ContentModel = pyxb.binding.content.ParticleModel(CT_Dialogsheet._GroupModel, min_occurs=1, max_occurs=1)



CT_TextPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'textFields'), CT_TextFields, scope=CT_TextPr, documentation=u'Fields'))
CT_TextPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TextPr._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textFields')), min_occurs=0L, max_occurs=1L)
    )
CT_TextPr._ContentModel = pyxb.binding.content.ParticleModel(CT_TextPr._GroupModel, min_occurs=1, max_occurs=1)



CT_LevelGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'groupMembers'), CT_GroupMembers, scope=CT_LevelGroup, documentation=u'OLAP Group Members'))
CT_LevelGroup._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_LevelGroup._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'groupMembers')), min_occurs=1, max_occurs=1)
    )
CT_LevelGroup._ContentModel = pyxb.binding.content.ParticleModel(CT_LevelGroup._GroupModel, min_occurs=1, max_occurs=1)



CT_XmlCellPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_XmlCellPr, documentation=u'Future Feature Data Storage Area'))

CT_XmlCellPr._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'xmlPr'), CT_XmlPr, scope=CT_XmlCellPr, documentation=u'Column XML Properties'))
CT_XmlCellPr._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_XmlCellPr._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'xmlPr')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_XmlCellPr._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_XmlCellPr._ContentModel = pyxb.binding.content.ParticleModel(CT_XmlCellPr._GroupModel, min_occurs=1, max_occurs=1)



CT_Connection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'olapPr'), CT_OlapPr, scope=CT_Connection, documentation=u'OLAP Properties'))

CT_Connection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'webPr'), CT_WebPr, scope=CT_Connection, documentation=u'Web Query Properties'))

CT_Connection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'textPr'), CT_TextPr, scope=CT_Connection, documentation=u'Text Import Settings'))

CT_Connection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dbPr'), CT_DbPr, scope=CT_Connection, documentation=u'Database Properties'))

CT_Connection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'parameters'), CT_Parameters, scope=CT_Connection, documentation=u'Query Parameters'))

CT_Connection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Connection, documentation=u'Future Feature Data Storage'))
CT_Connection._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Connection._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dbPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Connection._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'olapPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Connection._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'webPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Connection._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'textPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Connection._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'parameters')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Connection._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Connection._ContentModel = pyxb.binding.content.ParticleModel(CT_Connection._GroupModel, min_occurs=1, max_occurs=1)



CT_DataValidation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'formula2'), ST_Formula, scope=CT_DataValidation, documentation=u'Formula 2'))

CT_DataValidation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'formula1'), ST_Formula, scope=CT_DataValidation, documentation=u'Formula 1'))
CT_DataValidation._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DataValidation._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'formula1')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_DataValidation._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'formula2')), min_occurs=0L, max_occurs=1L)
    )
CT_DataValidation._ContentModel = pyxb.binding.content.ParticleModel(CT_DataValidation._GroupModel, min_occurs=1, max_occurs=1)



CT_RevisionRowColumn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rfmt'), CT_RevisionFormatting, scope=CT_RevisionRowColumn, documentation=u'Revision Format'))

CT_RevisionRowColumn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rcc'), CT_RevisionCellChange, scope=CT_RevisionRowColumn, documentation=u'Revised Row Column'))

CT_RevisionRowColumn._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'undo'), CT_UndoInfo, scope=CT_RevisionRowColumn, documentation=u'Undo'))
CT_RevisionRowColumn._GroupModel = pyxb.binding.content.GroupChoice(
    pyxb.binding.content.ParticleModel(CT_RevisionRowColumn._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'undo')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_RevisionRowColumn._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rcc')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_RevisionRowColumn._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rfmt')), min_occurs=0L, max_occurs=None)
    )
CT_RevisionRowColumn._ContentModel = pyxb.binding.content.ParticleModel(CT_RevisionRowColumn._GroupModel, min_occurs=0L, max_occurs=None)



CT_PivotFields._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotField'), CT_PivotField, scope=CT_PivotFields, documentation=u'PivotTable Field'))
CT_PivotFields._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PivotFields._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pivotField')), min_occurs=1, max_occurs=None)
    )
CT_PivotFields._ContentModel = pyxb.binding.content.ParticleModel(CT_PivotFields._GroupModel, min_occurs=1, max_occurs=1)



CT_CustomSheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageSetup'), CT_PageSetup, scope=CT_CustomSheetView, documentation=u'Page Setup Settings'))

CT_CustomSheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'autoFilter'), CT_AutoFilter, scope=CT_CustomSheetView, documentation=u'AutoFilter Settings'))

CT_CustomSheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'headerFooter'), CT_HeaderFooter, scope=CT_CustomSheetView, documentation=u'Header Footer Settings'))

CT_CustomSheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rowBreaks'), CT_PageBreak, scope=CT_CustomSheetView, documentation=u'Horizontal Page Breaks'))

CT_CustomSheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'selection'), CT_Selection, scope=CT_CustomSheetView, documentation=u'Selection'))

CT_CustomSheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colBreaks'), CT_PageBreak, scope=CT_CustomSheetView, documentation=u'Vertical Page Breaks'))

CT_CustomSheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_CustomSheetView))

CT_CustomSheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageMargins'), CT_PageMargins, scope=CT_CustomSheetView, documentation=u'Page Margins'))

CT_CustomSheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'printOptions'), CT_PrintOptions, scope=CT_CustomSheetView, documentation=u'Print Options'))

CT_CustomSheetView._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pane'), CT_Pane, scope=CT_CustomSheetView, documentation=u'Pane Split Information'))
CT_CustomSheetView._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CustomSheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pane')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomSheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'selection')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomSheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rowBreaks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomSheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'colBreaks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomSheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageMargins')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomSheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'printOptions')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomSheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageSetup')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomSheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'headerFooter')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomSheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'autoFilter')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_CustomSheetView._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1)
    )
CT_CustomSheetView._ContentModel = pyxb.binding.content.ParticleModel(CT_CustomSheetView._GroupModel, min_occurs=1, max_occurs=1)



CT_BookViews._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'workbookView'), CT_BookView, scope=CT_BookViews, documentation=u'Workbook View'))
CT_BookViews._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_BookViews._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'workbookView')), min_occurs=1L, max_occurs=None)
    )
CT_BookViews._ContentModel = pyxb.binding.content.ParticleModel(CT_BookViews._GroupModel, min_occurs=1, max_occurs=1)



CT_MemberProperties._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'mp'), CT_MemberProperty, scope=CT_MemberProperties, documentation=u'OLAP Member Property'))
CT_MemberProperties._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MemberProperties._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'mp')), min_occurs=1, max_occurs=None)
    )
CT_MemberProperties._ContentModel = pyxb.binding.content.ParticleModel(CT_MemberProperties._GroupModel, min_occurs=1, max_occurs=1)



CT_DdeItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'values'), CT_DdeValues, scope=CT_DdeItem, documentation=u'DDE Name Values'))
CT_DdeItem._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DdeItem._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'values')), min_occurs=0L, max_occurs=1L)
    )
CT_DdeItem._ContentModel = pyxb.binding.content.ParticleModel(CT_DdeItem._GroupModel, min_occurs=1, max_occurs=1)



CT_DataConsolidate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataRefs'), CT_DataRefs, scope=CT_DataConsolidate, documentation=u'Data Consolidation References'))
CT_DataConsolidate._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DataConsolidate._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataRefs')), min_occurs=0L, max_occurs=1L)
    )
CT_DataConsolidate._ContentModel = pyxb.binding.content.ParticleModel(CT_DataConsolidate._GroupModel, min_occurs=1, max_occurs=1)



CT_RowHierarchiesUsage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rowHierarchyUsage'), CT_HierarchyUsage, scope=CT_RowHierarchiesUsage, documentation=u'Row OLAP Hierarchies'))
CT_RowHierarchiesUsage._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_RowHierarchiesUsage._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rowHierarchyUsage')), min_occurs=1L, max_occurs=None)
    )
CT_RowHierarchiesUsage._ContentModel = pyxb.binding.content.ParticleModel(CT_RowHierarchiesUsage._GroupModel, min_occurs=1, max_occurs=1)



CT_Borders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'border'), CT_Border, scope=CT_Borders, documentation=u'Border'))
CT_Borders._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Borders._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'border')), min_occurs=0L, max_occurs=None)
    )
CT_Borders._ContentModel = pyxb.binding.content.ParticleModel(CT_Borders._GroupModel, min_occurs=1, max_occurs=1)



CT_ExternalSheetNames._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetName'), CT_ExternalSheetName, scope=CT_ExternalSheetNames, documentation=u'Sheet Name'))
CT_ExternalSheetNames._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_ExternalSheetNames._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetName')), min_occurs=1L, max_occurs=None)
    )
CT_ExternalSheetNames._ContentModel = pyxb.binding.content.ParticleModel(CT_ExternalSheetNames._GroupModel, min_occurs=1, max_occurs=1)



CT_Set._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sortByTuple'), CT_Tuples, scope=CT_Set, documentation=u'Sort By Tuple'))

CT_Set._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tpls'), CT_Tuples, scope=CT_Set, documentation=u'Tuples'))
CT_Set._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Set._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tpls')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Set._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sortByTuple')), min_occurs=0L, max_occurs=1)
    )
CT_Set._ContentModel = pyxb.binding.content.ParticleModel(CT_Set._GroupModel, min_occurs=1, max_occurs=1)



CT_PivotAreas._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pivotArea'), CT_PivotArea, scope=CT_PivotAreas, documentation=u'Pivot Area'))
CT_PivotAreas._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_PivotAreas._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pivotArea')), min_occurs=0L, max_occurs=None)
    )
CT_PivotAreas._ContentModel = pyxb.binding.content.ParticleModel(CT_PivotAreas._GroupModel, min_occurs=1, max_occurs=1)



CT_TableColumns._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tableColumn'), CT_TableColumn, scope=CT_TableColumns, documentation=u'Table Column'))
CT_TableColumns._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_TableColumns._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tableColumn')), min_occurs=1L, max_occurs=None)
    )
CT_TableColumns._ContentModel = pyxb.binding.content.ParticleModel(CT_TableColumns._GroupModel, min_occurs=1, max_occurs=1)



CT_CellStyles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cellStyle'), CT_CellStyle, scope=CT_CellStyles, documentation=u'Cell Style'))
CT_CellStyles._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_CellStyles._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cellStyle')), min_occurs=1L, max_occurs=None)
    )
CT_CellStyles._ContentModel = pyxb.binding.content.ParticleModel(CT_CellStyles._GroupModel, min_occurs=1, max_occurs=1)



CT_DataRefs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataRef'), CT_DataRef, scope=CT_DataRefs, documentation=u'Data Consolidation Reference'))
CT_DataRefs._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_DataRefs._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataRef')), min_occurs=0L, max_occurs=None)
    )
CT_DataRefs._ContentModel = pyxb.binding.content.ParticleModel(CT_DataRefs._GroupModel, min_occurs=1, max_occurs=1)



CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ignoredErrors'), CT_IgnoredErrors, scope=CT_Worksheet, documentation=u'Ignored Errors'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetProtection'), CT_SheetProtection, scope=CT_Worksheet, documentation=u'Sheet Protection'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetData'), CT_SheetData, scope=CT_Worksheet, documentation=u'Sheet Data'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'protectedRanges'), CT_ProtectedRanges, scope=CT_Worksheet, documentation=u'Protected Ranges'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'smartTags'), CT_SmartTags, scope=CT_Worksheet, documentation=u'Smart Tags'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'scenarios'), CT_Scenarios, scope=CT_Worksheet, documentation=u'Scenarios'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawing'), CT_LegacyDrawing, scope=CT_Worksheet, documentation=u'Legacy Drawing'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'autoFilter'), CT_AutoFilter, scope=CT_Worksheet, documentation=u'AutoFilter'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawingHF'), CT_LegacyDrawing, scope=CT_Worksheet, documentation=u'Legacy Drawing Header Footer'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'drawingHF'), CT_DrawingHF, scope=CT_Worksheet))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataConsolidate'), CT_DataConsolidate, scope=CT_Worksheet, documentation=u'Data Consolidate'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'oleObjects'), CT_OleObjects, scope=CT_Worksheet))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customSheetViews'), CT_CustomSheetViews, scope=CT_Worksheet, documentation=u'Custom Sheet Views'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'controls'), CT_Controls, scope=CT_Worksheet, documentation=u'Embedded Controls'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetViews'), CT_SheetViews, scope=CT_Worksheet, documentation=u'Sheet Views'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'mergeCells'), CT_MergeCells, scope=CT_Worksheet, documentation=u'Merge Cells'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'webPublishItems'), CT_WebPublishItems, scope=CT_Worksheet, documentation=u'Web Publishing Items'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'phoneticPr'), CT_PhoneticPr, scope=CT_Worksheet, documentation=u'Phonetic Properties'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'tableParts'), CT_TableParts, scope=CT_Worksheet, documentation=u'Table Parts'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'conditionalFormatting'), CT_ConditionalFormatting, scope=CT_Worksheet, documentation=u'Conditional Formatting'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'extLst'), CT_ExtensionList, scope=CT_Worksheet, documentation=u'Future Feature Data Storage Area'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dataValidations'), CT_DataValidations, scope=CT_Worksheet, documentation=u'Data Validations'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'hyperlinks'), CT_Hyperlinks, scope=CT_Worksheet, documentation=u'Hyperlinks'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sortState'), CT_SortState, scope=CT_Worksheet, documentation=u'Sort State'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetFormatPr'), CT_SheetFormatPr, scope=CT_Worksheet, documentation=u'Sheet Format Properties'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'printOptions'), CT_PrintOptions, scope=CT_Worksheet, documentation=u'Print Options'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetCalcPr'), CT_SheetCalcPr, scope=CT_Worksheet, documentation=u'Sheet Calculation Properties'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageMargins'), CT_PageMargins, scope=CT_Worksheet, documentation=u'Page Margins'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'sheetPr'), CT_SheetPr, scope=CT_Worksheet, documentation=u'Worksheet Properties'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'headerFooter'), CT_HeaderFooter, scope=CT_Worksheet, documentation=u'Header and Footer Settings'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'picture'), CT_SheetBackgroundPicture, scope=CT_Worksheet, documentation=u'Background Image'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'rowBreaks'), CT_PageBreak, scope=CT_Worksheet, documentation=u'Horizontal Page Breaks'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'pageSetup'), CT_PageSetup, scope=CT_Worksheet, documentation=u'Page Setup Settings'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'colBreaks'), CT_PageBreak, scope=CT_Worksheet, documentation=u'Vertical Page Breaks'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'dimension'), CT_SheetDimension, scope=CT_Worksheet, documentation=u'Worksheet Dimensions'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cols'), CT_Cols, scope=CT_Worksheet, documentation=u'Column Information'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'drawing'), CT_Drawing, scope=CT_Worksheet, documentation=u'Drawing'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'cellWatches'), CT_CellWatches, scope=CT_Worksheet, documentation=u'Cell Watch Items'))

CT_Worksheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'customProperties'), CT_CustomProperties, scope=CT_Worksheet, documentation=u'Custom Properties'))
CT_Worksheet._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dimension')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetViews')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetFormatPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cols')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetData')), min_occurs=1L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetCalcPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sheetProtection')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'protectedRanges')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'scenarios')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'autoFilter')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'sortState')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataConsolidate')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customSheetViews')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'mergeCells')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'phoneticPr')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'conditionalFormatting')), min_occurs=0L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'dataValidations')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'hyperlinks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'printOptions')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageMargins')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'pageSetup')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'headerFooter')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'rowBreaks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'colBreaks')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'customProperties')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'cellWatches')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'ignoredErrors')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'smartTags')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'drawing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawing')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'legacyDrawingHF')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'drawingHF')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'picture')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'oleObjects')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'controls')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'webPublishItems')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'tableParts')), min_occurs=0L, max_occurs=1L),
    pyxb.binding.content.ParticleModel(CT_Worksheet._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'extLst')), min_occurs=0L, max_occurs=1L)
    )
CT_Worksheet._ContentModel = pyxb.binding.content.ParticleModel(CT_Worksheet._GroupModel, min_occurs=1, max_occurs=1)



CT_Controls._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'control'), CT_Control, scope=CT_Controls, documentation=u'Embedded Control'))
CT_Controls._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_Controls._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'control')), min_occurs=1L, max_occurs=None)
    )
CT_Controls._ContentModel = pyxb.binding.content.ParticleModel(CT_Controls._GroupModel, min_occurs=1, max_occurs=1)



CT_MapInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Map'), CT_Map, scope=CT_MapInfo, documentation=u'XML Mapping Properties'))

CT_MapInfo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'Schema'), CT_Schema, scope=CT_MapInfo, documentation=u'XML Schema'))
CT_MapInfo._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_MapInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Schema')), min_occurs=1L, max_occurs=None),
    pyxb.binding.content.ParticleModel(CT_MapInfo._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'Map')), min_occurs=1L, max_occurs=None)
    )
CT_MapInfo._ContentModel = pyxb.binding.content.ParticleModel(CT_MapInfo._GroupModel, min_occurs=1, max_occurs=1)



CT_SmartTagTypes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'smartTagType'), CT_SmartTagType, scope=CT_SmartTagTypes, documentation=u'Smart Tag Type'))
CT_SmartTagTypes._GroupModel = pyxb.binding.content.GroupSequence(
    pyxb.binding.content.ParticleModel(CT_SmartTagTypes._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'smartTagType')), min_occurs=0L, max_occurs=None)
    )
CT_SmartTagTypes._ContentModel = pyxb.binding.content.ParticleModel(CT_SmartTagTypes._GroupModel, min_occurs=1, max_occurs=1)
